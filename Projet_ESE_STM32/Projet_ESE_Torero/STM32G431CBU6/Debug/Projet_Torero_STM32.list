
Projet_Torero_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d134  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  0800d318  0800d318  0000e318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8f8  0800d8f8  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d8f8  0800d8f8  0000e8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d900  0800d900  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d900  0800d900  0000e900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d904  0800d904  0000e904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d908  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004580  200001d8  0800dae0  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004758  0800dae0  0000f758  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e0eb  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004942  00000000  00000000  0002d2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab0  00000000  00000000  00031c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000149e  00000000  00000000  000336e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d48  00000000  00000000  00034b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000217a8  00000000  00000000  000578ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3f0e  00000000  00000000  00079076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014cf84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008420  00000000  00000000  0014cfc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  001553e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d2fc 	.word	0x0800d2fc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800d2fc 	.word	0x0800d2fc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001034:	b5b0      	push	{r4, r5, r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800103a:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <MX_FREERTOS_Init+0x2c>)
 800103c:	1d3c      	adds	r4, r7, #4
 800103e:	461d      	mov	r5, r3
 8001040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001044:	682b      	ldr	r3, [r5, #0]
 8001046:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f005 ffb8 	bl	8006fc2 <osThreadCreate>
 8001052:	4603      	mov	r3, r0
 8001054:	4a03      	ldr	r2, [pc, #12]	@ (8001064 <MX_FREERTOS_Init+0x30>)
 8001056:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001058:	bf00      	nop
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bdb0      	pop	{r4, r5, r7, pc}
 8001060:	0800d324 	.word	0x0800d324
 8001064:	200001f4 	.word	0x200001f4

08001068 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001070:	2001      	movs	r0, #1
 8001072:	f005 ffcd 	bl	8007010 <osDelay>
 8001076:	e7fb      	b.n	8001070 <StartDefaultTask+0x8>

08001078 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800107e:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <MX_DMA_Init+0x50>)
 8001080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001082:	4a11      	ldr	r2, [pc, #68]	@ (80010c8 <MX_DMA_Init+0x50>)
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	6493      	str	r3, [r2, #72]	@ 0x48
 800108a:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <MX_DMA_Init+0x50>)
 800108c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001096:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <MX_DMA_Init+0x50>)
 8001098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800109a:	4a0b      	ldr	r2, [pc, #44]	@ (80010c8 <MX_DMA_Init+0x50>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80010a2:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <MX_DMA_Init+0x50>)
 80010a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2105      	movs	r1, #5
 80010b2:	200b      	movs	r0, #11
 80010b4:	f001 faf7 	bl	80026a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010b8:	200b      	movs	r0, #11
 80010ba:	f001 fb0e 	bl	80026da <HAL_NVIC_EnableIRQ>

}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000

080010cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	4b72      	ldr	r3, [pc, #456]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	4a71      	ldr	r2, [pc, #452]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ee:	4b6f      	ldr	r3, [pc, #444]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010fa:	4b6c      	ldr	r3, [pc, #432]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a6b      	ldr	r2, [pc, #428]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 8001100:	f043 0320 	orr.w	r3, r3, #32
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b69      	ldr	r3, [pc, #420]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0320 	and.w	r3, r3, #32
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001112:	4b66      	ldr	r3, [pc, #408]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a65      	ldr	r2, [pc, #404]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 8001118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b63      	ldr	r3, [pc, #396]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	4b60      	ldr	r3, [pc, #384]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4a5f      	ldr	r2, [pc, #380]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001136:	4b5d      	ldr	r3, [pc, #372]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	4b5a      	ldr	r3, [pc, #360]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	4a59      	ldr	r2, [pc, #356]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114e:	4b57      	ldr	r3, [pc, #348]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	2120      	movs	r1, #32
 800115e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001162:	f001 fec9 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_NE_Pin|DEV_EN_LIDAR_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f248 0180 	movw	r1, #32896	@ 0x8080
 800116c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001170:	f001 fec2 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SE_Pin|LED_SW_Pin|Status_LED_Pin|Status_LED_debbug_Pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
 800117a:	484d      	ldr	r0, [pc, #308]	@ (80012b0 <MX_GPIO_Init+0x1e4>)
 800117c:	f001 febc 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M_EN_LIDAR_Pin|LED_NW_Pin|LED_W_Pin|LED_N_Pin
 8001180:	2200      	movs	r2, #0
 8001182:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 8001186:	484b      	ldr	r0, [pc, #300]	@ (80012b4 <MX_GPIO_Init+0x1e8>)
 8001188:	f001 feb6 	bl	8002ef8 <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_S_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT2_ACC_Pin;
 800118c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001192:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT2_ACC_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	4843      	ldr	r0, [pc, #268]	@ (80012b0 <MX_GPIO_Init+0x1e4>)
 80011a4:	f001 fd26 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 80011a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	483e      	ldr	r0, [pc, #248]	@ (80012b8 <MX_GPIO_Init+0x1ec>)
 80011be:	f001 fd19 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS_ACC_Pin|LED_NE_Pin|DEV_EN_LIDAR_Pin;
 80011c2:	f248 03a0 	movw	r3, #32928	@ 0x80a0
 80011c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011de:	f001 fd09 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_SE_Pin|LED_SW_Pin|Status_LED_Pin|Status_LED_debbug_Pin;
 80011e2:	f44f 6345 	mov.w	r3, #3152	@ 0xc50
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	482d      	ldr	r0, [pc, #180]	@ (80012b0 <MX_GPIO_Init+0x1e4>)
 80011fc:	f001 fcfa 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CAPTEUR_G_Pin|CAPTEUR_D_Pin;
 8001200:	2303      	movs	r3, #3
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001204:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	4827      	ldr	r0, [pc, #156]	@ (80012b4 <MX_GPIO_Init+0x1e8>)
 8001216:	f001 fced 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = M_EN_LIDAR_Pin|LED_NW_Pin|LED_W_Pin|LED_N_Pin
 800121a:	f241 03f4 	movw	r3, #4340	@ 0x10f4
 800121e:	617b      	str	r3, [r7, #20]
                          |LED_E_Pin|LED_S_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001220:	2301      	movs	r3, #1
 8001222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	4820      	ldr	r0, [pc, #128]	@ (80012b4 <MX_GPIO_Init+0x1e8>)
 8001234:	f001 fcde 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT1_ACC_Pin;
 8001238:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800123c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800123e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT1_ACC_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001252:	f001 fccf 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001256:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800125a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800125c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	4811      	ldr	r0, [pc, #68]	@ (80012b4 <MX_GPIO_Init+0x1e8>)
 800126e:	f001 fcc1 	bl	8002bf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2105      	movs	r1, #5
 8001276:	2006      	movs	r0, #6
 8001278:	f001 fa15 	bl	80026a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800127c:	2006      	movs	r0, #6
 800127e:	f001 fa2c 	bl	80026da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2105      	movs	r1, #5
 8001286:	2007      	movs	r0, #7
 8001288:	f001 fa0d 	bl	80026a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800128c:	2007      	movs	r0, #7
 800128e:	f001 fa24 	bl	80026da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2105      	movs	r1, #5
 8001296:	2028      	movs	r0, #40	@ 0x28
 8001298:	f001 fa05 	bl	80026a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800129c:	2028      	movs	r0, #40	@ 0x28
 800129e:	f001 fa1c 	bl	80026da <HAL_NVIC_EnableIRQ>

}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	@ 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000
 80012b0:	48000800 	.word	0x48000800
 80012b4:	48000400 	.word	0x48000400
 80012b8:	48001800 	.word	0x48001800

080012bc <__io_putchar>:
uint16_t frame_start = 0;
uint16_t frame_end = 0;



int __io_putchar(int chr){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 80012c4:	1d39      	adds	r1, r7, #4
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	2201      	movs	r2, #1
 80012cc:	4803      	ldr	r0, [pc, #12]	@ (80012dc <__io_putchar+0x20>)
 80012ce:	f004 fd89 	bl	8005de4 <HAL_UART_Transmit>
	return chr;
 80012d2:	687b      	ldr	r3, [r7, #4]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20001c1c 	.word	0x20001c1c

080012e0 <TaskETAT>:
			printf("%d : %d\r\n", i, pData[i]);
		}
	}
}

void TaskETAT(void * pvParameters){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	for (;;) {
		// Attendre que la notification arrive
		printf("hi\r\n");
 80012e8:	480f      	ldr	r0, [pc, #60]	@ (8001328 <TaskETAT+0x48>)
 80012ea:	f008 fbc3 	bl	8009a74 <puts>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80012ee:	f04f 31ff 	mov.w	r1, #4294967295
 80012f2:	2001      	movs	r0, #1
 80012f4:	f006 fcc0 	bl	8007c78 <ulTaskNotifyTake>
		//lire INT_SOURCEmet à 0 bit interruption single tap pour générer une nouvelle interruption au prochain tap
		uint8_t rst_int = SPI_Read(ADXL343_REG_INT_SOURCE);
 80012f8:	2030      	movs	r0, #48	@ 0x30
 80012fa:	f007 fa67 	bl	80087cc <SPI_Read>
 80012fe:	4603      	mov	r3, r0
 8001300:	73fb      	strb	r3, [r7, #15]
		if(chat == 1){
 8001302:	4b0a      	ldr	r3, [pc, #40]	@ (800132c <TaskETAT+0x4c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d106      	bne.n	8001318 <TaskETAT+0x38>
			chat = 0;
 800130a:	4b08      	ldr	r3, [pc, #32]	@ (800132c <TaskETAT+0x4c>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
			printf("Squik\r\n");
 8001310:	4807      	ldr	r0, [pc, #28]	@ (8001330 <TaskETAT+0x50>)
 8001312:	f008 fbaf 	bl	8009a74 <puts>
 8001316:	e7e7      	b.n	80012e8 <TaskETAT+0x8>
		}
		else{
			// Le choc a été détecté
			chat = 1;
 8001318:	4b04      	ldr	r3, [pc, #16]	@ (800132c <TaskETAT+0x4c>)
 800131a:	2201      	movs	r2, #1
 800131c:	601a      	str	r2, [r3, #0]
			printf("Miaou\r\n");
 800131e:	4805      	ldr	r0, [pc, #20]	@ (8001334 <TaskETAT+0x54>)
 8001320:	f008 fba8 	bl	8009a74 <puts>
	for (;;) {
 8001324:	e7e0      	b.n	80012e8 <TaskETAT+0x8>
 8001326:	bf00      	nop
 8001328:	0800d348 	.word	0x0800d348
 800132c:	20001a70 	.word	0x20001a70
 8001330:	0800d34c 	.word	0x0800d34c
 8001334:	0800d354 	.word	0x0800d354

08001338 <TaskMOTOR>:
		printf("lidar\r\n");
		vTaskDelay(100);
	}
}

void TaskMOTOR (void * pvParameters){
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	for(;;){

		Motor_Forward_R(50);
 8001340:	2032      	movs	r0, #50	@ 0x32
 8001342:	f007 fb0d 	bl	8008960 <Motor_Forward_R>
		Motor_Forward_L(50);
 8001346:	2032      	movs	r0, #50	@ 0x32
 8001348:	f007 fb72 	bl	8008a30 <Motor_Forward_L>
		Motor_Forward_R(75);
 800134c:	204b      	movs	r0, #75	@ 0x4b
 800134e:	f007 fb07 	bl	8008960 <Motor_Forward_R>
		Motor_Forward_L(75);
 8001352:	204b      	movs	r0, #75	@ 0x4b
 8001354:	f007 fb6c 	bl	8008a30 <Motor_Forward_L>
		Motor_Forward_R(50);
 8001358:	bf00      	nop
 800135a:	e7f1      	b.n	8001340 <TaskMOTOR+0x8>

0800135c <TaskEDGE>:
		int erreurLidar = 10/180;
		int alphaD = coeff_Lidar*erreurLidar-coeff_Capteur*erreur_capteur;
		int alphaG = -coeff_Lidar*erreurLidar+coeff_Capteur*erreur_capteur;
 */

void TaskEDGE(void * pvParameters){
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	for (;;) {

		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001364:	f04f 31ff 	mov.w	r1, #4294967295
 8001368:	2001      	movs	r0, #1
 800136a:	f006 fc85 	bl	8007c78 <ulTaskNotifyTake>
		Motor_Forward_R(0);
 800136e:	2000      	movs	r0, #0
 8001370:	f007 faf6 	bl	8008960 <Motor_Forward_R>
		Motor_Forward_L(0);
 8001374:	2000      	movs	r0, #0
 8001376:	f007 fb5b 	bl	8008a30 <Motor_Forward_L>
		HAL_Delay(10);
 800137a:	200a      	movs	r0, #10
 800137c:	f001 f896 	bl	80024ac <HAL_Delay>
		while((capteur_D||capteur_G)==1){
 8001380:	e008      	b.n	8001394 <TaskEDGE+0x38>

			Motor_Reverse_R(50);
 8001382:	2032      	movs	r0, #50	@ 0x32
 8001384:	f007 fb20 	bl	80089c8 <Motor_Reverse_R>
			Motor_Reverse_L(50);
 8001388:	2032      	movs	r0, #50	@ 0x32
 800138a:	f007 fb83 	bl	8008a94 <Motor_Reverse_L>
			HAL_Delay(200);
 800138e:	20c8      	movs	r0, #200	@ 0xc8
 8001390:	f001 f88c 	bl	80024ac <HAL_Delay>
		while((capteur_D||capteur_G)==1){
 8001394:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <TaskEDGE+0x90>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d103      	bne.n	80013a4 <TaskEDGE+0x48>
 800139c:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <TaskEDGE+0x94>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <TaskEDGE+0x4c>
 80013a4:	2301      	movs	r3, #1
 80013a6:	e000      	b.n	80013aa <TaskEDGE+0x4e>
 80013a8:	2300      	movs	r3, #0
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d0e9      	beq.n	8001382 <TaskEDGE+0x26>
		}
		for (int i=0;i<4;i++){
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	e016      	b.n	80013e2 <TaskEDGE+0x86>
			Motor_Reverse_R(50-10*i);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f06f 0209 	mvn.w	r2, #9
 80013ba:	fb02 f303 	mul.w	r3, r2, r3
 80013be:	3332      	adds	r3, #50	@ 0x32
 80013c0:	4618      	mov	r0, r3
 80013c2:	f007 fb01 	bl	80089c8 <Motor_Reverse_R>
			Motor_Forward_L(0+10*i);
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4618      	mov	r0, r3
 80013d2:	f007 fb2d 	bl	8008a30 <Motor_Forward_L>
			HAL_Delay(100);
 80013d6:	2064      	movs	r0, #100	@ 0x64
 80013d8:	f001 f868 	bl	80024ac <HAL_Delay>
		for (int i=0;i<4;i++){
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	3301      	adds	r3, #1
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2b03      	cmp	r3, #3
 80013e6:	dde5      	ble.n	80013b4 <TaskEDGE+0x58>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80013e8:	e7bc      	b.n	8001364 <TaskEDGE+0x8>
 80013ea:	bf00      	nop
 80013ec:	20001a6c 	.word	0x20001a6c
 80013f0:	20001a68 	.word	0x20001a68

080013f4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013fa:	f000 ffe6 	bl	80023ca <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013fe:	f000 f8c1 	bl	8001584 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001402:	f7ff fe63 	bl	80010cc <MX_GPIO_Init>
	MX_DMA_Init();
 8001406:	f7ff fe37 	bl	8001078 <MX_DMA_Init>
	MX_SPI2_Init();
 800140a:	f000 f983 	bl	8001714 <MX_SPI2_Init>
	MX_TIM1_Init();
 800140e:	f000 fb51 	bl	8001ab4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001412:	f000 fbed 	bl	8001bf0 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001416:	f000 fc4f 	bl	8001cb8 <MX_TIM3_Init>
	MX_TIM4_Init();
 800141a:	f000 fca3 	bl	8001d64 <MX_TIM4_Init>
	MX_USART2_UART_Init();
 800141e:	f000 fe4d 	bl	80020bc <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001422:	f000 fe97 	bl	8002154 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	Start_Motors();
 8001426:	f007 fb67 	bl	8008af8 <Start_Motors>
	Motor_Forward_R(50);
 800142a:	2032      	movs	r0, #50	@ 0x32
 800142c:	f007 fa98 	bl	8008960 <Motor_Forward_R>
	Motor_Forward_L(50);
 8001430:	2032      	movs	r0, #50	@ 0x32
 8001432:	f007 fafd 	bl	8008a30 <Motor_Forward_L>
	ADXL343_Init();
 8001436:	f007 f9f9 	bl	800882c <ADXL343_Init>
	LIDAR_Init(&hlidar);
 800143a:	483d      	ldr	r0, [pc, #244]	@ (8001530 <main+0x13c>)
 800143c:	f007 fa5a 	bl	80088f4 <LIDAR_Init>
	LIDAR_Start(&hlidar);
 8001440:	483b      	ldr	r0, [pc, #236]	@ (8001530 <main+0x13c>)
 8001442:	f007 fa67 	bl	8008914 <LIDAR_Start>

	ret = xTaskCreate(TaskETAT,"TaskETAT",STACK_SIZE,(void *) NULL,5,&xHandleETAT);
 8001446:	4b3b      	ldr	r3, [pc, #236]	@ (8001534 <main+0x140>)
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	2305      	movs	r3, #5
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2300      	movs	r3, #0
 8001450:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001454:	4938      	ldr	r1, [pc, #224]	@ (8001538 <main+0x144>)
 8001456:	4839      	ldr	r0, [pc, #228]	@ (800153c <main+0x148>)
 8001458:	f005 ff62 	bl	8007320 <xTaskCreate>
 800145c:	4603      	mov	r3, r0
 800145e:	4a38      	ldr	r2, [pc, #224]	@ (8001540 <main+0x14c>)
 8001460:	6013      	str	r3, [r2, #0]
	if (ret != pdPASS)
 8001462:	4b37      	ldr	r3, [pc, #220]	@ (8001540 <main+0x14c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d004      	beq.n	8001474 <main+0x80>
	{
		printf("Error creating TaskETAT\r\n");
 800146a:	4836      	ldr	r0, [pc, #216]	@ (8001544 <main+0x150>)
 800146c:	f008 fb02 	bl	8009a74 <puts>
		Error_Handler();
 8001470:	f000 f94a 	bl	8001708 <Error_Handler>
	}
	printf("Task ETAT created\r\n");
 8001474:	4834      	ldr	r0, [pc, #208]	@ (8001548 <main+0x154>)
 8001476:	f008 fafd 	bl	8009a74 <puts>
		Error_Handler();
	}
	printf("Task LIDAR created\r\n");
	 */

	ret = xTaskCreate(TaskMOTOR,"TaskMOTOR",STACK_SIZE,(void *) NULL,3,&xHandleMOTOR);
 800147a:	4b34      	ldr	r3, [pc, #208]	@ (800154c <main+0x158>)
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	2303      	movs	r3, #3
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2300      	movs	r3, #0
 8001484:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001488:	4931      	ldr	r1, [pc, #196]	@ (8001550 <main+0x15c>)
 800148a:	4832      	ldr	r0, [pc, #200]	@ (8001554 <main+0x160>)
 800148c:	f005 ff48 	bl	8007320 <xTaskCreate>
 8001490:	4603      	mov	r3, r0
 8001492:	4a2b      	ldr	r2, [pc, #172]	@ (8001540 <main+0x14c>)
 8001494:	6013      	str	r3, [r2, #0]
	if (ret != pdPASS)
 8001496:	4b2a      	ldr	r3, [pc, #168]	@ (8001540 <main+0x14c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d004      	beq.n	80014a8 <main+0xb4>
	{
		printf("Error creating TaskMOTOR\r\n");
 800149e:	482e      	ldr	r0, [pc, #184]	@ (8001558 <main+0x164>)
 80014a0:	f008 fae8 	bl	8009a74 <puts>
		Error_Handler();
 80014a4:	f000 f930 	bl	8001708 <Error_Handler>
	}
	printf("Task MOTOR created\r\n");
 80014a8:	482c      	ldr	r0, [pc, #176]	@ (800155c <main+0x168>)
 80014aa:	f008 fae3 	bl	8009a74 <puts>


	ret = xTaskCreate(TaskEDGE,"TaskEDGE",STACK_SIZE,(void *) NULL,4,&xHandleEDGE);
 80014ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001560 <main+0x16c>)
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	2304      	movs	r3, #4
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2300      	movs	r3, #0
 80014b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014bc:	4929      	ldr	r1, [pc, #164]	@ (8001564 <main+0x170>)
 80014be:	482a      	ldr	r0, [pc, #168]	@ (8001568 <main+0x174>)
 80014c0:	f005 ff2e 	bl	8007320 <xTaskCreate>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001540 <main+0x14c>)
 80014c8:	6013      	str	r3, [r2, #0]
	if (ret != pdPASS)
 80014ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001540 <main+0x14c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d004      	beq.n	80014dc <main+0xe8>
	{
		printf("Error creating TaskEDGE\r\n");
 80014d2:	4826      	ldr	r0, [pc, #152]	@ (800156c <main+0x178>)
 80014d4:	f008 face 	bl	8009a74 <puts>
		Error_Handler();
 80014d8:	f000 f916 	bl	8001708 <Error_Handler>
	}
	printf("Task EDGE created\r\n");
 80014dc:	4824      	ldr	r0, [pc, #144]	@ (8001570 <main+0x17c>)
 80014de:	f008 fac9 	bl	8009a74 <puts>

	SemDMAHalfCallBack = xSemaphoreCreateBinary();
 80014e2:	2203      	movs	r2, #3
 80014e4:	2100      	movs	r1, #0
 80014e6:	2001      	movs	r0, #1
 80014e8:	f005 fec4 	bl	8007274 <xQueueGenericCreate>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4a21      	ldr	r2, [pc, #132]	@ (8001574 <main+0x180>)
 80014f0:	6013      	str	r3, [r2, #0]
	SemDMAClpCallBack = xSemaphoreCreateBinary();
 80014f2:	2203      	movs	r2, #3
 80014f4:	2100      	movs	r1, #0
 80014f6:	2001      	movs	r0, #1
 80014f8:	f005 febc 	bl	8007274 <xQueueGenericCreate>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001578 <main+0x184>)
 8001500:	6013      	str	r3, [r2, #0]
	xShockSemaphore = xSemaphoreCreateBinary();
 8001502:	2203      	movs	r2, #3
 8001504:	2100      	movs	r1, #0
 8001506:	2001      	movs	r0, #1
 8001508:	f005 feb4 	bl	8007274 <xQueueGenericCreate>
 800150c:	4603      	mov	r3, r0
 800150e:	4a1b      	ldr	r2, [pc, #108]	@ (800157c <main+0x188>)
 8001510:	6013      	str	r3, [r2, #0]
	SemEtat = xSemaphoreCreateBinary();
 8001512:	2203      	movs	r2, #3
 8001514:	2100      	movs	r1, #0
 8001516:	2001      	movs	r0, #1
 8001518:	f005 feac 	bl	8007274 <xQueueGenericCreate>
 800151c:	4603      	mov	r3, r0
 800151e:	4a18      	ldr	r2, [pc, #96]	@ (8001580 <main+0x18c>)
 8001520:	6013      	str	r3, [r2, #0]
	//xNoSignalSemaphore = xSemaphoreCreateBinary();
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8001522:	f7ff fd87 	bl	8001034 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8001526:	f005 fd45 	bl	8006fb4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800152a:	bf00      	nop
 800152c:	e7fd      	b.n	800152a <main+0x136>
 800152e:	bf00      	nop
 8001530:	200001f8 	.word	0x200001f8
 8001534:	20001a58 	.word	0x20001a58
 8001538:	0800d364 	.word	0x0800d364
 800153c:	080012e1 	.word	0x080012e1
 8001540:	20001a64 	.word	0x20001a64
 8001544:	0800d370 	.word	0x0800d370
 8001548:	0800d38c 	.word	0x0800d38c
 800154c:	20001a5c 	.word	0x20001a5c
 8001550:	0800d3a0 	.word	0x0800d3a0
 8001554:	08001339 	.word	0x08001339
 8001558:	0800d3ac 	.word	0x0800d3ac
 800155c:	0800d3c8 	.word	0x0800d3c8
 8001560:	20001a60 	.word	0x20001a60
 8001564:	0800d3dc 	.word	0x0800d3dc
 8001568:	0800135d 	.word	0x0800135d
 800156c:	0800d3e8 	.word	0x0800d3e8
 8001570:	0800d404 	.word	0x0800d404
 8001574:	20001a7c 	.word	0x20001a7c
 8001578:	20001a80 	.word	0x20001a80
 800157c:	20001a78 	.word	0x20001a78
 8001580:	20001a74 	.word	0x20001a74

08001584 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b094      	sub	sp, #80	@ 0x50
 8001588:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158a:	f107 0318 	add.w	r3, r7, #24
 800158e:	2238      	movs	r2, #56	@ 0x38
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f008 fb6e 	bl	8009c74 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80015aa:	f001 fcef 	bl	8002f8c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015ae:	2301      	movs	r3, #1
 80015b0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015b6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015bc:	f107 0318 	add.w	r3, r7, #24
 80015c0:	4618      	mov	r0, r3
 80015c2:	f001 fd97 	bl	80030f4 <HAL_RCC_OscConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <SystemClock_Config+0x4c>
	{
		Error_Handler();
 80015cc:	f000 f89c 	bl	8001708 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d0:	230f      	movs	r3, #15
 80015d2:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80015d4:	2302      	movs	r3, #2
 80015d6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f002 f895 	bl	8003718 <HAL_RCC_ClockConfig>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <SystemClock_Config+0x74>
	{
		Error_Handler();
 80015f4:	f000 f888 	bl	8001708 <Error_Handler>
	}
}
 80015f8:	bf00      	nop
 80015fa:	3750      	adds	r7, #80	@ 0x50
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == INT1_ACC_Pin) {
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001610:	d119      	bne.n	8001646 <HAL_GPIO_EXTI_Callback+0x46>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
		vTaskNotifyGiveFromISR(xHandleETAT, &xHigherPriorityTaskWoken);
 8001616:	4b34      	ldr	r3, [pc, #208]	@ (80016e8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f107 0214 	add.w	r2, r7, #20
 800161e:	4611      	mov	r1, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f006 fb71 	bl	8007d08 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d007      	beq.n	800163c <HAL_GPIO_EXTI_Callback+0x3c>
 800162c:	4b2f      	ldr	r3, [pc, #188]	@ (80016ec <HAL_GPIO_EXTI_Callback+0xec>)
 800162e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	f3bf 8f4f 	dsb	sy
 8001638:	f3bf 8f6f 	isb	sy
		HAL_GPIO_TogglePin(GPIOC, Status_LED_Pin);
 800163c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001640:	482b      	ldr	r0, [pc, #172]	@ (80016f0 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001642:	f001 fc71 	bl	8002f28 <HAL_GPIO_TogglePin>
	}
	if (GPIO_Pin == CAPTEUR_D_Pin) {
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d122      	bne.n	8001692 <HAL_GPIO_EXTI_Callback+0x92>
		if(capteur_D==1){
 800164c:	4b29      	ldr	r3, [pc, #164]	@ (80016f4 <HAL_GPIO_EXTI_Callback+0xf4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d103      	bne.n	800165c <HAL_GPIO_EXTI_Callback+0x5c>
			capteur_D=0;
 8001654:	4b27      	ldr	r3, [pc, #156]	@ (80016f4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	e002      	b.n	8001662 <HAL_GPIO_EXTI_Callback+0x62>
		}
		else{
			capteur_D=1;
 800165c:	4b25      	ldr	r3, [pc, #148]	@ (80016f4 <HAL_GPIO_EXTI_Callback+0xf4>)
 800165e:	2201      	movs	r2, #1
 8001660:	601a      	str	r2, [r3, #0]
		}
		printf("capteurD\r\n");
 8001662:	4825      	ldr	r0, [pc, #148]	@ (80016f8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001664:	f008 fa06 	bl	8009a74 <puts>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001668:	2300      	movs	r3, #0
 800166a:	613b      	str	r3, [r7, #16]
		vTaskNotifyGiveFromISR(xHandleEDGE, &xHigherPriorityTaskWoken);
 800166c:	4b23      	ldr	r3, [pc, #140]	@ (80016fc <HAL_GPIO_EXTI_Callback+0xfc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f107 0210 	add.w	r2, r7, #16
 8001674:	4611      	mov	r1, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f006 fb46 	bl	8007d08 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d007      	beq.n	8001692 <HAL_GPIO_EXTI_Callback+0x92>
 8001682:	4b1a      	ldr	r3, [pc, #104]	@ (80016ec <HAL_GPIO_EXTI_Callback+0xec>)
 8001684:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	f3bf 8f4f 	dsb	sy
 800168e:	f3bf 8f6f 	isb	sy
	}
	if (GPIO_Pin == CAPTEUR_G_Pin) {
 8001692:	88fb      	ldrh	r3, [r7, #6]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d122      	bne.n	80016de <HAL_GPIO_EXTI_Callback+0xde>
		if(capteur_G==1){
 8001698:	4b19      	ldr	r3, [pc, #100]	@ (8001700 <HAL_GPIO_EXTI_Callback+0x100>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d103      	bne.n	80016a8 <HAL_GPIO_EXTI_Callback+0xa8>
			capteur_G=0;
 80016a0:	4b17      	ldr	r3, [pc, #92]	@ (8001700 <HAL_GPIO_EXTI_Callback+0x100>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	e002      	b.n	80016ae <HAL_GPIO_EXTI_Callback+0xae>
		}
		else{
			capteur_G=1;
 80016a8:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <HAL_GPIO_EXTI_Callback+0x100>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	601a      	str	r2, [r3, #0]
		}
		printf("capteurG\r\n");
 80016ae:	4815      	ldr	r0, [pc, #84]	@ (8001704 <HAL_GPIO_EXTI_Callback+0x104>)
 80016b0:	f008 f9e0 	bl	8009a74 <puts>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
		vTaskNotifyGiveFromISR(xHandleEDGE, &xHigherPriorityTaskWoken);
 80016b8:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <HAL_GPIO_EXTI_Callback+0xfc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f107 020c 	add.w	r2, r7, #12
 80016c0:	4611      	mov	r1, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f006 fb20 	bl	8007d08 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d007      	beq.n	80016de <HAL_GPIO_EXTI_Callback+0xde>
 80016ce:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <HAL_GPIO_EXTI_Callback+0xec>)
 80016d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	f3bf 8f4f 	dsb	sy
 80016da:	f3bf 8f6f 	isb	sy
	}
}
 80016de:	bf00      	nop
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20001a58 	.word	0x20001a58
 80016ec:	e000ed04 	.word	0xe000ed04
 80016f0:	48000800 	.word	0x48000800
 80016f4:	20001a6c 	.word	0x20001a6c
 80016f8:	0800d418 	.word	0x0800d418
 80016fc:	20001a60 	.word	0x20001a60
 8001700:	20001a68 	.word	0x20001a68
 8001704:	0800d424 	.word	0x0800d424

08001708 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800170c:	b672      	cpsid	i
}
 800170e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <Error_Handler+0x8>

08001714 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001718:	4b1b      	ldr	r3, [pc, #108]	@ (8001788 <MX_SPI2_Init+0x74>)
 800171a:	4a1c      	ldr	r2, [pc, #112]	@ (800178c <MX_SPI2_Init+0x78>)
 800171c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800171e:	4b1a      	ldr	r3, [pc, #104]	@ (8001788 <MX_SPI2_Init+0x74>)
 8001720:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001724:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001726:	4b18      	ldr	r3, [pc, #96]	@ (8001788 <MX_SPI2_Init+0x74>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800172c:	4b16      	ldr	r3, [pc, #88]	@ (8001788 <MX_SPI2_Init+0x74>)
 800172e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001732:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001734:	4b14      	ldr	r3, [pc, #80]	@ (8001788 <MX_SPI2_Init+0x74>)
 8001736:	2202      	movs	r2, #2
 8001738:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800173a:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <MX_SPI2_Init+0x74>)
 800173c:	2201      	movs	r2, #1
 800173e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001740:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <MX_SPI2_Init+0x74>)
 8001742:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001746:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001748:	4b0f      	ldr	r3, [pc, #60]	@ (8001788 <MX_SPI2_Init+0x74>)
 800174a:	2218      	movs	r2, #24
 800174c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800174e:	4b0e      	ldr	r3, [pc, #56]	@ (8001788 <MX_SPI2_Init+0x74>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001754:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <MX_SPI2_Init+0x74>)
 8001756:	2200      	movs	r2, #0
 8001758:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800175a:	4b0b      	ldr	r3, [pc, #44]	@ (8001788 <MX_SPI2_Init+0x74>)
 800175c:	2200      	movs	r2, #0
 800175e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001760:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <MX_SPI2_Init+0x74>)
 8001762:	2207      	movs	r2, #7
 8001764:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001766:	4b08      	ldr	r3, [pc, #32]	@ (8001788 <MX_SPI2_Init+0x74>)
 8001768:	2200      	movs	r2, #0
 800176a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800176c:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <MX_SPI2_Init+0x74>)
 800176e:	2200      	movs	r2, #0
 8001770:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001772:	4805      	ldr	r0, [pc, #20]	@ (8001788 <MX_SPI2_Init+0x74>)
 8001774:	f002 fbd8 	bl	8003f28 <HAL_SPI_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800177e:	f7ff ffc3 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20001a84 	.word	0x20001a84
 800178c:	40003800 	.word	0x40003800

08001790 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	@ 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a17      	ldr	r2, [pc, #92]	@ (800180c <HAL_SPI_MspInit+0x7c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d128      	bne.n	8001804 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017b2:	4b17      	ldr	r3, [pc, #92]	@ (8001810 <HAL_SPI_MspInit+0x80>)
 80017b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b6:	4a16      	ldr	r2, [pc, #88]	@ (8001810 <HAL_SPI_MspInit+0x80>)
 80017b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80017be:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <HAL_SPI_MspInit+0x80>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <HAL_SPI_MspInit+0x80>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ce:	4a10      	ldr	r2, [pc, #64]	@ (8001810 <HAL_SPI_MspInit+0x80>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <HAL_SPI_MspInit+0x80>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_TO_SCLK_ACC_Pin|SPI2_MISO_TO_SDO_ACC_Pin|SPI2_MOSI_TO_SDI_ACC_Pin;
 80017e2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80017e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017f4:	2305      	movs	r3, #5
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	4619      	mov	r1, r3
 80017fe:	4805      	ldr	r0, [pc, #20]	@ (8001814 <HAL_SPI_MspInit+0x84>)
 8001800:	f001 f9f8 	bl	8002bf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001804:	bf00      	nop
 8001806:	3728      	adds	r7, #40	@ 0x28
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40003800 	.word	0x40003800
 8001810:	40021000 	.word	0x40021000
 8001814:	48000400 	.word	0x48000400

08001818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <HAL_MspInit+0x50>)
 8001820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001822:	4a11      	ldr	r2, [pc, #68]	@ (8001868 <HAL_MspInit+0x50>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6613      	str	r3, [r2, #96]	@ 0x60
 800182a:	4b0f      	ldr	r3, [pc, #60]	@ (8001868 <HAL_MspInit+0x50>)
 800182c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <HAL_MspInit+0x50>)
 8001838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800183a:	4a0b      	ldr	r2, [pc, #44]	@ (8001868 <HAL_MspInit+0x50>)
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001840:	6593      	str	r3, [r2, #88]	@ 0x58
 8001842:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <HAL_MspInit+0x50>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	210f      	movs	r1, #15
 8001852:	f06f 0001 	mvn.w	r0, #1
 8001856:	f000 ff26 	bl	80026a6 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800185a:	f001 fc3b 	bl	80030d4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <NMI_Handler+0x4>

08001874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <HardFault_Handler+0x4>

0800187c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <MemManage_Handler+0x4>

08001884 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <UsageFault_Handler+0x4>

08001894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a6:	f000 fde3 	bl	8002470 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80018aa:	f006 f9c7 	bl	8007c3c <xTaskGetSchedulerState>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d001      	beq.n	80018b8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80018b4:	f006 fce0 	bl	8008278 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}

080018bc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAPTEUR_G_Pin);
 80018c0:	2001      	movs	r0, #1
 80018c2:	f001 fb4b 	bl	8002f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}

080018ca <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAPTEUR_D_Pin);
 80018ce:	2002      	movs	r0, #2
 80018d0:	f001 fb44 	bl	8002f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80018dc:	4802      	ldr	r0, [pc, #8]	@ (80018e8 <DMA1_Channel1_IRQHandler+0x10>)
 80018de:	f001 f83a 	bl	8002956 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20001d44 	.word	0x20001d44

080018ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	//printf("yeah\r\n");
	//BaseType_t xHigherPriorityTaskWoken = pdFALSE;
	//vTaskNotifyGiveFromISR(xHandleETAT, &xHigherPriorityTaskWoken);
	//portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACC_Pin);
 80018f0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80018f4:	f001 fb32 	bl	8002f5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT2_ACC_Pin);
 80018f8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80018fc:	f001 fb2e 	bl	8002f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}

08001904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return 1;
 8001908:	2301      	movs	r3, #1
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <_kill>:

int _kill(int pid, int sig)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800191e:	f008 f9fb 	bl	8009d18 <__errno>
 8001922:	4603      	mov	r3, r0
 8001924:	2216      	movs	r2, #22
 8001926:	601a      	str	r2, [r3, #0]
  return -1;
 8001928:	f04f 33ff 	mov.w	r3, #4294967295
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <_exit>:

void _exit (int status)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800193c:	f04f 31ff 	mov.w	r1, #4294967295
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ffe7 	bl	8001914 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001946:	bf00      	nop
 8001948:	e7fd      	b.n	8001946 <_exit+0x12>

0800194a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	60f8      	str	r0, [r7, #12]
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	e00a      	b.n	8001972 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800195c:	f3af 8000 	nop.w
 8001960:	4601      	mov	r1, r0
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	1c5a      	adds	r2, r3, #1
 8001966:	60ba      	str	r2, [r7, #8]
 8001968:	b2ca      	uxtb	r2, r1
 800196a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	3301      	adds	r3, #1
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	429a      	cmp	r2, r3
 8001978:	dbf0      	blt.n	800195c <_read+0x12>
  }

  return len;
 800197a:	687b      	ldr	r3, [r7, #4]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e009      	b.n	80019aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	60ba      	str	r2, [r7, #8]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fc8c 	bl	80012bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3301      	adds	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	dbf1      	blt.n	8001996 <_write+0x12>
  }
  return len;
 80019b2:	687b      	ldr	r3, [r7, #4]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_close>:

int _close(int file)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019e4:	605a      	str	r2, [r3, #4]
  return 0;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <_isatty>:

int _isatty(int file)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019fc:	2301      	movs	r3, #1
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b085      	sub	sp, #20
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a2c:	4a14      	ldr	r2, [pc, #80]	@ (8001a80 <_sbrk+0x5c>)
 8001a2e:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <_sbrk+0x60>)
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a38:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <_sbrk+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d102      	bne.n	8001a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a40:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <_sbrk+0x64>)
 8001a42:	4a12      	ldr	r2, [pc, #72]	@ (8001a8c <_sbrk+0x68>)
 8001a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d207      	bcs.n	8001a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a54:	f008 f960 	bl	8009d18 <__errno>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a62:	e009      	b.n	8001a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a64:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <_sbrk+0x64>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6a:	4b07      	ldr	r3, [pc, #28]	@ (8001a88 <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	4a05      	ldr	r2, [pc, #20]	@ (8001a88 <_sbrk+0x64>)
 8001a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a76:	68fb      	ldr	r3, [r7, #12]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20008000 	.word	0x20008000
 8001a84:	00000400 	.word	0x00000400
 8001a88:	20001ae8 	.word	0x20001ae8
 8001a8c:	20004758 	.word	0x20004758

08001a90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a94:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <SystemInit+0x20>)
 8001a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a9a:	4a05      	ldr	r2, [pc, #20]	@ (8001ab0 <SystemInit+0x20>)
 8001a9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001aa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b098      	sub	sp, #96	@ 0x60
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]
 8001ad6:	615a      	str	r2, [r3, #20]
 8001ad8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	2234      	movs	r2, #52	@ 0x34
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f008 f8c7 	bl	8009c74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ae6:	4b40      	ldr	r3, [pc, #256]	@ (8001be8 <MX_TIM1_Init+0x134>)
 8001ae8:	4a40      	ldr	r2, [pc, #256]	@ (8001bec <MX_TIM1_Init+0x138>)
 8001aea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8001aec:	4b3e      	ldr	r3, [pc, #248]	@ (8001be8 <MX_TIM1_Init+0x134>)
 8001aee:	220f      	movs	r2, #15
 8001af0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af2:	4b3d      	ldr	r3, [pc, #244]	@ (8001be8 <MX_TIM1_Init+0x134>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39;
 8001af8:	4b3b      	ldr	r3, [pc, #236]	@ (8001be8 <MX_TIM1_Init+0x134>)
 8001afa:	2227      	movs	r2, #39	@ 0x27
 8001afc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afe:	4b3a      	ldr	r3, [pc, #232]	@ (8001be8 <MX_TIM1_Init+0x134>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b04:	4b38      	ldr	r3, [pc, #224]	@ (8001be8 <MX_TIM1_Init+0x134>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0a:	4b37      	ldr	r3, [pc, #220]	@ (8001be8 <MX_TIM1_Init+0x134>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b10:	4835      	ldr	r0, [pc, #212]	@ (8001be8 <MX_TIM1_Init+0x134>)
 8001b12:	f003 f93f 	bl	8004d94 <HAL_TIM_PWM_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001b1c:	f7ff fdf4 	bl	8001708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b20:	2300      	movs	r3, #0
 8001b22:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b24:	2300      	movs	r3, #0
 8001b26:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b30:	4619      	mov	r1, r3
 8001b32:	482d      	ldr	r0, [pc, #180]	@ (8001be8 <MX_TIM1_Init+0x134>)
 8001b34:	f003 fff8 	bl	8005b28 <HAL_TIMEx_MasterConfigSynchronization>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001b3e:	f7ff fde3 	bl	8001708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b42:	2360      	movs	r3, #96	@ 0x60
 8001b44:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b5e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b62:	2200      	movs	r2, #0
 8001b64:	4619      	mov	r1, r3
 8001b66:	4820      	ldr	r0, [pc, #128]	@ (8001be8 <MX_TIM1_Init+0x134>)
 8001b68:	f003 fb12 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001b72:	f7ff fdc9 	bl	8001708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b76:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	481a      	ldr	r0, [pc, #104]	@ (8001be8 <MX_TIM1_Init+0x134>)
 8001b80:	f003 fb06 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8001b8a:	f7ff fdbd 	bl	8001708 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ba2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ba6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001bac:	2300      	movs	r3, #0
 8001bae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4807      	ldr	r0, [pc, #28]	@ (8001be8 <MX_TIM1_Init+0x134>)
 8001bcc:	f004 f82e 	bl	8005c2c <HAL_TIMEx_ConfigBreakDeadTime>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001bd6:	f7ff fd97 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bda:	4803      	ldr	r0, [pc, #12]	@ (8001be8 <MX_TIM1_Init+0x134>)
 8001bdc:	f000 f9ec 	bl	8001fb8 <HAL_TIM_MspPostInit>

}
 8001be0:	bf00      	nop
 8001be2:	3760      	adds	r7, #96	@ 0x60
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20001aec 	.word	0x20001aec
 8001bec:	40012c00 	.word	0x40012c00

08001bf0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	@ 0x28
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf6:	f107 031c 	add.w	r3, r7, #28
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c02:	463b      	mov	r3, r7
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
 8001c10:	615a      	str	r2, [r3, #20]
 8001c12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c14:	4b27      	ldr	r3, [pc, #156]	@ (8001cb4 <MX_TIM2_Init+0xc4>)
 8001c16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8001c1c:	4b25      	ldr	r3, [pc, #148]	@ (8001cb4 <MX_TIM2_Init+0xc4>)
 8001c1e:	220f      	movs	r2, #15
 8001c20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c22:	4b24      	ldr	r3, [pc, #144]	@ (8001cb4 <MX_TIM2_Init+0xc4>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 8001c28:	4b22      	ldr	r3, [pc, #136]	@ (8001cb4 <MX_TIM2_Init+0xc4>)
 8001c2a:	2227      	movs	r2, #39	@ 0x27
 8001c2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2e:	4b21      	ldr	r3, [pc, #132]	@ (8001cb4 <MX_TIM2_Init+0xc4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c34:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb4 <MX_TIM2_Init+0xc4>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c3a:	481e      	ldr	r0, [pc, #120]	@ (8001cb4 <MX_TIM2_Init+0xc4>)
 8001c3c:	f003 f8aa 	bl	8004d94 <HAL_TIM_PWM_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001c46:	f7ff fd5f 	bl	8001708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c52:	f107 031c 	add.w	r3, r7, #28
 8001c56:	4619      	mov	r1, r3
 8001c58:	4816      	ldr	r0, [pc, #88]	@ (8001cb4 <MX_TIM2_Init+0xc4>)
 8001c5a:	f003 ff65 	bl	8005b28 <HAL_TIMEx_MasterConfigSynchronization>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001c64:	f7ff fd50 	bl	8001708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c68:	2360      	movs	r3, #96	@ 0x60
 8001c6a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c78:	463b      	mov	r3, r7
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	480d      	ldr	r0, [pc, #52]	@ (8001cb4 <MX_TIM2_Init+0xc4>)
 8001c80:	f003 fa86 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001c8a:	f7ff fd3d 	bl	8001708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c8e:	463b      	mov	r3, r7
 8001c90:	2204      	movs	r2, #4
 8001c92:	4619      	mov	r1, r3
 8001c94:	4807      	ldr	r0, [pc, #28]	@ (8001cb4 <MX_TIM2_Init+0xc4>)
 8001c96:	f003 fa7b 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001ca0:	f7ff fd32 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ca4:	4803      	ldr	r0, [pc, #12]	@ (8001cb4 <MX_TIM2_Init+0xc4>)
 8001ca6:	f000 f987 	bl	8001fb8 <HAL_TIM_MspPostInit>

}
 8001caa:	bf00      	nop
 8001cac:	3728      	adds	r7, #40	@ 0x28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20001b38 	.word	0x20001b38

08001cb8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08c      	sub	sp, #48	@ 0x30
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	2224      	movs	r2, #36	@ 0x24
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f007 ffd4 	bl	8009c74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ccc:	463b      	mov	r3, r7
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cd6:	4b21      	ldr	r3, [pc, #132]	@ (8001d5c <MX_TIM3_Init+0xa4>)
 8001cd8:	4a21      	ldr	r2, [pc, #132]	@ (8001d60 <MX_TIM3_Init+0xa8>)
 8001cda:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d5c <MX_TIM3_Init+0xa4>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d5c <MX_TIM3_Init+0xa4>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d5c <MX_TIM3_Init+0xa4>)
 8001cea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d5c <MX_TIM3_Init+0xa4>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf6:	4b19      	ldr	r3, [pc, #100]	@ (8001d5c <MX_TIM3_Init+0xa4>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d04:	2301      	movs	r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d10:	2300      	movs	r3, #0
 8001d12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d14:	2301      	movs	r3, #1
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	4619      	mov	r1, r3
 8001d26:	480d      	ldr	r0, [pc, #52]	@ (8001d5c <MX_TIM3_Init+0xa4>)
 8001d28:	f003 f98c 	bl	8005044 <HAL_TIM_Encoder_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001d32:	f7ff fce9 	bl	8001708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d3e:	463b      	mov	r3, r7
 8001d40:	4619      	mov	r1, r3
 8001d42:	4806      	ldr	r0, [pc, #24]	@ (8001d5c <MX_TIM3_Init+0xa4>)
 8001d44:	f003 fef0 	bl	8005b28 <HAL_TIMEx_MasterConfigSynchronization>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001d4e:	f7ff fcdb 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d52:	bf00      	nop
 8001d54:	3730      	adds	r7, #48	@ 0x30
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20001b84 	.word	0x20001b84
 8001d60:	40000400 	.word	0x40000400

08001d64 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b094      	sub	sp, #80	@ 0x50
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d6e:	2224      	movs	r2, #36	@ 0x24
 8001d70:	2100      	movs	r1, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f007 ff7e 	bl	8009c74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d78:	f107 0320 	add.w	r3, r7, #32
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
 8001d90:	611a      	str	r2, [r3, #16]
 8001d92:	615a      	str	r2, [r3, #20]
 8001d94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d96:	4b30      	ldr	r3, [pc, #192]	@ (8001e58 <MX_TIM4_Init+0xf4>)
 8001d98:	4a30      	ldr	r2, [pc, #192]	@ (8001e5c <MX_TIM4_Init+0xf8>)
 8001d9a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e58 <MX_TIM4_Init+0xf4>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da2:	4b2d      	ldr	r3, [pc, #180]	@ (8001e58 <MX_TIM4_Init+0xf4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001da8:	4b2b      	ldr	r3, [pc, #172]	@ (8001e58 <MX_TIM4_Init+0xf4>)
 8001daa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db0:	4b29      	ldr	r3, [pc, #164]	@ (8001e58 <MX_TIM4_Init+0xf4>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db6:	4b28      	ldr	r3, [pc, #160]	@ (8001e58 <MX_TIM4_Init+0xf4>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001dbc:	4826      	ldr	r0, [pc, #152]	@ (8001e58 <MX_TIM4_Init+0xf4>)
 8001dbe:	f002 ffe9 	bl	8004d94 <HAL_TIM_PWM_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001dc8:	f7ff fc9e 	bl	8001708 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC1Filter = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001de0:	2300      	movs	r3, #0
 8001de2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001de4:	2301      	movs	r3, #1
 8001de6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001de8:	2300      	movs	r3, #0
 8001dea:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.IC2Filter = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001df0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001df4:	4619      	mov	r1, r3
 8001df6:	4818      	ldr	r0, [pc, #96]	@ (8001e58 <MX_TIM4_Init+0xf4>)
 8001df8:	f003 f924 	bl	8005044 <HAL_TIM_Encoder_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8001e02:	f7ff fc81 	bl	8001708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e06:	2300      	movs	r3, #0
 8001e08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e0e:	f107 0320 	add.w	r3, r7, #32
 8001e12:	4619      	mov	r1, r3
 8001e14:	4810      	ldr	r0, [pc, #64]	@ (8001e58 <MX_TIM4_Init+0xf4>)
 8001e16:	f003 fe87 	bl	8005b28 <HAL_TIMEx_MasterConfigSynchronization>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8001e20:	f7ff fc72 	bl	8001708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e24:	2360      	movs	r3, #96	@ 0x60
 8001e26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	220c      	movs	r2, #12
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4807      	ldr	r0, [pc, #28]	@ (8001e58 <MX_TIM4_Init+0xf4>)
 8001e3c:	f003 f9a8 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8001e46:	f7ff fc5f 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e4a:	4803      	ldr	r0, [pc, #12]	@ (8001e58 <MX_TIM4_Init+0xf4>)
 8001e4c:	f000 f8b4 	bl	8001fb8 <HAL_TIM_MspPostInit>

}
 8001e50:	bf00      	nop
 8001e52:	3750      	adds	r7, #80	@ 0x50
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20001bd0 	.word	0x20001bd0
 8001e5c:	40000800 	.word	0x40000800

08001e60 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08c      	sub	sp, #48	@ 0x30
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a2a      	ldr	r2, [pc, #168]	@ (8001f28 <HAL_TIM_PWM_MspInit+0xc8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d10c      	bne.n	8001e9c <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e82:	4b2a      	ldr	r3, [pc, #168]	@ (8001f2c <HAL_TIM_PWM_MspInit+0xcc>)
 8001e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e86:	4a29      	ldr	r2, [pc, #164]	@ (8001f2c <HAL_TIM_PWM_MspInit+0xcc>)
 8001e88:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e8e:	4b27      	ldr	r3, [pc, #156]	@ (8001f2c <HAL_TIM_PWM_MspInit+0xcc>)
 8001e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e96:	61bb      	str	r3, [r7, #24]
 8001e98:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001e9a:	e040      	b.n	8001f1e <HAL_TIM_PWM_MspInit+0xbe>
  else if(tim_pwmHandle->Instance==TIM2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ea6:	4b21      	ldr	r3, [pc, #132]	@ (8001f2c <HAL_TIM_PWM_MspInit+0xcc>)
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eaa:	4a20      	ldr	r2, [pc, #128]	@ (8001f2c <HAL_TIM_PWM_MspInit+0xcc>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f2c <HAL_TIM_PWM_MspInit+0xcc>)
 8001eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697b      	ldr	r3, [r7, #20]
}
 8001ebe:	e02e      	b.n	8001f1e <HAL_TIM_PWM_MspInit+0xbe>
  else if(tim_pwmHandle->Instance==TIM4)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a1a      	ldr	r2, [pc, #104]	@ (8001f30 <HAL_TIM_PWM_MspInit+0xd0>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d129      	bne.n	8001f1e <HAL_TIM_PWM_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001eca:	4b18      	ldr	r3, [pc, #96]	@ (8001f2c <HAL_TIM_PWM_MspInit+0xcc>)
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ece:	4a17      	ldr	r2, [pc, #92]	@ (8001f2c <HAL_TIM_PWM_MspInit+0xcc>)
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ed6:	4b15      	ldr	r3, [pc, #84]	@ (8001f2c <HAL_TIM_PWM_MspInit+0xcc>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee2:	4b12      	ldr	r3, [pc, #72]	@ (8001f2c <HAL_TIM_PWM_MspInit+0xcc>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee6:	4a11      	ldr	r2, [pc, #68]	@ (8001f2c <HAL_TIM_PWM_MspInit+0xcc>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eee:	4b0f      	ldr	r3, [pc, #60]	@ (8001f2c <HAL_TIM_PWM_MspInit+0xcc>)
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001efa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001f0c:	230a      	movs	r3, #10
 8001f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f10:	f107 031c 	add.w	r3, r7, #28
 8001f14:	4619      	mov	r1, r3
 8001f16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f1a:	f000 fe6b 	bl	8002bf4 <HAL_GPIO_Init>
}
 8001f1e:	bf00      	nop
 8001f20:	3730      	adds	r7, #48	@ 0x30
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40012c00 	.word	0x40012c00
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40000800 	.word	0x40000800

08001f34 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	@ 0x28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a17      	ldr	r2, [pc, #92]	@ (8001fb0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d128      	bne.n	8001fa8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f56:	4b17      	ldr	r3, [pc, #92]	@ (8001fb4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5a:	4a16      	ldr	r2, [pc, #88]	@ (8001fb4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f62:	4b14      	ldr	r3, [pc, #80]	@ (8001fb4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6e:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f72:	4a10      	ldr	r2, [pc, #64]	@ (8001fb4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001f86:	2350      	movs	r3, #80	@ 0x50
 8001f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f96:	2302      	movs	r3, #2
 8001f98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fa4:	f000 fe26 	bl	8002bf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001fa8:	bf00      	nop
 8001faa:	3728      	adds	r7, #40	@ 0x28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40000400 	.word	0x40000400
 8001fb4:	40021000 	.word	0x40021000

08001fb8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	@ 0x28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a35      	ldr	r2, [pc, #212]	@ (80020ac <HAL_TIM_MspPostInit+0xf4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d11e      	bne.n	8002018 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fda:	4b35      	ldr	r3, [pc, #212]	@ (80020b0 <HAL_TIM_MspPostInit+0xf8>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fde:	4a34      	ldr	r2, [pc, #208]	@ (80020b0 <HAL_TIM_MspPostInit+0xf8>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fe6:	4b32      	ldr	r3, [pc, #200]	@ (80020b0 <HAL_TIM_MspPostInit+0xf8>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ff2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002000:	2300      	movs	r3, #0
 8002002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002004:	2306      	movs	r3, #6
 8002006:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	4619      	mov	r1, r3
 800200e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002012:	f000 fdef 	bl	8002bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002016:	e044      	b.n	80020a2 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002020:	d11d      	bne.n	800205e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002022:	4b23      	ldr	r3, [pc, #140]	@ (80020b0 <HAL_TIM_MspPostInit+0xf8>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002026:	4a22      	ldr	r2, [pc, #136]	@ (80020b0 <HAL_TIM_MspPostInit+0xf8>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800202e:	4b20      	ldr	r3, [pc, #128]	@ (80020b0 <HAL_TIM_MspPostInit+0xf8>)
 8002030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800203a:	2303      	movs	r3, #3
 800203c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002046:	2300      	movs	r3, #0
 8002048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800204a:	2301      	movs	r3, #1
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204e:	f107 0314 	add.w	r3, r7, #20
 8002052:	4619      	mov	r1, r3
 8002054:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002058:	f000 fdcc 	bl	8002bf4 <HAL_GPIO_Init>
}
 800205c:	e021      	b.n	80020a2 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM4)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a14      	ldr	r2, [pc, #80]	@ (80020b4 <HAL_TIM_MspPostInit+0xfc>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d11c      	bne.n	80020a2 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002068:	4b11      	ldr	r3, [pc, #68]	@ (80020b0 <HAL_TIM_MspPostInit+0xf8>)
 800206a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206c:	4a10      	ldr	r2, [pc, #64]	@ (80020b0 <HAL_TIM_MspPostInit+0xf8>)
 800206e:	f043 0302 	orr.w	r3, r3, #2
 8002072:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002074:	4b0e      	ldr	r3, [pc, #56]	@ (80020b0 <HAL_TIM_MspPostInit+0xf8>)
 8002076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM4_CH4_M_SCTR_LIDAR_Pin;
 8002080:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208e:	2300      	movs	r3, #0
 8002090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002092:	2302      	movs	r3, #2
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM4_CH4_M_SCTR_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	4806      	ldr	r0, [pc, #24]	@ (80020b8 <HAL_TIM_MspPostInit+0x100>)
 800209e:	f000 fda9 	bl	8002bf4 <HAL_GPIO_Init>
}
 80020a2:	bf00      	nop
 80020a4:	3728      	adds	r7, #40	@ 0x28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40012c00 	.word	0x40012c00
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40000800 	.word	0x40000800
 80020b8:	48000400 	.word	0x48000400

080020bc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020c0:	4b22      	ldr	r3, [pc, #136]	@ (800214c <MX_USART2_UART_Init+0x90>)
 80020c2:	4a23      	ldr	r2, [pc, #140]	@ (8002150 <MX_USART2_UART_Init+0x94>)
 80020c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020c6:	4b21      	ldr	r3, [pc, #132]	@ (800214c <MX_USART2_UART_Init+0x90>)
 80020c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020ce:	4b1f      	ldr	r3, [pc, #124]	@ (800214c <MX_USART2_UART_Init+0x90>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020d4:	4b1d      	ldr	r3, [pc, #116]	@ (800214c <MX_USART2_UART_Init+0x90>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020da:	4b1c      	ldr	r3, [pc, #112]	@ (800214c <MX_USART2_UART_Init+0x90>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020e0:	4b1a      	ldr	r3, [pc, #104]	@ (800214c <MX_USART2_UART_Init+0x90>)
 80020e2:	220c      	movs	r2, #12
 80020e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020e6:	4b19      	ldr	r3, [pc, #100]	@ (800214c <MX_USART2_UART_Init+0x90>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ec:	4b17      	ldr	r3, [pc, #92]	@ (800214c <MX_USART2_UART_Init+0x90>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020f2:	4b16      	ldr	r3, [pc, #88]	@ (800214c <MX_USART2_UART_Init+0x90>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020f8:	4b14      	ldr	r3, [pc, #80]	@ (800214c <MX_USART2_UART_Init+0x90>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020fe:	4b13      	ldr	r3, [pc, #76]	@ (800214c <MX_USART2_UART_Init+0x90>)
 8002100:	2200      	movs	r2, #0
 8002102:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002104:	4811      	ldr	r0, [pc, #68]	@ (800214c <MX_USART2_UART_Init+0x90>)
 8002106:	f003 fe1d 	bl	8005d44 <HAL_UART_Init>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002110:	f7ff fafa 	bl	8001708 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002114:	2100      	movs	r1, #0
 8002116:	480d      	ldr	r0, [pc, #52]	@ (800214c <MX_USART2_UART_Init+0x90>)
 8002118:	f004 fe69 	bl	8006dee <HAL_UARTEx_SetTxFifoThreshold>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002122:	f7ff faf1 	bl	8001708 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002126:	2100      	movs	r1, #0
 8002128:	4808      	ldr	r0, [pc, #32]	@ (800214c <MX_USART2_UART_Init+0x90>)
 800212a:	f004 fe9e 	bl	8006e6a <HAL_UARTEx_SetRxFifoThreshold>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002134:	f7ff fae8 	bl	8001708 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002138:	4804      	ldr	r0, [pc, #16]	@ (800214c <MX_USART2_UART_Init+0x90>)
 800213a:	f004 fe1f 	bl	8006d7c <HAL_UARTEx_DisableFifoMode>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002144:	f7ff fae0 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20001c1c 	.word	0x20001c1c
 8002150:	40004400 	.word	0x40004400

08002154 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002158:	4b22      	ldr	r3, [pc, #136]	@ (80021e4 <MX_USART3_UART_Init+0x90>)
 800215a:	4a23      	ldr	r2, [pc, #140]	@ (80021e8 <MX_USART3_UART_Init+0x94>)
 800215c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 128000;
 800215e:	4b21      	ldr	r3, [pc, #132]	@ (80021e4 <MX_USART3_UART_Init+0x90>)
 8002160:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8002164:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002166:	4b1f      	ldr	r3, [pc, #124]	@ (80021e4 <MX_USART3_UART_Init+0x90>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800216c:	4b1d      	ldr	r3, [pc, #116]	@ (80021e4 <MX_USART3_UART_Init+0x90>)
 800216e:	2200      	movs	r2, #0
 8002170:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002172:	4b1c      	ldr	r3, [pc, #112]	@ (80021e4 <MX_USART3_UART_Init+0x90>)
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002178:	4b1a      	ldr	r3, [pc, #104]	@ (80021e4 <MX_USART3_UART_Init+0x90>)
 800217a:	220c      	movs	r2, #12
 800217c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800217e:	4b19      	ldr	r3, [pc, #100]	@ (80021e4 <MX_USART3_UART_Init+0x90>)
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002184:	4b17      	ldr	r3, [pc, #92]	@ (80021e4 <MX_USART3_UART_Init+0x90>)
 8002186:	2200      	movs	r2, #0
 8002188:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800218a:	4b16      	ldr	r3, [pc, #88]	@ (80021e4 <MX_USART3_UART_Init+0x90>)
 800218c:	2200      	movs	r2, #0
 800218e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002190:	4b14      	ldr	r3, [pc, #80]	@ (80021e4 <MX_USART3_UART_Init+0x90>)
 8002192:	2200      	movs	r2, #0
 8002194:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002196:	4b13      	ldr	r3, [pc, #76]	@ (80021e4 <MX_USART3_UART_Init+0x90>)
 8002198:	2200      	movs	r2, #0
 800219a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800219c:	4811      	ldr	r0, [pc, #68]	@ (80021e4 <MX_USART3_UART_Init+0x90>)
 800219e:	f003 fdd1 	bl	8005d44 <HAL_UART_Init>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80021a8:	f7ff faae 	bl	8001708 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021ac:	2100      	movs	r1, #0
 80021ae:	480d      	ldr	r0, [pc, #52]	@ (80021e4 <MX_USART3_UART_Init+0x90>)
 80021b0:	f004 fe1d 	bl	8006dee <HAL_UARTEx_SetTxFifoThreshold>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80021ba:	f7ff faa5 	bl	8001708 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021be:	2100      	movs	r1, #0
 80021c0:	4808      	ldr	r0, [pc, #32]	@ (80021e4 <MX_USART3_UART_Init+0x90>)
 80021c2:	f004 fe52 	bl	8006e6a <HAL_UARTEx_SetRxFifoThreshold>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80021cc:	f7ff fa9c 	bl	8001708 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80021d0:	4804      	ldr	r0, [pc, #16]	@ (80021e4 <MX_USART3_UART_Init+0x90>)
 80021d2:	f004 fdd3 	bl	8006d7c <HAL_UARTEx_DisableFifoMode>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80021dc:	f7ff fa94 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20001cb0 	.word	0x20001cb0
 80021e8:	40004800 	.word	0x40004800

080021ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b09c      	sub	sp, #112	@ 0x70
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002204:	f107 0318 	add.w	r3, r7, #24
 8002208:	2244      	movs	r2, #68	@ 0x44
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f007 fd31 	bl	8009c74 <memset>
  if(uartHandle->Instance==USART2)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a52      	ldr	r2, [pc, #328]	@ (8002360 <HAL_UART_MspInit+0x174>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d137      	bne.n	800228c <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800221c:	2302      	movs	r3, #2
 800221e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002220:	2300      	movs	r3, #0
 8002222:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002224:	f107 0318 	add.w	r3, r7, #24
 8002228:	4618      	mov	r0, r3
 800222a:	f001 fc8d 	bl	8003b48 <HAL_RCCEx_PeriphCLKConfig>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002234:	f7ff fa68 	bl	8001708 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002238:	4b4a      	ldr	r3, [pc, #296]	@ (8002364 <HAL_UART_MspInit+0x178>)
 800223a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223c:	4a49      	ldr	r2, [pc, #292]	@ (8002364 <HAL_UART_MspInit+0x178>)
 800223e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002242:	6593      	str	r3, [r2, #88]	@ 0x58
 8002244:	4b47      	ldr	r3, [pc, #284]	@ (8002364 <HAL_UART_MspInit+0x178>)
 8002246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002250:	4b44      	ldr	r3, [pc, #272]	@ (8002364 <HAL_UART_MspInit+0x178>)
 8002252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002254:	4a43      	ldr	r2, [pc, #268]	@ (8002364 <HAL_UART_MspInit+0x178>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800225c:	4b41      	ldr	r3, [pc, #260]	@ (8002364 <HAL_UART_MspInit+0x178>)
 800225e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002268:	230c      	movs	r3, #12
 800226a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226c:	2302      	movs	r3, #2
 800226e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002274:	2300      	movs	r3, #0
 8002276:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002278:	2307      	movs	r3, #7
 800227a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002280:	4619      	mov	r1, r3
 8002282:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002286:	f000 fcb5 	bl	8002bf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800228a:	e065      	b.n	8002358 <HAL_UART_MspInit+0x16c>
  else if(uartHandle->Instance==USART3)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a35      	ldr	r2, [pc, #212]	@ (8002368 <HAL_UART_MspInit+0x17c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d160      	bne.n	8002358 <HAL_UART_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002296:	2304      	movs	r3, #4
 8002298:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800229a:	2300      	movs	r3, #0
 800229c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800229e:	f107 0318 	add.w	r3, r7, #24
 80022a2:	4618      	mov	r0, r3
 80022a4:	f001 fc50 	bl	8003b48 <HAL_RCCEx_PeriphCLKConfig>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80022ae:	f7ff fa2b 	bl	8001708 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002364 <HAL_UART_MspInit+0x178>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b6:	4a2b      	ldr	r2, [pc, #172]	@ (8002364 <HAL_UART_MspInit+0x178>)
 80022b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80022be:	4b29      	ldr	r3, [pc, #164]	@ (8002364 <HAL_UART_MspInit+0x178>)
 80022c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ca:	4b26      	ldr	r3, [pc, #152]	@ (8002364 <HAL_UART_MspInit+0x178>)
 80022cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ce:	4a25      	ldr	r2, [pc, #148]	@ (8002364 <HAL_UART_MspInit+0x178>)
 80022d0:	f043 0302 	orr.w	r3, r3, #2
 80022d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022d6:	4b23      	ldr	r3, [pc, #140]	@ (8002364 <HAL_UART_MspInit+0x178>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_TX_LIDAR_Pin|USART3_RX_LIDAR_Pin;
 80022e2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80022e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2300      	movs	r3, #0
 80022f2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022f4:	2307      	movs	r3, #7
 80022f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80022fc:	4619      	mov	r1, r3
 80022fe:	481b      	ldr	r0, [pc, #108]	@ (800236c <HAL_UART_MspInit+0x180>)
 8002300:	f000 fc78 	bl	8002bf4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 8002304:	4b1a      	ldr	r3, [pc, #104]	@ (8002370 <HAL_UART_MspInit+0x184>)
 8002306:	4a1b      	ldr	r2, [pc, #108]	@ (8002374 <HAL_UART_MspInit+0x188>)
 8002308:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800230a:	4b19      	ldr	r3, [pc, #100]	@ (8002370 <HAL_UART_MspInit+0x184>)
 800230c:	221c      	movs	r2, #28
 800230e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002310:	4b17      	ldr	r3, [pc, #92]	@ (8002370 <HAL_UART_MspInit+0x184>)
 8002312:	2200      	movs	r2, #0
 8002314:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002316:	4b16      	ldr	r3, [pc, #88]	@ (8002370 <HAL_UART_MspInit+0x184>)
 8002318:	2200      	movs	r2, #0
 800231a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800231c:	4b14      	ldr	r3, [pc, #80]	@ (8002370 <HAL_UART_MspInit+0x184>)
 800231e:	2280      	movs	r2, #128	@ 0x80
 8002320:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002322:	4b13      	ldr	r3, [pc, #76]	@ (8002370 <HAL_UART_MspInit+0x184>)
 8002324:	2200      	movs	r2, #0
 8002326:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002328:	4b11      	ldr	r3, [pc, #68]	@ (8002370 <HAL_UART_MspInit+0x184>)
 800232a:	2200      	movs	r2, #0
 800232c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800232e:	4b10      	ldr	r3, [pc, #64]	@ (8002370 <HAL_UART_MspInit+0x184>)
 8002330:	2220      	movs	r2, #32
 8002332:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002334:	4b0e      	ldr	r3, [pc, #56]	@ (8002370 <HAL_UART_MspInit+0x184>)
 8002336:	2200      	movs	r2, #0
 8002338:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800233a:	480d      	ldr	r0, [pc, #52]	@ (8002370 <HAL_UART_MspInit+0x184>)
 800233c:	f000 f9e8 	bl	8002710 <HAL_DMA_Init>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_UART_MspInit+0x15e>
      Error_Handler();
 8002346:	f7ff f9df 	bl	8001708 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a08      	ldr	r2, [pc, #32]	@ (8002370 <HAL_UART_MspInit+0x184>)
 800234e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002352:	4a07      	ldr	r2, [pc, #28]	@ (8002370 <HAL_UART_MspInit+0x184>)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002358:	bf00      	nop
 800235a:	3770      	adds	r7, #112	@ 0x70
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40004400 	.word	0x40004400
 8002364:	40021000 	.word	0x40021000
 8002368:	40004800 	.word	0x40004800
 800236c:	48000400 	.word	0x48000400
 8002370:	20001d44 	.word	0x20001d44
 8002374:	40020008 	.word	0x40020008

08002378 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002378:	480d      	ldr	r0, [pc, #52]	@ (80023b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800237a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800237c:	f7ff fb88 	bl	8001a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002380:	480c      	ldr	r0, [pc, #48]	@ (80023b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002382:	490d      	ldr	r1, [pc, #52]	@ (80023b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002384:	4a0d      	ldr	r2, [pc, #52]	@ (80023bc <LoopForever+0xe>)
  movs r3, #0
 8002386:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002388:	e002      	b.n	8002390 <LoopCopyDataInit>

0800238a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800238a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800238c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800238e:	3304      	adds	r3, #4

08002390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002394:	d3f9      	bcc.n	800238a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002396:	4a0a      	ldr	r2, [pc, #40]	@ (80023c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002398:	4c0a      	ldr	r4, [pc, #40]	@ (80023c4 <LoopForever+0x16>)
  movs r3, #0
 800239a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800239c:	e001      	b.n	80023a2 <LoopFillZerobss>

0800239e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800239e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a0:	3204      	adds	r2, #4

080023a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a4:	d3fb      	bcc.n	800239e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80023a6:	f007 fcbd 	bl	8009d24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023aa:	f7ff f823 	bl	80013f4 <main>

080023ae <LoopForever>:

LoopForever:
    b LoopForever
 80023ae:	e7fe      	b.n	80023ae <LoopForever>
  ldr   r0, =_estack
 80023b0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80023b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023b8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80023bc:	0800d908 	.word	0x0800d908
  ldr r2, =_sbss
 80023c0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80023c4:	20004758 	.word	0x20004758

080023c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023c8:	e7fe      	b.n	80023c8 <ADC1_2_IRQHandler>

080023ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d4:	2003      	movs	r0, #3
 80023d6:	f000 f95b 	bl	8002690 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023da:	200f      	movs	r0, #15
 80023dc:	f000 f80e 	bl	80023fc <HAL_InitTick>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	71fb      	strb	r3, [r7, #7]
 80023ea:	e001      	b.n	80023f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023ec:	f7ff fa14 	bl	8001818 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023f0:	79fb      	ldrb	r3, [r7, #7]

}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002408:	4b16      	ldr	r3, [pc, #88]	@ (8002464 <HAL_InitTick+0x68>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d022      	beq.n	8002456 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002410:	4b15      	ldr	r3, [pc, #84]	@ (8002468 <HAL_InitTick+0x6c>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4b13      	ldr	r3, [pc, #76]	@ (8002464 <HAL_InitTick+0x68>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800241c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002420:	fbb2 f3f3 	udiv	r3, r2, r3
 8002424:	4618      	mov	r0, r3
 8002426:	f000 f966 	bl	80026f6 <HAL_SYSTICK_Config>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10f      	bne.n	8002450 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b0f      	cmp	r3, #15
 8002434:	d809      	bhi.n	800244a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002436:	2200      	movs	r2, #0
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	f04f 30ff 	mov.w	r0, #4294967295
 800243e:	f000 f932 	bl	80026a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002442:	4a0a      	ldr	r2, [pc, #40]	@ (800246c <HAL_InitTick+0x70>)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	e007      	b.n	800245a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
 800244e:	e004      	b.n	800245a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
 8002454:	e001      	b.n	800245a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800245a:	7bfb      	ldrb	r3, [r7, #15]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20000008 	.word	0x20000008
 8002468:	20000000 	.word	0x20000000
 800246c:	20000004 	.word	0x20000004

08002470 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002474:	4b05      	ldr	r3, [pc, #20]	@ (800248c <HAL_IncTick+0x1c>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b05      	ldr	r3, [pc, #20]	@ (8002490 <HAL_IncTick+0x20>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4413      	add	r3, r2
 800247e:	4a03      	ldr	r2, [pc, #12]	@ (800248c <HAL_IncTick+0x1c>)
 8002480:	6013      	str	r3, [r2, #0]
}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	20001da4 	.word	0x20001da4
 8002490:	20000008 	.word	0x20000008

08002494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return uwTick;
 8002498:	4b03      	ldr	r3, [pc, #12]	@ (80024a8 <HAL_GetTick+0x14>)
 800249a:	681b      	ldr	r3, [r3, #0]
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20001da4 	.word	0x20001da4

080024ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024b4:	f7ff ffee 	bl	8002494 <HAL_GetTick>
 80024b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c4:	d004      	beq.n	80024d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80024c6:	4b09      	ldr	r3, [pc, #36]	@ (80024ec <HAL_Delay+0x40>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	4413      	add	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024d0:	bf00      	nop
 80024d2:	f7ff ffdf 	bl	8002494 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d8f7      	bhi.n	80024d2 <HAL_Delay+0x26>
  {
  }
}
 80024e2:	bf00      	nop
 80024e4:	bf00      	nop
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20000008 	.word	0x20000008

080024f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002500:	4b0c      	ldr	r3, [pc, #48]	@ (8002534 <__NVIC_SetPriorityGrouping+0x44>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800250c:	4013      	ands	r3, r2
 800250e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002518:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800251c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002522:	4a04      	ldr	r2, [pc, #16]	@ (8002534 <__NVIC_SetPriorityGrouping+0x44>)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	60d3      	str	r3, [r2, #12]
}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800253c:	4b04      	ldr	r3, [pc, #16]	@ (8002550 <__NVIC_GetPriorityGrouping+0x18>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	0a1b      	lsrs	r3, r3, #8
 8002542:	f003 0307 	and.w	r3, r3, #7
}
 8002546:	4618      	mov	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	2b00      	cmp	r3, #0
 8002564:	db0b      	blt.n	800257e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	f003 021f 	and.w	r2, r3, #31
 800256c:	4907      	ldr	r1, [pc, #28]	@ (800258c <__NVIC_EnableIRQ+0x38>)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	2001      	movs	r0, #1
 8002576:	fa00 f202 	lsl.w	r2, r0, r2
 800257a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000e100 	.word	0xe000e100

08002590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	6039      	str	r1, [r7, #0]
 800259a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	db0a      	blt.n	80025ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	490c      	ldr	r1, [pc, #48]	@ (80025dc <__NVIC_SetPriority+0x4c>)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	0112      	lsls	r2, r2, #4
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	440b      	add	r3, r1
 80025b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b8:	e00a      	b.n	80025d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	4908      	ldr	r1, [pc, #32]	@ (80025e0 <__NVIC_SetPriority+0x50>)
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	3b04      	subs	r3, #4
 80025c8:	0112      	lsls	r2, r2, #4
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	440b      	add	r3, r1
 80025ce:	761a      	strb	r2, [r3, #24]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000e100 	.word	0xe000e100
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	@ 0x24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f1c3 0307 	rsb	r3, r3, #7
 80025fe:	2b04      	cmp	r3, #4
 8002600:	bf28      	it	cs
 8002602:	2304      	movcs	r3, #4
 8002604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3304      	adds	r3, #4
 800260a:	2b06      	cmp	r3, #6
 800260c:	d902      	bls.n	8002614 <NVIC_EncodePriority+0x30>
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3b03      	subs	r3, #3
 8002612:	e000      	b.n	8002616 <NVIC_EncodePriority+0x32>
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002618:	f04f 32ff 	mov.w	r2, #4294967295
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43da      	mvns	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	401a      	ands	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800262c:	f04f 31ff 	mov.w	r1, #4294967295
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	43d9      	mvns	r1, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	4313      	orrs	r3, r2
         );
}
 800263e:	4618      	mov	r0, r3
 8002640:	3724      	adds	r7, #36	@ 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3b01      	subs	r3, #1
 8002658:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800265c:	d301      	bcc.n	8002662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800265e:	2301      	movs	r3, #1
 8002660:	e00f      	b.n	8002682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002662:	4a0a      	ldr	r2, [pc, #40]	@ (800268c <SysTick_Config+0x40>)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3b01      	subs	r3, #1
 8002668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800266a:	210f      	movs	r1, #15
 800266c:	f04f 30ff 	mov.w	r0, #4294967295
 8002670:	f7ff ff8e 	bl	8002590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002674:	4b05      	ldr	r3, [pc, #20]	@ (800268c <SysTick_Config+0x40>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800267a:	4b04      	ldr	r3, [pc, #16]	@ (800268c <SysTick_Config+0x40>)
 800267c:	2207      	movs	r2, #7
 800267e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	e000e010 	.word	0xe000e010

08002690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff ff29 	bl	80024f0 <__NVIC_SetPriorityGrouping>
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b086      	sub	sp, #24
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	4603      	mov	r3, r0
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
 80026b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026b4:	f7ff ff40 	bl	8002538 <__NVIC_GetPriorityGrouping>
 80026b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	6978      	ldr	r0, [r7, #20]
 80026c0:	f7ff ff90 	bl	80025e4 <NVIC_EncodePriority>
 80026c4:	4602      	mov	r2, r0
 80026c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ca:	4611      	mov	r1, r2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff ff5f 	bl	8002590 <__NVIC_SetPriority>
}
 80026d2:	bf00      	nop
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	4603      	mov	r3, r0
 80026e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff33 	bl	8002554 <__NVIC_EnableIRQ>
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff ffa4 	bl	800264c <SysTick_Config>
 8002704:	4603      	mov	r3, r0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e08d      	b.n	800283e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	4b47      	ldr	r3, [pc, #284]	@ (8002848 <HAL_DMA_Init+0x138>)
 800272a:	429a      	cmp	r2, r3
 800272c:	d80f      	bhi.n	800274e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	4b45      	ldr	r3, [pc, #276]	@ (800284c <HAL_DMA_Init+0x13c>)
 8002736:	4413      	add	r3, r2
 8002738:	4a45      	ldr	r2, [pc, #276]	@ (8002850 <HAL_DMA_Init+0x140>)
 800273a:	fba2 2303 	umull	r2, r3, r2, r3
 800273e:	091b      	lsrs	r3, r3, #4
 8002740:	009a      	lsls	r2, r3, #2
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a42      	ldr	r2, [pc, #264]	@ (8002854 <HAL_DMA_Init+0x144>)
 800274a:	641a      	str	r2, [r3, #64]	@ 0x40
 800274c:	e00e      	b.n	800276c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	4b40      	ldr	r3, [pc, #256]	@ (8002858 <HAL_DMA_Init+0x148>)
 8002756:	4413      	add	r3, r2
 8002758:	4a3d      	ldr	r2, [pc, #244]	@ (8002850 <HAL_DMA_Init+0x140>)
 800275a:	fba2 2303 	umull	r2, r3, r2, r3
 800275e:	091b      	lsrs	r3, r3, #4
 8002760:	009a      	lsls	r2, r3, #2
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a3c      	ldr	r2, [pc, #240]	@ (800285c <HAL_DMA_Init+0x14c>)
 800276a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002786:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002790:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800279c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f9b6 	bl	8002b30 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027cc:	d102      	bne.n	80027d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80027e8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d010      	beq.n	8002814 <HAL_DMA_Init+0x104>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d80c      	bhi.n	8002814 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f9d6 	bl	8002bac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	e008      	b.n	8002826 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40020407 	.word	0x40020407
 800284c:	bffdfff8 	.word	0xbffdfff8
 8002850:	cccccccd 	.word	0xcccccccd
 8002854:	40020000 	.word	0x40020000
 8002858:	bffdfbf8 	.word	0xbffdfbf8
 800285c:	40020400 	.word	0x40020400

08002860 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
 800286c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_DMA_Start_IT+0x20>
 800287c:	2302      	movs	r3, #2
 800287e:	e066      	b.n	800294e <HAL_DMA_Start_IT+0xee>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b01      	cmp	r3, #1
 8002892:	d155      	bne.n	8002940 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0201 	bic.w	r2, r2, #1
 80028b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 f8fb 	bl	8002ab4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d008      	beq.n	80028d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 020e 	orr.w	r2, r2, #14
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	e00f      	b.n	80028f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0204 	bic.w	r2, r2, #4
 80028e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 020a 	orr.w	r2, r2, #10
 80028f6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002910:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002914:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291a:	2b00      	cmp	r3, #0
 800291c:	d007      	beq.n	800292e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002928:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800292c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0201 	orr.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	e005      	b.n	800294c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002948:	2302      	movs	r3, #2
 800294a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800294c:	7dfb      	ldrb	r3, [r7, #23]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	2204      	movs	r2, #4
 8002978:	409a      	lsls	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d026      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x7a>
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d021      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0320 	and.w	r3, r3, #32
 8002996:	2b00      	cmp	r3, #0
 8002998:	d107      	bne.n	80029aa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0204 	bic.w	r2, r2, #4
 80029a8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ae:	f003 021f 	and.w	r2, r3, #31
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b6:	2104      	movs	r1, #4
 80029b8:	fa01 f202 	lsl.w	r2, r1, r2
 80029bc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d071      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80029ce:	e06c      	b.n	8002aaa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d4:	f003 031f 	and.w	r3, r3, #31
 80029d8:	2202      	movs	r2, #2
 80029da:	409a      	lsls	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d02e      	beq.n	8002a42 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d029      	beq.n	8002a42 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0320 	and.w	r3, r3, #32
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10b      	bne.n	8002a14 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 020a 	bic.w	r2, r2, #10
 8002a0a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a18:	f003 021f 	and.w	r2, r3, #31
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a20:	2102      	movs	r1, #2
 8002a22:	fa01 f202 	lsl.w	r2, r1, r2
 8002a26:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d038      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a40:	e033      	b.n	8002aaa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a46:	f003 031f 	and.w	r3, r3, #31
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d02a      	beq.n	8002aac <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d025      	beq.n	8002aac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 020e 	bic.w	r2, r2, #14
 8002a6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a74:	f003 021f 	and.w	r2, r3, #31
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a82:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d004      	beq.n	8002aac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002aaa:	bf00      	nop
 8002aac:	bf00      	nop
}
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002aca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d004      	beq.n	8002ade <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002adc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae2:	f003 021f 	and.w	r2, r3, #31
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	2101      	movs	r1, #1
 8002aec:	fa01 f202 	lsl.w	r2, r1, r2
 8002af0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b10      	cmp	r3, #16
 8002b00:	d108      	bne.n	8002b14 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b12:	e007      	b.n	8002b24 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	60da      	str	r2, [r3, #12]
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b16      	ldr	r3, [pc, #88]	@ (8002b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d802      	bhi.n	8002b4a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002b44:	4b15      	ldr	r3, [pc, #84]	@ (8002b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	e001      	b.n	8002b4e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002b4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002b4c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	3b08      	subs	r3, #8
 8002b5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b68:	089b      	lsrs	r3, r3, #2
 8002b6a:	009a      	lsls	r2, r3, #2
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4413      	add	r3, r2
 8002b70:	461a      	mov	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a0b      	ldr	r2, [pc, #44]	@ (8002ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002b7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	2201      	movs	r2, #1
 8002b84:	409a      	lsls	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002b8a:	bf00      	nop
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40020407 	.word	0x40020407
 8002b9c:	40020800 	.word	0x40020800
 8002ba0:	40020820 	.word	0x40020820
 8002ba4:	cccccccd 	.word	0xcccccccd
 8002ba8:	40020880 	.word	0x40020880

08002bac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8002bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a08      	ldr	r2, [pc, #32]	@ (8002bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002bce:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	2201      	movs	r2, #1
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	1000823f 	.word	0x1000823f
 8002bf0:	40020940 	.word	0x40020940

08002bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c02:	e15a      	b.n	8002eba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	2101      	movs	r1, #1
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c10:	4013      	ands	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 814c 	beq.w	8002eb4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d005      	beq.n	8002c34 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d130      	bne.n	8002c96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	2203      	movs	r2, #3
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4013      	ands	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	091b      	lsrs	r3, r3, #4
 8002c80:	f003 0201 	and.w	r2, r3, #1
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d017      	beq.n	8002cd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	2203      	movs	r2, #3
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d123      	bne.n	8002d26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	08da      	lsrs	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3208      	adds	r2, #8
 8002ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	220f      	movs	r2, #15
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	08da      	lsrs	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3208      	adds	r2, #8
 8002d20:	6939      	ldr	r1, [r7, #16]
 8002d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	2203      	movs	r2, #3
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 0203 	and.w	r2, r3, #3
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 80a6 	beq.w	8002eb4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d68:	4b5b      	ldr	r3, [pc, #364]	@ (8002ed8 <HAL_GPIO_Init+0x2e4>)
 8002d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d6c:	4a5a      	ldr	r2, [pc, #360]	@ (8002ed8 <HAL_GPIO_Init+0x2e4>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d74:	4b58      	ldr	r3, [pc, #352]	@ (8002ed8 <HAL_GPIO_Init+0x2e4>)
 8002d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d80:	4a56      	ldr	r2, [pc, #344]	@ (8002edc <HAL_GPIO_Init+0x2e8>)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	089b      	lsrs	r3, r3, #2
 8002d86:	3302      	adds	r3, #2
 8002d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	220f      	movs	r2, #15
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002daa:	d01f      	beq.n	8002dec <HAL_GPIO_Init+0x1f8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a4c      	ldr	r2, [pc, #304]	@ (8002ee0 <HAL_GPIO_Init+0x2ec>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d019      	beq.n	8002de8 <HAL_GPIO_Init+0x1f4>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a4b      	ldr	r2, [pc, #300]	@ (8002ee4 <HAL_GPIO_Init+0x2f0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d013      	beq.n	8002de4 <HAL_GPIO_Init+0x1f0>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a4a      	ldr	r2, [pc, #296]	@ (8002ee8 <HAL_GPIO_Init+0x2f4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d00d      	beq.n	8002de0 <HAL_GPIO_Init+0x1ec>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a49      	ldr	r2, [pc, #292]	@ (8002eec <HAL_GPIO_Init+0x2f8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d007      	beq.n	8002ddc <HAL_GPIO_Init+0x1e8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a48      	ldr	r2, [pc, #288]	@ (8002ef0 <HAL_GPIO_Init+0x2fc>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d101      	bne.n	8002dd8 <HAL_GPIO_Init+0x1e4>
 8002dd4:	2305      	movs	r3, #5
 8002dd6:	e00a      	b.n	8002dee <HAL_GPIO_Init+0x1fa>
 8002dd8:	2306      	movs	r3, #6
 8002dda:	e008      	b.n	8002dee <HAL_GPIO_Init+0x1fa>
 8002ddc:	2304      	movs	r3, #4
 8002dde:	e006      	b.n	8002dee <HAL_GPIO_Init+0x1fa>
 8002de0:	2303      	movs	r3, #3
 8002de2:	e004      	b.n	8002dee <HAL_GPIO_Init+0x1fa>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e002      	b.n	8002dee <HAL_GPIO_Init+0x1fa>
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <HAL_GPIO_Init+0x1fa>
 8002dec:	2300      	movs	r3, #0
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	f002 0203 	and.w	r2, r2, #3
 8002df4:	0092      	lsls	r2, r2, #2
 8002df6:	4093      	lsls	r3, r2
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dfe:	4937      	ldr	r1, [pc, #220]	@ (8002edc <HAL_GPIO_Init+0x2e8>)
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	089b      	lsrs	r3, r3, #2
 8002e04:	3302      	adds	r3, #2
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e0c:	4b39      	ldr	r3, [pc, #228]	@ (8002ef4 <HAL_GPIO_Init+0x300>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	43db      	mvns	r3, r3
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e30:	4a30      	ldr	r2, [pc, #192]	@ (8002ef4 <HAL_GPIO_Init+0x300>)
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e36:	4b2f      	ldr	r3, [pc, #188]	@ (8002ef4 <HAL_GPIO_Init+0x300>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4013      	ands	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e5a:	4a26      	ldr	r2, [pc, #152]	@ (8002ef4 <HAL_GPIO_Init+0x300>)
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002e60:	4b24      	ldr	r3, [pc, #144]	@ (8002ef4 <HAL_GPIO_Init+0x300>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e84:	4a1b      	ldr	r2, [pc, #108]	@ (8002ef4 <HAL_GPIO_Init+0x300>)
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef4 <HAL_GPIO_Init+0x300>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4013      	ands	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002eae:	4a11      	ldr	r2, [pc, #68]	@ (8002ef4 <HAL_GPIO_Init+0x300>)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f47f ae9d 	bne.w	8002c04 <HAL_GPIO_Init+0x10>
  }
}
 8002eca:	bf00      	nop
 8002ecc:	bf00      	nop
 8002ece:	371c      	adds	r7, #28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	40010000 	.word	0x40010000
 8002ee0:	48000400 	.word	0x48000400
 8002ee4:	48000800 	.word	0x48000800
 8002ee8:	48000c00 	.word	0x48000c00
 8002eec:	48001000 	.word	0x48001000
 8002ef0:	48001400 	.word	0x48001400
 8002ef4:	40010400 	.word	0x40010400

08002ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	807b      	strh	r3, [r7, #2]
 8002f04:	4613      	mov	r3, r2
 8002f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f08:	787b      	ldrb	r3, [r7, #1]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f0e:	887a      	ldrh	r2, [r7, #2]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f14:	e002      	b.n	8002f1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f16:	887a      	ldrh	r2, [r7, #2]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f3a:	887a      	ldrh	r2, [r7, #2]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	041a      	lsls	r2, r3, #16
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	43d9      	mvns	r1, r3
 8002f46:	887b      	ldrh	r3, [r7, #2]
 8002f48:	400b      	ands	r3, r1
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	619a      	str	r2, [r3, #24]
}
 8002f50:	bf00      	nop
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f66:	4b08      	ldr	r3, [pc, #32]	@ (8002f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f68:	695a      	ldr	r2, [r3, #20]
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d006      	beq.n	8002f80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f72:	4a05      	ldr	r2, [pc, #20]	@ (8002f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f74:	88fb      	ldrh	r3, [r7, #6]
 8002f76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f78:	88fb      	ldrh	r3, [r7, #6]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe fb40 	bl	8001600 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40010400 	.word	0x40010400

08002f8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d141      	bne.n	800301e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f9a:	4b4b      	ldr	r3, [pc, #300]	@ (80030c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fa6:	d131      	bne.n	800300c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fa8:	4b47      	ldr	r3, [pc, #284]	@ (80030c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fae:	4a46      	ldr	r2, [pc, #280]	@ (80030c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fb8:	4b43      	ldr	r3, [pc, #268]	@ (80030c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fc0:	4a41      	ldr	r2, [pc, #260]	@ (80030c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fc8:	4b40      	ldr	r3, [pc, #256]	@ (80030cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2232      	movs	r2, #50	@ 0x32
 8002fce:	fb02 f303 	mul.w	r3, r2, r3
 8002fd2:	4a3f      	ldr	r2, [pc, #252]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd8:	0c9b      	lsrs	r3, r3, #18
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fde:	e002      	b.n	8002fe6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fe6:	4b38      	ldr	r3, [pc, #224]	@ (80030c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ff2:	d102      	bne.n	8002ffa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f2      	bne.n	8002fe0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ffa:	4b33      	ldr	r3, [pc, #204]	@ (80030c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003006:	d158      	bne.n	80030ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e057      	b.n	80030bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800300c:	4b2e      	ldr	r3, [pc, #184]	@ (80030c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800300e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003012:	4a2d      	ldr	r2, [pc, #180]	@ (80030c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003014:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003018:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800301c:	e04d      	b.n	80030ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003024:	d141      	bne.n	80030aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003026:	4b28      	ldr	r3, [pc, #160]	@ (80030c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800302e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003032:	d131      	bne.n	8003098 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003034:	4b24      	ldr	r3, [pc, #144]	@ (80030c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800303a:	4a23      	ldr	r2, [pc, #140]	@ (80030c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003040:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003044:	4b20      	ldr	r3, [pc, #128]	@ (80030c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800304c:	4a1e      	ldr	r2, [pc, #120]	@ (80030c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800304e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003052:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003054:	4b1d      	ldr	r3, [pc, #116]	@ (80030cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2232      	movs	r2, #50	@ 0x32
 800305a:	fb02 f303 	mul.w	r3, r2, r3
 800305e:	4a1c      	ldr	r2, [pc, #112]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003060:	fba2 2303 	umull	r2, r3, r2, r3
 8003064:	0c9b      	lsrs	r3, r3, #18
 8003066:	3301      	adds	r3, #1
 8003068:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800306a:	e002      	b.n	8003072 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	3b01      	subs	r3, #1
 8003070:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003072:	4b15      	ldr	r3, [pc, #84]	@ (80030c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800307a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800307e:	d102      	bne.n	8003086 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f2      	bne.n	800306c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003086:	4b10      	ldr	r3, [pc, #64]	@ (80030c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800308e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003092:	d112      	bne.n	80030ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e011      	b.n	80030bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003098:	4b0b      	ldr	r3, [pc, #44]	@ (80030c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800309a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800309e:	4a0a      	ldr	r2, [pc, #40]	@ (80030c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80030a8:	e007      	b.n	80030ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030aa:	4b07      	ldr	r3, [pc, #28]	@ (80030c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030b2:	4a05      	ldr	r2, [pc, #20]	@ (80030c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030b8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	40007000 	.word	0x40007000
 80030cc:	20000000 	.word	0x20000000
 80030d0:	431bde83 	.word	0x431bde83

080030d4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80030d8:	4b05      	ldr	r3, [pc, #20]	@ (80030f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4a04      	ldr	r2, [pc, #16]	@ (80030f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80030de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030e2:	6093      	str	r3, [r2, #8]
}
 80030e4:	bf00      	nop
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	40007000 	.word	0x40007000

080030f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e2fe      	b.n	8003704 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d075      	beq.n	80031fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003112:	4b97      	ldr	r3, [pc, #604]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 030c 	and.w	r3, r3, #12
 800311a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800311c:	4b94      	ldr	r3, [pc, #592]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	2b0c      	cmp	r3, #12
 800312a:	d102      	bne.n	8003132 <HAL_RCC_OscConfig+0x3e>
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2b03      	cmp	r3, #3
 8003130:	d002      	beq.n	8003138 <HAL_RCC_OscConfig+0x44>
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	2b08      	cmp	r3, #8
 8003136:	d10b      	bne.n	8003150 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003138:	4b8d      	ldr	r3, [pc, #564]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d05b      	beq.n	80031fc <HAL_RCC_OscConfig+0x108>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d157      	bne.n	80031fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e2d9      	b.n	8003704 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003158:	d106      	bne.n	8003168 <HAL_RCC_OscConfig+0x74>
 800315a:	4b85      	ldr	r3, [pc, #532]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a84      	ldr	r2, [pc, #528]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e01d      	b.n	80031a4 <HAL_RCC_OscConfig+0xb0>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003170:	d10c      	bne.n	800318c <HAL_RCC_OscConfig+0x98>
 8003172:	4b7f      	ldr	r3, [pc, #508]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a7e      	ldr	r2, [pc, #504]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 8003178:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	4b7c      	ldr	r3, [pc, #496]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a7b      	ldr	r2, [pc, #492]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 8003184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	e00b      	b.n	80031a4 <HAL_RCC_OscConfig+0xb0>
 800318c:	4b78      	ldr	r3, [pc, #480]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a77      	ldr	r2, [pc, #476]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 8003192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003196:	6013      	str	r3, [r2, #0]
 8003198:	4b75      	ldr	r3, [pc, #468]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a74      	ldr	r2, [pc, #464]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 800319e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d013      	beq.n	80031d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7ff f972 	bl	8002494 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b4:	f7ff f96e 	bl	8002494 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	@ 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e29e      	b.n	8003704 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031c6:	4b6a      	ldr	r3, [pc, #424]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0xc0>
 80031d2:	e014      	b.n	80031fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7ff f95e 	bl	8002494 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031dc:	f7ff f95a 	bl	8002494 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b64      	cmp	r3, #100	@ 0x64
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e28a      	b.n	8003704 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ee:	4b60      	ldr	r3, [pc, #384]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0xe8>
 80031fa:	e000      	b.n	80031fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d075      	beq.n	80032f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800320a:	4b59      	ldr	r3, [pc, #356]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003214:	4b56      	ldr	r3, [pc, #344]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b0c      	cmp	r3, #12
 8003222:	d102      	bne.n	800322a <HAL_RCC_OscConfig+0x136>
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d002      	beq.n	8003230 <HAL_RCC_OscConfig+0x13c>
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	2b04      	cmp	r3, #4
 800322e:	d11f      	bne.n	8003270 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003230:	4b4f      	ldr	r3, [pc, #316]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <HAL_RCC_OscConfig+0x154>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e25d      	b.n	8003704 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003248:	4b49      	ldr	r3, [pc, #292]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	061b      	lsls	r3, r3, #24
 8003256:	4946      	ldr	r1, [pc, #280]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 8003258:	4313      	orrs	r3, r2
 800325a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800325c:	4b45      	ldr	r3, [pc, #276]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff f8cb 	bl	80023fc <HAL_InitTick>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d043      	beq.n	80032f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e249      	b.n	8003704 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d023      	beq.n	80032c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003278:	4b3d      	ldr	r3, [pc, #244]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a3c      	ldr	r2, [pc, #240]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 800327e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003284:	f7ff f906 	bl	8002494 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800328c:	f7ff f902 	bl	8002494 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e232      	b.n	8003704 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800329e:	4b34      	ldr	r3, [pc, #208]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032aa:	4b31      	ldr	r3, [pc, #196]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	061b      	lsls	r3, r3, #24
 80032b8:	492d      	ldr	r1, [pc, #180]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	604b      	str	r3, [r1, #4]
 80032be:	e01a      	b.n	80032f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a2a      	ldr	r2, [pc, #168]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 80032c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7ff f8e2 	bl	8002494 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d4:	f7ff f8de 	bl	8002494 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e20e      	b.n	8003704 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032e6:	4b22      	ldr	r3, [pc, #136]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x1e0>
 80032f2:	e000      	b.n	80032f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d041      	beq.n	8003386 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d01c      	beq.n	8003344 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800330a:	4b19      	ldr	r3, [pc, #100]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 800330c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003310:	4a17      	ldr	r2, [pc, #92]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 8003312:	f043 0301 	orr.w	r3, r3, #1
 8003316:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331a:	f7ff f8bb 	bl	8002494 <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003322:	f7ff f8b7 	bl	8002494 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e1e7      	b.n	8003704 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003334:	4b0e      	ldr	r3, [pc, #56]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 8003336:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0ef      	beq.n	8003322 <HAL_RCC_OscConfig+0x22e>
 8003342:	e020      	b.n	8003386 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003344:	4b0a      	ldr	r3, [pc, #40]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 8003346:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800334a:	4a09      	ldr	r2, [pc, #36]	@ (8003370 <HAL_RCC_OscConfig+0x27c>)
 800334c:	f023 0301 	bic.w	r3, r3, #1
 8003350:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003354:	f7ff f89e 	bl	8002494 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800335a:	e00d      	b.n	8003378 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800335c:	f7ff f89a 	bl	8002494 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d906      	bls.n	8003378 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e1ca      	b.n	8003704 <HAL_RCC_OscConfig+0x610>
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000
 8003374:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003378:	4b8c      	ldr	r3, [pc, #560]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 800337a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1ea      	bne.n	800335c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 80a6 	beq.w	80034e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003394:	2300      	movs	r3, #0
 8003396:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003398:	4b84      	ldr	r3, [pc, #528]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_OscConfig+0x2b4>
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0x2b6>
 80033a8:	2300      	movs	r3, #0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00d      	beq.n	80033ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ae:	4b7f      	ldr	r3, [pc, #508]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 80033b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b2:	4a7e      	ldr	r2, [pc, #504]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 80033b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80033ba:	4b7c      	ldr	r3, [pc, #496]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 80033bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80033c6:	2301      	movs	r3, #1
 80033c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ca:	4b79      	ldr	r3, [pc, #484]	@ (80035b0 <HAL_RCC_OscConfig+0x4bc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d118      	bne.n	8003408 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033d6:	4b76      	ldr	r3, [pc, #472]	@ (80035b0 <HAL_RCC_OscConfig+0x4bc>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a75      	ldr	r2, [pc, #468]	@ (80035b0 <HAL_RCC_OscConfig+0x4bc>)
 80033dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e2:	f7ff f857 	bl	8002494 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ea:	f7ff f853 	bl	8002494 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e183      	b.n	8003704 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033fc:	4b6c      	ldr	r3, [pc, #432]	@ (80035b0 <HAL_RCC_OscConfig+0x4bc>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d108      	bne.n	8003422 <HAL_RCC_OscConfig+0x32e>
 8003410:	4b66      	ldr	r3, [pc, #408]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003416:	4a65      	ldr	r2, [pc, #404]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003420:	e024      	b.n	800346c <HAL_RCC_OscConfig+0x378>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b05      	cmp	r3, #5
 8003428:	d110      	bne.n	800344c <HAL_RCC_OscConfig+0x358>
 800342a:	4b60      	ldr	r3, [pc, #384]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 800342c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003430:	4a5e      	ldr	r2, [pc, #376]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 8003432:	f043 0304 	orr.w	r3, r3, #4
 8003436:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800343a:	4b5c      	ldr	r3, [pc, #368]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003440:	4a5a      	ldr	r2, [pc, #360]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800344a:	e00f      	b.n	800346c <HAL_RCC_OscConfig+0x378>
 800344c:	4b57      	ldr	r3, [pc, #348]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003452:	4a56      	ldr	r2, [pc, #344]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 8003454:	f023 0301 	bic.w	r3, r3, #1
 8003458:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800345c:	4b53      	ldr	r3, [pc, #332]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003462:	4a52      	ldr	r2, [pc, #328]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 8003464:	f023 0304 	bic.w	r3, r3, #4
 8003468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d016      	beq.n	80034a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003474:	f7ff f80e 	bl	8002494 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800347a:	e00a      	b.n	8003492 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347c:	f7ff f80a 	bl	8002494 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e138      	b.n	8003704 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003492:	4b46      	ldr	r3, [pc, #280]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0ed      	beq.n	800347c <HAL_RCC_OscConfig+0x388>
 80034a0:	e015      	b.n	80034ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a2:	f7fe fff7 	bl	8002494 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034a8:	e00a      	b.n	80034c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034aa:	f7fe fff3 	bl	8002494 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e121      	b.n	8003704 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034c0:	4b3a      	ldr	r3, [pc, #232]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1ed      	bne.n	80034aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034ce:	7ffb      	ldrb	r3, [r7, #31]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d105      	bne.n	80034e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d4:	4b35      	ldr	r3, [pc, #212]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 80034d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d8:	4a34      	ldr	r2, [pc, #208]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 80034da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034de:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0320 	and.w	r3, r3, #32
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d03c      	beq.n	8003566 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d01c      	beq.n	800352e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034f4:	4b2d      	ldr	r3, [pc, #180]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 80034f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034fa:	4a2c      	ldr	r2, [pc, #176]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003504:	f7fe ffc6 	bl	8002494 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800350c:	f7fe ffc2 	bl	8002494 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e0f2      	b.n	8003704 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800351e:	4b23      	ldr	r3, [pc, #140]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 8003520:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0ef      	beq.n	800350c <HAL_RCC_OscConfig+0x418>
 800352c:	e01b      	b.n	8003566 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800352e:	4b1f      	ldr	r3, [pc, #124]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 8003530:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003534:	4a1d      	ldr	r2, [pc, #116]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 8003536:	f023 0301 	bic.w	r3, r3, #1
 800353a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353e:	f7fe ffa9 	bl	8002494 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003546:	f7fe ffa5 	bl	8002494 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e0d5      	b.n	8003704 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003558:	4b14      	ldr	r3, [pc, #80]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 800355a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1ef      	bne.n	8003546 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 80c9 	beq.w	8003702 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003570:	4b0e      	ldr	r3, [pc, #56]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 030c 	and.w	r3, r3, #12
 8003578:	2b0c      	cmp	r3, #12
 800357a:	f000 8083 	beq.w	8003684 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d15e      	bne.n	8003644 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003586:	4b09      	ldr	r3, [pc, #36]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a08      	ldr	r2, [pc, #32]	@ (80035ac <HAL_RCC_OscConfig+0x4b8>)
 800358c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003592:	f7fe ff7f 	bl	8002494 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003598:	e00c      	b.n	80035b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359a:	f7fe ff7b 	bl	8002494 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d905      	bls.n	80035b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e0ab      	b.n	8003704 <HAL_RCC_OscConfig+0x610>
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b4:	4b55      	ldr	r3, [pc, #340]	@ (800370c <HAL_RCC_OscConfig+0x618>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1ec      	bne.n	800359a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035c0:	4b52      	ldr	r3, [pc, #328]	@ (800370c <HAL_RCC_OscConfig+0x618>)
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	4b52      	ldr	r3, [pc, #328]	@ (8003710 <HAL_RCC_OscConfig+0x61c>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6a11      	ldr	r1, [r2, #32]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035d0:	3a01      	subs	r2, #1
 80035d2:	0112      	lsls	r2, r2, #4
 80035d4:	4311      	orrs	r1, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80035da:	0212      	lsls	r2, r2, #8
 80035dc:	4311      	orrs	r1, r2
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035e2:	0852      	lsrs	r2, r2, #1
 80035e4:	3a01      	subs	r2, #1
 80035e6:	0552      	lsls	r2, r2, #21
 80035e8:	4311      	orrs	r1, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035ee:	0852      	lsrs	r2, r2, #1
 80035f0:	3a01      	subs	r2, #1
 80035f2:	0652      	lsls	r2, r2, #25
 80035f4:	4311      	orrs	r1, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80035fa:	06d2      	lsls	r2, r2, #27
 80035fc:	430a      	orrs	r2, r1
 80035fe:	4943      	ldr	r1, [pc, #268]	@ (800370c <HAL_RCC_OscConfig+0x618>)
 8003600:	4313      	orrs	r3, r2
 8003602:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003604:	4b41      	ldr	r3, [pc, #260]	@ (800370c <HAL_RCC_OscConfig+0x618>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a40      	ldr	r2, [pc, #256]	@ (800370c <HAL_RCC_OscConfig+0x618>)
 800360a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800360e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003610:	4b3e      	ldr	r3, [pc, #248]	@ (800370c <HAL_RCC_OscConfig+0x618>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4a3d      	ldr	r2, [pc, #244]	@ (800370c <HAL_RCC_OscConfig+0x618>)
 8003616:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800361a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7fe ff3a 	bl	8002494 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003624:	f7fe ff36 	bl	8002494 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e066      	b.n	8003704 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003636:	4b35      	ldr	r3, [pc, #212]	@ (800370c <HAL_RCC_OscConfig+0x618>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCC_OscConfig+0x530>
 8003642:	e05e      	b.n	8003702 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003644:	4b31      	ldr	r3, [pc, #196]	@ (800370c <HAL_RCC_OscConfig+0x618>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a30      	ldr	r2, [pc, #192]	@ (800370c <HAL_RCC_OscConfig+0x618>)
 800364a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800364e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fe ff20 	bl	8002494 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003658:	f7fe ff1c 	bl	8002494 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e04c      	b.n	8003704 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800366a:	4b28      	ldr	r3, [pc, #160]	@ (800370c <HAL_RCC_OscConfig+0x618>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003676:	4b25      	ldr	r3, [pc, #148]	@ (800370c <HAL_RCC_OscConfig+0x618>)
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	4924      	ldr	r1, [pc, #144]	@ (800370c <HAL_RCC_OscConfig+0x618>)
 800367c:	4b25      	ldr	r3, [pc, #148]	@ (8003714 <HAL_RCC_OscConfig+0x620>)
 800367e:	4013      	ands	r3, r2
 8003680:	60cb      	str	r3, [r1, #12]
 8003682:	e03e      	b.n	8003702 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e039      	b.n	8003704 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003690:	4b1e      	ldr	r3, [pc, #120]	@ (800370c <HAL_RCC_OscConfig+0x618>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f003 0203 	and.w	r2, r3, #3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d12c      	bne.n	80036fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ae:	3b01      	subs	r3, #1
 80036b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d123      	bne.n	80036fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d11b      	bne.n	80036fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d113      	bne.n	80036fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e0:	085b      	lsrs	r3, r3, #1
 80036e2:	3b01      	subs	r3, #1
 80036e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d109      	bne.n	80036fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f4:	085b      	lsrs	r3, r3, #1
 80036f6:	3b01      	subs	r3, #1
 80036f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d001      	beq.n	8003702 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3720      	adds	r7, #32
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40021000 	.word	0x40021000
 8003710:	019f800c 	.word	0x019f800c
 8003714:	feeefffc 	.word	0xfeeefffc

08003718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e11e      	b.n	800396e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003730:	4b91      	ldr	r3, [pc, #580]	@ (8003978 <HAL_RCC_ClockConfig+0x260>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d910      	bls.n	8003760 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373e:	4b8e      	ldr	r3, [pc, #568]	@ (8003978 <HAL_RCC_ClockConfig+0x260>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 020f 	bic.w	r2, r3, #15
 8003746:	498c      	ldr	r1, [pc, #560]	@ (8003978 <HAL_RCC_ClockConfig+0x260>)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800374e:	4b8a      	ldr	r3, [pc, #552]	@ (8003978 <HAL_RCC_ClockConfig+0x260>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e106      	b.n	800396e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d073      	beq.n	8003854 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b03      	cmp	r3, #3
 8003772:	d129      	bne.n	80037c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003774:	4b81      	ldr	r3, [pc, #516]	@ (800397c <HAL_RCC_ClockConfig+0x264>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0f4      	b.n	800396e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003784:	f000 f99c 	bl	8003ac0 <RCC_GetSysClockFreqFromPLLSource>
 8003788:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4a7c      	ldr	r2, [pc, #496]	@ (8003980 <HAL_RCC_ClockConfig+0x268>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d93f      	bls.n	8003812 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003792:	4b7a      	ldr	r3, [pc, #488]	@ (800397c <HAL_RCC_ClockConfig+0x264>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d009      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d033      	beq.n	8003812 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d12f      	bne.n	8003812 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037b2:	4b72      	ldr	r3, [pc, #456]	@ (800397c <HAL_RCC_ClockConfig+0x264>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037ba:	4a70      	ldr	r2, [pc, #448]	@ (800397c <HAL_RCC_ClockConfig+0x264>)
 80037bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037c2:	2380      	movs	r3, #128	@ 0x80
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e024      	b.n	8003812 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d107      	bne.n	80037e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037d0:	4b6a      	ldr	r3, [pc, #424]	@ (800397c <HAL_RCC_ClockConfig+0x264>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0c6      	b.n	800396e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037e0:	4b66      	ldr	r3, [pc, #408]	@ (800397c <HAL_RCC_ClockConfig+0x264>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0be      	b.n	800396e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80037f0:	f000 f8ce 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 80037f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	4a61      	ldr	r2, [pc, #388]	@ (8003980 <HAL_RCC_ClockConfig+0x268>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d909      	bls.n	8003812 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037fe:	4b5f      	ldr	r3, [pc, #380]	@ (800397c <HAL_RCC_ClockConfig+0x264>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003806:	4a5d      	ldr	r2, [pc, #372]	@ (800397c <HAL_RCC_ClockConfig+0x264>)
 8003808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800380c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800380e:	2380      	movs	r3, #128	@ 0x80
 8003810:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003812:	4b5a      	ldr	r3, [pc, #360]	@ (800397c <HAL_RCC_ClockConfig+0x264>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f023 0203 	bic.w	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	4957      	ldr	r1, [pc, #348]	@ (800397c <HAL_RCC_ClockConfig+0x264>)
 8003820:	4313      	orrs	r3, r2
 8003822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003824:	f7fe fe36 	bl	8002494 <HAL_GetTick>
 8003828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382a:	e00a      	b.n	8003842 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800382c:	f7fe fe32 	bl	8002494 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e095      	b.n	800396e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003842:	4b4e      	ldr	r3, [pc, #312]	@ (800397c <HAL_RCC_ClockConfig+0x264>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 020c 	and.w	r2, r3, #12
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	429a      	cmp	r2, r3
 8003852:	d1eb      	bne.n	800382c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d023      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800386c:	4b43      	ldr	r3, [pc, #268]	@ (800397c <HAL_RCC_ClockConfig+0x264>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	4a42      	ldr	r2, [pc, #264]	@ (800397c <HAL_RCC_ClockConfig+0x264>)
 8003872:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003876:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b00      	cmp	r3, #0
 8003882:	d007      	beq.n	8003894 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003884:	4b3d      	ldr	r3, [pc, #244]	@ (800397c <HAL_RCC_ClockConfig+0x264>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800388c:	4a3b      	ldr	r2, [pc, #236]	@ (800397c <HAL_RCC_ClockConfig+0x264>)
 800388e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003892:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003894:	4b39      	ldr	r3, [pc, #228]	@ (800397c <HAL_RCC_ClockConfig+0x264>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	4936      	ldr	r1, [pc, #216]	@ (800397c <HAL_RCC_ClockConfig+0x264>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
 80038a6:	e008      	b.n	80038ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	2b80      	cmp	r3, #128	@ 0x80
 80038ac:	d105      	bne.n	80038ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80038ae:	4b33      	ldr	r3, [pc, #204]	@ (800397c <HAL_RCC_ClockConfig+0x264>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	4a32      	ldr	r2, [pc, #200]	@ (800397c <HAL_RCC_ClockConfig+0x264>)
 80038b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003978 <HAL_RCC_ClockConfig+0x260>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d21d      	bcs.n	8003904 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003978 <HAL_RCC_ClockConfig+0x260>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f023 020f 	bic.w	r2, r3, #15
 80038d0:	4929      	ldr	r1, [pc, #164]	@ (8003978 <HAL_RCC_ClockConfig+0x260>)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038d8:	f7fe fddc 	bl	8002494 <HAL_GetTick>
 80038dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e0:	f7fe fdd8 	bl	8002494 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e03b      	b.n	800396e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f6:	4b20      	ldr	r3, [pc, #128]	@ (8003978 <HAL_RCC_ClockConfig+0x260>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d1ed      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003910:	4b1a      	ldr	r3, [pc, #104]	@ (800397c <HAL_RCC_ClockConfig+0x264>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4917      	ldr	r1, [pc, #92]	@ (800397c <HAL_RCC_ClockConfig+0x264>)
 800391e:	4313      	orrs	r3, r2
 8003920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800392e:	4b13      	ldr	r3, [pc, #76]	@ (800397c <HAL_RCC_ClockConfig+0x264>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	490f      	ldr	r1, [pc, #60]	@ (800397c <HAL_RCC_ClockConfig+0x264>)
 800393e:	4313      	orrs	r3, r2
 8003940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003942:	f000 f825 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8003946:	4602      	mov	r2, r0
 8003948:	4b0c      	ldr	r3, [pc, #48]	@ (800397c <HAL_RCC_ClockConfig+0x264>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	490c      	ldr	r1, [pc, #48]	@ (8003984 <HAL_RCC_ClockConfig+0x26c>)
 8003954:	5ccb      	ldrb	r3, [r1, r3]
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	fa22 f303 	lsr.w	r3, r2, r3
 800395e:	4a0a      	ldr	r2, [pc, #40]	@ (8003988 <HAL_RCC_ClockConfig+0x270>)
 8003960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003962:	4b0a      	ldr	r3, [pc, #40]	@ (800398c <HAL_RCC_ClockConfig+0x274>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7fe fd48 	bl	80023fc <HAL_InitTick>
 800396c:	4603      	mov	r3, r0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40022000 	.word	0x40022000
 800397c:	40021000 	.word	0x40021000
 8003980:	04c4b400 	.word	0x04c4b400
 8003984:	0800d488 	.word	0x0800d488
 8003988:	20000000 	.word	0x20000000
 800398c:	20000004 	.word	0x20000004

08003990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003996:	4b2c      	ldr	r3, [pc, #176]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d102      	bne.n	80039a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039a2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0xbc>)
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	e047      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80039a8:	4b27      	ldr	r3, [pc, #156]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 030c 	and.w	r3, r3, #12
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d102      	bne.n	80039ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039b4:	4b25      	ldr	r3, [pc, #148]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0xbc>)
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	e03e      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80039ba:	4b23      	ldr	r3, [pc, #140]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
 80039c2:	2b0c      	cmp	r3, #12
 80039c4:	d136      	bne.n	8003a34 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039c6:	4b20      	ldr	r3, [pc, #128]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	3301      	adds	r3, #1
 80039dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d10c      	bne.n	80039fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039e4:	4a19      	ldr	r2, [pc, #100]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0xbc>)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ec:	4a16      	ldr	r2, [pc, #88]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ee:	68d2      	ldr	r2, [r2, #12]
 80039f0:	0a12      	lsrs	r2, r2, #8
 80039f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039f6:	fb02 f303 	mul.w	r3, r2, r3
 80039fa:	617b      	str	r3, [r7, #20]
      break;
 80039fc:	e00c      	b.n	8003a18 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039fe:	4a13      	ldr	r2, [pc, #76]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a06:	4a10      	ldr	r2, [pc, #64]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a08:	68d2      	ldr	r2, [r2, #12]
 8003a0a:	0a12      	lsrs	r2, r2, #8
 8003a0c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a10:	fb02 f303 	mul.w	r3, r2, r3
 8003a14:	617b      	str	r3, [r7, #20]
      break;
 8003a16:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a18:	4b0b      	ldr	r3, [pc, #44]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	0e5b      	lsrs	r3, r3, #25
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	3301      	adds	r3, #1
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	e001      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a38:	693b      	ldr	r3, [r7, #16]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	00f42400 	.word	0x00f42400

08003a50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a54:	4b03      	ldr	r3, [pc, #12]	@ (8003a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a56:	681b      	ldr	r3, [r3, #0]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20000000 	.word	0x20000000

08003a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a6c:	f7ff fff0 	bl	8003a50 <HAL_RCC_GetHCLKFreq>
 8003a70:	4602      	mov	r2, r0
 8003a72:	4b06      	ldr	r3, [pc, #24]	@ (8003a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	0a1b      	lsrs	r3, r3, #8
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	4904      	ldr	r1, [pc, #16]	@ (8003a90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a7e:	5ccb      	ldrb	r3, [r1, r3]
 8003a80:	f003 031f 	and.w	r3, r3, #31
 8003a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	0800d498 	.word	0x0800d498

08003a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a98:	f7ff ffda 	bl	8003a50 <HAL_RCC_GetHCLKFreq>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	4b06      	ldr	r3, [pc, #24]	@ (8003ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	0adb      	lsrs	r3, r3, #11
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	4904      	ldr	r1, [pc, #16]	@ (8003abc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003aaa:	5ccb      	ldrb	r3, [r1, r3]
 8003aac:	f003 031f 	and.w	r3, r3, #31
 8003ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	0800d498 	.word	0x0800d498

08003ac0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	091b      	lsrs	r3, r3, #4
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	3301      	adds	r3, #1
 8003adc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	d10c      	bne.n	8003afe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ae4:	4a17      	ldr	r2, [pc, #92]	@ (8003b44 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aec:	4a14      	ldr	r2, [pc, #80]	@ (8003b40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aee:	68d2      	ldr	r2, [r2, #12]
 8003af0:	0a12      	lsrs	r2, r2, #8
 8003af2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	617b      	str	r3, [r7, #20]
    break;
 8003afc:	e00c      	b.n	8003b18 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003afe:	4a11      	ldr	r2, [pc, #68]	@ (8003b44 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b06:	4a0e      	ldr	r2, [pc, #56]	@ (8003b40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b08:	68d2      	ldr	r2, [r2, #12]
 8003b0a:	0a12      	lsrs	r2, r2, #8
 8003b0c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b10:	fb02 f303 	mul.w	r3, r2, r3
 8003b14:	617b      	str	r3, [r7, #20]
    break;
 8003b16:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b18:	4b09      	ldr	r3, [pc, #36]	@ (8003b40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	0e5b      	lsrs	r3, r3, #25
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	3301      	adds	r3, #1
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b30:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b32:	687b      	ldr	r3, [r7, #4]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	371c      	adds	r7, #28
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	40021000 	.word	0x40021000
 8003b44:	00f42400 	.word	0x00f42400

08003b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b50:	2300      	movs	r3, #0
 8003b52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b54:	2300      	movs	r3, #0
 8003b56:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8098 	beq.w	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b66:	2300      	movs	r3, #0
 8003b68:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b6a:	4b43      	ldr	r3, [pc, #268]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10d      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b76:	4b40      	ldr	r3, [pc, #256]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7a:	4a3f      	ldr	r2, [pc, #252]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b80:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b82:	4b3d      	ldr	r3, [pc, #244]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b92:	4b3a      	ldr	r3, [pc, #232]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a39      	ldr	r2, [pc, #228]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b9e:	f7fe fc79 	bl	8002494 <HAL_GetTick>
 8003ba2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ba4:	e009      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba6:	f7fe fc75 	bl	8002494 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d902      	bls.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	74fb      	strb	r3, [r7, #19]
        break;
 8003bb8:	e005      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bba:	4b30      	ldr	r3, [pc, #192]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0ef      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003bc6:	7cfb      	ldrb	r3, [r7, #19]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d159      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bcc:	4b2a      	ldr	r3, [pc, #168]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bd6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d01e      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d019      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003be8:	4b23      	ldr	r3, [pc, #140]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bf2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bf4:	4b20      	ldr	r3, [pc, #128]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bfa:	4a1f      	ldr	r2, [pc, #124]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c04:	4b1c      	ldr	r3, [pc, #112]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c0a:	4a1b      	ldr	r2, [pc, #108]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c14:	4a18      	ldr	r2, [pc, #96]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d016      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c26:	f7fe fc35 	bl	8002494 <HAL_GetTick>
 8003c2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c2c:	e00b      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2e:	f7fe fc31 	bl	8002494 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d902      	bls.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	74fb      	strb	r3, [r7, #19]
            break;
 8003c44:	e006      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c46:	4b0c      	ldr	r3, [pc, #48]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0ec      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003c54:	7cfb      	ldrb	r3, [r7, #19]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10b      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c5a:	4b07      	ldr	r3, [pc, #28]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c68:	4903      	ldr	r1, [pc, #12]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c70:	e008      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c72:	7cfb      	ldrb	r3, [r7, #19]
 8003c74:	74bb      	strb	r3, [r7, #18]
 8003c76:	e005      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c80:	7cfb      	ldrb	r3, [r7, #19]
 8003c82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c84:	7c7b      	ldrb	r3, [r7, #17]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d105      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c8a:	4ba6      	ldr	r3, [pc, #664]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8e:	4aa5      	ldr	r2, [pc, #660]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c94:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ca2:	4ba0      	ldr	r3, [pc, #640]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca8:	f023 0203 	bic.w	r2, r3, #3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	499c      	ldr	r1, [pc, #624]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cc4:	4b97      	ldr	r3, [pc, #604]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cca:	f023 020c 	bic.w	r2, r3, #12
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	4994      	ldr	r1, [pc, #592]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ce6:	4b8f      	ldr	r3, [pc, #572]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	498b      	ldr	r1, [pc, #556]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d08:	4b86      	ldr	r3, [pc, #536]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d0e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	4983      	ldr	r1, [pc, #524]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d2a:	4b7e      	ldr	r3, [pc, #504]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d30:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	497a      	ldr	r1, [pc, #488]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d4c:	4b75      	ldr	r3, [pc, #468]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d52:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	4972      	ldr	r1, [pc, #456]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d6e:	4b6d      	ldr	r3, [pc, #436]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d74:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	4969      	ldr	r1, [pc, #420]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d90:	4b64      	ldr	r3, [pc, #400]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d96:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	4961      	ldr	r1, [pc, #388]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003db2:	4b5c      	ldr	r3, [pc, #368]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc0:	4958      	ldr	r1, [pc, #352]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d015      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dd4:	4b53      	ldr	r3, [pc, #332]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dda:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de2:	4950      	ldr	r1, [pc, #320]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003df2:	d105      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003df4:	4b4b      	ldr	r3, [pc, #300]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	4a4a      	ldr	r2, [pc, #296]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dfe:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d015      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e0c:	4b45      	ldr	r3, [pc, #276]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e12:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1a:	4942      	ldr	r1, [pc, #264]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e2a:	d105      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e2c:	4b3d      	ldr	r3, [pc, #244]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4a3c      	ldr	r2, [pc, #240]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e36:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d015      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e44:	4b37      	ldr	r3, [pc, #220]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e4a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e52:	4934      	ldr	r1, [pc, #208]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e62:	d105      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e64:	4b2f      	ldr	r3, [pc, #188]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	4a2e      	ldr	r2, [pc, #184]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e6e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d015      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e7c:	4b29      	ldr	r3, [pc, #164]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e8a:	4926      	ldr	r1, [pc, #152]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e9a:	d105      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e9c:	4b21      	ldr	r3, [pc, #132]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4a20      	ldr	r2, [pc, #128]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ea6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d015      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec2:	4918      	ldr	r1, [pc, #96]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ece:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ed2:	d105      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ed4:	4b13      	ldr	r3, [pc, #76]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	4a12      	ldr	r2, [pc, #72]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ede:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d015      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003eec:	4b0d      	ldr	r3, [pc, #52]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003efa:	490a      	ldr	r1, [pc, #40]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f0a:	d105      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f0c:	4b05      	ldr	r3, [pc, #20]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4a04      	ldr	r2, [pc, #16]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f16:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f18:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40021000 	.word	0x40021000

08003f28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e09d      	b.n	8004076 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d108      	bne.n	8003f54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f4a:	d009      	beq.n	8003f60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	61da      	str	r2, [r3, #28]
 8003f52:	e005      	b.n	8003f60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d106      	bne.n	8003f80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fd fc08 	bl	8001790 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fa0:	d902      	bls.n	8003fa8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	e002      	b.n	8003fae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003fa8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003fb6:	d007      	beq.n	8003fc8 <HAL_SPI_Init+0xa0>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fc0:	d002      	beq.n	8003fc8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800400a:	ea42 0103 	orr.w	r1, r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004012:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	0c1b      	lsrs	r3, r3, #16
 8004024:	f003 0204 	and.w	r2, r3, #4
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402c:	f003 0310 	and.w	r3, r3, #16
 8004030:	431a      	orrs	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004044:	ea42 0103 	orr.w	r1, r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69da      	ldr	r2, [r3, #28]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004064:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b088      	sub	sp, #32
 8004082:	af00      	add	r7, sp, #0
 8004084:	60f8      	str	r0, [r7, #12]
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	603b      	str	r3, [r7, #0]
 800408a:	4613      	mov	r3, r2
 800408c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_SPI_Transmit+0x22>
 800409c:	2302      	movs	r3, #2
 800409e:	e15f      	b.n	8004360 <HAL_SPI_Transmit+0x2e2>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040a8:	f7fe f9f4 	bl	8002494 <HAL_GetTick>
 80040ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80040ae:	88fb      	ldrh	r3, [r7, #6]
 80040b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d002      	beq.n	80040c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80040be:	2302      	movs	r3, #2
 80040c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040c2:	e148      	b.n	8004356 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <HAL_SPI_Transmit+0x52>
 80040ca:	88fb      	ldrh	r3, [r7, #6]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040d4:	e13f      	b.n	8004356 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2203      	movs	r2, #3
 80040da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	88fa      	ldrh	r2, [r7, #6]
 80040ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	88fa      	ldrh	r2, [r7, #6]
 80040f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004120:	d10f      	bne.n	8004142 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004130:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004140:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414c:	2b40      	cmp	r3, #64	@ 0x40
 800414e:	d007      	beq.n	8004160 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800415e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004168:	d94f      	bls.n	800420a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_SPI_Transmit+0xfa>
 8004172:	8afb      	ldrh	r3, [r7, #22]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d142      	bne.n	80041fe <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417c:	881a      	ldrh	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004188:	1c9a      	adds	r2, r3, #2
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800419c:	e02f      	b.n	80041fe <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d112      	bne.n	80041d2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b0:	881a      	ldrh	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041bc:	1c9a      	adds	r2, r3, #2
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041d0:	e015      	b.n	80041fe <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041d2:	f7fe f95f 	bl	8002494 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d803      	bhi.n	80041ea <HAL_SPI_Transmit+0x16c>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e8:	d102      	bne.n	80041f0 <HAL_SPI_Transmit+0x172>
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d106      	bne.n	80041fe <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80041fc:	e0ab      	b.n	8004356 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1ca      	bne.n	800419e <HAL_SPI_Transmit+0x120>
 8004208:	e080      	b.n	800430c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <HAL_SPI_Transmit+0x19a>
 8004212:	8afb      	ldrh	r3, [r7, #22]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d174      	bne.n	8004302 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b01      	cmp	r3, #1
 8004220:	d912      	bls.n	8004248 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004226:	881a      	ldrh	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004232:	1c9a      	adds	r2, r3, #2
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b02      	subs	r3, #2
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004246:	e05c      	b.n	8004302 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	330c      	adds	r3, #12
 8004252:	7812      	ldrb	r2, [r2, #0]
 8004254:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004264:	b29b      	uxth	r3, r3
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800426e:	e048      	b.n	8004302 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b02      	cmp	r3, #2
 800427c:	d12b      	bne.n	80042d6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b01      	cmp	r3, #1
 8004286:	d912      	bls.n	80042ae <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428c:	881a      	ldrh	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004298:	1c9a      	adds	r2, r3, #2
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b02      	subs	r3, #2
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80042ac:	e029      	b.n	8004302 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	330c      	adds	r3, #12
 80042b8:	7812      	ldrb	r2, [r2, #0]
 80042ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c0:	1c5a      	adds	r2, r3, #1
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80042d4:	e015      	b.n	8004302 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042d6:	f7fe f8dd 	bl	8002494 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d803      	bhi.n	80042ee <HAL_SPI_Transmit+0x270>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ec:	d102      	bne.n	80042f4 <HAL_SPI_Transmit+0x276>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d106      	bne.n	8004302 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004300:	e029      	b.n	8004356 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1b1      	bne.n	8004270 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	6839      	ldr	r1, [r7, #0]
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 fcf9 	bl	8004d08 <SPI_EndRxTxTransaction>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d002      	beq.n	8004322 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10a      	bne.n	8004340 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800432a:	2300      	movs	r3, #0
 800432c:	613b      	str	r3, [r7, #16]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	77fb      	strb	r3, [r7, #31]
 800434c:	e003      	b.n	8004356 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800435e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3720      	adds	r7, #32
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af02      	add	r7, sp, #8
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	4613      	mov	r3, r2
 8004376:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b01      	cmp	r3, #1
 8004386:	d002      	beq.n	800438e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004388:	2302      	movs	r3, #2
 800438a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800438c:	e11a      	b.n	80045c4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004396:	d112      	bne.n	80043be <HAL_SPI_Receive+0x56>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10e      	bne.n	80043be <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2204      	movs	r2, #4
 80043a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80043a8:	88fa      	ldrh	r2, [r7, #6]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	4613      	mov	r3, r2
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	68b9      	ldr	r1, [r7, #8]
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 f90e 	bl	80045d6 <HAL_SPI_TransmitReceive>
 80043ba:	4603      	mov	r3, r0
 80043bc:	e107      	b.n	80045ce <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_SPI_Receive+0x64>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e100      	b.n	80045ce <HAL_SPI_Receive+0x266>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043d4:	f7fe f85e 	bl	8002494 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <HAL_SPI_Receive+0x7e>
 80043e0:	88fb      	ldrh	r3, [r7, #6]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d102      	bne.n	80043ec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043ea:	e0eb      	b.n	80045c4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2204      	movs	r2, #4
 80043f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	88fa      	ldrh	r2, [r7, #6]
 8004404:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	88fa      	ldrh	r2, [r7, #6]
 800440c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004436:	d908      	bls.n	800444a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004446:	605a      	str	r2, [r3, #4]
 8004448:	e007      	b.n	800445a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004458:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004462:	d10f      	bne.n	8004484 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004472:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004482:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800448e:	2b40      	cmp	r3, #64	@ 0x40
 8004490:	d007      	beq.n	80044a2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044a0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044aa:	d86f      	bhi.n	800458c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80044ac:	e034      	b.n	8004518 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d117      	bne.n	80044ec <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f103 020c 	add.w	r2, r3, #12
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c8:	7812      	ldrb	r2, [r2, #0]
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80044ea:	e015      	b.n	8004518 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044ec:	f7fd ffd2 	bl	8002494 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d803      	bhi.n	8004504 <HAL_SPI_Receive+0x19c>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004502:	d102      	bne.n	800450a <HAL_SPI_Receive+0x1a2>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004516:	e055      	b.n	80045c4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800451e:	b29b      	uxth	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1c4      	bne.n	80044ae <HAL_SPI_Receive+0x146>
 8004524:	e038      	b.n	8004598 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b01      	cmp	r3, #1
 8004532:	d115      	bne.n	8004560 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453e:	b292      	uxth	r2, r2
 8004540:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004546:	1c9a      	adds	r2, r3, #2
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004552:	b29b      	uxth	r3, r3
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800455e:	e015      	b.n	800458c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004560:	f7fd ff98 	bl	8002494 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d803      	bhi.n	8004578 <HAL_SPI_Receive+0x210>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004576:	d102      	bne.n	800457e <HAL_SPI_Receive+0x216>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800458a:	e01b      	b.n	80045c4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1c6      	bne.n	8004526 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	6839      	ldr	r1, [r7, #0]
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fb5b 	bl	8004c58 <SPI_EndRxTransaction>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2220      	movs	r2, #32
 80045ac:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	75fb      	strb	r3, [r7, #23]
 80045ba:	e003      	b.n	80045c4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80045cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b08a      	sub	sp, #40	@ 0x28
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	607a      	str	r2, [r7, #4]
 80045e2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045e4:	2301      	movs	r3, #1
 80045e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_SPI_TransmitReceive+0x26>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e20a      	b.n	8004a12 <HAL_SPI_TransmitReceive+0x43c>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004604:	f7fd ff46 	bl	8002494 <HAL_GetTick>
 8004608:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004610:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004618:	887b      	ldrh	r3, [r7, #2]
 800461a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800461c:	887b      	ldrh	r3, [r7, #2]
 800461e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004620:	7efb      	ldrb	r3, [r7, #27]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d00e      	beq.n	8004644 <HAL_SPI_TransmitReceive+0x6e>
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800462c:	d106      	bne.n	800463c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <HAL_SPI_TransmitReceive+0x66>
 8004636:	7efb      	ldrb	r3, [r7, #27]
 8004638:	2b04      	cmp	r3, #4
 800463a:	d003      	beq.n	8004644 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800463c:	2302      	movs	r3, #2
 800463e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004642:	e1e0      	b.n	8004a06 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d005      	beq.n	8004656 <HAL_SPI_TransmitReceive+0x80>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <HAL_SPI_TransmitReceive+0x80>
 8004650:	887b      	ldrh	r3, [r7, #2]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d103      	bne.n	800465e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800465c:	e1d3      	b.n	8004a06 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b04      	cmp	r3, #4
 8004668:	d003      	beq.n	8004672 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2205      	movs	r2, #5
 800466e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	887a      	ldrh	r2, [r7, #2]
 8004682:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	887a      	ldrh	r2, [r7, #2]
 800468a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	887a      	ldrh	r2, [r7, #2]
 8004698:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	887a      	ldrh	r2, [r7, #2]
 800469e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046b4:	d802      	bhi.n	80046bc <HAL_SPI_TransmitReceive+0xe6>
 80046b6:	8a3b      	ldrh	r3, [r7, #16]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d908      	bls.n	80046ce <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80046ca:	605a      	str	r2, [r3, #4]
 80046cc:	e007      	b.n	80046de <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80046dc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046e8:	2b40      	cmp	r3, #64	@ 0x40
 80046ea:	d007      	beq.n	80046fc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004704:	f240 8081 	bls.w	800480a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <HAL_SPI_TransmitReceive+0x140>
 8004710:	8a7b      	ldrh	r3, [r7, #18]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d16d      	bne.n	80047f2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471a:	881a      	ldrh	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004726:	1c9a      	adds	r2, r3, #2
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004730:	b29b      	uxth	r3, r3
 8004732:	3b01      	subs	r3, #1
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800473a:	e05a      	b.n	80047f2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b02      	cmp	r3, #2
 8004748:	d11b      	bne.n	8004782 <HAL_SPI_TransmitReceive+0x1ac>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800474e:	b29b      	uxth	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	d016      	beq.n	8004782 <HAL_SPI_TransmitReceive+0x1ac>
 8004754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004756:	2b01      	cmp	r3, #1
 8004758:	d113      	bne.n	8004782 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475e:	881a      	ldrh	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476a:	1c9a      	adds	r2, r3, #2
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004774:	b29b      	uxth	r3, r3
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b01      	cmp	r3, #1
 800478e:	d11c      	bne.n	80047ca <HAL_SPI_TransmitReceive+0x1f4>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004796:	b29b      	uxth	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d016      	beq.n	80047ca <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a6:	b292      	uxth	r2, r2
 80047a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ae:	1c9a      	adds	r2, r3, #2
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047c6:	2301      	movs	r3, #1
 80047c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047ca:	f7fd fe63 	bl	8002494 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d80b      	bhi.n	80047f2 <HAL_SPI_TransmitReceive+0x21c>
 80047da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e0:	d007      	beq.n	80047f2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80047f0:	e109      	b.n	8004a06 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d19f      	bne.n	800473c <HAL_SPI_TransmitReceive+0x166>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d199      	bne.n	800473c <HAL_SPI_TransmitReceive+0x166>
 8004808:	e0e3      	b.n	80049d2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_SPI_TransmitReceive+0x244>
 8004812:	8a7b      	ldrh	r3, [r7, #18]
 8004814:	2b01      	cmp	r3, #1
 8004816:	f040 80cf 	bne.w	80049b8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b01      	cmp	r3, #1
 8004822:	d912      	bls.n	800484a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004828:	881a      	ldrh	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004834:	1c9a      	adds	r2, r3, #2
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b02      	subs	r3, #2
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004848:	e0b6      	b.n	80049b8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	330c      	adds	r3, #12
 8004854:	7812      	ldrb	r2, [r2, #0]
 8004856:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004870:	e0a2      	b.n	80049b8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b02      	cmp	r3, #2
 800487e:	d134      	bne.n	80048ea <HAL_SPI_TransmitReceive+0x314>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d02f      	beq.n	80048ea <HAL_SPI_TransmitReceive+0x314>
 800488a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488c:	2b01      	cmp	r3, #1
 800488e:	d12c      	bne.n	80048ea <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b01      	cmp	r3, #1
 8004898:	d912      	bls.n	80048c0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489e:	881a      	ldrh	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048aa:	1c9a      	adds	r2, r3, #2
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	3b02      	subs	r3, #2
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048be:	e012      	b.n	80048e6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	330c      	adds	r3, #12
 80048ca:	7812      	ldrb	r2, [r2, #0]
 80048cc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048dc:	b29b      	uxth	r3, r3
 80048de:	3b01      	subs	r3, #1
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d148      	bne.n	800498a <HAL_SPI_TransmitReceive+0x3b4>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d042      	beq.n	800498a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800490a:	b29b      	uxth	r3, r3
 800490c:	2b01      	cmp	r3, #1
 800490e:	d923      	bls.n	8004958 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491a:	b292      	uxth	r2, r2
 800491c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004922:	1c9a      	adds	r2, r3, #2
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b02      	subs	r3, #2
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b01      	cmp	r3, #1
 8004944:	d81f      	bhi.n	8004986 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004954:	605a      	str	r2, [r3, #4]
 8004956:	e016      	b.n	8004986 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f103 020c 	add.w	r2, r3, #12
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004964:	7812      	ldrb	r2, [r2, #0]
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800497a:	b29b      	uxth	r3, r3
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004986:	2301      	movs	r3, #1
 8004988:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800498a:	f7fd fd83 	bl	8002494 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004996:	429a      	cmp	r2, r3
 8004998:	d803      	bhi.n	80049a2 <HAL_SPI_TransmitReceive+0x3cc>
 800499a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a0:	d102      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x3d2>
 80049a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d107      	bne.n	80049b8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80049b6:	e026      	b.n	8004a06 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f47f af57 	bne.w	8004872 <HAL_SPI_TransmitReceive+0x29c>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f47f af50 	bne.w	8004872 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049d2:	69fa      	ldr	r2, [r7, #28]
 80049d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 f996 	bl	8004d08 <SPI_EndRxTxTransaction>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049fc:	e003      	b.n	8004a06 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004a0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3728      	adds	r7, #40	@ 0x28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	603b      	str	r3, [r7, #0]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a2c:	f7fd fd32 	bl	8002494 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a34:	1a9b      	subs	r3, r3, r2
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	4413      	add	r3, r2
 8004a3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a3c:	f7fd fd2a 	bl	8002494 <HAL_GetTick>
 8004a40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a42:	4b39      	ldr	r3, [pc, #228]	@ (8004b28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	015b      	lsls	r3, r3, #5
 8004a48:	0d1b      	lsrs	r3, r3, #20
 8004a4a:	69fa      	ldr	r2, [r7, #28]
 8004a4c:	fb02 f303 	mul.w	r3, r2, r3
 8004a50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a52:	e054      	b.n	8004afe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5a:	d050      	beq.n	8004afe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a5c:	f7fd fd1a 	bl	8002494 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	69fa      	ldr	r2, [r7, #28]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d902      	bls.n	8004a72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d13d      	bne.n	8004aee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a8a:	d111      	bne.n	8004ab0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a94:	d004      	beq.n	8004aa0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a9e:	d107      	bne.n	8004ab0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004aae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ab8:	d10f      	bne.n	8004ada <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ad8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e017      	b.n	8004b1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4013      	ands	r3, r2
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	bf0c      	ite	eq
 8004b0e:	2301      	moveq	r3, #1
 8004b10:	2300      	movne	r3, #0
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	461a      	mov	r2, r3
 8004b16:	79fb      	ldrb	r3, [r7, #7]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d19b      	bne.n	8004a54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3720      	adds	r7, #32
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	20000000 	.word	0x20000000

08004b2c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08a      	sub	sp, #40	@ 0x28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b3e:	f7fd fca9 	bl	8002494 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004b4e:	f7fd fca1 	bl	8002494 <HAL_GetTick>
 8004b52:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	330c      	adds	r3, #12
 8004b5a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b5c:	4b3d      	ldr	r3, [pc, #244]	@ (8004c54 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	00da      	lsls	r2, r3, #3
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	0d1b      	lsrs	r3, r3, #20
 8004b6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b6e:	fb02 f303 	mul.w	r3, r2, r3
 8004b72:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b74:	e060      	b.n	8004c38 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b7c:	d107      	bne.n	8004b8e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d104      	bne.n	8004b8e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004b8c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b94:	d050      	beq.n	8004c38 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b96:	f7fd fc7d 	bl	8002494 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d902      	bls.n	8004bac <SPI_WaitFifoStateUntilTimeout+0x80>
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d13d      	bne.n	8004c28 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004bba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bc4:	d111      	bne.n	8004bea <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bce:	d004      	beq.n	8004bda <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bd8:	d107      	bne.n	8004bea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004be8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bf2:	d10f      	bne.n	8004c14 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e010      	b.n	8004c4a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	4013      	ands	r3, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d196      	bne.n	8004b76 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3728      	adds	r7, #40	@ 0x28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20000000 	.word	0x20000000

08004c58 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c6c:	d111      	bne.n	8004c92 <SPI_EndRxTransaction+0x3a>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c76:	d004      	beq.n	8004c82 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c80:	d107      	bne.n	8004c92 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c90:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	2180      	movs	r1, #128	@ 0x80
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f7ff febd 	bl	8004a1c <SPI_WaitFlagStateUntilTimeout>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d007      	beq.n	8004cb8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cac:	f043 0220 	orr.w	r2, r3, #32
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e023      	b.n	8004d00 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cc0:	d11d      	bne.n	8004cfe <SPI_EndRxTransaction+0xa6>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cca:	d004      	beq.n	8004cd6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cd4:	d113      	bne.n	8004cfe <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f7ff ff22 	bl	8004b2c <SPI_WaitFifoStateUntilTimeout>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d007      	beq.n	8004cfe <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cf2:	f043 0220 	orr.w	r2, r3, #32
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e000      	b.n	8004d00 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f7ff ff03 	bl	8004b2c <SPI_WaitFifoStateUntilTimeout>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d007      	beq.n	8004d3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d30:	f043 0220 	orr.w	r2, r3, #32
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e027      	b.n	8004d8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2200      	movs	r2, #0
 8004d44:	2180      	movs	r1, #128	@ 0x80
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f7ff fe68 	bl	8004a1c <SPI_WaitFlagStateUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d007      	beq.n	8004d62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d56:	f043 0220 	orr.w	r2, r3, #32
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e014      	b.n	8004d8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f7ff fedc 	bl	8004b2c <SPI_WaitFifoStateUntilTimeout>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d007      	beq.n	8004d8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d7e:	f043 0220 	orr.w	r2, r3, #32
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e000      	b.n	8004d8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e049      	b.n	8004e3a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d106      	bne.n	8004dc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fd f850 	bl	8001e60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3304      	adds	r3, #4
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	f000 faf0 	bl	80053b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
	...

08004e44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d109      	bne.n	8004e68 <HAL_TIM_PWM_Start+0x24>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	bf14      	ite	ne
 8004e60:	2301      	movne	r3, #1
 8004e62:	2300      	moveq	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	e03c      	b.n	8004ee2 <HAL_TIM_PWM_Start+0x9e>
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d109      	bne.n	8004e82 <HAL_TIM_PWM_Start+0x3e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	bf14      	ite	ne
 8004e7a:	2301      	movne	r3, #1
 8004e7c:	2300      	moveq	r3, #0
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	e02f      	b.n	8004ee2 <HAL_TIM_PWM_Start+0x9e>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d109      	bne.n	8004e9c <HAL_TIM_PWM_Start+0x58>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	bf14      	ite	ne
 8004e94:	2301      	movne	r3, #1
 8004e96:	2300      	moveq	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	e022      	b.n	8004ee2 <HAL_TIM_PWM_Start+0x9e>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	2b0c      	cmp	r3, #12
 8004ea0:	d109      	bne.n	8004eb6 <HAL_TIM_PWM_Start+0x72>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	bf14      	ite	ne
 8004eae:	2301      	movne	r3, #1
 8004eb0:	2300      	moveq	r3, #0
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	e015      	b.n	8004ee2 <HAL_TIM_PWM_Start+0x9e>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b10      	cmp	r3, #16
 8004eba:	d109      	bne.n	8004ed0 <HAL_TIM_PWM_Start+0x8c>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	bf14      	ite	ne
 8004ec8:	2301      	movne	r3, #1
 8004eca:	2300      	moveq	r3, #0
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	e008      	b.n	8004ee2 <HAL_TIM_PWM_Start+0x9e>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	bf14      	ite	ne
 8004edc:	2301      	movne	r3, #1
 8004ede:	2300      	moveq	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e097      	b.n	800501a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d104      	bne.n	8004efa <HAL_TIM_PWM_Start+0xb6>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ef8:	e023      	b.n	8004f42 <HAL_TIM_PWM_Start+0xfe>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d104      	bne.n	8004f0a <HAL_TIM_PWM_Start+0xc6>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f08:	e01b      	b.n	8004f42 <HAL_TIM_PWM_Start+0xfe>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d104      	bne.n	8004f1a <HAL_TIM_PWM_Start+0xd6>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f18:	e013      	b.n	8004f42 <HAL_TIM_PWM_Start+0xfe>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b0c      	cmp	r3, #12
 8004f1e:	d104      	bne.n	8004f2a <HAL_TIM_PWM_Start+0xe6>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f28:	e00b      	b.n	8004f42 <HAL_TIM_PWM_Start+0xfe>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b10      	cmp	r3, #16
 8004f2e:	d104      	bne.n	8004f3a <HAL_TIM_PWM_Start+0xf6>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f38:	e003      	b.n	8004f42 <HAL_TIM_PWM_Start+0xfe>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2201      	movs	r2, #1
 8004f48:	6839      	ldr	r1, [r7, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fdc6 	bl	8005adc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a33      	ldr	r2, [pc, #204]	@ (8005024 <HAL_TIM_PWM_Start+0x1e0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d013      	beq.n	8004f82 <HAL_TIM_PWM_Start+0x13e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a32      	ldr	r2, [pc, #200]	@ (8005028 <HAL_TIM_PWM_Start+0x1e4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00e      	beq.n	8004f82 <HAL_TIM_PWM_Start+0x13e>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a30      	ldr	r2, [pc, #192]	@ (800502c <HAL_TIM_PWM_Start+0x1e8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d009      	beq.n	8004f82 <HAL_TIM_PWM_Start+0x13e>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a2f      	ldr	r2, [pc, #188]	@ (8005030 <HAL_TIM_PWM_Start+0x1ec>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d004      	beq.n	8004f82 <HAL_TIM_PWM_Start+0x13e>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a2d      	ldr	r2, [pc, #180]	@ (8005034 <HAL_TIM_PWM_Start+0x1f0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d101      	bne.n	8004f86 <HAL_TIM_PWM_Start+0x142>
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <HAL_TIM_PWM_Start+0x144>
 8004f86:	2300      	movs	r3, #0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d007      	beq.n	8004f9c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f9a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a20      	ldr	r2, [pc, #128]	@ (8005024 <HAL_TIM_PWM_Start+0x1e0>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d018      	beq.n	8004fd8 <HAL_TIM_PWM_Start+0x194>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fae:	d013      	beq.n	8004fd8 <HAL_TIM_PWM_Start+0x194>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a20      	ldr	r2, [pc, #128]	@ (8005038 <HAL_TIM_PWM_Start+0x1f4>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00e      	beq.n	8004fd8 <HAL_TIM_PWM_Start+0x194>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800503c <HAL_TIM_PWM_Start+0x1f8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d009      	beq.n	8004fd8 <HAL_TIM_PWM_Start+0x194>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a17      	ldr	r2, [pc, #92]	@ (8005028 <HAL_TIM_PWM_Start+0x1e4>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d004      	beq.n	8004fd8 <HAL_TIM_PWM_Start+0x194>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a16      	ldr	r2, [pc, #88]	@ (800502c <HAL_TIM_PWM_Start+0x1e8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d115      	bne.n	8005004 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	4b18      	ldr	r3, [pc, #96]	@ (8005040 <HAL_TIM_PWM_Start+0x1fc>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b06      	cmp	r3, #6
 8004fe8:	d015      	beq.n	8005016 <HAL_TIM_PWM_Start+0x1d2>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ff0:	d011      	beq.n	8005016 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f042 0201 	orr.w	r2, r2, #1
 8005000:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005002:	e008      	b.n	8005016 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0201 	orr.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	e000      	b.n	8005018 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005016:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40012c00 	.word	0x40012c00
 8005028:	40013400 	.word	0x40013400
 800502c:	40014000 	.word	0x40014000
 8005030:	40014400 	.word	0x40014400
 8005034:	40014800 	.word	0x40014800
 8005038:	40000400 	.word	0x40000400
 800503c:	40000800 	.word	0x40000800
 8005040:	00010007 	.word	0x00010007

08005044 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e097      	b.n	8005188 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d106      	bne.n	8005072 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7fc ff61 	bl	8001f34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2202      	movs	r2, #2
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6812      	ldr	r2, [r2, #0]
 8005084:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005088:	f023 0307 	bic.w	r3, r3, #7
 800508c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3304      	adds	r3, #4
 8005096:	4619      	mov	r1, r3
 8005098:	4610      	mov	r0, r2
 800509a:	f000 f98d 	bl	80053b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	4313      	orrs	r3, r2
 80050be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050c6:	f023 0303 	bic.w	r3, r3, #3
 80050ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	021b      	lsls	r3, r3, #8
 80050d6:	4313      	orrs	r3, r2
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80050e4:	f023 030c 	bic.w	r3, r3, #12
 80050e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	021b      	lsls	r3, r3, #8
 8005100:	4313      	orrs	r3, r2
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	011a      	lsls	r2, r3, #4
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	031b      	lsls	r3, r3, #12
 8005114:	4313      	orrs	r3, r2
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005122:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800512a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	011b      	lsls	r3, r3, #4
 8005136:	4313      	orrs	r3, r2
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3718      	adds	r7, #24
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800519c:	2300      	movs	r3, #0
 800519e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d101      	bne.n	80051ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051aa:	2302      	movs	r3, #2
 80051ac:	e0ff      	b.n	80053ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b14      	cmp	r3, #20
 80051ba:	f200 80f0 	bhi.w	800539e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80051be:	a201      	add	r2, pc, #4	@ (adr r2, 80051c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c4:	08005219 	.word	0x08005219
 80051c8:	0800539f 	.word	0x0800539f
 80051cc:	0800539f 	.word	0x0800539f
 80051d0:	0800539f 	.word	0x0800539f
 80051d4:	08005259 	.word	0x08005259
 80051d8:	0800539f 	.word	0x0800539f
 80051dc:	0800539f 	.word	0x0800539f
 80051e0:	0800539f 	.word	0x0800539f
 80051e4:	0800529b 	.word	0x0800529b
 80051e8:	0800539f 	.word	0x0800539f
 80051ec:	0800539f 	.word	0x0800539f
 80051f0:	0800539f 	.word	0x0800539f
 80051f4:	080052db 	.word	0x080052db
 80051f8:	0800539f 	.word	0x0800539f
 80051fc:	0800539f 	.word	0x0800539f
 8005200:	0800539f 	.word	0x0800539f
 8005204:	0800531d 	.word	0x0800531d
 8005208:	0800539f 	.word	0x0800539f
 800520c:	0800539f 	.word	0x0800539f
 8005210:	0800539f 	.word	0x0800539f
 8005214:	0800535d 	.word	0x0800535d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68b9      	ldr	r1, [r7, #8]
 800521e:	4618      	mov	r0, r3
 8005220:	f000 f966 	bl	80054f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699a      	ldr	r2, [r3, #24]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0208 	orr.w	r2, r2, #8
 8005232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699a      	ldr	r2, [r3, #24]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0204 	bic.w	r2, r2, #4
 8005242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6999      	ldr	r1, [r3, #24]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	691a      	ldr	r2, [r3, #16]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	619a      	str	r2, [r3, #24]
      break;
 8005256:	e0a5      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68b9      	ldr	r1, [r7, #8]
 800525e:	4618      	mov	r0, r3
 8005260:	f000 f9d6 	bl	8005610 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699a      	ldr	r2, [r3, #24]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6999      	ldr	r1, [r3, #24]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	021a      	lsls	r2, r3, #8
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	619a      	str	r2, [r3, #24]
      break;
 8005298:	e084      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68b9      	ldr	r1, [r7, #8]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fa3f 	bl	8005724 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69da      	ldr	r2, [r3, #28]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f042 0208 	orr.w	r2, r2, #8
 80052b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69da      	ldr	r2, [r3, #28]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0204 	bic.w	r2, r2, #4
 80052c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69d9      	ldr	r1, [r3, #28]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	61da      	str	r2, [r3, #28]
      break;
 80052d8:	e064      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 faa7 	bl	8005834 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69da      	ldr	r2, [r3, #28]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69da      	ldr	r2, [r3, #28]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69d9      	ldr	r1, [r3, #28]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	021a      	lsls	r2, r3, #8
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	61da      	str	r2, [r3, #28]
      break;
 800531a:	e043      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68b9      	ldr	r1, [r7, #8]
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fb10 	bl	8005948 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0208 	orr.w	r2, r2, #8
 8005336:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0204 	bic.w	r2, r2, #4
 8005346:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	691a      	ldr	r2, [r3, #16]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800535a:	e023      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fb54 	bl	8005a10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005376:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005386:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	021a      	lsls	r2, r3, #8
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800539c:	e002      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	75fb      	strb	r3, [r7, #23]
      break;
 80053a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop

080053b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a42      	ldr	r2, [pc, #264]	@ (80054d4 <TIM_Base_SetConfig+0x11c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d00f      	beq.n	80053f0 <TIM_Base_SetConfig+0x38>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053d6:	d00b      	beq.n	80053f0 <TIM_Base_SetConfig+0x38>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a3f      	ldr	r2, [pc, #252]	@ (80054d8 <TIM_Base_SetConfig+0x120>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d007      	beq.n	80053f0 <TIM_Base_SetConfig+0x38>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a3e      	ldr	r2, [pc, #248]	@ (80054dc <TIM_Base_SetConfig+0x124>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d003      	beq.n	80053f0 <TIM_Base_SetConfig+0x38>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a3d      	ldr	r2, [pc, #244]	@ (80054e0 <TIM_Base_SetConfig+0x128>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d108      	bne.n	8005402 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a33      	ldr	r2, [pc, #204]	@ (80054d4 <TIM_Base_SetConfig+0x11c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d01b      	beq.n	8005442 <TIM_Base_SetConfig+0x8a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005410:	d017      	beq.n	8005442 <TIM_Base_SetConfig+0x8a>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a30      	ldr	r2, [pc, #192]	@ (80054d8 <TIM_Base_SetConfig+0x120>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d013      	beq.n	8005442 <TIM_Base_SetConfig+0x8a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a2f      	ldr	r2, [pc, #188]	@ (80054dc <TIM_Base_SetConfig+0x124>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00f      	beq.n	8005442 <TIM_Base_SetConfig+0x8a>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a2e      	ldr	r2, [pc, #184]	@ (80054e0 <TIM_Base_SetConfig+0x128>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00b      	beq.n	8005442 <TIM_Base_SetConfig+0x8a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a2d      	ldr	r2, [pc, #180]	@ (80054e4 <TIM_Base_SetConfig+0x12c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d007      	beq.n	8005442 <TIM_Base_SetConfig+0x8a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a2c      	ldr	r2, [pc, #176]	@ (80054e8 <TIM_Base_SetConfig+0x130>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d003      	beq.n	8005442 <TIM_Base_SetConfig+0x8a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a2b      	ldr	r2, [pc, #172]	@ (80054ec <TIM_Base_SetConfig+0x134>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d108      	bne.n	8005454 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4313      	orrs	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a16      	ldr	r2, [pc, #88]	@ (80054d4 <TIM_Base_SetConfig+0x11c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d00f      	beq.n	80054a0 <TIM_Base_SetConfig+0xe8>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a17      	ldr	r2, [pc, #92]	@ (80054e0 <TIM_Base_SetConfig+0x128>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00b      	beq.n	80054a0 <TIM_Base_SetConfig+0xe8>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a16      	ldr	r2, [pc, #88]	@ (80054e4 <TIM_Base_SetConfig+0x12c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d007      	beq.n	80054a0 <TIM_Base_SetConfig+0xe8>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a15      	ldr	r2, [pc, #84]	@ (80054e8 <TIM_Base_SetConfig+0x130>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d003      	beq.n	80054a0 <TIM_Base_SetConfig+0xe8>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a14      	ldr	r2, [pc, #80]	@ (80054ec <TIM_Base_SetConfig+0x134>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d103      	bne.n	80054a8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d105      	bne.n	80054c6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f023 0201 	bic.w	r2, r3, #1
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	611a      	str	r2, [r3, #16]
  }
}
 80054c6:	bf00      	nop
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40012c00 	.word	0x40012c00
 80054d8:	40000400 	.word	0x40000400
 80054dc:	40000800 	.word	0x40000800
 80054e0:	40013400 	.word	0x40013400
 80054e4:	40014000 	.word	0x40014000
 80054e8:	40014400 	.word	0x40014400
 80054ec:	40014800 	.word	0x40014800

080054f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	f023 0201 	bic.w	r2, r3, #1
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800551e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0303 	bic.w	r3, r3, #3
 800552a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f023 0302 	bic.w	r3, r3, #2
 800553c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a2c      	ldr	r2, [pc, #176]	@ (80055fc <TIM_OC1_SetConfig+0x10c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d00f      	beq.n	8005570 <TIM_OC1_SetConfig+0x80>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a2b      	ldr	r2, [pc, #172]	@ (8005600 <TIM_OC1_SetConfig+0x110>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d00b      	beq.n	8005570 <TIM_OC1_SetConfig+0x80>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a2a      	ldr	r2, [pc, #168]	@ (8005604 <TIM_OC1_SetConfig+0x114>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d007      	beq.n	8005570 <TIM_OC1_SetConfig+0x80>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a29      	ldr	r2, [pc, #164]	@ (8005608 <TIM_OC1_SetConfig+0x118>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d003      	beq.n	8005570 <TIM_OC1_SetConfig+0x80>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a28      	ldr	r2, [pc, #160]	@ (800560c <TIM_OC1_SetConfig+0x11c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d10c      	bne.n	800558a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f023 0308 	bic.w	r3, r3, #8
 8005576:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	4313      	orrs	r3, r2
 8005580:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f023 0304 	bic.w	r3, r3, #4
 8005588:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a1b      	ldr	r2, [pc, #108]	@ (80055fc <TIM_OC1_SetConfig+0x10c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d00f      	beq.n	80055b2 <TIM_OC1_SetConfig+0xc2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a1a      	ldr	r2, [pc, #104]	@ (8005600 <TIM_OC1_SetConfig+0x110>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00b      	beq.n	80055b2 <TIM_OC1_SetConfig+0xc2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a19      	ldr	r2, [pc, #100]	@ (8005604 <TIM_OC1_SetConfig+0x114>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d007      	beq.n	80055b2 <TIM_OC1_SetConfig+0xc2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a18      	ldr	r2, [pc, #96]	@ (8005608 <TIM_OC1_SetConfig+0x118>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d003      	beq.n	80055b2 <TIM_OC1_SetConfig+0xc2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a17      	ldr	r2, [pc, #92]	@ (800560c <TIM_OC1_SetConfig+0x11c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d111      	bne.n	80055d6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	621a      	str	r2, [r3, #32]
}
 80055f0:	bf00      	nop
 80055f2:	371c      	adds	r7, #28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	40012c00 	.word	0x40012c00
 8005600:	40013400 	.word	0x40013400
 8005604:	40014000 	.word	0x40014000
 8005608:	40014400 	.word	0x40014400
 800560c:	40014800 	.word	0x40014800

08005610 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005610:	b480      	push	{r7}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	f023 0210 	bic.w	r2, r3, #16
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800563e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800564a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	021b      	lsls	r3, r3, #8
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f023 0320 	bic.w	r3, r3, #32
 800565e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	4313      	orrs	r3, r2
 800566a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a28      	ldr	r2, [pc, #160]	@ (8005710 <TIM_OC2_SetConfig+0x100>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d003      	beq.n	800567c <TIM_OC2_SetConfig+0x6c>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a27      	ldr	r2, [pc, #156]	@ (8005714 <TIM_OC2_SetConfig+0x104>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d10d      	bne.n	8005698 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	4313      	orrs	r3, r2
 800568e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005696:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a1d      	ldr	r2, [pc, #116]	@ (8005710 <TIM_OC2_SetConfig+0x100>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d00f      	beq.n	80056c0 <TIM_OC2_SetConfig+0xb0>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005714 <TIM_OC2_SetConfig+0x104>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00b      	beq.n	80056c0 <TIM_OC2_SetConfig+0xb0>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005718 <TIM_OC2_SetConfig+0x108>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d007      	beq.n	80056c0 <TIM_OC2_SetConfig+0xb0>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a1a      	ldr	r2, [pc, #104]	@ (800571c <TIM_OC2_SetConfig+0x10c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <TIM_OC2_SetConfig+0xb0>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a19      	ldr	r2, [pc, #100]	@ (8005720 <TIM_OC2_SetConfig+0x110>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d113      	bne.n	80056e8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	621a      	str	r2, [r3, #32]
}
 8005702:	bf00      	nop
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	40012c00 	.word	0x40012c00
 8005714:	40013400 	.word	0x40013400
 8005718:	40014000 	.word	0x40014000
 800571c:	40014400 	.word	0x40014400
 8005720:	40014800 	.word	0x40014800

08005724 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0303 	bic.w	r3, r3, #3
 800575e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	021b      	lsls	r3, r3, #8
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a27      	ldr	r2, [pc, #156]	@ (8005820 <TIM_OC3_SetConfig+0xfc>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d003      	beq.n	800578e <TIM_OC3_SetConfig+0x6a>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a26      	ldr	r2, [pc, #152]	@ (8005824 <TIM_OC3_SetConfig+0x100>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d10d      	bne.n	80057aa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	021b      	lsls	r3, r3, #8
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005820 <TIM_OC3_SetConfig+0xfc>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00f      	beq.n	80057d2 <TIM_OC3_SetConfig+0xae>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005824 <TIM_OC3_SetConfig+0x100>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00b      	beq.n	80057d2 <TIM_OC3_SetConfig+0xae>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a1a      	ldr	r2, [pc, #104]	@ (8005828 <TIM_OC3_SetConfig+0x104>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d007      	beq.n	80057d2 <TIM_OC3_SetConfig+0xae>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a19      	ldr	r2, [pc, #100]	@ (800582c <TIM_OC3_SetConfig+0x108>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d003      	beq.n	80057d2 <TIM_OC3_SetConfig+0xae>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a18      	ldr	r2, [pc, #96]	@ (8005830 <TIM_OC3_SetConfig+0x10c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d113      	bne.n	80057fa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	011b      	lsls	r3, r3, #4
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	621a      	str	r2, [r3, #32]
}
 8005814:	bf00      	nop
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	40012c00 	.word	0x40012c00
 8005824:	40013400 	.word	0x40013400
 8005828:	40014000 	.word	0x40014000
 800582c:	40014400 	.word	0x40014400
 8005830:	40014800 	.word	0x40014800

08005834 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005862:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800586e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	021b      	lsls	r3, r3, #8
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	4313      	orrs	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005882:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	031b      	lsls	r3, r3, #12
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	4313      	orrs	r3, r2
 800588e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a28      	ldr	r2, [pc, #160]	@ (8005934 <TIM_OC4_SetConfig+0x100>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d003      	beq.n	80058a0 <TIM_OC4_SetConfig+0x6c>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a27      	ldr	r2, [pc, #156]	@ (8005938 <TIM_OC4_SetConfig+0x104>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d10d      	bne.n	80058bc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80058a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	031b      	lsls	r3, r3, #12
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a1d      	ldr	r2, [pc, #116]	@ (8005934 <TIM_OC4_SetConfig+0x100>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00f      	beq.n	80058e4 <TIM_OC4_SetConfig+0xb0>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005938 <TIM_OC4_SetConfig+0x104>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00b      	beq.n	80058e4 <TIM_OC4_SetConfig+0xb0>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a1b      	ldr	r2, [pc, #108]	@ (800593c <TIM_OC4_SetConfig+0x108>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d007      	beq.n	80058e4 <TIM_OC4_SetConfig+0xb0>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005940 <TIM_OC4_SetConfig+0x10c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d003      	beq.n	80058e4 <TIM_OC4_SetConfig+0xb0>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a19      	ldr	r2, [pc, #100]	@ (8005944 <TIM_OC4_SetConfig+0x110>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d113      	bne.n	800590c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058ea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80058f2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	019b      	lsls	r3, r3, #6
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	019b      	lsls	r3, r3, #6
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	4313      	orrs	r3, r2
 800590a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	621a      	str	r2, [r3, #32]
}
 8005926:	bf00      	nop
 8005928:	371c      	adds	r7, #28
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40012c00 	.word	0x40012c00
 8005938:	40013400 	.word	0x40013400
 800593c:	40014000 	.word	0x40014000
 8005940:	40014400 	.word	0x40014400
 8005944:	40014800 	.word	0x40014800

08005948 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800597a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800598c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	041b      	lsls	r3, r3, #16
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	4313      	orrs	r3, r2
 8005998:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a17      	ldr	r2, [pc, #92]	@ (80059fc <TIM_OC5_SetConfig+0xb4>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00f      	beq.n	80059c2 <TIM_OC5_SetConfig+0x7a>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a16      	ldr	r2, [pc, #88]	@ (8005a00 <TIM_OC5_SetConfig+0xb8>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00b      	beq.n	80059c2 <TIM_OC5_SetConfig+0x7a>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a15      	ldr	r2, [pc, #84]	@ (8005a04 <TIM_OC5_SetConfig+0xbc>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d007      	beq.n	80059c2 <TIM_OC5_SetConfig+0x7a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a14      	ldr	r2, [pc, #80]	@ (8005a08 <TIM_OC5_SetConfig+0xc0>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d003      	beq.n	80059c2 <TIM_OC5_SetConfig+0x7a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a13      	ldr	r2, [pc, #76]	@ (8005a0c <TIM_OC5_SetConfig+0xc4>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d109      	bne.n	80059d6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	021b      	lsls	r3, r3, #8
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	621a      	str	r2, [r3, #32]
}
 80059f0:	bf00      	nop
 80059f2:	371c      	adds	r7, #28
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	40012c00 	.word	0x40012c00
 8005a00:	40013400 	.word	0x40013400
 8005a04:	40014000 	.word	0x40014000
 8005a08:	40014400 	.word	0x40014400
 8005a0c:	40014800 	.word	0x40014800

08005a10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	021b      	lsls	r3, r3, #8
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	051b      	lsls	r3, r3, #20
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a18      	ldr	r2, [pc, #96]	@ (8005ac8 <TIM_OC6_SetConfig+0xb8>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d00f      	beq.n	8005a8c <TIM_OC6_SetConfig+0x7c>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a17      	ldr	r2, [pc, #92]	@ (8005acc <TIM_OC6_SetConfig+0xbc>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d00b      	beq.n	8005a8c <TIM_OC6_SetConfig+0x7c>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a16      	ldr	r2, [pc, #88]	@ (8005ad0 <TIM_OC6_SetConfig+0xc0>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d007      	beq.n	8005a8c <TIM_OC6_SetConfig+0x7c>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a15      	ldr	r2, [pc, #84]	@ (8005ad4 <TIM_OC6_SetConfig+0xc4>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d003      	beq.n	8005a8c <TIM_OC6_SetConfig+0x7c>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a14      	ldr	r2, [pc, #80]	@ (8005ad8 <TIM_OC6_SetConfig+0xc8>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d109      	bne.n	8005aa0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	029b      	lsls	r3, r3, #10
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	621a      	str	r2, [r3, #32]
}
 8005aba:	bf00      	nop
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40012c00 	.word	0x40012c00
 8005acc:	40013400 	.word	0x40013400
 8005ad0:	40014000 	.word	0x40014000
 8005ad4:	40014400 	.word	0x40014400
 8005ad8:	40014800 	.word	0x40014800

08005adc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f003 031f 	and.w	r3, r3, #31
 8005aee:	2201      	movs	r2, #1
 8005af0:	fa02 f303 	lsl.w	r3, r2, r3
 8005af4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a1a      	ldr	r2, [r3, #32]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	43db      	mvns	r3, r3
 8005afe:	401a      	ands	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6a1a      	ldr	r2, [r3, #32]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f003 031f 	and.w	r3, r3, #31
 8005b0e:	6879      	ldr	r1, [r7, #4]
 8005b10:	fa01 f303 	lsl.w	r3, r1, r3
 8005b14:	431a      	orrs	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	621a      	str	r2, [r3, #32]
}
 8005b1a:	bf00      	nop
 8005b1c:	371c      	adds	r7, #28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
	...

08005b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e065      	b.n	8005c0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a2c      	ldr	r2, [pc, #176]	@ (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d004      	beq.n	8005b74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d108      	bne.n	8005b86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005b7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005b8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d018      	beq.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bb6:	d013      	beq.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a18      	ldr	r2, [pc, #96]	@ (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d00e      	beq.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a17      	ldr	r2, [pc, #92]	@ (8005c24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d009      	beq.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a12      	ldr	r2, [pc, #72]	@ (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d004      	beq.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a13      	ldr	r2, [pc, #76]	@ (8005c28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d10c      	bne.n	8005bfa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005be6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	40012c00 	.word	0x40012c00
 8005c1c:	40013400 	.word	0x40013400
 8005c20:	40000400 	.word	0x40000400
 8005c24:	40000800 	.word	0x40000800
 8005c28:	40014000 	.word	0x40014000

08005c2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e073      	b.n	8005d30 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	041b      	lsls	r3, r3, #16
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a19      	ldr	r2, [pc, #100]	@ (8005d3c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d004      	beq.n	8005ce4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a18      	ldr	r2, [pc, #96]	@ (8005d40 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d11c      	bne.n	8005d1e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cee:	051b      	lsls	r3, r3, #20
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	40012c00 	.word	0x40012c00
 8005d40:	40013400 	.word	0x40013400

08005d44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e042      	b.n	8005ddc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d106      	bne.n	8005d6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7fc fa3f 	bl	80021ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2224      	movs	r2, #36	@ 0x24
 8005d72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0201 	bic.w	r2, r2, #1
 8005d84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d002      	beq.n	8005d94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fbf8 	bl	8006584 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f929 	bl	8005fec <UART_SetConfig>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d101      	bne.n	8005da4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e01b      	b.n	8005ddc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005db2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689a      	ldr	r2, [r3, #8]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005dc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 0201 	orr.w	r2, r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fc77 	bl	80066c8 <UART_CheckIdleState>
 8005dda:	4603      	mov	r3, r0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08a      	sub	sp, #40	@ 0x28
 8005de8:	af02      	add	r7, sp, #8
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	603b      	str	r3, [r7, #0]
 8005df0:	4613      	mov	r3, r2
 8005df2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dfa:	2b20      	cmp	r3, #32
 8005dfc:	d17b      	bne.n	8005ef6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <HAL_UART_Transmit+0x26>
 8005e04:	88fb      	ldrh	r3, [r7, #6]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e074      	b.n	8005ef8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2221      	movs	r2, #33	@ 0x21
 8005e1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e1e:	f7fc fb39 	bl	8002494 <HAL_GetTick>
 8005e22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	88fa      	ldrh	r2, [r7, #6]
 8005e28:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	88fa      	ldrh	r2, [r7, #6]
 8005e30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e3c:	d108      	bne.n	8005e50 <HAL_UART_Transmit+0x6c>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d104      	bne.n	8005e50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	61bb      	str	r3, [r7, #24]
 8005e4e:	e003      	b.n	8005e58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e54:	2300      	movs	r3, #0
 8005e56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e58:	e030      	b.n	8005ebc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2200      	movs	r2, #0
 8005e62:	2180      	movs	r1, #128	@ 0x80
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 fcd9 	bl	800681c <UART_WaitOnFlagUntilTimeout>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d005      	beq.n	8005e7c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2220      	movs	r2, #32
 8005e74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e03d      	b.n	8005ef8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10b      	bne.n	8005e9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	461a      	mov	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e90:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	3302      	adds	r3, #2
 8005e96:	61bb      	str	r3, [r7, #24]
 8005e98:	e007      	b.n	8005eaa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	781a      	ldrb	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1c8      	bne.n	8005e5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	2140      	movs	r1, #64	@ 0x40
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f000 fca2 	bl	800681c <UART_WaitOnFlagUntilTimeout>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d005      	beq.n	8005eea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e006      	b.n	8005ef8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2220      	movs	r2, #32
 8005eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	e000      	b.n	8005ef8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005ef6:	2302      	movs	r3, #2
  }
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3720      	adds	r7, #32
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b08a      	sub	sp, #40	@ 0x28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	d137      	bne.n	8005f88 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <HAL_UART_Receive_DMA+0x24>
 8005f1e:	88fb      	ldrh	r3, [r7, #6]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e030      	b.n	8005f8a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a18      	ldr	r2, [pc, #96]	@ (8005f94 <HAL_UART_Receive_DMA+0x94>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d01f      	beq.n	8005f78 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d018      	beq.n	8005f78 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	e853 3f00 	ldrex	r3, [r3]
 8005f52:	613b      	str	r3, [r7, #16]
   return(result);
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005f5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	461a      	mov	r2, r3
 8005f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f64:	623b      	str	r3, [r7, #32]
 8005f66:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f68:	69f9      	ldr	r1, [r7, #28]
 8005f6a:	6a3a      	ldr	r2, [r7, #32]
 8005f6c:	e841 2300 	strex	r3, r2, [r1]
 8005f70:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1e6      	bne.n	8005f46 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005f78:	88fb      	ldrh	r3, [r7, #6]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	68b9      	ldr	r1, [r7, #8]
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f000 fcba 	bl	80068f8 <UART_Start_Receive_DMA>
 8005f84:	4603      	mov	r3, r0
 8005f86:	e000      	b.n	8005f8a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005f88:	2302      	movs	r3, #2
  }
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3728      	adds	r7, #40	@ 0x28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	40008000 	.word	0x40008000

08005f98 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	460b      	mov	r3, r1
 8005fde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ff0:	b08c      	sub	sp, #48	@ 0x30
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	431a      	orrs	r2, r3
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	431a      	orrs	r2, r3
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	4313      	orrs	r3, r2
 8006012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	4bab      	ldr	r3, [pc, #684]	@ (80062c8 <UART_SetConfig+0x2dc>)
 800601c:	4013      	ands	r3, r2
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	6812      	ldr	r2, [r2, #0]
 8006022:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006024:	430b      	orrs	r3, r1
 8006026:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4aa0      	ldr	r2, [pc, #640]	@ (80062cc <UART_SetConfig+0x2e0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d004      	beq.n	8006058 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006054:	4313      	orrs	r3, r2
 8006056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006062:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	6812      	ldr	r2, [r2, #0]
 800606a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800606c:	430b      	orrs	r3, r1
 800606e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006076:	f023 010f 	bic.w	r1, r3, #15
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a91      	ldr	r2, [pc, #580]	@ (80062d0 <UART_SetConfig+0x2e4>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d125      	bne.n	80060dc <UART_SetConfig+0xf0>
 8006090:	4b90      	ldr	r3, [pc, #576]	@ (80062d4 <UART_SetConfig+0x2e8>)
 8006092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006096:	f003 0303 	and.w	r3, r3, #3
 800609a:	2b03      	cmp	r3, #3
 800609c:	d81a      	bhi.n	80060d4 <UART_SetConfig+0xe8>
 800609e:	a201      	add	r2, pc, #4	@ (adr r2, 80060a4 <UART_SetConfig+0xb8>)
 80060a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a4:	080060b5 	.word	0x080060b5
 80060a8:	080060c5 	.word	0x080060c5
 80060ac:	080060bd 	.word	0x080060bd
 80060b0:	080060cd 	.word	0x080060cd
 80060b4:	2301      	movs	r3, #1
 80060b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ba:	e0d6      	b.n	800626a <UART_SetConfig+0x27e>
 80060bc:	2302      	movs	r3, #2
 80060be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060c2:	e0d2      	b.n	800626a <UART_SetConfig+0x27e>
 80060c4:	2304      	movs	r3, #4
 80060c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ca:	e0ce      	b.n	800626a <UART_SetConfig+0x27e>
 80060cc:	2308      	movs	r3, #8
 80060ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060d2:	e0ca      	b.n	800626a <UART_SetConfig+0x27e>
 80060d4:	2310      	movs	r3, #16
 80060d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060da:	e0c6      	b.n	800626a <UART_SetConfig+0x27e>
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a7d      	ldr	r2, [pc, #500]	@ (80062d8 <UART_SetConfig+0x2ec>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d138      	bne.n	8006158 <UART_SetConfig+0x16c>
 80060e6:	4b7b      	ldr	r3, [pc, #492]	@ (80062d4 <UART_SetConfig+0x2e8>)
 80060e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ec:	f003 030c 	and.w	r3, r3, #12
 80060f0:	2b0c      	cmp	r3, #12
 80060f2:	d82d      	bhi.n	8006150 <UART_SetConfig+0x164>
 80060f4:	a201      	add	r2, pc, #4	@ (adr r2, 80060fc <UART_SetConfig+0x110>)
 80060f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fa:	bf00      	nop
 80060fc:	08006131 	.word	0x08006131
 8006100:	08006151 	.word	0x08006151
 8006104:	08006151 	.word	0x08006151
 8006108:	08006151 	.word	0x08006151
 800610c:	08006141 	.word	0x08006141
 8006110:	08006151 	.word	0x08006151
 8006114:	08006151 	.word	0x08006151
 8006118:	08006151 	.word	0x08006151
 800611c:	08006139 	.word	0x08006139
 8006120:	08006151 	.word	0x08006151
 8006124:	08006151 	.word	0x08006151
 8006128:	08006151 	.word	0x08006151
 800612c:	08006149 	.word	0x08006149
 8006130:	2300      	movs	r3, #0
 8006132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006136:	e098      	b.n	800626a <UART_SetConfig+0x27e>
 8006138:	2302      	movs	r3, #2
 800613a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800613e:	e094      	b.n	800626a <UART_SetConfig+0x27e>
 8006140:	2304      	movs	r3, #4
 8006142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006146:	e090      	b.n	800626a <UART_SetConfig+0x27e>
 8006148:	2308      	movs	r3, #8
 800614a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800614e:	e08c      	b.n	800626a <UART_SetConfig+0x27e>
 8006150:	2310      	movs	r3, #16
 8006152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006156:	e088      	b.n	800626a <UART_SetConfig+0x27e>
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a5f      	ldr	r2, [pc, #380]	@ (80062dc <UART_SetConfig+0x2f0>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d125      	bne.n	80061ae <UART_SetConfig+0x1c2>
 8006162:	4b5c      	ldr	r3, [pc, #368]	@ (80062d4 <UART_SetConfig+0x2e8>)
 8006164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006168:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800616c:	2b30      	cmp	r3, #48	@ 0x30
 800616e:	d016      	beq.n	800619e <UART_SetConfig+0x1b2>
 8006170:	2b30      	cmp	r3, #48	@ 0x30
 8006172:	d818      	bhi.n	80061a6 <UART_SetConfig+0x1ba>
 8006174:	2b20      	cmp	r3, #32
 8006176:	d00a      	beq.n	800618e <UART_SetConfig+0x1a2>
 8006178:	2b20      	cmp	r3, #32
 800617a:	d814      	bhi.n	80061a6 <UART_SetConfig+0x1ba>
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <UART_SetConfig+0x19a>
 8006180:	2b10      	cmp	r3, #16
 8006182:	d008      	beq.n	8006196 <UART_SetConfig+0x1aa>
 8006184:	e00f      	b.n	80061a6 <UART_SetConfig+0x1ba>
 8006186:	2300      	movs	r3, #0
 8006188:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800618c:	e06d      	b.n	800626a <UART_SetConfig+0x27e>
 800618e:	2302      	movs	r3, #2
 8006190:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006194:	e069      	b.n	800626a <UART_SetConfig+0x27e>
 8006196:	2304      	movs	r3, #4
 8006198:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800619c:	e065      	b.n	800626a <UART_SetConfig+0x27e>
 800619e:	2308      	movs	r3, #8
 80061a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061a4:	e061      	b.n	800626a <UART_SetConfig+0x27e>
 80061a6:	2310      	movs	r3, #16
 80061a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ac:	e05d      	b.n	800626a <UART_SetConfig+0x27e>
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a4b      	ldr	r2, [pc, #300]	@ (80062e0 <UART_SetConfig+0x2f4>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d125      	bne.n	8006204 <UART_SetConfig+0x218>
 80061b8:	4b46      	ldr	r3, [pc, #280]	@ (80062d4 <UART_SetConfig+0x2e8>)
 80061ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80061c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80061c4:	d016      	beq.n	80061f4 <UART_SetConfig+0x208>
 80061c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80061c8:	d818      	bhi.n	80061fc <UART_SetConfig+0x210>
 80061ca:	2b80      	cmp	r3, #128	@ 0x80
 80061cc:	d00a      	beq.n	80061e4 <UART_SetConfig+0x1f8>
 80061ce:	2b80      	cmp	r3, #128	@ 0x80
 80061d0:	d814      	bhi.n	80061fc <UART_SetConfig+0x210>
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <UART_SetConfig+0x1f0>
 80061d6:	2b40      	cmp	r3, #64	@ 0x40
 80061d8:	d008      	beq.n	80061ec <UART_SetConfig+0x200>
 80061da:	e00f      	b.n	80061fc <UART_SetConfig+0x210>
 80061dc:	2300      	movs	r3, #0
 80061de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061e2:	e042      	b.n	800626a <UART_SetConfig+0x27e>
 80061e4:	2302      	movs	r3, #2
 80061e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ea:	e03e      	b.n	800626a <UART_SetConfig+0x27e>
 80061ec:	2304      	movs	r3, #4
 80061ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061f2:	e03a      	b.n	800626a <UART_SetConfig+0x27e>
 80061f4:	2308      	movs	r3, #8
 80061f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061fa:	e036      	b.n	800626a <UART_SetConfig+0x27e>
 80061fc:	2310      	movs	r3, #16
 80061fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006202:	e032      	b.n	800626a <UART_SetConfig+0x27e>
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a30      	ldr	r2, [pc, #192]	@ (80062cc <UART_SetConfig+0x2e0>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d12a      	bne.n	8006264 <UART_SetConfig+0x278>
 800620e:	4b31      	ldr	r3, [pc, #196]	@ (80062d4 <UART_SetConfig+0x2e8>)
 8006210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006214:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006218:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800621c:	d01a      	beq.n	8006254 <UART_SetConfig+0x268>
 800621e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006222:	d81b      	bhi.n	800625c <UART_SetConfig+0x270>
 8006224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006228:	d00c      	beq.n	8006244 <UART_SetConfig+0x258>
 800622a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800622e:	d815      	bhi.n	800625c <UART_SetConfig+0x270>
 8006230:	2b00      	cmp	r3, #0
 8006232:	d003      	beq.n	800623c <UART_SetConfig+0x250>
 8006234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006238:	d008      	beq.n	800624c <UART_SetConfig+0x260>
 800623a:	e00f      	b.n	800625c <UART_SetConfig+0x270>
 800623c:	2300      	movs	r3, #0
 800623e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006242:	e012      	b.n	800626a <UART_SetConfig+0x27e>
 8006244:	2302      	movs	r3, #2
 8006246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800624a:	e00e      	b.n	800626a <UART_SetConfig+0x27e>
 800624c:	2304      	movs	r3, #4
 800624e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006252:	e00a      	b.n	800626a <UART_SetConfig+0x27e>
 8006254:	2308      	movs	r3, #8
 8006256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800625a:	e006      	b.n	800626a <UART_SetConfig+0x27e>
 800625c:	2310      	movs	r3, #16
 800625e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006262:	e002      	b.n	800626a <UART_SetConfig+0x27e>
 8006264:	2310      	movs	r3, #16
 8006266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a17      	ldr	r2, [pc, #92]	@ (80062cc <UART_SetConfig+0x2e0>)
 8006270:	4293      	cmp	r3, r2
 8006272:	f040 80a8 	bne.w	80063c6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006276:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800627a:	2b08      	cmp	r3, #8
 800627c:	d834      	bhi.n	80062e8 <UART_SetConfig+0x2fc>
 800627e:	a201      	add	r2, pc, #4	@ (adr r2, 8006284 <UART_SetConfig+0x298>)
 8006280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006284:	080062a9 	.word	0x080062a9
 8006288:	080062e9 	.word	0x080062e9
 800628c:	080062b1 	.word	0x080062b1
 8006290:	080062e9 	.word	0x080062e9
 8006294:	080062b7 	.word	0x080062b7
 8006298:	080062e9 	.word	0x080062e9
 800629c:	080062e9 	.word	0x080062e9
 80062a0:	080062e9 	.word	0x080062e9
 80062a4:	080062bf 	.word	0x080062bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a8:	f7fd fbde 	bl	8003a68 <HAL_RCC_GetPCLK1Freq>
 80062ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062ae:	e021      	b.n	80062f4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062b0:	4b0c      	ldr	r3, [pc, #48]	@ (80062e4 <UART_SetConfig+0x2f8>)
 80062b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062b4:	e01e      	b.n	80062f4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062b6:	f7fd fb6b 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 80062ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062bc:	e01a      	b.n	80062f4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062c4:	e016      	b.n	80062f4 <UART_SetConfig+0x308>
 80062c6:	bf00      	nop
 80062c8:	cfff69f3 	.word	0xcfff69f3
 80062cc:	40008000 	.word	0x40008000
 80062d0:	40013800 	.word	0x40013800
 80062d4:	40021000 	.word	0x40021000
 80062d8:	40004400 	.word	0x40004400
 80062dc:	40004800 	.word	0x40004800
 80062e0:	40004c00 	.word	0x40004c00
 80062e4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80062f2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f000 812a 	beq.w	8006550 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006300:	4a9e      	ldr	r2, [pc, #632]	@ (800657c <UART_SetConfig+0x590>)
 8006302:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006306:	461a      	mov	r2, r3
 8006308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630a:	fbb3 f3f2 	udiv	r3, r3, r2
 800630e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	4613      	mov	r3, r2
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	4413      	add	r3, r2
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	429a      	cmp	r2, r3
 800631e:	d305      	bcc.n	800632c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	429a      	cmp	r2, r3
 800632a:	d903      	bls.n	8006334 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006332:	e10d      	b.n	8006550 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006336:	2200      	movs	r2, #0
 8006338:	60bb      	str	r3, [r7, #8]
 800633a:	60fa      	str	r2, [r7, #12]
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006340:	4a8e      	ldr	r2, [pc, #568]	@ (800657c <UART_SetConfig+0x590>)
 8006342:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006346:	b29b      	uxth	r3, r3
 8006348:	2200      	movs	r2, #0
 800634a:	603b      	str	r3, [r7, #0]
 800634c:	607a      	str	r2, [r7, #4]
 800634e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006352:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006356:	f7fa fcbf 	bl	8000cd8 <__aeabi_uldivmod>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	4610      	mov	r0, r2
 8006360:	4619      	mov	r1, r3
 8006362:	f04f 0200 	mov.w	r2, #0
 8006366:	f04f 0300 	mov.w	r3, #0
 800636a:	020b      	lsls	r3, r1, #8
 800636c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006370:	0202      	lsls	r2, r0, #8
 8006372:	6979      	ldr	r1, [r7, #20]
 8006374:	6849      	ldr	r1, [r1, #4]
 8006376:	0849      	lsrs	r1, r1, #1
 8006378:	2000      	movs	r0, #0
 800637a:	460c      	mov	r4, r1
 800637c:	4605      	mov	r5, r0
 800637e:	eb12 0804 	adds.w	r8, r2, r4
 8006382:	eb43 0905 	adc.w	r9, r3, r5
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	469a      	mov	sl, r3
 800638e:	4693      	mov	fp, r2
 8006390:	4652      	mov	r2, sl
 8006392:	465b      	mov	r3, fp
 8006394:	4640      	mov	r0, r8
 8006396:	4649      	mov	r1, r9
 8006398:	f7fa fc9e 	bl	8000cd8 <__aeabi_uldivmod>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	4613      	mov	r3, r2
 80063a2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063aa:	d308      	bcc.n	80063be <UART_SetConfig+0x3d2>
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063b2:	d204      	bcs.n	80063be <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6a3a      	ldr	r2, [r7, #32]
 80063ba:	60da      	str	r2, [r3, #12]
 80063bc:	e0c8      	b.n	8006550 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80063c4:	e0c4      	b.n	8006550 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063ce:	d167      	bne.n	80064a0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80063d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d828      	bhi.n	800642a <UART_SetConfig+0x43e>
 80063d8:	a201      	add	r2, pc, #4	@ (adr r2, 80063e0 <UART_SetConfig+0x3f4>)
 80063da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063de:	bf00      	nop
 80063e0:	08006405 	.word	0x08006405
 80063e4:	0800640d 	.word	0x0800640d
 80063e8:	08006415 	.word	0x08006415
 80063ec:	0800642b 	.word	0x0800642b
 80063f0:	0800641b 	.word	0x0800641b
 80063f4:	0800642b 	.word	0x0800642b
 80063f8:	0800642b 	.word	0x0800642b
 80063fc:	0800642b 	.word	0x0800642b
 8006400:	08006423 	.word	0x08006423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006404:	f7fd fb30 	bl	8003a68 <HAL_RCC_GetPCLK1Freq>
 8006408:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800640a:	e014      	b.n	8006436 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800640c:	f7fd fb42 	bl	8003a94 <HAL_RCC_GetPCLK2Freq>
 8006410:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006412:	e010      	b.n	8006436 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006414:	4b5a      	ldr	r3, [pc, #360]	@ (8006580 <UART_SetConfig+0x594>)
 8006416:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006418:	e00d      	b.n	8006436 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800641a:	f7fd fab9 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 800641e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006420:	e009      	b.n	8006436 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006426:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006428:	e005      	b.n	8006436 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800642a:	2300      	movs	r3, #0
 800642c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006434:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 8089 	beq.w	8006550 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006442:	4a4e      	ldr	r2, [pc, #312]	@ (800657c <UART_SetConfig+0x590>)
 8006444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006448:	461a      	mov	r2, r3
 800644a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006450:	005a      	lsls	r2, r3, #1
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	085b      	lsrs	r3, r3, #1
 8006458:	441a      	add	r2, r3
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006462:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	2b0f      	cmp	r3, #15
 8006468:	d916      	bls.n	8006498 <UART_SetConfig+0x4ac>
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006470:	d212      	bcs.n	8006498 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	b29b      	uxth	r3, r3
 8006476:	f023 030f 	bic.w	r3, r3, #15
 800647a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	085b      	lsrs	r3, r3, #1
 8006480:	b29b      	uxth	r3, r3
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	b29a      	uxth	r2, r3
 8006488:	8bfb      	ldrh	r3, [r7, #30]
 800648a:	4313      	orrs	r3, r2
 800648c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	8bfa      	ldrh	r2, [r7, #30]
 8006494:	60da      	str	r2, [r3, #12]
 8006496:	e05b      	b.n	8006550 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800649e:	e057      	b.n	8006550 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d828      	bhi.n	80064fa <UART_SetConfig+0x50e>
 80064a8:	a201      	add	r2, pc, #4	@ (adr r2, 80064b0 <UART_SetConfig+0x4c4>)
 80064aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ae:	bf00      	nop
 80064b0:	080064d5 	.word	0x080064d5
 80064b4:	080064dd 	.word	0x080064dd
 80064b8:	080064e5 	.word	0x080064e5
 80064bc:	080064fb 	.word	0x080064fb
 80064c0:	080064eb 	.word	0x080064eb
 80064c4:	080064fb 	.word	0x080064fb
 80064c8:	080064fb 	.word	0x080064fb
 80064cc:	080064fb 	.word	0x080064fb
 80064d0:	080064f3 	.word	0x080064f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064d4:	f7fd fac8 	bl	8003a68 <HAL_RCC_GetPCLK1Freq>
 80064d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064da:	e014      	b.n	8006506 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064dc:	f7fd fada 	bl	8003a94 <HAL_RCC_GetPCLK2Freq>
 80064e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064e2:	e010      	b.n	8006506 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064e4:	4b26      	ldr	r3, [pc, #152]	@ (8006580 <UART_SetConfig+0x594>)
 80064e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064e8:	e00d      	b.n	8006506 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064ea:	f7fd fa51 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 80064ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064f0:	e009      	b.n	8006506 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064f8:	e005      	b.n	8006506 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006504:	bf00      	nop
    }

    if (pclk != 0U)
 8006506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006508:	2b00      	cmp	r3, #0
 800650a:	d021      	beq.n	8006550 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006510:	4a1a      	ldr	r2, [pc, #104]	@ (800657c <UART_SetConfig+0x590>)
 8006512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006516:	461a      	mov	r2, r3
 8006518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651a:	fbb3 f2f2 	udiv	r2, r3, r2
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	085b      	lsrs	r3, r3, #1
 8006524:	441a      	add	r2, r3
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	fbb2 f3f3 	udiv	r3, r2, r3
 800652e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006530:	6a3b      	ldr	r3, [r7, #32]
 8006532:	2b0f      	cmp	r3, #15
 8006534:	d909      	bls.n	800654a <UART_SetConfig+0x55e>
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800653c:	d205      	bcs.n	800654a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	b29a      	uxth	r2, r3
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	60da      	str	r2, [r3, #12]
 8006548:	e002      	b.n	8006550 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2201      	movs	r2, #1
 8006554:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2201      	movs	r2, #1
 800655c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2200      	movs	r2, #0
 8006564:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2200      	movs	r2, #0
 800656a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800656c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006570:	4618      	mov	r0, r3
 8006572:	3730      	adds	r7, #48	@ 0x30
 8006574:	46bd      	mov	sp, r7
 8006576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800657a:	bf00      	nop
 800657c:	0800d4a0 	.word	0x0800d4a0
 8006580:	00f42400 	.word	0x00f42400

08006584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006590:	f003 0308 	and.w	r3, r3, #8
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00a      	beq.n	80065ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00a      	beq.n	80065d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00a      	beq.n	80065f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f6:	f003 0304 	and.w	r3, r3, #4
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00a      	beq.n	8006614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	430a      	orrs	r2, r1
 8006612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006618:	f003 0310 	and.w	r3, r3, #16
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00a      	beq.n	8006636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800663a:	f003 0320 	and.w	r3, r3, #32
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00a      	beq.n	8006658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006660:	2b00      	cmp	r3, #0
 8006662:	d01a      	beq.n	800669a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800667e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006682:	d10a      	bne.n	800669a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	430a      	orrs	r2, r1
 8006698:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	605a      	str	r2, [r3, #4]
  }
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b098      	sub	sp, #96	@ 0x60
 80066cc:	af02      	add	r7, sp, #8
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066d8:	f7fb fedc 	bl	8002494 <HAL_GetTick>
 80066dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0308 	and.w	r3, r3, #8
 80066e8:	2b08      	cmp	r3, #8
 80066ea:	d12f      	bne.n	800674c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066f4:	2200      	movs	r2, #0
 80066f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f88e 	bl	800681c <UART_WaitOnFlagUntilTimeout>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d022      	beq.n	800674c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800670e:	e853 3f00 	ldrex	r3, [r3]
 8006712:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800671a:	653b      	str	r3, [r7, #80]	@ 0x50
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	461a      	mov	r2, r3
 8006722:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006724:	647b      	str	r3, [r7, #68]	@ 0x44
 8006726:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006728:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800672a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800672c:	e841 2300 	strex	r3, r2, [r1]
 8006730:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1e6      	bne.n	8006706 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2220      	movs	r2, #32
 800673c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e063      	b.n	8006814 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0304 	and.w	r3, r3, #4
 8006756:	2b04      	cmp	r3, #4
 8006758:	d149      	bne.n	80067ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800675a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006762:	2200      	movs	r2, #0
 8006764:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f857 	bl	800681c <UART_WaitOnFlagUntilTimeout>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d03c      	beq.n	80067ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677c:	e853 3f00 	ldrex	r3, [r3]
 8006780:	623b      	str	r3, [r7, #32]
   return(result);
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006788:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006792:	633b      	str	r3, [r7, #48]	@ 0x30
 8006794:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006796:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006798:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800679a:	e841 2300 	strex	r3, r2, [r1]
 800679e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1e6      	bne.n	8006774 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3308      	adds	r3, #8
 80067ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	e853 3f00 	ldrex	r3, [r3]
 80067b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f023 0301 	bic.w	r3, r3, #1
 80067bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3308      	adds	r3, #8
 80067c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067c6:	61fa      	str	r2, [r7, #28]
 80067c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ca:	69b9      	ldr	r1, [r7, #24]
 80067cc:	69fa      	ldr	r2, [r7, #28]
 80067ce:	e841 2300 	strex	r3, r2, [r1]
 80067d2:	617b      	str	r3, [r7, #20]
   return(result);
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e5      	bne.n	80067a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2220      	movs	r2, #32
 80067de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e012      	b.n	8006814 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2220      	movs	r2, #32
 80067f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3758      	adds	r7, #88	@ 0x58
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	603b      	str	r3, [r7, #0]
 8006828:	4613      	mov	r3, r2
 800682a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800682c:	e04f      	b.n	80068ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006834:	d04b      	beq.n	80068ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006836:	f7fb fe2d 	bl	8002494 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	429a      	cmp	r2, r3
 8006844:	d302      	bcc.n	800684c <UART_WaitOnFlagUntilTimeout+0x30>
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e04e      	b.n	80068ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b00      	cmp	r3, #0
 800685c:	d037      	beq.n	80068ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2b80      	cmp	r3, #128	@ 0x80
 8006862:	d034      	beq.n	80068ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2b40      	cmp	r3, #64	@ 0x40
 8006868:	d031      	beq.n	80068ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	69db      	ldr	r3, [r3, #28]
 8006870:	f003 0308 	and.w	r3, r3, #8
 8006874:	2b08      	cmp	r3, #8
 8006876:	d110      	bne.n	800689a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2208      	movs	r2, #8
 800687e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 f920 	bl	8006ac6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2208      	movs	r2, #8
 800688a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e029      	b.n	80068ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	69db      	ldr	r3, [r3, #28]
 80068a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068a8:	d111      	bne.n	80068ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f000 f906 	bl	8006ac6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2220      	movs	r2, #32
 80068be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e00f      	b.n	80068ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	69da      	ldr	r2, [r3, #28]
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	4013      	ands	r3, r2
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	429a      	cmp	r2, r3
 80068dc:	bf0c      	ite	eq
 80068de:	2301      	moveq	r3, #1
 80068e0:	2300      	movne	r3, #0
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	461a      	mov	r2, r3
 80068e6:	79fb      	ldrb	r3, [r7, #7]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d0a0      	beq.n	800682e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
	...

080068f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b096      	sub	sp, #88	@ 0x58
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	4613      	mov	r3, r2
 8006904:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	88fa      	ldrh	r2, [r7, #6]
 8006910:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2222      	movs	r2, #34	@ 0x22
 8006920:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800692a:	2b00      	cmp	r3, #0
 800692c:	d02d      	beq.n	800698a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006934:	4a40      	ldr	r2, [pc, #256]	@ (8006a38 <UART_Start_Receive_DMA+0x140>)
 8006936:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800693e:	4a3f      	ldr	r2, [pc, #252]	@ (8006a3c <UART_Start_Receive_DMA+0x144>)
 8006940:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006948:	4a3d      	ldr	r2, [pc, #244]	@ (8006a40 <UART_Start_Receive_DMA+0x148>)
 800694a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006952:	2200      	movs	r2, #0
 8006954:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3324      	adds	r3, #36	@ 0x24
 8006962:	4619      	mov	r1, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006968:	461a      	mov	r2, r3
 800696a:	88fb      	ldrh	r3, [r7, #6]
 800696c:	f7fb ff78 	bl	8002860 <HAL_DMA_Start_IT>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d009      	beq.n	800698a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2210      	movs	r2, #16
 800697a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2220      	movs	r2, #32
 8006982:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e051      	b.n	8006a2e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d018      	beq.n	80069c4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800699a:	e853 3f00 	ldrex	r3, [r3]
 800699e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	461a      	mov	r2, r3
 80069ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069b2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80069b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069b8:	e841 2300 	strex	r3, r2, [r1]
 80069bc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80069be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1e6      	bne.n	8006992 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3308      	adds	r3, #8
 80069ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ce:	e853 3f00 	ldrex	r3, [r3]
 80069d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d6:	f043 0301 	orr.w	r3, r3, #1
 80069da:	653b      	str	r3, [r7, #80]	@ 0x50
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3308      	adds	r3, #8
 80069e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80069e4:	637a      	str	r2, [r7, #52]	@ 0x34
 80069e6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80069ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069ec:	e841 2300 	strex	r3, r2, [r1]
 80069f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80069f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1e5      	bne.n	80069c4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	3308      	adds	r3, #8
 80069fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	e853 3f00 	ldrex	r3, [r3]
 8006a06:	613b      	str	r3, [r7, #16]
   return(result);
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3308      	adds	r3, #8
 8006a16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a18:	623a      	str	r2, [r7, #32]
 8006a1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1c:	69f9      	ldr	r1, [r7, #28]
 8006a1e:	6a3a      	ldr	r2, [r7, #32]
 8006a20:	e841 2300 	strex	r3, r2, [r1]
 8006a24:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1e5      	bne.n	80069f8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3758      	adds	r7, #88	@ 0x58
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	08006b93 	.word	0x08006b93
 8006a3c:	08006cbf 	.word	0x08006cbf
 8006a40:	08006cfd 	.word	0x08006cfd

08006a44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b08f      	sub	sp, #60	@ 0x3c
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	e853 3f00 	ldrex	r3, [r3]
 8006a58:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	461a      	mov	r2, r3
 8006a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a6c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a72:	e841 2300 	strex	r3, r2, [r1]
 8006a76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1e6      	bne.n	8006a4c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3308      	adds	r3, #8
 8006a84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	e853 3f00 	ldrex	r3, [r3]
 8006a8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006a94:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	3308      	adds	r3, #8
 8006a9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a9e:	61ba      	str	r2, [r7, #24]
 8006aa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa2:	6979      	ldr	r1, [r7, #20]
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	e841 2300 	strex	r3, r2, [r1]
 8006aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1e5      	bne.n	8006a7e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006aba:	bf00      	nop
 8006abc:	373c      	adds	r7, #60	@ 0x3c
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b095      	sub	sp, #84	@ 0x54
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ad6:	e853 3f00 	ldrex	r3, [r3]
 8006ada:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ade:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006aec:	643b      	str	r3, [r7, #64]	@ 0x40
 8006aee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006af2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006af4:	e841 2300 	strex	r3, r2, [r1]
 8006af8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1e6      	bne.n	8006ace <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	3308      	adds	r3, #8
 8006b06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	e853 3f00 	ldrex	r3, [r3]
 8006b0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b16:	f023 0301 	bic.w	r3, r3, #1
 8006b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	3308      	adds	r3, #8
 8006b22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b2c:	e841 2300 	strex	r3, r2, [r1]
 8006b30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1e3      	bne.n	8006b00 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d118      	bne.n	8006b72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	e853 3f00 	ldrex	r3, [r3]
 8006b4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	f023 0310 	bic.w	r3, r3, #16
 8006b54:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b5e:	61bb      	str	r3, [r7, #24]
 8006b60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6979      	ldr	r1, [r7, #20]
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e6      	bne.n	8006b40 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006b86:	bf00      	nop
 8006b88:	3754      	adds	r7, #84	@ 0x54
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b09c      	sub	sp, #112	@ 0x70
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b9e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0320 	and.w	r3, r3, #32
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d171      	bne.n	8006c92 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006bae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bbe:	e853 3f00 	ldrex	r3, [r3]
 8006bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006bc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bc6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bca:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006bd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006bd6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006bda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bdc:	e841 2300 	strex	r3, r2, [r1]
 8006be0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006be2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1e6      	bne.n	8006bb6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	3308      	adds	r3, #8
 8006bee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf2:	e853 3f00 	ldrex	r3, [r3]
 8006bf6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bfa:	f023 0301 	bic.w	r3, r3, #1
 8006bfe:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	3308      	adds	r3, #8
 8006c06:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006c08:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c0a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c10:	e841 2300 	strex	r3, r2, [r1]
 8006c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1e5      	bne.n	8006be8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3308      	adds	r3, #8
 8006c22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c26:	e853 3f00 	ldrex	r3, [r3]
 8006c2a:	623b      	str	r3, [r7, #32]
   return(result);
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c32:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3308      	adds	r3, #8
 8006c3a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006c3c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c44:	e841 2300 	strex	r3, r2, [r1]
 8006c48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1e5      	bne.n	8006c1c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c52:	2220      	movs	r2, #32
 8006c54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d118      	bne.n	8006c92 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	e853 3f00 	ldrex	r3, [r3]
 8006c6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f023 0310 	bic.w	r3, r3, #16
 8006c74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c7e:	61fb      	str	r3, [r7, #28]
 8006c80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c82:	69b9      	ldr	r1, [r7, #24]
 8006c84:	69fa      	ldr	r2, [r7, #28]
 8006c86:	e841 2300 	strex	r3, r2, [r1]
 8006c8a:	617b      	str	r3, [r7, #20]
   return(result);
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1e6      	bne.n	8006c60 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c94:	2200      	movs	r2, #0
 8006c96:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d107      	bne.n	8006cb0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ca0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ca2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006caa:	f7ff f993 	bl	8005fd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006cae:	e002      	b.n	8006cb6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006cb0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006cb2:	f7ff f971 	bl	8005f98 <HAL_UART_RxCpltCallback>
}
 8006cb6:	bf00      	nop
 8006cb8:	3770      	adds	r7, #112	@ 0x70
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b084      	sub	sp, #16
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d109      	bne.n	8006cee <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ce0:	085b      	lsrs	r3, r3, #1
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f7ff f974 	bl	8005fd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006cec:	e002      	b.n	8006cf4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f7ff f95c 	bl	8005fac <HAL_UART_RxHalfCpltCallback>
}
 8006cf4:	bf00      	nop
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d08:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d10:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d18:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d24:	2b80      	cmp	r3, #128	@ 0x80
 8006d26:	d109      	bne.n	8006d3c <UART_DMAError+0x40>
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	2b21      	cmp	r3, #33	@ 0x21
 8006d2c:	d106      	bne.n	8006d3c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006d36:	6978      	ldr	r0, [r7, #20]
 8006d38:	f7ff fe84 	bl	8006a44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d46:	2b40      	cmp	r3, #64	@ 0x40
 8006d48:	d109      	bne.n	8006d5e <UART_DMAError+0x62>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b22      	cmp	r3, #34	@ 0x22
 8006d4e:	d106      	bne.n	8006d5e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006d58:	6978      	ldr	r0, [r7, #20]
 8006d5a:	f7ff feb4 	bl	8006ac6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d64:	f043 0210 	orr.w	r2, r3, #16
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d6e:	6978      	ldr	r0, [r7, #20]
 8006d70:	f7ff f926 	bl	8005fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d74:	bf00      	nop
 8006d76:	3718      	adds	r7, #24
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d101      	bne.n	8006d92 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d8e:	2302      	movs	r3, #2
 8006d90:	e027      	b.n	8006de2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2224      	movs	r2, #36	@ 0x24
 8006d9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 0201 	bic.w	r2, r2, #1
 8006db8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006dc0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b084      	sub	sp, #16
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d101      	bne.n	8006e06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e02:	2302      	movs	r3, #2
 8006e04:	e02d      	b.n	8006e62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2224      	movs	r2, #36	@ 0x24
 8006e12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 0201 	bic.w	r2, r2, #1
 8006e2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f850 	bl	8006ee8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2220      	movs	r2, #32
 8006e54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d101      	bne.n	8006e82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e7e:	2302      	movs	r3, #2
 8006e80:	e02d      	b.n	8006ede <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2224      	movs	r2, #36	@ 0x24
 8006e8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 0201 	bic.w	r2, r2, #1
 8006ea8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f812 	bl	8006ee8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2220      	movs	r2, #32
 8006ed0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d108      	bne.n	8006f0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f08:	e031      	b.n	8006f6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f0a:	2308      	movs	r3, #8
 8006f0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f0e:	2308      	movs	r3, #8
 8006f10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	0e5b      	lsrs	r3, r3, #25
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	f003 0307 	and.w	r3, r3, #7
 8006f20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	0f5b      	lsrs	r3, r3, #29
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	f003 0307 	and.w	r3, r3, #7
 8006f30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f32:	7bbb      	ldrb	r3, [r7, #14]
 8006f34:	7b3a      	ldrb	r2, [r7, #12]
 8006f36:	4911      	ldr	r1, [pc, #68]	@ (8006f7c <UARTEx_SetNbDataToProcess+0x94>)
 8006f38:	5c8a      	ldrb	r2, [r1, r2]
 8006f3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f3e:	7b3a      	ldrb	r2, [r7, #12]
 8006f40:	490f      	ldr	r1, [pc, #60]	@ (8006f80 <UARTEx_SetNbDataToProcess+0x98>)
 8006f42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f44:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
 8006f52:	7b7a      	ldrb	r2, [r7, #13]
 8006f54:	4909      	ldr	r1, [pc, #36]	@ (8006f7c <UARTEx_SetNbDataToProcess+0x94>)
 8006f56:	5c8a      	ldrb	r2, [r1, r2]
 8006f58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f5c:	7b7a      	ldrb	r2, [r7, #13]
 8006f5e:	4908      	ldr	r1, [pc, #32]	@ (8006f80 <UARTEx_SetNbDataToProcess+0x98>)
 8006f60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f62:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006f6e:	bf00      	nop
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	0800d4b8 	.word	0x0800d4b8
 8006f80:	0800d4c0 	.word	0x0800d4c0

08006f84 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f96:	2b84      	cmp	r3, #132	@ 0x84
 8006f98:	d005      	beq.n	8006fa6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006f9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	3303      	adds	r3, #3
 8006fa4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006fb8:	f000 fb1c 	bl	80075f4 <vTaskStartScheduler>
  
  return osOK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006fc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fc4:	b087      	sub	sp, #28
 8006fc6:	af02      	add	r7, sp, #8
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685c      	ldr	r4, [r3, #4]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006fd8:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7ff ffcf 	bl	8006f84 <makeFreeRtosPriority>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	f107 030c 	add.w	r3, r7, #12
 8006fec:	9301      	str	r3, [sp, #4]
 8006fee:	9200      	str	r2, [sp, #0]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	4632      	mov	r2, r6
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f000 f992 	bl	8007320 <xTaskCreate>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d001      	beq.n	8007006 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8007002:	2300      	movs	r3, #0
 8007004:	e000      	b.n	8007008 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8007006:	68fb      	ldr	r3, [r7, #12]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007010 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d001      	beq.n	8007026 <osDelay+0x16>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	e000      	b.n	8007028 <osDelay+0x18>
 8007026:	2301      	movs	r3, #1
 8007028:	4618      	mov	r0, r3
 800702a:	f000 faad 	bl	8007588 <vTaskDelay>
  
  return osOK;
 800702e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f103 0208 	add.w	r2, r3, #8
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f04f 32ff 	mov.w	r2, #4294967295
 8007050:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f103 0208 	add.w	r2, r3, #8
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f103 0208 	add.w	r2, r3, #8
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007086:	bf00      	nop
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007092:	b480      	push	{r7}
 8007094:	b085      	sub	sp, #20
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	689a      	ldr	r2, [r3, #8]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	683a      	ldr	r2, [r7, #0]
 80070bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	601a      	str	r2, [r3, #0]
}
 80070ce:	bf00      	nop
 80070d0:	3714      	adds	r7, #20
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070da:	b480      	push	{r7}
 80070dc:	b085      	sub	sp, #20
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f0:	d103      	bne.n	80070fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	60fb      	str	r3, [r7, #12]
 80070f8:	e00c      	b.n	8007114 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	3308      	adds	r3, #8
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	e002      	b.n	8007108 <vListInsert+0x2e>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	60fb      	str	r3, [r7, #12]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	429a      	cmp	r2, r3
 8007112:	d2f6      	bcs.n	8007102 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	683a      	ldr	r2, [r7, #0]
 800712e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	1c5a      	adds	r2, r3, #1
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	601a      	str	r2, [r3, #0]
}
 8007140:	bf00      	nop
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	6892      	ldr	r2, [r2, #8]
 8007162:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	6852      	ldr	r2, [r2, #4]
 800716c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	429a      	cmp	r2, r3
 8007176:	d103      	bne.n	8007180 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	689a      	ldr	r2, [r3, #8]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	1e5a      	subs	r2, r3, #1
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10b      	bne.n	80071cc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80071b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80071c6:	bf00      	nop
 80071c8:	bf00      	nop
 80071ca:	e7fd      	b.n	80071c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80071cc:	f000 ffc4 	bl	8008158 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071d8:	68f9      	ldr	r1, [r7, #12]
 80071da:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80071dc:	fb01 f303 	mul.w	r3, r1, r3
 80071e0:	441a      	add	r2, r3
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071fc:	3b01      	subs	r3, #1
 80071fe:	68f9      	ldr	r1, [r7, #12]
 8007200:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007202:	fb01 f303 	mul.w	r3, r1, r3
 8007206:	441a      	add	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	22ff      	movs	r2, #255	@ 0xff
 8007210:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	22ff      	movs	r2, #255	@ 0xff
 8007218:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d114      	bne.n	800724c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d01a      	beq.n	8007260 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	3310      	adds	r3, #16
 800722e:	4618      	mov	r0, r3
 8007230:	f000 fbea 	bl	8007a08 <xTaskRemoveFromEventList>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d012      	beq.n	8007260 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800723a:	4b0d      	ldr	r3, [pc, #52]	@ (8007270 <xQueueGenericReset+0xd0>)
 800723c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	e009      	b.n	8007260 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	3310      	adds	r3, #16
 8007250:	4618      	mov	r0, r3
 8007252:	f7ff fef1 	bl	8007038 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3324      	adds	r3, #36	@ 0x24
 800725a:	4618      	mov	r0, r3
 800725c:	f7ff feec 	bl	8007038 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007260:	f000 ffac 	bl	80081bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007264:	2301      	movs	r3, #1
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	e000ed04 	.word	0xe000ed04

08007274 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08a      	sub	sp, #40	@ 0x28
 8007278:	af02      	add	r7, sp, #8
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	4613      	mov	r3, r2
 8007280:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10b      	bne.n	80072a0 <xQueueGenericCreate+0x2c>
	__asm volatile
 8007288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	613b      	str	r3, [r7, #16]
}
 800729a:	bf00      	nop
 800729c:	bf00      	nop
 800729e:	e7fd      	b.n	800729c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	fb02 f303 	mul.w	r3, r2, r3
 80072a8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	3348      	adds	r3, #72	@ 0x48
 80072ae:	4618      	mov	r0, r3
 80072b0:	f001 f874 	bl	800839c <pvPortMalloc>
 80072b4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00d      	beq.n	80072d8 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	3348      	adds	r3, #72	@ 0x48
 80072c4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80072c6:	79fa      	ldrb	r2, [r7, #7]
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	4613      	mov	r3, r2
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	68b9      	ldr	r1, [r7, #8]
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 f805 	bl	80072e2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80072d8:	69bb      	ldr	r3, [r7, #24]
	}
 80072da:	4618      	mov	r0, r3
 80072dc:	3720      	adds	r7, #32
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b084      	sub	sp, #16
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	60f8      	str	r0, [r7, #12]
 80072ea:	60b9      	str	r1, [r7, #8]
 80072ec:	607a      	str	r2, [r7, #4]
 80072ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d103      	bne.n	80072fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	69ba      	ldr	r2, [r7, #24]
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	e002      	b.n	8007304 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007310:	2101      	movs	r1, #1
 8007312:	69b8      	ldr	r0, [r7, #24]
 8007314:	f7ff ff44 	bl	80071a0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007318:	bf00      	nop
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007320:	b580      	push	{r7, lr}
 8007322:	b08c      	sub	sp, #48	@ 0x30
 8007324:	af04      	add	r7, sp, #16
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	603b      	str	r3, [r7, #0]
 800732c:	4613      	mov	r3, r2
 800732e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007330:	88fb      	ldrh	r3, [r7, #6]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4618      	mov	r0, r3
 8007336:	f001 f831 	bl	800839c <pvPortMalloc>
 800733a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00e      	beq.n	8007360 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007342:	2054      	movs	r0, #84	@ 0x54
 8007344:	f001 f82a 	bl	800839c <pvPortMalloc>
 8007348:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d003      	beq.n	8007358 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	631a      	str	r2, [r3, #48]	@ 0x30
 8007356:	e005      	b.n	8007364 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007358:	6978      	ldr	r0, [r7, #20]
 800735a:	f001 f8ed 	bl	8008538 <vPortFree>
 800735e:	e001      	b.n	8007364 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007360:	2300      	movs	r3, #0
 8007362:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d013      	beq.n	8007392 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800736a:	88fa      	ldrh	r2, [r7, #6]
 800736c:	2300      	movs	r3, #0
 800736e:	9303      	str	r3, [sp, #12]
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	9302      	str	r3, [sp, #8]
 8007374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007376:	9301      	str	r3, [sp, #4]
 8007378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	68b9      	ldr	r1, [r7, #8]
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f000 f80e 	bl	80073a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007386:	69f8      	ldr	r0, [r7, #28]
 8007388:	f000 f894 	bl	80074b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800738c:	2301      	movs	r3, #1
 800738e:	61bb      	str	r3, [r7, #24]
 8007390:	e002      	b.n	8007398 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007392:	f04f 33ff 	mov.w	r3, #4294967295
 8007396:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007398:	69bb      	ldr	r3, [r7, #24]
	}
 800739a:	4618      	mov	r0, r3
 800739c:	3720      	adds	r7, #32
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b088      	sub	sp, #32
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	60f8      	str	r0, [r7, #12]
 80073aa:	60b9      	str	r1, [r7, #8]
 80073ac:	607a      	str	r2, [r7, #4]
 80073ae:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80073b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80073ba:	3b01      	subs	r3, #1
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	f023 0307 	bic.w	r3, r3, #7
 80073c8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	f003 0307 	and.w	r3, r3, #7
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00b      	beq.n	80073ec <prvInitialiseNewTask+0x4a>
	__asm volatile
 80073d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	617b      	str	r3, [r7, #20]
}
 80073e6:	bf00      	nop
 80073e8:	bf00      	nop
 80073ea:	e7fd      	b.n	80073e8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d01f      	beq.n	8007432 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073f2:	2300      	movs	r3, #0
 80073f4:	61fb      	str	r3, [r7, #28]
 80073f6:	e012      	b.n	800741e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	4413      	add	r3, r2
 80073fe:	7819      	ldrb	r1, [r3, #0]
 8007400:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	4413      	add	r3, r2
 8007406:	3334      	adds	r3, #52	@ 0x34
 8007408:	460a      	mov	r2, r1
 800740a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	4413      	add	r3, r2
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d006      	beq.n	8007426 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	3301      	adds	r3, #1
 800741c:	61fb      	str	r3, [r7, #28]
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	2b0f      	cmp	r3, #15
 8007422:	d9e9      	bls.n	80073f8 <prvInitialiseNewTask+0x56>
 8007424:	e000      	b.n	8007428 <prvInitialiseNewTask+0x86>
			{
				break;
 8007426:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742a:	2200      	movs	r2, #0
 800742c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007430:	e003      	b.n	800743a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800743a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800743c:	2b06      	cmp	r3, #6
 800743e:	d901      	bls.n	8007444 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007440:	2306      	movs	r3, #6
 8007442:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007446:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007448:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800744a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800744e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007452:	2200      	movs	r2, #0
 8007454:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007458:	3304      	adds	r3, #4
 800745a:	4618      	mov	r0, r3
 800745c:	f7ff fe0c 	bl	8007078 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007462:	3318      	adds	r3, #24
 8007464:	4618      	mov	r0, r3
 8007466:	f7ff fe07 	bl	8007078 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800746a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800746e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007472:	f1c3 0207 	rsb	r2, r3, #7
 8007476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007478:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800747a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800747e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007482:	2200      	movs	r2, #0
 8007484:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	68f9      	ldr	r1, [r7, #12]
 8007492:	69b8      	ldr	r0, [r7, #24]
 8007494:	f000 fd32 	bl	8007efc <pxPortInitialiseStack>
 8007498:	4602      	mov	r2, r0
 800749a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800749e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d002      	beq.n	80074aa <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80074a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074aa:	bf00      	nop
 80074ac:	3720      	adds	r7, #32
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
	...

080074b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80074bc:	f000 fe4c 	bl	8008158 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80074c0:	4b2a      	ldr	r3, [pc, #168]	@ (800756c <prvAddNewTaskToReadyList+0xb8>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	3301      	adds	r3, #1
 80074c6:	4a29      	ldr	r2, [pc, #164]	@ (800756c <prvAddNewTaskToReadyList+0xb8>)
 80074c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80074ca:	4b29      	ldr	r3, [pc, #164]	@ (8007570 <prvAddNewTaskToReadyList+0xbc>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d109      	bne.n	80074e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80074d2:	4a27      	ldr	r2, [pc, #156]	@ (8007570 <prvAddNewTaskToReadyList+0xbc>)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80074d8:	4b24      	ldr	r3, [pc, #144]	@ (800756c <prvAddNewTaskToReadyList+0xb8>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d110      	bne.n	8007502 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80074e0:	f000 fb0e 	bl	8007b00 <prvInitialiseTaskLists>
 80074e4:	e00d      	b.n	8007502 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80074e6:	4b23      	ldr	r3, [pc, #140]	@ (8007574 <prvAddNewTaskToReadyList+0xc0>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d109      	bne.n	8007502 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80074ee:	4b20      	ldr	r3, [pc, #128]	@ (8007570 <prvAddNewTaskToReadyList+0xbc>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d802      	bhi.n	8007502 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074fc:	4a1c      	ldr	r2, [pc, #112]	@ (8007570 <prvAddNewTaskToReadyList+0xbc>)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007502:	4b1d      	ldr	r3, [pc, #116]	@ (8007578 <prvAddNewTaskToReadyList+0xc4>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	3301      	adds	r3, #1
 8007508:	4a1b      	ldr	r2, [pc, #108]	@ (8007578 <prvAddNewTaskToReadyList+0xc4>)
 800750a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007510:	2201      	movs	r2, #1
 8007512:	409a      	lsls	r2, r3
 8007514:	4b19      	ldr	r3, [pc, #100]	@ (800757c <prvAddNewTaskToReadyList+0xc8>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4313      	orrs	r3, r2
 800751a:	4a18      	ldr	r2, [pc, #96]	@ (800757c <prvAddNewTaskToReadyList+0xc8>)
 800751c:	6013      	str	r3, [r2, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007522:	4613      	mov	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4a15      	ldr	r2, [pc, #84]	@ (8007580 <prvAddNewTaskToReadyList+0xcc>)
 800752c:	441a      	add	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	3304      	adds	r3, #4
 8007532:	4619      	mov	r1, r3
 8007534:	4610      	mov	r0, r2
 8007536:	f7ff fdac 	bl	8007092 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800753a:	f000 fe3f 	bl	80081bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800753e:	4b0d      	ldr	r3, [pc, #52]	@ (8007574 <prvAddNewTaskToReadyList+0xc0>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00e      	beq.n	8007564 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007546:	4b0a      	ldr	r3, [pc, #40]	@ (8007570 <prvAddNewTaskToReadyList+0xbc>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007550:	429a      	cmp	r2, r3
 8007552:	d207      	bcs.n	8007564 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007554:	4b0b      	ldr	r3, [pc, #44]	@ (8007584 <prvAddNewTaskToReadyList+0xd0>)
 8007556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007564:	bf00      	nop
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	20001ea8 	.word	0x20001ea8
 8007570:	20001da8 	.word	0x20001da8
 8007574:	20001eb4 	.word	0x20001eb4
 8007578:	20001ec4 	.word	0x20001ec4
 800757c:	20001eb0 	.word	0x20001eb0
 8007580:	20001dac 	.word	0x20001dac
 8007584:	e000ed04 	.word	0xe000ed04

08007588 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007590:	2300      	movs	r3, #0
 8007592:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d018      	beq.n	80075cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800759a:	4b14      	ldr	r3, [pc, #80]	@ (80075ec <vTaskDelay+0x64>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00b      	beq.n	80075ba <vTaskDelay+0x32>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	60bb      	str	r3, [r7, #8]
}
 80075b4:	bf00      	nop
 80075b6:	bf00      	nop
 80075b8:	e7fd      	b.n	80075b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80075ba:	f000 f863 	bl	8007684 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80075be:	2100      	movs	r1, #0
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fc35 	bl	8007e30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80075c6:	f000 f86b 	bl	80076a0 <xTaskResumeAll>
 80075ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d107      	bne.n	80075e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80075d2:	4b07      	ldr	r3, [pc, #28]	@ (80075f0 <vTaskDelay+0x68>)
 80075d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075e2:	bf00      	nop
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	20001ed0 	.word	0x20001ed0
 80075f0:	e000ed04 	.word	0xe000ed04

080075f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80075fa:	4b1c      	ldr	r3, [pc, #112]	@ (800766c <vTaskStartScheduler+0x78>)
 80075fc:	9301      	str	r3, [sp, #4]
 80075fe:	2300      	movs	r3, #0
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	2300      	movs	r3, #0
 8007604:	2280      	movs	r2, #128	@ 0x80
 8007606:	491a      	ldr	r1, [pc, #104]	@ (8007670 <vTaskStartScheduler+0x7c>)
 8007608:	481a      	ldr	r0, [pc, #104]	@ (8007674 <vTaskStartScheduler+0x80>)
 800760a:	f7ff fe89 	bl	8007320 <xTaskCreate>
 800760e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d116      	bne.n	8007644 <vTaskStartScheduler+0x50>
	__asm volatile
 8007616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761a:	f383 8811 	msr	BASEPRI, r3
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	60bb      	str	r3, [r7, #8]
}
 8007628:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800762a:	4b13      	ldr	r3, [pc, #76]	@ (8007678 <vTaskStartScheduler+0x84>)
 800762c:	f04f 32ff 	mov.w	r2, #4294967295
 8007630:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007632:	4b12      	ldr	r3, [pc, #72]	@ (800767c <vTaskStartScheduler+0x88>)
 8007634:	2201      	movs	r2, #1
 8007636:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007638:	4b11      	ldr	r3, [pc, #68]	@ (8007680 <vTaskStartScheduler+0x8c>)
 800763a:	2200      	movs	r2, #0
 800763c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800763e:	f000 fce7 	bl	8008010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007642:	e00f      	b.n	8007664 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800764a:	d10b      	bne.n	8007664 <vTaskStartScheduler+0x70>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	607b      	str	r3, [r7, #4]
}
 800765e:	bf00      	nop
 8007660:	bf00      	nop
 8007662:	e7fd      	b.n	8007660 <vTaskStartScheduler+0x6c>
}
 8007664:	bf00      	nop
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	20001ecc 	.word	0x20001ecc
 8007670:	0800d430 	.word	0x0800d430
 8007674:	08007ad1 	.word	0x08007ad1
 8007678:	20001ec8 	.word	0x20001ec8
 800767c:	20001eb4 	.word	0x20001eb4
 8007680:	20001eac 	.word	0x20001eac

08007684 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007684:	b480      	push	{r7}
 8007686:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007688:	4b04      	ldr	r3, [pc, #16]	@ (800769c <vTaskSuspendAll+0x18>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3301      	adds	r3, #1
 800768e:	4a03      	ldr	r2, [pc, #12]	@ (800769c <vTaskSuspendAll+0x18>)
 8007690:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007692:	bf00      	nop
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	20001ed0 	.word	0x20001ed0

080076a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80076a6:	2300      	movs	r3, #0
 80076a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80076aa:	2300      	movs	r3, #0
 80076ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80076ae:	4b42      	ldr	r3, [pc, #264]	@ (80077b8 <xTaskResumeAll+0x118>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10b      	bne.n	80076ce <xTaskResumeAll+0x2e>
	__asm volatile
 80076b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	603b      	str	r3, [r7, #0]
}
 80076c8:	bf00      	nop
 80076ca:	bf00      	nop
 80076cc:	e7fd      	b.n	80076ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80076ce:	f000 fd43 	bl	8008158 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80076d2:	4b39      	ldr	r3, [pc, #228]	@ (80077b8 <xTaskResumeAll+0x118>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	4a37      	ldr	r2, [pc, #220]	@ (80077b8 <xTaskResumeAll+0x118>)
 80076da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076dc:	4b36      	ldr	r3, [pc, #216]	@ (80077b8 <xTaskResumeAll+0x118>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d161      	bne.n	80077a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80076e4:	4b35      	ldr	r3, [pc, #212]	@ (80077bc <xTaskResumeAll+0x11c>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d05d      	beq.n	80077a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076ec:	e02e      	b.n	800774c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076ee:	4b34      	ldr	r3, [pc, #208]	@ (80077c0 <xTaskResumeAll+0x120>)
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	3318      	adds	r3, #24
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7ff fd26 	bl	800714c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	3304      	adds	r3, #4
 8007704:	4618      	mov	r0, r3
 8007706:	f7ff fd21 	bl	800714c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800770e:	2201      	movs	r2, #1
 8007710:	409a      	lsls	r2, r3
 8007712:	4b2c      	ldr	r3, [pc, #176]	@ (80077c4 <xTaskResumeAll+0x124>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4313      	orrs	r3, r2
 8007718:	4a2a      	ldr	r2, [pc, #168]	@ (80077c4 <xTaskResumeAll+0x124>)
 800771a:	6013      	str	r3, [r2, #0]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007720:	4613      	mov	r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4a27      	ldr	r2, [pc, #156]	@ (80077c8 <xTaskResumeAll+0x128>)
 800772a:	441a      	add	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	3304      	adds	r3, #4
 8007730:	4619      	mov	r1, r3
 8007732:	4610      	mov	r0, r2
 8007734:	f7ff fcad 	bl	8007092 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800773c:	4b23      	ldr	r3, [pc, #140]	@ (80077cc <xTaskResumeAll+0x12c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007742:	429a      	cmp	r2, r3
 8007744:	d302      	bcc.n	800774c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007746:	4b22      	ldr	r3, [pc, #136]	@ (80077d0 <xTaskResumeAll+0x130>)
 8007748:	2201      	movs	r2, #1
 800774a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800774c:	4b1c      	ldr	r3, [pc, #112]	@ (80077c0 <xTaskResumeAll+0x120>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1cc      	bne.n	80076ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800775a:	f000 fa4f 	bl	8007bfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800775e:	4b1d      	ldr	r3, [pc, #116]	@ (80077d4 <xTaskResumeAll+0x134>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d010      	beq.n	800778c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800776a:	f000 f837 	bl	80077dc <xTaskIncrementTick>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007774:	4b16      	ldr	r3, [pc, #88]	@ (80077d0 <xTaskResumeAll+0x130>)
 8007776:	2201      	movs	r2, #1
 8007778:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	3b01      	subs	r3, #1
 800777e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1f1      	bne.n	800776a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007786:	4b13      	ldr	r3, [pc, #76]	@ (80077d4 <xTaskResumeAll+0x134>)
 8007788:	2200      	movs	r2, #0
 800778a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800778c:	4b10      	ldr	r3, [pc, #64]	@ (80077d0 <xTaskResumeAll+0x130>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d009      	beq.n	80077a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007794:	2301      	movs	r3, #1
 8007796:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007798:	4b0f      	ldr	r3, [pc, #60]	@ (80077d8 <xTaskResumeAll+0x138>)
 800779a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800779e:	601a      	str	r2, [r3, #0]
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077a8:	f000 fd08 	bl	80081bc <vPortExitCritical>

	return xAlreadyYielded;
 80077ac:	68bb      	ldr	r3, [r7, #8]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	20001ed0 	.word	0x20001ed0
 80077bc:	20001ea8 	.word	0x20001ea8
 80077c0:	20001e68 	.word	0x20001e68
 80077c4:	20001eb0 	.word	0x20001eb0
 80077c8:	20001dac 	.word	0x20001dac
 80077cc:	20001da8 	.word	0x20001da8
 80077d0:	20001ebc 	.word	0x20001ebc
 80077d4:	20001eb8 	.word	0x20001eb8
 80077d8:	e000ed04 	.word	0xe000ed04

080077dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80077e2:	2300      	movs	r3, #0
 80077e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077e6:	4b4f      	ldr	r3, [pc, #316]	@ (8007924 <xTaskIncrementTick+0x148>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f040 808f 	bne.w	800790e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80077f0:	4b4d      	ldr	r3, [pc, #308]	@ (8007928 <xTaskIncrementTick+0x14c>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3301      	adds	r3, #1
 80077f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80077f8:	4a4b      	ldr	r2, [pc, #300]	@ (8007928 <xTaskIncrementTick+0x14c>)
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d121      	bne.n	8007848 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007804:	4b49      	ldr	r3, [pc, #292]	@ (800792c <xTaskIncrementTick+0x150>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00b      	beq.n	8007826 <xTaskIncrementTick+0x4a>
	__asm volatile
 800780e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	603b      	str	r3, [r7, #0]
}
 8007820:	bf00      	nop
 8007822:	bf00      	nop
 8007824:	e7fd      	b.n	8007822 <xTaskIncrementTick+0x46>
 8007826:	4b41      	ldr	r3, [pc, #260]	@ (800792c <xTaskIncrementTick+0x150>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	4b40      	ldr	r3, [pc, #256]	@ (8007930 <xTaskIncrementTick+0x154>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a3e      	ldr	r2, [pc, #248]	@ (800792c <xTaskIncrementTick+0x150>)
 8007832:	6013      	str	r3, [r2, #0]
 8007834:	4a3e      	ldr	r2, [pc, #248]	@ (8007930 <xTaskIncrementTick+0x154>)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6013      	str	r3, [r2, #0]
 800783a:	4b3e      	ldr	r3, [pc, #248]	@ (8007934 <xTaskIncrementTick+0x158>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3301      	adds	r3, #1
 8007840:	4a3c      	ldr	r2, [pc, #240]	@ (8007934 <xTaskIncrementTick+0x158>)
 8007842:	6013      	str	r3, [r2, #0]
 8007844:	f000 f9da 	bl	8007bfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007848:	4b3b      	ldr	r3, [pc, #236]	@ (8007938 <xTaskIncrementTick+0x15c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	429a      	cmp	r2, r3
 8007850:	d348      	bcc.n	80078e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007852:	4b36      	ldr	r3, [pc, #216]	@ (800792c <xTaskIncrementTick+0x150>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d104      	bne.n	8007866 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800785c:	4b36      	ldr	r3, [pc, #216]	@ (8007938 <xTaskIncrementTick+0x15c>)
 800785e:	f04f 32ff 	mov.w	r2, #4294967295
 8007862:	601a      	str	r2, [r3, #0]
					break;
 8007864:	e03e      	b.n	80078e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007866:	4b31      	ldr	r3, [pc, #196]	@ (800792c <xTaskIncrementTick+0x150>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	429a      	cmp	r2, r3
 800787c:	d203      	bcs.n	8007886 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800787e:	4a2e      	ldr	r2, [pc, #184]	@ (8007938 <xTaskIncrementTick+0x15c>)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007884:	e02e      	b.n	80078e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	3304      	adds	r3, #4
 800788a:	4618      	mov	r0, r3
 800788c:	f7ff fc5e 	bl	800714c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007894:	2b00      	cmp	r3, #0
 8007896:	d004      	beq.n	80078a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	3318      	adds	r3, #24
 800789c:	4618      	mov	r0, r3
 800789e:	f7ff fc55 	bl	800714c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a6:	2201      	movs	r2, #1
 80078a8:	409a      	lsls	r2, r3
 80078aa:	4b24      	ldr	r3, [pc, #144]	@ (800793c <xTaskIncrementTick+0x160>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	4a22      	ldr	r2, [pc, #136]	@ (800793c <xTaskIncrementTick+0x160>)
 80078b2:	6013      	str	r3, [r2, #0]
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078b8:	4613      	mov	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	4413      	add	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4a1f      	ldr	r2, [pc, #124]	@ (8007940 <xTaskIncrementTick+0x164>)
 80078c2:	441a      	add	r2, r3
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	3304      	adds	r3, #4
 80078c8:	4619      	mov	r1, r3
 80078ca:	4610      	mov	r0, r2
 80078cc:	f7ff fbe1 	bl	8007092 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078d4:	4b1b      	ldr	r3, [pc, #108]	@ (8007944 <xTaskIncrementTick+0x168>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078da:	429a      	cmp	r2, r3
 80078dc:	d3b9      	bcc.n	8007852 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80078de:	2301      	movs	r3, #1
 80078e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078e2:	e7b6      	b.n	8007852 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80078e4:	4b17      	ldr	r3, [pc, #92]	@ (8007944 <xTaskIncrementTick+0x168>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078ea:	4915      	ldr	r1, [pc, #84]	@ (8007940 <xTaskIncrementTick+0x164>)
 80078ec:	4613      	mov	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4413      	add	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	440b      	add	r3, r1
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d901      	bls.n	8007900 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80078fc:	2301      	movs	r3, #1
 80078fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007900:	4b11      	ldr	r3, [pc, #68]	@ (8007948 <xTaskIncrementTick+0x16c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d007      	beq.n	8007918 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007908:	2301      	movs	r3, #1
 800790a:	617b      	str	r3, [r7, #20]
 800790c:	e004      	b.n	8007918 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800790e:	4b0f      	ldr	r3, [pc, #60]	@ (800794c <xTaskIncrementTick+0x170>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	3301      	adds	r3, #1
 8007914:	4a0d      	ldr	r2, [pc, #52]	@ (800794c <xTaskIncrementTick+0x170>)
 8007916:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007918:	697b      	ldr	r3, [r7, #20]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3718      	adds	r7, #24
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	20001ed0 	.word	0x20001ed0
 8007928:	20001eac 	.word	0x20001eac
 800792c:	20001e60 	.word	0x20001e60
 8007930:	20001e64 	.word	0x20001e64
 8007934:	20001ec0 	.word	0x20001ec0
 8007938:	20001ec8 	.word	0x20001ec8
 800793c:	20001eb0 	.word	0x20001eb0
 8007940:	20001dac 	.word	0x20001dac
 8007944:	20001da8 	.word	0x20001da8
 8007948:	20001ebc 	.word	0x20001ebc
 800794c:	20001eb8 	.word	0x20001eb8

08007950 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007950:	b480      	push	{r7}
 8007952:	b087      	sub	sp, #28
 8007954:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007956:	4b27      	ldr	r3, [pc, #156]	@ (80079f4 <vTaskSwitchContext+0xa4>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d003      	beq.n	8007966 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800795e:	4b26      	ldr	r3, [pc, #152]	@ (80079f8 <vTaskSwitchContext+0xa8>)
 8007960:	2201      	movs	r2, #1
 8007962:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007964:	e040      	b.n	80079e8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007966:	4b24      	ldr	r3, [pc, #144]	@ (80079f8 <vTaskSwitchContext+0xa8>)
 8007968:	2200      	movs	r2, #0
 800796a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800796c:	4b23      	ldr	r3, [pc, #140]	@ (80079fc <vTaskSwitchContext+0xac>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	fab3 f383 	clz	r3, r3
 8007978:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800797a:	7afb      	ldrb	r3, [r7, #11]
 800797c:	f1c3 031f 	rsb	r3, r3, #31
 8007980:	617b      	str	r3, [r7, #20]
 8007982:	491f      	ldr	r1, [pc, #124]	@ (8007a00 <vTaskSwitchContext+0xb0>)
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	4613      	mov	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	440b      	add	r3, r1
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10b      	bne.n	80079ae <vTaskSwitchContext+0x5e>
	__asm volatile
 8007996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799a:	f383 8811 	msr	BASEPRI, r3
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	607b      	str	r3, [r7, #4]
}
 80079a8:	bf00      	nop
 80079aa:	bf00      	nop
 80079ac:	e7fd      	b.n	80079aa <vTaskSwitchContext+0x5a>
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	4613      	mov	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4a11      	ldr	r2, [pc, #68]	@ (8007a00 <vTaskSwitchContext+0xb0>)
 80079ba:	4413      	add	r3, r2
 80079bc:	613b      	str	r3, [r7, #16]
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	605a      	str	r2, [r3, #4]
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	685a      	ldr	r2, [r3, #4]
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	3308      	adds	r3, #8
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d104      	bne.n	80079de <vTaskSwitchContext+0x8e>
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	605a      	str	r2, [r3, #4]
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	4a07      	ldr	r2, [pc, #28]	@ (8007a04 <vTaskSwitchContext+0xb4>)
 80079e6:	6013      	str	r3, [r2, #0]
}
 80079e8:	bf00      	nop
 80079ea:	371c      	adds	r7, #28
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr
 80079f4:	20001ed0 	.word	0x20001ed0
 80079f8:	20001ebc 	.word	0x20001ebc
 80079fc:	20001eb0 	.word	0x20001eb0
 8007a00:	20001dac 	.word	0x20001dac
 8007a04:	20001da8 	.word	0x20001da8

08007a08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10b      	bne.n	8007a36 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	60fb      	str	r3, [r7, #12]
}
 8007a30:	bf00      	nop
 8007a32:	bf00      	nop
 8007a34:	e7fd      	b.n	8007a32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	3318      	adds	r3, #24
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7ff fb86 	bl	800714c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a40:	4b1d      	ldr	r3, [pc, #116]	@ (8007ab8 <xTaskRemoveFromEventList+0xb0>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d11c      	bne.n	8007a82 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7ff fb7d 	bl	800714c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a56:	2201      	movs	r2, #1
 8007a58:	409a      	lsls	r2, r3
 8007a5a:	4b18      	ldr	r3, [pc, #96]	@ (8007abc <xTaskRemoveFromEventList+0xb4>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	4a16      	ldr	r2, [pc, #88]	@ (8007abc <xTaskRemoveFromEventList+0xb4>)
 8007a62:	6013      	str	r3, [r2, #0]
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a68:	4613      	mov	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4a13      	ldr	r2, [pc, #76]	@ (8007ac0 <xTaskRemoveFromEventList+0xb8>)
 8007a72:	441a      	add	r2, r3
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	3304      	adds	r3, #4
 8007a78:	4619      	mov	r1, r3
 8007a7a:	4610      	mov	r0, r2
 8007a7c:	f7ff fb09 	bl	8007092 <vListInsertEnd>
 8007a80:	e005      	b.n	8007a8e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	3318      	adds	r3, #24
 8007a86:	4619      	mov	r1, r3
 8007a88:	480e      	ldr	r0, [pc, #56]	@ (8007ac4 <xTaskRemoveFromEventList+0xbc>)
 8007a8a:	f7ff fb02 	bl	8007092 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a92:	4b0d      	ldr	r3, [pc, #52]	@ (8007ac8 <xTaskRemoveFromEventList+0xc0>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d905      	bls.n	8007aa8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8007acc <xTaskRemoveFromEventList+0xc4>)
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	601a      	str	r2, [r3, #0]
 8007aa6:	e001      	b.n	8007aac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007aac:	697b      	ldr	r3, [r7, #20]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3718      	adds	r7, #24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	20001ed0 	.word	0x20001ed0
 8007abc:	20001eb0 	.word	0x20001eb0
 8007ac0:	20001dac 	.word	0x20001dac
 8007ac4:	20001e68 	.word	0x20001e68
 8007ac8:	20001da8 	.word	0x20001da8
 8007acc:	20001ebc 	.word	0x20001ebc

08007ad0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ad8:	f000 f852 	bl	8007b80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007adc:	4b06      	ldr	r3, [pc, #24]	@ (8007af8 <prvIdleTask+0x28>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d9f9      	bls.n	8007ad8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ae4:	4b05      	ldr	r3, [pc, #20]	@ (8007afc <prvIdleTask+0x2c>)
 8007ae6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007aea:	601a      	str	r2, [r3, #0]
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007af4:	e7f0      	b.n	8007ad8 <prvIdleTask+0x8>
 8007af6:	bf00      	nop
 8007af8:	20001dac 	.word	0x20001dac
 8007afc:	e000ed04 	.word	0xe000ed04

08007b00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b06:	2300      	movs	r3, #0
 8007b08:	607b      	str	r3, [r7, #4]
 8007b0a:	e00c      	b.n	8007b26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4a12      	ldr	r2, [pc, #72]	@ (8007b60 <prvInitialiseTaskLists+0x60>)
 8007b18:	4413      	add	r3, r2
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7ff fa8c 	bl	8007038 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	3301      	adds	r3, #1
 8007b24:	607b      	str	r3, [r7, #4]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2b06      	cmp	r3, #6
 8007b2a:	d9ef      	bls.n	8007b0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b2c:	480d      	ldr	r0, [pc, #52]	@ (8007b64 <prvInitialiseTaskLists+0x64>)
 8007b2e:	f7ff fa83 	bl	8007038 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b32:	480d      	ldr	r0, [pc, #52]	@ (8007b68 <prvInitialiseTaskLists+0x68>)
 8007b34:	f7ff fa80 	bl	8007038 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b38:	480c      	ldr	r0, [pc, #48]	@ (8007b6c <prvInitialiseTaskLists+0x6c>)
 8007b3a:	f7ff fa7d 	bl	8007038 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b3e:	480c      	ldr	r0, [pc, #48]	@ (8007b70 <prvInitialiseTaskLists+0x70>)
 8007b40:	f7ff fa7a 	bl	8007038 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b44:	480b      	ldr	r0, [pc, #44]	@ (8007b74 <prvInitialiseTaskLists+0x74>)
 8007b46:	f7ff fa77 	bl	8007038 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b78 <prvInitialiseTaskLists+0x78>)
 8007b4c:	4a05      	ldr	r2, [pc, #20]	@ (8007b64 <prvInitialiseTaskLists+0x64>)
 8007b4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b50:	4b0a      	ldr	r3, [pc, #40]	@ (8007b7c <prvInitialiseTaskLists+0x7c>)
 8007b52:	4a05      	ldr	r2, [pc, #20]	@ (8007b68 <prvInitialiseTaskLists+0x68>)
 8007b54:	601a      	str	r2, [r3, #0]
}
 8007b56:	bf00      	nop
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	20001dac 	.word	0x20001dac
 8007b64:	20001e38 	.word	0x20001e38
 8007b68:	20001e4c 	.word	0x20001e4c
 8007b6c:	20001e68 	.word	0x20001e68
 8007b70:	20001e7c 	.word	0x20001e7c
 8007b74:	20001e94 	.word	0x20001e94
 8007b78:	20001e60 	.word	0x20001e60
 8007b7c:	20001e64 	.word	0x20001e64

08007b80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b86:	e019      	b.n	8007bbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b88:	f000 fae6 	bl	8008158 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b8c:	4b10      	ldr	r3, [pc, #64]	@ (8007bd0 <prvCheckTasksWaitingTermination+0x50>)
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	3304      	adds	r3, #4
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7ff fad7 	bl	800714c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007bd4 <prvCheckTasksWaitingTermination+0x54>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	4a0b      	ldr	r2, [pc, #44]	@ (8007bd4 <prvCheckTasksWaitingTermination+0x54>)
 8007ba6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8007bd8 <prvCheckTasksWaitingTermination+0x58>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3b01      	subs	r3, #1
 8007bae:	4a0a      	ldr	r2, [pc, #40]	@ (8007bd8 <prvCheckTasksWaitingTermination+0x58>)
 8007bb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007bb2:	f000 fb03 	bl	80081bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f810 	bl	8007bdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bbc:	4b06      	ldr	r3, [pc, #24]	@ (8007bd8 <prvCheckTasksWaitingTermination+0x58>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1e1      	bne.n	8007b88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007bc4:	bf00      	nop
 8007bc6:	bf00      	nop
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	20001e7c 	.word	0x20001e7c
 8007bd4:	20001ea8 	.word	0x20001ea8
 8007bd8:	20001e90 	.word	0x20001e90

08007bdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 fca5 	bl	8008538 <vPortFree>
			vPortFree( pxTCB );
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fca2 	bl	8008538 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007bf4:	bf00      	nop
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c02:	4b0c      	ldr	r3, [pc, #48]	@ (8007c34 <prvResetNextTaskUnblockTime+0x38>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d104      	bne.n	8007c16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c38 <prvResetNextTaskUnblockTime+0x3c>)
 8007c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c14:	e008      	b.n	8007c28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c16:	4b07      	ldr	r3, [pc, #28]	@ (8007c34 <prvResetNextTaskUnblockTime+0x38>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	4a04      	ldr	r2, [pc, #16]	@ (8007c38 <prvResetNextTaskUnblockTime+0x3c>)
 8007c26:	6013      	str	r3, [r2, #0]
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	20001e60 	.word	0x20001e60
 8007c38:	20001ec8 	.word	0x20001ec8

08007c3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c42:	4b0b      	ldr	r3, [pc, #44]	@ (8007c70 <xTaskGetSchedulerState+0x34>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d102      	bne.n	8007c50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	607b      	str	r3, [r7, #4]
 8007c4e:	e008      	b.n	8007c62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c50:	4b08      	ldr	r3, [pc, #32]	@ (8007c74 <xTaskGetSchedulerState+0x38>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d102      	bne.n	8007c5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c58:	2302      	movs	r3, #2
 8007c5a:	607b      	str	r3, [r7, #4]
 8007c5c:	e001      	b.n	8007c62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c62:	687b      	ldr	r3, [r7, #4]
	}
 8007c64:	4618      	mov	r0, r3
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr
 8007c70:	20001eb4 	.word	0x20001eb4
 8007c74:	20001ed0 	.word	0x20001ed0

08007c78 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8007c82:	f000 fa69 	bl	8008158 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8007c86:	4b1e      	ldr	r3, [pc, #120]	@ (8007d00 <ulTaskNotifyTake+0x88>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d113      	bne.n	8007cb8 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007c90:	4b1b      	ldr	r3, [pc, #108]	@ (8007d00 <ulTaskNotifyTake+0x88>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00b      	beq.n	8007cb8 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	6838      	ldr	r0, [r7, #0]
 8007ca4:	f000 f8c4 	bl	8007e30 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007ca8:	4b16      	ldr	r3, [pc, #88]	@ (8007d04 <ulTaskNotifyTake+0x8c>)
 8007caa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007cb8:	f000 fa80 	bl	80081bc <vPortExitCritical>

		taskENTER_CRITICAL();
 8007cbc:	f000 fa4c 	bl	8008158 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8007cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8007d00 <ulTaskNotifyTake+0x88>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cc6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00c      	beq.n	8007ce8 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d004      	beq.n	8007cde <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8007d00 <ulTaskNotifyTake+0x88>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007cdc:	e004      	b.n	8007ce8 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8007cde:	4b08      	ldr	r3, [pc, #32]	@ (8007d00 <ulTaskNotifyTake+0x88>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	3a01      	subs	r2, #1
 8007ce6:	64da      	str	r2, [r3, #76]	@ 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ce8:	4b05      	ldr	r3, [pc, #20]	@ (8007d00 <ulTaskNotifyTake+0x88>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 8007cf2:	f000 fa63 	bl	80081bc <vPortExitCritical>

		return ulReturn;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
	}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	20001da8 	.word	0x20001da8
 8007d04:	e000ed04 	.word	0xe000ed04

08007d08 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b08a      	sub	sp, #40	@ 0x28
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10b      	bne.n	8007d30 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8007d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d1c:	f383 8811 	msr	BASEPRI, r3
 8007d20:	f3bf 8f6f 	isb	sy
 8007d24:	f3bf 8f4f 	dsb	sy
 8007d28:	61bb      	str	r3, [r7, #24]
}
 8007d2a:	bf00      	nop
 8007d2c:	bf00      	nop
 8007d2e:	e7fd      	b.n	8007d2c <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d30:	f000 faf2 	bl	8008318 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	627b      	str	r3, [r7, #36]	@ 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d38:	f3ef 8211 	mrs	r2, BASEPRI
 8007d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d40:	f383 8811 	msr	BASEPRI, r3
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	617a      	str	r2, [r7, #20]
 8007d4e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d50:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d52:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007d5a:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5e:	2202      	movs	r2, #2
 8007d60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8007d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d68:	1c5a      	adds	r2, r3, #1
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d6c:	64da      	str	r2, [r3, #76]	@ 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007d6e:	7ffb      	ldrb	r3, [r7, #31]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d146      	bne.n	8007e02 <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00b      	beq.n	8007d94 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8007d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	60fb      	str	r3, [r7, #12]
}
 8007d8e:	bf00      	nop
 8007d90:	bf00      	nop
 8007d92:	e7fd      	b.n	8007d90 <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d94:	4b20      	ldr	r3, [pc, #128]	@ (8007e18 <vTaskNotifyGiveFromISR+0x110>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d11c      	bne.n	8007dd6 <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9e:	3304      	adds	r3, #4
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7ff f9d3 	bl	800714c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007daa:	2201      	movs	r2, #1
 8007dac:	409a      	lsls	r2, r3
 8007dae:	4b1b      	ldr	r3, [pc, #108]	@ (8007e1c <vTaskNotifyGiveFromISR+0x114>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	4a19      	ldr	r2, [pc, #100]	@ (8007e1c <vTaskNotifyGiveFromISR+0x114>)
 8007db6:	6013      	str	r3, [r2, #0]
 8007db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4a16      	ldr	r2, [pc, #88]	@ (8007e20 <vTaskNotifyGiveFromISR+0x118>)
 8007dc6:	441a      	add	r2, r3
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dca:	3304      	adds	r3, #4
 8007dcc:	4619      	mov	r1, r3
 8007dce:	4610      	mov	r0, r2
 8007dd0:	f7ff f95f 	bl	8007092 <vListInsertEnd>
 8007dd4:	e005      	b.n	8007de2 <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd8:	3318      	adds	r3, #24
 8007dda:	4619      	mov	r1, r3
 8007ddc:	4811      	ldr	r0, [pc, #68]	@ (8007e24 <vTaskNotifyGiveFromISR+0x11c>)
 8007dde:	f7ff f958 	bl	8007092 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007de6:	4b10      	ldr	r3, [pc, #64]	@ (8007e28 <vTaskNotifyGiveFromISR+0x120>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d908      	bls.n	8007e02 <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d002      	beq.n	8007dfc <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8007e2c <vTaskNotifyGiveFromISR+0x124>)
 8007dfe:	2201      	movs	r2, #1
 8007e00:	601a      	str	r2, [r3, #0]
 8007e02:	6a3b      	ldr	r3, [r7, #32]
 8007e04:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007e0c:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8007e0e:	bf00      	nop
 8007e10:	3728      	adds	r7, #40	@ 0x28
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	20001ed0 	.word	0x20001ed0
 8007e1c:	20001eb0 	.word	0x20001eb0
 8007e20:	20001dac 	.word	0x20001dac
 8007e24:	20001e68 	.word	0x20001e68
 8007e28:	20001da8 	.word	0x20001da8
 8007e2c:	20001ebc 	.word	0x20001ebc

08007e30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e3a:	4b29      	ldr	r3, [pc, #164]	@ (8007ee0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e40:	4b28      	ldr	r3, [pc, #160]	@ (8007ee4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	3304      	adds	r3, #4
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7ff f980 	bl	800714c <uxListRemove>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10b      	bne.n	8007e6a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007e52:	4b24      	ldr	r3, [pc, #144]	@ (8007ee4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e58:	2201      	movs	r2, #1
 8007e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5e:	43da      	mvns	r2, r3
 8007e60:	4b21      	ldr	r3, [pc, #132]	@ (8007ee8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4013      	ands	r3, r2
 8007e66:	4a20      	ldr	r2, [pc, #128]	@ (8007ee8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e68:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e70:	d10a      	bne.n	8007e88 <prvAddCurrentTaskToDelayedList+0x58>
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d007      	beq.n	8007e88 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e78:	4b1a      	ldr	r3, [pc, #104]	@ (8007ee4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	4619      	mov	r1, r3
 8007e80:	481a      	ldr	r0, [pc, #104]	@ (8007eec <prvAddCurrentTaskToDelayedList+0xbc>)
 8007e82:	f7ff f906 	bl	8007092 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e86:	e026      	b.n	8007ed6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e90:	4b14      	ldr	r3, [pc, #80]	@ (8007ee4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68ba      	ldr	r2, [r7, #8]
 8007e96:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d209      	bcs.n	8007eb4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ea0:	4b13      	ldr	r3, [pc, #76]	@ (8007ef0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8007ee4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	3304      	adds	r3, #4
 8007eaa:	4619      	mov	r1, r3
 8007eac:	4610      	mov	r0, r2
 8007eae:	f7ff f914 	bl	80070da <vListInsert>
}
 8007eb2:	e010      	b.n	8007ed6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8007ef4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8007ee4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	f7ff f90a 	bl	80070da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ef8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d202      	bcs.n	8007ed6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007ed0:	4a09      	ldr	r2, [pc, #36]	@ (8007ef8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	6013      	str	r3, [r2, #0]
}
 8007ed6:	bf00      	nop
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	20001eac 	.word	0x20001eac
 8007ee4:	20001da8 	.word	0x20001da8
 8007ee8:	20001eb0 	.word	0x20001eb0
 8007eec:	20001e94 	.word	0x20001e94
 8007ef0:	20001e64 	.word	0x20001e64
 8007ef4:	20001e60 	.word	0x20001e60
 8007ef8:	20001ec8 	.word	0x20001ec8

08007efc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	3b04      	subs	r3, #4
 8007f0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007f14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	3b04      	subs	r3, #4
 8007f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	f023 0201 	bic.w	r2, r3, #1
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	3b04      	subs	r3, #4
 8007f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8007f60 <pxPortInitialiseStack+0x64>)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	3b14      	subs	r3, #20
 8007f36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3b04      	subs	r3, #4
 8007f42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f06f 0202 	mvn.w	r2, #2
 8007f4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	3b20      	subs	r3, #32
 8007f50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f52:	68fb      	ldr	r3, [r7, #12]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3714      	adds	r7, #20
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	08007f65 	.word	0x08007f65

08007f64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f6e:	4b13      	ldr	r3, [pc, #76]	@ (8007fbc <prvTaskExitError+0x58>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f76:	d00b      	beq.n	8007f90 <prvTaskExitError+0x2c>
	__asm volatile
 8007f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f7c:	f383 8811 	msr	BASEPRI, r3
 8007f80:	f3bf 8f6f 	isb	sy
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	60fb      	str	r3, [r7, #12]
}
 8007f8a:	bf00      	nop
 8007f8c:	bf00      	nop
 8007f8e:	e7fd      	b.n	8007f8c <prvTaskExitError+0x28>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	60bb      	str	r3, [r7, #8]
}
 8007fa2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007fa4:	bf00      	nop
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d0fc      	beq.n	8007fa6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007fac:	bf00      	nop
 8007fae:	bf00      	nop
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	2000000c 	.word	0x2000000c

08007fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007fc0:	4b07      	ldr	r3, [pc, #28]	@ (8007fe0 <pxCurrentTCBConst2>)
 8007fc2:	6819      	ldr	r1, [r3, #0]
 8007fc4:	6808      	ldr	r0, [r1, #0]
 8007fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fca:	f380 8809 	msr	PSP, r0
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f04f 0000 	mov.w	r0, #0
 8007fd6:	f380 8811 	msr	BASEPRI, r0
 8007fda:	4770      	bx	lr
 8007fdc:	f3af 8000 	nop.w

08007fe0 <pxCurrentTCBConst2>:
 8007fe0:	20001da8 	.word	0x20001da8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007fe4:	bf00      	nop
 8007fe6:	bf00      	nop

08007fe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007fe8:	4808      	ldr	r0, [pc, #32]	@ (800800c <prvPortStartFirstTask+0x24>)
 8007fea:	6800      	ldr	r0, [r0, #0]
 8007fec:	6800      	ldr	r0, [r0, #0]
 8007fee:	f380 8808 	msr	MSP, r0
 8007ff2:	f04f 0000 	mov.w	r0, #0
 8007ff6:	f380 8814 	msr	CONTROL, r0
 8007ffa:	b662      	cpsie	i
 8007ffc:	b661      	cpsie	f
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	df00      	svc	0
 8008008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800800a:	bf00      	nop
 800800c:	e000ed08 	.word	0xe000ed08

08008010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008016:	4b47      	ldr	r3, [pc, #284]	@ (8008134 <xPortStartScheduler+0x124>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a47      	ldr	r2, [pc, #284]	@ (8008138 <xPortStartScheduler+0x128>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d10b      	bne.n	8008038 <xPortStartScheduler+0x28>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	613b      	str	r3, [r7, #16]
}
 8008032:	bf00      	nop
 8008034:	bf00      	nop
 8008036:	e7fd      	b.n	8008034 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008038:	4b3e      	ldr	r3, [pc, #248]	@ (8008134 <xPortStartScheduler+0x124>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a3f      	ldr	r2, [pc, #252]	@ (800813c <xPortStartScheduler+0x12c>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d10b      	bne.n	800805a <xPortStartScheduler+0x4a>
	__asm volatile
 8008042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008046:	f383 8811 	msr	BASEPRI, r3
 800804a:	f3bf 8f6f 	isb	sy
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	60fb      	str	r3, [r7, #12]
}
 8008054:	bf00      	nop
 8008056:	bf00      	nop
 8008058:	e7fd      	b.n	8008056 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800805a:	4b39      	ldr	r3, [pc, #228]	@ (8008140 <xPortStartScheduler+0x130>)
 800805c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	b2db      	uxtb	r3, r3
 8008064:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	22ff      	movs	r2, #255	@ 0xff
 800806a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	b2db      	uxtb	r3, r3
 8008072:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008074:	78fb      	ldrb	r3, [r7, #3]
 8008076:	b2db      	uxtb	r3, r3
 8008078:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800807c:	b2da      	uxtb	r2, r3
 800807e:	4b31      	ldr	r3, [pc, #196]	@ (8008144 <xPortStartScheduler+0x134>)
 8008080:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008082:	4b31      	ldr	r3, [pc, #196]	@ (8008148 <xPortStartScheduler+0x138>)
 8008084:	2207      	movs	r2, #7
 8008086:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008088:	e009      	b.n	800809e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800808a:	4b2f      	ldr	r3, [pc, #188]	@ (8008148 <xPortStartScheduler+0x138>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3b01      	subs	r3, #1
 8008090:	4a2d      	ldr	r2, [pc, #180]	@ (8008148 <xPortStartScheduler+0x138>)
 8008092:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008094:	78fb      	ldrb	r3, [r7, #3]
 8008096:	b2db      	uxtb	r3, r3
 8008098:	005b      	lsls	r3, r3, #1
 800809a:	b2db      	uxtb	r3, r3
 800809c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800809e:	78fb      	ldrb	r3, [r7, #3]
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080a6:	2b80      	cmp	r3, #128	@ 0x80
 80080a8:	d0ef      	beq.n	800808a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080aa:	4b27      	ldr	r3, [pc, #156]	@ (8008148 <xPortStartScheduler+0x138>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f1c3 0307 	rsb	r3, r3, #7
 80080b2:	2b04      	cmp	r3, #4
 80080b4:	d00b      	beq.n	80080ce <xPortStartScheduler+0xbe>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	60bb      	str	r3, [r7, #8]
}
 80080c8:	bf00      	nop
 80080ca:	bf00      	nop
 80080cc:	e7fd      	b.n	80080ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008148 <xPortStartScheduler+0x138>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	021b      	lsls	r3, r3, #8
 80080d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008148 <xPortStartScheduler+0x138>)
 80080d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80080d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008148 <xPortStartScheduler+0x138>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80080e0:	4a19      	ldr	r2, [pc, #100]	@ (8008148 <xPortStartScheduler+0x138>)
 80080e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80080ec:	4b17      	ldr	r3, [pc, #92]	@ (800814c <xPortStartScheduler+0x13c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a16      	ldr	r2, [pc, #88]	@ (800814c <xPortStartScheduler+0x13c>)
 80080f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80080f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80080f8:	4b14      	ldr	r3, [pc, #80]	@ (800814c <xPortStartScheduler+0x13c>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a13      	ldr	r2, [pc, #76]	@ (800814c <xPortStartScheduler+0x13c>)
 80080fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008102:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008104:	f000 f8da 	bl	80082bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008108:	4b11      	ldr	r3, [pc, #68]	@ (8008150 <xPortStartScheduler+0x140>)
 800810a:	2200      	movs	r2, #0
 800810c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800810e:	f000 f8f9 	bl	8008304 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008112:	4b10      	ldr	r3, [pc, #64]	@ (8008154 <xPortStartScheduler+0x144>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a0f      	ldr	r2, [pc, #60]	@ (8008154 <xPortStartScheduler+0x144>)
 8008118:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800811c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800811e:	f7ff ff63 	bl	8007fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008122:	f7ff fc15 	bl	8007950 <vTaskSwitchContext>
	prvTaskExitError();
 8008126:	f7ff ff1d 	bl	8007f64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3718      	adds	r7, #24
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	e000ed00 	.word	0xe000ed00
 8008138:	410fc271 	.word	0x410fc271
 800813c:	410fc270 	.word	0x410fc270
 8008140:	e000e400 	.word	0xe000e400
 8008144:	20001ed4 	.word	0x20001ed4
 8008148:	20001ed8 	.word	0x20001ed8
 800814c:	e000ed20 	.word	0xe000ed20
 8008150:	2000000c 	.word	0x2000000c
 8008154:	e000ef34 	.word	0xe000ef34

08008158 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	607b      	str	r3, [r7, #4]
}
 8008170:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008172:	4b10      	ldr	r3, [pc, #64]	@ (80081b4 <vPortEnterCritical+0x5c>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	3301      	adds	r3, #1
 8008178:	4a0e      	ldr	r2, [pc, #56]	@ (80081b4 <vPortEnterCritical+0x5c>)
 800817a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800817c:	4b0d      	ldr	r3, [pc, #52]	@ (80081b4 <vPortEnterCritical+0x5c>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d110      	bne.n	80081a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008184:	4b0c      	ldr	r3, [pc, #48]	@ (80081b8 <vPortEnterCritical+0x60>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00b      	beq.n	80081a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	603b      	str	r3, [r7, #0]
}
 80081a0:	bf00      	nop
 80081a2:	bf00      	nop
 80081a4:	e7fd      	b.n	80081a2 <vPortEnterCritical+0x4a>
	}
}
 80081a6:	bf00      	nop
 80081a8:	370c      	adds	r7, #12
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	2000000c 	.word	0x2000000c
 80081b8:	e000ed04 	.word	0xe000ed04

080081bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081c2:	4b12      	ldr	r3, [pc, #72]	@ (800820c <vPortExitCritical+0x50>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10b      	bne.n	80081e2 <vPortExitCritical+0x26>
	__asm volatile
 80081ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	607b      	str	r3, [r7, #4]
}
 80081dc:	bf00      	nop
 80081de:	bf00      	nop
 80081e0:	e7fd      	b.n	80081de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80081e2:	4b0a      	ldr	r3, [pc, #40]	@ (800820c <vPortExitCritical+0x50>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	4a08      	ldr	r2, [pc, #32]	@ (800820c <vPortExitCritical+0x50>)
 80081ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80081ec:	4b07      	ldr	r3, [pc, #28]	@ (800820c <vPortExitCritical+0x50>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d105      	bne.n	8008200 <vPortExitCritical+0x44>
 80081f4:	2300      	movs	r3, #0
 80081f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	f383 8811 	msr	BASEPRI, r3
}
 80081fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr
 800820c:	2000000c 	.word	0x2000000c

08008210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008210:	f3ef 8009 	mrs	r0, PSP
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	4b15      	ldr	r3, [pc, #84]	@ (8008270 <pxCurrentTCBConst>)
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	f01e 0f10 	tst.w	lr, #16
 8008220:	bf08      	it	eq
 8008222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800822a:	6010      	str	r0, [r2, #0]
 800822c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008230:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008234:	f380 8811 	msr	BASEPRI, r0
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f7ff fb86 	bl	8007950 <vTaskSwitchContext>
 8008244:	f04f 0000 	mov.w	r0, #0
 8008248:	f380 8811 	msr	BASEPRI, r0
 800824c:	bc09      	pop	{r0, r3}
 800824e:	6819      	ldr	r1, [r3, #0]
 8008250:	6808      	ldr	r0, [r1, #0]
 8008252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008256:	f01e 0f10 	tst.w	lr, #16
 800825a:	bf08      	it	eq
 800825c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008260:	f380 8809 	msr	PSP, r0
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	f3af 8000 	nop.w

08008270 <pxCurrentTCBConst>:
 8008270:	20001da8 	.word	0x20001da8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008274:	bf00      	nop
 8008276:	bf00      	nop

08008278 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	607b      	str	r3, [r7, #4]
}
 8008290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008292:	f7ff faa3 	bl	80077dc <xTaskIncrementTick>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800829c:	4b06      	ldr	r3, [pc, #24]	@ (80082b8 <xPortSysTickHandler+0x40>)
 800829e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	2300      	movs	r3, #0
 80082a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	f383 8811 	msr	BASEPRI, r3
}
 80082ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80082b0:	bf00      	nop
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	e000ed04 	.word	0xe000ed04

080082bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082bc:	b480      	push	{r7}
 80082be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80082c0:	4b0b      	ldr	r3, [pc, #44]	@ (80082f0 <vPortSetupTimerInterrupt+0x34>)
 80082c2:	2200      	movs	r2, #0
 80082c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80082c6:	4b0b      	ldr	r3, [pc, #44]	@ (80082f4 <vPortSetupTimerInterrupt+0x38>)
 80082c8:	2200      	movs	r2, #0
 80082ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80082cc:	4b0a      	ldr	r3, [pc, #40]	@ (80082f8 <vPortSetupTimerInterrupt+0x3c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a0a      	ldr	r2, [pc, #40]	@ (80082fc <vPortSetupTimerInterrupt+0x40>)
 80082d2:	fba2 2303 	umull	r2, r3, r2, r3
 80082d6:	099b      	lsrs	r3, r3, #6
 80082d8:	4a09      	ldr	r2, [pc, #36]	@ (8008300 <vPortSetupTimerInterrupt+0x44>)
 80082da:	3b01      	subs	r3, #1
 80082dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80082de:	4b04      	ldr	r3, [pc, #16]	@ (80082f0 <vPortSetupTimerInterrupt+0x34>)
 80082e0:	2207      	movs	r2, #7
 80082e2:	601a      	str	r2, [r3, #0]
}
 80082e4:	bf00      	nop
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	e000e010 	.word	0xe000e010
 80082f4:	e000e018 	.word	0xe000e018
 80082f8:	20000000 	.word	0x20000000
 80082fc:	10624dd3 	.word	0x10624dd3
 8008300:	e000e014 	.word	0xe000e014

08008304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008304:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008314 <vPortEnableVFP+0x10>
 8008308:	6801      	ldr	r1, [r0, #0]
 800830a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800830e:	6001      	str	r1, [r0, #0]
 8008310:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008312:	bf00      	nop
 8008314:	e000ed88 	.word	0xe000ed88

08008318 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800831e:	f3ef 8305 	mrs	r3, IPSR
 8008322:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b0f      	cmp	r3, #15
 8008328:	d915      	bls.n	8008356 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800832a:	4a18      	ldr	r2, [pc, #96]	@ (800838c <vPortValidateInterruptPriority+0x74>)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	4413      	add	r3, r2
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008334:	4b16      	ldr	r3, [pc, #88]	@ (8008390 <vPortValidateInterruptPriority+0x78>)
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	7afa      	ldrb	r2, [r7, #11]
 800833a:	429a      	cmp	r2, r3
 800833c:	d20b      	bcs.n	8008356 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	607b      	str	r3, [r7, #4]
}
 8008350:	bf00      	nop
 8008352:	bf00      	nop
 8008354:	e7fd      	b.n	8008352 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008356:	4b0f      	ldr	r3, [pc, #60]	@ (8008394 <vPortValidateInterruptPriority+0x7c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800835e:	4b0e      	ldr	r3, [pc, #56]	@ (8008398 <vPortValidateInterruptPriority+0x80>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	429a      	cmp	r2, r3
 8008364:	d90b      	bls.n	800837e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	603b      	str	r3, [r7, #0]
}
 8008378:	bf00      	nop
 800837a:	bf00      	nop
 800837c:	e7fd      	b.n	800837a <vPortValidateInterruptPriority+0x62>
	}
 800837e:	bf00      	nop
 8008380:	3714      	adds	r7, #20
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	e000e3f0 	.word	0xe000e3f0
 8008390:	20001ed4 	.word	0x20001ed4
 8008394:	e000ed0c 	.word	0xe000ed0c
 8008398:	20001ed8 	.word	0x20001ed8

0800839c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b08a      	sub	sp, #40	@ 0x28
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083a4:	2300      	movs	r3, #0
 80083a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80083a8:	f7ff f96c 	bl	8007684 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083ac:	4b5c      	ldr	r3, [pc, #368]	@ (8008520 <pvPortMalloc+0x184>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d101      	bne.n	80083b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80083b4:	f000 f924 	bl	8008600 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083b8:	4b5a      	ldr	r3, [pc, #360]	@ (8008524 <pvPortMalloc+0x188>)
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4013      	ands	r3, r2
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f040 8095 	bne.w	80084f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d01e      	beq.n	800840a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80083cc:	2208      	movs	r2, #8
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4413      	add	r3, r2
 80083d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f003 0307 	and.w	r3, r3, #7
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d015      	beq.n	800840a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f023 0307 	bic.w	r3, r3, #7
 80083e4:	3308      	adds	r3, #8
 80083e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f003 0307 	and.w	r3, r3, #7
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00b      	beq.n	800840a <pvPortMalloc+0x6e>
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	617b      	str	r3, [r7, #20]
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop
 8008408:	e7fd      	b.n	8008406 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d06f      	beq.n	80084f0 <pvPortMalloc+0x154>
 8008410:	4b45      	ldr	r3, [pc, #276]	@ (8008528 <pvPortMalloc+0x18c>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	429a      	cmp	r2, r3
 8008418:	d86a      	bhi.n	80084f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800841a:	4b44      	ldr	r3, [pc, #272]	@ (800852c <pvPortMalloc+0x190>)
 800841c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800841e:	4b43      	ldr	r3, [pc, #268]	@ (800852c <pvPortMalloc+0x190>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008424:	e004      	b.n	8008430 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008428:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800842a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	429a      	cmp	r2, r3
 8008438:	d903      	bls.n	8008442 <pvPortMalloc+0xa6>
 800843a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1f1      	bne.n	8008426 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008442:	4b37      	ldr	r3, [pc, #220]	@ (8008520 <pvPortMalloc+0x184>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008448:	429a      	cmp	r2, r3
 800844a:	d051      	beq.n	80084f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2208      	movs	r2, #8
 8008452:	4413      	add	r3, r2
 8008454:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800845e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008460:	685a      	ldr	r2, [r3, #4]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	1ad2      	subs	r2, r2, r3
 8008466:	2308      	movs	r3, #8
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	429a      	cmp	r2, r3
 800846c:	d920      	bls.n	80084b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800846e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4413      	add	r3, r2
 8008474:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	f003 0307 	and.w	r3, r3, #7
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00b      	beq.n	8008498 <pvPortMalloc+0xfc>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	613b      	str	r3, [r7, #16]
}
 8008492:	bf00      	nop
 8008494:	bf00      	nop
 8008496:	e7fd      	b.n	8008494 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849a:	685a      	ldr	r2, [r3, #4]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	1ad2      	subs	r2, r2, r3
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80084a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084aa:	69b8      	ldr	r0, [r7, #24]
 80084ac:	f000 f90a 	bl	80086c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084b0:	4b1d      	ldr	r3, [pc, #116]	@ (8008528 <pvPortMalloc+0x18c>)
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	4a1b      	ldr	r2, [pc, #108]	@ (8008528 <pvPortMalloc+0x18c>)
 80084bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084be:	4b1a      	ldr	r3, [pc, #104]	@ (8008528 <pvPortMalloc+0x18c>)
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	4b1b      	ldr	r3, [pc, #108]	@ (8008530 <pvPortMalloc+0x194>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d203      	bcs.n	80084d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80084ca:	4b17      	ldr	r3, [pc, #92]	@ (8008528 <pvPortMalloc+0x18c>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a18      	ldr	r2, [pc, #96]	@ (8008530 <pvPortMalloc+0x194>)
 80084d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	4b13      	ldr	r3, [pc, #76]	@ (8008524 <pvPortMalloc+0x188>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	431a      	orrs	r2, r3
 80084dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80084e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e2:	2200      	movs	r2, #0
 80084e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80084e6:	4b13      	ldr	r3, [pc, #76]	@ (8008534 <pvPortMalloc+0x198>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	3301      	adds	r3, #1
 80084ec:	4a11      	ldr	r2, [pc, #68]	@ (8008534 <pvPortMalloc+0x198>)
 80084ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80084f0:	f7ff f8d6 	bl	80076a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	f003 0307 	and.w	r3, r3, #7
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00b      	beq.n	8008516 <pvPortMalloc+0x17a>
	__asm volatile
 80084fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	60fb      	str	r3, [r7, #12]
}
 8008510:	bf00      	nop
 8008512:	bf00      	nop
 8008514:	e7fd      	b.n	8008512 <pvPortMalloc+0x176>
	return pvReturn;
 8008516:	69fb      	ldr	r3, [r7, #28]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3728      	adds	r7, #40	@ 0x28
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	200045f4 	.word	0x200045f4
 8008524:	20004608 	.word	0x20004608
 8008528:	200045f8 	.word	0x200045f8
 800852c:	200045ec 	.word	0x200045ec
 8008530:	200045fc 	.word	0x200045fc
 8008534:	20004600 	.word	0x20004600

08008538 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d04f      	beq.n	80085ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800854a:	2308      	movs	r3, #8
 800854c:	425b      	negs	r3, r3
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	4413      	add	r3, r2
 8008552:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	4b25      	ldr	r3, [pc, #148]	@ (80085f4 <vPortFree+0xbc>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4013      	ands	r3, r2
 8008562:	2b00      	cmp	r3, #0
 8008564:	d10b      	bne.n	800857e <vPortFree+0x46>
	__asm volatile
 8008566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856a:	f383 8811 	msr	BASEPRI, r3
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	60fb      	str	r3, [r7, #12]
}
 8008578:	bf00      	nop
 800857a:	bf00      	nop
 800857c:	e7fd      	b.n	800857a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00b      	beq.n	800859e <vPortFree+0x66>
	__asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858a:	f383 8811 	msr	BASEPRI, r3
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f3bf 8f4f 	dsb	sy
 8008596:	60bb      	str	r3, [r7, #8]
}
 8008598:	bf00      	nop
 800859a:	bf00      	nop
 800859c:	e7fd      	b.n	800859a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	685a      	ldr	r2, [r3, #4]
 80085a2:	4b14      	ldr	r3, [pc, #80]	@ (80085f4 <vPortFree+0xbc>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4013      	ands	r3, r2
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d01e      	beq.n	80085ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d11a      	bne.n	80085ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	685a      	ldr	r2, [r3, #4]
 80085b8:	4b0e      	ldr	r3, [pc, #56]	@ (80085f4 <vPortFree+0xbc>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	43db      	mvns	r3, r3
 80085be:	401a      	ands	r2, r3
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085c4:	f7ff f85e 	bl	8007684 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	4b0a      	ldr	r3, [pc, #40]	@ (80085f8 <vPortFree+0xc0>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4413      	add	r3, r2
 80085d2:	4a09      	ldr	r2, [pc, #36]	@ (80085f8 <vPortFree+0xc0>)
 80085d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80085d6:	6938      	ldr	r0, [r7, #16]
 80085d8:	f000 f874 	bl	80086c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80085dc:	4b07      	ldr	r3, [pc, #28]	@ (80085fc <vPortFree+0xc4>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3301      	adds	r3, #1
 80085e2:	4a06      	ldr	r2, [pc, #24]	@ (80085fc <vPortFree+0xc4>)
 80085e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80085e6:	f7ff f85b 	bl	80076a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80085ea:	bf00      	nop
 80085ec:	3718      	adds	r7, #24
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	20004608 	.word	0x20004608
 80085f8:	200045f8 	.word	0x200045f8
 80085fc:	20004604 	.word	0x20004604

08008600 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008606:	f242 7310 	movw	r3, #10000	@ 0x2710
 800860a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800860c:	4b27      	ldr	r3, [pc, #156]	@ (80086ac <prvHeapInit+0xac>)
 800860e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f003 0307 	and.w	r3, r3, #7
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00c      	beq.n	8008634 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	3307      	adds	r3, #7
 800861e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f023 0307 	bic.w	r3, r3, #7
 8008626:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	4a1f      	ldr	r2, [pc, #124]	@ (80086ac <prvHeapInit+0xac>)
 8008630:	4413      	add	r3, r2
 8008632:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008638:	4a1d      	ldr	r2, [pc, #116]	@ (80086b0 <prvHeapInit+0xb0>)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800863e:	4b1c      	ldr	r3, [pc, #112]	@ (80086b0 <prvHeapInit+0xb0>)
 8008640:	2200      	movs	r2, #0
 8008642:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	4413      	add	r3, r2
 800864a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800864c:	2208      	movs	r2, #8
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	1a9b      	subs	r3, r3, r2
 8008652:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f023 0307 	bic.w	r3, r3, #7
 800865a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	4a15      	ldr	r2, [pc, #84]	@ (80086b4 <prvHeapInit+0xb4>)
 8008660:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008662:	4b14      	ldr	r3, [pc, #80]	@ (80086b4 <prvHeapInit+0xb4>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2200      	movs	r2, #0
 8008668:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800866a:	4b12      	ldr	r3, [pc, #72]	@ (80086b4 <prvHeapInit+0xb4>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2200      	movs	r2, #0
 8008670:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	1ad2      	subs	r2, r2, r3
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008680:	4b0c      	ldr	r3, [pc, #48]	@ (80086b4 <prvHeapInit+0xb4>)
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	4a0a      	ldr	r2, [pc, #40]	@ (80086b8 <prvHeapInit+0xb8>)
 800868e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	4a09      	ldr	r2, [pc, #36]	@ (80086bc <prvHeapInit+0xbc>)
 8008696:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008698:	4b09      	ldr	r3, [pc, #36]	@ (80086c0 <prvHeapInit+0xc0>)
 800869a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800869e:	601a      	str	r2, [r3, #0]
}
 80086a0:	bf00      	nop
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	20001edc 	.word	0x20001edc
 80086b0:	200045ec 	.word	0x200045ec
 80086b4:	200045f4 	.word	0x200045f4
 80086b8:	200045fc 	.word	0x200045fc
 80086bc:	200045f8 	.word	0x200045f8
 80086c0:	20004608 	.word	0x20004608

080086c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086cc:	4b28      	ldr	r3, [pc, #160]	@ (8008770 <prvInsertBlockIntoFreeList+0xac>)
 80086ce:	60fb      	str	r3, [r7, #12]
 80086d0:	e002      	b.n	80086d8 <prvInsertBlockIntoFreeList+0x14>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	60fb      	str	r3, [r7, #12]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d8f7      	bhi.n	80086d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	4413      	add	r3, r2
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d108      	bne.n	8008706 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	685a      	ldr	r2, [r3, #4]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	441a      	add	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	441a      	add	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	429a      	cmp	r2, r3
 8008718:	d118      	bne.n	800874c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	4b15      	ldr	r3, [pc, #84]	@ (8008774 <prvInsertBlockIntoFreeList+0xb0>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	429a      	cmp	r2, r3
 8008724:	d00d      	beq.n	8008742 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685a      	ldr	r2, [r3, #4]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	441a      	add	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	601a      	str	r2, [r3, #0]
 8008740:	e008      	b.n	8008754 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008742:	4b0c      	ldr	r3, [pc, #48]	@ (8008774 <prvInsertBlockIntoFreeList+0xb0>)
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	601a      	str	r2, [r3, #0]
 800874a:	e003      	b.n	8008754 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	429a      	cmp	r2, r3
 800875a:	d002      	beq.n	8008762 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008762:	bf00      	nop
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	200045ec 	.word	0x200045ec
 8008774:	200045f4 	.word	0x200045f4

08008778 <SPI_Write>:


TaskHandle_t Bump_task = NULL;


void SPI_Write(uint8_t reg, uint8_t value) {
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	4603      	mov	r3, r0
 8008780:	460a      	mov	r2, r1
 8008782:	71fb      	strb	r3, [r7, #7]
 8008784:	4613      	mov	r3, r2
 8008786:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg | 0x40;
 8008788:	79fb      	ldrb	r3, [r7, #7]
 800878a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800878e:	b2db      	uxtb	r3, r3
 8008790:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8008792:	79bb      	ldrb	r3, [r7, #6]
 8008794:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_RESET);
 8008796:	2200      	movs	r2, #0
 8008798:	2120      	movs	r1, #32
 800879a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800879e:	f7fa fbab 	bl	8002ef8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, data, 2, HAL_MAX_DELAY);
 80087a2:	f107 010c 	add.w	r1, r7, #12
 80087a6:	f04f 33ff 	mov.w	r3, #4294967295
 80087aa:	2202      	movs	r2, #2
 80087ac:	4806      	ldr	r0, [pc, #24]	@ (80087c8 <SPI_Write+0x50>)
 80087ae:	f7fb fc66 	bl	800407e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_SET);
 80087b2:	2201      	movs	r2, #1
 80087b4:	2120      	movs	r1, #32
 80087b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80087ba:	f7fa fb9d 	bl	8002ef8 <HAL_GPIO_WritePin>
}
 80087be:	bf00      	nop
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	20001a84 	.word	0x20001a84

080087cc <SPI_Read>:

uint8_t SPI_Read(uint8_t reg) {
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	4603      	mov	r3, r0
 80087d4:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_data = reg | 0x80;
 80087d6:	79fb      	ldrb	r3, [r7, #7]
 80087d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	73fb      	strb	r3, [r7, #15]
	uint8_t rx_data = 0;
 80087e0:	2300      	movs	r3, #0
 80087e2:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_RESET);
 80087e4:	2200      	movs	r2, #0
 80087e6:	2120      	movs	r1, #32
 80087e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80087ec:	f7fa fb84 	bl	8002ef8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &tx_data, 1, HAL_MAX_DELAY);
 80087f0:	f107 010f 	add.w	r1, r7, #15
 80087f4:	f04f 33ff 	mov.w	r3, #4294967295
 80087f8:	2201      	movs	r2, #1
 80087fa:	480b      	ldr	r0, [pc, #44]	@ (8008828 <SPI_Read+0x5c>)
 80087fc:	f7fb fc3f 	bl	800407e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &rx_data, 1, HAL_MAX_DELAY);
 8008800:	f107 010e 	add.w	r1, r7, #14
 8008804:	f04f 33ff 	mov.w	r3, #4294967295
 8008808:	2201      	movs	r2, #1
 800880a:	4807      	ldr	r0, [pc, #28]	@ (8008828 <SPI_Read+0x5c>)
 800880c:	f7fb fdac 	bl	8004368 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_SET);
 8008810:	2201      	movs	r2, #1
 8008812:	2120      	movs	r1, #32
 8008814:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008818:	f7fa fb6e 	bl	8002ef8 <HAL_GPIO_WritePin>

	return rx_data;
 800881c:	7bbb      	ldrb	r3, [r7, #14]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	20001a84 	.word	0x20001a84

0800882c <ADXL343_Init>:
	accel_data[2] = (float)raw_accel[2]; // Accélération Z en g

	return HAL_OK;
}

void ADXL343_Init(void) {
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
	uint8_t devid = SPI_Read(ADXL343_REG_DEVID);  // Lire le registre DEVID (0x00)
 8008832:	2000      	movs	r0, #0
 8008834:	f7ff ffca 	bl	80087cc <SPI_Read>
 8008838:	4603      	mov	r3, r0
 800883a:	73fb      	strb	r3, [r7, #15]

	if (devid == 0xE5) {
 800883c:	7bfb      	ldrb	r3, [r7, #15]
 800883e:	2be5      	cmp	r3, #229	@ 0xe5
 8008840:	d13f      	bne.n	80088c2 <ADXL343_Init+0x96>
		// Le composant est détecté, procéder à l'initialisation

		SPI_Write(ADXL343_REG_POWER_CTL, 0x00);  // Appareil en standby
 8008842:	2100      	movs	r1, #0
 8008844:	202d      	movs	r0, #45	@ 0x2d
 8008846:	f7ff ff97 	bl	8008778 <SPI_Write>
		SPI_Write(ADXL343_REG_DATA_FORMAT, 0x00);  // DATA_FORMAT : FULL_RES = 1, RANGE = ±2g
 800884a:	2100      	movs	r1, #0
 800884c:	2031      	movs	r0, #49	@ 0x31
 800884e:	f7ff ff93 	bl	8008778 <SPI_Write>

		//Configuration single tap
		SPI_Write(ADXL343_REG_THRESH_TAP, 50);	// Config seuil choc
 8008852:	2132      	movs	r1, #50	@ 0x32
 8008854:	201d      	movs	r0, #29
 8008856:	f7ff ff8f 	bl	8008778 <SPI_Write>
		SPI_Write(ADXL343_REG_DUR, 15);	// Config durée choc
 800885a:	210f      	movs	r1, #15
 800885c:	2021      	movs	r0, #33	@ 0x21
 800885e:	f7ff ff8b 	bl	8008778 <SPI_Write>
		SPI_Write(ADXL343_REG_LATENT, 0xC8);	// Config latence choc
 8008862:	21c8      	movs	r1, #200	@ 0xc8
 8008864:	2022      	movs	r0, #34	@ 0x22
 8008866:	f7ff ff87 	bl	8008778 <SPI_Write>

		SPI_Write(ADXL343_REG_TAP_AXES, 0x07);	// Activer axe X Y
 800886a:	2107      	movs	r1, #7
 800886c:	202a      	movs	r0, #42	@ 0x2a
 800886e:	f7ff ff83 	bl	8008778 <SPI_Write>
		SPI_Write(ADXL343_REG_BW_RATE, 0x0F);  // Configurer la bande passante
 8008872:	210f      	movs	r1, #15
 8008874:	202c      	movs	r0, #44	@ 0x2c
 8008876:	f7ff ff7f 	bl	8008778 <SPI_Write>

		SPI_Write(ADXL343_REG_INT_MAP, 0x00);	// Configurer pin interruption
 800887a:	2100      	movs	r1, #0
 800887c:	202f      	movs	r0, #47	@ 0x2f
 800887e:	f7ff ff7b 	bl	8008778 <SPI_Write>
		SPI_Write(ADXL343_REG_INT_ENABLE, 0x40);  // Activer interruption
 8008882:	2140      	movs	r1, #64	@ 0x40
 8008884:	202e      	movs	r0, #46	@ 0x2e
 8008886:	f7ff ff77 	bl	8008778 <SPI_Write>
		SPI_Write(ADXL343_REG_POWER_CTL, 0x08);
 800888a:	2108      	movs	r1, #8
 800888c:	202d      	movs	r0, #45	@ 0x2d
 800888e:	f7ff ff73 	bl	8008778 <SPI_Write>
		//Read_Acceleration(float *accel_data);    // Lire les données pour effacer l'interruption

		char *msg = "ADXL343 detecte et initialise !\r\n";
 8008892:	4b14      	ldr	r3, [pc, #80]	@ (80088e4 <ADXL343_Init+0xb8>)
 8008894:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7f7 fd12 	bl	80002c0 <strlen>
 800889c:	4603      	mov	r3, r0
 800889e:	b29a      	uxth	r2, r3
 80088a0:	f04f 33ff 	mov.w	r3, #4294967295
 80088a4:	6879      	ldr	r1, [r7, #4]
 80088a6:	4810      	ldr	r0, [pc, #64]	@ (80088e8 <ADXL343_Init+0xbc>)
 80088a8:	f7fd fa9c 	bl	8005de4 <HAL_UART_Transmit>
		uint8_t check = SPI_Read(ADXL343_REG_INT_SOURCE);
 80088ac:	2030      	movs	r0, #48	@ 0x30
 80088ae:	f7ff ff8d 	bl	80087cc <SPI_Read>
 80088b2:	4603      	mov	r3, r0
 80088b4:	70fb      	strb	r3, [r7, #3]
		printf("%x\r\n", check);
 80088b6:	78fb      	ldrb	r3, [r7, #3]
 80088b8:	4619      	mov	r1, r3
 80088ba:	480c      	ldr	r0, [pc, #48]	@ (80088ec <ADXL343_Init+0xc0>)
 80088bc:	f001 f872 	bl	80099a4 <iprintf>
	} else {
		char *error_msg = "Erreur : ADXL343 non detecte !\r\n";
		HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
	}
}
 80088c0:	e00c      	b.n	80088dc <ADXL343_Init+0xb0>
		char *error_msg = "Erreur : ADXL343 non detecte !\r\n";
 80088c2:	4b0b      	ldr	r3, [pc, #44]	@ (80088f0 <ADXL343_Init+0xc4>)
 80088c4:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 80088c6:	68b8      	ldr	r0, [r7, #8]
 80088c8:	f7f7 fcfa 	bl	80002c0 <strlen>
 80088cc:	4603      	mov	r3, r0
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	f04f 33ff 	mov.w	r3, #4294967295
 80088d4:	68b9      	ldr	r1, [r7, #8]
 80088d6:	4804      	ldr	r0, [pc, #16]	@ (80088e8 <ADXL343_Init+0xbc>)
 80088d8:	f7fd fa84 	bl	8005de4 <HAL_UART_Transmit>
}
 80088dc:	bf00      	nop
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	0800d438 	.word	0x0800d438
 80088e8:	20001c1c 	.word	0x20001c1c
 80088ec:	0800d45c 	.word	0x0800d45c
 80088f0:	0800d464 	.word	0x0800d464

080088f4 <LIDAR_Init>:
extern uint16_t frame_start, frame_end;
/*
 * @brief Initialization of the lidar
 * @param
 */
void LIDAR_Init(LIDAR_HandleTypeDef_t * hlidar){
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
	hlidar->huart = &huart3;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a04      	ldr	r2, [pc, #16]	@ (8008910 <LIDAR_Init+0x1c>)
 8008900:	601a      	str	r2, [r3, #0]
	/*
	HAL_GPIO_WritePin(GPIOA, DEV_EN_LIDAR_Pin, GPIO_PIN_SET);
	// Enable M_EN lidar
	HAL_GPIO_WritePin(M_EN_LIDAR_GPIO_Port, M_EN_LIDAR_Pin, GPIO_PIN_SET);*/

}
 8008902:	bf00      	nop
 8008904:	370c      	adds	r7, #12
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	20001cb0 	.word	0x20001cb0

08008914 <LIDAR_Start>:

/*
 * @brief
 * @param
 */
HAL_StatusTypeDef LIDAR_Start(LIDAR_HandleTypeDef_t * hlidar){
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
	uint8_t lidar_command[2] = {START_CMD_LIDAR, SCAN_CMD_LIDAR};
 800891c:	f246 03a5 	movw	r3, #24741	@ 0x60a5
 8008920:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_UART_Transmit(hlidar->huart, lidar_command, 2, 2000);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6818      	ldr	r0, [r3, #0]
 8008926:	f107 010c 	add.w	r1, r7, #12
 800892a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800892e:	2202      	movs	r2, #2
 8008930:	f7fd fa58 	bl	8005de4 <HAL_UART_Transmit>
 8008934:	4603      	mov	r3, r0
 8008936:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK){
 8008938:	7bfb      	ldrb	r3, [r7, #15]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10a      	bne.n	8008954 <LIDAR_Start+0x40>
		HAL_UART_Receive_DMA(hlidar->huart, hlidar->data_buff, DATA_BUFF_SIZE_LIDAR);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6818      	ldr	r0, [r3, #0]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	3329      	adds	r3, #41	@ 0x29
 8008946:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800894a:	4619      	mov	r1, r3
 800894c:	f7fd fad8 	bl	8005f00 <HAL_UART_Receive_DMA>
		return status;
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	e000      	b.n	8008956 <LIDAR_Start+0x42>
	}
	else{
		return status;
 8008954:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
	...

08008960 <Motor_Forward_R>:
#define FWD_GPIO_PORT_L GPIOA      // Port pour FWD_L
#define REV_GPIO_PORT_L GPIOA      // Port pour REV_L
#define UART_RX_BUFFER_SIZE 1
#define UART_TX_BUFFER_SIZE 64

void Motor_Forward_R(int percentage) {
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
    // Limiter le pourcentage entre 0 et 100
    if (percentage > 100) percentage = 100;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2b64      	cmp	r3, #100	@ 0x64
 800896c:	dd01      	ble.n	8008972 <Motor_Forward_R+0x12>
 800896e:	2364      	movs	r3, #100	@ 0x64
 8008970:	607b      	str	r3, [r7, #4]
    if (percentage < 0) percentage = 0;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	da01      	bge.n	800897c <Motor_Forward_R+0x1c>
 8008978:	2300      	movs	r3, #0
 800897a:	607b      	str	r3, [r7, #4]

    // Mettre à jour les GPIO et PWM pour avancer (moteur droit)
    HAL_GPIO_WritePin(REV_GPIO_PORT_R, REV_GPIO_PIN_R, GPIO_PIN_RESET);
 800897c:	2200      	movs	r2, #0
 800897e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008982:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008986:	f7fa fab7 	bl	8002ef8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FWD_GPIO_PORT_R, FWD_GPIO_PIN_R, GPIO_PIN_SET);
 800898a:	2201      	movs	r2, #1
 800898c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008990:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008994:	f7fa fab0 	bl	8002ef8 <HAL_GPIO_WritePin>
    TIM1->CCR1 = 0;
 8008998:	4b09      	ldr	r3, [pc, #36]	@ (80089c0 <Motor_Forward_R+0x60>)
 800899a:	2200      	movs	r2, #0
 800899c:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 = (percentage * PWM_MAX_DUTY_CYCLE) / 100;
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	4613      	mov	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4413      	add	r3, r2
 80089a6:	00db      	lsls	r3, r3, #3
 80089a8:	4a06      	ldr	r2, [pc, #24]	@ (80089c4 <Motor_Forward_R+0x64>)
 80089aa:	fb82 1203 	smull	r1, r2, r2, r3
 80089ae:	1152      	asrs	r2, r2, #5
 80089b0:	17db      	asrs	r3, r3, #31
 80089b2:	1ad2      	subs	r2, r2, r3
 80089b4:	4b02      	ldr	r3, [pc, #8]	@ (80089c0 <Motor_Forward_R+0x60>)
 80089b6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80089b8:	bf00      	nop
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	40012c00 	.word	0x40012c00
 80089c4:	51eb851f 	.word	0x51eb851f

080089c8 <Motor_Reverse_R>:

void Motor_Reverse_R(int percentage) {
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
    // Limiter le pourcentage entre 0 et 100
    if (percentage > 100) percentage = 100;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2b64      	cmp	r3, #100	@ 0x64
 80089d4:	dd01      	ble.n	80089da <Motor_Reverse_R+0x12>
 80089d6:	2364      	movs	r3, #100	@ 0x64
 80089d8:	607b      	str	r3, [r7, #4]
    if (percentage < 0) percentage = 0;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	da01      	bge.n	80089e4 <Motor_Reverse_R+0x1c>
 80089e0:	2300      	movs	r3, #0
 80089e2:	607b      	str	r3, [r7, #4]

    // Mettre à jour les GPIO et PWM pour reculer (moteur droit)
    HAL_GPIO_WritePin(FWD_GPIO_PORT_R, FWD_GPIO_PIN_R, GPIO_PIN_RESET);
 80089e4:	2200      	movs	r2, #0
 80089e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80089ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80089ee:	f7fa fa83 	bl	8002ef8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(REV_GPIO_PORT_R, REV_GPIO_PIN_R, GPIO_PIN_SET);
 80089f2:	2201      	movs	r2, #1
 80089f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80089f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80089fc:	f7fa fa7c 	bl	8002ef8 <HAL_GPIO_WritePin>
    TIM1->CCR1 = (percentage * PWM_MAX_DUTY_CYCLE) / 100;
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	4613      	mov	r3, r2
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	4413      	add	r3, r2
 8008a08:	00db      	lsls	r3, r3, #3
 8008a0a:	4a07      	ldr	r2, [pc, #28]	@ (8008a28 <Motor_Reverse_R+0x60>)
 8008a0c:	fb82 1203 	smull	r1, r2, r2, r3
 8008a10:	1152      	asrs	r2, r2, #5
 8008a12:	17db      	asrs	r3, r3, #31
 8008a14:	1ad2      	subs	r2, r2, r3
 8008a16:	4b05      	ldr	r3, [pc, #20]	@ (8008a2c <Motor_Reverse_R+0x64>)
 8008a18:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 = 0;
 8008a1a:	4b04      	ldr	r3, [pc, #16]	@ (8008a2c <Motor_Reverse_R+0x64>)
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8008a20:	bf00      	nop
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	51eb851f 	.word	0x51eb851f
 8008a2c:	40012c00 	.word	0x40012c00

08008a30 <Motor_Forward_L>:

void Motor_Forward_L(int percentage) {
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
    // Limiter le pourcentage entre 0 et 100
    if (percentage > 100) percentage = 100;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2b64      	cmp	r3, #100	@ 0x64
 8008a3c:	dd01      	ble.n	8008a42 <Motor_Forward_L+0x12>
 8008a3e:	2364      	movs	r3, #100	@ 0x64
 8008a40:	607b      	str	r3, [r7, #4]
    if (percentage < 0) percentage = 0;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	da01      	bge.n	8008a4c <Motor_Forward_L+0x1c>
 8008a48:	2300      	movs	r3, #0
 8008a4a:	607b      	str	r3, [r7, #4]

    // Mettre à jour les GPIO et PWM pour avancer (moteur gauche)
    HAL_GPIO_WritePin(REV_GPIO_PORT_L, REV_GPIO_PIN_L, GPIO_PIN_RESET);
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	2102      	movs	r1, #2
 8008a50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008a54:	f7fa fa50 	bl	8002ef8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FWD_GPIO_PORT_L, FWD_GPIO_PIN_L, GPIO_PIN_SET);
 8008a58:	2201      	movs	r2, #1
 8008a5a:	2101      	movs	r1, #1
 8008a5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008a60:	f7fa fa4a 	bl	8002ef8 <HAL_GPIO_WritePin>
    TIM2->CCR1 = (percentage * PWM_MAX_DUTY_CYCLE) / 100;
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	4613      	mov	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	00db      	lsls	r3, r3, #3
 8008a6e:	4a08      	ldr	r2, [pc, #32]	@ (8008a90 <Motor_Forward_L+0x60>)
 8008a70:	fb82 1203 	smull	r1, r2, r2, r3
 8008a74:	1152      	asrs	r2, r2, #5
 8008a76:	17db      	asrs	r3, r3, #31
 8008a78:	1ad2      	subs	r2, r2, r3
 8008a7a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008a7e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = 0;
 8008a80:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008a84:	2200      	movs	r2, #0
 8008a86:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8008a88:	bf00      	nop
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	51eb851f 	.word	0x51eb851f

08008a94 <Motor_Reverse_L>:

void Motor_Reverse_L(int percentage) {
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
    // Limiter le pourcentage entre 0 et 100
    if (percentage > 100) percentage = 100;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b64      	cmp	r3, #100	@ 0x64
 8008aa0:	dd01      	ble.n	8008aa6 <Motor_Reverse_L+0x12>
 8008aa2:	2364      	movs	r3, #100	@ 0x64
 8008aa4:	607b      	str	r3, [r7, #4]
    if (percentage < 0) percentage = 0;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	da01      	bge.n	8008ab0 <Motor_Reverse_L+0x1c>
 8008aac:	2300      	movs	r3, #0
 8008aae:	607b      	str	r3, [r7, #4]

    // Mettre à jour les GPIO et PWM pour reculer (moteur gauche)
    HAL_GPIO_WritePin(FWD_GPIO_PORT_L, FWD_GPIO_PIN_L, GPIO_PIN_RESET);
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	2101      	movs	r1, #1
 8008ab4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008ab8:	f7fa fa1e 	bl	8002ef8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(REV_GPIO_PORT_L, REV_GPIO_PIN_L, GPIO_PIN_SET);
 8008abc:	2201      	movs	r2, #1
 8008abe:	2102      	movs	r1, #2
 8008ac0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008ac4:	f7fa fa18 	bl	8002ef8 <HAL_GPIO_WritePin>
    TIM2->CCR1 = 0;
 8008ac8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008acc:	2200      	movs	r2, #0
 8008ace:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = (percentage * PWM_MAX_DUTY_CYCLE) / 100;
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	00db      	lsls	r3, r3, #3
 8008ada:	4a06      	ldr	r2, [pc, #24]	@ (8008af4 <Motor_Reverse_L+0x60>)
 8008adc:	fb82 1203 	smull	r1, r2, r2, r3
 8008ae0:	1152      	asrs	r2, r2, #5
 8008ae2:	17db      	asrs	r3, r3, #31
 8008ae4:	1ad2      	subs	r2, r2, r3
 8008ae6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008aea:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8008aec:	bf00      	nop
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	51eb851f 	.word	0x51eb851f

08008af8 <Start_Motors>:
    TIM1->CCR2 = 0;
    TIM2->CCR1 = 0;
    TIM2->CCR2 = 0;
}

void Start_Motors(void) {
 8008af8:	b580      	push	{r7, lr}
 8008afa:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8008afc:	2100      	movs	r1, #0
 8008afe:	480f      	ldr	r0, [pc, #60]	@ (8008b3c <Start_Motors+0x44>)
 8008b00:	f7fc f9a0 	bl	8004e44 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8008b04:	2104      	movs	r1, #4
 8008b06:	480d      	ldr	r0, [pc, #52]	@ (8008b3c <Start_Motors+0x44>)
 8008b08:	f7fc f99c 	bl	8004e44 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	480c      	ldr	r0, [pc, #48]	@ (8008b40 <Start_Motors+0x48>)
 8008b10:	f7fc f998 	bl	8004e44 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8008b14:	2104      	movs	r1, #4
 8008b16:	480a      	ldr	r0, [pc, #40]	@ (8008b40 <Start_Motors+0x48>)
 8008b18:	f7fc f994 	bl	8004e44 <HAL_TIM_PWM_Start>
    TIM1->CCR1 = 0;
 8008b1c:	4b09      	ldr	r3, [pc, #36]	@ (8008b44 <Start_Motors+0x4c>)
 8008b1e:	2200      	movs	r2, #0
 8008b20:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 = 0;
 8008b22:	4b08      	ldr	r3, [pc, #32]	@ (8008b44 <Start_Motors+0x4c>)
 8008b24:	2200      	movs	r2, #0
 8008b26:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->CCR1 = 0;
 8008b28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = 0;
 8008b30:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008b34:	2200      	movs	r2, #0
 8008b36:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8008b38:	bf00      	nop
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	20001aec 	.word	0x20001aec
 8008b40:	20001b38 	.word	0x20001b38
 8008b44:	40012c00 	.word	0x40012c00

08008b48 <__cvt>:
 8008b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b4c:	ec57 6b10 	vmov	r6, r7, d0
 8008b50:	2f00      	cmp	r7, #0
 8008b52:	460c      	mov	r4, r1
 8008b54:	4619      	mov	r1, r3
 8008b56:	463b      	mov	r3, r7
 8008b58:	bfbb      	ittet	lt
 8008b5a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008b5e:	461f      	movlt	r7, r3
 8008b60:	2300      	movge	r3, #0
 8008b62:	232d      	movlt	r3, #45	@ 0x2d
 8008b64:	700b      	strb	r3, [r1, #0]
 8008b66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b68:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008b6c:	4691      	mov	r9, r2
 8008b6e:	f023 0820 	bic.w	r8, r3, #32
 8008b72:	bfbc      	itt	lt
 8008b74:	4632      	movlt	r2, r6
 8008b76:	4616      	movlt	r6, r2
 8008b78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b7c:	d005      	beq.n	8008b8a <__cvt+0x42>
 8008b7e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008b82:	d100      	bne.n	8008b86 <__cvt+0x3e>
 8008b84:	3401      	adds	r4, #1
 8008b86:	2102      	movs	r1, #2
 8008b88:	e000      	b.n	8008b8c <__cvt+0x44>
 8008b8a:	2103      	movs	r1, #3
 8008b8c:	ab03      	add	r3, sp, #12
 8008b8e:	9301      	str	r3, [sp, #4]
 8008b90:	ab02      	add	r3, sp, #8
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	ec47 6b10 	vmov	d0, r6, r7
 8008b98:	4653      	mov	r3, sl
 8008b9a:	4622      	mov	r2, r4
 8008b9c:	f001 f988 	bl	8009eb0 <_dtoa_r>
 8008ba0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008ba4:	4605      	mov	r5, r0
 8008ba6:	d119      	bne.n	8008bdc <__cvt+0x94>
 8008ba8:	f019 0f01 	tst.w	r9, #1
 8008bac:	d00e      	beq.n	8008bcc <__cvt+0x84>
 8008bae:	eb00 0904 	add.w	r9, r0, r4
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	4639      	mov	r1, r7
 8008bba:	f7f7 ffad 	bl	8000b18 <__aeabi_dcmpeq>
 8008bbe:	b108      	cbz	r0, 8008bc4 <__cvt+0x7c>
 8008bc0:	f8cd 900c 	str.w	r9, [sp, #12]
 8008bc4:	2230      	movs	r2, #48	@ 0x30
 8008bc6:	9b03      	ldr	r3, [sp, #12]
 8008bc8:	454b      	cmp	r3, r9
 8008bca:	d31e      	bcc.n	8008c0a <__cvt+0xc2>
 8008bcc:	9b03      	ldr	r3, [sp, #12]
 8008bce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008bd0:	1b5b      	subs	r3, r3, r5
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	6013      	str	r3, [r2, #0]
 8008bd6:	b004      	add	sp, #16
 8008bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bdc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008be0:	eb00 0904 	add.w	r9, r0, r4
 8008be4:	d1e5      	bne.n	8008bb2 <__cvt+0x6a>
 8008be6:	7803      	ldrb	r3, [r0, #0]
 8008be8:	2b30      	cmp	r3, #48	@ 0x30
 8008bea:	d10a      	bne.n	8008c02 <__cvt+0xba>
 8008bec:	2200      	movs	r2, #0
 8008bee:	2300      	movs	r3, #0
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	4639      	mov	r1, r7
 8008bf4:	f7f7 ff90 	bl	8000b18 <__aeabi_dcmpeq>
 8008bf8:	b918      	cbnz	r0, 8008c02 <__cvt+0xba>
 8008bfa:	f1c4 0401 	rsb	r4, r4, #1
 8008bfe:	f8ca 4000 	str.w	r4, [sl]
 8008c02:	f8da 3000 	ldr.w	r3, [sl]
 8008c06:	4499      	add	r9, r3
 8008c08:	e7d3      	b.n	8008bb2 <__cvt+0x6a>
 8008c0a:	1c59      	adds	r1, r3, #1
 8008c0c:	9103      	str	r1, [sp, #12]
 8008c0e:	701a      	strb	r2, [r3, #0]
 8008c10:	e7d9      	b.n	8008bc6 <__cvt+0x7e>

08008c12 <__exponent>:
 8008c12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c14:	2900      	cmp	r1, #0
 8008c16:	bfba      	itte	lt
 8008c18:	4249      	neglt	r1, r1
 8008c1a:	232d      	movlt	r3, #45	@ 0x2d
 8008c1c:	232b      	movge	r3, #43	@ 0x2b
 8008c1e:	2909      	cmp	r1, #9
 8008c20:	7002      	strb	r2, [r0, #0]
 8008c22:	7043      	strb	r3, [r0, #1]
 8008c24:	dd29      	ble.n	8008c7a <__exponent+0x68>
 8008c26:	f10d 0307 	add.w	r3, sp, #7
 8008c2a:	461d      	mov	r5, r3
 8008c2c:	270a      	movs	r7, #10
 8008c2e:	461a      	mov	r2, r3
 8008c30:	fbb1 f6f7 	udiv	r6, r1, r7
 8008c34:	fb07 1416 	mls	r4, r7, r6, r1
 8008c38:	3430      	adds	r4, #48	@ 0x30
 8008c3a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008c3e:	460c      	mov	r4, r1
 8008c40:	2c63      	cmp	r4, #99	@ 0x63
 8008c42:	f103 33ff 	add.w	r3, r3, #4294967295
 8008c46:	4631      	mov	r1, r6
 8008c48:	dcf1      	bgt.n	8008c2e <__exponent+0x1c>
 8008c4a:	3130      	adds	r1, #48	@ 0x30
 8008c4c:	1e94      	subs	r4, r2, #2
 8008c4e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008c52:	1c41      	adds	r1, r0, #1
 8008c54:	4623      	mov	r3, r4
 8008c56:	42ab      	cmp	r3, r5
 8008c58:	d30a      	bcc.n	8008c70 <__exponent+0x5e>
 8008c5a:	f10d 0309 	add.w	r3, sp, #9
 8008c5e:	1a9b      	subs	r3, r3, r2
 8008c60:	42ac      	cmp	r4, r5
 8008c62:	bf88      	it	hi
 8008c64:	2300      	movhi	r3, #0
 8008c66:	3302      	adds	r3, #2
 8008c68:	4403      	add	r3, r0
 8008c6a:	1a18      	subs	r0, r3, r0
 8008c6c:	b003      	add	sp, #12
 8008c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c70:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008c74:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008c78:	e7ed      	b.n	8008c56 <__exponent+0x44>
 8008c7a:	2330      	movs	r3, #48	@ 0x30
 8008c7c:	3130      	adds	r1, #48	@ 0x30
 8008c7e:	7083      	strb	r3, [r0, #2]
 8008c80:	70c1      	strb	r1, [r0, #3]
 8008c82:	1d03      	adds	r3, r0, #4
 8008c84:	e7f1      	b.n	8008c6a <__exponent+0x58>
	...

08008c88 <_printf_float>:
 8008c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c8c:	b08d      	sub	sp, #52	@ 0x34
 8008c8e:	460c      	mov	r4, r1
 8008c90:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008c94:	4616      	mov	r6, r2
 8008c96:	461f      	mov	r7, r3
 8008c98:	4605      	mov	r5, r0
 8008c9a:	f000 fff3 	bl	8009c84 <_localeconv_r>
 8008c9e:	6803      	ldr	r3, [r0, #0]
 8008ca0:	9304      	str	r3, [sp, #16]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7f7 fb0c 	bl	80002c0 <strlen>
 8008ca8:	2300      	movs	r3, #0
 8008caa:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cac:	f8d8 3000 	ldr.w	r3, [r8]
 8008cb0:	9005      	str	r0, [sp, #20]
 8008cb2:	3307      	adds	r3, #7
 8008cb4:	f023 0307 	bic.w	r3, r3, #7
 8008cb8:	f103 0208 	add.w	r2, r3, #8
 8008cbc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008cc0:	f8d4 b000 	ldr.w	fp, [r4]
 8008cc4:	f8c8 2000 	str.w	r2, [r8]
 8008cc8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ccc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008cd0:	9307      	str	r3, [sp, #28]
 8008cd2:	f8cd 8018 	str.w	r8, [sp, #24]
 8008cd6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008cda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cde:	4b9c      	ldr	r3, [pc, #624]	@ (8008f50 <_printf_float+0x2c8>)
 8008ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ce4:	f7f7 ff4a 	bl	8000b7c <__aeabi_dcmpun>
 8008ce8:	bb70      	cbnz	r0, 8008d48 <_printf_float+0xc0>
 8008cea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cee:	4b98      	ldr	r3, [pc, #608]	@ (8008f50 <_printf_float+0x2c8>)
 8008cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8008cf4:	f7f7 ff24 	bl	8000b40 <__aeabi_dcmple>
 8008cf8:	bb30      	cbnz	r0, 8008d48 <_printf_float+0xc0>
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	4640      	mov	r0, r8
 8008d00:	4649      	mov	r1, r9
 8008d02:	f7f7 ff13 	bl	8000b2c <__aeabi_dcmplt>
 8008d06:	b110      	cbz	r0, 8008d0e <_printf_float+0x86>
 8008d08:	232d      	movs	r3, #45	@ 0x2d
 8008d0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d0e:	4a91      	ldr	r2, [pc, #580]	@ (8008f54 <_printf_float+0x2cc>)
 8008d10:	4b91      	ldr	r3, [pc, #580]	@ (8008f58 <_printf_float+0x2d0>)
 8008d12:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008d16:	bf94      	ite	ls
 8008d18:	4690      	movls	r8, r2
 8008d1a:	4698      	movhi	r8, r3
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	6123      	str	r3, [r4, #16]
 8008d20:	f02b 0304 	bic.w	r3, fp, #4
 8008d24:	6023      	str	r3, [r4, #0]
 8008d26:	f04f 0900 	mov.w	r9, #0
 8008d2a:	9700      	str	r7, [sp, #0]
 8008d2c:	4633      	mov	r3, r6
 8008d2e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008d30:	4621      	mov	r1, r4
 8008d32:	4628      	mov	r0, r5
 8008d34:	f000 f9d2 	bl	80090dc <_printf_common>
 8008d38:	3001      	adds	r0, #1
 8008d3a:	f040 808d 	bne.w	8008e58 <_printf_float+0x1d0>
 8008d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d42:	b00d      	add	sp, #52	@ 0x34
 8008d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d48:	4642      	mov	r2, r8
 8008d4a:	464b      	mov	r3, r9
 8008d4c:	4640      	mov	r0, r8
 8008d4e:	4649      	mov	r1, r9
 8008d50:	f7f7 ff14 	bl	8000b7c <__aeabi_dcmpun>
 8008d54:	b140      	cbz	r0, 8008d68 <_printf_float+0xe0>
 8008d56:	464b      	mov	r3, r9
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	bfbc      	itt	lt
 8008d5c:	232d      	movlt	r3, #45	@ 0x2d
 8008d5e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008d62:	4a7e      	ldr	r2, [pc, #504]	@ (8008f5c <_printf_float+0x2d4>)
 8008d64:	4b7e      	ldr	r3, [pc, #504]	@ (8008f60 <_printf_float+0x2d8>)
 8008d66:	e7d4      	b.n	8008d12 <_printf_float+0x8a>
 8008d68:	6863      	ldr	r3, [r4, #4]
 8008d6a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008d6e:	9206      	str	r2, [sp, #24]
 8008d70:	1c5a      	adds	r2, r3, #1
 8008d72:	d13b      	bne.n	8008dec <_printf_float+0x164>
 8008d74:	2306      	movs	r3, #6
 8008d76:	6063      	str	r3, [r4, #4]
 8008d78:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	6022      	str	r2, [r4, #0]
 8008d80:	9303      	str	r3, [sp, #12]
 8008d82:	ab0a      	add	r3, sp, #40	@ 0x28
 8008d84:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008d88:	ab09      	add	r3, sp, #36	@ 0x24
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	6861      	ldr	r1, [r4, #4]
 8008d8e:	ec49 8b10 	vmov	d0, r8, r9
 8008d92:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008d96:	4628      	mov	r0, r5
 8008d98:	f7ff fed6 	bl	8008b48 <__cvt>
 8008d9c:	9b06      	ldr	r3, [sp, #24]
 8008d9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008da0:	2b47      	cmp	r3, #71	@ 0x47
 8008da2:	4680      	mov	r8, r0
 8008da4:	d129      	bne.n	8008dfa <_printf_float+0x172>
 8008da6:	1cc8      	adds	r0, r1, #3
 8008da8:	db02      	blt.n	8008db0 <_printf_float+0x128>
 8008daa:	6863      	ldr	r3, [r4, #4]
 8008dac:	4299      	cmp	r1, r3
 8008dae:	dd41      	ble.n	8008e34 <_printf_float+0x1ac>
 8008db0:	f1aa 0a02 	sub.w	sl, sl, #2
 8008db4:	fa5f fa8a 	uxtb.w	sl, sl
 8008db8:	3901      	subs	r1, #1
 8008dba:	4652      	mov	r2, sl
 8008dbc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008dc0:	9109      	str	r1, [sp, #36]	@ 0x24
 8008dc2:	f7ff ff26 	bl	8008c12 <__exponent>
 8008dc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008dc8:	1813      	adds	r3, r2, r0
 8008dca:	2a01      	cmp	r2, #1
 8008dcc:	4681      	mov	r9, r0
 8008dce:	6123      	str	r3, [r4, #16]
 8008dd0:	dc02      	bgt.n	8008dd8 <_printf_float+0x150>
 8008dd2:	6822      	ldr	r2, [r4, #0]
 8008dd4:	07d2      	lsls	r2, r2, #31
 8008dd6:	d501      	bpl.n	8008ddc <_printf_float+0x154>
 8008dd8:	3301      	adds	r3, #1
 8008dda:	6123      	str	r3, [r4, #16]
 8008ddc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d0a2      	beq.n	8008d2a <_printf_float+0xa2>
 8008de4:	232d      	movs	r3, #45	@ 0x2d
 8008de6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dea:	e79e      	b.n	8008d2a <_printf_float+0xa2>
 8008dec:	9a06      	ldr	r2, [sp, #24]
 8008dee:	2a47      	cmp	r2, #71	@ 0x47
 8008df0:	d1c2      	bne.n	8008d78 <_printf_float+0xf0>
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1c0      	bne.n	8008d78 <_printf_float+0xf0>
 8008df6:	2301      	movs	r3, #1
 8008df8:	e7bd      	b.n	8008d76 <_printf_float+0xee>
 8008dfa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008dfe:	d9db      	bls.n	8008db8 <_printf_float+0x130>
 8008e00:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008e04:	d118      	bne.n	8008e38 <_printf_float+0x1b0>
 8008e06:	2900      	cmp	r1, #0
 8008e08:	6863      	ldr	r3, [r4, #4]
 8008e0a:	dd0b      	ble.n	8008e24 <_printf_float+0x19c>
 8008e0c:	6121      	str	r1, [r4, #16]
 8008e0e:	b913      	cbnz	r3, 8008e16 <_printf_float+0x18e>
 8008e10:	6822      	ldr	r2, [r4, #0]
 8008e12:	07d0      	lsls	r0, r2, #31
 8008e14:	d502      	bpl.n	8008e1c <_printf_float+0x194>
 8008e16:	3301      	adds	r3, #1
 8008e18:	440b      	add	r3, r1
 8008e1a:	6123      	str	r3, [r4, #16]
 8008e1c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008e1e:	f04f 0900 	mov.w	r9, #0
 8008e22:	e7db      	b.n	8008ddc <_printf_float+0x154>
 8008e24:	b913      	cbnz	r3, 8008e2c <_printf_float+0x1a4>
 8008e26:	6822      	ldr	r2, [r4, #0]
 8008e28:	07d2      	lsls	r2, r2, #31
 8008e2a:	d501      	bpl.n	8008e30 <_printf_float+0x1a8>
 8008e2c:	3302      	adds	r3, #2
 8008e2e:	e7f4      	b.n	8008e1a <_printf_float+0x192>
 8008e30:	2301      	movs	r3, #1
 8008e32:	e7f2      	b.n	8008e1a <_printf_float+0x192>
 8008e34:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008e38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e3a:	4299      	cmp	r1, r3
 8008e3c:	db05      	blt.n	8008e4a <_printf_float+0x1c2>
 8008e3e:	6823      	ldr	r3, [r4, #0]
 8008e40:	6121      	str	r1, [r4, #16]
 8008e42:	07d8      	lsls	r0, r3, #31
 8008e44:	d5ea      	bpl.n	8008e1c <_printf_float+0x194>
 8008e46:	1c4b      	adds	r3, r1, #1
 8008e48:	e7e7      	b.n	8008e1a <_printf_float+0x192>
 8008e4a:	2900      	cmp	r1, #0
 8008e4c:	bfd4      	ite	le
 8008e4e:	f1c1 0202 	rsble	r2, r1, #2
 8008e52:	2201      	movgt	r2, #1
 8008e54:	4413      	add	r3, r2
 8008e56:	e7e0      	b.n	8008e1a <_printf_float+0x192>
 8008e58:	6823      	ldr	r3, [r4, #0]
 8008e5a:	055a      	lsls	r2, r3, #21
 8008e5c:	d407      	bmi.n	8008e6e <_printf_float+0x1e6>
 8008e5e:	6923      	ldr	r3, [r4, #16]
 8008e60:	4642      	mov	r2, r8
 8008e62:	4631      	mov	r1, r6
 8008e64:	4628      	mov	r0, r5
 8008e66:	47b8      	blx	r7
 8008e68:	3001      	adds	r0, #1
 8008e6a:	d12b      	bne.n	8008ec4 <_printf_float+0x23c>
 8008e6c:	e767      	b.n	8008d3e <_printf_float+0xb6>
 8008e6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008e72:	f240 80dd 	bls.w	8009030 <_printf_float+0x3a8>
 8008e76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	f7f7 fe4b 	bl	8000b18 <__aeabi_dcmpeq>
 8008e82:	2800      	cmp	r0, #0
 8008e84:	d033      	beq.n	8008eee <_printf_float+0x266>
 8008e86:	4a37      	ldr	r2, [pc, #220]	@ (8008f64 <_printf_float+0x2dc>)
 8008e88:	2301      	movs	r3, #1
 8008e8a:	4631      	mov	r1, r6
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	47b8      	blx	r7
 8008e90:	3001      	adds	r0, #1
 8008e92:	f43f af54 	beq.w	8008d3e <_printf_float+0xb6>
 8008e96:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008e9a:	4543      	cmp	r3, r8
 8008e9c:	db02      	blt.n	8008ea4 <_printf_float+0x21c>
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	07d8      	lsls	r0, r3, #31
 8008ea2:	d50f      	bpl.n	8008ec4 <_printf_float+0x23c>
 8008ea4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ea8:	4631      	mov	r1, r6
 8008eaa:	4628      	mov	r0, r5
 8008eac:	47b8      	blx	r7
 8008eae:	3001      	adds	r0, #1
 8008eb0:	f43f af45 	beq.w	8008d3e <_printf_float+0xb6>
 8008eb4:	f04f 0900 	mov.w	r9, #0
 8008eb8:	f108 38ff 	add.w	r8, r8, #4294967295
 8008ebc:	f104 0a1a 	add.w	sl, r4, #26
 8008ec0:	45c8      	cmp	r8, r9
 8008ec2:	dc09      	bgt.n	8008ed8 <_printf_float+0x250>
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	079b      	lsls	r3, r3, #30
 8008ec8:	f100 8103 	bmi.w	80090d2 <_printf_float+0x44a>
 8008ecc:	68e0      	ldr	r0, [r4, #12]
 8008ece:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ed0:	4298      	cmp	r0, r3
 8008ed2:	bfb8      	it	lt
 8008ed4:	4618      	movlt	r0, r3
 8008ed6:	e734      	b.n	8008d42 <_printf_float+0xba>
 8008ed8:	2301      	movs	r3, #1
 8008eda:	4652      	mov	r2, sl
 8008edc:	4631      	mov	r1, r6
 8008ede:	4628      	mov	r0, r5
 8008ee0:	47b8      	blx	r7
 8008ee2:	3001      	adds	r0, #1
 8008ee4:	f43f af2b 	beq.w	8008d3e <_printf_float+0xb6>
 8008ee8:	f109 0901 	add.w	r9, r9, #1
 8008eec:	e7e8      	b.n	8008ec0 <_printf_float+0x238>
 8008eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	dc39      	bgt.n	8008f68 <_printf_float+0x2e0>
 8008ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8008f64 <_printf_float+0x2dc>)
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	4631      	mov	r1, r6
 8008efa:	4628      	mov	r0, r5
 8008efc:	47b8      	blx	r7
 8008efe:	3001      	adds	r0, #1
 8008f00:	f43f af1d 	beq.w	8008d3e <_printf_float+0xb6>
 8008f04:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008f08:	ea59 0303 	orrs.w	r3, r9, r3
 8008f0c:	d102      	bne.n	8008f14 <_printf_float+0x28c>
 8008f0e:	6823      	ldr	r3, [r4, #0]
 8008f10:	07d9      	lsls	r1, r3, #31
 8008f12:	d5d7      	bpl.n	8008ec4 <_printf_float+0x23c>
 8008f14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f18:	4631      	mov	r1, r6
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	47b8      	blx	r7
 8008f1e:	3001      	adds	r0, #1
 8008f20:	f43f af0d 	beq.w	8008d3e <_printf_float+0xb6>
 8008f24:	f04f 0a00 	mov.w	sl, #0
 8008f28:	f104 0b1a 	add.w	fp, r4, #26
 8008f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f2e:	425b      	negs	r3, r3
 8008f30:	4553      	cmp	r3, sl
 8008f32:	dc01      	bgt.n	8008f38 <_printf_float+0x2b0>
 8008f34:	464b      	mov	r3, r9
 8008f36:	e793      	b.n	8008e60 <_printf_float+0x1d8>
 8008f38:	2301      	movs	r3, #1
 8008f3a:	465a      	mov	r2, fp
 8008f3c:	4631      	mov	r1, r6
 8008f3e:	4628      	mov	r0, r5
 8008f40:	47b8      	blx	r7
 8008f42:	3001      	adds	r0, #1
 8008f44:	f43f aefb 	beq.w	8008d3e <_printf_float+0xb6>
 8008f48:	f10a 0a01 	add.w	sl, sl, #1
 8008f4c:	e7ee      	b.n	8008f2c <_printf_float+0x2a4>
 8008f4e:	bf00      	nop
 8008f50:	7fefffff 	.word	0x7fefffff
 8008f54:	0800d4c8 	.word	0x0800d4c8
 8008f58:	0800d4cc 	.word	0x0800d4cc
 8008f5c:	0800d4d0 	.word	0x0800d4d0
 8008f60:	0800d4d4 	.word	0x0800d4d4
 8008f64:	0800d4d8 	.word	0x0800d4d8
 8008f68:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f6a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008f6e:	4553      	cmp	r3, sl
 8008f70:	bfa8      	it	ge
 8008f72:	4653      	movge	r3, sl
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	4699      	mov	r9, r3
 8008f78:	dc36      	bgt.n	8008fe8 <_printf_float+0x360>
 8008f7a:	f04f 0b00 	mov.w	fp, #0
 8008f7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f82:	f104 021a 	add.w	r2, r4, #26
 8008f86:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f88:	9306      	str	r3, [sp, #24]
 8008f8a:	eba3 0309 	sub.w	r3, r3, r9
 8008f8e:	455b      	cmp	r3, fp
 8008f90:	dc31      	bgt.n	8008ff6 <_printf_float+0x36e>
 8008f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f94:	459a      	cmp	sl, r3
 8008f96:	dc3a      	bgt.n	800900e <_printf_float+0x386>
 8008f98:	6823      	ldr	r3, [r4, #0]
 8008f9a:	07da      	lsls	r2, r3, #31
 8008f9c:	d437      	bmi.n	800900e <_printf_float+0x386>
 8008f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fa0:	ebaa 0903 	sub.w	r9, sl, r3
 8008fa4:	9b06      	ldr	r3, [sp, #24]
 8008fa6:	ebaa 0303 	sub.w	r3, sl, r3
 8008faa:	4599      	cmp	r9, r3
 8008fac:	bfa8      	it	ge
 8008fae:	4699      	movge	r9, r3
 8008fb0:	f1b9 0f00 	cmp.w	r9, #0
 8008fb4:	dc33      	bgt.n	800901e <_printf_float+0x396>
 8008fb6:	f04f 0800 	mov.w	r8, #0
 8008fba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fbe:	f104 0b1a 	add.w	fp, r4, #26
 8008fc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fc4:	ebaa 0303 	sub.w	r3, sl, r3
 8008fc8:	eba3 0309 	sub.w	r3, r3, r9
 8008fcc:	4543      	cmp	r3, r8
 8008fce:	f77f af79 	ble.w	8008ec4 <_printf_float+0x23c>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	465a      	mov	r2, fp
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	4628      	mov	r0, r5
 8008fda:	47b8      	blx	r7
 8008fdc:	3001      	adds	r0, #1
 8008fde:	f43f aeae 	beq.w	8008d3e <_printf_float+0xb6>
 8008fe2:	f108 0801 	add.w	r8, r8, #1
 8008fe6:	e7ec      	b.n	8008fc2 <_printf_float+0x33a>
 8008fe8:	4642      	mov	r2, r8
 8008fea:	4631      	mov	r1, r6
 8008fec:	4628      	mov	r0, r5
 8008fee:	47b8      	blx	r7
 8008ff0:	3001      	adds	r0, #1
 8008ff2:	d1c2      	bne.n	8008f7a <_printf_float+0x2f2>
 8008ff4:	e6a3      	b.n	8008d3e <_printf_float+0xb6>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	4631      	mov	r1, r6
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	9206      	str	r2, [sp, #24]
 8008ffe:	47b8      	blx	r7
 8009000:	3001      	adds	r0, #1
 8009002:	f43f ae9c 	beq.w	8008d3e <_printf_float+0xb6>
 8009006:	9a06      	ldr	r2, [sp, #24]
 8009008:	f10b 0b01 	add.w	fp, fp, #1
 800900c:	e7bb      	b.n	8008f86 <_printf_float+0x2fe>
 800900e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009012:	4631      	mov	r1, r6
 8009014:	4628      	mov	r0, r5
 8009016:	47b8      	blx	r7
 8009018:	3001      	adds	r0, #1
 800901a:	d1c0      	bne.n	8008f9e <_printf_float+0x316>
 800901c:	e68f      	b.n	8008d3e <_printf_float+0xb6>
 800901e:	9a06      	ldr	r2, [sp, #24]
 8009020:	464b      	mov	r3, r9
 8009022:	4442      	add	r2, r8
 8009024:	4631      	mov	r1, r6
 8009026:	4628      	mov	r0, r5
 8009028:	47b8      	blx	r7
 800902a:	3001      	adds	r0, #1
 800902c:	d1c3      	bne.n	8008fb6 <_printf_float+0x32e>
 800902e:	e686      	b.n	8008d3e <_printf_float+0xb6>
 8009030:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009034:	f1ba 0f01 	cmp.w	sl, #1
 8009038:	dc01      	bgt.n	800903e <_printf_float+0x3b6>
 800903a:	07db      	lsls	r3, r3, #31
 800903c:	d536      	bpl.n	80090ac <_printf_float+0x424>
 800903e:	2301      	movs	r3, #1
 8009040:	4642      	mov	r2, r8
 8009042:	4631      	mov	r1, r6
 8009044:	4628      	mov	r0, r5
 8009046:	47b8      	blx	r7
 8009048:	3001      	adds	r0, #1
 800904a:	f43f ae78 	beq.w	8008d3e <_printf_float+0xb6>
 800904e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009052:	4631      	mov	r1, r6
 8009054:	4628      	mov	r0, r5
 8009056:	47b8      	blx	r7
 8009058:	3001      	adds	r0, #1
 800905a:	f43f ae70 	beq.w	8008d3e <_printf_float+0xb6>
 800905e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009062:	2200      	movs	r2, #0
 8009064:	2300      	movs	r3, #0
 8009066:	f10a 3aff 	add.w	sl, sl, #4294967295
 800906a:	f7f7 fd55 	bl	8000b18 <__aeabi_dcmpeq>
 800906e:	b9c0      	cbnz	r0, 80090a2 <_printf_float+0x41a>
 8009070:	4653      	mov	r3, sl
 8009072:	f108 0201 	add.w	r2, r8, #1
 8009076:	4631      	mov	r1, r6
 8009078:	4628      	mov	r0, r5
 800907a:	47b8      	blx	r7
 800907c:	3001      	adds	r0, #1
 800907e:	d10c      	bne.n	800909a <_printf_float+0x412>
 8009080:	e65d      	b.n	8008d3e <_printf_float+0xb6>
 8009082:	2301      	movs	r3, #1
 8009084:	465a      	mov	r2, fp
 8009086:	4631      	mov	r1, r6
 8009088:	4628      	mov	r0, r5
 800908a:	47b8      	blx	r7
 800908c:	3001      	adds	r0, #1
 800908e:	f43f ae56 	beq.w	8008d3e <_printf_float+0xb6>
 8009092:	f108 0801 	add.w	r8, r8, #1
 8009096:	45d0      	cmp	r8, sl
 8009098:	dbf3      	blt.n	8009082 <_printf_float+0x3fa>
 800909a:	464b      	mov	r3, r9
 800909c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80090a0:	e6df      	b.n	8008e62 <_printf_float+0x1da>
 80090a2:	f04f 0800 	mov.w	r8, #0
 80090a6:	f104 0b1a 	add.w	fp, r4, #26
 80090aa:	e7f4      	b.n	8009096 <_printf_float+0x40e>
 80090ac:	2301      	movs	r3, #1
 80090ae:	4642      	mov	r2, r8
 80090b0:	e7e1      	b.n	8009076 <_printf_float+0x3ee>
 80090b2:	2301      	movs	r3, #1
 80090b4:	464a      	mov	r2, r9
 80090b6:	4631      	mov	r1, r6
 80090b8:	4628      	mov	r0, r5
 80090ba:	47b8      	blx	r7
 80090bc:	3001      	adds	r0, #1
 80090be:	f43f ae3e 	beq.w	8008d3e <_printf_float+0xb6>
 80090c2:	f108 0801 	add.w	r8, r8, #1
 80090c6:	68e3      	ldr	r3, [r4, #12]
 80090c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80090ca:	1a5b      	subs	r3, r3, r1
 80090cc:	4543      	cmp	r3, r8
 80090ce:	dcf0      	bgt.n	80090b2 <_printf_float+0x42a>
 80090d0:	e6fc      	b.n	8008ecc <_printf_float+0x244>
 80090d2:	f04f 0800 	mov.w	r8, #0
 80090d6:	f104 0919 	add.w	r9, r4, #25
 80090da:	e7f4      	b.n	80090c6 <_printf_float+0x43e>

080090dc <_printf_common>:
 80090dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090e0:	4616      	mov	r6, r2
 80090e2:	4698      	mov	r8, r3
 80090e4:	688a      	ldr	r2, [r1, #8]
 80090e6:	690b      	ldr	r3, [r1, #16]
 80090e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80090ec:	4293      	cmp	r3, r2
 80090ee:	bfb8      	it	lt
 80090f0:	4613      	movlt	r3, r2
 80090f2:	6033      	str	r3, [r6, #0]
 80090f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80090f8:	4607      	mov	r7, r0
 80090fa:	460c      	mov	r4, r1
 80090fc:	b10a      	cbz	r2, 8009102 <_printf_common+0x26>
 80090fe:	3301      	adds	r3, #1
 8009100:	6033      	str	r3, [r6, #0]
 8009102:	6823      	ldr	r3, [r4, #0]
 8009104:	0699      	lsls	r1, r3, #26
 8009106:	bf42      	ittt	mi
 8009108:	6833      	ldrmi	r3, [r6, #0]
 800910a:	3302      	addmi	r3, #2
 800910c:	6033      	strmi	r3, [r6, #0]
 800910e:	6825      	ldr	r5, [r4, #0]
 8009110:	f015 0506 	ands.w	r5, r5, #6
 8009114:	d106      	bne.n	8009124 <_printf_common+0x48>
 8009116:	f104 0a19 	add.w	sl, r4, #25
 800911a:	68e3      	ldr	r3, [r4, #12]
 800911c:	6832      	ldr	r2, [r6, #0]
 800911e:	1a9b      	subs	r3, r3, r2
 8009120:	42ab      	cmp	r3, r5
 8009122:	dc26      	bgt.n	8009172 <_printf_common+0x96>
 8009124:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009128:	6822      	ldr	r2, [r4, #0]
 800912a:	3b00      	subs	r3, #0
 800912c:	bf18      	it	ne
 800912e:	2301      	movne	r3, #1
 8009130:	0692      	lsls	r2, r2, #26
 8009132:	d42b      	bmi.n	800918c <_printf_common+0xb0>
 8009134:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009138:	4641      	mov	r1, r8
 800913a:	4638      	mov	r0, r7
 800913c:	47c8      	blx	r9
 800913e:	3001      	adds	r0, #1
 8009140:	d01e      	beq.n	8009180 <_printf_common+0xa4>
 8009142:	6823      	ldr	r3, [r4, #0]
 8009144:	6922      	ldr	r2, [r4, #16]
 8009146:	f003 0306 	and.w	r3, r3, #6
 800914a:	2b04      	cmp	r3, #4
 800914c:	bf02      	ittt	eq
 800914e:	68e5      	ldreq	r5, [r4, #12]
 8009150:	6833      	ldreq	r3, [r6, #0]
 8009152:	1aed      	subeq	r5, r5, r3
 8009154:	68a3      	ldr	r3, [r4, #8]
 8009156:	bf0c      	ite	eq
 8009158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800915c:	2500      	movne	r5, #0
 800915e:	4293      	cmp	r3, r2
 8009160:	bfc4      	itt	gt
 8009162:	1a9b      	subgt	r3, r3, r2
 8009164:	18ed      	addgt	r5, r5, r3
 8009166:	2600      	movs	r6, #0
 8009168:	341a      	adds	r4, #26
 800916a:	42b5      	cmp	r5, r6
 800916c:	d11a      	bne.n	80091a4 <_printf_common+0xc8>
 800916e:	2000      	movs	r0, #0
 8009170:	e008      	b.n	8009184 <_printf_common+0xa8>
 8009172:	2301      	movs	r3, #1
 8009174:	4652      	mov	r2, sl
 8009176:	4641      	mov	r1, r8
 8009178:	4638      	mov	r0, r7
 800917a:	47c8      	blx	r9
 800917c:	3001      	adds	r0, #1
 800917e:	d103      	bne.n	8009188 <_printf_common+0xac>
 8009180:	f04f 30ff 	mov.w	r0, #4294967295
 8009184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009188:	3501      	adds	r5, #1
 800918a:	e7c6      	b.n	800911a <_printf_common+0x3e>
 800918c:	18e1      	adds	r1, r4, r3
 800918e:	1c5a      	adds	r2, r3, #1
 8009190:	2030      	movs	r0, #48	@ 0x30
 8009192:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009196:	4422      	add	r2, r4
 8009198:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800919c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80091a0:	3302      	adds	r3, #2
 80091a2:	e7c7      	b.n	8009134 <_printf_common+0x58>
 80091a4:	2301      	movs	r3, #1
 80091a6:	4622      	mov	r2, r4
 80091a8:	4641      	mov	r1, r8
 80091aa:	4638      	mov	r0, r7
 80091ac:	47c8      	blx	r9
 80091ae:	3001      	adds	r0, #1
 80091b0:	d0e6      	beq.n	8009180 <_printf_common+0xa4>
 80091b2:	3601      	adds	r6, #1
 80091b4:	e7d9      	b.n	800916a <_printf_common+0x8e>
	...

080091b8 <_printf_i>:
 80091b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091bc:	7e0f      	ldrb	r7, [r1, #24]
 80091be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80091c0:	2f78      	cmp	r7, #120	@ 0x78
 80091c2:	4691      	mov	r9, r2
 80091c4:	4680      	mov	r8, r0
 80091c6:	460c      	mov	r4, r1
 80091c8:	469a      	mov	sl, r3
 80091ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80091ce:	d807      	bhi.n	80091e0 <_printf_i+0x28>
 80091d0:	2f62      	cmp	r7, #98	@ 0x62
 80091d2:	d80a      	bhi.n	80091ea <_printf_i+0x32>
 80091d4:	2f00      	cmp	r7, #0
 80091d6:	f000 80d2 	beq.w	800937e <_printf_i+0x1c6>
 80091da:	2f58      	cmp	r7, #88	@ 0x58
 80091dc:	f000 80b9 	beq.w	8009352 <_printf_i+0x19a>
 80091e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80091e8:	e03a      	b.n	8009260 <_printf_i+0xa8>
 80091ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80091ee:	2b15      	cmp	r3, #21
 80091f0:	d8f6      	bhi.n	80091e0 <_printf_i+0x28>
 80091f2:	a101      	add	r1, pc, #4	@ (adr r1, 80091f8 <_printf_i+0x40>)
 80091f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091f8:	08009251 	.word	0x08009251
 80091fc:	08009265 	.word	0x08009265
 8009200:	080091e1 	.word	0x080091e1
 8009204:	080091e1 	.word	0x080091e1
 8009208:	080091e1 	.word	0x080091e1
 800920c:	080091e1 	.word	0x080091e1
 8009210:	08009265 	.word	0x08009265
 8009214:	080091e1 	.word	0x080091e1
 8009218:	080091e1 	.word	0x080091e1
 800921c:	080091e1 	.word	0x080091e1
 8009220:	080091e1 	.word	0x080091e1
 8009224:	08009365 	.word	0x08009365
 8009228:	0800928f 	.word	0x0800928f
 800922c:	0800931f 	.word	0x0800931f
 8009230:	080091e1 	.word	0x080091e1
 8009234:	080091e1 	.word	0x080091e1
 8009238:	08009387 	.word	0x08009387
 800923c:	080091e1 	.word	0x080091e1
 8009240:	0800928f 	.word	0x0800928f
 8009244:	080091e1 	.word	0x080091e1
 8009248:	080091e1 	.word	0x080091e1
 800924c:	08009327 	.word	0x08009327
 8009250:	6833      	ldr	r3, [r6, #0]
 8009252:	1d1a      	adds	r2, r3, #4
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	6032      	str	r2, [r6, #0]
 8009258:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800925c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009260:	2301      	movs	r3, #1
 8009262:	e09d      	b.n	80093a0 <_printf_i+0x1e8>
 8009264:	6833      	ldr	r3, [r6, #0]
 8009266:	6820      	ldr	r0, [r4, #0]
 8009268:	1d19      	adds	r1, r3, #4
 800926a:	6031      	str	r1, [r6, #0]
 800926c:	0606      	lsls	r6, r0, #24
 800926e:	d501      	bpl.n	8009274 <_printf_i+0xbc>
 8009270:	681d      	ldr	r5, [r3, #0]
 8009272:	e003      	b.n	800927c <_printf_i+0xc4>
 8009274:	0645      	lsls	r5, r0, #25
 8009276:	d5fb      	bpl.n	8009270 <_printf_i+0xb8>
 8009278:	f9b3 5000 	ldrsh.w	r5, [r3]
 800927c:	2d00      	cmp	r5, #0
 800927e:	da03      	bge.n	8009288 <_printf_i+0xd0>
 8009280:	232d      	movs	r3, #45	@ 0x2d
 8009282:	426d      	negs	r5, r5
 8009284:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009288:	4859      	ldr	r0, [pc, #356]	@ (80093f0 <_printf_i+0x238>)
 800928a:	230a      	movs	r3, #10
 800928c:	e011      	b.n	80092b2 <_printf_i+0xfa>
 800928e:	6821      	ldr	r1, [r4, #0]
 8009290:	6833      	ldr	r3, [r6, #0]
 8009292:	0608      	lsls	r0, r1, #24
 8009294:	f853 5b04 	ldr.w	r5, [r3], #4
 8009298:	d402      	bmi.n	80092a0 <_printf_i+0xe8>
 800929a:	0649      	lsls	r1, r1, #25
 800929c:	bf48      	it	mi
 800929e:	b2ad      	uxthmi	r5, r5
 80092a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80092a2:	4853      	ldr	r0, [pc, #332]	@ (80093f0 <_printf_i+0x238>)
 80092a4:	6033      	str	r3, [r6, #0]
 80092a6:	bf14      	ite	ne
 80092a8:	230a      	movne	r3, #10
 80092aa:	2308      	moveq	r3, #8
 80092ac:	2100      	movs	r1, #0
 80092ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80092b2:	6866      	ldr	r6, [r4, #4]
 80092b4:	60a6      	str	r6, [r4, #8]
 80092b6:	2e00      	cmp	r6, #0
 80092b8:	bfa2      	ittt	ge
 80092ba:	6821      	ldrge	r1, [r4, #0]
 80092bc:	f021 0104 	bicge.w	r1, r1, #4
 80092c0:	6021      	strge	r1, [r4, #0]
 80092c2:	b90d      	cbnz	r5, 80092c8 <_printf_i+0x110>
 80092c4:	2e00      	cmp	r6, #0
 80092c6:	d04b      	beq.n	8009360 <_printf_i+0x1a8>
 80092c8:	4616      	mov	r6, r2
 80092ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80092ce:	fb03 5711 	mls	r7, r3, r1, r5
 80092d2:	5dc7      	ldrb	r7, [r0, r7]
 80092d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80092d8:	462f      	mov	r7, r5
 80092da:	42bb      	cmp	r3, r7
 80092dc:	460d      	mov	r5, r1
 80092de:	d9f4      	bls.n	80092ca <_printf_i+0x112>
 80092e0:	2b08      	cmp	r3, #8
 80092e2:	d10b      	bne.n	80092fc <_printf_i+0x144>
 80092e4:	6823      	ldr	r3, [r4, #0]
 80092e6:	07df      	lsls	r7, r3, #31
 80092e8:	d508      	bpl.n	80092fc <_printf_i+0x144>
 80092ea:	6923      	ldr	r3, [r4, #16]
 80092ec:	6861      	ldr	r1, [r4, #4]
 80092ee:	4299      	cmp	r1, r3
 80092f0:	bfde      	ittt	le
 80092f2:	2330      	movle	r3, #48	@ 0x30
 80092f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80092f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80092fc:	1b92      	subs	r2, r2, r6
 80092fe:	6122      	str	r2, [r4, #16]
 8009300:	f8cd a000 	str.w	sl, [sp]
 8009304:	464b      	mov	r3, r9
 8009306:	aa03      	add	r2, sp, #12
 8009308:	4621      	mov	r1, r4
 800930a:	4640      	mov	r0, r8
 800930c:	f7ff fee6 	bl	80090dc <_printf_common>
 8009310:	3001      	adds	r0, #1
 8009312:	d14a      	bne.n	80093aa <_printf_i+0x1f2>
 8009314:	f04f 30ff 	mov.w	r0, #4294967295
 8009318:	b004      	add	sp, #16
 800931a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800931e:	6823      	ldr	r3, [r4, #0]
 8009320:	f043 0320 	orr.w	r3, r3, #32
 8009324:	6023      	str	r3, [r4, #0]
 8009326:	4833      	ldr	r0, [pc, #204]	@ (80093f4 <_printf_i+0x23c>)
 8009328:	2778      	movs	r7, #120	@ 0x78
 800932a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	6831      	ldr	r1, [r6, #0]
 8009332:	061f      	lsls	r7, r3, #24
 8009334:	f851 5b04 	ldr.w	r5, [r1], #4
 8009338:	d402      	bmi.n	8009340 <_printf_i+0x188>
 800933a:	065f      	lsls	r7, r3, #25
 800933c:	bf48      	it	mi
 800933e:	b2ad      	uxthmi	r5, r5
 8009340:	6031      	str	r1, [r6, #0]
 8009342:	07d9      	lsls	r1, r3, #31
 8009344:	bf44      	itt	mi
 8009346:	f043 0320 	orrmi.w	r3, r3, #32
 800934a:	6023      	strmi	r3, [r4, #0]
 800934c:	b11d      	cbz	r5, 8009356 <_printf_i+0x19e>
 800934e:	2310      	movs	r3, #16
 8009350:	e7ac      	b.n	80092ac <_printf_i+0xf4>
 8009352:	4827      	ldr	r0, [pc, #156]	@ (80093f0 <_printf_i+0x238>)
 8009354:	e7e9      	b.n	800932a <_printf_i+0x172>
 8009356:	6823      	ldr	r3, [r4, #0]
 8009358:	f023 0320 	bic.w	r3, r3, #32
 800935c:	6023      	str	r3, [r4, #0]
 800935e:	e7f6      	b.n	800934e <_printf_i+0x196>
 8009360:	4616      	mov	r6, r2
 8009362:	e7bd      	b.n	80092e0 <_printf_i+0x128>
 8009364:	6833      	ldr	r3, [r6, #0]
 8009366:	6825      	ldr	r5, [r4, #0]
 8009368:	6961      	ldr	r1, [r4, #20]
 800936a:	1d18      	adds	r0, r3, #4
 800936c:	6030      	str	r0, [r6, #0]
 800936e:	062e      	lsls	r6, r5, #24
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	d501      	bpl.n	8009378 <_printf_i+0x1c0>
 8009374:	6019      	str	r1, [r3, #0]
 8009376:	e002      	b.n	800937e <_printf_i+0x1c6>
 8009378:	0668      	lsls	r0, r5, #25
 800937a:	d5fb      	bpl.n	8009374 <_printf_i+0x1bc>
 800937c:	8019      	strh	r1, [r3, #0]
 800937e:	2300      	movs	r3, #0
 8009380:	6123      	str	r3, [r4, #16]
 8009382:	4616      	mov	r6, r2
 8009384:	e7bc      	b.n	8009300 <_printf_i+0x148>
 8009386:	6833      	ldr	r3, [r6, #0]
 8009388:	1d1a      	adds	r2, r3, #4
 800938a:	6032      	str	r2, [r6, #0]
 800938c:	681e      	ldr	r6, [r3, #0]
 800938e:	6862      	ldr	r2, [r4, #4]
 8009390:	2100      	movs	r1, #0
 8009392:	4630      	mov	r0, r6
 8009394:	f7f6 ff44 	bl	8000220 <memchr>
 8009398:	b108      	cbz	r0, 800939e <_printf_i+0x1e6>
 800939a:	1b80      	subs	r0, r0, r6
 800939c:	6060      	str	r0, [r4, #4]
 800939e:	6863      	ldr	r3, [r4, #4]
 80093a0:	6123      	str	r3, [r4, #16]
 80093a2:	2300      	movs	r3, #0
 80093a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093a8:	e7aa      	b.n	8009300 <_printf_i+0x148>
 80093aa:	6923      	ldr	r3, [r4, #16]
 80093ac:	4632      	mov	r2, r6
 80093ae:	4649      	mov	r1, r9
 80093b0:	4640      	mov	r0, r8
 80093b2:	47d0      	blx	sl
 80093b4:	3001      	adds	r0, #1
 80093b6:	d0ad      	beq.n	8009314 <_printf_i+0x15c>
 80093b8:	6823      	ldr	r3, [r4, #0]
 80093ba:	079b      	lsls	r3, r3, #30
 80093bc:	d413      	bmi.n	80093e6 <_printf_i+0x22e>
 80093be:	68e0      	ldr	r0, [r4, #12]
 80093c0:	9b03      	ldr	r3, [sp, #12]
 80093c2:	4298      	cmp	r0, r3
 80093c4:	bfb8      	it	lt
 80093c6:	4618      	movlt	r0, r3
 80093c8:	e7a6      	b.n	8009318 <_printf_i+0x160>
 80093ca:	2301      	movs	r3, #1
 80093cc:	4632      	mov	r2, r6
 80093ce:	4649      	mov	r1, r9
 80093d0:	4640      	mov	r0, r8
 80093d2:	47d0      	blx	sl
 80093d4:	3001      	adds	r0, #1
 80093d6:	d09d      	beq.n	8009314 <_printf_i+0x15c>
 80093d8:	3501      	adds	r5, #1
 80093da:	68e3      	ldr	r3, [r4, #12]
 80093dc:	9903      	ldr	r1, [sp, #12]
 80093de:	1a5b      	subs	r3, r3, r1
 80093e0:	42ab      	cmp	r3, r5
 80093e2:	dcf2      	bgt.n	80093ca <_printf_i+0x212>
 80093e4:	e7eb      	b.n	80093be <_printf_i+0x206>
 80093e6:	2500      	movs	r5, #0
 80093e8:	f104 0619 	add.w	r6, r4, #25
 80093ec:	e7f5      	b.n	80093da <_printf_i+0x222>
 80093ee:	bf00      	nop
 80093f0:	0800d4da 	.word	0x0800d4da
 80093f4:	0800d4eb 	.word	0x0800d4eb

080093f8 <_scanf_float>:
 80093f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093fc:	b087      	sub	sp, #28
 80093fe:	4617      	mov	r7, r2
 8009400:	9303      	str	r3, [sp, #12]
 8009402:	688b      	ldr	r3, [r1, #8]
 8009404:	1e5a      	subs	r2, r3, #1
 8009406:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800940a:	bf81      	itttt	hi
 800940c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009410:	eb03 0b05 	addhi.w	fp, r3, r5
 8009414:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009418:	608b      	strhi	r3, [r1, #8]
 800941a:	680b      	ldr	r3, [r1, #0]
 800941c:	460a      	mov	r2, r1
 800941e:	f04f 0500 	mov.w	r5, #0
 8009422:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009426:	f842 3b1c 	str.w	r3, [r2], #28
 800942a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800942e:	4680      	mov	r8, r0
 8009430:	460c      	mov	r4, r1
 8009432:	bf98      	it	ls
 8009434:	f04f 0b00 	movls.w	fp, #0
 8009438:	9201      	str	r2, [sp, #4]
 800943a:	4616      	mov	r6, r2
 800943c:	46aa      	mov	sl, r5
 800943e:	46a9      	mov	r9, r5
 8009440:	9502      	str	r5, [sp, #8]
 8009442:	68a2      	ldr	r2, [r4, #8]
 8009444:	b152      	cbz	r2, 800945c <_scanf_float+0x64>
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	2b4e      	cmp	r3, #78	@ 0x4e
 800944c:	d864      	bhi.n	8009518 <_scanf_float+0x120>
 800944e:	2b40      	cmp	r3, #64	@ 0x40
 8009450:	d83c      	bhi.n	80094cc <_scanf_float+0xd4>
 8009452:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009456:	b2c8      	uxtb	r0, r1
 8009458:	280e      	cmp	r0, #14
 800945a:	d93a      	bls.n	80094d2 <_scanf_float+0xda>
 800945c:	f1b9 0f00 	cmp.w	r9, #0
 8009460:	d003      	beq.n	800946a <_scanf_float+0x72>
 8009462:	6823      	ldr	r3, [r4, #0]
 8009464:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009468:	6023      	str	r3, [r4, #0]
 800946a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800946e:	f1ba 0f01 	cmp.w	sl, #1
 8009472:	f200 8117 	bhi.w	80096a4 <_scanf_float+0x2ac>
 8009476:	9b01      	ldr	r3, [sp, #4]
 8009478:	429e      	cmp	r6, r3
 800947a:	f200 8108 	bhi.w	800968e <_scanf_float+0x296>
 800947e:	2001      	movs	r0, #1
 8009480:	b007      	add	sp, #28
 8009482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009486:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800948a:	2a0d      	cmp	r2, #13
 800948c:	d8e6      	bhi.n	800945c <_scanf_float+0x64>
 800948e:	a101      	add	r1, pc, #4	@ (adr r1, 8009494 <_scanf_float+0x9c>)
 8009490:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009494:	080095db 	.word	0x080095db
 8009498:	0800945d 	.word	0x0800945d
 800949c:	0800945d 	.word	0x0800945d
 80094a0:	0800945d 	.word	0x0800945d
 80094a4:	0800963b 	.word	0x0800963b
 80094a8:	08009613 	.word	0x08009613
 80094ac:	0800945d 	.word	0x0800945d
 80094b0:	0800945d 	.word	0x0800945d
 80094b4:	080095e9 	.word	0x080095e9
 80094b8:	0800945d 	.word	0x0800945d
 80094bc:	0800945d 	.word	0x0800945d
 80094c0:	0800945d 	.word	0x0800945d
 80094c4:	0800945d 	.word	0x0800945d
 80094c8:	080095a1 	.word	0x080095a1
 80094cc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80094d0:	e7db      	b.n	800948a <_scanf_float+0x92>
 80094d2:	290e      	cmp	r1, #14
 80094d4:	d8c2      	bhi.n	800945c <_scanf_float+0x64>
 80094d6:	a001      	add	r0, pc, #4	@ (adr r0, 80094dc <_scanf_float+0xe4>)
 80094d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80094dc:	08009591 	.word	0x08009591
 80094e0:	0800945d 	.word	0x0800945d
 80094e4:	08009591 	.word	0x08009591
 80094e8:	08009627 	.word	0x08009627
 80094ec:	0800945d 	.word	0x0800945d
 80094f0:	08009539 	.word	0x08009539
 80094f4:	08009577 	.word	0x08009577
 80094f8:	08009577 	.word	0x08009577
 80094fc:	08009577 	.word	0x08009577
 8009500:	08009577 	.word	0x08009577
 8009504:	08009577 	.word	0x08009577
 8009508:	08009577 	.word	0x08009577
 800950c:	08009577 	.word	0x08009577
 8009510:	08009577 	.word	0x08009577
 8009514:	08009577 	.word	0x08009577
 8009518:	2b6e      	cmp	r3, #110	@ 0x6e
 800951a:	d809      	bhi.n	8009530 <_scanf_float+0x138>
 800951c:	2b60      	cmp	r3, #96	@ 0x60
 800951e:	d8b2      	bhi.n	8009486 <_scanf_float+0x8e>
 8009520:	2b54      	cmp	r3, #84	@ 0x54
 8009522:	d07b      	beq.n	800961c <_scanf_float+0x224>
 8009524:	2b59      	cmp	r3, #89	@ 0x59
 8009526:	d199      	bne.n	800945c <_scanf_float+0x64>
 8009528:	2d07      	cmp	r5, #7
 800952a:	d197      	bne.n	800945c <_scanf_float+0x64>
 800952c:	2508      	movs	r5, #8
 800952e:	e02c      	b.n	800958a <_scanf_float+0x192>
 8009530:	2b74      	cmp	r3, #116	@ 0x74
 8009532:	d073      	beq.n	800961c <_scanf_float+0x224>
 8009534:	2b79      	cmp	r3, #121	@ 0x79
 8009536:	e7f6      	b.n	8009526 <_scanf_float+0x12e>
 8009538:	6821      	ldr	r1, [r4, #0]
 800953a:	05c8      	lsls	r0, r1, #23
 800953c:	d51b      	bpl.n	8009576 <_scanf_float+0x17e>
 800953e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009542:	6021      	str	r1, [r4, #0]
 8009544:	f109 0901 	add.w	r9, r9, #1
 8009548:	f1bb 0f00 	cmp.w	fp, #0
 800954c:	d003      	beq.n	8009556 <_scanf_float+0x15e>
 800954e:	3201      	adds	r2, #1
 8009550:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009554:	60a2      	str	r2, [r4, #8]
 8009556:	68a3      	ldr	r3, [r4, #8]
 8009558:	3b01      	subs	r3, #1
 800955a:	60a3      	str	r3, [r4, #8]
 800955c:	6923      	ldr	r3, [r4, #16]
 800955e:	3301      	adds	r3, #1
 8009560:	6123      	str	r3, [r4, #16]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	3b01      	subs	r3, #1
 8009566:	2b00      	cmp	r3, #0
 8009568:	607b      	str	r3, [r7, #4]
 800956a:	f340 8087 	ble.w	800967c <_scanf_float+0x284>
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	3301      	adds	r3, #1
 8009572:	603b      	str	r3, [r7, #0]
 8009574:	e765      	b.n	8009442 <_scanf_float+0x4a>
 8009576:	eb1a 0105 	adds.w	r1, sl, r5
 800957a:	f47f af6f 	bne.w	800945c <_scanf_float+0x64>
 800957e:	6822      	ldr	r2, [r4, #0]
 8009580:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009584:	6022      	str	r2, [r4, #0]
 8009586:	460d      	mov	r5, r1
 8009588:	468a      	mov	sl, r1
 800958a:	f806 3b01 	strb.w	r3, [r6], #1
 800958e:	e7e2      	b.n	8009556 <_scanf_float+0x15e>
 8009590:	6822      	ldr	r2, [r4, #0]
 8009592:	0610      	lsls	r0, r2, #24
 8009594:	f57f af62 	bpl.w	800945c <_scanf_float+0x64>
 8009598:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800959c:	6022      	str	r2, [r4, #0]
 800959e:	e7f4      	b.n	800958a <_scanf_float+0x192>
 80095a0:	f1ba 0f00 	cmp.w	sl, #0
 80095a4:	d10e      	bne.n	80095c4 <_scanf_float+0x1cc>
 80095a6:	f1b9 0f00 	cmp.w	r9, #0
 80095aa:	d10e      	bne.n	80095ca <_scanf_float+0x1d2>
 80095ac:	6822      	ldr	r2, [r4, #0]
 80095ae:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80095b2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80095b6:	d108      	bne.n	80095ca <_scanf_float+0x1d2>
 80095b8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80095bc:	6022      	str	r2, [r4, #0]
 80095be:	f04f 0a01 	mov.w	sl, #1
 80095c2:	e7e2      	b.n	800958a <_scanf_float+0x192>
 80095c4:	f1ba 0f02 	cmp.w	sl, #2
 80095c8:	d055      	beq.n	8009676 <_scanf_float+0x27e>
 80095ca:	2d01      	cmp	r5, #1
 80095cc:	d002      	beq.n	80095d4 <_scanf_float+0x1dc>
 80095ce:	2d04      	cmp	r5, #4
 80095d0:	f47f af44 	bne.w	800945c <_scanf_float+0x64>
 80095d4:	3501      	adds	r5, #1
 80095d6:	b2ed      	uxtb	r5, r5
 80095d8:	e7d7      	b.n	800958a <_scanf_float+0x192>
 80095da:	f1ba 0f01 	cmp.w	sl, #1
 80095de:	f47f af3d 	bne.w	800945c <_scanf_float+0x64>
 80095e2:	f04f 0a02 	mov.w	sl, #2
 80095e6:	e7d0      	b.n	800958a <_scanf_float+0x192>
 80095e8:	b97d      	cbnz	r5, 800960a <_scanf_float+0x212>
 80095ea:	f1b9 0f00 	cmp.w	r9, #0
 80095ee:	f47f af38 	bne.w	8009462 <_scanf_float+0x6a>
 80095f2:	6822      	ldr	r2, [r4, #0]
 80095f4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80095f8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80095fc:	f040 8108 	bne.w	8009810 <_scanf_float+0x418>
 8009600:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009604:	6022      	str	r2, [r4, #0]
 8009606:	2501      	movs	r5, #1
 8009608:	e7bf      	b.n	800958a <_scanf_float+0x192>
 800960a:	2d03      	cmp	r5, #3
 800960c:	d0e2      	beq.n	80095d4 <_scanf_float+0x1dc>
 800960e:	2d05      	cmp	r5, #5
 8009610:	e7de      	b.n	80095d0 <_scanf_float+0x1d8>
 8009612:	2d02      	cmp	r5, #2
 8009614:	f47f af22 	bne.w	800945c <_scanf_float+0x64>
 8009618:	2503      	movs	r5, #3
 800961a:	e7b6      	b.n	800958a <_scanf_float+0x192>
 800961c:	2d06      	cmp	r5, #6
 800961e:	f47f af1d 	bne.w	800945c <_scanf_float+0x64>
 8009622:	2507      	movs	r5, #7
 8009624:	e7b1      	b.n	800958a <_scanf_float+0x192>
 8009626:	6822      	ldr	r2, [r4, #0]
 8009628:	0591      	lsls	r1, r2, #22
 800962a:	f57f af17 	bpl.w	800945c <_scanf_float+0x64>
 800962e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009632:	6022      	str	r2, [r4, #0]
 8009634:	f8cd 9008 	str.w	r9, [sp, #8]
 8009638:	e7a7      	b.n	800958a <_scanf_float+0x192>
 800963a:	6822      	ldr	r2, [r4, #0]
 800963c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009640:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009644:	d006      	beq.n	8009654 <_scanf_float+0x25c>
 8009646:	0550      	lsls	r0, r2, #21
 8009648:	f57f af08 	bpl.w	800945c <_scanf_float+0x64>
 800964c:	f1b9 0f00 	cmp.w	r9, #0
 8009650:	f000 80de 	beq.w	8009810 <_scanf_float+0x418>
 8009654:	0591      	lsls	r1, r2, #22
 8009656:	bf58      	it	pl
 8009658:	9902      	ldrpl	r1, [sp, #8]
 800965a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800965e:	bf58      	it	pl
 8009660:	eba9 0101 	subpl.w	r1, r9, r1
 8009664:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009668:	bf58      	it	pl
 800966a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800966e:	6022      	str	r2, [r4, #0]
 8009670:	f04f 0900 	mov.w	r9, #0
 8009674:	e789      	b.n	800958a <_scanf_float+0x192>
 8009676:	f04f 0a03 	mov.w	sl, #3
 800967a:	e786      	b.n	800958a <_scanf_float+0x192>
 800967c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009680:	4639      	mov	r1, r7
 8009682:	4640      	mov	r0, r8
 8009684:	4798      	blx	r3
 8009686:	2800      	cmp	r0, #0
 8009688:	f43f aedb 	beq.w	8009442 <_scanf_float+0x4a>
 800968c:	e6e6      	b.n	800945c <_scanf_float+0x64>
 800968e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009692:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009696:	463a      	mov	r2, r7
 8009698:	4640      	mov	r0, r8
 800969a:	4798      	blx	r3
 800969c:	6923      	ldr	r3, [r4, #16]
 800969e:	3b01      	subs	r3, #1
 80096a0:	6123      	str	r3, [r4, #16]
 80096a2:	e6e8      	b.n	8009476 <_scanf_float+0x7e>
 80096a4:	1e6b      	subs	r3, r5, #1
 80096a6:	2b06      	cmp	r3, #6
 80096a8:	d824      	bhi.n	80096f4 <_scanf_float+0x2fc>
 80096aa:	2d02      	cmp	r5, #2
 80096ac:	d836      	bhi.n	800971c <_scanf_float+0x324>
 80096ae:	9b01      	ldr	r3, [sp, #4]
 80096b0:	429e      	cmp	r6, r3
 80096b2:	f67f aee4 	bls.w	800947e <_scanf_float+0x86>
 80096b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80096ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80096be:	463a      	mov	r2, r7
 80096c0:	4640      	mov	r0, r8
 80096c2:	4798      	blx	r3
 80096c4:	6923      	ldr	r3, [r4, #16]
 80096c6:	3b01      	subs	r3, #1
 80096c8:	6123      	str	r3, [r4, #16]
 80096ca:	e7f0      	b.n	80096ae <_scanf_float+0x2b6>
 80096cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80096d0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80096d4:	463a      	mov	r2, r7
 80096d6:	4640      	mov	r0, r8
 80096d8:	4798      	blx	r3
 80096da:	6923      	ldr	r3, [r4, #16]
 80096dc:	3b01      	subs	r3, #1
 80096de:	6123      	str	r3, [r4, #16]
 80096e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096e4:	fa5f fa8a 	uxtb.w	sl, sl
 80096e8:	f1ba 0f02 	cmp.w	sl, #2
 80096ec:	d1ee      	bne.n	80096cc <_scanf_float+0x2d4>
 80096ee:	3d03      	subs	r5, #3
 80096f0:	b2ed      	uxtb	r5, r5
 80096f2:	1b76      	subs	r6, r6, r5
 80096f4:	6823      	ldr	r3, [r4, #0]
 80096f6:	05da      	lsls	r2, r3, #23
 80096f8:	d530      	bpl.n	800975c <_scanf_float+0x364>
 80096fa:	055b      	lsls	r3, r3, #21
 80096fc:	d511      	bpl.n	8009722 <_scanf_float+0x32a>
 80096fe:	9b01      	ldr	r3, [sp, #4]
 8009700:	429e      	cmp	r6, r3
 8009702:	f67f aebc 	bls.w	800947e <_scanf_float+0x86>
 8009706:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800970a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800970e:	463a      	mov	r2, r7
 8009710:	4640      	mov	r0, r8
 8009712:	4798      	blx	r3
 8009714:	6923      	ldr	r3, [r4, #16]
 8009716:	3b01      	subs	r3, #1
 8009718:	6123      	str	r3, [r4, #16]
 800971a:	e7f0      	b.n	80096fe <_scanf_float+0x306>
 800971c:	46aa      	mov	sl, r5
 800971e:	46b3      	mov	fp, r6
 8009720:	e7de      	b.n	80096e0 <_scanf_float+0x2e8>
 8009722:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009726:	6923      	ldr	r3, [r4, #16]
 8009728:	2965      	cmp	r1, #101	@ 0x65
 800972a:	f103 33ff 	add.w	r3, r3, #4294967295
 800972e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009732:	6123      	str	r3, [r4, #16]
 8009734:	d00c      	beq.n	8009750 <_scanf_float+0x358>
 8009736:	2945      	cmp	r1, #69	@ 0x45
 8009738:	d00a      	beq.n	8009750 <_scanf_float+0x358>
 800973a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800973e:	463a      	mov	r2, r7
 8009740:	4640      	mov	r0, r8
 8009742:	4798      	blx	r3
 8009744:	6923      	ldr	r3, [r4, #16]
 8009746:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800974a:	3b01      	subs	r3, #1
 800974c:	1eb5      	subs	r5, r6, #2
 800974e:	6123      	str	r3, [r4, #16]
 8009750:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009754:	463a      	mov	r2, r7
 8009756:	4640      	mov	r0, r8
 8009758:	4798      	blx	r3
 800975a:	462e      	mov	r6, r5
 800975c:	6822      	ldr	r2, [r4, #0]
 800975e:	f012 0210 	ands.w	r2, r2, #16
 8009762:	d001      	beq.n	8009768 <_scanf_float+0x370>
 8009764:	2000      	movs	r0, #0
 8009766:	e68b      	b.n	8009480 <_scanf_float+0x88>
 8009768:	7032      	strb	r2, [r6, #0]
 800976a:	6823      	ldr	r3, [r4, #0]
 800976c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009770:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009774:	d11c      	bne.n	80097b0 <_scanf_float+0x3b8>
 8009776:	9b02      	ldr	r3, [sp, #8]
 8009778:	454b      	cmp	r3, r9
 800977a:	eba3 0209 	sub.w	r2, r3, r9
 800977e:	d123      	bne.n	80097c8 <_scanf_float+0x3d0>
 8009780:	9901      	ldr	r1, [sp, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	4640      	mov	r0, r8
 8009786:	f002 fd0b 	bl	800c1a0 <_strtod_r>
 800978a:	9b03      	ldr	r3, [sp, #12]
 800978c:	6821      	ldr	r1, [r4, #0]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f011 0f02 	tst.w	r1, #2
 8009794:	ec57 6b10 	vmov	r6, r7, d0
 8009798:	f103 0204 	add.w	r2, r3, #4
 800979c:	d01f      	beq.n	80097de <_scanf_float+0x3e6>
 800979e:	9903      	ldr	r1, [sp, #12]
 80097a0:	600a      	str	r2, [r1, #0]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	e9c3 6700 	strd	r6, r7, [r3]
 80097a8:	68e3      	ldr	r3, [r4, #12]
 80097aa:	3301      	adds	r3, #1
 80097ac:	60e3      	str	r3, [r4, #12]
 80097ae:	e7d9      	b.n	8009764 <_scanf_float+0x36c>
 80097b0:	9b04      	ldr	r3, [sp, #16]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d0e4      	beq.n	8009780 <_scanf_float+0x388>
 80097b6:	9905      	ldr	r1, [sp, #20]
 80097b8:	230a      	movs	r3, #10
 80097ba:	3101      	adds	r1, #1
 80097bc:	4640      	mov	r0, r8
 80097be:	f002 fd6f 	bl	800c2a0 <_strtol_r>
 80097c2:	9b04      	ldr	r3, [sp, #16]
 80097c4:	9e05      	ldr	r6, [sp, #20]
 80097c6:	1ac2      	subs	r2, r0, r3
 80097c8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80097cc:	429e      	cmp	r6, r3
 80097ce:	bf28      	it	cs
 80097d0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80097d4:	4910      	ldr	r1, [pc, #64]	@ (8009818 <_scanf_float+0x420>)
 80097d6:	4630      	mov	r0, r6
 80097d8:	f000 f954 	bl	8009a84 <siprintf>
 80097dc:	e7d0      	b.n	8009780 <_scanf_float+0x388>
 80097de:	f011 0f04 	tst.w	r1, #4
 80097e2:	9903      	ldr	r1, [sp, #12]
 80097e4:	600a      	str	r2, [r1, #0]
 80097e6:	d1dc      	bne.n	80097a2 <_scanf_float+0x3aa>
 80097e8:	681d      	ldr	r5, [r3, #0]
 80097ea:	4632      	mov	r2, r6
 80097ec:	463b      	mov	r3, r7
 80097ee:	4630      	mov	r0, r6
 80097f0:	4639      	mov	r1, r7
 80097f2:	f7f7 f9c3 	bl	8000b7c <__aeabi_dcmpun>
 80097f6:	b128      	cbz	r0, 8009804 <_scanf_float+0x40c>
 80097f8:	4808      	ldr	r0, [pc, #32]	@ (800981c <_scanf_float+0x424>)
 80097fa:	f000 fac9 	bl	8009d90 <nanf>
 80097fe:	ed85 0a00 	vstr	s0, [r5]
 8009802:	e7d1      	b.n	80097a8 <_scanf_float+0x3b0>
 8009804:	4630      	mov	r0, r6
 8009806:	4639      	mov	r1, r7
 8009808:	f7f7 fa16 	bl	8000c38 <__aeabi_d2f>
 800980c:	6028      	str	r0, [r5, #0]
 800980e:	e7cb      	b.n	80097a8 <_scanf_float+0x3b0>
 8009810:	f04f 0900 	mov.w	r9, #0
 8009814:	e629      	b.n	800946a <_scanf_float+0x72>
 8009816:	bf00      	nop
 8009818:	0800d4fc 	.word	0x0800d4fc
 800981c:	0800d895 	.word	0x0800d895

08009820 <std>:
 8009820:	2300      	movs	r3, #0
 8009822:	b510      	push	{r4, lr}
 8009824:	4604      	mov	r4, r0
 8009826:	e9c0 3300 	strd	r3, r3, [r0]
 800982a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800982e:	6083      	str	r3, [r0, #8]
 8009830:	8181      	strh	r1, [r0, #12]
 8009832:	6643      	str	r3, [r0, #100]	@ 0x64
 8009834:	81c2      	strh	r2, [r0, #14]
 8009836:	6183      	str	r3, [r0, #24]
 8009838:	4619      	mov	r1, r3
 800983a:	2208      	movs	r2, #8
 800983c:	305c      	adds	r0, #92	@ 0x5c
 800983e:	f000 fa19 	bl	8009c74 <memset>
 8009842:	4b0d      	ldr	r3, [pc, #52]	@ (8009878 <std+0x58>)
 8009844:	6263      	str	r3, [r4, #36]	@ 0x24
 8009846:	4b0d      	ldr	r3, [pc, #52]	@ (800987c <std+0x5c>)
 8009848:	62a3      	str	r3, [r4, #40]	@ 0x28
 800984a:	4b0d      	ldr	r3, [pc, #52]	@ (8009880 <std+0x60>)
 800984c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800984e:	4b0d      	ldr	r3, [pc, #52]	@ (8009884 <std+0x64>)
 8009850:	6323      	str	r3, [r4, #48]	@ 0x30
 8009852:	4b0d      	ldr	r3, [pc, #52]	@ (8009888 <std+0x68>)
 8009854:	6224      	str	r4, [r4, #32]
 8009856:	429c      	cmp	r4, r3
 8009858:	d006      	beq.n	8009868 <std+0x48>
 800985a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800985e:	4294      	cmp	r4, r2
 8009860:	d002      	beq.n	8009868 <std+0x48>
 8009862:	33d0      	adds	r3, #208	@ 0xd0
 8009864:	429c      	cmp	r4, r3
 8009866:	d105      	bne.n	8009874 <std+0x54>
 8009868:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800986c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009870:	f000 ba7c 	b.w	8009d6c <__retarget_lock_init_recursive>
 8009874:	bd10      	pop	{r4, pc}
 8009876:	bf00      	nop
 8009878:	08009ac5 	.word	0x08009ac5
 800987c:	08009ae7 	.word	0x08009ae7
 8009880:	08009b1f 	.word	0x08009b1f
 8009884:	08009b43 	.word	0x08009b43
 8009888:	2000460c 	.word	0x2000460c

0800988c <stdio_exit_handler>:
 800988c:	4a02      	ldr	r2, [pc, #8]	@ (8009898 <stdio_exit_handler+0xc>)
 800988e:	4903      	ldr	r1, [pc, #12]	@ (800989c <stdio_exit_handler+0x10>)
 8009890:	4803      	ldr	r0, [pc, #12]	@ (80098a0 <stdio_exit_handler+0x14>)
 8009892:	f000 b869 	b.w	8009968 <_fwalk_sglue>
 8009896:	bf00      	nop
 8009898:	20000010 	.word	0x20000010
 800989c:	0800c8e1 	.word	0x0800c8e1
 80098a0:	20000020 	.word	0x20000020

080098a4 <cleanup_stdio>:
 80098a4:	6841      	ldr	r1, [r0, #4]
 80098a6:	4b0c      	ldr	r3, [pc, #48]	@ (80098d8 <cleanup_stdio+0x34>)
 80098a8:	4299      	cmp	r1, r3
 80098aa:	b510      	push	{r4, lr}
 80098ac:	4604      	mov	r4, r0
 80098ae:	d001      	beq.n	80098b4 <cleanup_stdio+0x10>
 80098b0:	f003 f816 	bl	800c8e0 <_fflush_r>
 80098b4:	68a1      	ldr	r1, [r4, #8]
 80098b6:	4b09      	ldr	r3, [pc, #36]	@ (80098dc <cleanup_stdio+0x38>)
 80098b8:	4299      	cmp	r1, r3
 80098ba:	d002      	beq.n	80098c2 <cleanup_stdio+0x1e>
 80098bc:	4620      	mov	r0, r4
 80098be:	f003 f80f 	bl	800c8e0 <_fflush_r>
 80098c2:	68e1      	ldr	r1, [r4, #12]
 80098c4:	4b06      	ldr	r3, [pc, #24]	@ (80098e0 <cleanup_stdio+0x3c>)
 80098c6:	4299      	cmp	r1, r3
 80098c8:	d004      	beq.n	80098d4 <cleanup_stdio+0x30>
 80098ca:	4620      	mov	r0, r4
 80098cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098d0:	f003 b806 	b.w	800c8e0 <_fflush_r>
 80098d4:	bd10      	pop	{r4, pc}
 80098d6:	bf00      	nop
 80098d8:	2000460c 	.word	0x2000460c
 80098dc:	20004674 	.word	0x20004674
 80098e0:	200046dc 	.word	0x200046dc

080098e4 <global_stdio_init.part.0>:
 80098e4:	b510      	push	{r4, lr}
 80098e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009914 <global_stdio_init.part.0+0x30>)
 80098e8:	4c0b      	ldr	r4, [pc, #44]	@ (8009918 <global_stdio_init.part.0+0x34>)
 80098ea:	4a0c      	ldr	r2, [pc, #48]	@ (800991c <global_stdio_init.part.0+0x38>)
 80098ec:	601a      	str	r2, [r3, #0]
 80098ee:	4620      	mov	r0, r4
 80098f0:	2200      	movs	r2, #0
 80098f2:	2104      	movs	r1, #4
 80098f4:	f7ff ff94 	bl	8009820 <std>
 80098f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80098fc:	2201      	movs	r2, #1
 80098fe:	2109      	movs	r1, #9
 8009900:	f7ff ff8e 	bl	8009820 <std>
 8009904:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009908:	2202      	movs	r2, #2
 800990a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800990e:	2112      	movs	r1, #18
 8009910:	f7ff bf86 	b.w	8009820 <std>
 8009914:	20004744 	.word	0x20004744
 8009918:	2000460c 	.word	0x2000460c
 800991c:	0800988d 	.word	0x0800988d

08009920 <__sfp_lock_acquire>:
 8009920:	4801      	ldr	r0, [pc, #4]	@ (8009928 <__sfp_lock_acquire+0x8>)
 8009922:	f000 ba24 	b.w	8009d6e <__retarget_lock_acquire_recursive>
 8009926:	bf00      	nop
 8009928:	2000474d 	.word	0x2000474d

0800992c <__sfp_lock_release>:
 800992c:	4801      	ldr	r0, [pc, #4]	@ (8009934 <__sfp_lock_release+0x8>)
 800992e:	f000 ba1f 	b.w	8009d70 <__retarget_lock_release_recursive>
 8009932:	bf00      	nop
 8009934:	2000474d 	.word	0x2000474d

08009938 <__sinit>:
 8009938:	b510      	push	{r4, lr}
 800993a:	4604      	mov	r4, r0
 800993c:	f7ff fff0 	bl	8009920 <__sfp_lock_acquire>
 8009940:	6a23      	ldr	r3, [r4, #32]
 8009942:	b11b      	cbz	r3, 800994c <__sinit+0x14>
 8009944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009948:	f7ff bff0 	b.w	800992c <__sfp_lock_release>
 800994c:	4b04      	ldr	r3, [pc, #16]	@ (8009960 <__sinit+0x28>)
 800994e:	6223      	str	r3, [r4, #32]
 8009950:	4b04      	ldr	r3, [pc, #16]	@ (8009964 <__sinit+0x2c>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d1f5      	bne.n	8009944 <__sinit+0xc>
 8009958:	f7ff ffc4 	bl	80098e4 <global_stdio_init.part.0>
 800995c:	e7f2      	b.n	8009944 <__sinit+0xc>
 800995e:	bf00      	nop
 8009960:	080098a5 	.word	0x080098a5
 8009964:	20004744 	.word	0x20004744

08009968 <_fwalk_sglue>:
 8009968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800996c:	4607      	mov	r7, r0
 800996e:	4688      	mov	r8, r1
 8009970:	4614      	mov	r4, r2
 8009972:	2600      	movs	r6, #0
 8009974:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009978:	f1b9 0901 	subs.w	r9, r9, #1
 800997c:	d505      	bpl.n	800998a <_fwalk_sglue+0x22>
 800997e:	6824      	ldr	r4, [r4, #0]
 8009980:	2c00      	cmp	r4, #0
 8009982:	d1f7      	bne.n	8009974 <_fwalk_sglue+0xc>
 8009984:	4630      	mov	r0, r6
 8009986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800998a:	89ab      	ldrh	r3, [r5, #12]
 800998c:	2b01      	cmp	r3, #1
 800998e:	d907      	bls.n	80099a0 <_fwalk_sglue+0x38>
 8009990:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009994:	3301      	adds	r3, #1
 8009996:	d003      	beq.n	80099a0 <_fwalk_sglue+0x38>
 8009998:	4629      	mov	r1, r5
 800999a:	4638      	mov	r0, r7
 800999c:	47c0      	blx	r8
 800999e:	4306      	orrs	r6, r0
 80099a0:	3568      	adds	r5, #104	@ 0x68
 80099a2:	e7e9      	b.n	8009978 <_fwalk_sglue+0x10>

080099a4 <iprintf>:
 80099a4:	b40f      	push	{r0, r1, r2, r3}
 80099a6:	b507      	push	{r0, r1, r2, lr}
 80099a8:	4906      	ldr	r1, [pc, #24]	@ (80099c4 <iprintf+0x20>)
 80099aa:	ab04      	add	r3, sp, #16
 80099ac:	6808      	ldr	r0, [r1, #0]
 80099ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80099b2:	6881      	ldr	r1, [r0, #8]
 80099b4:	9301      	str	r3, [sp, #4]
 80099b6:	f002 fdf7 	bl	800c5a8 <_vfiprintf_r>
 80099ba:	b003      	add	sp, #12
 80099bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80099c0:	b004      	add	sp, #16
 80099c2:	4770      	bx	lr
 80099c4:	2000001c 	.word	0x2000001c

080099c8 <_puts_r>:
 80099c8:	6a03      	ldr	r3, [r0, #32]
 80099ca:	b570      	push	{r4, r5, r6, lr}
 80099cc:	6884      	ldr	r4, [r0, #8]
 80099ce:	4605      	mov	r5, r0
 80099d0:	460e      	mov	r6, r1
 80099d2:	b90b      	cbnz	r3, 80099d8 <_puts_r+0x10>
 80099d4:	f7ff ffb0 	bl	8009938 <__sinit>
 80099d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099da:	07db      	lsls	r3, r3, #31
 80099dc:	d405      	bmi.n	80099ea <_puts_r+0x22>
 80099de:	89a3      	ldrh	r3, [r4, #12]
 80099e0:	0598      	lsls	r0, r3, #22
 80099e2:	d402      	bmi.n	80099ea <_puts_r+0x22>
 80099e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099e6:	f000 f9c2 	bl	8009d6e <__retarget_lock_acquire_recursive>
 80099ea:	89a3      	ldrh	r3, [r4, #12]
 80099ec:	0719      	lsls	r1, r3, #28
 80099ee:	d502      	bpl.n	80099f6 <_puts_r+0x2e>
 80099f0:	6923      	ldr	r3, [r4, #16]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d135      	bne.n	8009a62 <_puts_r+0x9a>
 80099f6:	4621      	mov	r1, r4
 80099f8:	4628      	mov	r0, r5
 80099fa:	f000 f8e5 	bl	8009bc8 <__swsetup_r>
 80099fe:	b380      	cbz	r0, 8009a62 <_puts_r+0x9a>
 8009a00:	f04f 35ff 	mov.w	r5, #4294967295
 8009a04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a06:	07da      	lsls	r2, r3, #31
 8009a08:	d405      	bmi.n	8009a16 <_puts_r+0x4e>
 8009a0a:	89a3      	ldrh	r3, [r4, #12]
 8009a0c:	059b      	lsls	r3, r3, #22
 8009a0e:	d402      	bmi.n	8009a16 <_puts_r+0x4e>
 8009a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a12:	f000 f9ad 	bl	8009d70 <__retarget_lock_release_recursive>
 8009a16:	4628      	mov	r0, r5
 8009a18:	bd70      	pop	{r4, r5, r6, pc}
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	da04      	bge.n	8009a28 <_puts_r+0x60>
 8009a1e:	69a2      	ldr	r2, [r4, #24]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	dc17      	bgt.n	8009a54 <_puts_r+0x8c>
 8009a24:	290a      	cmp	r1, #10
 8009a26:	d015      	beq.n	8009a54 <_puts_r+0x8c>
 8009a28:	6823      	ldr	r3, [r4, #0]
 8009a2a:	1c5a      	adds	r2, r3, #1
 8009a2c:	6022      	str	r2, [r4, #0]
 8009a2e:	7019      	strb	r1, [r3, #0]
 8009a30:	68a3      	ldr	r3, [r4, #8]
 8009a32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a36:	3b01      	subs	r3, #1
 8009a38:	60a3      	str	r3, [r4, #8]
 8009a3a:	2900      	cmp	r1, #0
 8009a3c:	d1ed      	bne.n	8009a1a <_puts_r+0x52>
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	da11      	bge.n	8009a66 <_puts_r+0x9e>
 8009a42:	4622      	mov	r2, r4
 8009a44:	210a      	movs	r1, #10
 8009a46:	4628      	mov	r0, r5
 8009a48:	f000 f87f 	bl	8009b4a <__swbuf_r>
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	d0d7      	beq.n	8009a00 <_puts_r+0x38>
 8009a50:	250a      	movs	r5, #10
 8009a52:	e7d7      	b.n	8009a04 <_puts_r+0x3c>
 8009a54:	4622      	mov	r2, r4
 8009a56:	4628      	mov	r0, r5
 8009a58:	f000 f877 	bl	8009b4a <__swbuf_r>
 8009a5c:	3001      	adds	r0, #1
 8009a5e:	d1e7      	bne.n	8009a30 <_puts_r+0x68>
 8009a60:	e7ce      	b.n	8009a00 <_puts_r+0x38>
 8009a62:	3e01      	subs	r6, #1
 8009a64:	e7e4      	b.n	8009a30 <_puts_r+0x68>
 8009a66:	6823      	ldr	r3, [r4, #0]
 8009a68:	1c5a      	adds	r2, r3, #1
 8009a6a:	6022      	str	r2, [r4, #0]
 8009a6c:	220a      	movs	r2, #10
 8009a6e:	701a      	strb	r2, [r3, #0]
 8009a70:	e7ee      	b.n	8009a50 <_puts_r+0x88>
	...

08009a74 <puts>:
 8009a74:	4b02      	ldr	r3, [pc, #8]	@ (8009a80 <puts+0xc>)
 8009a76:	4601      	mov	r1, r0
 8009a78:	6818      	ldr	r0, [r3, #0]
 8009a7a:	f7ff bfa5 	b.w	80099c8 <_puts_r>
 8009a7e:	bf00      	nop
 8009a80:	2000001c 	.word	0x2000001c

08009a84 <siprintf>:
 8009a84:	b40e      	push	{r1, r2, r3}
 8009a86:	b500      	push	{lr}
 8009a88:	b09c      	sub	sp, #112	@ 0x70
 8009a8a:	ab1d      	add	r3, sp, #116	@ 0x74
 8009a8c:	9002      	str	r0, [sp, #8]
 8009a8e:	9006      	str	r0, [sp, #24]
 8009a90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009a94:	4809      	ldr	r0, [pc, #36]	@ (8009abc <siprintf+0x38>)
 8009a96:	9107      	str	r1, [sp, #28]
 8009a98:	9104      	str	r1, [sp, #16]
 8009a9a:	4909      	ldr	r1, [pc, #36]	@ (8009ac0 <siprintf+0x3c>)
 8009a9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aa0:	9105      	str	r1, [sp, #20]
 8009aa2:	6800      	ldr	r0, [r0, #0]
 8009aa4:	9301      	str	r3, [sp, #4]
 8009aa6:	a902      	add	r1, sp, #8
 8009aa8:	f002 fc58 	bl	800c35c <_svfiprintf_r>
 8009aac:	9b02      	ldr	r3, [sp, #8]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	701a      	strb	r2, [r3, #0]
 8009ab2:	b01c      	add	sp, #112	@ 0x70
 8009ab4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ab8:	b003      	add	sp, #12
 8009aba:	4770      	bx	lr
 8009abc:	2000001c 	.word	0x2000001c
 8009ac0:	ffff0208 	.word	0xffff0208

08009ac4 <__sread>:
 8009ac4:	b510      	push	{r4, lr}
 8009ac6:	460c      	mov	r4, r1
 8009ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009acc:	f000 f900 	bl	8009cd0 <_read_r>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	bfab      	itete	ge
 8009ad4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009ad6:	89a3      	ldrhlt	r3, [r4, #12]
 8009ad8:	181b      	addge	r3, r3, r0
 8009ada:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009ade:	bfac      	ite	ge
 8009ae0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009ae2:	81a3      	strhlt	r3, [r4, #12]
 8009ae4:	bd10      	pop	{r4, pc}

08009ae6 <__swrite>:
 8009ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aea:	461f      	mov	r7, r3
 8009aec:	898b      	ldrh	r3, [r1, #12]
 8009aee:	05db      	lsls	r3, r3, #23
 8009af0:	4605      	mov	r5, r0
 8009af2:	460c      	mov	r4, r1
 8009af4:	4616      	mov	r6, r2
 8009af6:	d505      	bpl.n	8009b04 <__swrite+0x1e>
 8009af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009afc:	2302      	movs	r3, #2
 8009afe:	2200      	movs	r2, #0
 8009b00:	f000 f8d4 	bl	8009cac <_lseek_r>
 8009b04:	89a3      	ldrh	r3, [r4, #12]
 8009b06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b0e:	81a3      	strh	r3, [r4, #12]
 8009b10:	4632      	mov	r2, r6
 8009b12:	463b      	mov	r3, r7
 8009b14:	4628      	mov	r0, r5
 8009b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1a:	f000 b8eb 	b.w	8009cf4 <_write_r>

08009b1e <__sseek>:
 8009b1e:	b510      	push	{r4, lr}
 8009b20:	460c      	mov	r4, r1
 8009b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b26:	f000 f8c1 	bl	8009cac <_lseek_r>
 8009b2a:	1c43      	adds	r3, r0, #1
 8009b2c:	89a3      	ldrh	r3, [r4, #12]
 8009b2e:	bf15      	itete	ne
 8009b30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009b32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009b36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009b3a:	81a3      	strheq	r3, [r4, #12]
 8009b3c:	bf18      	it	ne
 8009b3e:	81a3      	strhne	r3, [r4, #12]
 8009b40:	bd10      	pop	{r4, pc}

08009b42 <__sclose>:
 8009b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b46:	f000 b8a1 	b.w	8009c8c <_close_r>

08009b4a <__swbuf_r>:
 8009b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b4c:	460e      	mov	r6, r1
 8009b4e:	4614      	mov	r4, r2
 8009b50:	4605      	mov	r5, r0
 8009b52:	b118      	cbz	r0, 8009b5c <__swbuf_r+0x12>
 8009b54:	6a03      	ldr	r3, [r0, #32]
 8009b56:	b90b      	cbnz	r3, 8009b5c <__swbuf_r+0x12>
 8009b58:	f7ff feee 	bl	8009938 <__sinit>
 8009b5c:	69a3      	ldr	r3, [r4, #24]
 8009b5e:	60a3      	str	r3, [r4, #8]
 8009b60:	89a3      	ldrh	r3, [r4, #12]
 8009b62:	071a      	lsls	r2, r3, #28
 8009b64:	d501      	bpl.n	8009b6a <__swbuf_r+0x20>
 8009b66:	6923      	ldr	r3, [r4, #16]
 8009b68:	b943      	cbnz	r3, 8009b7c <__swbuf_r+0x32>
 8009b6a:	4621      	mov	r1, r4
 8009b6c:	4628      	mov	r0, r5
 8009b6e:	f000 f82b 	bl	8009bc8 <__swsetup_r>
 8009b72:	b118      	cbz	r0, 8009b7c <__swbuf_r+0x32>
 8009b74:	f04f 37ff 	mov.w	r7, #4294967295
 8009b78:	4638      	mov	r0, r7
 8009b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b7c:	6823      	ldr	r3, [r4, #0]
 8009b7e:	6922      	ldr	r2, [r4, #16]
 8009b80:	1a98      	subs	r0, r3, r2
 8009b82:	6963      	ldr	r3, [r4, #20]
 8009b84:	b2f6      	uxtb	r6, r6
 8009b86:	4283      	cmp	r3, r0
 8009b88:	4637      	mov	r7, r6
 8009b8a:	dc05      	bgt.n	8009b98 <__swbuf_r+0x4e>
 8009b8c:	4621      	mov	r1, r4
 8009b8e:	4628      	mov	r0, r5
 8009b90:	f002 fea6 	bl	800c8e0 <_fflush_r>
 8009b94:	2800      	cmp	r0, #0
 8009b96:	d1ed      	bne.n	8009b74 <__swbuf_r+0x2a>
 8009b98:	68a3      	ldr	r3, [r4, #8]
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	60a3      	str	r3, [r4, #8]
 8009b9e:	6823      	ldr	r3, [r4, #0]
 8009ba0:	1c5a      	adds	r2, r3, #1
 8009ba2:	6022      	str	r2, [r4, #0]
 8009ba4:	701e      	strb	r6, [r3, #0]
 8009ba6:	6962      	ldr	r2, [r4, #20]
 8009ba8:	1c43      	adds	r3, r0, #1
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d004      	beq.n	8009bb8 <__swbuf_r+0x6e>
 8009bae:	89a3      	ldrh	r3, [r4, #12]
 8009bb0:	07db      	lsls	r3, r3, #31
 8009bb2:	d5e1      	bpl.n	8009b78 <__swbuf_r+0x2e>
 8009bb4:	2e0a      	cmp	r6, #10
 8009bb6:	d1df      	bne.n	8009b78 <__swbuf_r+0x2e>
 8009bb8:	4621      	mov	r1, r4
 8009bba:	4628      	mov	r0, r5
 8009bbc:	f002 fe90 	bl	800c8e0 <_fflush_r>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	d0d9      	beq.n	8009b78 <__swbuf_r+0x2e>
 8009bc4:	e7d6      	b.n	8009b74 <__swbuf_r+0x2a>
	...

08009bc8 <__swsetup_r>:
 8009bc8:	b538      	push	{r3, r4, r5, lr}
 8009bca:	4b29      	ldr	r3, [pc, #164]	@ (8009c70 <__swsetup_r+0xa8>)
 8009bcc:	4605      	mov	r5, r0
 8009bce:	6818      	ldr	r0, [r3, #0]
 8009bd0:	460c      	mov	r4, r1
 8009bd2:	b118      	cbz	r0, 8009bdc <__swsetup_r+0x14>
 8009bd4:	6a03      	ldr	r3, [r0, #32]
 8009bd6:	b90b      	cbnz	r3, 8009bdc <__swsetup_r+0x14>
 8009bd8:	f7ff feae 	bl	8009938 <__sinit>
 8009bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009be0:	0719      	lsls	r1, r3, #28
 8009be2:	d422      	bmi.n	8009c2a <__swsetup_r+0x62>
 8009be4:	06da      	lsls	r2, r3, #27
 8009be6:	d407      	bmi.n	8009bf8 <__swsetup_r+0x30>
 8009be8:	2209      	movs	r2, #9
 8009bea:	602a      	str	r2, [r5, #0]
 8009bec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bf0:	81a3      	strh	r3, [r4, #12]
 8009bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf6:	e033      	b.n	8009c60 <__swsetup_r+0x98>
 8009bf8:	0758      	lsls	r0, r3, #29
 8009bfa:	d512      	bpl.n	8009c22 <__swsetup_r+0x5a>
 8009bfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009bfe:	b141      	cbz	r1, 8009c12 <__swsetup_r+0x4a>
 8009c00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c04:	4299      	cmp	r1, r3
 8009c06:	d002      	beq.n	8009c0e <__swsetup_r+0x46>
 8009c08:	4628      	mov	r0, r5
 8009c0a:	f000 ff15 	bl	800aa38 <_free_r>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c12:	89a3      	ldrh	r3, [r4, #12]
 8009c14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009c18:	81a3      	strh	r3, [r4, #12]
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	6063      	str	r3, [r4, #4]
 8009c1e:	6923      	ldr	r3, [r4, #16]
 8009c20:	6023      	str	r3, [r4, #0]
 8009c22:	89a3      	ldrh	r3, [r4, #12]
 8009c24:	f043 0308 	orr.w	r3, r3, #8
 8009c28:	81a3      	strh	r3, [r4, #12]
 8009c2a:	6923      	ldr	r3, [r4, #16]
 8009c2c:	b94b      	cbnz	r3, 8009c42 <__swsetup_r+0x7a>
 8009c2e:	89a3      	ldrh	r3, [r4, #12]
 8009c30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009c34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c38:	d003      	beq.n	8009c42 <__swsetup_r+0x7a>
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	f002 fe9d 	bl	800c97c <__smakebuf_r>
 8009c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c46:	f013 0201 	ands.w	r2, r3, #1
 8009c4a:	d00a      	beq.n	8009c62 <__swsetup_r+0x9a>
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	60a2      	str	r2, [r4, #8]
 8009c50:	6962      	ldr	r2, [r4, #20]
 8009c52:	4252      	negs	r2, r2
 8009c54:	61a2      	str	r2, [r4, #24]
 8009c56:	6922      	ldr	r2, [r4, #16]
 8009c58:	b942      	cbnz	r2, 8009c6c <__swsetup_r+0xa4>
 8009c5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009c5e:	d1c5      	bne.n	8009bec <__swsetup_r+0x24>
 8009c60:	bd38      	pop	{r3, r4, r5, pc}
 8009c62:	0799      	lsls	r1, r3, #30
 8009c64:	bf58      	it	pl
 8009c66:	6962      	ldrpl	r2, [r4, #20]
 8009c68:	60a2      	str	r2, [r4, #8]
 8009c6a:	e7f4      	b.n	8009c56 <__swsetup_r+0x8e>
 8009c6c:	2000      	movs	r0, #0
 8009c6e:	e7f7      	b.n	8009c60 <__swsetup_r+0x98>
 8009c70:	2000001c 	.word	0x2000001c

08009c74 <memset>:
 8009c74:	4402      	add	r2, r0
 8009c76:	4603      	mov	r3, r0
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d100      	bne.n	8009c7e <memset+0xa>
 8009c7c:	4770      	bx	lr
 8009c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8009c82:	e7f9      	b.n	8009c78 <memset+0x4>

08009c84 <_localeconv_r>:
 8009c84:	4800      	ldr	r0, [pc, #0]	@ (8009c88 <_localeconv_r+0x4>)
 8009c86:	4770      	bx	lr
 8009c88:	2000015c 	.word	0x2000015c

08009c8c <_close_r>:
 8009c8c:	b538      	push	{r3, r4, r5, lr}
 8009c8e:	4d06      	ldr	r5, [pc, #24]	@ (8009ca8 <_close_r+0x1c>)
 8009c90:	2300      	movs	r3, #0
 8009c92:	4604      	mov	r4, r0
 8009c94:	4608      	mov	r0, r1
 8009c96:	602b      	str	r3, [r5, #0]
 8009c98:	f7f7 fe90 	bl	80019bc <_close>
 8009c9c:	1c43      	adds	r3, r0, #1
 8009c9e:	d102      	bne.n	8009ca6 <_close_r+0x1a>
 8009ca0:	682b      	ldr	r3, [r5, #0]
 8009ca2:	b103      	cbz	r3, 8009ca6 <_close_r+0x1a>
 8009ca4:	6023      	str	r3, [r4, #0]
 8009ca6:	bd38      	pop	{r3, r4, r5, pc}
 8009ca8:	20004748 	.word	0x20004748

08009cac <_lseek_r>:
 8009cac:	b538      	push	{r3, r4, r5, lr}
 8009cae:	4d07      	ldr	r5, [pc, #28]	@ (8009ccc <_lseek_r+0x20>)
 8009cb0:	4604      	mov	r4, r0
 8009cb2:	4608      	mov	r0, r1
 8009cb4:	4611      	mov	r1, r2
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	602a      	str	r2, [r5, #0]
 8009cba:	461a      	mov	r2, r3
 8009cbc:	f7f7 fea5 	bl	8001a0a <_lseek>
 8009cc0:	1c43      	adds	r3, r0, #1
 8009cc2:	d102      	bne.n	8009cca <_lseek_r+0x1e>
 8009cc4:	682b      	ldr	r3, [r5, #0]
 8009cc6:	b103      	cbz	r3, 8009cca <_lseek_r+0x1e>
 8009cc8:	6023      	str	r3, [r4, #0]
 8009cca:	bd38      	pop	{r3, r4, r5, pc}
 8009ccc:	20004748 	.word	0x20004748

08009cd0 <_read_r>:
 8009cd0:	b538      	push	{r3, r4, r5, lr}
 8009cd2:	4d07      	ldr	r5, [pc, #28]	@ (8009cf0 <_read_r+0x20>)
 8009cd4:	4604      	mov	r4, r0
 8009cd6:	4608      	mov	r0, r1
 8009cd8:	4611      	mov	r1, r2
 8009cda:	2200      	movs	r2, #0
 8009cdc:	602a      	str	r2, [r5, #0]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	f7f7 fe33 	bl	800194a <_read>
 8009ce4:	1c43      	adds	r3, r0, #1
 8009ce6:	d102      	bne.n	8009cee <_read_r+0x1e>
 8009ce8:	682b      	ldr	r3, [r5, #0]
 8009cea:	b103      	cbz	r3, 8009cee <_read_r+0x1e>
 8009cec:	6023      	str	r3, [r4, #0]
 8009cee:	bd38      	pop	{r3, r4, r5, pc}
 8009cf0:	20004748 	.word	0x20004748

08009cf4 <_write_r>:
 8009cf4:	b538      	push	{r3, r4, r5, lr}
 8009cf6:	4d07      	ldr	r5, [pc, #28]	@ (8009d14 <_write_r+0x20>)
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	4608      	mov	r0, r1
 8009cfc:	4611      	mov	r1, r2
 8009cfe:	2200      	movs	r2, #0
 8009d00:	602a      	str	r2, [r5, #0]
 8009d02:	461a      	mov	r2, r3
 8009d04:	f7f7 fe3e 	bl	8001984 <_write>
 8009d08:	1c43      	adds	r3, r0, #1
 8009d0a:	d102      	bne.n	8009d12 <_write_r+0x1e>
 8009d0c:	682b      	ldr	r3, [r5, #0]
 8009d0e:	b103      	cbz	r3, 8009d12 <_write_r+0x1e>
 8009d10:	6023      	str	r3, [r4, #0]
 8009d12:	bd38      	pop	{r3, r4, r5, pc}
 8009d14:	20004748 	.word	0x20004748

08009d18 <__errno>:
 8009d18:	4b01      	ldr	r3, [pc, #4]	@ (8009d20 <__errno+0x8>)
 8009d1a:	6818      	ldr	r0, [r3, #0]
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop
 8009d20:	2000001c 	.word	0x2000001c

08009d24 <__libc_init_array>:
 8009d24:	b570      	push	{r4, r5, r6, lr}
 8009d26:	4d0d      	ldr	r5, [pc, #52]	@ (8009d5c <__libc_init_array+0x38>)
 8009d28:	4c0d      	ldr	r4, [pc, #52]	@ (8009d60 <__libc_init_array+0x3c>)
 8009d2a:	1b64      	subs	r4, r4, r5
 8009d2c:	10a4      	asrs	r4, r4, #2
 8009d2e:	2600      	movs	r6, #0
 8009d30:	42a6      	cmp	r6, r4
 8009d32:	d109      	bne.n	8009d48 <__libc_init_array+0x24>
 8009d34:	4d0b      	ldr	r5, [pc, #44]	@ (8009d64 <__libc_init_array+0x40>)
 8009d36:	4c0c      	ldr	r4, [pc, #48]	@ (8009d68 <__libc_init_array+0x44>)
 8009d38:	f003 fae0 	bl	800d2fc <_init>
 8009d3c:	1b64      	subs	r4, r4, r5
 8009d3e:	10a4      	asrs	r4, r4, #2
 8009d40:	2600      	movs	r6, #0
 8009d42:	42a6      	cmp	r6, r4
 8009d44:	d105      	bne.n	8009d52 <__libc_init_array+0x2e>
 8009d46:	bd70      	pop	{r4, r5, r6, pc}
 8009d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d4c:	4798      	blx	r3
 8009d4e:	3601      	adds	r6, #1
 8009d50:	e7ee      	b.n	8009d30 <__libc_init_array+0xc>
 8009d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d56:	4798      	blx	r3
 8009d58:	3601      	adds	r6, #1
 8009d5a:	e7f2      	b.n	8009d42 <__libc_init_array+0x1e>
 8009d5c:	0800d900 	.word	0x0800d900
 8009d60:	0800d900 	.word	0x0800d900
 8009d64:	0800d900 	.word	0x0800d900
 8009d68:	0800d904 	.word	0x0800d904

08009d6c <__retarget_lock_init_recursive>:
 8009d6c:	4770      	bx	lr

08009d6e <__retarget_lock_acquire_recursive>:
 8009d6e:	4770      	bx	lr

08009d70 <__retarget_lock_release_recursive>:
 8009d70:	4770      	bx	lr

08009d72 <memcpy>:
 8009d72:	440a      	add	r2, r1
 8009d74:	4291      	cmp	r1, r2
 8009d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d7a:	d100      	bne.n	8009d7e <memcpy+0xc>
 8009d7c:	4770      	bx	lr
 8009d7e:	b510      	push	{r4, lr}
 8009d80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d88:	4291      	cmp	r1, r2
 8009d8a:	d1f9      	bne.n	8009d80 <memcpy+0xe>
 8009d8c:	bd10      	pop	{r4, pc}
	...

08009d90 <nanf>:
 8009d90:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009d98 <nanf+0x8>
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	7fc00000 	.word	0x7fc00000

08009d9c <quorem>:
 8009d9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da0:	6903      	ldr	r3, [r0, #16]
 8009da2:	690c      	ldr	r4, [r1, #16]
 8009da4:	42a3      	cmp	r3, r4
 8009da6:	4607      	mov	r7, r0
 8009da8:	db7e      	blt.n	8009ea8 <quorem+0x10c>
 8009daa:	3c01      	subs	r4, #1
 8009dac:	f101 0814 	add.w	r8, r1, #20
 8009db0:	00a3      	lsls	r3, r4, #2
 8009db2:	f100 0514 	add.w	r5, r0, #20
 8009db6:	9300      	str	r3, [sp, #0]
 8009db8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dbc:	9301      	str	r3, [sp, #4]
 8009dbe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009dc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009dce:	fbb2 f6f3 	udiv	r6, r2, r3
 8009dd2:	d32e      	bcc.n	8009e32 <quorem+0x96>
 8009dd4:	f04f 0a00 	mov.w	sl, #0
 8009dd8:	46c4      	mov	ip, r8
 8009dda:	46ae      	mov	lr, r5
 8009ddc:	46d3      	mov	fp, sl
 8009dde:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009de2:	b298      	uxth	r0, r3
 8009de4:	fb06 a000 	mla	r0, r6, r0, sl
 8009de8:	0c02      	lsrs	r2, r0, #16
 8009dea:	0c1b      	lsrs	r3, r3, #16
 8009dec:	fb06 2303 	mla	r3, r6, r3, r2
 8009df0:	f8de 2000 	ldr.w	r2, [lr]
 8009df4:	b280      	uxth	r0, r0
 8009df6:	b292      	uxth	r2, r2
 8009df8:	1a12      	subs	r2, r2, r0
 8009dfa:	445a      	add	r2, fp
 8009dfc:	f8de 0000 	ldr.w	r0, [lr]
 8009e00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009e0a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009e0e:	b292      	uxth	r2, r2
 8009e10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009e14:	45e1      	cmp	r9, ip
 8009e16:	f84e 2b04 	str.w	r2, [lr], #4
 8009e1a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009e1e:	d2de      	bcs.n	8009dde <quorem+0x42>
 8009e20:	9b00      	ldr	r3, [sp, #0]
 8009e22:	58eb      	ldr	r3, [r5, r3]
 8009e24:	b92b      	cbnz	r3, 8009e32 <quorem+0x96>
 8009e26:	9b01      	ldr	r3, [sp, #4]
 8009e28:	3b04      	subs	r3, #4
 8009e2a:	429d      	cmp	r5, r3
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	d32f      	bcc.n	8009e90 <quorem+0xf4>
 8009e30:	613c      	str	r4, [r7, #16]
 8009e32:	4638      	mov	r0, r7
 8009e34:	f001 f9c4 	bl	800b1c0 <__mcmp>
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	db25      	blt.n	8009e88 <quorem+0xec>
 8009e3c:	4629      	mov	r1, r5
 8009e3e:	2000      	movs	r0, #0
 8009e40:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e44:	f8d1 c000 	ldr.w	ip, [r1]
 8009e48:	fa1f fe82 	uxth.w	lr, r2
 8009e4c:	fa1f f38c 	uxth.w	r3, ip
 8009e50:	eba3 030e 	sub.w	r3, r3, lr
 8009e54:	4403      	add	r3, r0
 8009e56:	0c12      	lsrs	r2, r2, #16
 8009e58:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009e5c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e66:	45c1      	cmp	r9, r8
 8009e68:	f841 3b04 	str.w	r3, [r1], #4
 8009e6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e70:	d2e6      	bcs.n	8009e40 <quorem+0xa4>
 8009e72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e7a:	b922      	cbnz	r2, 8009e86 <quorem+0xea>
 8009e7c:	3b04      	subs	r3, #4
 8009e7e:	429d      	cmp	r5, r3
 8009e80:	461a      	mov	r2, r3
 8009e82:	d30b      	bcc.n	8009e9c <quorem+0x100>
 8009e84:	613c      	str	r4, [r7, #16]
 8009e86:	3601      	adds	r6, #1
 8009e88:	4630      	mov	r0, r6
 8009e8a:	b003      	add	sp, #12
 8009e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e90:	6812      	ldr	r2, [r2, #0]
 8009e92:	3b04      	subs	r3, #4
 8009e94:	2a00      	cmp	r2, #0
 8009e96:	d1cb      	bne.n	8009e30 <quorem+0x94>
 8009e98:	3c01      	subs	r4, #1
 8009e9a:	e7c6      	b.n	8009e2a <quorem+0x8e>
 8009e9c:	6812      	ldr	r2, [r2, #0]
 8009e9e:	3b04      	subs	r3, #4
 8009ea0:	2a00      	cmp	r2, #0
 8009ea2:	d1ef      	bne.n	8009e84 <quorem+0xe8>
 8009ea4:	3c01      	subs	r4, #1
 8009ea6:	e7ea      	b.n	8009e7e <quorem+0xe2>
 8009ea8:	2000      	movs	r0, #0
 8009eaa:	e7ee      	b.n	8009e8a <quorem+0xee>
 8009eac:	0000      	movs	r0, r0
	...

08009eb0 <_dtoa_r>:
 8009eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb4:	69c7      	ldr	r7, [r0, #28]
 8009eb6:	b099      	sub	sp, #100	@ 0x64
 8009eb8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009ebc:	ec55 4b10 	vmov	r4, r5, d0
 8009ec0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009ec2:	9109      	str	r1, [sp, #36]	@ 0x24
 8009ec4:	4683      	mov	fp, r0
 8009ec6:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ec8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009eca:	b97f      	cbnz	r7, 8009eec <_dtoa_r+0x3c>
 8009ecc:	2010      	movs	r0, #16
 8009ece:	f000 fdfd 	bl	800aacc <malloc>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	f8cb 001c 	str.w	r0, [fp, #28]
 8009ed8:	b920      	cbnz	r0, 8009ee4 <_dtoa_r+0x34>
 8009eda:	4ba7      	ldr	r3, [pc, #668]	@ (800a178 <_dtoa_r+0x2c8>)
 8009edc:	21ef      	movs	r1, #239	@ 0xef
 8009ede:	48a7      	ldr	r0, [pc, #668]	@ (800a17c <_dtoa_r+0x2cc>)
 8009ee0:	f002 fdee 	bl	800cac0 <__assert_func>
 8009ee4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009ee8:	6007      	str	r7, [r0, #0]
 8009eea:	60c7      	str	r7, [r0, #12]
 8009eec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ef0:	6819      	ldr	r1, [r3, #0]
 8009ef2:	b159      	cbz	r1, 8009f0c <_dtoa_r+0x5c>
 8009ef4:	685a      	ldr	r2, [r3, #4]
 8009ef6:	604a      	str	r2, [r1, #4]
 8009ef8:	2301      	movs	r3, #1
 8009efa:	4093      	lsls	r3, r2
 8009efc:	608b      	str	r3, [r1, #8]
 8009efe:	4658      	mov	r0, fp
 8009f00:	f000 feda 	bl	800acb8 <_Bfree>
 8009f04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	601a      	str	r2, [r3, #0]
 8009f0c:	1e2b      	subs	r3, r5, #0
 8009f0e:	bfb9      	ittee	lt
 8009f10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009f14:	9303      	strlt	r3, [sp, #12]
 8009f16:	2300      	movge	r3, #0
 8009f18:	6033      	strge	r3, [r6, #0]
 8009f1a:	9f03      	ldr	r7, [sp, #12]
 8009f1c:	4b98      	ldr	r3, [pc, #608]	@ (800a180 <_dtoa_r+0x2d0>)
 8009f1e:	bfbc      	itt	lt
 8009f20:	2201      	movlt	r2, #1
 8009f22:	6032      	strlt	r2, [r6, #0]
 8009f24:	43bb      	bics	r3, r7
 8009f26:	d112      	bne.n	8009f4e <_dtoa_r+0x9e>
 8009f28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009f2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009f2e:	6013      	str	r3, [r2, #0]
 8009f30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009f34:	4323      	orrs	r3, r4
 8009f36:	f000 854d 	beq.w	800a9d4 <_dtoa_r+0xb24>
 8009f3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a194 <_dtoa_r+0x2e4>
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	f000 854f 	beq.w	800a9e4 <_dtoa_r+0xb34>
 8009f46:	f10a 0303 	add.w	r3, sl, #3
 8009f4a:	f000 bd49 	b.w	800a9e0 <_dtoa_r+0xb30>
 8009f4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f52:	2200      	movs	r2, #0
 8009f54:	ec51 0b17 	vmov	r0, r1, d7
 8009f58:	2300      	movs	r3, #0
 8009f5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009f5e:	f7f6 fddb 	bl	8000b18 <__aeabi_dcmpeq>
 8009f62:	4680      	mov	r8, r0
 8009f64:	b158      	cbz	r0, 8009f7e <_dtoa_r+0xce>
 8009f66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009f68:	2301      	movs	r3, #1
 8009f6a:	6013      	str	r3, [r2, #0]
 8009f6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f6e:	b113      	cbz	r3, 8009f76 <_dtoa_r+0xc6>
 8009f70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009f72:	4b84      	ldr	r3, [pc, #528]	@ (800a184 <_dtoa_r+0x2d4>)
 8009f74:	6013      	str	r3, [r2, #0]
 8009f76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a198 <_dtoa_r+0x2e8>
 8009f7a:	f000 bd33 	b.w	800a9e4 <_dtoa_r+0xb34>
 8009f7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009f82:	aa16      	add	r2, sp, #88	@ 0x58
 8009f84:	a917      	add	r1, sp, #92	@ 0x5c
 8009f86:	4658      	mov	r0, fp
 8009f88:	f001 fa3a 	bl	800b400 <__d2b>
 8009f8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009f90:	4681      	mov	r9, r0
 8009f92:	2e00      	cmp	r6, #0
 8009f94:	d077      	beq.n	800a086 <_dtoa_r+0x1d6>
 8009f96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009fa4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009fa8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009fac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	4b74      	ldr	r3, [pc, #464]	@ (800a188 <_dtoa_r+0x2d8>)
 8009fb6:	f7f6 f98f 	bl	80002d8 <__aeabi_dsub>
 8009fba:	a369      	add	r3, pc, #420	@ (adr r3, 800a160 <_dtoa_r+0x2b0>)
 8009fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc0:	f7f6 fb42 	bl	8000648 <__aeabi_dmul>
 8009fc4:	a368      	add	r3, pc, #416	@ (adr r3, 800a168 <_dtoa_r+0x2b8>)
 8009fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fca:	f7f6 f987 	bl	80002dc <__adddf3>
 8009fce:	4604      	mov	r4, r0
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	460d      	mov	r5, r1
 8009fd4:	f7f6 face 	bl	8000574 <__aeabi_i2d>
 8009fd8:	a365      	add	r3, pc, #404	@ (adr r3, 800a170 <_dtoa_r+0x2c0>)
 8009fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fde:	f7f6 fb33 	bl	8000648 <__aeabi_dmul>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	4629      	mov	r1, r5
 8009fea:	f7f6 f977 	bl	80002dc <__adddf3>
 8009fee:	4604      	mov	r4, r0
 8009ff0:	460d      	mov	r5, r1
 8009ff2:	f7f6 fdd9 	bl	8000ba8 <__aeabi_d2iz>
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	4607      	mov	r7, r0
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	4629      	mov	r1, r5
 800a000:	f7f6 fd94 	bl	8000b2c <__aeabi_dcmplt>
 800a004:	b140      	cbz	r0, 800a018 <_dtoa_r+0x168>
 800a006:	4638      	mov	r0, r7
 800a008:	f7f6 fab4 	bl	8000574 <__aeabi_i2d>
 800a00c:	4622      	mov	r2, r4
 800a00e:	462b      	mov	r3, r5
 800a010:	f7f6 fd82 	bl	8000b18 <__aeabi_dcmpeq>
 800a014:	b900      	cbnz	r0, 800a018 <_dtoa_r+0x168>
 800a016:	3f01      	subs	r7, #1
 800a018:	2f16      	cmp	r7, #22
 800a01a:	d851      	bhi.n	800a0c0 <_dtoa_r+0x210>
 800a01c:	4b5b      	ldr	r3, [pc, #364]	@ (800a18c <_dtoa_r+0x2dc>)
 800a01e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a026:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a02a:	f7f6 fd7f 	bl	8000b2c <__aeabi_dcmplt>
 800a02e:	2800      	cmp	r0, #0
 800a030:	d048      	beq.n	800a0c4 <_dtoa_r+0x214>
 800a032:	3f01      	subs	r7, #1
 800a034:	2300      	movs	r3, #0
 800a036:	9312      	str	r3, [sp, #72]	@ 0x48
 800a038:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a03a:	1b9b      	subs	r3, r3, r6
 800a03c:	1e5a      	subs	r2, r3, #1
 800a03e:	bf44      	itt	mi
 800a040:	f1c3 0801 	rsbmi	r8, r3, #1
 800a044:	2300      	movmi	r3, #0
 800a046:	9208      	str	r2, [sp, #32]
 800a048:	bf54      	ite	pl
 800a04a:	f04f 0800 	movpl.w	r8, #0
 800a04e:	9308      	strmi	r3, [sp, #32]
 800a050:	2f00      	cmp	r7, #0
 800a052:	db39      	blt.n	800a0c8 <_dtoa_r+0x218>
 800a054:	9b08      	ldr	r3, [sp, #32]
 800a056:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a058:	443b      	add	r3, r7
 800a05a:	9308      	str	r3, [sp, #32]
 800a05c:	2300      	movs	r3, #0
 800a05e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a060:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a062:	2b09      	cmp	r3, #9
 800a064:	d864      	bhi.n	800a130 <_dtoa_r+0x280>
 800a066:	2b05      	cmp	r3, #5
 800a068:	bfc4      	itt	gt
 800a06a:	3b04      	subgt	r3, #4
 800a06c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a06e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a070:	f1a3 0302 	sub.w	r3, r3, #2
 800a074:	bfcc      	ite	gt
 800a076:	2400      	movgt	r4, #0
 800a078:	2401      	movle	r4, #1
 800a07a:	2b03      	cmp	r3, #3
 800a07c:	d863      	bhi.n	800a146 <_dtoa_r+0x296>
 800a07e:	e8df f003 	tbb	[pc, r3]
 800a082:	372a      	.short	0x372a
 800a084:	5535      	.short	0x5535
 800a086:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a08a:	441e      	add	r6, r3
 800a08c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a090:	2b20      	cmp	r3, #32
 800a092:	bfc1      	itttt	gt
 800a094:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a098:	409f      	lslgt	r7, r3
 800a09a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a09e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a0a2:	bfd6      	itet	le
 800a0a4:	f1c3 0320 	rsble	r3, r3, #32
 800a0a8:	ea47 0003 	orrgt.w	r0, r7, r3
 800a0ac:	fa04 f003 	lslle.w	r0, r4, r3
 800a0b0:	f7f6 fa50 	bl	8000554 <__aeabi_ui2d>
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a0ba:	3e01      	subs	r6, #1
 800a0bc:	9214      	str	r2, [sp, #80]	@ 0x50
 800a0be:	e777      	b.n	8009fb0 <_dtoa_r+0x100>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e7b8      	b.n	800a036 <_dtoa_r+0x186>
 800a0c4:	9012      	str	r0, [sp, #72]	@ 0x48
 800a0c6:	e7b7      	b.n	800a038 <_dtoa_r+0x188>
 800a0c8:	427b      	negs	r3, r7
 800a0ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	eba8 0807 	sub.w	r8, r8, r7
 800a0d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a0d4:	e7c4      	b.n	800a060 <_dtoa_r+0x1b0>
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	dc35      	bgt.n	800a14c <_dtoa_r+0x29c>
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	9300      	str	r3, [sp, #0]
 800a0e4:	9307      	str	r3, [sp, #28]
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a0ea:	e00b      	b.n	800a104 <_dtoa_r+0x254>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e7f3      	b.n	800a0d8 <_dtoa_r+0x228>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0f6:	18fb      	adds	r3, r7, r3
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	9307      	str	r3, [sp, #28]
 800a100:	bfb8      	it	lt
 800a102:	2301      	movlt	r3, #1
 800a104:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a108:	2100      	movs	r1, #0
 800a10a:	2204      	movs	r2, #4
 800a10c:	f102 0514 	add.w	r5, r2, #20
 800a110:	429d      	cmp	r5, r3
 800a112:	d91f      	bls.n	800a154 <_dtoa_r+0x2a4>
 800a114:	6041      	str	r1, [r0, #4]
 800a116:	4658      	mov	r0, fp
 800a118:	f000 fd8e 	bl	800ac38 <_Balloc>
 800a11c:	4682      	mov	sl, r0
 800a11e:	2800      	cmp	r0, #0
 800a120:	d13c      	bne.n	800a19c <_dtoa_r+0x2ec>
 800a122:	4b1b      	ldr	r3, [pc, #108]	@ (800a190 <_dtoa_r+0x2e0>)
 800a124:	4602      	mov	r2, r0
 800a126:	f240 11af 	movw	r1, #431	@ 0x1af
 800a12a:	e6d8      	b.n	8009ede <_dtoa_r+0x2e>
 800a12c:	2301      	movs	r3, #1
 800a12e:	e7e0      	b.n	800a0f2 <_dtoa_r+0x242>
 800a130:	2401      	movs	r4, #1
 800a132:	2300      	movs	r3, #0
 800a134:	9309      	str	r3, [sp, #36]	@ 0x24
 800a136:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a138:	f04f 33ff 	mov.w	r3, #4294967295
 800a13c:	9300      	str	r3, [sp, #0]
 800a13e:	9307      	str	r3, [sp, #28]
 800a140:	2200      	movs	r2, #0
 800a142:	2312      	movs	r3, #18
 800a144:	e7d0      	b.n	800a0e8 <_dtoa_r+0x238>
 800a146:	2301      	movs	r3, #1
 800a148:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a14a:	e7f5      	b.n	800a138 <_dtoa_r+0x288>
 800a14c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	9307      	str	r3, [sp, #28]
 800a152:	e7d7      	b.n	800a104 <_dtoa_r+0x254>
 800a154:	3101      	adds	r1, #1
 800a156:	0052      	lsls	r2, r2, #1
 800a158:	e7d8      	b.n	800a10c <_dtoa_r+0x25c>
 800a15a:	bf00      	nop
 800a15c:	f3af 8000 	nop.w
 800a160:	636f4361 	.word	0x636f4361
 800a164:	3fd287a7 	.word	0x3fd287a7
 800a168:	8b60c8b3 	.word	0x8b60c8b3
 800a16c:	3fc68a28 	.word	0x3fc68a28
 800a170:	509f79fb 	.word	0x509f79fb
 800a174:	3fd34413 	.word	0x3fd34413
 800a178:	0800d50e 	.word	0x0800d50e
 800a17c:	0800d525 	.word	0x0800d525
 800a180:	7ff00000 	.word	0x7ff00000
 800a184:	0800d4d9 	.word	0x0800d4d9
 800a188:	3ff80000 	.word	0x3ff80000
 800a18c:	0800d620 	.word	0x0800d620
 800a190:	0800d57d 	.word	0x0800d57d
 800a194:	0800d50a 	.word	0x0800d50a
 800a198:	0800d4d8 	.word	0x0800d4d8
 800a19c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a1a0:	6018      	str	r0, [r3, #0]
 800a1a2:	9b07      	ldr	r3, [sp, #28]
 800a1a4:	2b0e      	cmp	r3, #14
 800a1a6:	f200 80a4 	bhi.w	800a2f2 <_dtoa_r+0x442>
 800a1aa:	2c00      	cmp	r4, #0
 800a1ac:	f000 80a1 	beq.w	800a2f2 <_dtoa_r+0x442>
 800a1b0:	2f00      	cmp	r7, #0
 800a1b2:	dd33      	ble.n	800a21c <_dtoa_r+0x36c>
 800a1b4:	4bad      	ldr	r3, [pc, #692]	@ (800a46c <_dtoa_r+0x5bc>)
 800a1b6:	f007 020f 	and.w	r2, r7, #15
 800a1ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1be:	ed93 7b00 	vldr	d7, [r3]
 800a1c2:	05f8      	lsls	r0, r7, #23
 800a1c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a1c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a1cc:	d516      	bpl.n	800a1fc <_dtoa_r+0x34c>
 800a1ce:	4ba8      	ldr	r3, [pc, #672]	@ (800a470 <_dtoa_r+0x5c0>)
 800a1d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a1d8:	f7f6 fb60 	bl	800089c <__aeabi_ddiv>
 800a1dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1e0:	f004 040f 	and.w	r4, r4, #15
 800a1e4:	2603      	movs	r6, #3
 800a1e6:	4da2      	ldr	r5, [pc, #648]	@ (800a470 <_dtoa_r+0x5c0>)
 800a1e8:	b954      	cbnz	r4, 800a200 <_dtoa_r+0x350>
 800a1ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1f2:	f7f6 fb53 	bl	800089c <__aeabi_ddiv>
 800a1f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1fa:	e028      	b.n	800a24e <_dtoa_r+0x39e>
 800a1fc:	2602      	movs	r6, #2
 800a1fe:	e7f2      	b.n	800a1e6 <_dtoa_r+0x336>
 800a200:	07e1      	lsls	r1, r4, #31
 800a202:	d508      	bpl.n	800a216 <_dtoa_r+0x366>
 800a204:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a208:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a20c:	f7f6 fa1c 	bl	8000648 <__aeabi_dmul>
 800a210:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a214:	3601      	adds	r6, #1
 800a216:	1064      	asrs	r4, r4, #1
 800a218:	3508      	adds	r5, #8
 800a21a:	e7e5      	b.n	800a1e8 <_dtoa_r+0x338>
 800a21c:	f000 80d2 	beq.w	800a3c4 <_dtoa_r+0x514>
 800a220:	427c      	negs	r4, r7
 800a222:	4b92      	ldr	r3, [pc, #584]	@ (800a46c <_dtoa_r+0x5bc>)
 800a224:	4d92      	ldr	r5, [pc, #584]	@ (800a470 <_dtoa_r+0x5c0>)
 800a226:	f004 020f 	and.w	r2, r4, #15
 800a22a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a236:	f7f6 fa07 	bl	8000648 <__aeabi_dmul>
 800a23a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a23e:	1124      	asrs	r4, r4, #4
 800a240:	2300      	movs	r3, #0
 800a242:	2602      	movs	r6, #2
 800a244:	2c00      	cmp	r4, #0
 800a246:	f040 80b2 	bne.w	800a3ae <_dtoa_r+0x4fe>
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d1d3      	bne.n	800a1f6 <_dtoa_r+0x346>
 800a24e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a250:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a254:	2b00      	cmp	r3, #0
 800a256:	f000 80b7 	beq.w	800a3c8 <_dtoa_r+0x518>
 800a25a:	4b86      	ldr	r3, [pc, #536]	@ (800a474 <_dtoa_r+0x5c4>)
 800a25c:	2200      	movs	r2, #0
 800a25e:	4620      	mov	r0, r4
 800a260:	4629      	mov	r1, r5
 800a262:	f7f6 fc63 	bl	8000b2c <__aeabi_dcmplt>
 800a266:	2800      	cmp	r0, #0
 800a268:	f000 80ae 	beq.w	800a3c8 <_dtoa_r+0x518>
 800a26c:	9b07      	ldr	r3, [sp, #28]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f000 80aa 	beq.w	800a3c8 <_dtoa_r+0x518>
 800a274:	9b00      	ldr	r3, [sp, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	dd37      	ble.n	800a2ea <_dtoa_r+0x43a>
 800a27a:	1e7b      	subs	r3, r7, #1
 800a27c:	9304      	str	r3, [sp, #16]
 800a27e:	4620      	mov	r0, r4
 800a280:	4b7d      	ldr	r3, [pc, #500]	@ (800a478 <_dtoa_r+0x5c8>)
 800a282:	2200      	movs	r2, #0
 800a284:	4629      	mov	r1, r5
 800a286:	f7f6 f9df 	bl	8000648 <__aeabi_dmul>
 800a28a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a28e:	9c00      	ldr	r4, [sp, #0]
 800a290:	3601      	adds	r6, #1
 800a292:	4630      	mov	r0, r6
 800a294:	f7f6 f96e 	bl	8000574 <__aeabi_i2d>
 800a298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a29c:	f7f6 f9d4 	bl	8000648 <__aeabi_dmul>
 800a2a0:	4b76      	ldr	r3, [pc, #472]	@ (800a47c <_dtoa_r+0x5cc>)
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f7f6 f81a 	bl	80002dc <__adddf3>
 800a2a8:	4605      	mov	r5, r0
 800a2aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a2ae:	2c00      	cmp	r4, #0
 800a2b0:	f040 808d 	bne.w	800a3ce <_dtoa_r+0x51e>
 800a2b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2b8:	4b71      	ldr	r3, [pc, #452]	@ (800a480 <_dtoa_r+0x5d0>)
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f7f6 f80c 	bl	80002d8 <__aeabi_dsub>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a2c8:	462a      	mov	r2, r5
 800a2ca:	4633      	mov	r3, r6
 800a2cc:	f7f6 fc4c 	bl	8000b68 <__aeabi_dcmpgt>
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	f040 828b 	bne.w	800a7ec <_dtoa_r+0x93c>
 800a2d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2da:	462a      	mov	r2, r5
 800a2dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a2e0:	f7f6 fc24 	bl	8000b2c <__aeabi_dcmplt>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	f040 8128 	bne.w	800a53a <_dtoa_r+0x68a>
 800a2ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a2ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a2f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f2c0 815a 	blt.w	800a5ae <_dtoa_r+0x6fe>
 800a2fa:	2f0e      	cmp	r7, #14
 800a2fc:	f300 8157 	bgt.w	800a5ae <_dtoa_r+0x6fe>
 800a300:	4b5a      	ldr	r3, [pc, #360]	@ (800a46c <_dtoa_r+0x5bc>)
 800a302:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a306:	ed93 7b00 	vldr	d7, [r3]
 800a30a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	ed8d 7b00 	vstr	d7, [sp]
 800a312:	da03      	bge.n	800a31c <_dtoa_r+0x46c>
 800a314:	9b07      	ldr	r3, [sp, #28]
 800a316:	2b00      	cmp	r3, #0
 800a318:	f340 8101 	ble.w	800a51e <_dtoa_r+0x66e>
 800a31c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a320:	4656      	mov	r6, sl
 800a322:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a326:	4620      	mov	r0, r4
 800a328:	4629      	mov	r1, r5
 800a32a:	f7f6 fab7 	bl	800089c <__aeabi_ddiv>
 800a32e:	f7f6 fc3b 	bl	8000ba8 <__aeabi_d2iz>
 800a332:	4680      	mov	r8, r0
 800a334:	f7f6 f91e 	bl	8000574 <__aeabi_i2d>
 800a338:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a33c:	f7f6 f984 	bl	8000648 <__aeabi_dmul>
 800a340:	4602      	mov	r2, r0
 800a342:	460b      	mov	r3, r1
 800a344:	4620      	mov	r0, r4
 800a346:	4629      	mov	r1, r5
 800a348:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a34c:	f7f5 ffc4 	bl	80002d8 <__aeabi_dsub>
 800a350:	f806 4b01 	strb.w	r4, [r6], #1
 800a354:	9d07      	ldr	r5, [sp, #28]
 800a356:	eba6 040a 	sub.w	r4, r6, sl
 800a35a:	42a5      	cmp	r5, r4
 800a35c:	4602      	mov	r2, r0
 800a35e:	460b      	mov	r3, r1
 800a360:	f040 8117 	bne.w	800a592 <_dtoa_r+0x6e2>
 800a364:	f7f5 ffba 	bl	80002dc <__adddf3>
 800a368:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a36c:	4604      	mov	r4, r0
 800a36e:	460d      	mov	r5, r1
 800a370:	f7f6 fbfa 	bl	8000b68 <__aeabi_dcmpgt>
 800a374:	2800      	cmp	r0, #0
 800a376:	f040 80f9 	bne.w	800a56c <_dtoa_r+0x6bc>
 800a37a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a37e:	4620      	mov	r0, r4
 800a380:	4629      	mov	r1, r5
 800a382:	f7f6 fbc9 	bl	8000b18 <__aeabi_dcmpeq>
 800a386:	b118      	cbz	r0, 800a390 <_dtoa_r+0x4e0>
 800a388:	f018 0f01 	tst.w	r8, #1
 800a38c:	f040 80ee 	bne.w	800a56c <_dtoa_r+0x6bc>
 800a390:	4649      	mov	r1, r9
 800a392:	4658      	mov	r0, fp
 800a394:	f000 fc90 	bl	800acb8 <_Bfree>
 800a398:	2300      	movs	r3, #0
 800a39a:	7033      	strb	r3, [r6, #0]
 800a39c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a39e:	3701      	adds	r7, #1
 800a3a0:	601f      	str	r7, [r3, #0]
 800a3a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f000 831d 	beq.w	800a9e4 <_dtoa_r+0xb34>
 800a3aa:	601e      	str	r6, [r3, #0]
 800a3ac:	e31a      	b.n	800a9e4 <_dtoa_r+0xb34>
 800a3ae:	07e2      	lsls	r2, r4, #31
 800a3b0:	d505      	bpl.n	800a3be <_dtoa_r+0x50e>
 800a3b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a3b6:	f7f6 f947 	bl	8000648 <__aeabi_dmul>
 800a3ba:	3601      	adds	r6, #1
 800a3bc:	2301      	movs	r3, #1
 800a3be:	1064      	asrs	r4, r4, #1
 800a3c0:	3508      	adds	r5, #8
 800a3c2:	e73f      	b.n	800a244 <_dtoa_r+0x394>
 800a3c4:	2602      	movs	r6, #2
 800a3c6:	e742      	b.n	800a24e <_dtoa_r+0x39e>
 800a3c8:	9c07      	ldr	r4, [sp, #28]
 800a3ca:	9704      	str	r7, [sp, #16]
 800a3cc:	e761      	b.n	800a292 <_dtoa_r+0x3e2>
 800a3ce:	4b27      	ldr	r3, [pc, #156]	@ (800a46c <_dtoa_r+0x5bc>)
 800a3d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a3d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a3da:	4454      	add	r4, sl
 800a3dc:	2900      	cmp	r1, #0
 800a3de:	d053      	beq.n	800a488 <_dtoa_r+0x5d8>
 800a3e0:	4928      	ldr	r1, [pc, #160]	@ (800a484 <_dtoa_r+0x5d4>)
 800a3e2:	2000      	movs	r0, #0
 800a3e4:	f7f6 fa5a 	bl	800089c <__aeabi_ddiv>
 800a3e8:	4633      	mov	r3, r6
 800a3ea:	462a      	mov	r2, r5
 800a3ec:	f7f5 ff74 	bl	80002d8 <__aeabi_dsub>
 800a3f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a3f4:	4656      	mov	r6, sl
 800a3f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3fa:	f7f6 fbd5 	bl	8000ba8 <__aeabi_d2iz>
 800a3fe:	4605      	mov	r5, r0
 800a400:	f7f6 f8b8 	bl	8000574 <__aeabi_i2d>
 800a404:	4602      	mov	r2, r0
 800a406:	460b      	mov	r3, r1
 800a408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a40c:	f7f5 ff64 	bl	80002d8 <__aeabi_dsub>
 800a410:	3530      	adds	r5, #48	@ 0x30
 800a412:	4602      	mov	r2, r0
 800a414:	460b      	mov	r3, r1
 800a416:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a41a:	f806 5b01 	strb.w	r5, [r6], #1
 800a41e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a422:	f7f6 fb83 	bl	8000b2c <__aeabi_dcmplt>
 800a426:	2800      	cmp	r0, #0
 800a428:	d171      	bne.n	800a50e <_dtoa_r+0x65e>
 800a42a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a42e:	4911      	ldr	r1, [pc, #68]	@ (800a474 <_dtoa_r+0x5c4>)
 800a430:	2000      	movs	r0, #0
 800a432:	f7f5 ff51 	bl	80002d8 <__aeabi_dsub>
 800a436:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a43a:	f7f6 fb77 	bl	8000b2c <__aeabi_dcmplt>
 800a43e:	2800      	cmp	r0, #0
 800a440:	f040 8095 	bne.w	800a56e <_dtoa_r+0x6be>
 800a444:	42a6      	cmp	r6, r4
 800a446:	f43f af50 	beq.w	800a2ea <_dtoa_r+0x43a>
 800a44a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a44e:	4b0a      	ldr	r3, [pc, #40]	@ (800a478 <_dtoa_r+0x5c8>)
 800a450:	2200      	movs	r2, #0
 800a452:	f7f6 f8f9 	bl	8000648 <__aeabi_dmul>
 800a456:	4b08      	ldr	r3, [pc, #32]	@ (800a478 <_dtoa_r+0x5c8>)
 800a458:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a45c:	2200      	movs	r2, #0
 800a45e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a462:	f7f6 f8f1 	bl	8000648 <__aeabi_dmul>
 800a466:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a46a:	e7c4      	b.n	800a3f6 <_dtoa_r+0x546>
 800a46c:	0800d620 	.word	0x0800d620
 800a470:	0800d5f8 	.word	0x0800d5f8
 800a474:	3ff00000 	.word	0x3ff00000
 800a478:	40240000 	.word	0x40240000
 800a47c:	401c0000 	.word	0x401c0000
 800a480:	40140000 	.word	0x40140000
 800a484:	3fe00000 	.word	0x3fe00000
 800a488:	4631      	mov	r1, r6
 800a48a:	4628      	mov	r0, r5
 800a48c:	f7f6 f8dc 	bl	8000648 <__aeabi_dmul>
 800a490:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a494:	9415      	str	r4, [sp, #84]	@ 0x54
 800a496:	4656      	mov	r6, sl
 800a498:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a49c:	f7f6 fb84 	bl	8000ba8 <__aeabi_d2iz>
 800a4a0:	4605      	mov	r5, r0
 800a4a2:	f7f6 f867 	bl	8000574 <__aeabi_i2d>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4ae:	f7f5 ff13 	bl	80002d8 <__aeabi_dsub>
 800a4b2:	3530      	adds	r5, #48	@ 0x30
 800a4b4:	f806 5b01 	strb.w	r5, [r6], #1
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	42a6      	cmp	r6, r4
 800a4be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a4c2:	f04f 0200 	mov.w	r2, #0
 800a4c6:	d124      	bne.n	800a512 <_dtoa_r+0x662>
 800a4c8:	4bac      	ldr	r3, [pc, #688]	@ (800a77c <_dtoa_r+0x8cc>)
 800a4ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a4ce:	f7f5 ff05 	bl	80002dc <__adddf3>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4da:	f7f6 fb45 	bl	8000b68 <__aeabi_dcmpgt>
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	d145      	bne.n	800a56e <_dtoa_r+0x6be>
 800a4e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a4e6:	49a5      	ldr	r1, [pc, #660]	@ (800a77c <_dtoa_r+0x8cc>)
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	f7f5 fef5 	bl	80002d8 <__aeabi_dsub>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4f6:	f7f6 fb19 	bl	8000b2c <__aeabi_dcmplt>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	f43f aef5 	beq.w	800a2ea <_dtoa_r+0x43a>
 800a500:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a502:	1e73      	subs	r3, r6, #1
 800a504:	9315      	str	r3, [sp, #84]	@ 0x54
 800a506:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a50a:	2b30      	cmp	r3, #48	@ 0x30
 800a50c:	d0f8      	beq.n	800a500 <_dtoa_r+0x650>
 800a50e:	9f04      	ldr	r7, [sp, #16]
 800a510:	e73e      	b.n	800a390 <_dtoa_r+0x4e0>
 800a512:	4b9b      	ldr	r3, [pc, #620]	@ (800a780 <_dtoa_r+0x8d0>)
 800a514:	f7f6 f898 	bl	8000648 <__aeabi_dmul>
 800a518:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a51c:	e7bc      	b.n	800a498 <_dtoa_r+0x5e8>
 800a51e:	d10c      	bne.n	800a53a <_dtoa_r+0x68a>
 800a520:	4b98      	ldr	r3, [pc, #608]	@ (800a784 <_dtoa_r+0x8d4>)
 800a522:	2200      	movs	r2, #0
 800a524:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a528:	f7f6 f88e 	bl	8000648 <__aeabi_dmul>
 800a52c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a530:	f7f6 fb10 	bl	8000b54 <__aeabi_dcmpge>
 800a534:	2800      	cmp	r0, #0
 800a536:	f000 8157 	beq.w	800a7e8 <_dtoa_r+0x938>
 800a53a:	2400      	movs	r4, #0
 800a53c:	4625      	mov	r5, r4
 800a53e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a540:	43db      	mvns	r3, r3
 800a542:	9304      	str	r3, [sp, #16]
 800a544:	4656      	mov	r6, sl
 800a546:	2700      	movs	r7, #0
 800a548:	4621      	mov	r1, r4
 800a54a:	4658      	mov	r0, fp
 800a54c:	f000 fbb4 	bl	800acb8 <_Bfree>
 800a550:	2d00      	cmp	r5, #0
 800a552:	d0dc      	beq.n	800a50e <_dtoa_r+0x65e>
 800a554:	b12f      	cbz	r7, 800a562 <_dtoa_r+0x6b2>
 800a556:	42af      	cmp	r7, r5
 800a558:	d003      	beq.n	800a562 <_dtoa_r+0x6b2>
 800a55a:	4639      	mov	r1, r7
 800a55c:	4658      	mov	r0, fp
 800a55e:	f000 fbab 	bl	800acb8 <_Bfree>
 800a562:	4629      	mov	r1, r5
 800a564:	4658      	mov	r0, fp
 800a566:	f000 fba7 	bl	800acb8 <_Bfree>
 800a56a:	e7d0      	b.n	800a50e <_dtoa_r+0x65e>
 800a56c:	9704      	str	r7, [sp, #16]
 800a56e:	4633      	mov	r3, r6
 800a570:	461e      	mov	r6, r3
 800a572:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a576:	2a39      	cmp	r2, #57	@ 0x39
 800a578:	d107      	bne.n	800a58a <_dtoa_r+0x6da>
 800a57a:	459a      	cmp	sl, r3
 800a57c:	d1f8      	bne.n	800a570 <_dtoa_r+0x6c0>
 800a57e:	9a04      	ldr	r2, [sp, #16]
 800a580:	3201      	adds	r2, #1
 800a582:	9204      	str	r2, [sp, #16]
 800a584:	2230      	movs	r2, #48	@ 0x30
 800a586:	f88a 2000 	strb.w	r2, [sl]
 800a58a:	781a      	ldrb	r2, [r3, #0]
 800a58c:	3201      	adds	r2, #1
 800a58e:	701a      	strb	r2, [r3, #0]
 800a590:	e7bd      	b.n	800a50e <_dtoa_r+0x65e>
 800a592:	4b7b      	ldr	r3, [pc, #492]	@ (800a780 <_dtoa_r+0x8d0>)
 800a594:	2200      	movs	r2, #0
 800a596:	f7f6 f857 	bl	8000648 <__aeabi_dmul>
 800a59a:	2200      	movs	r2, #0
 800a59c:	2300      	movs	r3, #0
 800a59e:	4604      	mov	r4, r0
 800a5a0:	460d      	mov	r5, r1
 800a5a2:	f7f6 fab9 	bl	8000b18 <__aeabi_dcmpeq>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	f43f aebb 	beq.w	800a322 <_dtoa_r+0x472>
 800a5ac:	e6f0      	b.n	800a390 <_dtoa_r+0x4e0>
 800a5ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a5b0:	2a00      	cmp	r2, #0
 800a5b2:	f000 80db 	beq.w	800a76c <_dtoa_r+0x8bc>
 800a5b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5b8:	2a01      	cmp	r2, #1
 800a5ba:	f300 80bf 	bgt.w	800a73c <_dtoa_r+0x88c>
 800a5be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a5c0:	2a00      	cmp	r2, #0
 800a5c2:	f000 80b7 	beq.w	800a734 <_dtoa_r+0x884>
 800a5c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a5ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a5cc:	4646      	mov	r6, r8
 800a5ce:	9a08      	ldr	r2, [sp, #32]
 800a5d0:	2101      	movs	r1, #1
 800a5d2:	441a      	add	r2, r3
 800a5d4:	4658      	mov	r0, fp
 800a5d6:	4498      	add	r8, r3
 800a5d8:	9208      	str	r2, [sp, #32]
 800a5da:	f000 fc6b 	bl	800aeb4 <__i2b>
 800a5de:	4605      	mov	r5, r0
 800a5e0:	b15e      	cbz	r6, 800a5fa <_dtoa_r+0x74a>
 800a5e2:	9b08      	ldr	r3, [sp, #32]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	dd08      	ble.n	800a5fa <_dtoa_r+0x74a>
 800a5e8:	42b3      	cmp	r3, r6
 800a5ea:	9a08      	ldr	r2, [sp, #32]
 800a5ec:	bfa8      	it	ge
 800a5ee:	4633      	movge	r3, r6
 800a5f0:	eba8 0803 	sub.w	r8, r8, r3
 800a5f4:	1af6      	subs	r6, r6, r3
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	9308      	str	r3, [sp, #32]
 800a5fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5fc:	b1f3      	cbz	r3, 800a63c <_dtoa_r+0x78c>
 800a5fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a600:	2b00      	cmp	r3, #0
 800a602:	f000 80b7 	beq.w	800a774 <_dtoa_r+0x8c4>
 800a606:	b18c      	cbz	r4, 800a62c <_dtoa_r+0x77c>
 800a608:	4629      	mov	r1, r5
 800a60a:	4622      	mov	r2, r4
 800a60c:	4658      	mov	r0, fp
 800a60e:	f000 fd11 	bl	800b034 <__pow5mult>
 800a612:	464a      	mov	r2, r9
 800a614:	4601      	mov	r1, r0
 800a616:	4605      	mov	r5, r0
 800a618:	4658      	mov	r0, fp
 800a61a:	f000 fc61 	bl	800aee0 <__multiply>
 800a61e:	4649      	mov	r1, r9
 800a620:	9004      	str	r0, [sp, #16]
 800a622:	4658      	mov	r0, fp
 800a624:	f000 fb48 	bl	800acb8 <_Bfree>
 800a628:	9b04      	ldr	r3, [sp, #16]
 800a62a:	4699      	mov	r9, r3
 800a62c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a62e:	1b1a      	subs	r2, r3, r4
 800a630:	d004      	beq.n	800a63c <_dtoa_r+0x78c>
 800a632:	4649      	mov	r1, r9
 800a634:	4658      	mov	r0, fp
 800a636:	f000 fcfd 	bl	800b034 <__pow5mult>
 800a63a:	4681      	mov	r9, r0
 800a63c:	2101      	movs	r1, #1
 800a63e:	4658      	mov	r0, fp
 800a640:	f000 fc38 	bl	800aeb4 <__i2b>
 800a644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a646:	4604      	mov	r4, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f000 81cf 	beq.w	800a9ec <_dtoa_r+0xb3c>
 800a64e:	461a      	mov	r2, r3
 800a650:	4601      	mov	r1, r0
 800a652:	4658      	mov	r0, fp
 800a654:	f000 fcee 	bl	800b034 <__pow5mult>
 800a658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	4604      	mov	r4, r0
 800a65e:	f300 8095 	bgt.w	800a78c <_dtoa_r+0x8dc>
 800a662:	9b02      	ldr	r3, [sp, #8]
 800a664:	2b00      	cmp	r3, #0
 800a666:	f040 8087 	bne.w	800a778 <_dtoa_r+0x8c8>
 800a66a:	9b03      	ldr	r3, [sp, #12]
 800a66c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a670:	2b00      	cmp	r3, #0
 800a672:	f040 8089 	bne.w	800a788 <_dtoa_r+0x8d8>
 800a676:	9b03      	ldr	r3, [sp, #12]
 800a678:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a67c:	0d1b      	lsrs	r3, r3, #20
 800a67e:	051b      	lsls	r3, r3, #20
 800a680:	b12b      	cbz	r3, 800a68e <_dtoa_r+0x7de>
 800a682:	9b08      	ldr	r3, [sp, #32]
 800a684:	3301      	adds	r3, #1
 800a686:	9308      	str	r3, [sp, #32]
 800a688:	f108 0801 	add.w	r8, r8, #1
 800a68c:	2301      	movs	r3, #1
 800a68e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a690:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a692:	2b00      	cmp	r3, #0
 800a694:	f000 81b0 	beq.w	800a9f8 <_dtoa_r+0xb48>
 800a698:	6923      	ldr	r3, [r4, #16]
 800a69a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a69e:	6918      	ldr	r0, [r3, #16]
 800a6a0:	f000 fbbc 	bl	800ae1c <__hi0bits>
 800a6a4:	f1c0 0020 	rsb	r0, r0, #32
 800a6a8:	9b08      	ldr	r3, [sp, #32]
 800a6aa:	4418      	add	r0, r3
 800a6ac:	f010 001f 	ands.w	r0, r0, #31
 800a6b0:	d077      	beq.n	800a7a2 <_dtoa_r+0x8f2>
 800a6b2:	f1c0 0320 	rsb	r3, r0, #32
 800a6b6:	2b04      	cmp	r3, #4
 800a6b8:	dd6b      	ble.n	800a792 <_dtoa_r+0x8e2>
 800a6ba:	9b08      	ldr	r3, [sp, #32]
 800a6bc:	f1c0 001c 	rsb	r0, r0, #28
 800a6c0:	4403      	add	r3, r0
 800a6c2:	4480      	add	r8, r0
 800a6c4:	4406      	add	r6, r0
 800a6c6:	9308      	str	r3, [sp, #32]
 800a6c8:	f1b8 0f00 	cmp.w	r8, #0
 800a6cc:	dd05      	ble.n	800a6da <_dtoa_r+0x82a>
 800a6ce:	4649      	mov	r1, r9
 800a6d0:	4642      	mov	r2, r8
 800a6d2:	4658      	mov	r0, fp
 800a6d4:	f000 fd08 	bl	800b0e8 <__lshift>
 800a6d8:	4681      	mov	r9, r0
 800a6da:	9b08      	ldr	r3, [sp, #32]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	dd05      	ble.n	800a6ec <_dtoa_r+0x83c>
 800a6e0:	4621      	mov	r1, r4
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	4658      	mov	r0, fp
 800a6e6:	f000 fcff 	bl	800b0e8 <__lshift>
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d059      	beq.n	800a7a6 <_dtoa_r+0x8f6>
 800a6f2:	4621      	mov	r1, r4
 800a6f4:	4648      	mov	r0, r9
 800a6f6:	f000 fd63 	bl	800b1c0 <__mcmp>
 800a6fa:	2800      	cmp	r0, #0
 800a6fc:	da53      	bge.n	800a7a6 <_dtoa_r+0x8f6>
 800a6fe:	1e7b      	subs	r3, r7, #1
 800a700:	9304      	str	r3, [sp, #16]
 800a702:	4649      	mov	r1, r9
 800a704:	2300      	movs	r3, #0
 800a706:	220a      	movs	r2, #10
 800a708:	4658      	mov	r0, fp
 800a70a:	f000 faf7 	bl	800acfc <__multadd>
 800a70e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a710:	4681      	mov	r9, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	f000 8172 	beq.w	800a9fc <_dtoa_r+0xb4c>
 800a718:	2300      	movs	r3, #0
 800a71a:	4629      	mov	r1, r5
 800a71c:	220a      	movs	r2, #10
 800a71e:	4658      	mov	r0, fp
 800a720:	f000 faec 	bl	800acfc <__multadd>
 800a724:	9b00      	ldr	r3, [sp, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	4605      	mov	r5, r0
 800a72a:	dc67      	bgt.n	800a7fc <_dtoa_r+0x94c>
 800a72c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a72e:	2b02      	cmp	r3, #2
 800a730:	dc41      	bgt.n	800a7b6 <_dtoa_r+0x906>
 800a732:	e063      	b.n	800a7fc <_dtoa_r+0x94c>
 800a734:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a736:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a73a:	e746      	b.n	800a5ca <_dtoa_r+0x71a>
 800a73c:	9b07      	ldr	r3, [sp, #28]
 800a73e:	1e5c      	subs	r4, r3, #1
 800a740:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a742:	42a3      	cmp	r3, r4
 800a744:	bfbf      	itttt	lt
 800a746:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a748:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a74a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a74c:	1ae3      	sublt	r3, r4, r3
 800a74e:	bfb4      	ite	lt
 800a750:	18d2      	addlt	r2, r2, r3
 800a752:	1b1c      	subge	r4, r3, r4
 800a754:	9b07      	ldr	r3, [sp, #28]
 800a756:	bfbc      	itt	lt
 800a758:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a75a:	2400      	movlt	r4, #0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	bfb5      	itete	lt
 800a760:	eba8 0603 	sublt.w	r6, r8, r3
 800a764:	9b07      	ldrge	r3, [sp, #28]
 800a766:	2300      	movlt	r3, #0
 800a768:	4646      	movge	r6, r8
 800a76a:	e730      	b.n	800a5ce <_dtoa_r+0x71e>
 800a76c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a76e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a770:	4646      	mov	r6, r8
 800a772:	e735      	b.n	800a5e0 <_dtoa_r+0x730>
 800a774:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a776:	e75c      	b.n	800a632 <_dtoa_r+0x782>
 800a778:	2300      	movs	r3, #0
 800a77a:	e788      	b.n	800a68e <_dtoa_r+0x7de>
 800a77c:	3fe00000 	.word	0x3fe00000
 800a780:	40240000 	.word	0x40240000
 800a784:	40140000 	.word	0x40140000
 800a788:	9b02      	ldr	r3, [sp, #8]
 800a78a:	e780      	b.n	800a68e <_dtoa_r+0x7de>
 800a78c:	2300      	movs	r3, #0
 800a78e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a790:	e782      	b.n	800a698 <_dtoa_r+0x7e8>
 800a792:	d099      	beq.n	800a6c8 <_dtoa_r+0x818>
 800a794:	9a08      	ldr	r2, [sp, #32]
 800a796:	331c      	adds	r3, #28
 800a798:	441a      	add	r2, r3
 800a79a:	4498      	add	r8, r3
 800a79c:	441e      	add	r6, r3
 800a79e:	9208      	str	r2, [sp, #32]
 800a7a0:	e792      	b.n	800a6c8 <_dtoa_r+0x818>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	e7f6      	b.n	800a794 <_dtoa_r+0x8e4>
 800a7a6:	9b07      	ldr	r3, [sp, #28]
 800a7a8:	9704      	str	r7, [sp, #16]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	dc20      	bgt.n	800a7f0 <_dtoa_r+0x940>
 800a7ae:	9300      	str	r3, [sp, #0]
 800a7b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7b2:	2b02      	cmp	r3, #2
 800a7b4:	dd1e      	ble.n	800a7f4 <_dtoa_r+0x944>
 800a7b6:	9b00      	ldr	r3, [sp, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f47f aec0 	bne.w	800a53e <_dtoa_r+0x68e>
 800a7be:	4621      	mov	r1, r4
 800a7c0:	2205      	movs	r2, #5
 800a7c2:	4658      	mov	r0, fp
 800a7c4:	f000 fa9a 	bl	800acfc <__multadd>
 800a7c8:	4601      	mov	r1, r0
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	4648      	mov	r0, r9
 800a7ce:	f000 fcf7 	bl	800b1c0 <__mcmp>
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	f77f aeb3 	ble.w	800a53e <_dtoa_r+0x68e>
 800a7d8:	4656      	mov	r6, sl
 800a7da:	2331      	movs	r3, #49	@ 0x31
 800a7dc:	f806 3b01 	strb.w	r3, [r6], #1
 800a7e0:	9b04      	ldr	r3, [sp, #16]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	9304      	str	r3, [sp, #16]
 800a7e6:	e6ae      	b.n	800a546 <_dtoa_r+0x696>
 800a7e8:	9c07      	ldr	r4, [sp, #28]
 800a7ea:	9704      	str	r7, [sp, #16]
 800a7ec:	4625      	mov	r5, r4
 800a7ee:	e7f3      	b.n	800a7d8 <_dtoa_r+0x928>
 800a7f0:	9b07      	ldr	r3, [sp, #28]
 800a7f2:	9300      	str	r3, [sp, #0]
 800a7f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f000 8104 	beq.w	800aa04 <_dtoa_r+0xb54>
 800a7fc:	2e00      	cmp	r6, #0
 800a7fe:	dd05      	ble.n	800a80c <_dtoa_r+0x95c>
 800a800:	4629      	mov	r1, r5
 800a802:	4632      	mov	r2, r6
 800a804:	4658      	mov	r0, fp
 800a806:	f000 fc6f 	bl	800b0e8 <__lshift>
 800a80a:	4605      	mov	r5, r0
 800a80c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d05a      	beq.n	800a8c8 <_dtoa_r+0xa18>
 800a812:	6869      	ldr	r1, [r5, #4]
 800a814:	4658      	mov	r0, fp
 800a816:	f000 fa0f 	bl	800ac38 <_Balloc>
 800a81a:	4606      	mov	r6, r0
 800a81c:	b928      	cbnz	r0, 800a82a <_dtoa_r+0x97a>
 800a81e:	4b84      	ldr	r3, [pc, #528]	@ (800aa30 <_dtoa_r+0xb80>)
 800a820:	4602      	mov	r2, r0
 800a822:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a826:	f7ff bb5a 	b.w	8009ede <_dtoa_r+0x2e>
 800a82a:	692a      	ldr	r2, [r5, #16]
 800a82c:	3202      	adds	r2, #2
 800a82e:	0092      	lsls	r2, r2, #2
 800a830:	f105 010c 	add.w	r1, r5, #12
 800a834:	300c      	adds	r0, #12
 800a836:	f7ff fa9c 	bl	8009d72 <memcpy>
 800a83a:	2201      	movs	r2, #1
 800a83c:	4631      	mov	r1, r6
 800a83e:	4658      	mov	r0, fp
 800a840:	f000 fc52 	bl	800b0e8 <__lshift>
 800a844:	f10a 0301 	add.w	r3, sl, #1
 800a848:	9307      	str	r3, [sp, #28]
 800a84a:	9b00      	ldr	r3, [sp, #0]
 800a84c:	4453      	add	r3, sl
 800a84e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a850:	9b02      	ldr	r3, [sp, #8]
 800a852:	f003 0301 	and.w	r3, r3, #1
 800a856:	462f      	mov	r7, r5
 800a858:	930a      	str	r3, [sp, #40]	@ 0x28
 800a85a:	4605      	mov	r5, r0
 800a85c:	9b07      	ldr	r3, [sp, #28]
 800a85e:	4621      	mov	r1, r4
 800a860:	3b01      	subs	r3, #1
 800a862:	4648      	mov	r0, r9
 800a864:	9300      	str	r3, [sp, #0]
 800a866:	f7ff fa99 	bl	8009d9c <quorem>
 800a86a:	4639      	mov	r1, r7
 800a86c:	9002      	str	r0, [sp, #8]
 800a86e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a872:	4648      	mov	r0, r9
 800a874:	f000 fca4 	bl	800b1c0 <__mcmp>
 800a878:	462a      	mov	r2, r5
 800a87a:	9008      	str	r0, [sp, #32]
 800a87c:	4621      	mov	r1, r4
 800a87e:	4658      	mov	r0, fp
 800a880:	f000 fcba 	bl	800b1f8 <__mdiff>
 800a884:	68c2      	ldr	r2, [r0, #12]
 800a886:	4606      	mov	r6, r0
 800a888:	bb02      	cbnz	r2, 800a8cc <_dtoa_r+0xa1c>
 800a88a:	4601      	mov	r1, r0
 800a88c:	4648      	mov	r0, r9
 800a88e:	f000 fc97 	bl	800b1c0 <__mcmp>
 800a892:	4602      	mov	r2, r0
 800a894:	4631      	mov	r1, r6
 800a896:	4658      	mov	r0, fp
 800a898:	920e      	str	r2, [sp, #56]	@ 0x38
 800a89a:	f000 fa0d 	bl	800acb8 <_Bfree>
 800a89e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a8a2:	9e07      	ldr	r6, [sp, #28]
 800a8a4:	ea43 0102 	orr.w	r1, r3, r2
 800a8a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8aa:	4319      	orrs	r1, r3
 800a8ac:	d110      	bne.n	800a8d0 <_dtoa_r+0xa20>
 800a8ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a8b2:	d029      	beq.n	800a908 <_dtoa_r+0xa58>
 800a8b4:	9b08      	ldr	r3, [sp, #32]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	dd02      	ble.n	800a8c0 <_dtoa_r+0xa10>
 800a8ba:	9b02      	ldr	r3, [sp, #8]
 800a8bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a8c0:	9b00      	ldr	r3, [sp, #0]
 800a8c2:	f883 8000 	strb.w	r8, [r3]
 800a8c6:	e63f      	b.n	800a548 <_dtoa_r+0x698>
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	e7bb      	b.n	800a844 <_dtoa_r+0x994>
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	e7e1      	b.n	800a894 <_dtoa_r+0x9e4>
 800a8d0:	9b08      	ldr	r3, [sp, #32]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	db04      	blt.n	800a8e0 <_dtoa_r+0xa30>
 800a8d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a8d8:	430b      	orrs	r3, r1
 800a8da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a8dc:	430b      	orrs	r3, r1
 800a8de:	d120      	bne.n	800a922 <_dtoa_r+0xa72>
 800a8e0:	2a00      	cmp	r2, #0
 800a8e2:	dded      	ble.n	800a8c0 <_dtoa_r+0xa10>
 800a8e4:	4649      	mov	r1, r9
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	4658      	mov	r0, fp
 800a8ea:	f000 fbfd 	bl	800b0e8 <__lshift>
 800a8ee:	4621      	mov	r1, r4
 800a8f0:	4681      	mov	r9, r0
 800a8f2:	f000 fc65 	bl	800b1c0 <__mcmp>
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	dc03      	bgt.n	800a902 <_dtoa_r+0xa52>
 800a8fa:	d1e1      	bne.n	800a8c0 <_dtoa_r+0xa10>
 800a8fc:	f018 0f01 	tst.w	r8, #1
 800a900:	d0de      	beq.n	800a8c0 <_dtoa_r+0xa10>
 800a902:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a906:	d1d8      	bne.n	800a8ba <_dtoa_r+0xa0a>
 800a908:	9a00      	ldr	r2, [sp, #0]
 800a90a:	2339      	movs	r3, #57	@ 0x39
 800a90c:	7013      	strb	r3, [r2, #0]
 800a90e:	4633      	mov	r3, r6
 800a910:	461e      	mov	r6, r3
 800a912:	3b01      	subs	r3, #1
 800a914:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a918:	2a39      	cmp	r2, #57	@ 0x39
 800a91a:	d052      	beq.n	800a9c2 <_dtoa_r+0xb12>
 800a91c:	3201      	adds	r2, #1
 800a91e:	701a      	strb	r2, [r3, #0]
 800a920:	e612      	b.n	800a548 <_dtoa_r+0x698>
 800a922:	2a00      	cmp	r2, #0
 800a924:	dd07      	ble.n	800a936 <_dtoa_r+0xa86>
 800a926:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a92a:	d0ed      	beq.n	800a908 <_dtoa_r+0xa58>
 800a92c:	9a00      	ldr	r2, [sp, #0]
 800a92e:	f108 0301 	add.w	r3, r8, #1
 800a932:	7013      	strb	r3, [r2, #0]
 800a934:	e608      	b.n	800a548 <_dtoa_r+0x698>
 800a936:	9b07      	ldr	r3, [sp, #28]
 800a938:	9a07      	ldr	r2, [sp, #28]
 800a93a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a93e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a940:	4293      	cmp	r3, r2
 800a942:	d028      	beq.n	800a996 <_dtoa_r+0xae6>
 800a944:	4649      	mov	r1, r9
 800a946:	2300      	movs	r3, #0
 800a948:	220a      	movs	r2, #10
 800a94a:	4658      	mov	r0, fp
 800a94c:	f000 f9d6 	bl	800acfc <__multadd>
 800a950:	42af      	cmp	r7, r5
 800a952:	4681      	mov	r9, r0
 800a954:	f04f 0300 	mov.w	r3, #0
 800a958:	f04f 020a 	mov.w	r2, #10
 800a95c:	4639      	mov	r1, r7
 800a95e:	4658      	mov	r0, fp
 800a960:	d107      	bne.n	800a972 <_dtoa_r+0xac2>
 800a962:	f000 f9cb 	bl	800acfc <__multadd>
 800a966:	4607      	mov	r7, r0
 800a968:	4605      	mov	r5, r0
 800a96a:	9b07      	ldr	r3, [sp, #28]
 800a96c:	3301      	adds	r3, #1
 800a96e:	9307      	str	r3, [sp, #28]
 800a970:	e774      	b.n	800a85c <_dtoa_r+0x9ac>
 800a972:	f000 f9c3 	bl	800acfc <__multadd>
 800a976:	4629      	mov	r1, r5
 800a978:	4607      	mov	r7, r0
 800a97a:	2300      	movs	r3, #0
 800a97c:	220a      	movs	r2, #10
 800a97e:	4658      	mov	r0, fp
 800a980:	f000 f9bc 	bl	800acfc <__multadd>
 800a984:	4605      	mov	r5, r0
 800a986:	e7f0      	b.n	800a96a <_dtoa_r+0xaba>
 800a988:	9b00      	ldr	r3, [sp, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	bfcc      	ite	gt
 800a98e:	461e      	movgt	r6, r3
 800a990:	2601      	movle	r6, #1
 800a992:	4456      	add	r6, sl
 800a994:	2700      	movs	r7, #0
 800a996:	4649      	mov	r1, r9
 800a998:	2201      	movs	r2, #1
 800a99a:	4658      	mov	r0, fp
 800a99c:	f000 fba4 	bl	800b0e8 <__lshift>
 800a9a0:	4621      	mov	r1, r4
 800a9a2:	4681      	mov	r9, r0
 800a9a4:	f000 fc0c 	bl	800b1c0 <__mcmp>
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	dcb0      	bgt.n	800a90e <_dtoa_r+0xa5e>
 800a9ac:	d102      	bne.n	800a9b4 <_dtoa_r+0xb04>
 800a9ae:	f018 0f01 	tst.w	r8, #1
 800a9b2:	d1ac      	bne.n	800a90e <_dtoa_r+0xa5e>
 800a9b4:	4633      	mov	r3, r6
 800a9b6:	461e      	mov	r6, r3
 800a9b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9bc:	2a30      	cmp	r2, #48	@ 0x30
 800a9be:	d0fa      	beq.n	800a9b6 <_dtoa_r+0xb06>
 800a9c0:	e5c2      	b.n	800a548 <_dtoa_r+0x698>
 800a9c2:	459a      	cmp	sl, r3
 800a9c4:	d1a4      	bne.n	800a910 <_dtoa_r+0xa60>
 800a9c6:	9b04      	ldr	r3, [sp, #16]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	9304      	str	r3, [sp, #16]
 800a9cc:	2331      	movs	r3, #49	@ 0x31
 800a9ce:	f88a 3000 	strb.w	r3, [sl]
 800a9d2:	e5b9      	b.n	800a548 <_dtoa_r+0x698>
 800a9d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a9d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800aa34 <_dtoa_r+0xb84>
 800a9da:	b11b      	cbz	r3, 800a9e4 <_dtoa_r+0xb34>
 800a9dc:	f10a 0308 	add.w	r3, sl, #8
 800a9e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a9e2:	6013      	str	r3, [r2, #0]
 800a9e4:	4650      	mov	r0, sl
 800a9e6:	b019      	add	sp, #100	@ 0x64
 800a9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	f77f ae37 	ble.w	800a662 <_dtoa_r+0x7b2>
 800a9f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9f8:	2001      	movs	r0, #1
 800a9fa:	e655      	b.n	800a6a8 <_dtoa_r+0x7f8>
 800a9fc:	9b00      	ldr	r3, [sp, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	f77f aed6 	ble.w	800a7b0 <_dtoa_r+0x900>
 800aa04:	4656      	mov	r6, sl
 800aa06:	4621      	mov	r1, r4
 800aa08:	4648      	mov	r0, r9
 800aa0a:	f7ff f9c7 	bl	8009d9c <quorem>
 800aa0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800aa12:	f806 8b01 	strb.w	r8, [r6], #1
 800aa16:	9b00      	ldr	r3, [sp, #0]
 800aa18:	eba6 020a 	sub.w	r2, r6, sl
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	ddb3      	ble.n	800a988 <_dtoa_r+0xad8>
 800aa20:	4649      	mov	r1, r9
 800aa22:	2300      	movs	r3, #0
 800aa24:	220a      	movs	r2, #10
 800aa26:	4658      	mov	r0, fp
 800aa28:	f000 f968 	bl	800acfc <__multadd>
 800aa2c:	4681      	mov	r9, r0
 800aa2e:	e7ea      	b.n	800aa06 <_dtoa_r+0xb56>
 800aa30:	0800d57d 	.word	0x0800d57d
 800aa34:	0800d501 	.word	0x0800d501

0800aa38 <_free_r>:
 800aa38:	b538      	push	{r3, r4, r5, lr}
 800aa3a:	4605      	mov	r5, r0
 800aa3c:	2900      	cmp	r1, #0
 800aa3e:	d041      	beq.n	800aac4 <_free_r+0x8c>
 800aa40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa44:	1f0c      	subs	r4, r1, #4
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	bfb8      	it	lt
 800aa4a:	18e4      	addlt	r4, r4, r3
 800aa4c:	f000 f8e8 	bl	800ac20 <__malloc_lock>
 800aa50:	4a1d      	ldr	r2, [pc, #116]	@ (800aac8 <_free_r+0x90>)
 800aa52:	6813      	ldr	r3, [r2, #0]
 800aa54:	b933      	cbnz	r3, 800aa64 <_free_r+0x2c>
 800aa56:	6063      	str	r3, [r4, #4]
 800aa58:	6014      	str	r4, [r2, #0]
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa60:	f000 b8e4 	b.w	800ac2c <__malloc_unlock>
 800aa64:	42a3      	cmp	r3, r4
 800aa66:	d908      	bls.n	800aa7a <_free_r+0x42>
 800aa68:	6820      	ldr	r0, [r4, #0]
 800aa6a:	1821      	adds	r1, r4, r0
 800aa6c:	428b      	cmp	r3, r1
 800aa6e:	bf01      	itttt	eq
 800aa70:	6819      	ldreq	r1, [r3, #0]
 800aa72:	685b      	ldreq	r3, [r3, #4]
 800aa74:	1809      	addeq	r1, r1, r0
 800aa76:	6021      	streq	r1, [r4, #0]
 800aa78:	e7ed      	b.n	800aa56 <_free_r+0x1e>
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	b10b      	cbz	r3, 800aa84 <_free_r+0x4c>
 800aa80:	42a3      	cmp	r3, r4
 800aa82:	d9fa      	bls.n	800aa7a <_free_r+0x42>
 800aa84:	6811      	ldr	r1, [r2, #0]
 800aa86:	1850      	adds	r0, r2, r1
 800aa88:	42a0      	cmp	r0, r4
 800aa8a:	d10b      	bne.n	800aaa4 <_free_r+0x6c>
 800aa8c:	6820      	ldr	r0, [r4, #0]
 800aa8e:	4401      	add	r1, r0
 800aa90:	1850      	adds	r0, r2, r1
 800aa92:	4283      	cmp	r3, r0
 800aa94:	6011      	str	r1, [r2, #0]
 800aa96:	d1e0      	bne.n	800aa5a <_free_r+0x22>
 800aa98:	6818      	ldr	r0, [r3, #0]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	6053      	str	r3, [r2, #4]
 800aa9e:	4408      	add	r0, r1
 800aaa0:	6010      	str	r0, [r2, #0]
 800aaa2:	e7da      	b.n	800aa5a <_free_r+0x22>
 800aaa4:	d902      	bls.n	800aaac <_free_r+0x74>
 800aaa6:	230c      	movs	r3, #12
 800aaa8:	602b      	str	r3, [r5, #0]
 800aaaa:	e7d6      	b.n	800aa5a <_free_r+0x22>
 800aaac:	6820      	ldr	r0, [r4, #0]
 800aaae:	1821      	adds	r1, r4, r0
 800aab0:	428b      	cmp	r3, r1
 800aab2:	bf04      	itt	eq
 800aab4:	6819      	ldreq	r1, [r3, #0]
 800aab6:	685b      	ldreq	r3, [r3, #4]
 800aab8:	6063      	str	r3, [r4, #4]
 800aaba:	bf04      	itt	eq
 800aabc:	1809      	addeq	r1, r1, r0
 800aabe:	6021      	streq	r1, [r4, #0]
 800aac0:	6054      	str	r4, [r2, #4]
 800aac2:	e7ca      	b.n	800aa5a <_free_r+0x22>
 800aac4:	bd38      	pop	{r3, r4, r5, pc}
 800aac6:	bf00      	nop
 800aac8:	20004754 	.word	0x20004754

0800aacc <malloc>:
 800aacc:	4b02      	ldr	r3, [pc, #8]	@ (800aad8 <malloc+0xc>)
 800aace:	4601      	mov	r1, r0
 800aad0:	6818      	ldr	r0, [r3, #0]
 800aad2:	f000 b825 	b.w	800ab20 <_malloc_r>
 800aad6:	bf00      	nop
 800aad8:	2000001c 	.word	0x2000001c

0800aadc <sbrk_aligned>:
 800aadc:	b570      	push	{r4, r5, r6, lr}
 800aade:	4e0f      	ldr	r6, [pc, #60]	@ (800ab1c <sbrk_aligned+0x40>)
 800aae0:	460c      	mov	r4, r1
 800aae2:	6831      	ldr	r1, [r6, #0]
 800aae4:	4605      	mov	r5, r0
 800aae6:	b911      	cbnz	r1, 800aaee <sbrk_aligned+0x12>
 800aae8:	f001 ffd2 	bl	800ca90 <_sbrk_r>
 800aaec:	6030      	str	r0, [r6, #0]
 800aaee:	4621      	mov	r1, r4
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	f001 ffcd 	bl	800ca90 <_sbrk_r>
 800aaf6:	1c43      	adds	r3, r0, #1
 800aaf8:	d103      	bne.n	800ab02 <sbrk_aligned+0x26>
 800aafa:	f04f 34ff 	mov.w	r4, #4294967295
 800aafe:	4620      	mov	r0, r4
 800ab00:	bd70      	pop	{r4, r5, r6, pc}
 800ab02:	1cc4      	adds	r4, r0, #3
 800ab04:	f024 0403 	bic.w	r4, r4, #3
 800ab08:	42a0      	cmp	r0, r4
 800ab0a:	d0f8      	beq.n	800aafe <sbrk_aligned+0x22>
 800ab0c:	1a21      	subs	r1, r4, r0
 800ab0e:	4628      	mov	r0, r5
 800ab10:	f001 ffbe 	bl	800ca90 <_sbrk_r>
 800ab14:	3001      	adds	r0, #1
 800ab16:	d1f2      	bne.n	800aafe <sbrk_aligned+0x22>
 800ab18:	e7ef      	b.n	800aafa <sbrk_aligned+0x1e>
 800ab1a:	bf00      	nop
 800ab1c:	20004750 	.word	0x20004750

0800ab20 <_malloc_r>:
 800ab20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab24:	1ccd      	adds	r5, r1, #3
 800ab26:	f025 0503 	bic.w	r5, r5, #3
 800ab2a:	3508      	adds	r5, #8
 800ab2c:	2d0c      	cmp	r5, #12
 800ab2e:	bf38      	it	cc
 800ab30:	250c      	movcc	r5, #12
 800ab32:	2d00      	cmp	r5, #0
 800ab34:	4606      	mov	r6, r0
 800ab36:	db01      	blt.n	800ab3c <_malloc_r+0x1c>
 800ab38:	42a9      	cmp	r1, r5
 800ab3a:	d904      	bls.n	800ab46 <_malloc_r+0x26>
 800ab3c:	230c      	movs	r3, #12
 800ab3e:	6033      	str	r3, [r6, #0]
 800ab40:	2000      	movs	r0, #0
 800ab42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ac1c <_malloc_r+0xfc>
 800ab4a:	f000 f869 	bl	800ac20 <__malloc_lock>
 800ab4e:	f8d8 3000 	ldr.w	r3, [r8]
 800ab52:	461c      	mov	r4, r3
 800ab54:	bb44      	cbnz	r4, 800aba8 <_malloc_r+0x88>
 800ab56:	4629      	mov	r1, r5
 800ab58:	4630      	mov	r0, r6
 800ab5a:	f7ff ffbf 	bl	800aadc <sbrk_aligned>
 800ab5e:	1c43      	adds	r3, r0, #1
 800ab60:	4604      	mov	r4, r0
 800ab62:	d158      	bne.n	800ac16 <_malloc_r+0xf6>
 800ab64:	f8d8 4000 	ldr.w	r4, [r8]
 800ab68:	4627      	mov	r7, r4
 800ab6a:	2f00      	cmp	r7, #0
 800ab6c:	d143      	bne.n	800abf6 <_malloc_r+0xd6>
 800ab6e:	2c00      	cmp	r4, #0
 800ab70:	d04b      	beq.n	800ac0a <_malloc_r+0xea>
 800ab72:	6823      	ldr	r3, [r4, #0]
 800ab74:	4639      	mov	r1, r7
 800ab76:	4630      	mov	r0, r6
 800ab78:	eb04 0903 	add.w	r9, r4, r3
 800ab7c:	f001 ff88 	bl	800ca90 <_sbrk_r>
 800ab80:	4581      	cmp	r9, r0
 800ab82:	d142      	bne.n	800ac0a <_malloc_r+0xea>
 800ab84:	6821      	ldr	r1, [r4, #0]
 800ab86:	1a6d      	subs	r5, r5, r1
 800ab88:	4629      	mov	r1, r5
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	f7ff ffa6 	bl	800aadc <sbrk_aligned>
 800ab90:	3001      	adds	r0, #1
 800ab92:	d03a      	beq.n	800ac0a <_malloc_r+0xea>
 800ab94:	6823      	ldr	r3, [r4, #0]
 800ab96:	442b      	add	r3, r5
 800ab98:	6023      	str	r3, [r4, #0]
 800ab9a:	f8d8 3000 	ldr.w	r3, [r8]
 800ab9e:	685a      	ldr	r2, [r3, #4]
 800aba0:	bb62      	cbnz	r2, 800abfc <_malloc_r+0xdc>
 800aba2:	f8c8 7000 	str.w	r7, [r8]
 800aba6:	e00f      	b.n	800abc8 <_malloc_r+0xa8>
 800aba8:	6822      	ldr	r2, [r4, #0]
 800abaa:	1b52      	subs	r2, r2, r5
 800abac:	d420      	bmi.n	800abf0 <_malloc_r+0xd0>
 800abae:	2a0b      	cmp	r2, #11
 800abb0:	d917      	bls.n	800abe2 <_malloc_r+0xc2>
 800abb2:	1961      	adds	r1, r4, r5
 800abb4:	42a3      	cmp	r3, r4
 800abb6:	6025      	str	r5, [r4, #0]
 800abb8:	bf18      	it	ne
 800abba:	6059      	strne	r1, [r3, #4]
 800abbc:	6863      	ldr	r3, [r4, #4]
 800abbe:	bf08      	it	eq
 800abc0:	f8c8 1000 	streq.w	r1, [r8]
 800abc4:	5162      	str	r2, [r4, r5]
 800abc6:	604b      	str	r3, [r1, #4]
 800abc8:	4630      	mov	r0, r6
 800abca:	f000 f82f 	bl	800ac2c <__malloc_unlock>
 800abce:	f104 000b 	add.w	r0, r4, #11
 800abd2:	1d23      	adds	r3, r4, #4
 800abd4:	f020 0007 	bic.w	r0, r0, #7
 800abd8:	1ac2      	subs	r2, r0, r3
 800abda:	bf1c      	itt	ne
 800abdc:	1a1b      	subne	r3, r3, r0
 800abde:	50a3      	strne	r3, [r4, r2]
 800abe0:	e7af      	b.n	800ab42 <_malloc_r+0x22>
 800abe2:	6862      	ldr	r2, [r4, #4]
 800abe4:	42a3      	cmp	r3, r4
 800abe6:	bf0c      	ite	eq
 800abe8:	f8c8 2000 	streq.w	r2, [r8]
 800abec:	605a      	strne	r2, [r3, #4]
 800abee:	e7eb      	b.n	800abc8 <_malloc_r+0xa8>
 800abf0:	4623      	mov	r3, r4
 800abf2:	6864      	ldr	r4, [r4, #4]
 800abf4:	e7ae      	b.n	800ab54 <_malloc_r+0x34>
 800abf6:	463c      	mov	r4, r7
 800abf8:	687f      	ldr	r7, [r7, #4]
 800abfa:	e7b6      	b.n	800ab6a <_malloc_r+0x4a>
 800abfc:	461a      	mov	r2, r3
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	42a3      	cmp	r3, r4
 800ac02:	d1fb      	bne.n	800abfc <_malloc_r+0xdc>
 800ac04:	2300      	movs	r3, #0
 800ac06:	6053      	str	r3, [r2, #4]
 800ac08:	e7de      	b.n	800abc8 <_malloc_r+0xa8>
 800ac0a:	230c      	movs	r3, #12
 800ac0c:	6033      	str	r3, [r6, #0]
 800ac0e:	4630      	mov	r0, r6
 800ac10:	f000 f80c 	bl	800ac2c <__malloc_unlock>
 800ac14:	e794      	b.n	800ab40 <_malloc_r+0x20>
 800ac16:	6005      	str	r5, [r0, #0]
 800ac18:	e7d6      	b.n	800abc8 <_malloc_r+0xa8>
 800ac1a:	bf00      	nop
 800ac1c:	20004754 	.word	0x20004754

0800ac20 <__malloc_lock>:
 800ac20:	4801      	ldr	r0, [pc, #4]	@ (800ac28 <__malloc_lock+0x8>)
 800ac22:	f7ff b8a4 	b.w	8009d6e <__retarget_lock_acquire_recursive>
 800ac26:	bf00      	nop
 800ac28:	2000474c 	.word	0x2000474c

0800ac2c <__malloc_unlock>:
 800ac2c:	4801      	ldr	r0, [pc, #4]	@ (800ac34 <__malloc_unlock+0x8>)
 800ac2e:	f7ff b89f 	b.w	8009d70 <__retarget_lock_release_recursive>
 800ac32:	bf00      	nop
 800ac34:	2000474c 	.word	0x2000474c

0800ac38 <_Balloc>:
 800ac38:	b570      	push	{r4, r5, r6, lr}
 800ac3a:	69c6      	ldr	r6, [r0, #28]
 800ac3c:	4604      	mov	r4, r0
 800ac3e:	460d      	mov	r5, r1
 800ac40:	b976      	cbnz	r6, 800ac60 <_Balloc+0x28>
 800ac42:	2010      	movs	r0, #16
 800ac44:	f7ff ff42 	bl	800aacc <malloc>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	61e0      	str	r0, [r4, #28]
 800ac4c:	b920      	cbnz	r0, 800ac58 <_Balloc+0x20>
 800ac4e:	4b18      	ldr	r3, [pc, #96]	@ (800acb0 <_Balloc+0x78>)
 800ac50:	4818      	ldr	r0, [pc, #96]	@ (800acb4 <_Balloc+0x7c>)
 800ac52:	216b      	movs	r1, #107	@ 0x6b
 800ac54:	f001 ff34 	bl	800cac0 <__assert_func>
 800ac58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac5c:	6006      	str	r6, [r0, #0]
 800ac5e:	60c6      	str	r6, [r0, #12]
 800ac60:	69e6      	ldr	r6, [r4, #28]
 800ac62:	68f3      	ldr	r3, [r6, #12]
 800ac64:	b183      	cbz	r3, 800ac88 <_Balloc+0x50>
 800ac66:	69e3      	ldr	r3, [r4, #28]
 800ac68:	68db      	ldr	r3, [r3, #12]
 800ac6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac6e:	b9b8      	cbnz	r0, 800aca0 <_Balloc+0x68>
 800ac70:	2101      	movs	r1, #1
 800ac72:	fa01 f605 	lsl.w	r6, r1, r5
 800ac76:	1d72      	adds	r2, r6, #5
 800ac78:	0092      	lsls	r2, r2, #2
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f001 ff3e 	bl	800cafc <_calloc_r>
 800ac80:	b160      	cbz	r0, 800ac9c <_Balloc+0x64>
 800ac82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac86:	e00e      	b.n	800aca6 <_Balloc+0x6e>
 800ac88:	2221      	movs	r2, #33	@ 0x21
 800ac8a:	2104      	movs	r1, #4
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f001 ff35 	bl	800cafc <_calloc_r>
 800ac92:	69e3      	ldr	r3, [r4, #28]
 800ac94:	60f0      	str	r0, [r6, #12]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d1e4      	bne.n	800ac66 <_Balloc+0x2e>
 800ac9c:	2000      	movs	r0, #0
 800ac9e:	bd70      	pop	{r4, r5, r6, pc}
 800aca0:	6802      	ldr	r2, [r0, #0]
 800aca2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aca6:	2300      	movs	r3, #0
 800aca8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800acac:	e7f7      	b.n	800ac9e <_Balloc+0x66>
 800acae:	bf00      	nop
 800acb0:	0800d50e 	.word	0x0800d50e
 800acb4:	0800d58e 	.word	0x0800d58e

0800acb8 <_Bfree>:
 800acb8:	b570      	push	{r4, r5, r6, lr}
 800acba:	69c6      	ldr	r6, [r0, #28]
 800acbc:	4605      	mov	r5, r0
 800acbe:	460c      	mov	r4, r1
 800acc0:	b976      	cbnz	r6, 800ace0 <_Bfree+0x28>
 800acc2:	2010      	movs	r0, #16
 800acc4:	f7ff ff02 	bl	800aacc <malloc>
 800acc8:	4602      	mov	r2, r0
 800acca:	61e8      	str	r0, [r5, #28]
 800accc:	b920      	cbnz	r0, 800acd8 <_Bfree+0x20>
 800acce:	4b09      	ldr	r3, [pc, #36]	@ (800acf4 <_Bfree+0x3c>)
 800acd0:	4809      	ldr	r0, [pc, #36]	@ (800acf8 <_Bfree+0x40>)
 800acd2:	218f      	movs	r1, #143	@ 0x8f
 800acd4:	f001 fef4 	bl	800cac0 <__assert_func>
 800acd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acdc:	6006      	str	r6, [r0, #0]
 800acde:	60c6      	str	r6, [r0, #12]
 800ace0:	b13c      	cbz	r4, 800acf2 <_Bfree+0x3a>
 800ace2:	69eb      	ldr	r3, [r5, #28]
 800ace4:	6862      	ldr	r2, [r4, #4]
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800acec:	6021      	str	r1, [r4, #0]
 800acee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800acf2:	bd70      	pop	{r4, r5, r6, pc}
 800acf4:	0800d50e 	.word	0x0800d50e
 800acf8:	0800d58e 	.word	0x0800d58e

0800acfc <__multadd>:
 800acfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad00:	690d      	ldr	r5, [r1, #16]
 800ad02:	4607      	mov	r7, r0
 800ad04:	460c      	mov	r4, r1
 800ad06:	461e      	mov	r6, r3
 800ad08:	f101 0c14 	add.w	ip, r1, #20
 800ad0c:	2000      	movs	r0, #0
 800ad0e:	f8dc 3000 	ldr.w	r3, [ip]
 800ad12:	b299      	uxth	r1, r3
 800ad14:	fb02 6101 	mla	r1, r2, r1, r6
 800ad18:	0c1e      	lsrs	r6, r3, #16
 800ad1a:	0c0b      	lsrs	r3, r1, #16
 800ad1c:	fb02 3306 	mla	r3, r2, r6, r3
 800ad20:	b289      	uxth	r1, r1
 800ad22:	3001      	adds	r0, #1
 800ad24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad28:	4285      	cmp	r5, r0
 800ad2a:	f84c 1b04 	str.w	r1, [ip], #4
 800ad2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad32:	dcec      	bgt.n	800ad0e <__multadd+0x12>
 800ad34:	b30e      	cbz	r6, 800ad7a <__multadd+0x7e>
 800ad36:	68a3      	ldr	r3, [r4, #8]
 800ad38:	42ab      	cmp	r3, r5
 800ad3a:	dc19      	bgt.n	800ad70 <__multadd+0x74>
 800ad3c:	6861      	ldr	r1, [r4, #4]
 800ad3e:	4638      	mov	r0, r7
 800ad40:	3101      	adds	r1, #1
 800ad42:	f7ff ff79 	bl	800ac38 <_Balloc>
 800ad46:	4680      	mov	r8, r0
 800ad48:	b928      	cbnz	r0, 800ad56 <__multadd+0x5a>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	4b0c      	ldr	r3, [pc, #48]	@ (800ad80 <__multadd+0x84>)
 800ad4e:	480d      	ldr	r0, [pc, #52]	@ (800ad84 <__multadd+0x88>)
 800ad50:	21ba      	movs	r1, #186	@ 0xba
 800ad52:	f001 feb5 	bl	800cac0 <__assert_func>
 800ad56:	6922      	ldr	r2, [r4, #16]
 800ad58:	3202      	adds	r2, #2
 800ad5a:	f104 010c 	add.w	r1, r4, #12
 800ad5e:	0092      	lsls	r2, r2, #2
 800ad60:	300c      	adds	r0, #12
 800ad62:	f7ff f806 	bl	8009d72 <memcpy>
 800ad66:	4621      	mov	r1, r4
 800ad68:	4638      	mov	r0, r7
 800ad6a:	f7ff ffa5 	bl	800acb8 <_Bfree>
 800ad6e:	4644      	mov	r4, r8
 800ad70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad74:	3501      	adds	r5, #1
 800ad76:	615e      	str	r6, [r3, #20]
 800ad78:	6125      	str	r5, [r4, #16]
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad80:	0800d57d 	.word	0x0800d57d
 800ad84:	0800d58e 	.word	0x0800d58e

0800ad88 <__s2b>:
 800ad88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad8c:	460c      	mov	r4, r1
 800ad8e:	4615      	mov	r5, r2
 800ad90:	461f      	mov	r7, r3
 800ad92:	2209      	movs	r2, #9
 800ad94:	3308      	adds	r3, #8
 800ad96:	4606      	mov	r6, r0
 800ad98:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	2201      	movs	r2, #1
 800ada0:	429a      	cmp	r2, r3
 800ada2:	db09      	blt.n	800adb8 <__s2b+0x30>
 800ada4:	4630      	mov	r0, r6
 800ada6:	f7ff ff47 	bl	800ac38 <_Balloc>
 800adaa:	b940      	cbnz	r0, 800adbe <__s2b+0x36>
 800adac:	4602      	mov	r2, r0
 800adae:	4b19      	ldr	r3, [pc, #100]	@ (800ae14 <__s2b+0x8c>)
 800adb0:	4819      	ldr	r0, [pc, #100]	@ (800ae18 <__s2b+0x90>)
 800adb2:	21d3      	movs	r1, #211	@ 0xd3
 800adb4:	f001 fe84 	bl	800cac0 <__assert_func>
 800adb8:	0052      	lsls	r2, r2, #1
 800adba:	3101      	adds	r1, #1
 800adbc:	e7f0      	b.n	800ada0 <__s2b+0x18>
 800adbe:	9b08      	ldr	r3, [sp, #32]
 800adc0:	6143      	str	r3, [r0, #20]
 800adc2:	2d09      	cmp	r5, #9
 800adc4:	f04f 0301 	mov.w	r3, #1
 800adc8:	6103      	str	r3, [r0, #16]
 800adca:	dd16      	ble.n	800adfa <__s2b+0x72>
 800adcc:	f104 0909 	add.w	r9, r4, #9
 800add0:	46c8      	mov	r8, r9
 800add2:	442c      	add	r4, r5
 800add4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800add8:	4601      	mov	r1, r0
 800adda:	3b30      	subs	r3, #48	@ 0x30
 800addc:	220a      	movs	r2, #10
 800adde:	4630      	mov	r0, r6
 800ade0:	f7ff ff8c 	bl	800acfc <__multadd>
 800ade4:	45a0      	cmp	r8, r4
 800ade6:	d1f5      	bne.n	800add4 <__s2b+0x4c>
 800ade8:	f1a5 0408 	sub.w	r4, r5, #8
 800adec:	444c      	add	r4, r9
 800adee:	1b2d      	subs	r5, r5, r4
 800adf0:	1963      	adds	r3, r4, r5
 800adf2:	42bb      	cmp	r3, r7
 800adf4:	db04      	blt.n	800ae00 <__s2b+0x78>
 800adf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adfa:	340a      	adds	r4, #10
 800adfc:	2509      	movs	r5, #9
 800adfe:	e7f6      	b.n	800adee <__s2b+0x66>
 800ae00:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae04:	4601      	mov	r1, r0
 800ae06:	3b30      	subs	r3, #48	@ 0x30
 800ae08:	220a      	movs	r2, #10
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	f7ff ff76 	bl	800acfc <__multadd>
 800ae10:	e7ee      	b.n	800adf0 <__s2b+0x68>
 800ae12:	bf00      	nop
 800ae14:	0800d57d 	.word	0x0800d57d
 800ae18:	0800d58e 	.word	0x0800d58e

0800ae1c <__hi0bits>:
 800ae1c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ae20:	4603      	mov	r3, r0
 800ae22:	bf36      	itet	cc
 800ae24:	0403      	lslcc	r3, r0, #16
 800ae26:	2000      	movcs	r0, #0
 800ae28:	2010      	movcc	r0, #16
 800ae2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ae2e:	bf3c      	itt	cc
 800ae30:	021b      	lslcc	r3, r3, #8
 800ae32:	3008      	addcc	r0, #8
 800ae34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae38:	bf3c      	itt	cc
 800ae3a:	011b      	lslcc	r3, r3, #4
 800ae3c:	3004      	addcc	r0, #4
 800ae3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae42:	bf3c      	itt	cc
 800ae44:	009b      	lslcc	r3, r3, #2
 800ae46:	3002      	addcc	r0, #2
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	db05      	blt.n	800ae58 <__hi0bits+0x3c>
 800ae4c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ae50:	f100 0001 	add.w	r0, r0, #1
 800ae54:	bf08      	it	eq
 800ae56:	2020      	moveq	r0, #32
 800ae58:	4770      	bx	lr

0800ae5a <__lo0bits>:
 800ae5a:	6803      	ldr	r3, [r0, #0]
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	f013 0007 	ands.w	r0, r3, #7
 800ae62:	d00b      	beq.n	800ae7c <__lo0bits+0x22>
 800ae64:	07d9      	lsls	r1, r3, #31
 800ae66:	d421      	bmi.n	800aeac <__lo0bits+0x52>
 800ae68:	0798      	lsls	r0, r3, #30
 800ae6a:	bf49      	itett	mi
 800ae6c:	085b      	lsrmi	r3, r3, #1
 800ae6e:	089b      	lsrpl	r3, r3, #2
 800ae70:	2001      	movmi	r0, #1
 800ae72:	6013      	strmi	r3, [r2, #0]
 800ae74:	bf5c      	itt	pl
 800ae76:	6013      	strpl	r3, [r2, #0]
 800ae78:	2002      	movpl	r0, #2
 800ae7a:	4770      	bx	lr
 800ae7c:	b299      	uxth	r1, r3
 800ae7e:	b909      	cbnz	r1, 800ae84 <__lo0bits+0x2a>
 800ae80:	0c1b      	lsrs	r3, r3, #16
 800ae82:	2010      	movs	r0, #16
 800ae84:	b2d9      	uxtb	r1, r3
 800ae86:	b909      	cbnz	r1, 800ae8c <__lo0bits+0x32>
 800ae88:	3008      	adds	r0, #8
 800ae8a:	0a1b      	lsrs	r3, r3, #8
 800ae8c:	0719      	lsls	r1, r3, #28
 800ae8e:	bf04      	itt	eq
 800ae90:	091b      	lsreq	r3, r3, #4
 800ae92:	3004      	addeq	r0, #4
 800ae94:	0799      	lsls	r1, r3, #30
 800ae96:	bf04      	itt	eq
 800ae98:	089b      	lsreq	r3, r3, #2
 800ae9a:	3002      	addeq	r0, #2
 800ae9c:	07d9      	lsls	r1, r3, #31
 800ae9e:	d403      	bmi.n	800aea8 <__lo0bits+0x4e>
 800aea0:	085b      	lsrs	r3, r3, #1
 800aea2:	f100 0001 	add.w	r0, r0, #1
 800aea6:	d003      	beq.n	800aeb0 <__lo0bits+0x56>
 800aea8:	6013      	str	r3, [r2, #0]
 800aeaa:	4770      	bx	lr
 800aeac:	2000      	movs	r0, #0
 800aeae:	4770      	bx	lr
 800aeb0:	2020      	movs	r0, #32
 800aeb2:	4770      	bx	lr

0800aeb4 <__i2b>:
 800aeb4:	b510      	push	{r4, lr}
 800aeb6:	460c      	mov	r4, r1
 800aeb8:	2101      	movs	r1, #1
 800aeba:	f7ff febd 	bl	800ac38 <_Balloc>
 800aebe:	4602      	mov	r2, r0
 800aec0:	b928      	cbnz	r0, 800aece <__i2b+0x1a>
 800aec2:	4b05      	ldr	r3, [pc, #20]	@ (800aed8 <__i2b+0x24>)
 800aec4:	4805      	ldr	r0, [pc, #20]	@ (800aedc <__i2b+0x28>)
 800aec6:	f240 1145 	movw	r1, #325	@ 0x145
 800aeca:	f001 fdf9 	bl	800cac0 <__assert_func>
 800aece:	2301      	movs	r3, #1
 800aed0:	6144      	str	r4, [r0, #20]
 800aed2:	6103      	str	r3, [r0, #16]
 800aed4:	bd10      	pop	{r4, pc}
 800aed6:	bf00      	nop
 800aed8:	0800d57d 	.word	0x0800d57d
 800aedc:	0800d58e 	.word	0x0800d58e

0800aee0 <__multiply>:
 800aee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee4:	4614      	mov	r4, r2
 800aee6:	690a      	ldr	r2, [r1, #16]
 800aee8:	6923      	ldr	r3, [r4, #16]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	bfa8      	it	ge
 800aeee:	4623      	movge	r3, r4
 800aef0:	460f      	mov	r7, r1
 800aef2:	bfa4      	itt	ge
 800aef4:	460c      	movge	r4, r1
 800aef6:	461f      	movge	r7, r3
 800aef8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800aefc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800af00:	68a3      	ldr	r3, [r4, #8]
 800af02:	6861      	ldr	r1, [r4, #4]
 800af04:	eb0a 0609 	add.w	r6, sl, r9
 800af08:	42b3      	cmp	r3, r6
 800af0a:	b085      	sub	sp, #20
 800af0c:	bfb8      	it	lt
 800af0e:	3101      	addlt	r1, #1
 800af10:	f7ff fe92 	bl	800ac38 <_Balloc>
 800af14:	b930      	cbnz	r0, 800af24 <__multiply+0x44>
 800af16:	4602      	mov	r2, r0
 800af18:	4b44      	ldr	r3, [pc, #272]	@ (800b02c <__multiply+0x14c>)
 800af1a:	4845      	ldr	r0, [pc, #276]	@ (800b030 <__multiply+0x150>)
 800af1c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800af20:	f001 fdce 	bl	800cac0 <__assert_func>
 800af24:	f100 0514 	add.w	r5, r0, #20
 800af28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af2c:	462b      	mov	r3, r5
 800af2e:	2200      	movs	r2, #0
 800af30:	4543      	cmp	r3, r8
 800af32:	d321      	bcc.n	800af78 <__multiply+0x98>
 800af34:	f107 0114 	add.w	r1, r7, #20
 800af38:	f104 0214 	add.w	r2, r4, #20
 800af3c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800af40:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800af44:	9302      	str	r3, [sp, #8]
 800af46:	1b13      	subs	r3, r2, r4
 800af48:	3b15      	subs	r3, #21
 800af4a:	f023 0303 	bic.w	r3, r3, #3
 800af4e:	3304      	adds	r3, #4
 800af50:	f104 0715 	add.w	r7, r4, #21
 800af54:	42ba      	cmp	r2, r7
 800af56:	bf38      	it	cc
 800af58:	2304      	movcc	r3, #4
 800af5a:	9301      	str	r3, [sp, #4]
 800af5c:	9b02      	ldr	r3, [sp, #8]
 800af5e:	9103      	str	r1, [sp, #12]
 800af60:	428b      	cmp	r3, r1
 800af62:	d80c      	bhi.n	800af7e <__multiply+0x9e>
 800af64:	2e00      	cmp	r6, #0
 800af66:	dd03      	ble.n	800af70 <__multiply+0x90>
 800af68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d05b      	beq.n	800b028 <__multiply+0x148>
 800af70:	6106      	str	r6, [r0, #16]
 800af72:	b005      	add	sp, #20
 800af74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af78:	f843 2b04 	str.w	r2, [r3], #4
 800af7c:	e7d8      	b.n	800af30 <__multiply+0x50>
 800af7e:	f8b1 a000 	ldrh.w	sl, [r1]
 800af82:	f1ba 0f00 	cmp.w	sl, #0
 800af86:	d024      	beq.n	800afd2 <__multiply+0xf2>
 800af88:	f104 0e14 	add.w	lr, r4, #20
 800af8c:	46a9      	mov	r9, r5
 800af8e:	f04f 0c00 	mov.w	ip, #0
 800af92:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af96:	f8d9 3000 	ldr.w	r3, [r9]
 800af9a:	fa1f fb87 	uxth.w	fp, r7
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	fb0a 330b 	mla	r3, sl, fp, r3
 800afa4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800afa8:	f8d9 7000 	ldr.w	r7, [r9]
 800afac:	4463      	add	r3, ip
 800afae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800afb2:	fb0a c70b 	mla	r7, sl, fp, ip
 800afb6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800afba:	b29b      	uxth	r3, r3
 800afbc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800afc0:	4572      	cmp	r2, lr
 800afc2:	f849 3b04 	str.w	r3, [r9], #4
 800afc6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800afca:	d8e2      	bhi.n	800af92 <__multiply+0xb2>
 800afcc:	9b01      	ldr	r3, [sp, #4]
 800afce:	f845 c003 	str.w	ip, [r5, r3]
 800afd2:	9b03      	ldr	r3, [sp, #12]
 800afd4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800afd8:	3104      	adds	r1, #4
 800afda:	f1b9 0f00 	cmp.w	r9, #0
 800afde:	d021      	beq.n	800b024 <__multiply+0x144>
 800afe0:	682b      	ldr	r3, [r5, #0]
 800afe2:	f104 0c14 	add.w	ip, r4, #20
 800afe6:	46ae      	mov	lr, r5
 800afe8:	f04f 0a00 	mov.w	sl, #0
 800afec:	f8bc b000 	ldrh.w	fp, [ip]
 800aff0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aff4:	fb09 770b 	mla	r7, r9, fp, r7
 800aff8:	4457      	add	r7, sl
 800affa:	b29b      	uxth	r3, r3
 800affc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b000:	f84e 3b04 	str.w	r3, [lr], #4
 800b004:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b008:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b00c:	f8be 3000 	ldrh.w	r3, [lr]
 800b010:	fb09 330a 	mla	r3, r9, sl, r3
 800b014:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b018:	4562      	cmp	r2, ip
 800b01a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b01e:	d8e5      	bhi.n	800afec <__multiply+0x10c>
 800b020:	9f01      	ldr	r7, [sp, #4]
 800b022:	51eb      	str	r3, [r5, r7]
 800b024:	3504      	adds	r5, #4
 800b026:	e799      	b.n	800af5c <__multiply+0x7c>
 800b028:	3e01      	subs	r6, #1
 800b02a:	e79b      	b.n	800af64 <__multiply+0x84>
 800b02c:	0800d57d 	.word	0x0800d57d
 800b030:	0800d58e 	.word	0x0800d58e

0800b034 <__pow5mult>:
 800b034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b038:	4615      	mov	r5, r2
 800b03a:	f012 0203 	ands.w	r2, r2, #3
 800b03e:	4607      	mov	r7, r0
 800b040:	460e      	mov	r6, r1
 800b042:	d007      	beq.n	800b054 <__pow5mult+0x20>
 800b044:	4c25      	ldr	r4, [pc, #148]	@ (800b0dc <__pow5mult+0xa8>)
 800b046:	3a01      	subs	r2, #1
 800b048:	2300      	movs	r3, #0
 800b04a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b04e:	f7ff fe55 	bl	800acfc <__multadd>
 800b052:	4606      	mov	r6, r0
 800b054:	10ad      	asrs	r5, r5, #2
 800b056:	d03d      	beq.n	800b0d4 <__pow5mult+0xa0>
 800b058:	69fc      	ldr	r4, [r7, #28]
 800b05a:	b97c      	cbnz	r4, 800b07c <__pow5mult+0x48>
 800b05c:	2010      	movs	r0, #16
 800b05e:	f7ff fd35 	bl	800aacc <malloc>
 800b062:	4602      	mov	r2, r0
 800b064:	61f8      	str	r0, [r7, #28]
 800b066:	b928      	cbnz	r0, 800b074 <__pow5mult+0x40>
 800b068:	4b1d      	ldr	r3, [pc, #116]	@ (800b0e0 <__pow5mult+0xac>)
 800b06a:	481e      	ldr	r0, [pc, #120]	@ (800b0e4 <__pow5mult+0xb0>)
 800b06c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b070:	f001 fd26 	bl	800cac0 <__assert_func>
 800b074:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b078:	6004      	str	r4, [r0, #0]
 800b07a:	60c4      	str	r4, [r0, #12]
 800b07c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b080:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b084:	b94c      	cbnz	r4, 800b09a <__pow5mult+0x66>
 800b086:	f240 2171 	movw	r1, #625	@ 0x271
 800b08a:	4638      	mov	r0, r7
 800b08c:	f7ff ff12 	bl	800aeb4 <__i2b>
 800b090:	2300      	movs	r3, #0
 800b092:	f8c8 0008 	str.w	r0, [r8, #8]
 800b096:	4604      	mov	r4, r0
 800b098:	6003      	str	r3, [r0, #0]
 800b09a:	f04f 0900 	mov.w	r9, #0
 800b09e:	07eb      	lsls	r3, r5, #31
 800b0a0:	d50a      	bpl.n	800b0b8 <__pow5mult+0x84>
 800b0a2:	4631      	mov	r1, r6
 800b0a4:	4622      	mov	r2, r4
 800b0a6:	4638      	mov	r0, r7
 800b0a8:	f7ff ff1a 	bl	800aee0 <__multiply>
 800b0ac:	4631      	mov	r1, r6
 800b0ae:	4680      	mov	r8, r0
 800b0b0:	4638      	mov	r0, r7
 800b0b2:	f7ff fe01 	bl	800acb8 <_Bfree>
 800b0b6:	4646      	mov	r6, r8
 800b0b8:	106d      	asrs	r5, r5, #1
 800b0ba:	d00b      	beq.n	800b0d4 <__pow5mult+0xa0>
 800b0bc:	6820      	ldr	r0, [r4, #0]
 800b0be:	b938      	cbnz	r0, 800b0d0 <__pow5mult+0x9c>
 800b0c0:	4622      	mov	r2, r4
 800b0c2:	4621      	mov	r1, r4
 800b0c4:	4638      	mov	r0, r7
 800b0c6:	f7ff ff0b 	bl	800aee0 <__multiply>
 800b0ca:	6020      	str	r0, [r4, #0]
 800b0cc:	f8c0 9000 	str.w	r9, [r0]
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	e7e4      	b.n	800b09e <__pow5mult+0x6a>
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0da:	bf00      	nop
 800b0dc:	0800d5e8 	.word	0x0800d5e8
 800b0e0:	0800d50e 	.word	0x0800d50e
 800b0e4:	0800d58e 	.word	0x0800d58e

0800b0e8 <__lshift>:
 800b0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ec:	460c      	mov	r4, r1
 800b0ee:	6849      	ldr	r1, [r1, #4]
 800b0f0:	6923      	ldr	r3, [r4, #16]
 800b0f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b0f6:	68a3      	ldr	r3, [r4, #8]
 800b0f8:	4607      	mov	r7, r0
 800b0fa:	4691      	mov	r9, r2
 800b0fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b100:	f108 0601 	add.w	r6, r8, #1
 800b104:	42b3      	cmp	r3, r6
 800b106:	db0b      	blt.n	800b120 <__lshift+0x38>
 800b108:	4638      	mov	r0, r7
 800b10a:	f7ff fd95 	bl	800ac38 <_Balloc>
 800b10e:	4605      	mov	r5, r0
 800b110:	b948      	cbnz	r0, 800b126 <__lshift+0x3e>
 800b112:	4602      	mov	r2, r0
 800b114:	4b28      	ldr	r3, [pc, #160]	@ (800b1b8 <__lshift+0xd0>)
 800b116:	4829      	ldr	r0, [pc, #164]	@ (800b1bc <__lshift+0xd4>)
 800b118:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b11c:	f001 fcd0 	bl	800cac0 <__assert_func>
 800b120:	3101      	adds	r1, #1
 800b122:	005b      	lsls	r3, r3, #1
 800b124:	e7ee      	b.n	800b104 <__lshift+0x1c>
 800b126:	2300      	movs	r3, #0
 800b128:	f100 0114 	add.w	r1, r0, #20
 800b12c:	f100 0210 	add.w	r2, r0, #16
 800b130:	4618      	mov	r0, r3
 800b132:	4553      	cmp	r3, sl
 800b134:	db33      	blt.n	800b19e <__lshift+0xb6>
 800b136:	6920      	ldr	r0, [r4, #16]
 800b138:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b13c:	f104 0314 	add.w	r3, r4, #20
 800b140:	f019 091f 	ands.w	r9, r9, #31
 800b144:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b148:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b14c:	d02b      	beq.n	800b1a6 <__lshift+0xbe>
 800b14e:	f1c9 0e20 	rsb	lr, r9, #32
 800b152:	468a      	mov	sl, r1
 800b154:	2200      	movs	r2, #0
 800b156:	6818      	ldr	r0, [r3, #0]
 800b158:	fa00 f009 	lsl.w	r0, r0, r9
 800b15c:	4310      	orrs	r0, r2
 800b15e:	f84a 0b04 	str.w	r0, [sl], #4
 800b162:	f853 2b04 	ldr.w	r2, [r3], #4
 800b166:	459c      	cmp	ip, r3
 800b168:	fa22 f20e 	lsr.w	r2, r2, lr
 800b16c:	d8f3      	bhi.n	800b156 <__lshift+0x6e>
 800b16e:	ebac 0304 	sub.w	r3, ip, r4
 800b172:	3b15      	subs	r3, #21
 800b174:	f023 0303 	bic.w	r3, r3, #3
 800b178:	3304      	adds	r3, #4
 800b17a:	f104 0015 	add.w	r0, r4, #21
 800b17e:	4584      	cmp	ip, r0
 800b180:	bf38      	it	cc
 800b182:	2304      	movcc	r3, #4
 800b184:	50ca      	str	r2, [r1, r3]
 800b186:	b10a      	cbz	r2, 800b18c <__lshift+0xa4>
 800b188:	f108 0602 	add.w	r6, r8, #2
 800b18c:	3e01      	subs	r6, #1
 800b18e:	4638      	mov	r0, r7
 800b190:	612e      	str	r6, [r5, #16]
 800b192:	4621      	mov	r1, r4
 800b194:	f7ff fd90 	bl	800acb8 <_Bfree>
 800b198:	4628      	mov	r0, r5
 800b19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b19e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	e7c5      	b.n	800b132 <__lshift+0x4a>
 800b1a6:	3904      	subs	r1, #4
 800b1a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1b0:	459c      	cmp	ip, r3
 800b1b2:	d8f9      	bhi.n	800b1a8 <__lshift+0xc0>
 800b1b4:	e7ea      	b.n	800b18c <__lshift+0xa4>
 800b1b6:	bf00      	nop
 800b1b8:	0800d57d 	.word	0x0800d57d
 800b1bc:	0800d58e 	.word	0x0800d58e

0800b1c0 <__mcmp>:
 800b1c0:	690a      	ldr	r2, [r1, #16]
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	6900      	ldr	r0, [r0, #16]
 800b1c6:	1a80      	subs	r0, r0, r2
 800b1c8:	b530      	push	{r4, r5, lr}
 800b1ca:	d10e      	bne.n	800b1ea <__mcmp+0x2a>
 800b1cc:	3314      	adds	r3, #20
 800b1ce:	3114      	adds	r1, #20
 800b1d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b1d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b1d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b1dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b1e0:	4295      	cmp	r5, r2
 800b1e2:	d003      	beq.n	800b1ec <__mcmp+0x2c>
 800b1e4:	d205      	bcs.n	800b1f2 <__mcmp+0x32>
 800b1e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ea:	bd30      	pop	{r4, r5, pc}
 800b1ec:	42a3      	cmp	r3, r4
 800b1ee:	d3f3      	bcc.n	800b1d8 <__mcmp+0x18>
 800b1f0:	e7fb      	b.n	800b1ea <__mcmp+0x2a>
 800b1f2:	2001      	movs	r0, #1
 800b1f4:	e7f9      	b.n	800b1ea <__mcmp+0x2a>
	...

0800b1f8 <__mdiff>:
 800b1f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1fc:	4689      	mov	r9, r1
 800b1fe:	4606      	mov	r6, r0
 800b200:	4611      	mov	r1, r2
 800b202:	4648      	mov	r0, r9
 800b204:	4614      	mov	r4, r2
 800b206:	f7ff ffdb 	bl	800b1c0 <__mcmp>
 800b20a:	1e05      	subs	r5, r0, #0
 800b20c:	d112      	bne.n	800b234 <__mdiff+0x3c>
 800b20e:	4629      	mov	r1, r5
 800b210:	4630      	mov	r0, r6
 800b212:	f7ff fd11 	bl	800ac38 <_Balloc>
 800b216:	4602      	mov	r2, r0
 800b218:	b928      	cbnz	r0, 800b226 <__mdiff+0x2e>
 800b21a:	4b3f      	ldr	r3, [pc, #252]	@ (800b318 <__mdiff+0x120>)
 800b21c:	f240 2137 	movw	r1, #567	@ 0x237
 800b220:	483e      	ldr	r0, [pc, #248]	@ (800b31c <__mdiff+0x124>)
 800b222:	f001 fc4d 	bl	800cac0 <__assert_func>
 800b226:	2301      	movs	r3, #1
 800b228:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b22c:	4610      	mov	r0, r2
 800b22e:	b003      	add	sp, #12
 800b230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b234:	bfbc      	itt	lt
 800b236:	464b      	movlt	r3, r9
 800b238:	46a1      	movlt	r9, r4
 800b23a:	4630      	mov	r0, r6
 800b23c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b240:	bfba      	itte	lt
 800b242:	461c      	movlt	r4, r3
 800b244:	2501      	movlt	r5, #1
 800b246:	2500      	movge	r5, #0
 800b248:	f7ff fcf6 	bl	800ac38 <_Balloc>
 800b24c:	4602      	mov	r2, r0
 800b24e:	b918      	cbnz	r0, 800b258 <__mdiff+0x60>
 800b250:	4b31      	ldr	r3, [pc, #196]	@ (800b318 <__mdiff+0x120>)
 800b252:	f240 2145 	movw	r1, #581	@ 0x245
 800b256:	e7e3      	b.n	800b220 <__mdiff+0x28>
 800b258:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b25c:	6926      	ldr	r6, [r4, #16]
 800b25e:	60c5      	str	r5, [r0, #12]
 800b260:	f109 0310 	add.w	r3, r9, #16
 800b264:	f109 0514 	add.w	r5, r9, #20
 800b268:	f104 0e14 	add.w	lr, r4, #20
 800b26c:	f100 0b14 	add.w	fp, r0, #20
 800b270:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b274:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b278:	9301      	str	r3, [sp, #4]
 800b27a:	46d9      	mov	r9, fp
 800b27c:	f04f 0c00 	mov.w	ip, #0
 800b280:	9b01      	ldr	r3, [sp, #4]
 800b282:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b286:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b28a:	9301      	str	r3, [sp, #4]
 800b28c:	fa1f f38a 	uxth.w	r3, sl
 800b290:	4619      	mov	r1, r3
 800b292:	b283      	uxth	r3, r0
 800b294:	1acb      	subs	r3, r1, r3
 800b296:	0c00      	lsrs	r0, r0, #16
 800b298:	4463      	add	r3, ip
 800b29a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b29e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b2a8:	4576      	cmp	r6, lr
 800b2aa:	f849 3b04 	str.w	r3, [r9], #4
 800b2ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b2b2:	d8e5      	bhi.n	800b280 <__mdiff+0x88>
 800b2b4:	1b33      	subs	r3, r6, r4
 800b2b6:	3b15      	subs	r3, #21
 800b2b8:	f023 0303 	bic.w	r3, r3, #3
 800b2bc:	3415      	adds	r4, #21
 800b2be:	3304      	adds	r3, #4
 800b2c0:	42a6      	cmp	r6, r4
 800b2c2:	bf38      	it	cc
 800b2c4:	2304      	movcc	r3, #4
 800b2c6:	441d      	add	r5, r3
 800b2c8:	445b      	add	r3, fp
 800b2ca:	461e      	mov	r6, r3
 800b2cc:	462c      	mov	r4, r5
 800b2ce:	4544      	cmp	r4, r8
 800b2d0:	d30e      	bcc.n	800b2f0 <__mdiff+0xf8>
 800b2d2:	f108 0103 	add.w	r1, r8, #3
 800b2d6:	1b49      	subs	r1, r1, r5
 800b2d8:	f021 0103 	bic.w	r1, r1, #3
 800b2dc:	3d03      	subs	r5, #3
 800b2de:	45a8      	cmp	r8, r5
 800b2e0:	bf38      	it	cc
 800b2e2:	2100      	movcc	r1, #0
 800b2e4:	440b      	add	r3, r1
 800b2e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b2ea:	b191      	cbz	r1, 800b312 <__mdiff+0x11a>
 800b2ec:	6117      	str	r7, [r2, #16]
 800b2ee:	e79d      	b.n	800b22c <__mdiff+0x34>
 800b2f0:	f854 1b04 	ldr.w	r1, [r4], #4
 800b2f4:	46e6      	mov	lr, ip
 800b2f6:	0c08      	lsrs	r0, r1, #16
 800b2f8:	fa1c fc81 	uxtah	ip, ip, r1
 800b2fc:	4471      	add	r1, lr
 800b2fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b302:	b289      	uxth	r1, r1
 800b304:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b308:	f846 1b04 	str.w	r1, [r6], #4
 800b30c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b310:	e7dd      	b.n	800b2ce <__mdiff+0xd6>
 800b312:	3f01      	subs	r7, #1
 800b314:	e7e7      	b.n	800b2e6 <__mdiff+0xee>
 800b316:	bf00      	nop
 800b318:	0800d57d 	.word	0x0800d57d
 800b31c:	0800d58e 	.word	0x0800d58e

0800b320 <__ulp>:
 800b320:	b082      	sub	sp, #8
 800b322:	ed8d 0b00 	vstr	d0, [sp]
 800b326:	9a01      	ldr	r2, [sp, #4]
 800b328:	4b0f      	ldr	r3, [pc, #60]	@ (800b368 <__ulp+0x48>)
 800b32a:	4013      	ands	r3, r2
 800b32c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b330:	2b00      	cmp	r3, #0
 800b332:	dc08      	bgt.n	800b346 <__ulp+0x26>
 800b334:	425b      	negs	r3, r3
 800b336:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b33a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b33e:	da04      	bge.n	800b34a <__ulp+0x2a>
 800b340:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b344:	4113      	asrs	r3, r2
 800b346:	2200      	movs	r2, #0
 800b348:	e008      	b.n	800b35c <__ulp+0x3c>
 800b34a:	f1a2 0314 	sub.w	r3, r2, #20
 800b34e:	2b1e      	cmp	r3, #30
 800b350:	bfda      	itte	le
 800b352:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b356:	40da      	lsrle	r2, r3
 800b358:	2201      	movgt	r2, #1
 800b35a:	2300      	movs	r3, #0
 800b35c:	4619      	mov	r1, r3
 800b35e:	4610      	mov	r0, r2
 800b360:	ec41 0b10 	vmov	d0, r0, r1
 800b364:	b002      	add	sp, #8
 800b366:	4770      	bx	lr
 800b368:	7ff00000 	.word	0x7ff00000

0800b36c <__b2d>:
 800b36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b370:	6906      	ldr	r6, [r0, #16]
 800b372:	f100 0814 	add.w	r8, r0, #20
 800b376:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b37a:	1f37      	subs	r7, r6, #4
 800b37c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b380:	4610      	mov	r0, r2
 800b382:	f7ff fd4b 	bl	800ae1c <__hi0bits>
 800b386:	f1c0 0320 	rsb	r3, r0, #32
 800b38a:	280a      	cmp	r0, #10
 800b38c:	600b      	str	r3, [r1, #0]
 800b38e:	491b      	ldr	r1, [pc, #108]	@ (800b3fc <__b2d+0x90>)
 800b390:	dc15      	bgt.n	800b3be <__b2d+0x52>
 800b392:	f1c0 0c0b 	rsb	ip, r0, #11
 800b396:	fa22 f30c 	lsr.w	r3, r2, ip
 800b39a:	45b8      	cmp	r8, r7
 800b39c:	ea43 0501 	orr.w	r5, r3, r1
 800b3a0:	bf34      	ite	cc
 800b3a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b3a6:	2300      	movcs	r3, #0
 800b3a8:	3015      	adds	r0, #21
 800b3aa:	fa02 f000 	lsl.w	r0, r2, r0
 800b3ae:	fa23 f30c 	lsr.w	r3, r3, ip
 800b3b2:	4303      	orrs	r3, r0
 800b3b4:	461c      	mov	r4, r3
 800b3b6:	ec45 4b10 	vmov	d0, r4, r5
 800b3ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3be:	45b8      	cmp	r8, r7
 800b3c0:	bf3a      	itte	cc
 800b3c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b3c6:	f1a6 0708 	subcc.w	r7, r6, #8
 800b3ca:	2300      	movcs	r3, #0
 800b3cc:	380b      	subs	r0, #11
 800b3ce:	d012      	beq.n	800b3f6 <__b2d+0x8a>
 800b3d0:	f1c0 0120 	rsb	r1, r0, #32
 800b3d4:	fa23 f401 	lsr.w	r4, r3, r1
 800b3d8:	4082      	lsls	r2, r0
 800b3da:	4322      	orrs	r2, r4
 800b3dc:	4547      	cmp	r7, r8
 800b3de:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b3e2:	bf8c      	ite	hi
 800b3e4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b3e8:	2200      	movls	r2, #0
 800b3ea:	4083      	lsls	r3, r0
 800b3ec:	40ca      	lsrs	r2, r1
 800b3ee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	e7de      	b.n	800b3b4 <__b2d+0x48>
 800b3f6:	ea42 0501 	orr.w	r5, r2, r1
 800b3fa:	e7db      	b.n	800b3b4 <__b2d+0x48>
 800b3fc:	3ff00000 	.word	0x3ff00000

0800b400 <__d2b>:
 800b400:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b404:	460f      	mov	r7, r1
 800b406:	2101      	movs	r1, #1
 800b408:	ec59 8b10 	vmov	r8, r9, d0
 800b40c:	4616      	mov	r6, r2
 800b40e:	f7ff fc13 	bl	800ac38 <_Balloc>
 800b412:	4604      	mov	r4, r0
 800b414:	b930      	cbnz	r0, 800b424 <__d2b+0x24>
 800b416:	4602      	mov	r2, r0
 800b418:	4b23      	ldr	r3, [pc, #140]	@ (800b4a8 <__d2b+0xa8>)
 800b41a:	4824      	ldr	r0, [pc, #144]	@ (800b4ac <__d2b+0xac>)
 800b41c:	f240 310f 	movw	r1, #783	@ 0x30f
 800b420:	f001 fb4e 	bl	800cac0 <__assert_func>
 800b424:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b428:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b42c:	b10d      	cbz	r5, 800b432 <__d2b+0x32>
 800b42e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b432:	9301      	str	r3, [sp, #4]
 800b434:	f1b8 0300 	subs.w	r3, r8, #0
 800b438:	d023      	beq.n	800b482 <__d2b+0x82>
 800b43a:	4668      	mov	r0, sp
 800b43c:	9300      	str	r3, [sp, #0]
 800b43e:	f7ff fd0c 	bl	800ae5a <__lo0bits>
 800b442:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b446:	b1d0      	cbz	r0, 800b47e <__d2b+0x7e>
 800b448:	f1c0 0320 	rsb	r3, r0, #32
 800b44c:	fa02 f303 	lsl.w	r3, r2, r3
 800b450:	430b      	orrs	r3, r1
 800b452:	40c2      	lsrs	r2, r0
 800b454:	6163      	str	r3, [r4, #20]
 800b456:	9201      	str	r2, [sp, #4]
 800b458:	9b01      	ldr	r3, [sp, #4]
 800b45a:	61a3      	str	r3, [r4, #24]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	bf0c      	ite	eq
 800b460:	2201      	moveq	r2, #1
 800b462:	2202      	movne	r2, #2
 800b464:	6122      	str	r2, [r4, #16]
 800b466:	b1a5      	cbz	r5, 800b492 <__d2b+0x92>
 800b468:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b46c:	4405      	add	r5, r0
 800b46e:	603d      	str	r5, [r7, #0]
 800b470:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b474:	6030      	str	r0, [r6, #0]
 800b476:	4620      	mov	r0, r4
 800b478:	b003      	add	sp, #12
 800b47a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b47e:	6161      	str	r1, [r4, #20]
 800b480:	e7ea      	b.n	800b458 <__d2b+0x58>
 800b482:	a801      	add	r0, sp, #4
 800b484:	f7ff fce9 	bl	800ae5a <__lo0bits>
 800b488:	9b01      	ldr	r3, [sp, #4]
 800b48a:	6163      	str	r3, [r4, #20]
 800b48c:	3020      	adds	r0, #32
 800b48e:	2201      	movs	r2, #1
 800b490:	e7e8      	b.n	800b464 <__d2b+0x64>
 800b492:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b496:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b49a:	6038      	str	r0, [r7, #0]
 800b49c:	6918      	ldr	r0, [r3, #16]
 800b49e:	f7ff fcbd 	bl	800ae1c <__hi0bits>
 800b4a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b4a6:	e7e5      	b.n	800b474 <__d2b+0x74>
 800b4a8:	0800d57d 	.word	0x0800d57d
 800b4ac:	0800d58e 	.word	0x0800d58e

0800b4b0 <__ratio>:
 800b4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b4:	b085      	sub	sp, #20
 800b4b6:	e9cd 1000 	strd	r1, r0, [sp]
 800b4ba:	a902      	add	r1, sp, #8
 800b4bc:	f7ff ff56 	bl	800b36c <__b2d>
 800b4c0:	9800      	ldr	r0, [sp, #0]
 800b4c2:	a903      	add	r1, sp, #12
 800b4c4:	ec55 4b10 	vmov	r4, r5, d0
 800b4c8:	f7ff ff50 	bl	800b36c <__b2d>
 800b4cc:	9b01      	ldr	r3, [sp, #4]
 800b4ce:	6919      	ldr	r1, [r3, #16]
 800b4d0:	9b00      	ldr	r3, [sp, #0]
 800b4d2:	691b      	ldr	r3, [r3, #16]
 800b4d4:	1ac9      	subs	r1, r1, r3
 800b4d6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b4da:	1a9b      	subs	r3, r3, r2
 800b4dc:	ec5b ab10 	vmov	sl, fp, d0
 800b4e0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	bfce      	itee	gt
 800b4e8:	462a      	movgt	r2, r5
 800b4ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b4ee:	465a      	movle	r2, fp
 800b4f0:	462f      	mov	r7, r5
 800b4f2:	46d9      	mov	r9, fp
 800b4f4:	bfcc      	ite	gt
 800b4f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b4fa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b4fe:	464b      	mov	r3, r9
 800b500:	4652      	mov	r2, sl
 800b502:	4620      	mov	r0, r4
 800b504:	4639      	mov	r1, r7
 800b506:	f7f5 f9c9 	bl	800089c <__aeabi_ddiv>
 800b50a:	ec41 0b10 	vmov	d0, r0, r1
 800b50e:	b005      	add	sp, #20
 800b510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b514 <__copybits>:
 800b514:	3901      	subs	r1, #1
 800b516:	b570      	push	{r4, r5, r6, lr}
 800b518:	1149      	asrs	r1, r1, #5
 800b51a:	6914      	ldr	r4, [r2, #16]
 800b51c:	3101      	adds	r1, #1
 800b51e:	f102 0314 	add.w	r3, r2, #20
 800b522:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b526:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b52a:	1f05      	subs	r5, r0, #4
 800b52c:	42a3      	cmp	r3, r4
 800b52e:	d30c      	bcc.n	800b54a <__copybits+0x36>
 800b530:	1aa3      	subs	r3, r4, r2
 800b532:	3b11      	subs	r3, #17
 800b534:	f023 0303 	bic.w	r3, r3, #3
 800b538:	3211      	adds	r2, #17
 800b53a:	42a2      	cmp	r2, r4
 800b53c:	bf88      	it	hi
 800b53e:	2300      	movhi	r3, #0
 800b540:	4418      	add	r0, r3
 800b542:	2300      	movs	r3, #0
 800b544:	4288      	cmp	r0, r1
 800b546:	d305      	bcc.n	800b554 <__copybits+0x40>
 800b548:	bd70      	pop	{r4, r5, r6, pc}
 800b54a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b54e:	f845 6f04 	str.w	r6, [r5, #4]!
 800b552:	e7eb      	b.n	800b52c <__copybits+0x18>
 800b554:	f840 3b04 	str.w	r3, [r0], #4
 800b558:	e7f4      	b.n	800b544 <__copybits+0x30>

0800b55a <__any_on>:
 800b55a:	f100 0214 	add.w	r2, r0, #20
 800b55e:	6900      	ldr	r0, [r0, #16]
 800b560:	114b      	asrs	r3, r1, #5
 800b562:	4298      	cmp	r0, r3
 800b564:	b510      	push	{r4, lr}
 800b566:	db11      	blt.n	800b58c <__any_on+0x32>
 800b568:	dd0a      	ble.n	800b580 <__any_on+0x26>
 800b56a:	f011 011f 	ands.w	r1, r1, #31
 800b56e:	d007      	beq.n	800b580 <__any_on+0x26>
 800b570:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b574:	fa24 f001 	lsr.w	r0, r4, r1
 800b578:	fa00 f101 	lsl.w	r1, r0, r1
 800b57c:	428c      	cmp	r4, r1
 800b57e:	d10b      	bne.n	800b598 <__any_on+0x3e>
 800b580:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b584:	4293      	cmp	r3, r2
 800b586:	d803      	bhi.n	800b590 <__any_on+0x36>
 800b588:	2000      	movs	r0, #0
 800b58a:	bd10      	pop	{r4, pc}
 800b58c:	4603      	mov	r3, r0
 800b58e:	e7f7      	b.n	800b580 <__any_on+0x26>
 800b590:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b594:	2900      	cmp	r1, #0
 800b596:	d0f5      	beq.n	800b584 <__any_on+0x2a>
 800b598:	2001      	movs	r0, #1
 800b59a:	e7f6      	b.n	800b58a <__any_on+0x30>

0800b59c <sulp>:
 800b59c:	b570      	push	{r4, r5, r6, lr}
 800b59e:	4604      	mov	r4, r0
 800b5a0:	460d      	mov	r5, r1
 800b5a2:	ec45 4b10 	vmov	d0, r4, r5
 800b5a6:	4616      	mov	r6, r2
 800b5a8:	f7ff feba 	bl	800b320 <__ulp>
 800b5ac:	ec51 0b10 	vmov	r0, r1, d0
 800b5b0:	b17e      	cbz	r6, 800b5d2 <sulp+0x36>
 800b5b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b5b6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	dd09      	ble.n	800b5d2 <sulp+0x36>
 800b5be:	051b      	lsls	r3, r3, #20
 800b5c0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b5c4:	2400      	movs	r4, #0
 800b5c6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b5ca:	4622      	mov	r2, r4
 800b5cc:	462b      	mov	r3, r5
 800b5ce:	f7f5 f83b 	bl	8000648 <__aeabi_dmul>
 800b5d2:	ec41 0b10 	vmov	d0, r0, r1
 800b5d6:	bd70      	pop	{r4, r5, r6, pc}

0800b5d8 <_strtod_l>:
 800b5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5dc:	b09f      	sub	sp, #124	@ 0x7c
 800b5de:	460c      	mov	r4, r1
 800b5e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	921a      	str	r2, [sp, #104]	@ 0x68
 800b5e6:	9005      	str	r0, [sp, #20]
 800b5e8:	f04f 0a00 	mov.w	sl, #0
 800b5ec:	f04f 0b00 	mov.w	fp, #0
 800b5f0:	460a      	mov	r2, r1
 800b5f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5f4:	7811      	ldrb	r1, [r2, #0]
 800b5f6:	292b      	cmp	r1, #43	@ 0x2b
 800b5f8:	d04a      	beq.n	800b690 <_strtod_l+0xb8>
 800b5fa:	d838      	bhi.n	800b66e <_strtod_l+0x96>
 800b5fc:	290d      	cmp	r1, #13
 800b5fe:	d832      	bhi.n	800b666 <_strtod_l+0x8e>
 800b600:	2908      	cmp	r1, #8
 800b602:	d832      	bhi.n	800b66a <_strtod_l+0x92>
 800b604:	2900      	cmp	r1, #0
 800b606:	d03b      	beq.n	800b680 <_strtod_l+0xa8>
 800b608:	2200      	movs	r2, #0
 800b60a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b60c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b60e:	782a      	ldrb	r2, [r5, #0]
 800b610:	2a30      	cmp	r2, #48	@ 0x30
 800b612:	f040 80b3 	bne.w	800b77c <_strtod_l+0x1a4>
 800b616:	786a      	ldrb	r2, [r5, #1]
 800b618:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b61c:	2a58      	cmp	r2, #88	@ 0x58
 800b61e:	d16e      	bne.n	800b6fe <_strtod_l+0x126>
 800b620:	9302      	str	r3, [sp, #8]
 800b622:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b624:	9301      	str	r3, [sp, #4]
 800b626:	ab1a      	add	r3, sp, #104	@ 0x68
 800b628:	9300      	str	r3, [sp, #0]
 800b62a:	4a8e      	ldr	r2, [pc, #568]	@ (800b864 <_strtod_l+0x28c>)
 800b62c:	9805      	ldr	r0, [sp, #20]
 800b62e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b630:	a919      	add	r1, sp, #100	@ 0x64
 800b632:	f001 fadf 	bl	800cbf4 <__gethex>
 800b636:	f010 060f 	ands.w	r6, r0, #15
 800b63a:	4604      	mov	r4, r0
 800b63c:	d005      	beq.n	800b64a <_strtod_l+0x72>
 800b63e:	2e06      	cmp	r6, #6
 800b640:	d128      	bne.n	800b694 <_strtod_l+0xbc>
 800b642:	3501      	adds	r5, #1
 800b644:	2300      	movs	r3, #0
 800b646:	9519      	str	r5, [sp, #100]	@ 0x64
 800b648:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b64a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	f040 858e 	bne.w	800c16e <_strtod_l+0xb96>
 800b652:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b654:	b1cb      	cbz	r3, 800b68a <_strtod_l+0xb2>
 800b656:	4652      	mov	r2, sl
 800b658:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b65c:	ec43 2b10 	vmov	d0, r2, r3
 800b660:	b01f      	add	sp, #124	@ 0x7c
 800b662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b666:	2920      	cmp	r1, #32
 800b668:	d1ce      	bne.n	800b608 <_strtod_l+0x30>
 800b66a:	3201      	adds	r2, #1
 800b66c:	e7c1      	b.n	800b5f2 <_strtod_l+0x1a>
 800b66e:	292d      	cmp	r1, #45	@ 0x2d
 800b670:	d1ca      	bne.n	800b608 <_strtod_l+0x30>
 800b672:	2101      	movs	r1, #1
 800b674:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b676:	1c51      	adds	r1, r2, #1
 800b678:	9119      	str	r1, [sp, #100]	@ 0x64
 800b67a:	7852      	ldrb	r2, [r2, #1]
 800b67c:	2a00      	cmp	r2, #0
 800b67e:	d1c5      	bne.n	800b60c <_strtod_l+0x34>
 800b680:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b682:	9419      	str	r4, [sp, #100]	@ 0x64
 800b684:	2b00      	cmp	r3, #0
 800b686:	f040 8570 	bne.w	800c16a <_strtod_l+0xb92>
 800b68a:	4652      	mov	r2, sl
 800b68c:	465b      	mov	r3, fp
 800b68e:	e7e5      	b.n	800b65c <_strtod_l+0x84>
 800b690:	2100      	movs	r1, #0
 800b692:	e7ef      	b.n	800b674 <_strtod_l+0x9c>
 800b694:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b696:	b13a      	cbz	r2, 800b6a8 <_strtod_l+0xd0>
 800b698:	2135      	movs	r1, #53	@ 0x35
 800b69a:	a81c      	add	r0, sp, #112	@ 0x70
 800b69c:	f7ff ff3a 	bl	800b514 <__copybits>
 800b6a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b6a2:	9805      	ldr	r0, [sp, #20]
 800b6a4:	f7ff fb08 	bl	800acb8 <_Bfree>
 800b6a8:	3e01      	subs	r6, #1
 800b6aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b6ac:	2e04      	cmp	r6, #4
 800b6ae:	d806      	bhi.n	800b6be <_strtod_l+0xe6>
 800b6b0:	e8df f006 	tbb	[pc, r6]
 800b6b4:	201d0314 	.word	0x201d0314
 800b6b8:	14          	.byte	0x14
 800b6b9:	00          	.byte	0x00
 800b6ba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b6be:	05e1      	lsls	r1, r4, #23
 800b6c0:	bf48      	it	mi
 800b6c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b6c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b6ca:	0d1b      	lsrs	r3, r3, #20
 800b6cc:	051b      	lsls	r3, r3, #20
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d1bb      	bne.n	800b64a <_strtod_l+0x72>
 800b6d2:	f7fe fb21 	bl	8009d18 <__errno>
 800b6d6:	2322      	movs	r3, #34	@ 0x22
 800b6d8:	6003      	str	r3, [r0, #0]
 800b6da:	e7b6      	b.n	800b64a <_strtod_l+0x72>
 800b6dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b6e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b6e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b6e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b6ec:	e7e7      	b.n	800b6be <_strtod_l+0xe6>
 800b6ee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b86c <_strtod_l+0x294>
 800b6f2:	e7e4      	b.n	800b6be <_strtod_l+0xe6>
 800b6f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b6f8:	f04f 3aff 	mov.w	sl, #4294967295
 800b6fc:	e7df      	b.n	800b6be <_strtod_l+0xe6>
 800b6fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b700:	1c5a      	adds	r2, r3, #1
 800b702:	9219      	str	r2, [sp, #100]	@ 0x64
 800b704:	785b      	ldrb	r3, [r3, #1]
 800b706:	2b30      	cmp	r3, #48	@ 0x30
 800b708:	d0f9      	beq.n	800b6fe <_strtod_l+0x126>
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d09d      	beq.n	800b64a <_strtod_l+0x72>
 800b70e:	2301      	movs	r3, #1
 800b710:	9309      	str	r3, [sp, #36]	@ 0x24
 800b712:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b714:	930c      	str	r3, [sp, #48]	@ 0x30
 800b716:	2300      	movs	r3, #0
 800b718:	9308      	str	r3, [sp, #32]
 800b71a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b71c:	461f      	mov	r7, r3
 800b71e:	220a      	movs	r2, #10
 800b720:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b722:	7805      	ldrb	r5, [r0, #0]
 800b724:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b728:	b2d9      	uxtb	r1, r3
 800b72a:	2909      	cmp	r1, #9
 800b72c:	d928      	bls.n	800b780 <_strtod_l+0x1a8>
 800b72e:	494e      	ldr	r1, [pc, #312]	@ (800b868 <_strtod_l+0x290>)
 800b730:	2201      	movs	r2, #1
 800b732:	f001 f979 	bl	800ca28 <strncmp>
 800b736:	2800      	cmp	r0, #0
 800b738:	d032      	beq.n	800b7a0 <_strtod_l+0x1c8>
 800b73a:	2000      	movs	r0, #0
 800b73c:	462a      	mov	r2, r5
 800b73e:	4681      	mov	r9, r0
 800b740:	463d      	mov	r5, r7
 800b742:	4603      	mov	r3, r0
 800b744:	2a65      	cmp	r2, #101	@ 0x65
 800b746:	d001      	beq.n	800b74c <_strtod_l+0x174>
 800b748:	2a45      	cmp	r2, #69	@ 0x45
 800b74a:	d114      	bne.n	800b776 <_strtod_l+0x19e>
 800b74c:	b91d      	cbnz	r5, 800b756 <_strtod_l+0x17e>
 800b74e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b750:	4302      	orrs	r2, r0
 800b752:	d095      	beq.n	800b680 <_strtod_l+0xa8>
 800b754:	2500      	movs	r5, #0
 800b756:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b758:	1c62      	adds	r2, r4, #1
 800b75a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b75c:	7862      	ldrb	r2, [r4, #1]
 800b75e:	2a2b      	cmp	r2, #43	@ 0x2b
 800b760:	d077      	beq.n	800b852 <_strtod_l+0x27a>
 800b762:	2a2d      	cmp	r2, #45	@ 0x2d
 800b764:	d07b      	beq.n	800b85e <_strtod_l+0x286>
 800b766:	f04f 0c00 	mov.w	ip, #0
 800b76a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b76e:	2909      	cmp	r1, #9
 800b770:	f240 8082 	bls.w	800b878 <_strtod_l+0x2a0>
 800b774:	9419      	str	r4, [sp, #100]	@ 0x64
 800b776:	f04f 0800 	mov.w	r8, #0
 800b77a:	e0a2      	b.n	800b8c2 <_strtod_l+0x2ea>
 800b77c:	2300      	movs	r3, #0
 800b77e:	e7c7      	b.n	800b710 <_strtod_l+0x138>
 800b780:	2f08      	cmp	r7, #8
 800b782:	bfd5      	itete	le
 800b784:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b786:	9908      	ldrgt	r1, [sp, #32]
 800b788:	fb02 3301 	mlale	r3, r2, r1, r3
 800b78c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b790:	f100 0001 	add.w	r0, r0, #1
 800b794:	bfd4      	ite	le
 800b796:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b798:	9308      	strgt	r3, [sp, #32]
 800b79a:	3701      	adds	r7, #1
 800b79c:	9019      	str	r0, [sp, #100]	@ 0x64
 800b79e:	e7bf      	b.n	800b720 <_strtod_l+0x148>
 800b7a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7a2:	1c5a      	adds	r2, r3, #1
 800b7a4:	9219      	str	r2, [sp, #100]	@ 0x64
 800b7a6:	785a      	ldrb	r2, [r3, #1]
 800b7a8:	b37f      	cbz	r7, 800b80a <_strtod_l+0x232>
 800b7aa:	4681      	mov	r9, r0
 800b7ac:	463d      	mov	r5, r7
 800b7ae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b7b2:	2b09      	cmp	r3, #9
 800b7b4:	d912      	bls.n	800b7dc <_strtod_l+0x204>
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e7c4      	b.n	800b744 <_strtod_l+0x16c>
 800b7ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7bc:	1c5a      	adds	r2, r3, #1
 800b7be:	9219      	str	r2, [sp, #100]	@ 0x64
 800b7c0:	785a      	ldrb	r2, [r3, #1]
 800b7c2:	3001      	adds	r0, #1
 800b7c4:	2a30      	cmp	r2, #48	@ 0x30
 800b7c6:	d0f8      	beq.n	800b7ba <_strtod_l+0x1e2>
 800b7c8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b7cc:	2b08      	cmp	r3, #8
 800b7ce:	f200 84d3 	bhi.w	800c178 <_strtod_l+0xba0>
 800b7d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7d4:	930c      	str	r3, [sp, #48]	@ 0x30
 800b7d6:	4681      	mov	r9, r0
 800b7d8:	2000      	movs	r0, #0
 800b7da:	4605      	mov	r5, r0
 800b7dc:	3a30      	subs	r2, #48	@ 0x30
 800b7de:	f100 0301 	add.w	r3, r0, #1
 800b7e2:	d02a      	beq.n	800b83a <_strtod_l+0x262>
 800b7e4:	4499      	add	r9, r3
 800b7e6:	eb00 0c05 	add.w	ip, r0, r5
 800b7ea:	462b      	mov	r3, r5
 800b7ec:	210a      	movs	r1, #10
 800b7ee:	4563      	cmp	r3, ip
 800b7f0:	d10d      	bne.n	800b80e <_strtod_l+0x236>
 800b7f2:	1c69      	adds	r1, r5, #1
 800b7f4:	4401      	add	r1, r0
 800b7f6:	4428      	add	r0, r5
 800b7f8:	2808      	cmp	r0, #8
 800b7fa:	dc16      	bgt.n	800b82a <_strtod_l+0x252>
 800b7fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b7fe:	230a      	movs	r3, #10
 800b800:	fb03 2300 	mla	r3, r3, r0, r2
 800b804:	930a      	str	r3, [sp, #40]	@ 0x28
 800b806:	2300      	movs	r3, #0
 800b808:	e018      	b.n	800b83c <_strtod_l+0x264>
 800b80a:	4638      	mov	r0, r7
 800b80c:	e7da      	b.n	800b7c4 <_strtod_l+0x1ec>
 800b80e:	2b08      	cmp	r3, #8
 800b810:	f103 0301 	add.w	r3, r3, #1
 800b814:	dc03      	bgt.n	800b81e <_strtod_l+0x246>
 800b816:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b818:	434e      	muls	r6, r1
 800b81a:	960a      	str	r6, [sp, #40]	@ 0x28
 800b81c:	e7e7      	b.n	800b7ee <_strtod_l+0x216>
 800b81e:	2b10      	cmp	r3, #16
 800b820:	bfde      	ittt	le
 800b822:	9e08      	ldrle	r6, [sp, #32]
 800b824:	434e      	mulle	r6, r1
 800b826:	9608      	strle	r6, [sp, #32]
 800b828:	e7e1      	b.n	800b7ee <_strtod_l+0x216>
 800b82a:	280f      	cmp	r0, #15
 800b82c:	dceb      	bgt.n	800b806 <_strtod_l+0x22e>
 800b82e:	9808      	ldr	r0, [sp, #32]
 800b830:	230a      	movs	r3, #10
 800b832:	fb03 2300 	mla	r3, r3, r0, r2
 800b836:	9308      	str	r3, [sp, #32]
 800b838:	e7e5      	b.n	800b806 <_strtod_l+0x22e>
 800b83a:	4629      	mov	r1, r5
 800b83c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b83e:	1c50      	adds	r0, r2, #1
 800b840:	9019      	str	r0, [sp, #100]	@ 0x64
 800b842:	7852      	ldrb	r2, [r2, #1]
 800b844:	4618      	mov	r0, r3
 800b846:	460d      	mov	r5, r1
 800b848:	e7b1      	b.n	800b7ae <_strtod_l+0x1d6>
 800b84a:	f04f 0900 	mov.w	r9, #0
 800b84e:	2301      	movs	r3, #1
 800b850:	e77d      	b.n	800b74e <_strtod_l+0x176>
 800b852:	f04f 0c00 	mov.w	ip, #0
 800b856:	1ca2      	adds	r2, r4, #2
 800b858:	9219      	str	r2, [sp, #100]	@ 0x64
 800b85a:	78a2      	ldrb	r2, [r4, #2]
 800b85c:	e785      	b.n	800b76a <_strtod_l+0x192>
 800b85e:	f04f 0c01 	mov.w	ip, #1
 800b862:	e7f8      	b.n	800b856 <_strtod_l+0x27e>
 800b864:	0800d700 	.word	0x0800d700
 800b868:	0800d6e8 	.word	0x0800d6e8
 800b86c:	7ff00000 	.word	0x7ff00000
 800b870:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b872:	1c51      	adds	r1, r2, #1
 800b874:	9119      	str	r1, [sp, #100]	@ 0x64
 800b876:	7852      	ldrb	r2, [r2, #1]
 800b878:	2a30      	cmp	r2, #48	@ 0x30
 800b87a:	d0f9      	beq.n	800b870 <_strtod_l+0x298>
 800b87c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b880:	2908      	cmp	r1, #8
 800b882:	f63f af78 	bhi.w	800b776 <_strtod_l+0x19e>
 800b886:	3a30      	subs	r2, #48	@ 0x30
 800b888:	920e      	str	r2, [sp, #56]	@ 0x38
 800b88a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b88c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b88e:	f04f 080a 	mov.w	r8, #10
 800b892:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b894:	1c56      	adds	r6, r2, #1
 800b896:	9619      	str	r6, [sp, #100]	@ 0x64
 800b898:	7852      	ldrb	r2, [r2, #1]
 800b89a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b89e:	f1be 0f09 	cmp.w	lr, #9
 800b8a2:	d939      	bls.n	800b918 <_strtod_l+0x340>
 800b8a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b8a6:	1a76      	subs	r6, r6, r1
 800b8a8:	2e08      	cmp	r6, #8
 800b8aa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b8ae:	dc03      	bgt.n	800b8b8 <_strtod_l+0x2e0>
 800b8b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b8b2:	4588      	cmp	r8, r1
 800b8b4:	bfa8      	it	ge
 800b8b6:	4688      	movge	r8, r1
 800b8b8:	f1bc 0f00 	cmp.w	ip, #0
 800b8bc:	d001      	beq.n	800b8c2 <_strtod_l+0x2ea>
 800b8be:	f1c8 0800 	rsb	r8, r8, #0
 800b8c2:	2d00      	cmp	r5, #0
 800b8c4:	d14e      	bne.n	800b964 <_strtod_l+0x38c>
 800b8c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b8c8:	4308      	orrs	r0, r1
 800b8ca:	f47f aebe 	bne.w	800b64a <_strtod_l+0x72>
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	f47f aed6 	bne.w	800b680 <_strtod_l+0xa8>
 800b8d4:	2a69      	cmp	r2, #105	@ 0x69
 800b8d6:	d028      	beq.n	800b92a <_strtod_l+0x352>
 800b8d8:	dc25      	bgt.n	800b926 <_strtod_l+0x34e>
 800b8da:	2a49      	cmp	r2, #73	@ 0x49
 800b8dc:	d025      	beq.n	800b92a <_strtod_l+0x352>
 800b8de:	2a4e      	cmp	r2, #78	@ 0x4e
 800b8e0:	f47f aece 	bne.w	800b680 <_strtod_l+0xa8>
 800b8e4:	499b      	ldr	r1, [pc, #620]	@ (800bb54 <_strtod_l+0x57c>)
 800b8e6:	a819      	add	r0, sp, #100	@ 0x64
 800b8e8:	f001 fba6 	bl	800d038 <__match>
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	f43f aec7 	beq.w	800b680 <_strtod_l+0xa8>
 800b8f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	2b28      	cmp	r3, #40	@ 0x28
 800b8f8:	d12e      	bne.n	800b958 <_strtod_l+0x380>
 800b8fa:	4997      	ldr	r1, [pc, #604]	@ (800bb58 <_strtod_l+0x580>)
 800b8fc:	aa1c      	add	r2, sp, #112	@ 0x70
 800b8fe:	a819      	add	r0, sp, #100	@ 0x64
 800b900:	f001 fbae 	bl	800d060 <__hexnan>
 800b904:	2805      	cmp	r0, #5
 800b906:	d127      	bne.n	800b958 <_strtod_l+0x380>
 800b908:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b90a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b90e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b912:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b916:	e698      	b.n	800b64a <_strtod_l+0x72>
 800b918:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b91a:	fb08 2101 	mla	r1, r8, r1, r2
 800b91e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b922:	920e      	str	r2, [sp, #56]	@ 0x38
 800b924:	e7b5      	b.n	800b892 <_strtod_l+0x2ba>
 800b926:	2a6e      	cmp	r2, #110	@ 0x6e
 800b928:	e7da      	b.n	800b8e0 <_strtod_l+0x308>
 800b92a:	498c      	ldr	r1, [pc, #560]	@ (800bb5c <_strtod_l+0x584>)
 800b92c:	a819      	add	r0, sp, #100	@ 0x64
 800b92e:	f001 fb83 	bl	800d038 <__match>
 800b932:	2800      	cmp	r0, #0
 800b934:	f43f aea4 	beq.w	800b680 <_strtod_l+0xa8>
 800b938:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b93a:	4989      	ldr	r1, [pc, #548]	@ (800bb60 <_strtod_l+0x588>)
 800b93c:	3b01      	subs	r3, #1
 800b93e:	a819      	add	r0, sp, #100	@ 0x64
 800b940:	9319      	str	r3, [sp, #100]	@ 0x64
 800b942:	f001 fb79 	bl	800d038 <__match>
 800b946:	b910      	cbnz	r0, 800b94e <_strtod_l+0x376>
 800b948:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b94a:	3301      	adds	r3, #1
 800b94c:	9319      	str	r3, [sp, #100]	@ 0x64
 800b94e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800bb70 <_strtod_l+0x598>
 800b952:	f04f 0a00 	mov.w	sl, #0
 800b956:	e678      	b.n	800b64a <_strtod_l+0x72>
 800b958:	4882      	ldr	r0, [pc, #520]	@ (800bb64 <_strtod_l+0x58c>)
 800b95a:	f001 f8a9 	bl	800cab0 <nan>
 800b95e:	ec5b ab10 	vmov	sl, fp, d0
 800b962:	e672      	b.n	800b64a <_strtod_l+0x72>
 800b964:	eba8 0309 	sub.w	r3, r8, r9
 800b968:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b96a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b96c:	2f00      	cmp	r7, #0
 800b96e:	bf08      	it	eq
 800b970:	462f      	moveq	r7, r5
 800b972:	2d10      	cmp	r5, #16
 800b974:	462c      	mov	r4, r5
 800b976:	bfa8      	it	ge
 800b978:	2410      	movge	r4, #16
 800b97a:	f7f4 fdeb 	bl	8000554 <__aeabi_ui2d>
 800b97e:	2d09      	cmp	r5, #9
 800b980:	4682      	mov	sl, r0
 800b982:	468b      	mov	fp, r1
 800b984:	dc13      	bgt.n	800b9ae <_strtod_l+0x3d6>
 800b986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b988:	2b00      	cmp	r3, #0
 800b98a:	f43f ae5e 	beq.w	800b64a <_strtod_l+0x72>
 800b98e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b990:	dd78      	ble.n	800ba84 <_strtod_l+0x4ac>
 800b992:	2b16      	cmp	r3, #22
 800b994:	dc5f      	bgt.n	800ba56 <_strtod_l+0x47e>
 800b996:	4974      	ldr	r1, [pc, #464]	@ (800bb68 <_strtod_l+0x590>)
 800b998:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b99c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9a0:	4652      	mov	r2, sl
 800b9a2:	465b      	mov	r3, fp
 800b9a4:	f7f4 fe50 	bl	8000648 <__aeabi_dmul>
 800b9a8:	4682      	mov	sl, r0
 800b9aa:	468b      	mov	fp, r1
 800b9ac:	e64d      	b.n	800b64a <_strtod_l+0x72>
 800b9ae:	4b6e      	ldr	r3, [pc, #440]	@ (800bb68 <_strtod_l+0x590>)
 800b9b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b9b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b9b8:	f7f4 fe46 	bl	8000648 <__aeabi_dmul>
 800b9bc:	4682      	mov	sl, r0
 800b9be:	9808      	ldr	r0, [sp, #32]
 800b9c0:	468b      	mov	fp, r1
 800b9c2:	f7f4 fdc7 	bl	8000554 <__aeabi_ui2d>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	4650      	mov	r0, sl
 800b9cc:	4659      	mov	r1, fp
 800b9ce:	f7f4 fc85 	bl	80002dc <__adddf3>
 800b9d2:	2d0f      	cmp	r5, #15
 800b9d4:	4682      	mov	sl, r0
 800b9d6:	468b      	mov	fp, r1
 800b9d8:	ddd5      	ble.n	800b986 <_strtod_l+0x3ae>
 800b9da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9dc:	1b2c      	subs	r4, r5, r4
 800b9de:	441c      	add	r4, r3
 800b9e0:	2c00      	cmp	r4, #0
 800b9e2:	f340 8096 	ble.w	800bb12 <_strtod_l+0x53a>
 800b9e6:	f014 030f 	ands.w	r3, r4, #15
 800b9ea:	d00a      	beq.n	800ba02 <_strtod_l+0x42a>
 800b9ec:	495e      	ldr	r1, [pc, #376]	@ (800bb68 <_strtod_l+0x590>)
 800b9ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b9f2:	4652      	mov	r2, sl
 800b9f4:	465b      	mov	r3, fp
 800b9f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9fa:	f7f4 fe25 	bl	8000648 <__aeabi_dmul>
 800b9fe:	4682      	mov	sl, r0
 800ba00:	468b      	mov	fp, r1
 800ba02:	f034 040f 	bics.w	r4, r4, #15
 800ba06:	d073      	beq.n	800baf0 <_strtod_l+0x518>
 800ba08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ba0c:	dd48      	ble.n	800baa0 <_strtod_l+0x4c8>
 800ba0e:	2400      	movs	r4, #0
 800ba10:	46a0      	mov	r8, r4
 800ba12:	940a      	str	r4, [sp, #40]	@ 0x28
 800ba14:	46a1      	mov	r9, r4
 800ba16:	9a05      	ldr	r2, [sp, #20]
 800ba18:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bb70 <_strtod_l+0x598>
 800ba1c:	2322      	movs	r3, #34	@ 0x22
 800ba1e:	6013      	str	r3, [r2, #0]
 800ba20:	f04f 0a00 	mov.w	sl, #0
 800ba24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	f43f ae0f 	beq.w	800b64a <_strtod_l+0x72>
 800ba2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba2e:	9805      	ldr	r0, [sp, #20]
 800ba30:	f7ff f942 	bl	800acb8 <_Bfree>
 800ba34:	9805      	ldr	r0, [sp, #20]
 800ba36:	4649      	mov	r1, r9
 800ba38:	f7ff f93e 	bl	800acb8 <_Bfree>
 800ba3c:	9805      	ldr	r0, [sp, #20]
 800ba3e:	4641      	mov	r1, r8
 800ba40:	f7ff f93a 	bl	800acb8 <_Bfree>
 800ba44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ba46:	9805      	ldr	r0, [sp, #20]
 800ba48:	f7ff f936 	bl	800acb8 <_Bfree>
 800ba4c:	9805      	ldr	r0, [sp, #20]
 800ba4e:	4621      	mov	r1, r4
 800ba50:	f7ff f932 	bl	800acb8 <_Bfree>
 800ba54:	e5f9      	b.n	800b64a <_strtod_l+0x72>
 800ba56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	dbbc      	blt.n	800b9da <_strtod_l+0x402>
 800ba60:	4c41      	ldr	r4, [pc, #260]	@ (800bb68 <_strtod_l+0x590>)
 800ba62:	f1c5 050f 	rsb	r5, r5, #15
 800ba66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ba6a:	4652      	mov	r2, sl
 800ba6c:	465b      	mov	r3, fp
 800ba6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba72:	f7f4 fde9 	bl	8000648 <__aeabi_dmul>
 800ba76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba78:	1b5d      	subs	r5, r3, r5
 800ba7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ba7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ba82:	e78f      	b.n	800b9a4 <_strtod_l+0x3cc>
 800ba84:	3316      	adds	r3, #22
 800ba86:	dba8      	blt.n	800b9da <_strtod_l+0x402>
 800ba88:	4b37      	ldr	r3, [pc, #220]	@ (800bb68 <_strtod_l+0x590>)
 800ba8a:	eba9 0808 	sub.w	r8, r9, r8
 800ba8e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ba92:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ba96:	4650      	mov	r0, sl
 800ba98:	4659      	mov	r1, fp
 800ba9a:	f7f4 feff 	bl	800089c <__aeabi_ddiv>
 800ba9e:	e783      	b.n	800b9a8 <_strtod_l+0x3d0>
 800baa0:	4b32      	ldr	r3, [pc, #200]	@ (800bb6c <_strtod_l+0x594>)
 800baa2:	9308      	str	r3, [sp, #32]
 800baa4:	2300      	movs	r3, #0
 800baa6:	1124      	asrs	r4, r4, #4
 800baa8:	4650      	mov	r0, sl
 800baaa:	4659      	mov	r1, fp
 800baac:	461e      	mov	r6, r3
 800baae:	2c01      	cmp	r4, #1
 800bab0:	dc21      	bgt.n	800baf6 <_strtod_l+0x51e>
 800bab2:	b10b      	cbz	r3, 800bab8 <_strtod_l+0x4e0>
 800bab4:	4682      	mov	sl, r0
 800bab6:	468b      	mov	fp, r1
 800bab8:	492c      	ldr	r1, [pc, #176]	@ (800bb6c <_strtod_l+0x594>)
 800baba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800babe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bac2:	4652      	mov	r2, sl
 800bac4:	465b      	mov	r3, fp
 800bac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baca:	f7f4 fdbd 	bl	8000648 <__aeabi_dmul>
 800bace:	4b28      	ldr	r3, [pc, #160]	@ (800bb70 <_strtod_l+0x598>)
 800bad0:	460a      	mov	r2, r1
 800bad2:	400b      	ands	r3, r1
 800bad4:	4927      	ldr	r1, [pc, #156]	@ (800bb74 <_strtod_l+0x59c>)
 800bad6:	428b      	cmp	r3, r1
 800bad8:	4682      	mov	sl, r0
 800bada:	d898      	bhi.n	800ba0e <_strtod_l+0x436>
 800badc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bae0:	428b      	cmp	r3, r1
 800bae2:	bf86      	itte	hi
 800bae4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800bb78 <_strtod_l+0x5a0>
 800bae8:	f04f 3aff 	movhi.w	sl, #4294967295
 800baec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800baf0:	2300      	movs	r3, #0
 800baf2:	9308      	str	r3, [sp, #32]
 800baf4:	e07a      	b.n	800bbec <_strtod_l+0x614>
 800baf6:	07e2      	lsls	r2, r4, #31
 800baf8:	d505      	bpl.n	800bb06 <_strtod_l+0x52e>
 800bafa:	9b08      	ldr	r3, [sp, #32]
 800bafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb00:	f7f4 fda2 	bl	8000648 <__aeabi_dmul>
 800bb04:	2301      	movs	r3, #1
 800bb06:	9a08      	ldr	r2, [sp, #32]
 800bb08:	3208      	adds	r2, #8
 800bb0a:	3601      	adds	r6, #1
 800bb0c:	1064      	asrs	r4, r4, #1
 800bb0e:	9208      	str	r2, [sp, #32]
 800bb10:	e7cd      	b.n	800baae <_strtod_l+0x4d6>
 800bb12:	d0ed      	beq.n	800baf0 <_strtod_l+0x518>
 800bb14:	4264      	negs	r4, r4
 800bb16:	f014 020f 	ands.w	r2, r4, #15
 800bb1a:	d00a      	beq.n	800bb32 <_strtod_l+0x55a>
 800bb1c:	4b12      	ldr	r3, [pc, #72]	@ (800bb68 <_strtod_l+0x590>)
 800bb1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb22:	4650      	mov	r0, sl
 800bb24:	4659      	mov	r1, fp
 800bb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2a:	f7f4 feb7 	bl	800089c <__aeabi_ddiv>
 800bb2e:	4682      	mov	sl, r0
 800bb30:	468b      	mov	fp, r1
 800bb32:	1124      	asrs	r4, r4, #4
 800bb34:	d0dc      	beq.n	800baf0 <_strtod_l+0x518>
 800bb36:	2c1f      	cmp	r4, #31
 800bb38:	dd20      	ble.n	800bb7c <_strtod_l+0x5a4>
 800bb3a:	2400      	movs	r4, #0
 800bb3c:	46a0      	mov	r8, r4
 800bb3e:	940a      	str	r4, [sp, #40]	@ 0x28
 800bb40:	46a1      	mov	r9, r4
 800bb42:	9a05      	ldr	r2, [sp, #20]
 800bb44:	2322      	movs	r3, #34	@ 0x22
 800bb46:	f04f 0a00 	mov.w	sl, #0
 800bb4a:	f04f 0b00 	mov.w	fp, #0
 800bb4e:	6013      	str	r3, [r2, #0]
 800bb50:	e768      	b.n	800ba24 <_strtod_l+0x44c>
 800bb52:	bf00      	nop
 800bb54:	0800d4d5 	.word	0x0800d4d5
 800bb58:	0800d6ec 	.word	0x0800d6ec
 800bb5c:	0800d4cd 	.word	0x0800d4cd
 800bb60:	0800d504 	.word	0x0800d504
 800bb64:	0800d895 	.word	0x0800d895
 800bb68:	0800d620 	.word	0x0800d620
 800bb6c:	0800d5f8 	.word	0x0800d5f8
 800bb70:	7ff00000 	.word	0x7ff00000
 800bb74:	7ca00000 	.word	0x7ca00000
 800bb78:	7fefffff 	.word	0x7fefffff
 800bb7c:	f014 0310 	ands.w	r3, r4, #16
 800bb80:	bf18      	it	ne
 800bb82:	236a      	movne	r3, #106	@ 0x6a
 800bb84:	4ea9      	ldr	r6, [pc, #676]	@ (800be2c <_strtod_l+0x854>)
 800bb86:	9308      	str	r3, [sp, #32]
 800bb88:	4650      	mov	r0, sl
 800bb8a:	4659      	mov	r1, fp
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	07e2      	lsls	r2, r4, #31
 800bb90:	d504      	bpl.n	800bb9c <_strtod_l+0x5c4>
 800bb92:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb96:	f7f4 fd57 	bl	8000648 <__aeabi_dmul>
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	1064      	asrs	r4, r4, #1
 800bb9e:	f106 0608 	add.w	r6, r6, #8
 800bba2:	d1f4      	bne.n	800bb8e <_strtod_l+0x5b6>
 800bba4:	b10b      	cbz	r3, 800bbaa <_strtod_l+0x5d2>
 800bba6:	4682      	mov	sl, r0
 800bba8:	468b      	mov	fp, r1
 800bbaa:	9b08      	ldr	r3, [sp, #32]
 800bbac:	b1b3      	cbz	r3, 800bbdc <_strtod_l+0x604>
 800bbae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bbb2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	4659      	mov	r1, fp
 800bbba:	dd0f      	ble.n	800bbdc <_strtod_l+0x604>
 800bbbc:	2b1f      	cmp	r3, #31
 800bbbe:	dd55      	ble.n	800bc6c <_strtod_l+0x694>
 800bbc0:	2b34      	cmp	r3, #52	@ 0x34
 800bbc2:	bfde      	ittt	le
 800bbc4:	f04f 33ff 	movle.w	r3, #4294967295
 800bbc8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bbcc:	4093      	lslle	r3, r2
 800bbce:	f04f 0a00 	mov.w	sl, #0
 800bbd2:	bfcc      	ite	gt
 800bbd4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bbd8:	ea03 0b01 	andle.w	fp, r3, r1
 800bbdc:	2200      	movs	r2, #0
 800bbde:	2300      	movs	r3, #0
 800bbe0:	4650      	mov	r0, sl
 800bbe2:	4659      	mov	r1, fp
 800bbe4:	f7f4 ff98 	bl	8000b18 <__aeabi_dcmpeq>
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	d1a6      	bne.n	800bb3a <_strtod_l+0x562>
 800bbec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbee:	9300      	str	r3, [sp, #0]
 800bbf0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bbf2:	9805      	ldr	r0, [sp, #20]
 800bbf4:	462b      	mov	r3, r5
 800bbf6:	463a      	mov	r2, r7
 800bbf8:	f7ff f8c6 	bl	800ad88 <__s2b>
 800bbfc:	900a      	str	r0, [sp, #40]	@ 0x28
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	f43f af05 	beq.w	800ba0e <_strtod_l+0x436>
 800bc04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc06:	2a00      	cmp	r2, #0
 800bc08:	eba9 0308 	sub.w	r3, r9, r8
 800bc0c:	bfa8      	it	ge
 800bc0e:	2300      	movge	r3, #0
 800bc10:	9312      	str	r3, [sp, #72]	@ 0x48
 800bc12:	2400      	movs	r4, #0
 800bc14:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bc18:	9316      	str	r3, [sp, #88]	@ 0x58
 800bc1a:	46a0      	mov	r8, r4
 800bc1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc1e:	9805      	ldr	r0, [sp, #20]
 800bc20:	6859      	ldr	r1, [r3, #4]
 800bc22:	f7ff f809 	bl	800ac38 <_Balloc>
 800bc26:	4681      	mov	r9, r0
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	f43f aef4 	beq.w	800ba16 <_strtod_l+0x43e>
 800bc2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc30:	691a      	ldr	r2, [r3, #16]
 800bc32:	3202      	adds	r2, #2
 800bc34:	f103 010c 	add.w	r1, r3, #12
 800bc38:	0092      	lsls	r2, r2, #2
 800bc3a:	300c      	adds	r0, #12
 800bc3c:	f7fe f899 	bl	8009d72 <memcpy>
 800bc40:	ec4b ab10 	vmov	d0, sl, fp
 800bc44:	9805      	ldr	r0, [sp, #20]
 800bc46:	aa1c      	add	r2, sp, #112	@ 0x70
 800bc48:	a91b      	add	r1, sp, #108	@ 0x6c
 800bc4a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bc4e:	f7ff fbd7 	bl	800b400 <__d2b>
 800bc52:	901a      	str	r0, [sp, #104]	@ 0x68
 800bc54:	2800      	cmp	r0, #0
 800bc56:	f43f aede 	beq.w	800ba16 <_strtod_l+0x43e>
 800bc5a:	9805      	ldr	r0, [sp, #20]
 800bc5c:	2101      	movs	r1, #1
 800bc5e:	f7ff f929 	bl	800aeb4 <__i2b>
 800bc62:	4680      	mov	r8, r0
 800bc64:	b948      	cbnz	r0, 800bc7a <_strtod_l+0x6a2>
 800bc66:	f04f 0800 	mov.w	r8, #0
 800bc6a:	e6d4      	b.n	800ba16 <_strtod_l+0x43e>
 800bc6c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc70:	fa02 f303 	lsl.w	r3, r2, r3
 800bc74:	ea03 0a0a 	and.w	sl, r3, sl
 800bc78:	e7b0      	b.n	800bbdc <_strtod_l+0x604>
 800bc7a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bc7c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bc7e:	2d00      	cmp	r5, #0
 800bc80:	bfab      	itete	ge
 800bc82:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bc84:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bc86:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bc88:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bc8a:	bfac      	ite	ge
 800bc8c:	18ef      	addge	r7, r5, r3
 800bc8e:	1b5e      	sublt	r6, r3, r5
 800bc90:	9b08      	ldr	r3, [sp, #32]
 800bc92:	1aed      	subs	r5, r5, r3
 800bc94:	4415      	add	r5, r2
 800bc96:	4b66      	ldr	r3, [pc, #408]	@ (800be30 <_strtod_l+0x858>)
 800bc98:	3d01      	subs	r5, #1
 800bc9a:	429d      	cmp	r5, r3
 800bc9c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bca0:	da50      	bge.n	800bd44 <_strtod_l+0x76c>
 800bca2:	1b5b      	subs	r3, r3, r5
 800bca4:	2b1f      	cmp	r3, #31
 800bca6:	eba2 0203 	sub.w	r2, r2, r3
 800bcaa:	f04f 0101 	mov.w	r1, #1
 800bcae:	dc3d      	bgt.n	800bd2c <_strtod_l+0x754>
 800bcb0:	fa01 f303 	lsl.w	r3, r1, r3
 800bcb4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	9310      	str	r3, [sp, #64]	@ 0x40
 800bcba:	18bd      	adds	r5, r7, r2
 800bcbc:	9b08      	ldr	r3, [sp, #32]
 800bcbe:	42af      	cmp	r7, r5
 800bcc0:	4416      	add	r6, r2
 800bcc2:	441e      	add	r6, r3
 800bcc4:	463b      	mov	r3, r7
 800bcc6:	bfa8      	it	ge
 800bcc8:	462b      	movge	r3, r5
 800bcca:	42b3      	cmp	r3, r6
 800bccc:	bfa8      	it	ge
 800bcce:	4633      	movge	r3, r6
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	bfc2      	ittt	gt
 800bcd4:	1aed      	subgt	r5, r5, r3
 800bcd6:	1af6      	subgt	r6, r6, r3
 800bcd8:	1aff      	subgt	r7, r7, r3
 800bcda:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	dd16      	ble.n	800bd0e <_strtod_l+0x736>
 800bce0:	4641      	mov	r1, r8
 800bce2:	9805      	ldr	r0, [sp, #20]
 800bce4:	461a      	mov	r2, r3
 800bce6:	f7ff f9a5 	bl	800b034 <__pow5mult>
 800bcea:	4680      	mov	r8, r0
 800bcec:	2800      	cmp	r0, #0
 800bcee:	d0ba      	beq.n	800bc66 <_strtod_l+0x68e>
 800bcf0:	4601      	mov	r1, r0
 800bcf2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bcf4:	9805      	ldr	r0, [sp, #20]
 800bcf6:	f7ff f8f3 	bl	800aee0 <__multiply>
 800bcfa:	900e      	str	r0, [sp, #56]	@ 0x38
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	f43f ae8a 	beq.w	800ba16 <_strtod_l+0x43e>
 800bd02:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd04:	9805      	ldr	r0, [sp, #20]
 800bd06:	f7fe ffd7 	bl	800acb8 <_Bfree>
 800bd0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd0c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd0e:	2d00      	cmp	r5, #0
 800bd10:	dc1d      	bgt.n	800bd4e <_strtod_l+0x776>
 800bd12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	dd23      	ble.n	800bd60 <_strtod_l+0x788>
 800bd18:	4649      	mov	r1, r9
 800bd1a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bd1c:	9805      	ldr	r0, [sp, #20]
 800bd1e:	f7ff f989 	bl	800b034 <__pow5mult>
 800bd22:	4681      	mov	r9, r0
 800bd24:	b9e0      	cbnz	r0, 800bd60 <_strtod_l+0x788>
 800bd26:	f04f 0900 	mov.w	r9, #0
 800bd2a:	e674      	b.n	800ba16 <_strtod_l+0x43e>
 800bd2c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bd30:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bd34:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bd38:	35e2      	adds	r5, #226	@ 0xe2
 800bd3a:	fa01 f305 	lsl.w	r3, r1, r5
 800bd3e:	9310      	str	r3, [sp, #64]	@ 0x40
 800bd40:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bd42:	e7ba      	b.n	800bcba <_strtod_l+0x6e2>
 800bd44:	2300      	movs	r3, #0
 800bd46:	9310      	str	r3, [sp, #64]	@ 0x40
 800bd48:	2301      	movs	r3, #1
 800bd4a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd4c:	e7b5      	b.n	800bcba <_strtod_l+0x6e2>
 800bd4e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd50:	9805      	ldr	r0, [sp, #20]
 800bd52:	462a      	mov	r2, r5
 800bd54:	f7ff f9c8 	bl	800b0e8 <__lshift>
 800bd58:	901a      	str	r0, [sp, #104]	@ 0x68
 800bd5a:	2800      	cmp	r0, #0
 800bd5c:	d1d9      	bne.n	800bd12 <_strtod_l+0x73a>
 800bd5e:	e65a      	b.n	800ba16 <_strtod_l+0x43e>
 800bd60:	2e00      	cmp	r6, #0
 800bd62:	dd07      	ble.n	800bd74 <_strtod_l+0x79c>
 800bd64:	4649      	mov	r1, r9
 800bd66:	9805      	ldr	r0, [sp, #20]
 800bd68:	4632      	mov	r2, r6
 800bd6a:	f7ff f9bd 	bl	800b0e8 <__lshift>
 800bd6e:	4681      	mov	r9, r0
 800bd70:	2800      	cmp	r0, #0
 800bd72:	d0d8      	beq.n	800bd26 <_strtod_l+0x74e>
 800bd74:	2f00      	cmp	r7, #0
 800bd76:	dd08      	ble.n	800bd8a <_strtod_l+0x7b2>
 800bd78:	4641      	mov	r1, r8
 800bd7a:	9805      	ldr	r0, [sp, #20]
 800bd7c:	463a      	mov	r2, r7
 800bd7e:	f7ff f9b3 	bl	800b0e8 <__lshift>
 800bd82:	4680      	mov	r8, r0
 800bd84:	2800      	cmp	r0, #0
 800bd86:	f43f ae46 	beq.w	800ba16 <_strtod_l+0x43e>
 800bd8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd8c:	9805      	ldr	r0, [sp, #20]
 800bd8e:	464a      	mov	r2, r9
 800bd90:	f7ff fa32 	bl	800b1f8 <__mdiff>
 800bd94:	4604      	mov	r4, r0
 800bd96:	2800      	cmp	r0, #0
 800bd98:	f43f ae3d 	beq.w	800ba16 <_strtod_l+0x43e>
 800bd9c:	68c3      	ldr	r3, [r0, #12]
 800bd9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bda0:	2300      	movs	r3, #0
 800bda2:	60c3      	str	r3, [r0, #12]
 800bda4:	4641      	mov	r1, r8
 800bda6:	f7ff fa0b 	bl	800b1c0 <__mcmp>
 800bdaa:	2800      	cmp	r0, #0
 800bdac:	da46      	bge.n	800be3c <_strtod_l+0x864>
 800bdae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdb0:	ea53 030a 	orrs.w	r3, r3, sl
 800bdb4:	d16c      	bne.n	800be90 <_strtod_l+0x8b8>
 800bdb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d168      	bne.n	800be90 <_strtod_l+0x8b8>
 800bdbe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bdc2:	0d1b      	lsrs	r3, r3, #20
 800bdc4:	051b      	lsls	r3, r3, #20
 800bdc6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bdca:	d961      	bls.n	800be90 <_strtod_l+0x8b8>
 800bdcc:	6963      	ldr	r3, [r4, #20]
 800bdce:	b913      	cbnz	r3, 800bdd6 <_strtod_l+0x7fe>
 800bdd0:	6923      	ldr	r3, [r4, #16]
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	dd5c      	ble.n	800be90 <_strtod_l+0x8b8>
 800bdd6:	4621      	mov	r1, r4
 800bdd8:	2201      	movs	r2, #1
 800bdda:	9805      	ldr	r0, [sp, #20]
 800bddc:	f7ff f984 	bl	800b0e8 <__lshift>
 800bde0:	4641      	mov	r1, r8
 800bde2:	4604      	mov	r4, r0
 800bde4:	f7ff f9ec 	bl	800b1c0 <__mcmp>
 800bde8:	2800      	cmp	r0, #0
 800bdea:	dd51      	ble.n	800be90 <_strtod_l+0x8b8>
 800bdec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bdf0:	9a08      	ldr	r2, [sp, #32]
 800bdf2:	0d1b      	lsrs	r3, r3, #20
 800bdf4:	051b      	lsls	r3, r3, #20
 800bdf6:	2a00      	cmp	r2, #0
 800bdf8:	d06b      	beq.n	800bed2 <_strtod_l+0x8fa>
 800bdfa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bdfe:	d868      	bhi.n	800bed2 <_strtod_l+0x8fa>
 800be00:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800be04:	f67f ae9d 	bls.w	800bb42 <_strtod_l+0x56a>
 800be08:	4b0a      	ldr	r3, [pc, #40]	@ (800be34 <_strtod_l+0x85c>)
 800be0a:	4650      	mov	r0, sl
 800be0c:	4659      	mov	r1, fp
 800be0e:	2200      	movs	r2, #0
 800be10:	f7f4 fc1a 	bl	8000648 <__aeabi_dmul>
 800be14:	4b08      	ldr	r3, [pc, #32]	@ (800be38 <_strtod_l+0x860>)
 800be16:	400b      	ands	r3, r1
 800be18:	4682      	mov	sl, r0
 800be1a:	468b      	mov	fp, r1
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	f47f ae05 	bne.w	800ba2c <_strtod_l+0x454>
 800be22:	9a05      	ldr	r2, [sp, #20]
 800be24:	2322      	movs	r3, #34	@ 0x22
 800be26:	6013      	str	r3, [r2, #0]
 800be28:	e600      	b.n	800ba2c <_strtod_l+0x454>
 800be2a:	bf00      	nop
 800be2c:	0800d718 	.word	0x0800d718
 800be30:	fffffc02 	.word	0xfffffc02
 800be34:	39500000 	.word	0x39500000
 800be38:	7ff00000 	.word	0x7ff00000
 800be3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800be40:	d165      	bne.n	800bf0e <_strtod_l+0x936>
 800be42:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800be44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be48:	b35a      	cbz	r2, 800bea2 <_strtod_l+0x8ca>
 800be4a:	4a9f      	ldr	r2, [pc, #636]	@ (800c0c8 <_strtod_l+0xaf0>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d12b      	bne.n	800bea8 <_strtod_l+0x8d0>
 800be50:	9b08      	ldr	r3, [sp, #32]
 800be52:	4651      	mov	r1, sl
 800be54:	b303      	cbz	r3, 800be98 <_strtod_l+0x8c0>
 800be56:	4b9d      	ldr	r3, [pc, #628]	@ (800c0cc <_strtod_l+0xaf4>)
 800be58:	465a      	mov	r2, fp
 800be5a:	4013      	ands	r3, r2
 800be5c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800be60:	f04f 32ff 	mov.w	r2, #4294967295
 800be64:	d81b      	bhi.n	800be9e <_strtod_l+0x8c6>
 800be66:	0d1b      	lsrs	r3, r3, #20
 800be68:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800be6c:	fa02 f303 	lsl.w	r3, r2, r3
 800be70:	4299      	cmp	r1, r3
 800be72:	d119      	bne.n	800bea8 <_strtod_l+0x8d0>
 800be74:	4b96      	ldr	r3, [pc, #600]	@ (800c0d0 <_strtod_l+0xaf8>)
 800be76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be78:	429a      	cmp	r2, r3
 800be7a:	d102      	bne.n	800be82 <_strtod_l+0x8aa>
 800be7c:	3101      	adds	r1, #1
 800be7e:	f43f adca 	beq.w	800ba16 <_strtod_l+0x43e>
 800be82:	4b92      	ldr	r3, [pc, #584]	@ (800c0cc <_strtod_l+0xaf4>)
 800be84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be86:	401a      	ands	r2, r3
 800be88:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800be8c:	f04f 0a00 	mov.w	sl, #0
 800be90:	9b08      	ldr	r3, [sp, #32]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d1b8      	bne.n	800be08 <_strtod_l+0x830>
 800be96:	e5c9      	b.n	800ba2c <_strtod_l+0x454>
 800be98:	f04f 33ff 	mov.w	r3, #4294967295
 800be9c:	e7e8      	b.n	800be70 <_strtod_l+0x898>
 800be9e:	4613      	mov	r3, r2
 800bea0:	e7e6      	b.n	800be70 <_strtod_l+0x898>
 800bea2:	ea53 030a 	orrs.w	r3, r3, sl
 800bea6:	d0a1      	beq.n	800bdec <_strtod_l+0x814>
 800bea8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800beaa:	b1db      	cbz	r3, 800bee4 <_strtod_l+0x90c>
 800beac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800beae:	4213      	tst	r3, r2
 800beb0:	d0ee      	beq.n	800be90 <_strtod_l+0x8b8>
 800beb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800beb4:	9a08      	ldr	r2, [sp, #32]
 800beb6:	4650      	mov	r0, sl
 800beb8:	4659      	mov	r1, fp
 800beba:	b1bb      	cbz	r3, 800beec <_strtod_l+0x914>
 800bebc:	f7ff fb6e 	bl	800b59c <sulp>
 800bec0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bec4:	ec53 2b10 	vmov	r2, r3, d0
 800bec8:	f7f4 fa08 	bl	80002dc <__adddf3>
 800becc:	4682      	mov	sl, r0
 800bece:	468b      	mov	fp, r1
 800bed0:	e7de      	b.n	800be90 <_strtod_l+0x8b8>
 800bed2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bed6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800beda:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bede:	f04f 3aff 	mov.w	sl, #4294967295
 800bee2:	e7d5      	b.n	800be90 <_strtod_l+0x8b8>
 800bee4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bee6:	ea13 0f0a 	tst.w	r3, sl
 800beea:	e7e1      	b.n	800beb0 <_strtod_l+0x8d8>
 800beec:	f7ff fb56 	bl	800b59c <sulp>
 800bef0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bef4:	ec53 2b10 	vmov	r2, r3, d0
 800bef8:	f7f4 f9ee 	bl	80002d8 <__aeabi_dsub>
 800befc:	2200      	movs	r2, #0
 800befe:	2300      	movs	r3, #0
 800bf00:	4682      	mov	sl, r0
 800bf02:	468b      	mov	fp, r1
 800bf04:	f7f4 fe08 	bl	8000b18 <__aeabi_dcmpeq>
 800bf08:	2800      	cmp	r0, #0
 800bf0a:	d0c1      	beq.n	800be90 <_strtod_l+0x8b8>
 800bf0c:	e619      	b.n	800bb42 <_strtod_l+0x56a>
 800bf0e:	4641      	mov	r1, r8
 800bf10:	4620      	mov	r0, r4
 800bf12:	f7ff facd 	bl	800b4b0 <__ratio>
 800bf16:	ec57 6b10 	vmov	r6, r7, d0
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bf20:	4630      	mov	r0, r6
 800bf22:	4639      	mov	r1, r7
 800bf24:	f7f4 fe0c 	bl	8000b40 <__aeabi_dcmple>
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	d06f      	beq.n	800c00c <_strtod_l+0xa34>
 800bf2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d17a      	bne.n	800c028 <_strtod_l+0xa50>
 800bf32:	f1ba 0f00 	cmp.w	sl, #0
 800bf36:	d158      	bne.n	800bfea <_strtod_l+0xa12>
 800bf38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d15a      	bne.n	800bff8 <_strtod_l+0xa20>
 800bf42:	4b64      	ldr	r3, [pc, #400]	@ (800c0d4 <_strtod_l+0xafc>)
 800bf44:	2200      	movs	r2, #0
 800bf46:	4630      	mov	r0, r6
 800bf48:	4639      	mov	r1, r7
 800bf4a:	f7f4 fdef 	bl	8000b2c <__aeabi_dcmplt>
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	d159      	bne.n	800c006 <_strtod_l+0xa2e>
 800bf52:	4630      	mov	r0, r6
 800bf54:	4639      	mov	r1, r7
 800bf56:	4b60      	ldr	r3, [pc, #384]	@ (800c0d8 <_strtod_l+0xb00>)
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f7f4 fb75 	bl	8000648 <__aeabi_dmul>
 800bf5e:	4606      	mov	r6, r0
 800bf60:	460f      	mov	r7, r1
 800bf62:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bf66:	9606      	str	r6, [sp, #24]
 800bf68:	9307      	str	r3, [sp, #28]
 800bf6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf6e:	4d57      	ldr	r5, [pc, #348]	@ (800c0cc <_strtod_l+0xaf4>)
 800bf70:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bf74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf76:	401d      	ands	r5, r3
 800bf78:	4b58      	ldr	r3, [pc, #352]	@ (800c0dc <_strtod_l+0xb04>)
 800bf7a:	429d      	cmp	r5, r3
 800bf7c:	f040 80b2 	bne.w	800c0e4 <_strtod_l+0xb0c>
 800bf80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf82:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bf86:	ec4b ab10 	vmov	d0, sl, fp
 800bf8a:	f7ff f9c9 	bl	800b320 <__ulp>
 800bf8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf92:	ec51 0b10 	vmov	r0, r1, d0
 800bf96:	f7f4 fb57 	bl	8000648 <__aeabi_dmul>
 800bf9a:	4652      	mov	r2, sl
 800bf9c:	465b      	mov	r3, fp
 800bf9e:	f7f4 f99d 	bl	80002dc <__adddf3>
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	4949      	ldr	r1, [pc, #292]	@ (800c0cc <_strtod_l+0xaf4>)
 800bfa6:	4a4e      	ldr	r2, [pc, #312]	@ (800c0e0 <_strtod_l+0xb08>)
 800bfa8:	4019      	ands	r1, r3
 800bfaa:	4291      	cmp	r1, r2
 800bfac:	4682      	mov	sl, r0
 800bfae:	d942      	bls.n	800c036 <_strtod_l+0xa5e>
 800bfb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bfb2:	4b47      	ldr	r3, [pc, #284]	@ (800c0d0 <_strtod_l+0xaf8>)
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d103      	bne.n	800bfc0 <_strtod_l+0x9e8>
 800bfb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bfba:	3301      	adds	r3, #1
 800bfbc:	f43f ad2b 	beq.w	800ba16 <_strtod_l+0x43e>
 800bfc0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c0d0 <_strtod_l+0xaf8>
 800bfc4:	f04f 3aff 	mov.w	sl, #4294967295
 800bfc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bfca:	9805      	ldr	r0, [sp, #20]
 800bfcc:	f7fe fe74 	bl	800acb8 <_Bfree>
 800bfd0:	9805      	ldr	r0, [sp, #20]
 800bfd2:	4649      	mov	r1, r9
 800bfd4:	f7fe fe70 	bl	800acb8 <_Bfree>
 800bfd8:	9805      	ldr	r0, [sp, #20]
 800bfda:	4641      	mov	r1, r8
 800bfdc:	f7fe fe6c 	bl	800acb8 <_Bfree>
 800bfe0:	9805      	ldr	r0, [sp, #20]
 800bfe2:	4621      	mov	r1, r4
 800bfe4:	f7fe fe68 	bl	800acb8 <_Bfree>
 800bfe8:	e618      	b.n	800bc1c <_strtod_l+0x644>
 800bfea:	f1ba 0f01 	cmp.w	sl, #1
 800bfee:	d103      	bne.n	800bff8 <_strtod_l+0xa20>
 800bff0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	f43f ada5 	beq.w	800bb42 <_strtod_l+0x56a>
 800bff8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c0a8 <_strtod_l+0xad0>
 800bffc:	4f35      	ldr	r7, [pc, #212]	@ (800c0d4 <_strtod_l+0xafc>)
 800bffe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c002:	2600      	movs	r6, #0
 800c004:	e7b1      	b.n	800bf6a <_strtod_l+0x992>
 800c006:	4f34      	ldr	r7, [pc, #208]	@ (800c0d8 <_strtod_l+0xb00>)
 800c008:	2600      	movs	r6, #0
 800c00a:	e7aa      	b.n	800bf62 <_strtod_l+0x98a>
 800c00c:	4b32      	ldr	r3, [pc, #200]	@ (800c0d8 <_strtod_l+0xb00>)
 800c00e:	4630      	mov	r0, r6
 800c010:	4639      	mov	r1, r7
 800c012:	2200      	movs	r2, #0
 800c014:	f7f4 fb18 	bl	8000648 <__aeabi_dmul>
 800c018:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c01a:	4606      	mov	r6, r0
 800c01c:	460f      	mov	r7, r1
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d09f      	beq.n	800bf62 <_strtod_l+0x98a>
 800c022:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c026:	e7a0      	b.n	800bf6a <_strtod_l+0x992>
 800c028:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c0b0 <_strtod_l+0xad8>
 800c02c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c030:	ec57 6b17 	vmov	r6, r7, d7
 800c034:	e799      	b.n	800bf6a <_strtod_l+0x992>
 800c036:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c03a:	9b08      	ldr	r3, [sp, #32]
 800c03c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c040:	2b00      	cmp	r3, #0
 800c042:	d1c1      	bne.n	800bfc8 <_strtod_l+0x9f0>
 800c044:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c048:	0d1b      	lsrs	r3, r3, #20
 800c04a:	051b      	lsls	r3, r3, #20
 800c04c:	429d      	cmp	r5, r3
 800c04e:	d1bb      	bne.n	800bfc8 <_strtod_l+0x9f0>
 800c050:	4630      	mov	r0, r6
 800c052:	4639      	mov	r1, r7
 800c054:	f7f4 fe58 	bl	8000d08 <__aeabi_d2lz>
 800c058:	f7f4 fac8 	bl	80005ec <__aeabi_l2d>
 800c05c:	4602      	mov	r2, r0
 800c05e:	460b      	mov	r3, r1
 800c060:	4630      	mov	r0, r6
 800c062:	4639      	mov	r1, r7
 800c064:	f7f4 f938 	bl	80002d8 <__aeabi_dsub>
 800c068:	460b      	mov	r3, r1
 800c06a:	4602      	mov	r2, r0
 800c06c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c070:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c074:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c076:	ea46 060a 	orr.w	r6, r6, sl
 800c07a:	431e      	orrs	r6, r3
 800c07c:	d06f      	beq.n	800c15e <_strtod_l+0xb86>
 800c07e:	a30e      	add	r3, pc, #56	@ (adr r3, 800c0b8 <_strtod_l+0xae0>)
 800c080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c084:	f7f4 fd52 	bl	8000b2c <__aeabi_dcmplt>
 800c088:	2800      	cmp	r0, #0
 800c08a:	f47f accf 	bne.w	800ba2c <_strtod_l+0x454>
 800c08e:	a30c      	add	r3, pc, #48	@ (adr r3, 800c0c0 <_strtod_l+0xae8>)
 800c090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c094:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c098:	f7f4 fd66 	bl	8000b68 <__aeabi_dcmpgt>
 800c09c:	2800      	cmp	r0, #0
 800c09e:	d093      	beq.n	800bfc8 <_strtod_l+0x9f0>
 800c0a0:	e4c4      	b.n	800ba2c <_strtod_l+0x454>
 800c0a2:	bf00      	nop
 800c0a4:	f3af 8000 	nop.w
 800c0a8:	00000000 	.word	0x00000000
 800c0ac:	bff00000 	.word	0xbff00000
 800c0b0:	00000000 	.word	0x00000000
 800c0b4:	3ff00000 	.word	0x3ff00000
 800c0b8:	94a03595 	.word	0x94a03595
 800c0bc:	3fdfffff 	.word	0x3fdfffff
 800c0c0:	35afe535 	.word	0x35afe535
 800c0c4:	3fe00000 	.word	0x3fe00000
 800c0c8:	000fffff 	.word	0x000fffff
 800c0cc:	7ff00000 	.word	0x7ff00000
 800c0d0:	7fefffff 	.word	0x7fefffff
 800c0d4:	3ff00000 	.word	0x3ff00000
 800c0d8:	3fe00000 	.word	0x3fe00000
 800c0dc:	7fe00000 	.word	0x7fe00000
 800c0e0:	7c9fffff 	.word	0x7c9fffff
 800c0e4:	9b08      	ldr	r3, [sp, #32]
 800c0e6:	b323      	cbz	r3, 800c132 <_strtod_l+0xb5a>
 800c0e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c0ec:	d821      	bhi.n	800c132 <_strtod_l+0xb5a>
 800c0ee:	a328      	add	r3, pc, #160	@ (adr r3, 800c190 <_strtod_l+0xbb8>)
 800c0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f4:	4630      	mov	r0, r6
 800c0f6:	4639      	mov	r1, r7
 800c0f8:	f7f4 fd22 	bl	8000b40 <__aeabi_dcmple>
 800c0fc:	b1a0      	cbz	r0, 800c128 <_strtod_l+0xb50>
 800c0fe:	4639      	mov	r1, r7
 800c100:	4630      	mov	r0, r6
 800c102:	f7f4 fd79 	bl	8000bf8 <__aeabi_d2uiz>
 800c106:	2801      	cmp	r0, #1
 800c108:	bf38      	it	cc
 800c10a:	2001      	movcc	r0, #1
 800c10c:	f7f4 fa22 	bl	8000554 <__aeabi_ui2d>
 800c110:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c112:	4606      	mov	r6, r0
 800c114:	460f      	mov	r7, r1
 800c116:	b9fb      	cbnz	r3, 800c158 <_strtod_l+0xb80>
 800c118:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c11c:	9014      	str	r0, [sp, #80]	@ 0x50
 800c11e:	9315      	str	r3, [sp, #84]	@ 0x54
 800c120:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c124:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c128:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c12a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c12e:	1b5b      	subs	r3, r3, r5
 800c130:	9311      	str	r3, [sp, #68]	@ 0x44
 800c132:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c136:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c13a:	f7ff f8f1 	bl	800b320 <__ulp>
 800c13e:	4650      	mov	r0, sl
 800c140:	ec53 2b10 	vmov	r2, r3, d0
 800c144:	4659      	mov	r1, fp
 800c146:	f7f4 fa7f 	bl	8000648 <__aeabi_dmul>
 800c14a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c14e:	f7f4 f8c5 	bl	80002dc <__adddf3>
 800c152:	4682      	mov	sl, r0
 800c154:	468b      	mov	fp, r1
 800c156:	e770      	b.n	800c03a <_strtod_l+0xa62>
 800c158:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c15c:	e7e0      	b.n	800c120 <_strtod_l+0xb48>
 800c15e:	a30e      	add	r3, pc, #56	@ (adr r3, 800c198 <_strtod_l+0xbc0>)
 800c160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c164:	f7f4 fce2 	bl	8000b2c <__aeabi_dcmplt>
 800c168:	e798      	b.n	800c09c <_strtod_l+0xac4>
 800c16a:	2300      	movs	r3, #0
 800c16c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c16e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c170:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c172:	6013      	str	r3, [r2, #0]
 800c174:	f7ff ba6d 	b.w	800b652 <_strtod_l+0x7a>
 800c178:	2a65      	cmp	r2, #101	@ 0x65
 800c17a:	f43f ab66 	beq.w	800b84a <_strtod_l+0x272>
 800c17e:	2a45      	cmp	r2, #69	@ 0x45
 800c180:	f43f ab63 	beq.w	800b84a <_strtod_l+0x272>
 800c184:	2301      	movs	r3, #1
 800c186:	f7ff bb9e 	b.w	800b8c6 <_strtod_l+0x2ee>
 800c18a:	bf00      	nop
 800c18c:	f3af 8000 	nop.w
 800c190:	ffc00000 	.word	0xffc00000
 800c194:	41dfffff 	.word	0x41dfffff
 800c198:	94a03595 	.word	0x94a03595
 800c19c:	3fcfffff 	.word	0x3fcfffff

0800c1a0 <_strtod_r>:
 800c1a0:	4b01      	ldr	r3, [pc, #4]	@ (800c1a8 <_strtod_r+0x8>)
 800c1a2:	f7ff ba19 	b.w	800b5d8 <_strtod_l>
 800c1a6:	bf00      	nop
 800c1a8:	2000006c 	.word	0x2000006c

0800c1ac <_strtol_l.constprop.0>:
 800c1ac:	2b24      	cmp	r3, #36	@ 0x24
 800c1ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1b2:	4686      	mov	lr, r0
 800c1b4:	4690      	mov	r8, r2
 800c1b6:	d801      	bhi.n	800c1bc <_strtol_l.constprop.0+0x10>
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d106      	bne.n	800c1ca <_strtol_l.constprop.0+0x1e>
 800c1bc:	f7fd fdac 	bl	8009d18 <__errno>
 800c1c0:	2316      	movs	r3, #22
 800c1c2:	6003      	str	r3, [r0, #0]
 800c1c4:	2000      	movs	r0, #0
 800c1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ca:	4834      	ldr	r0, [pc, #208]	@ (800c29c <_strtol_l.constprop.0+0xf0>)
 800c1cc:	460d      	mov	r5, r1
 800c1ce:	462a      	mov	r2, r5
 800c1d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1d4:	5d06      	ldrb	r6, [r0, r4]
 800c1d6:	f016 0608 	ands.w	r6, r6, #8
 800c1da:	d1f8      	bne.n	800c1ce <_strtol_l.constprop.0+0x22>
 800c1dc:	2c2d      	cmp	r4, #45	@ 0x2d
 800c1de:	d12d      	bne.n	800c23c <_strtol_l.constprop.0+0x90>
 800c1e0:	782c      	ldrb	r4, [r5, #0]
 800c1e2:	2601      	movs	r6, #1
 800c1e4:	1c95      	adds	r5, r2, #2
 800c1e6:	f033 0210 	bics.w	r2, r3, #16
 800c1ea:	d109      	bne.n	800c200 <_strtol_l.constprop.0+0x54>
 800c1ec:	2c30      	cmp	r4, #48	@ 0x30
 800c1ee:	d12a      	bne.n	800c246 <_strtol_l.constprop.0+0x9a>
 800c1f0:	782a      	ldrb	r2, [r5, #0]
 800c1f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c1f6:	2a58      	cmp	r2, #88	@ 0x58
 800c1f8:	d125      	bne.n	800c246 <_strtol_l.constprop.0+0x9a>
 800c1fa:	786c      	ldrb	r4, [r5, #1]
 800c1fc:	2310      	movs	r3, #16
 800c1fe:	3502      	adds	r5, #2
 800c200:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c204:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c208:	2200      	movs	r2, #0
 800c20a:	fbbc f9f3 	udiv	r9, ip, r3
 800c20e:	4610      	mov	r0, r2
 800c210:	fb03 ca19 	mls	sl, r3, r9, ip
 800c214:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c218:	2f09      	cmp	r7, #9
 800c21a:	d81b      	bhi.n	800c254 <_strtol_l.constprop.0+0xa8>
 800c21c:	463c      	mov	r4, r7
 800c21e:	42a3      	cmp	r3, r4
 800c220:	dd27      	ble.n	800c272 <_strtol_l.constprop.0+0xc6>
 800c222:	1c57      	adds	r7, r2, #1
 800c224:	d007      	beq.n	800c236 <_strtol_l.constprop.0+0x8a>
 800c226:	4581      	cmp	r9, r0
 800c228:	d320      	bcc.n	800c26c <_strtol_l.constprop.0+0xc0>
 800c22a:	d101      	bne.n	800c230 <_strtol_l.constprop.0+0x84>
 800c22c:	45a2      	cmp	sl, r4
 800c22e:	db1d      	blt.n	800c26c <_strtol_l.constprop.0+0xc0>
 800c230:	fb00 4003 	mla	r0, r0, r3, r4
 800c234:	2201      	movs	r2, #1
 800c236:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c23a:	e7eb      	b.n	800c214 <_strtol_l.constprop.0+0x68>
 800c23c:	2c2b      	cmp	r4, #43	@ 0x2b
 800c23e:	bf04      	itt	eq
 800c240:	782c      	ldrbeq	r4, [r5, #0]
 800c242:	1c95      	addeq	r5, r2, #2
 800c244:	e7cf      	b.n	800c1e6 <_strtol_l.constprop.0+0x3a>
 800c246:	2b00      	cmp	r3, #0
 800c248:	d1da      	bne.n	800c200 <_strtol_l.constprop.0+0x54>
 800c24a:	2c30      	cmp	r4, #48	@ 0x30
 800c24c:	bf0c      	ite	eq
 800c24e:	2308      	moveq	r3, #8
 800c250:	230a      	movne	r3, #10
 800c252:	e7d5      	b.n	800c200 <_strtol_l.constprop.0+0x54>
 800c254:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c258:	2f19      	cmp	r7, #25
 800c25a:	d801      	bhi.n	800c260 <_strtol_l.constprop.0+0xb4>
 800c25c:	3c37      	subs	r4, #55	@ 0x37
 800c25e:	e7de      	b.n	800c21e <_strtol_l.constprop.0+0x72>
 800c260:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c264:	2f19      	cmp	r7, #25
 800c266:	d804      	bhi.n	800c272 <_strtol_l.constprop.0+0xc6>
 800c268:	3c57      	subs	r4, #87	@ 0x57
 800c26a:	e7d8      	b.n	800c21e <_strtol_l.constprop.0+0x72>
 800c26c:	f04f 32ff 	mov.w	r2, #4294967295
 800c270:	e7e1      	b.n	800c236 <_strtol_l.constprop.0+0x8a>
 800c272:	1c53      	adds	r3, r2, #1
 800c274:	d108      	bne.n	800c288 <_strtol_l.constprop.0+0xdc>
 800c276:	2322      	movs	r3, #34	@ 0x22
 800c278:	f8ce 3000 	str.w	r3, [lr]
 800c27c:	4660      	mov	r0, ip
 800c27e:	f1b8 0f00 	cmp.w	r8, #0
 800c282:	d0a0      	beq.n	800c1c6 <_strtol_l.constprop.0+0x1a>
 800c284:	1e69      	subs	r1, r5, #1
 800c286:	e006      	b.n	800c296 <_strtol_l.constprop.0+0xea>
 800c288:	b106      	cbz	r6, 800c28c <_strtol_l.constprop.0+0xe0>
 800c28a:	4240      	negs	r0, r0
 800c28c:	f1b8 0f00 	cmp.w	r8, #0
 800c290:	d099      	beq.n	800c1c6 <_strtol_l.constprop.0+0x1a>
 800c292:	2a00      	cmp	r2, #0
 800c294:	d1f6      	bne.n	800c284 <_strtol_l.constprop.0+0xd8>
 800c296:	f8c8 1000 	str.w	r1, [r8]
 800c29a:	e794      	b.n	800c1c6 <_strtol_l.constprop.0+0x1a>
 800c29c:	0800d741 	.word	0x0800d741

0800c2a0 <_strtol_r>:
 800c2a0:	f7ff bf84 	b.w	800c1ac <_strtol_l.constprop.0>

0800c2a4 <__ssputs_r>:
 800c2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2a8:	688e      	ldr	r6, [r1, #8]
 800c2aa:	461f      	mov	r7, r3
 800c2ac:	42be      	cmp	r6, r7
 800c2ae:	680b      	ldr	r3, [r1, #0]
 800c2b0:	4682      	mov	sl, r0
 800c2b2:	460c      	mov	r4, r1
 800c2b4:	4690      	mov	r8, r2
 800c2b6:	d82d      	bhi.n	800c314 <__ssputs_r+0x70>
 800c2b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c2bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c2c0:	d026      	beq.n	800c310 <__ssputs_r+0x6c>
 800c2c2:	6965      	ldr	r5, [r4, #20]
 800c2c4:	6909      	ldr	r1, [r1, #16]
 800c2c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2ca:	eba3 0901 	sub.w	r9, r3, r1
 800c2ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2d2:	1c7b      	adds	r3, r7, #1
 800c2d4:	444b      	add	r3, r9
 800c2d6:	106d      	asrs	r5, r5, #1
 800c2d8:	429d      	cmp	r5, r3
 800c2da:	bf38      	it	cc
 800c2dc:	461d      	movcc	r5, r3
 800c2de:	0553      	lsls	r3, r2, #21
 800c2e0:	d527      	bpl.n	800c332 <__ssputs_r+0x8e>
 800c2e2:	4629      	mov	r1, r5
 800c2e4:	f7fe fc1c 	bl	800ab20 <_malloc_r>
 800c2e8:	4606      	mov	r6, r0
 800c2ea:	b360      	cbz	r0, 800c346 <__ssputs_r+0xa2>
 800c2ec:	6921      	ldr	r1, [r4, #16]
 800c2ee:	464a      	mov	r2, r9
 800c2f0:	f7fd fd3f 	bl	8009d72 <memcpy>
 800c2f4:	89a3      	ldrh	r3, [r4, #12]
 800c2f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c2fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2fe:	81a3      	strh	r3, [r4, #12]
 800c300:	6126      	str	r6, [r4, #16]
 800c302:	6165      	str	r5, [r4, #20]
 800c304:	444e      	add	r6, r9
 800c306:	eba5 0509 	sub.w	r5, r5, r9
 800c30a:	6026      	str	r6, [r4, #0]
 800c30c:	60a5      	str	r5, [r4, #8]
 800c30e:	463e      	mov	r6, r7
 800c310:	42be      	cmp	r6, r7
 800c312:	d900      	bls.n	800c316 <__ssputs_r+0x72>
 800c314:	463e      	mov	r6, r7
 800c316:	6820      	ldr	r0, [r4, #0]
 800c318:	4632      	mov	r2, r6
 800c31a:	4641      	mov	r1, r8
 800c31c:	f000 fb6a 	bl	800c9f4 <memmove>
 800c320:	68a3      	ldr	r3, [r4, #8]
 800c322:	1b9b      	subs	r3, r3, r6
 800c324:	60a3      	str	r3, [r4, #8]
 800c326:	6823      	ldr	r3, [r4, #0]
 800c328:	4433      	add	r3, r6
 800c32a:	6023      	str	r3, [r4, #0]
 800c32c:	2000      	movs	r0, #0
 800c32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c332:	462a      	mov	r2, r5
 800c334:	f000 ff41 	bl	800d1ba <_realloc_r>
 800c338:	4606      	mov	r6, r0
 800c33a:	2800      	cmp	r0, #0
 800c33c:	d1e0      	bne.n	800c300 <__ssputs_r+0x5c>
 800c33e:	6921      	ldr	r1, [r4, #16]
 800c340:	4650      	mov	r0, sl
 800c342:	f7fe fb79 	bl	800aa38 <_free_r>
 800c346:	230c      	movs	r3, #12
 800c348:	f8ca 3000 	str.w	r3, [sl]
 800c34c:	89a3      	ldrh	r3, [r4, #12]
 800c34e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c352:	81a3      	strh	r3, [r4, #12]
 800c354:	f04f 30ff 	mov.w	r0, #4294967295
 800c358:	e7e9      	b.n	800c32e <__ssputs_r+0x8a>
	...

0800c35c <_svfiprintf_r>:
 800c35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c360:	4698      	mov	r8, r3
 800c362:	898b      	ldrh	r3, [r1, #12]
 800c364:	061b      	lsls	r3, r3, #24
 800c366:	b09d      	sub	sp, #116	@ 0x74
 800c368:	4607      	mov	r7, r0
 800c36a:	460d      	mov	r5, r1
 800c36c:	4614      	mov	r4, r2
 800c36e:	d510      	bpl.n	800c392 <_svfiprintf_r+0x36>
 800c370:	690b      	ldr	r3, [r1, #16]
 800c372:	b973      	cbnz	r3, 800c392 <_svfiprintf_r+0x36>
 800c374:	2140      	movs	r1, #64	@ 0x40
 800c376:	f7fe fbd3 	bl	800ab20 <_malloc_r>
 800c37a:	6028      	str	r0, [r5, #0]
 800c37c:	6128      	str	r0, [r5, #16]
 800c37e:	b930      	cbnz	r0, 800c38e <_svfiprintf_r+0x32>
 800c380:	230c      	movs	r3, #12
 800c382:	603b      	str	r3, [r7, #0]
 800c384:	f04f 30ff 	mov.w	r0, #4294967295
 800c388:	b01d      	add	sp, #116	@ 0x74
 800c38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c38e:	2340      	movs	r3, #64	@ 0x40
 800c390:	616b      	str	r3, [r5, #20]
 800c392:	2300      	movs	r3, #0
 800c394:	9309      	str	r3, [sp, #36]	@ 0x24
 800c396:	2320      	movs	r3, #32
 800c398:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c39c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3a0:	2330      	movs	r3, #48	@ 0x30
 800c3a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c540 <_svfiprintf_r+0x1e4>
 800c3a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c3aa:	f04f 0901 	mov.w	r9, #1
 800c3ae:	4623      	mov	r3, r4
 800c3b0:	469a      	mov	sl, r3
 800c3b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3b6:	b10a      	cbz	r2, 800c3bc <_svfiprintf_r+0x60>
 800c3b8:	2a25      	cmp	r2, #37	@ 0x25
 800c3ba:	d1f9      	bne.n	800c3b0 <_svfiprintf_r+0x54>
 800c3bc:	ebba 0b04 	subs.w	fp, sl, r4
 800c3c0:	d00b      	beq.n	800c3da <_svfiprintf_r+0x7e>
 800c3c2:	465b      	mov	r3, fp
 800c3c4:	4622      	mov	r2, r4
 800c3c6:	4629      	mov	r1, r5
 800c3c8:	4638      	mov	r0, r7
 800c3ca:	f7ff ff6b 	bl	800c2a4 <__ssputs_r>
 800c3ce:	3001      	adds	r0, #1
 800c3d0:	f000 80a7 	beq.w	800c522 <_svfiprintf_r+0x1c6>
 800c3d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3d6:	445a      	add	r2, fp
 800c3d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800c3da:	f89a 3000 	ldrb.w	r3, [sl]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	f000 809f 	beq.w	800c522 <_svfiprintf_r+0x1c6>
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3ee:	f10a 0a01 	add.w	sl, sl, #1
 800c3f2:	9304      	str	r3, [sp, #16]
 800c3f4:	9307      	str	r3, [sp, #28]
 800c3f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c3fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800c3fc:	4654      	mov	r4, sl
 800c3fe:	2205      	movs	r2, #5
 800c400:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c404:	484e      	ldr	r0, [pc, #312]	@ (800c540 <_svfiprintf_r+0x1e4>)
 800c406:	f7f3 ff0b 	bl	8000220 <memchr>
 800c40a:	9a04      	ldr	r2, [sp, #16]
 800c40c:	b9d8      	cbnz	r0, 800c446 <_svfiprintf_r+0xea>
 800c40e:	06d0      	lsls	r0, r2, #27
 800c410:	bf44      	itt	mi
 800c412:	2320      	movmi	r3, #32
 800c414:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c418:	0711      	lsls	r1, r2, #28
 800c41a:	bf44      	itt	mi
 800c41c:	232b      	movmi	r3, #43	@ 0x2b
 800c41e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c422:	f89a 3000 	ldrb.w	r3, [sl]
 800c426:	2b2a      	cmp	r3, #42	@ 0x2a
 800c428:	d015      	beq.n	800c456 <_svfiprintf_r+0xfa>
 800c42a:	9a07      	ldr	r2, [sp, #28]
 800c42c:	4654      	mov	r4, sl
 800c42e:	2000      	movs	r0, #0
 800c430:	f04f 0c0a 	mov.w	ip, #10
 800c434:	4621      	mov	r1, r4
 800c436:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c43a:	3b30      	subs	r3, #48	@ 0x30
 800c43c:	2b09      	cmp	r3, #9
 800c43e:	d94b      	bls.n	800c4d8 <_svfiprintf_r+0x17c>
 800c440:	b1b0      	cbz	r0, 800c470 <_svfiprintf_r+0x114>
 800c442:	9207      	str	r2, [sp, #28]
 800c444:	e014      	b.n	800c470 <_svfiprintf_r+0x114>
 800c446:	eba0 0308 	sub.w	r3, r0, r8
 800c44a:	fa09 f303 	lsl.w	r3, r9, r3
 800c44e:	4313      	orrs	r3, r2
 800c450:	9304      	str	r3, [sp, #16]
 800c452:	46a2      	mov	sl, r4
 800c454:	e7d2      	b.n	800c3fc <_svfiprintf_r+0xa0>
 800c456:	9b03      	ldr	r3, [sp, #12]
 800c458:	1d19      	adds	r1, r3, #4
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	9103      	str	r1, [sp, #12]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	bfbb      	ittet	lt
 800c462:	425b      	neglt	r3, r3
 800c464:	f042 0202 	orrlt.w	r2, r2, #2
 800c468:	9307      	strge	r3, [sp, #28]
 800c46a:	9307      	strlt	r3, [sp, #28]
 800c46c:	bfb8      	it	lt
 800c46e:	9204      	strlt	r2, [sp, #16]
 800c470:	7823      	ldrb	r3, [r4, #0]
 800c472:	2b2e      	cmp	r3, #46	@ 0x2e
 800c474:	d10a      	bne.n	800c48c <_svfiprintf_r+0x130>
 800c476:	7863      	ldrb	r3, [r4, #1]
 800c478:	2b2a      	cmp	r3, #42	@ 0x2a
 800c47a:	d132      	bne.n	800c4e2 <_svfiprintf_r+0x186>
 800c47c:	9b03      	ldr	r3, [sp, #12]
 800c47e:	1d1a      	adds	r2, r3, #4
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	9203      	str	r2, [sp, #12]
 800c484:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c488:	3402      	adds	r4, #2
 800c48a:	9305      	str	r3, [sp, #20]
 800c48c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c550 <_svfiprintf_r+0x1f4>
 800c490:	7821      	ldrb	r1, [r4, #0]
 800c492:	2203      	movs	r2, #3
 800c494:	4650      	mov	r0, sl
 800c496:	f7f3 fec3 	bl	8000220 <memchr>
 800c49a:	b138      	cbz	r0, 800c4ac <_svfiprintf_r+0x150>
 800c49c:	9b04      	ldr	r3, [sp, #16]
 800c49e:	eba0 000a 	sub.w	r0, r0, sl
 800c4a2:	2240      	movs	r2, #64	@ 0x40
 800c4a4:	4082      	lsls	r2, r0
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	3401      	adds	r4, #1
 800c4aa:	9304      	str	r3, [sp, #16]
 800c4ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4b0:	4824      	ldr	r0, [pc, #144]	@ (800c544 <_svfiprintf_r+0x1e8>)
 800c4b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c4b6:	2206      	movs	r2, #6
 800c4b8:	f7f3 feb2 	bl	8000220 <memchr>
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	d036      	beq.n	800c52e <_svfiprintf_r+0x1d2>
 800c4c0:	4b21      	ldr	r3, [pc, #132]	@ (800c548 <_svfiprintf_r+0x1ec>)
 800c4c2:	bb1b      	cbnz	r3, 800c50c <_svfiprintf_r+0x1b0>
 800c4c4:	9b03      	ldr	r3, [sp, #12]
 800c4c6:	3307      	adds	r3, #7
 800c4c8:	f023 0307 	bic.w	r3, r3, #7
 800c4cc:	3308      	adds	r3, #8
 800c4ce:	9303      	str	r3, [sp, #12]
 800c4d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4d2:	4433      	add	r3, r6
 800c4d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4d6:	e76a      	b.n	800c3ae <_svfiprintf_r+0x52>
 800c4d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4dc:	460c      	mov	r4, r1
 800c4de:	2001      	movs	r0, #1
 800c4e0:	e7a8      	b.n	800c434 <_svfiprintf_r+0xd8>
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	3401      	adds	r4, #1
 800c4e6:	9305      	str	r3, [sp, #20]
 800c4e8:	4619      	mov	r1, r3
 800c4ea:	f04f 0c0a 	mov.w	ip, #10
 800c4ee:	4620      	mov	r0, r4
 800c4f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4f4:	3a30      	subs	r2, #48	@ 0x30
 800c4f6:	2a09      	cmp	r2, #9
 800c4f8:	d903      	bls.n	800c502 <_svfiprintf_r+0x1a6>
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d0c6      	beq.n	800c48c <_svfiprintf_r+0x130>
 800c4fe:	9105      	str	r1, [sp, #20]
 800c500:	e7c4      	b.n	800c48c <_svfiprintf_r+0x130>
 800c502:	fb0c 2101 	mla	r1, ip, r1, r2
 800c506:	4604      	mov	r4, r0
 800c508:	2301      	movs	r3, #1
 800c50a:	e7f0      	b.n	800c4ee <_svfiprintf_r+0x192>
 800c50c:	ab03      	add	r3, sp, #12
 800c50e:	9300      	str	r3, [sp, #0]
 800c510:	462a      	mov	r2, r5
 800c512:	4b0e      	ldr	r3, [pc, #56]	@ (800c54c <_svfiprintf_r+0x1f0>)
 800c514:	a904      	add	r1, sp, #16
 800c516:	4638      	mov	r0, r7
 800c518:	f7fc fbb6 	bl	8008c88 <_printf_float>
 800c51c:	1c42      	adds	r2, r0, #1
 800c51e:	4606      	mov	r6, r0
 800c520:	d1d6      	bne.n	800c4d0 <_svfiprintf_r+0x174>
 800c522:	89ab      	ldrh	r3, [r5, #12]
 800c524:	065b      	lsls	r3, r3, #25
 800c526:	f53f af2d 	bmi.w	800c384 <_svfiprintf_r+0x28>
 800c52a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c52c:	e72c      	b.n	800c388 <_svfiprintf_r+0x2c>
 800c52e:	ab03      	add	r3, sp, #12
 800c530:	9300      	str	r3, [sp, #0]
 800c532:	462a      	mov	r2, r5
 800c534:	4b05      	ldr	r3, [pc, #20]	@ (800c54c <_svfiprintf_r+0x1f0>)
 800c536:	a904      	add	r1, sp, #16
 800c538:	4638      	mov	r0, r7
 800c53a:	f7fc fe3d 	bl	80091b8 <_printf_i>
 800c53e:	e7ed      	b.n	800c51c <_svfiprintf_r+0x1c0>
 800c540:	0800d841 	.word	0x0800d841
 800c544:	0800d84b 	.word	0x0800d84b
 800c548:	08008c89 	.word	0x08008c89
 800c54c:	0800c2a5 	.word	0x0800c2a5
 800c550:	0800d847 	.word	0x0800d847

0800c554 <__sfputc_r>:
 800c554:	6893      	ldr	r3, [r2, #8]
 800c556:	3b01      	subs	r3, #1
 800c558:	2b00      	cmp	r3, #0
 800c55a:	b410      	push	{r4}
 800c55c:	6093      	str	r3, [r2, #8]
 800c55e:	da08      	bge.n	800c572 <__sfputc_r+0x1e>
 800c560:	6994      	ldr	r4, [r2, #24]
 800c562:	42a3      	cmp	r3, r4
 800c564:	db01      	blt.n	800c56a <__sfputc_r+0x16>
 800c566:	290a      	cmp	r1, #10
 800c568:	d103      	bne.n	800c572 <__sfputc_r+0x1e>
 800c56a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c56e:	f7fd baec 	b.w	8009b4a <__swbuf_r>
 800c572:	6813      	ldr	r3, [r2, #0]
 800c574:	1c58      	adds	r0, r3, #1
 800c576:	6010      	str	r0, [r2, #0]
 800c578:	7019      	strb	r1, [r3, #0]
 800c57a:	4608      	mov	r0, r1
 800c57c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c580:	4770      	bx	lr

0800c582 <__sfputs_r>:
 800c582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c584:	4606      	mov	r6, r0
 800c586:	460f      	mov	r7, r1
 800c588:	4614      	mov	r4, r2
 800c58a:	18d5      	adds	r5, r2, r3
 800c58c:	42ac      	cmp	r4, r5
 800c58e:	d101      	bne.n	800c594 <__sfputs_r+0x12>
 800c590:	2000      	movs	r0, #0
 800c592:	e007      	b.n	800c5a4 <__sfputs_r+0x22>
 800c594:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c598:	463a      	mov	r2, r7
 800c59a:	4630      	mov	r0, r6
 800c59c:	f7ff ffda 	bl	800c554 <__sfputc_r>
 800c5a0:	1c43      	adds	r3, r0, #1
 800c5a2:	d1f3      	bne.n	800c58c <__sfputs_r+0xa>
 800c5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5a8 <_vfiprintf_r>:
 800c5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ac:	460d      	mov	r5, r1
 800c5ae:	b09d      	sub	sp, #116	@ 0x74
 800c5b0:	4614      	mov	r4, r2
 800c5b2:	4698      	mov	r8, r3
 800c5b4:	4606      	mov	r6, r0
 800c5b6:	b118      	cbz	r0, 800c5c0 <_vfiprintf_r+0x18>
 800c5b8:	6a03      	ldr	r3, [r0, #32]
 800c5ba:	b90b      	cbnz	r3, 800c5c0 <_vfiprintf_r+0x18>
 800c5bc:	f7fd f9bc 	bl	8009938 <__sinit>
 800c5c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5c2:	07d9      	lsls	r1, r3, #31
 800c5c4:	d405      	bmi.n	800c5d2 <_vfiprintf_r+0x2a>
 800c5c6:	89ab      	ldrh	r3, [r5, #12]
 800c5c8:	059a      	lsls	r2, r3, #22
 800c5ca:	d402      	bmi.n	800c5d2 <_vfiprintf_r+0x2a>
 800c5cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5ce:	f7fd fbce 	bl	8009d6e <__retarget_lock_acquire_recursive>
 800c5d2:	89ab      	ldrh	r3, [r5, #12]
 800c5d4:	071b      	lsls	r3, r3, #28
 800c5d6:	d501      	bpl.n	800c5dc <_vfiprintf_r+0x34>
 800c5d8:	692b      	ldr	r3, [r5, #16]
 800c5da:	b99b      	cbnz	r3, 800c604 <_vfiprintf_r+0x5c>
 800c5dc:	4629      	mov	r1, r5
 800c5de:	4630      	mov	r0, r6
 800c5e0:	f7fd faf2 	bl	8009bc8 <__swsetup_r>
 800c5e4:	b170      	cbz	r0, 800c604 <_vfiprintf_r+0x5c>
 800c5e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5e8:	07dc      	lsls	r4, r3, #31
 800c5ea:	d504      	bpl.n	800c5f6 <_vfiprintf_r+0x4e>
 800c5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f0:	b01d      	add	sp, #116	@ 0x74
 800c5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f6:	89ab      	ldrh	r3, [r5, #12]
 800c5f8:	0598      	lsls	r0, r3, #22
 800c5fa:	d4f7      	bmi.n	800c5ec <_vfiprintf_r+0x44>
 800c5fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5fe:	f7fd fbb7 	bl	8009d70 <__retarget_lock_release_recursive>
 800c602:	e7f3      	b.n	800c5ec <_vfiprintf_r+0x44>
 800c604:	2300      	movs	r3, #0
 800c606:	9309      	str	r3, [sp, #36]	@ 0x24
 800c608:	2320      	movs	r3, #32
 800c60a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c60e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c612:	2330      	movs	r3, #48	@ 0x30
 800c614:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c7c4 <_vfiprintf_r+0x21c>
 800c618:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c61c:	f04f 0901 	mov.w	r9, #1
 800c620:	4623      	mov	r3, r4
 800c622:	469a      	mov	sl, r3
 800c624:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c628:	b10a      	cbz	r2, 800c62e <_vfiprintf_r+0x86>
 800c62a:	2a25      	cmp	r2, #37	@ 0x25
 800c62c:	d1f9      	bne.n	800c622 <_vfiprintf_r+0x7a>
 800c62e:	ebba 0b04 	subs.w	fp, sl, r4
 800c632:	d00b      	beq.n	800c64c <_vfiprintf_r+0xa4>
 800c634:	465b      	mov	r3, fp
 800c636:	4622      	mov	r2, r4
 800c638:	4629      	mov	r1, r5
 800c63a:	4630      	mov	r0, r6
 800c63c:	f7ff ffa1 	bl	800c582 <__sfputs_r>
 800c640:	3001      	adds	r0, #1
 800c642:	f000 80a7 	beq.w	800c794 <_vfiprintf_r+0x1ec>
 800c646:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c648:	445a      	add	r2, fp
 800c64a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c64c:	f89a 3000 	ldrb.w	r3, [sl]
 800c650:	2b00      	cmp	r3, #0
 800c652:	f000 809f 	beq.w	800c794 <_vfiprintf_r+0x1ec>
 800c656:	2300      	movs	r3, #0
 800c658:	f04f 32ff 	mov.w	r2, #4294967295
 800c65c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c660:	f10a 0a01 	add.w	sl, sl, #1
 800c664:	9304      	str	r3, [sp, #16]
 800c666:	9307      	str	r3, [sp, #28]
 800c668:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c66c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c66e:	4654      	mov	r4, sl
 800c670:	2205      	movs	r2, #5
 800c672:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c676:	4853      	ldr	r0, [pc, #332]	@ (800c7c4 <_vfiprintf_r+0x21c>)
 800c678:	f7f3 fdd2 	bl	8000220 <memchr>
 800c67c:	9a04      	ldr	r2, [sp, #16]
 800c67e:	b9d8      	cbnz	r0, 800c6b8 <_vfiprintf_r+0x110>
 800c680:	06d1      	lsls	r1, r2, #27
 800c682:	bf44      	itt	mi
 800c684:	2320      	movmi	r3, #32
 800c686:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c68a:	0713      	lsls	r3, r2, #28
 800c68c:	bf44      	itt	mi
 800c68e:	232b      	movmi	r3, #43	@ 0x2b
 800c690:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c694:	f89a 3000 	ldrb.w	r3, [sl]
 800c698:	2b2a      	cmp	r3, #42	@ 0x2a
 800c69a:	d015      	beq.n	800c6c8 <_vfiprintf_r+0x120>
 800c69c:	9a07      	ldr	r2, [sp, #28]
 800c69e:	4654      	mov	r4, sl
 800c6a0:	2000      	movs	r0, #0
 800c6a2:	f04f 0c0a 	mov.w	ip, #10
 800c6a6:	4621      	mov	r1, r4
 800c6a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6ac:	3b30      	subs	r3, #48	@ 0x30
 800c6ae:	2b09      	cmp	r3, #9
 800c6b0:	d94b      	bls.n	800c74a <_vfiprintf_r+0x1a2>
 800c6b2:	b1b0      	cbz	r0, 800c6e2 <_vfiprintf_r+0x13a>
 800c6b4:	9207      	str	r2, [sp, #28]
 800c6b6:	e014      	b.n	800c6e2 <_vfiprintf_r+0x13a>
 800c6b8:	eba0 0308 	sub.w	r3, r0, r8
 800c6bc:	fa09 f303 	lsl.w	r3, r9, r3
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	9304      	str	r3, [sp, #16]
 800c6c4:	46a2      	mov	sl, r4
 800c6c6:	e7d2      	b.n	800c66e <_vfiprintf_r+0xc6>
 800c6c8:	9b03      	ldr	r3, [sp, #12]
 800c6ca:	1d19      	adds	r1, r3, #4
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	9103      	str	r1, [sp, #12]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	bfbb      	ittet	lt
 800c6d4:	425b      	neglt	r3, r3
 800c6d6:	f042 0202 	orrlt.w	r2, r2, #2
 800c6da:	9307      	strge	r3, [sp, #28]
 800c6dc:	9307      	strlt	r3, [sp, #28]
 800c6de:	bfb8      	it	lt
 800c6e0:	9204      	strlt	r2, [sp, #16]
 800c6e2:	7823      	ldrb	r3, [r4, #0]
 800c6e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6e6:	d10a      	bne.n	800c6fe <_vfiprintf_r+0x156>
 800c6e8:	7863      	ldrb	r3, [r4, #1]
 800c6ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6ec:	d132      	bne.n	800c754 <_vfiprintf_r+0x1ac>
 800c6ee:	9b03      	ldr	r3, [sp, #12]
 800c6f0:	1d1a      	adds	r2, r3, #4
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	9203      	str	r2, [sp, #12]
 800c6f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6fa:	3402      	adds	r4, #2
 800c6fc:	9305      	str	r3, [sp, #20]
 800c6fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c7d4 <_vfiprintf_r+0x22c>
 800c702:	7821      	ldrb	r1, [r4, #0]
 800c704:	2203      	movs	r2, #3
 800c706:	4650      	mov	r0, sl
 800c708:	f7f3 fd8a 	bl	8000220 <memchr>
 800c70c:	b138      	cbz	r0, 800c71e <_vfiprintf_r+0x176>
 800c70e:	9b04      	ldr	r3, [sp, #16]
 800c710:	eba0 000a 	sub.w	r0, r0, sl
 800c714:	2240      	movs	r2, #64	@ 0x40
 800c716:	4082      	lsls	r2, r0
 800c718:	4313      	orrs	r3, r2
 800c71a:	3401      	adds	r4, #1
 800c71c:	9304      	str	r3, [sp, #16]
 800c71e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c722:	4829      	ldr	r0, [pc, #164]	@ (800c7c8 <_vfiprintf_r+0x220>)
 800c724:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c728:	2206      	movs	r2, #6
 800c72a:	f7f3 fd79 	bl	8000220 <memchr>
 800c72e:	2800      	cmp	r0, #0
 800c730:	d03f      	beq.n	800c7b2 <_vfiprintf_r+0x20a>
 800c732:	4b26      	ldr	r3, [pc, #152]	@ (800c7cc <_vfiprintf_r+0x224>)
 800c734:	bb1b      	cbnz	r3, 800c77e <_vfiprintf_r+0x1d6>
 800c736:	9b03      	ldr	r3, [sp, #12]
 800c738:	3307      	adds	r3, #7
 800c73a:	f023 0307 	bic.w	r3, r3, #7
 800c73e:	3308      	adds	r3, #8
 800c740:	9303      	str	r3, [sp, #12]
 800c742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c744:	443b      	add	r3, r7
 800c746:	9309      	str	r3, [sp, #36]	@ 0x24
 800c748:	e76a      	b.n	800c620 <_vfiprintf_r+0x78>
 800c74a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c74e:	460c      	mov	r4, r1
 800c750:	2001      	movs	r0, #1
 800c752:	e7a8      	b.n	800c6a6 <_vfiprintf_r+0xfe>
 800c754:	2300      	movs	r3, #0
 800c756:	3401      	adds	r4, #1
 800c758:	9305      	str	r3, [sp, #20]
 800c75a:	4619      	mov	r1, r3
 800c75c:	f04f 0c0a 	mov.w	ip, #10
 800c760:	4620      	mov	r0, r4
 800c762:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c766:	3a30      	subs	r2, #48	@ 0x30
 800c768:	2a09      	cmp	r2, #9
 800c76a:	d903      	bls.n	800c774 <_vfiprintf_r+0x1cc>
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d0c6      	beq.n	800c6fe <_vfiprintf_r+0x156>
 800c770:	9105      	str	r1, [sp, #20]
 800c772:	e7c4      	b.n	800c6fe <_vfiprintf_r+0x156>
 800c774:	fb0c 2101 	mla	r1, ip, r1, r2
 800c778:	4604      	mov	r4, r0
 800c77a:	2301      	movs	r3, #1
 800c77c:	e7f0      	b.n	800c760 <_vfiprintf_r+0x1b8>
 800c77e:	ab03      	add	r3, sp, #12
 800c780:	9300      	str	r3, [sp, #0]
 800c782:	462a      	mov	r2, r5
 800c784:	4b12      	ldr	r3, [pc, #72]	@ (800c7d0 <_vfiprintf_r+0x228>)
 800c786:	a904      	add	r1, sp, #16
 800c788:	4630      	mov	r0, r6
 800c78a:	f7fc fa7d 	bl	8008c88 <_printf_float>
 800c78e:	4607      	mov	r7, r0
 800c790:	1c78      	adds	r0, r7, #1
 800c792:	d1d6      	bne.n	800c742 <_vfiprintf_r+0x19a>
 800c794:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c796:	07d9      	lsls	r1, r3, #31
 800c798:	d405      	bmi.n	800c7a6 <_vfiprintf_r+0x1fe>
 800c79a:	89ab      	ldrh	r3, [r5, #12]
 800c79c:	059a      	lsls	r2, r3, #22
 800c79e:	d402      	bmi.n	800c7a6 <_vfiprintf_r+0x1fe>
 800c7a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7a2:	f7fd fae5 	bl	8009d70 <__retarget_lock_release_recursive>
 800c7a6:	89ab      	ldrh	r3, [r5, #12]
 800c7a8:	065b      	lsls	r3, r3, #25
 800c7aa:	f53f af1f 	bmi.w	800c5ec <_vfiprintf_r+0x44>
 800c7ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7b0:	e71e      	b.n	800c5f0 <_vfiprintf_r+0x48>
 800c7b2:	ab03      	add	r3, sp, #12
 800c7b4:	9300      	str	r3, [sp, #0]
 800c7b6:	462a      	mov	r2, r5
 800c7b8:	4b05      	ldr	r3, [pc, #20]	@ (800c7d0 <_vfiprintf_r+0x228>)
 800c7ba:	a904      	add	r1, sp, #16
 800c7bc:	4630      	mov	r0, r6
 800c7be:	f7fc fcfb 	bl	80091b8 <_printf_i>
 800c7c2:	e7e4      	b.n	800c78e <_vfiprintf_r+0x1e6>
 800c7c4:	0800d841 	.word	0x0800d841
 800c7c8:	0800d84b 	.word	0x0800d84b
 800c7cc:	08008c89 	.word	0x08008c89
 800c7d0:	0800c583 	.word	0x0800c583
 800c7d4:	0800d847 	.word	0x0800d847

0800c7d8 <__sflush_r>:
 800c7d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7e0:	0716      	lsls	r6, r2, #28
 800c7e2:	4605      	mov	r5, r0
 800c7e4:	460c      	mov	r4, r1
 800c7e6:	d454      	bmi.n	800c892 <__sflush_r+0xba>
 800c7e8:	684b      	ldr	r3, [r1, #4]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	dc02      	bgt.n	800c7f4 <__sflush_r+0x1c>
 800c7ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	dd48      	ble.n	800c886 <__sflush_r+0xae>
 800c7f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c7f6:	2e00      	cmp	r6, #0
 800c7f8:	d045      	beq.n	800c886 <__sflush_r+0xae>
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c800:	682f      	ldr	r7, [r5, #0]
 800c802:	6a21      	ldr	r1, [r4, #32]
 800c804:	602b      	str	r3, [r5, #0]
 800c806:	d030      	beq.n	800c86a <__sflush_r+0x92>
 800c808:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c80a:	89a3      	ldrh	r3, [r4, #12]
 800c80c:	0759      	lsls	r1, r3, #29
 800c80e:	d505      	bpl.n	800c81c <__sflush_r+0x44>
 800c810:	6863      	ldr	r3, [r4, #4]
 800c812:	1ad2      	subs	r2, r2, r3
 800c814:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c816:	b10b      	cbz	r3, 800c81c <__sflush_r+0x44>
 800c818:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c81a:	1ad2      	subs	r2, r2, r3
 800c81c:	2300      	movs	r3, #0
 800c81e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c820:	6a21      	ldr	r1, [r4, #32]
 800c822:	4628      	mov	r0, r5
 800c824:	47b0      	blx	r6
 800c826:	1c43      	adds	r3, r0, #1
 800c828:	89a3      	ldrh	r3, [r4, #12]
 800c82a:	d106      	bne.n	800c83a <__sflush_r+0x62>
 800c82c:	6829      	ldr	r1, [r5, #0]
 800c82e:	291d      	cmp	r1, #29
 800c830:	d82b      	bhi.n	800c88a <__sflush_r+0xb2>
 800c832:	4a2a      	ldr	r2, [pc, #168]	@ (800c8dc <__sflush_r+0x104>)
 800c834:	410a      	asrs	r2, r1
 800c836:	07d6      	lsls	r6, r2, #31
 800c838:	d427      	bmi.n	800c88a <__sflush_r+0xb2>
 800c83a:	2200      	movs	r2, #0
 800c83c:	6062      	str	r2, [r4, #4]
 800c83e:	04d9      	lsls	r1, r3, #19
 800c840:	6922      	ldr	r2, [r4, #16]
 800c842:	6022      	str	r2, [r4, #0]
 800c844:	d504      	bpl.n	800c850 <__sflush_r+0x78>
 800c846:	1c42      	adds	r2, r0, #1
 800c848:	d101      	bne.n	800c84e <__sflush_r+0x76>
 800c84a:	682b      	ldr	r3, [r5, #0]
 800c84c:	b903      	cbnz	r3, 800c850 <__sflush_r+0x78>
 800c84e:	6560      	str	r0, [r4, #84]	@ 0x54
 800c850:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c852:	602f      	str	r7, [r5, #0]
 800c854:	b1b9      	cbz	r1, 800c886 <__sflush_r+0xae>
 800c856:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c85a:	4299      	cmp	r1, r3
 800c85c:	d002      	beq.n	800c864 <__sflush_r+0x8c>
 800c85e:	4628      	mov	r0, r5
 800c860:	f7fe f8ea 	bl	800aa38 <_free_r>
 800c864:	2300      	movs	r3, #0
 800c866:	6363      	str	r3, [r4, #52]	@ 0x34
 800c868:	e00d      	b.n	800c886 <__sflush_r+0xae>
 800c86a:	2301      	movs	r3, #1
 800c86c:	4628      	mov	r0, r5
 800c86e:	47b0      	blx	r6
 800c870:	4602      	mov	r2, r0
 800c872:	1c50      	adds	r0, r2, #1
 800c874:	d1c9      	bne.n	800c80a <__sflush_r+0x32>
 800c876:	682b      	ldr	r3, [r5, #0]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d0c6      	beq.n	800c80a <__sflush_r+0x32>
 800c87c:	2b1d      	cmp	r3, #29
 800c87e:	d001      	beq.n	800c884 <__sflush_r+0xac>
 800c880:	2b16      	cmp	r3, #22
 800c882:	d11e      	bne.n	800c8c2 <__sflush_r+0xea>
 800c884:	602f      	str	r7, [r5, #0]
 800c886:	2000      	movs	r0, #0
 800c888:	e022      	b.n	800c8d0 <__sflush_r+0xf8>
 800c88a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c88e:	b21b      	sxth	r3, r3
 800c890:	e01b      	b.n	800c8ca <__sflush_r+0xf2>
 800c892:	690f      	ldr	r7, [r1, #16]
 800c894:	2f00      	cmp	r7, #0
 800c896:	d0f6      	beq.n	800c886 <__sflush_r+0xae>
 800c898:	0793      	lsls	r3, r2, #30
 800c89a:	680e      	ldr	r6, [r1, #0]
 800c89c:	bf08      	it	eq
 800c89e:	694b      	ldreq	r3, [r1, #20]
 800c8a0:	600f      	str	r7, [r1, #0]
 800c8a2:	bf18      	it	ne
 800c8a4:	2300      	movne	r3, #0
 800c8a6:	eba6 0807 	sub.w	r8, r6, r7
 800c8aa:	608b      	str	r3, [r1, #8]
 800c8ac:	f1b8 0f00 	cmp.w	r8, #0
 800c8b0:	dde9      	ble.n	800c886 <__sflush_r+0xae>
 800c8b2:	6a21      	ldr	r1, [r4, #32]
 800c8b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c8b6:	4643      	mov	r3, r8
 800c8b8:	463a      	mov	r2, r7
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	47b0      	blx	r6
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	dc08      	bgt.n	800c8d4 <__sflush_r+0xfc>
 800c8c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8ca:	81a3      	strh	r3, [r4, #12]
 800c8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8d4:	4407      	add	r7, r0
 800c8d6:	eba8 0800 	sub.w	r8, r8, r0
 800c8da:	e7e7      	b.n	800c8ac <__sflush_r+0xd4>
 800c8dc:	dfbffffe 	.word	0xdfbffffe

0800c8e0 <_fflush_r>:
 800c8e0:	b538      	push	{r3, r4, r5, lr}
 800c8e2:	690b      	ldr	r3, [r1, #16]
 800c8e4:	4605      	mov	r5, r0
 800c8e6:	460c      	mov	r4, r1
 800c8e8:	b913      	cbnz	r3, 800c8f0 <_fflush_r+0x10>
 800c8ea:	2500      	movs	r5, #0
 800c8ec:	4628      	mov	r0, r5
 800c8ee:	bd38      	pop	{r3, r4, r5, pc}
 800c8f0:	b118      	cbz	r0, 800c8fa <_fflush_r+0x1a>
 800c8f2:	6a03      	ldr	r3, [r0, #32]
 800c8f4:	b90b      	cbnz	r3, 800c8fa <_fflush_r+0x1a>
 800c8f6:	f7fd f81f 	bl	8009938 <__sinit>
 800c8fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d0f3      	beq.n	800c8ea <_fflush_r+0xa>
 800c902:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c904:	07d0      	lsls	r0, r2, #31
 800c906:	d404      	bmi.n	800c912 <_fflush_r+0x32>
 800c908:	0599      	lsls	r1, r3, #22
 800c90a:	d402      	bmi.n	800c912 <_fflush_r+0x32>
 800c90c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c90e:	f7fd fa2e 	bl	8009d6e <__retarget_lock_acquire_recursive>
 800c912:	4628      	mov	r0, r5
 800c914:	4621      	mov	r1, r4
 800c916:	f7ff ff5f 	bl	800c7d8 <__sflush_r>
 800c91a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c91c:	07da      	lsls	r2, r3, #31
 800c91e:	4605      	mov	r5, r0
 800c920:	d4e4      	bmi.n	800c8ec <_fflush_r+0xc>
 800c922:	89a3      	ldrh	r3, [r4, #12]
 800c924:	059b      	lsls	r3, r3, #22
 800c926:	d4e1      	bmi.n	800c8ec <_fflush_r+0xc>
 800c928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c92a:	f7fd fa21 	bl	8009d70 <__retarget_lock_release_recursive>
 800c92e:	e7dd      	b.n	800c8ec <_fflush_r+0xc>

0800c930 <__swhatbuf_r>:
 800c930:	b570      	push	{r4, r5, r6, lr}
 800c932:	460c      	mov	r4, r1
 800c934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c938:	2900      	cmp	r1, #0
 800c93a:	b096      	sub	sp, #88	@ 0x58
 800c93c:	4615      	mov	r5, r2
 800c93e:	461e      	mov	r6, r3
 800c940:	da0d      	bge.n	800c95e <__swhatbuf_r+0x2e>
 800c942:	89a3      	ldrh	r3, [r4, #12]
 800c944:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c948:	f04f 0100 	mov.w	r1, #0
 800c94c:	bf14      	ite	ne
 800c94e:	2340      	movne	r3, #64	@ 0x40
 800c950:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c954:	2000      	movs	r0, #0
 800c956:	6031      	str	r1, [r6, #0]
 800c958:	602b      	str	r3, [r5, #0]
 800c95a:	b016      	add	sp, #88	@ 0x58
 800c95c:	bd70      	pop	{r4, r5, r6, pc}
 800c95e:	466a      	mov	r2, sp
 800c960:	f000 f874 	bl	800ca4c <_fstat_r>
 800c964:	2800      	cmp	r0, #0
 800c966:	dbec      	blt.n	800c942 <__swhatbuf_r+0x12>
 800c968:	9901      	ldr	r1, [sp, #4]
 800c96a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c96e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c972:	4259      	negs	r1, r3
 800c974:	4159      	adcs	r1, r3
 800c976:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c97a:	e7eb      	b.n	800c954 <__swhatbuf_r+0x24>

0800c97c <__smakebuf_r>:
 800c97c:	898b      	ldrh	r3, [r1, #12]
 800c97e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c980:	079d      	lsls	r5, r3, #30
 800c982:	4606      	mov	r6, r0
 800c984:	460c      	mov	r4, r1
 800c986:	d507      	bpl.n	800c998 <__smakebuf_r+0x1c>
 800c988:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c98c:	6023      	str	r3, [r4, #0]
 800c98e:	6123      	str	r3, [r4, #16]
 800c990:	2301      	movs	r3, #1
 800c992:	6163      	str	r3, [r4, #20]
 800c994:	b003      	add	sp, #12
 800c996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c998:	ab01      	add	r3, sp, #4
 800c99a:	466a      	mov	r2, sp
 800c99c:	f7ff ffc8 	bl	800c930 <__swhatbuf_r>
 800c9a0:	9f00      	ldr	r7, [sp, #0]
 800c9a2:	4605      	mov	r5, r0
 800c9a4:	4639      	mov	r1, r7
 800c9a6:	4630      	mov	r0, r6
 800c9a8:	f7fe f8ba 	bl	800ab20 <_malloc_r>
 800c9ac:	b948      	cbnz	r0, 800c9c2 <__smakebuf_r+0x46>
 800c9ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9b2:	059a      	lsls	r2, r3, #22
 800c9b4:	d4ee      	bmi.n	800c994 <__smakebuf_r+0x18>
 800c9b6:	f023 0303 	bic.w	r3, r3, #3
 800c9ba:	f043 0302 	orr.w	r3, r3, #2
 800c9be:	81a3      	strh	r3, [r4, #12]
 800c9c0:	e7e2      	b.n	800c988 <__smakebuf_r+0xc>
 800c9c2:	89a3      	ldrh	r3, [r4, #12]
 800c9c4:	6020      	str	r0, [r4, #0]
 800c9c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9ca:	81a3      	strh	r3, [r4, #12]
 800c9cc:	9b01      	ldr	r3, [sp, #4]
 800c9ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c9d2:	b15b      	cbz	r3, 800c9ec <__smakebuf_r+0x70>
 800c9d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9d8:	4630      	mov	r0, r6
 800c9da:	f000 f849 	bl	800ca70 <_isatty_r>
 800c9de:	b128      	cbz	r0, 800c9ec <__smakebuf_r+0x70>
 800c9e0:	89a3      	ldrh	r3, [r4, #12]
 800c9e2:	f023 0303 	bic.w	r3, r3, #3
 800c9e6:	f043 0301 	orr.w	r3, r3, #1
 800c9ea:	81a3      	strh	r3, [r4, #12]
 800c9ec:	89a3      	ldrh	r3, [r4, #12]
 800c9ee:	431d      	orrs	r5, r3
 800c9f0:	81a5      	strh	r5, [r4, #12]
 800c9f2:	e7cf      	b.n	800c994 <__smakebuf_r+0x18>

0800c9f4 <memmove>:
 800c9f4:	4288      	cmp	r0, r1
 800c9f6:	b510      	push	{r4, lr}
 800c9f8:	eb01 0402 	add.w	r4, r1, r2
 800c9fc:	d902      	bls.n	800ca04 <memmove+0x10>
 800c9fe:	4284      	cmp	r4, r0
 800ca00:	4623      	mov	r3, r4
 800ca02:	d807      	bhi.n	800ca14 <memmove+0x20>
 800ca04:	1e43      	subs	r3, r0, #1
 800ca06:	42a1      	cmp	r1, r4
 800ca08:	d008      	beq.n	800ca1c <memmove+0x28>
 800ca0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca12:	e7f8      	b.n	800ca06 <memmove+0x12>
 800ca14:	4402      	add	r2, r0
 800ca16:	4601      	mov	r1, r0
 800ca18:	428a      	cmp	r2, r1
 800ca1a:	d100      	bne.n	800ca1e <memmove+0x2a>
 800ca1c:	bd10      	pop	{r4, pc}
 800ca1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca26:	e7f7      	b.n	800ca18 <memmove+0x24>

0800ca28 <strncmp>:
 800ca28:	b510      	push	{r4, lr}
 800ca2a:	b16a      	cbz	r2, 800ca48 <strncmp+0x20>
 800ca2c:	3901      	subs	r1, #1
 800ca2e:	1884      	adds	r4, r0, r2
 800ca30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca34:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d103      	bne.n	800ca44 <strncmp+0x1c>
 800ca3c:	42a0      	cmp	r0, r4
 800ca3e:	d001      	beq.n	800ca44 <strncmp+0x1c>
 800ca40:	2a00      	cmp	r2, #0
 800ca42:	d1f5      	bne.n	800ca30 <strncmp+0x8>
 800ca44:	1ad0      	subs	r0, r2, r3
 800ca46:	bd10      	pop	{r4, pc}
 800ca48:	4610      	mov	r0, r2
 800ca4a:	e7fc      	b.n	800ca46 <strncmp+0x1e>

0800ca4c <_fstat_r>:
 800ca4c:	b538      	push	{r3, r4, r5, lr}
 800ca4e:	4d07      	ldr	r5, [pc, #28]	@ (800ca6c <_fstat_r+0x20>)
 800ca50:	2300      	movs	r3, #0
 800ca52:	4604      	mov	r4, r0
 800ca54:	4608      	mov	r0, r1
 800ca56:	4611      	mov	r1, r2
 800ca58:	602b      	str	r3, [r5, #0]
 800ca5a:	f7f4 ffbb 	bl	80019d4 <_fstat>
 800ca5e:	1c43      	adds	r3, r0, #1
 800ca60:	d102      	bne.n	800ca68 <_fstat_r+0x1c>
 800ca62:	682b      	ldr	r3, [r5, #0]
 800ca64:	b103      	cbz	r3, 800ca68 <_fstat_r+0x1c>
 800ca66:	6023      	str	r3, [r4, #0]
 800ca68:	bd38      	pop	{r3, r4, r5, pc}
 800ca6a:	bf00      	nop
 800ca6c:	20004748 	.word	0x20004748

0800ca70 <_isatty_r>:
 800ca70:	b538      	push	{r3, r4, r5, lr}
 800ca72:	4d06      	ldr	r5, [pc, #24]	@ (800ca8c <_isatty_r+0x1c>)
 800ca74:	2300      	movs	r3, #0
 800ca76:	4604      	mov	r4, r0
 800ca78:	4608      	mov	r0, r1
 800ca7a:	602b      	str	r3, [r5, #0]
 800ca7c:	f7f4 ffba 	bl	80019f4 <_isatty>
 800ca80:	1c43      	adds	r3, r0, #1
 800ca82:	d102      	bne.n	800ca8a <_isatty_r+0x1a>
 800ca84:	682b      	ldr	r3, [r5, #0]
 800ca86:	b103      	cbz	r3, 800ca8a <_isatty_r+0x1a>
 800ca88:	6023      	str	r3, [r4, #0]
 800ca8a:	bd38      	pop	{r3, r4, r5, pc}
 800ca8c:	20004748 	.word	0x20004748

0800ca90 <_sbrk_r>:
 800ca90:	b538      	push	{r3, r4, r5, lr}
 800ca92:	4d06      	ldr	r5, [pc, #24]	@ (800caac <_sbrk_r+0x1c>)
 800ca94:	2300      	movs	r3, #0
 800ca96:	4604      	mov	r4, r0
 800ca98:	4608      	mov	r0, r1
 800ca9a:	602b      	str	r3, [r5, #0]
 800ca9c:	f7f4 ffc2 	bl	8001a24 <_sbrk>
 800caa0:	1c43      	adds	r3, r0, #1
 800caa2:	d102      	bne.n	800caaa <_sbrk_r+0x1a>
 800caa4:	682b      	ldr	r3, [r5, #0]
 800caa6:	b103      	cbz	r3, 800caaa <_sbrk_r+0x1a>
 800caa8:	6023      	str	r3, [r4, #0]
 800caaa:	bd38      	pop	{r3, r4, r5, pc}
 800caac:	20004748 	.word	0x20004748

0800cab0 <nan>:
 800cab0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cab8 <nan+0x8>
 800cab4:	4770      	bx	lr
 800cab6:	bf00      	nop
 800cab8:	00000000 	.word	0x00000000
 800cabc:	7ff80000 	.word	0x7ff80000

0800cac0 <__assert_func>:
 800cac0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cac2:	4614      	mov	r4, r2
 800cac4:	461a      	mov	r2, r3
 800cac6:	4b09      	ldr	r3, [pc, #36]	@ (800caec <__assert_func+0x2c>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4605      	mov	r5, r0
 800cacc:	68d8      	ldr	r0, [r3, #12]
 800cace:	b954      	cbnz	r4, 800cae6 <__assert_func+0x26>
 800cad0:	4b07      	ldr	r3, [pc, #28]	@ (800caf0 <__assert_func+0x30>)
 800cad2:	461c      	mov	r4, r3
 800cad4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cad8:	9100      	str	r1, [sp, #0]
 800cada:	462b      	mov	r3, r5
 800cadc:	4905      	ldr	r1, [pc, #20]	@ (800caf4 <__assert_func+0x34>)
 800cade:	f000 fba7 	bl	800d230 <fiprintf>
 800cae2:	f000 fbb7 	bl	800d254 <abort>
 800cae6:	4b04      	ldr	r3, [pc, #16]	@ (800caf8 <__assert_func+0x38>)
 800cae8:	e7f4      	b.n	800cad4 <__assert_func+0x14>
 800caea:	bf00      	nop
 800caec:	2000001c 	.word	0x2000001c
 800caf0:	0800d895 	.word	0x0800d895
 800caf4:	0800d867 	.word	0x0800d867
 800caf8:	0800d85a 	.word	0x0800d85a

0800cafc <_calloc_r>:
 800cafc:	b570      	push	{r4, r5, r6, lr}
 800cafe:	fba1 5402 	umull	r5, r4, r1, r2
 800cb02:	b93c      	cbnz	r4, 800cb14 <_calloc_r+0x18>
 800cb04:	4629      	mov	r1, r5
 800cb06:	f7fe f80b 	bl	800ab20 <_malloc_r>
 800cb0a:	4606      	mov	r6, r0
 800cb0c:	b928      	cbnz	r0, 800cb1a <_calloc_r+0x1e>
 800cb0e:	2600      	movs	r6, #0
 800cb10:	4630      	mov	r0, r6
 800cb12:	bd70      	pop	{r4, r5, r6, pc}
 800cb14:	220c      	movs	r2, #12
 800cb16:	6002      	str	r2, [r0, #0]
 800cb18:	e7f9      	b.n	800cb0e <_calloc_r+0x12>
 800cb1a:	462a      	mov	r2, r5
 800cb1c:	4621      	mov	r1, r4
 800cb1e:	f7fd f8a9 	bl	8009c74 <memset>
 800cb22:	e7f5      	b.n	800cb10 <_calloc_r+0x14>

0800cb24 <rshift>:
 800cb24:	6903      	ldr	r3, [r0, #16]
 800cb26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cb2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cb32:	f100 0414 	add.w	r4, r0, #20
 800cb36:	dd45      	ble.n	800cbc4 <rshift+0xa0>
 800cb38:	f011 011f 	ands.w	r1, r1, #31
 800cb3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cb40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cb44:	d10c      	bne.n	800cb60 <rshift+0x3c>
 800cb46:	f100 0710 	add.w	r7, r0, #16
 800cb4a:	4629      	mov	r1, r5
 800cb4c:	42b1      	cmp	r1, r6
 800cb4e:	d334      	bcc.n	800cbba <rshift+0x96>
 800cb50:	1a9b      	subs	r3, r3, r2
 800cb52:	009b      	lsls	r3, r3, #2
 800cb54:	1eea      	subs	r2, r5, #3
 800cb56:	4296      	cmp	r6, r2
 800cb58:	bf38      	it	cc
 800cb5a:	2300      	movcc	r3, #0
 800cb5c:	4423      	add	r3, r4
 800cb5e:	e015      	b.n	800cb8c <rshift+0x68>
 800cb60:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cb64:	f1c1 0820 	rsb	r8, r1, #32
 800cb68:	40cf      	lsrs	r7, r1
 800cb6a:	f105 0e04 	add.w	lr, r5, #4
 800cb6e:	46a1      	mov	r9, r4
 800cb70:	4576      	cmp	r6, lr
 800cb72:	46f4      	mov	ip, lr
 800cb74:	d815      	bhi.n	800cba2 <rshift+0x7e>
 800cb76:	1a9a      	subs	r2, r3, r2
 800cb78:	0092      	lsls	r2, r2, #2
 800cb7a:	3a04      	subs	r2, #4
 800cb7c:	3501      	adds	r5, #1
 800cb7e:	42ae      	cmp	r6, r5
 800cb80:	bf38      	it	cc
 800cb82:	2200      	movcc	r2, #0
 800cb84:	18a3      	adds	r3, r4, r2
 800cb86:	50a7      	str	r7, [r4, r2]
 800cb88:	b107      	cbz	r7, 800cb8c <rshift+0x68>
 800cb8a:	3304      	adds	r3, #4
 800cb8c:	1b1a      	subs	r2, r3, r4
 800cb8e:	42a3      	cmp	r3, r4
 800cb90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cb94:	bf08      	it	eq
 800cb96:	2300      	moveq	r3, #0
 800cb98:	6102      	str	r2, [r0, #16]
 800cb9a:	bf08      	it	eq
 800cb9c:	6143      	streq	r3, [r0, #20]
 800cb9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cba2:	f8dc c000 	ldr.w	ip, [ip]
 800cba6:	fa0c fc08 	lsl.w	ip, ip, r8
 800cbaa:	ea4c 0707 	orr.w	r7, ip, r7
 800cbae:	f849 7b04 	str.w	r7, [r9], #4
 800cbb2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cbb6:	40cf      	lsrs	r7, r1
 800cbb8:	e7da      	b.n	800cb70 <rshift+0x4c>
 800cbba:	f851 cb04 	ldr.w	ip, [r1], #4
 800cbbe:	f847 cf04 	str.w	ip, [r7, #4]!
 800cbc2:	e7c3      	b.n	800cb4c <rshift+0x28>
 800cbc4:	4623      	mov	r3, r4
 800cbc6:	e7e1      	b.n	800cb8c <rshift+0x68>

0800cbc8 <__hexdig_fun>:
 800cbc8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cbcc:	2b09      	cmp	r3, #9
 800cbce:	d802      	bhi.n	800cbd6 <__hexdig_fun+0xe>
 800cbd0:	3820      	subs	r0, #32
 800cbd2:	b2c0      	uxtb	r0, r0
 800cbd4:	4770      	bx	lr
 800cbd6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cbda:	2b05      	cmp	r3, #5
 800cbdc:	d801      	bhi.n	800cbe2 <__hexdig_fun+0x1a>
 800cbde:	3847      	subs	r0, #71	@ 0x47
 800cbe0:	e7f7      	b.n	800cbd2 <__hexdig_fun+0xa>
 800cbe2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cbe6:	2b05      	cmp	r3, #5
 800cbe8:	d801      	bhi.n	800cbee <__hexdig_fun+0x26>
 800cbea:	3827      	subs	r0, #39	@ 0x27
 800cbec:	e7f1      	b.n	800cbd2 <__hexdig_fun+0xa>
 800cbee:	2000      	movs	r0, #0
 800cbf0:	4770      	bx	lr
	...

0800cbf4 <__gethex>:
 800cbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf8:	b085      	sub	sp, #20
 800cbfa:	468a      	mov	sl, r1
 800cbfc:	9302      	str	r3, [sp, #8]
 800cbfe:	680b      	ldr	r3, [r1, #0]
 800cc00:	9001      	str	r0, [sp, #4]
 800cc02:	4690      	mov	r8, r2
 800cc04:	1c9c      	adds	r4, r3, #2
 800cc06:	46a1      	mov	r9, r4
 800cc08:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cc0c:	2830      	cmp	r0, #48	@ 0x30
 800cc0e:	d0fa      	beq.n	800cc06 <__gethex+0x12>
 800cc10:	eba9 0303 	sub.w	r3, r9, r3
 800cc14:	f1a3 0b02 	sub.w	fp, r3, #2
 800cc18:	f7ff ffd6 	bl	800cbc8 <__hexdig_fun>
 800cc1c:	4605      	mov	r5, r0
 800cc1e:	2800      	cmp	r0, #0
 800cc20:	d168      	bne.n	800ccf4 <__gethex+0x100>
 800cc22:	49a0      	ldr	r1, [pc, #640]	@ (800cea4 <__gethex+0x2b0>)
 800cc24:	2201      	movs	r2, #1
 800cc26:	4648      	mov	r0, r9
 800cc28:	f7ff fefe 	bl	800ca28 <strncmp>
 800cc2c:	4607      	mov	r7, r0
 800cc2e:	2800      	cmp	r0, #0
 800cc30:	d167      	bne.n	800cd02 <__gethex+0x10e>
 800cc32:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cc36:	4626      	mov	r6, r4
 800cc38:	f7ff ffc6 	bl	800cbc8 <__hexdig_fun>
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	d062      	beq.n	800cd06 <__gethex+0x112>
 800cc40:	4623      	mov	r3, r4
 800cc42:	7818      	ldrb	r0, [r3, #0]
 800cc44:	2830      	cmp	r0, #48	@ 0x30
 800cc46:	4699      	mov	r9, r3
 800cc48:	f103 0301 	add.w	r3, r3, #1
 800cc4c:	d0f9      	beq.n	800cc42 <__gethex+0x4e>
 800cc4e:	f7ff ffbb 	bl	800cbc8 <__hexdig_fun>
 800cc52:	fab0 f580 	clz	r5, r0
 800cc56:	096d      	lsrs	r5, r5, #5
 800cc58:	f04f 0b01 	mov.w	fp, #1
 800cc5c:	464a      	mov	r2, r9
 800cc5e:	4616      	mov	r6, r2
 800cc60:	3201      	adds	r2, #1
 800cc62:	7830      	ldrb	r0, [r6, #0]
 800cc64:	f7ff ffb0 	bl	800cbc8 <__hexdig_fun>
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	d1f8      	bne.n	800cc5e <__gethex+0x6a>
 800cc6c:	498d      	ldr	r1, [pc, #564]	@ (800cea4 <__gethex+0x2b0>)
 800cc6e:	2201      	movs	r2, #1
 800cc70:	4630      	mov	r0, r6
 800cc72:	f7ff fed9 	bl	800ca28 <strncmp>
 800cc76:	2800      	cmp	r0, #0
 800cc78:	d13f      	bne.n	800ccfa <__gethex+0x106>
 800cc7a:	b944      	cbnz	r4, 800cc8e <__gethex+0x9a>
 800cc7c:	1c74      	adds	r4, r6, #1
 800cc7e:	4622      	mov	r2, r4
 800cc80:	4616      	mov	r6, r2
 800cc82:	3201      	adds	r2, #1
 800cc84:	7830      	ldrb	r0, [r6, #0]
 800cc86:	f7ff ff9f 	bl	800cbc8 <__hexdig_fun>
 800cc8a:	2800      	cmp	r0, #0
 800cc8c:	d1f8      	bne.n	800cc80 <__gethex+0x8c>
 800cc8e:	1ba4      	subs	r4, r4, r6
 800cc90:	00a7      	lsls	r7, r4, #2
 800cc92:	7833      	ldrb	r3, [r6, #0]
 800cc94:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cc98:	2b50      	cmp	r3, #80	@ 0x50
 800cc9a:	d13e      	bne.n	800cd1a <__gethex+0x126>
 800cc9c:	7873      	ldrb	r3, [r6, #1]
 800cc9e:	2b2b      	cmp	r3, #43	@ 0x2b
 800cca0:	d033      	beq.n	800cd0a <__gethex+0x116>
 800cca2:	2b2d      	cmp	r3, #45	@ 0x2d
 800cca4:	d034      	beq.n	800cd10 <__gethex+0x11c>
 800cca6:	1c71      	adds	r1, r6, #1
 800cca8:	2400      	movs	r4, #0
 800ccaa:	7808      	ldrb	r0, [r1, #0]
 800ccac:	f7ff ff8c 	bl	800cbc8 <__hexdig_fun>
 800ccb0:	1e43      	subs	r3, r0, #1
 800ccb2:	b2db      	uxtb	r3, r3
 800ccb4:	2b18      	cmp	r3, #24
 800ccb6:	d830      	bhi.n	800cd1a <__gethex+0x126>
 800ccb8:	f1a0 0210 	sub.w	r2, r0, #16
 800ccbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ccc0:	f7ff ff82 	bl	800cbc8 <__hexdig_fun>
 800ccc4:	f100 3cff 	add.w	ip, r0, #4294967295
 800ccc8:	fa5f fc8c 	uxtb.w	ip, ip
 800cccc:	f1bc 0f18 	cmp.w	ip, #24
 800ccd0:	f04f 030a 	mov.w	r3, #10
 800ccd4:	d91e      	bls.n	800cd14 <__gethex+0x120>
 800ccd6:	b104      	cbz	r4, 800ccda <__gethex+0xe6>
 800ccd8:	4252      	negs	r2, r2
 800ccda:	4417      	add	r7, r2
 800ccdc:	f8ca 1000 	str.w	r1, [sl]
 800cce0:	b1ed      	cbz	r5, 800cd1e <__gethex+0x12a>
 800cce2:	f1bb 0f00 	cmp.w	fp, #0
 800cce6:	bf0c      	ite	eq
 800cce8:	2506      	moveq	r5, #6
 800ccea:	2500      	movne	r5, #0
 800ccec:	4628      	mov	r0, r5
 800ccee:	b005      	add	sp, #20
 800ccf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf4:	2500      	movs	r5, #0
 800ccf6:	462c      	mov	r4, r5
 800ccf8:	e7b0      	b.n	800cc5c <__gethex+0x68>
 800ccfa:	2c00      	cmp	r4, #0
 800ccfc:	d1c7      	bne.n	800cc8e <__gethex+0x9a>
 800ccfe:	4627      	mov	r7, r4
 800cd00:	e7c7      	b.n	800cc92 <__gethex+0x9e>
 800cd02:	464e      	mov	r6, r9
 800cd04:	462f      	mov	r7, r5
 800cd06:	2501      	movs	r5, #1
 800cd08:	e7c3      	b.n	800cc92 <__gethex+0x9e>
 800cd0a:	2400      	movs	r4, #0
 800cd0c:	1cb1      	adds	r1, r6, #2
 800cd0e:	e7cc      	b.n	800ccaa <__gethex+0xb6>
 800cd10:	2401      	movs	r4, #1
 800cd12:	e7fb      	b.n	800cd0c <__gethex+0x118>
 800cd14:	fb03 0002 	mla	r0, r3, r2, r0
 800cd18:	e7ce      	b.n	800ccb8 <__gethex+0xc4>
 800cd1a:	4631      	mov	r1, r6
 800cd1c:	e7de      	b.n	800ccdc <__gethex+0xe8>
 800cd1e:	eba6 0309 	sub.w	r3, r6, r9
 800cd22:	3b01      	subs	r3, #1
 800cd24:	4629      	mov	r1, r5
 800cd26:	2b07      	cmp	r3, #7
 800cd28:	dc0a      	bgt.n	800cd40 <__gethex+0x14c>
 800cd2a:	9801      	ldr	r0, [sp, #4]
 800cd2c:	f7fd ff84 	bl	800ac38 <_Balloc>
 800cd30:	4604      	mov	r4, r0
 800cd32:	b940      	cbnz	r0, 800cd46 <__gethex+0x152>
 800cd34:	4b5c      	ldr	r3, [pc, #368]	@ (800cea8 <__gethex+0x2b4>)
 800cd36:	4602      	mov	r2, r0
 800cd38:	21e4      	movs	r1, #228	@ 0xe4
 800cd3a:	485c      	ldr	r0, [pc, #368]	@ (800ceac <__gethex+0x2b8>)
 800cd3c:	f7ff fec0 	bl	800cac0 <__assert_func>
 800cd40:	3101      	adds	r1, #1
 800cd42:	105b      	asrs	r3, r3, #1
 800cd44:	e7ef      	b.n	800cd26 <__gethex+0x132>
 800cd46:	f100 0a14 	add.w	sl, r0, #20
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	4655      	mov	r5, sl
 800cd4e:	469b      	mov	fp, r3
 800cd50:	45b1      	cmp	r9, r6
 800cd52:	d337      	bcc.n	800cdc4 <__gethex+0x1d0>
 800cd54:	f845 bb04 	str.w	fp, [r5], #4
 800cd58:	eba5 050a 	sub.w	r5, r5, sl
 800cd5c:	10ad      	asrs	r5, r5, #2
 800cd5e:	6125      	str	r5, [r4, #16]
 800cd60:	4658      	mov	r0, fp
 800cd62:	f7fe f85b 	bl	800ae1c <__hi0bits>
 800cd66:	016d      	lsls	r5, r5, #5
 800cd68:	f8d8 6000 	ldr.w	r6, [r8]
 800cd6c:	1a2d      	subs	r5, r5, r0
 800cd6e:	42b5      	cmp	r5, r6
 800cd70:	dd54      	ble.n	800ce1c <__gethex+0x228>
 800cd72:	1bad      	subs	r5, r5, r6
 800cd74:	4629      	mov	r1, r5
 800cd76:	4620      	mov	r0, r4
 800cd78:	f7fe fbef 	bl	800b55a <__any_on>
 800cd7c:	4681      	mov	r9, r0
 800cd7e:	b178      	cbz	r0, 800cda0 <__gethex+0x1ac>
 800cd80:	1e6b      	subs	r3, r5, #1
 800cd82:	1159      	asrs	r1, r3, #5
 800cd84:	f003 021f 	and.w	r2, r3, #31
 800cd88:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cd8c:	f04f 0901 	mov.w	r9, #1
 800cd90:	fa09 f202 	lsl.w	r2, r9, r2
 800cd94:	420a      	tst	r2, r1
 800cd96:	d003      	beq.n	800cda0 <__gethex+0x1ac>
 800cd98:	454b      	cmp	r3, r9
 800cd9a:	dc36      	bgt.n	800ce0a <__gethex+0x216>
 800cd9c:	f04f 0902 	mov.w	r9, #2
 800cda0:	4629      	mov	r1, r5
 800cda2:	4620      	mov	r0, r4
 800cda4:	f7ff febe 	bl	800cb24 <rshift>
 800cda8:	442f      	add	r7, r5
 800cdaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cdae:	42bb      	cmp	r3, r7
 800cdb0:	da42      	bge.n	800ce38 <__gethex+0x244>
 800cdb2:	9801      	ldr	r0, [sp, #4]
 800cdb4:	4621      	mov	r1, r4
 800cdb6:	f7fd ff7f 	bl	800acb8 <_Bfree>
 800cdba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	6013      	str	r3, [r2, #0]
 800cdc0:	25a3      	movs	r5, #163	@ 0xa3
 800cdc2:	e793      	b.n	800ccec <__gethex+0xf8>
 800cdc4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cdc8:	2a2e      	cmp	r2, #46	@ 0x2e
 800cdca:	d012      	beq.n	800cdf2 <__gethex+0x1fe>
 800cdcc:	2b20      	cmp	r3, #32
 800cdce:	d104      	bne.n	800cdda <__gethex+0x1e6>
 800cdd0:	f845 bb04 	str.w	fp, [r5], #4
 800cdd4:	f04f 0b00 	mov.w	fp, #0
 800cdd8:	465b      	mov	r3, fp
 800cdda:	7830      	ldrb	r0, [r6, #0]
 800cddc:	9303      	str	r3, [sp, #12]
 800cdde:	f7ff fef3 	bl	800cbc8 <__hexdig_fun>
 800cde2:	9b03      	ldr	r3, [sp, #12]
 800cde4:	f000 000f 	and.w	r0, r0, #15
 800cde8:	4098      	lsls	r0, r3
 800cdea:	ea4b 0b00 	orr.w	fp, fp, r0
 800cdee:	3304      	adds	r3, #4
 800cdf0:	e7ae      	b.n	800cd50 <__gethex+0x15c>
 800cdf2:	45b1      	cmp	r9, r6
 800cdf4:	d8ea      	bhi.n	800cdcc <__gethex+0x1d8>
 800cdf6:	492b      	ldr	r1, [pc, #172]	@ (800cea4 <__gethex+0x2b0>)
 800cdf8:	9303      	str	r3, [sp, #12]
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	4630      	mov	r0, r6
 800cdfe:	f7ff fe13 	bl	800ca28 <strncmp>
 800ce02:	9b03      	ldr	r3, [sp, #12]
 800ce04:	2800      	cmp	r0, #0
 800ce06:	d1e1      	bne.n	800cdcc <__gethex+0x1d8>
 800ce08:	e7a2      	b.n	800cd50 <__gethex+0x15c>
 800ce0a:	1ea9      	subs	r1, r5, #2
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	f7fe fba4 	bl	800b55a <__any_on>
 800ce12:	2800      	cmp	r0, #0
 800ce14:	d0c2      	beq.n	800cd9c <__gethex+0x1a8>
 800ce16:	f04f 0903 	mov.w	r9, #3
 800ce1a:	e7c1      	b.n	800cda0 <__gethex+0x1ac>
 800ce1c:	da09      	bge.n	800ce32 <__gethex+0x23e>
 800ce1e:	1b75      	subs	r5, r6, r5
 800ce20:	4621      	mov	r1, r4
 800ce22:	9801      	ldr	r0, [sp, #4]
 800ce24:	462a      	mov	r2, r5
 800ce26:	f7fe f95f 	bl	800b0e8 <__lshift>
 800ce2a:	1b7f      	subs	r7, r7, r5
 800ce2c:	4604      	mov	r4, r0
 800ce2e:	f100 0a14 	add.w	sl, r0, #20
 800ce32:	f04f 0900 	mov.w	r9, #0
 800ce36:	e7b8      	b.n	800cdaa <__gethex+0x1b6>
 800ce38:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ce3c:	42bd      	cmp	r5, r7
 800ce3e:	dd6f      	ble.n	800cf20 <__gethex+0x32c>
 800ce40:	1bed      	subs	r5, r5, r7
 800ce42:	42ae      	cmp	r6, r5
 800ce44:	dc34      	bgt.n	800ceb0 <__gethex+0x2bc>
 800ce46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce4a:	2b02      	cmp	r3, #2
 800ce4c:	d022      	beq.n	800ce94 <__gethex+0x2a0>
 800ce4e:	2b03      	cmp	r3, #3
 800ce50:	d024      	beq.n	800ce9c <__gethex+0x2a8>
 800ce52:	2b01      	cmp	r3, #1
 800ce54:	d115      	bne.n	800ce82 <__gethex+0x28e>
 800ce56:	42ae      	cmp	r6, r5
 800ce58:	d113      	bne.n	800ce82 <__gethex+0x28e>
 800ce5a:	2e01      	cmp	r6, #1
 800ce5c:	d10b      	bne.n	800ce76 <__gethex+0x282>
 800ce5e:	9a02      	ldr	r2, [sp, #8]
 800ce60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ce64:	6013      	str	r3, [r2, #0]
 800ce66:	2301      	movs	r3, #1
 800ce68:	6123      	str	r3, [r4, #16]
 800ce6a:	f8ca 3000 	str.w	r3, [sl]
 800ce6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce70:	2562      	movs	r5, #98	@ 0x62
 800ce72:	601c      	str	r4, [r3, #0]
 800ce74:	e73a      	b.n	800ccec <__gethex+0xf8>
 800ce76:	1e71      	subs	r1, r6, #1
 800ce78:	4620      	mov	r0, r4
 800ce7a:	f7fe fb6e 	bl	800b55a <__any_on>
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	d1ed      	bne.n	800ce5e <__gethex+0x26a>
 800ce82:	9801      	ldr	r0, [sp, #4]
 800ce84:	4621      	mov	r1, r4
 800ce86:	f7fd ff17 	bl	800acb8 <_Bfree>
 800ce8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	6013      	str	r3, [r2, #0]
 800ce90:	2550      	movs	r5, #80	@ 0x50
 800ce92:	e72b      	b.n	800ccec <__gethex+0xf8>
 800ce94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d1f3      	bne.n	800ce82 <__gethex+0x28e>
 800ce9a:	e7e0      	b.n	800ce5e <__gethex+0x26a>
 800ce9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d1dd      	bne.n	800ce5e <__gethex+0x26a>
 800cea2:	e7ee      	b.n	800ce82 <__gethex+0x28e>
 800cea4:	0800d6e8 	.word	0x0800d6e8
 800cea8:	0800d57d 	.word	0x0800d57d
 800ceac:	0800d896 	.word	0x0800d896
 800ceb0:	1e6f      	subs	r7, r5, #1
 800ceb2:	f1b9 0f00 	cmp.w	r9, #0
 800ceb6:	d130      	bne.n	800cf1a <__gethex+0x326>
 800ceb8:	b127      	cbz	r7, 800cec4 <__gethex+0x2d0>
 800ceba:	4639      	mov	r1, r7
 800cebc:	4620      	mov	r0, r4
 800cebe:	f7fe fb4c 	bl	800b55a <__any_on>
 800cec2:	4681      	mov	r9, r0
 800cec4:	117a      	asrs	r2, r7, #5
 800cec6:	2301      	movs	r3, #1
 800cec8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cecc:	f007 071f 	and.w	r7, r7, #31
 800ced0:	40bb      	lsls	r3, r7
 800ced2:	4213      	tst	r3, r2
 800ced4:	4629      	mov	r1, r5
 800ced6:	4620      	mov	r0, r4
 800ced8:	bf18      	it	ne
 800ceda:	f049 0902 	orrne.w	r9, r9, #2
 800cede:	f7ff fe21 	bl	800cb24 <rshift>
 800cee2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cee6:	1b76      	subs	r6, r6, r5
 800cee8:	2502      	movs	r5, #2
 800ceea:	f1b9 0f00 	cmp.w	r9, #0
 800ceee:	d047      	beq.n	800cf80 <__gethex+0x38c>
 800cef0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cef4:	2b02      	cmp	r3, #2
 800cef6:	d015      	beq.n	800cf24 <__gethex+0x330>
 800cef8:	2b03      	cmp	r3, #3
 800cefa:	d017      	beq.n	800cf2c <__gethex+0x338>
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d109      	bne.n	800cf14 <__gethex+0x320>
 800cf00:	f019 0f02 	tst.w	r9, #2
 800cf04:	d006      	beq.n	800cf14 <__gethex+0x320>
 800cf06:	f8da 3000 	ldr.w	r3, [sl]
 800cf0a:	ea49 0903 	orr.w	r9, r9, r3
 800cf0e:	f019 0f01 	tst.w	r9, #1
 800cf12:	d10e      	bne.n	800cf32 <__gethex+0x33e>
 800cf14:	f045 0510 	orr.w	r5, r5, #16
 800cf18:	e032      	b.n	800cf80 <__gethex+0x38c>
 800cf1a:	f04f 0901 	mov.w	r9, #1
 800cf1e:	e7d1      	b.n	800cec4 <__gethex+0x2d0>
 800cf20:	2501      	movs	r5, #1
 800cf22:	e7e2      	b.n	800ceea <__gethex+0x2f6>
 800cf24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf26:	f1c3 0301 	rsb	r3, r3, #1
 800cf2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cf2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d0f0      	beq.n	800cf14 <__gethex+0x320>
 800cf32:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cf36:	f104 0314 	add.w	r3, r4, #20
 800cf3a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cf3e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cf42:	f04f 0c00 	mov.w	ip, #0
 800cf46:	4618      	mov	r0, r3
 800cf48:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf4c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cf50:	d01b      	beq.n	800cf8a <__gethex+0x396>
 800cf52:	3201      	adds	r2, #1
 800cf54:	6002      	str	r2, [r0, #0]
 800cf56:	2d02      	cmp	r5, #2
 800cf58:	f104 0314 	add.w	r3, r4, #20
 800cf5c:	d13c      	bne.n	800cfd8 <__gethex+0x3e4>
 800cf5e:	f8d8 2000 	ldr.w	r2, [r8]
 800cf62:	3a01      	subs	r2, #1
 800cf64:	42b2      	cmp	r2, r6
 800cf66:	d109      	bne.n	800cf7c <__gethex+0x388>
 800cf68:	1171      	asrs	r1, r6, #5
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cf70:	f006 061f 	and.w	r6, r6, #31
 800cf74:	fa02 f606 	lsl.w	r6, r2, r6
 800cf78:	421e      	tst	r6, r3
 800cf7a:	d13a      	bne.n	800cff2 <__gethex+0x3fe>
 800cf7c:	f045 0520 	orr.w	r5, r5, #32
 800cf80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf82:	601c      	str	r4, [r3, #0]
 800cf84:	9b02      	ldr	r3, [sp, #8]
 800cf86:	601f      	str	r7, [r3, #0]
 800cf88:	e6b0      	b.n	800ccec <__gethex+0xf8>
 800cf8a:	4299      	cmp	r1, r3
 800cf8c:	f843 cc04 	str.w	ip, [r3, #-4]
 800cf90:	d8d9      	bhi.n	800cf46 <__gethex+0x352>
 800cf92:	68a3      	ldr	r3, [r4, #8]
 800cf94:	459b      	cmp	fp, r3
 800cf96:	db17      	blt.n	800cfc8 <__gethex+0x3d4>
 800cf98:	6861      	ldr	r1, [r4, #4]
 800cf9a:	9801      	ldr	r0, [sp, #4]
 800cf9c:	3101      	adds	r1, #1
 800cf9e:	f7fd fe4b 	bl	800ac38 <_Balloc>
 800cfa2:	4681      	mov	r9, r0
 800cfa4:	b918      	cbnz	r0, 800cfae <__gethex+0x3ba>
 800cfa6:	4b1a      	ldr	r3, [pc, #104]	@ (800d010 <__gethex+0x41c>)
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	2184      	movs	r1, #132	@ 0x84
 800cfac:	e6c5      	b.n	800cd3a <__gethex+0x146>
 800cfae:	6922      	ldr	r2, [r4, #16]
 800cfb0:	3202      	adds	r2, #2
 800cfb2:	f104 010c 	add.w	r1, r4, #12
 800cfb6:	0092      	lsls	r2, r2, #2
 800cfb8:	300c      	adds	r0, #12
 800cfba:	f7fc feda 	bl	8009d72 <memcpy>
 800cfbe:	4621      	mov	r1, r4
 800cfc0:	9801      	ldr	r0, [sp, #4]
 800cfc2:	f7fd fe79 	bl	800acb8 <_Bfree>
 800cfc6:	464c      	mov	r4, r9
 800cfc8:	6923      	ldr	r3, [r4, #16]
 800cfca:	1c5a      	adds	r2, r3, #1
 800cfcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cfd0:	6122      	str	r2, [r4, #16]
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	615a      	str	r2, [r3, #20]
 800cfd6:	e7be      	b.n	800cf56 <__gethex+0x362>
 800cfd8:	6922      	ldr	r2, [r4, #16]
 800cfda:	455a      	cmp	r2, fp
 800cfdc:	dd0b      	ble.n	800cff6 <__gethex+0x402>
 800cfde:	2101      	movs	r1, #1
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	f7ff fd9f 	bl	800cb24 <rshift>
 800cfe6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cfea:	3701      	adds	r7, #1
 800cfec:	42bb      	cmp	r3, r7
 800cfee:	f6ff aee0 	blt.w	800cdb2 <__gethex+0x1be>
 800cff2:	2501      	movs	r5, #1
 800cff4:	e7c2      	b.n	800cf7c <__gethex+0x388>
 800cff6:	f016 061f 	ands.w	r6, r6, #31
 800cffa:	d0fa      	beq.n	800cff2 <__gethex+0x3fe>
 800cffc:	4453      	add	r3, sl
 800cffe:	f1c6 0620 	rsb	r6, r6, #32
 800d002:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d006:	f7fd ff09 	bl	800ae1c <__hi0bits>
 800d00a:	42b0      	cmp	r0, r6
 800d00c:	dbe7      	blt.n	800cfde <__gethex+0x3ea>
 800d00e:	e7f0      	b.n	800cff2 <__gethex+0x3fe>
 800d010:	0800d57d 	.word	0x0800d57d

0800d014 <L_shift>:
 800d014:	f1c2 0208 	rsb	r2, r2, #8
 800d018:	0092      	lsls	r2, r2, #2
 800d01a:	b570      	push	{r4, r5, r6, lr}
 800d01c:	f1c2 0620 	rsb	r6, r2, #32
 800d020:	6843      	ldr	r3, [r0, #4]
 800d022:	6804      	ldr	r4, [r0, #0]
 800d024:	fa03 f506 	lsl.w	r5, r3, r6
 800d028:	432c      	orrs	r4, r5
 800d02a:	40d3      	lsrs	r3, r2
 800d02c:	6004      	str	r4, [r0, #0]
 800d02e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d032:	4288      	cmp	r0, r1
 800d034:	d3f4      	bcc.n	800d020 <L_shift+0xc>
 800d036:	bd70      	pop	{r4, r5, r6, pc}

0800d038 <__match>:
 800d038:	b530      	push	{r4, r5, lr}
 800d03a:	6803      	ldr	r3, [r0, #0]
 800d03c:	3301      	adds	r3, #1
 800d03e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d042:	b914      	cbnz	r4, 800d04a <__match+0x12>
 800d044:	6003      	str	r3, [r0, #0]
 800d046:	2001      	movs	r0, #1
 800d048:	bd30      	pop	{r4, r5, pc}
 800d04a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d04e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d052:	2d19      	cmp	r5, #25
 800d054:	bf98      	it	ls
 800d056:	3220      	addls	r2, #32
 800d058:	42a2      	cmp	r2, r4
 800d05a:	d0f0      	beq.n	800d03e <__match+0x6>
 800d05c:	2000      	movs	r0, #0
 800d05e:	e7f3      	b.n	800d048 <__match+0x10>

0800d060 <__hexnan>:
 800d060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d064:	680b      	ldr	r3, [r1, #0]
 800d066:	6801      	ldr	r1, [r0, #0]
 800d068:	115e      	asrs	r6, r3, #5
 800d06a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d06e:	f013 031f 	ands.w	r3, r3, #31
 800d072:	b087      	sub	sp, #28
 800d074:	bf18      	it	ne
 800d076:	3604      	addne	r6, #4
 800d078:	2500      	movs	r5, #0
 800d07a:	1f37      	subs	r7, r6, #4
 800d07c:	4682      	mov	sl, r0
 800d07e:	4690      	mov	r8, r2
 800d080:	9301      	str	r3, [sp, #4]
 800d082:	f846 5c04 	str.w	r5, [r6, #-4]
 800d086:	46b9      	mov	r9, r7
 800d088:	463c      	mov	r4, r7
 800d08a:	9502      	str	r5, [sp, #8]
 800d08c:	46ab      	mov	fp, r5
 800d08e:	784a      	ldrb	r2, [r1, #1]
 800d090:	1c4b      	adds	r3, r1, #1
 800d092:	9303      	str	r3, [sp, #12]
 800d094:	b342      	cbz	r2, 800d0e8 <__hexnan+0x88>
 800d096:	4610      	mov	r0, r2
 800d098:	9105      	str	r1, [sp, #20]
 800d09a:	9204      	str	r2, [sp, #16]
 800d09c:	f7ff fd94 	bl	800cbc8 <__hexdig_fun>
 800d0a0:	2800      	cmp	r0, #0
 800d0a2:	d151      	bne.n	800d148 <__hexnan+0xe8>
 800d0a4:	9a04      	ldr	r2, [sp, #16]
 800d0a6:	9905      	ldr	r1, [sp, #20]
 800d0a8:	2a20      	cmp	r2, #32
 800d0aa:	d818      	bhi.n	800d0de <__hexnan+0x7e>
 800d0ac:	9b02      	ldr	r3, [sp, #8]
 800d0ae:	459b      	cmp	fp, r3
 800d0b0:	dd13      	ble.n	800d0da <__hexnan+0x7a>
 800d0b2:	454c      	cmp	r4, r9
 800d0b4:	d206      	bcs.n	800d0c4 <__hexnan+0x64>
 800d0b6:	2d07      	cmp	r5, #7
 800d0b8:	dc04      	bgt.n	800d0c4 <__hexnan+0x64>
 800d0ba:	462a      	mov	r2, r5
 800d0bc:	4649      	mov	r1, r9
 800d0be:	4620      	mov	r0, r4
 800d0c0:	f7ff ffa8 	bl	800d014 <L_shift>
 800d0c4:	4544      	cmp	r4, r8
 800d0c6:	d952      	bls.n	800d16e <__hexnan+0x10e>
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	f1a4 0904 	sub.w	r9, r4, #4
 800d0ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800d0d2:	f8cd b008 	str.w	fp, [sp, #8]
 800d0d6:	464c      	mov	r4, r9
 800d0d8:	461d      	mov	r5, r3
 800d0da:	9903      	ldr	r1, [sp, #12]
 800d0dc:	e7d7      	b.n	800d08e <__hexnan+0x2e>
 800d0de:	2a29      	cmp	r2, #41	@ 0x29
 800d0e0:	d157      	bne.n	800d192 <__hexnan+0x132>
 800d0e2:	3102      	adds	r1, #2
 800d0e4:	f8ca 1000 	str.w	r1, [sl]
 800d0e8:	f1bb 0f00 	cmp.w	fp, #0
 800d0ec:	d051      	beq.n	800d192 <__hexnan+0x132>
 800d0ee:	454c      	cmp	r4, r9
 800d0f0:	d206      	bcs.n	800d100 <__hexnan+0xa0>
 800d0f2:	2d07      	cmp	r5, #7
 800d0f4:	dc04      	bgt.n	800d100 <__hexnan+0xa0>
 800d0f6:	462a      	mov	r2, r5
 800d0f8:	4649      	mov	r1, r9
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	f7ff ff8a 	bl	800d014 <L_shift>
 800d100:	4544      	cmp	r4, r8
 800d102:	d936      	bls.n	800d172 <__hexnan+0x112>
 800d104:	f1a8 0204 	sub.w	r2, r8, #4
 800d108:	4623      	mov	r3, r4
 800d10a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d10e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d112:	429f      	cmp	r7, r3
 800d114:	d2f9      	bcs.n	800d10a <__hexnan+0xaa>
 800d116:	1b3b      	subs	r3, r7, r4
 800d118:	f023 0303 	bic.w	r3, r3, #3
 800d11c:	3304      	adds	r3, #4
 800d11e:	3401      	adds	r4, #1
 800d120:	3e03      	subs	r6, #3
 800d122:	42b4      	cmp	r4, r6
 800d124:	bf88      	it	hi
 800d126:	2304      	movhi	r3, #4
 800d128:	4443      	add	r3, r8
 800d12a:	2200      	movs	r2, #0
 800d12c:	f843 2b04 	str.w	r2, [r3], #4
 800d130:	429f      	cmp	r7, r3
 800d132:	d2fb      	bcs.n	800d12c <__hexnan+0xcc>
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	b91b      	cbnz	r3, 800d140 <__hexnan+0xe0>
 800d138:	4547      	cmp	r7, r8
 800d13a:	d128      	bne.n	800d18e <__hexnan+0x12e>
 800d13c:	2301      	movs	r3, #1
 800d13e:	603b      	str	r3, [r7, #0]
 800d140:	2005      	movs	r0, #5
 800d142:	b007      	add	sp, #28
 800d144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d148:	3501      	adds	r5, #1
 800d14a:	2d08      	cmp	r5, #8
 800d14c:	f10b 0b01 	add.w	fp, fp, #1
 800d150:	dd06      	ble.n	800d160 <__hexnan+0x100>
 800d152:	4544      	cmp	r4, r8
 800d154:	d9c1      	bls.n	800d0da <__hexnan+0x7a>
 800d156:	2300      	movs	r3, #0
 800d158:	f844 3c04 	str.w	r3, [r4, #-4]
 800d15c:	2501      	movs	r5, #1
 800d15e:	3c04      	subs	r4, #4
 800d160:	6822      	ldr	r2, [r4, #0]
 800d162:	f000 000f 	and.w	r0, r0, #15
 800d166:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d16a:	6020      	str	r0, [r4, #0]
 800d16c:	e7b5      	b.n	800d0da <__hexnan+0x7a>
 800d16e:	2508      	movs	r5, #8
 800d170:	e7b3      	b.n	800d0da <__hexnan+0x7a>
 800d172:	9b01      	ldr	r3, [sp, #4]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d0dd      	beq.n	800d134 <__hexnan+0xd4>
 800d178:	f1c3 0320 	rsb	r3, r3, #32
 800d17c:	f04f 32ff 	mov.w	r2, #4294967295
 800d180:	40da      	lsrs	r2, r3
 800d182:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d186:	4013      	ands	r3, r2
 800d188:	f846 3c04 	str.w	r3, [r6, #-4]
 800d18c:	e7d2      	b.n	800d134 <__hexnan+0xd4>
 800d18e:	3f04      	subs	r7, #4
 800d190:	e7d0      	b.n	800d134 <__hexnan+0xd4>
 800d192:	2004      	movs	r0, #4
 800d194:	e7d5      	b.n	800d142 <__hexnan+0xe2>

0800d196 <__ascii_mbtowc>:
 800d196:	b082      	sub	sp, #8
 800d198:	b901      	cbnz	r1, 800d19c <__ascii_mbtowc+0x6>
 800d19a:	a901      	add	r1, sp, #4
 800d19c:	b142      	cbz	r2, 800d1b0 <__ascii_mbtowc+0x1a>
 800d19e:	b14b      	cbz	r3, 800d1b4 <__ascii_mbtowc+0x1e>
 800d1a0:	7813      	ldrb	r3, [r2, #0]
 800d1a2:	600b      	str	r3, [r1, #0]
 800d1a4:	7812      	ldrb	r2, [r2, #0]
 800d1a6:	1e10      	subs	r0, r2, #0
 800d1a8:	bf18      	it	ne
 800d1aa:	2001      	movne	r0, #1
 800d1ac:	b002      	add	sp, #8
 800d1ae:	4770      	bx	lr
 800d1b0:	4610      	mov	r0, r2
 800d1b2:	e7fb      	b.n	800d1ac <__ascii_mbtowc+0x16>
 800d1b4:	f06f 0001 	mvn.w	r0, #1
 800d1b8:	e7f8      	b.n	800d1ac <__ascii_mbtowc+0x16>

0800d1ba <_realloc_r>:
 800d1ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1be:	4680      	mov	r8, r0
 800d1c0:	4615      	mov	r5, r2
 800d1c2:	460c      	mov	r4, r1
 800d1c4:	b921      	cbnz	r1, 800d1d0 <_realloc_r+0x16>
 800d1c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ca:	4611      	mov	r1, r2
 800d1cc:	f7fd bca8 	b.w	800ab20 <_malloc_r>
 800d1d0:	b92a      	cbnz	r2, 800d1de <_realloc_r+0x24>
 800d1d2:	f7fd fc31 	bl	800aa38 <_free_r>
 800d1d6:	2400      	movs	r4, #0
 800d1d8:	4620      	mov	r0, r4
 800d1da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1de:	f000 f840 	bl	800d262 <_malloc_usable_size_r>
 800d1e2:	4285      	cmp	r5, r0
 800d1e4:	4606      	mov	r6, r0
 800d1e6:	d802      	bhi.n	800d1ee <_realloc_r+0x34>
 800d1e8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d1ec:	d8f4      	bhi.n	800d1d8 <_realloc_r+0x1e>
 800d1ee:	4629      	mov	r1, r5
 800d1f0:	4640      	mov	r0, r8
 800d1f2:	f7fd fc95 	bl	800ab20 <_malloc_r>
 800d1f6:	4607      	mov	r7, r0
 800d1f8:	2800      	cmp	r0, #0
 800d1fa:	d0ec      	beq.n	800d1d6 <_realloc_r+0x1c>
 800d1fc:	42b5      	cmp	r5, r6
 800d1fe:	462a      	mov	r2, r5
 800d200:	4621      	mov	r1, r4
 800d202:	bf28      	it	cs
 800d204:	4632      	movcs	r2, r6
 800d206:	f7fc fdb4 	bl	8009d72 <memcpy>
 800d20a:	4621      	mov	r1, r4
 800d20c:	4640      	mov	r0, r8
 800d20e:	f7fd fc13 	bl	800aa38 <_free_r>
 800d212:	463c      	mov	r4, r7
 800d214:	e7e0      	b.n	800d1d8 <_realloc_r+0x1e>

0800d216 <__ascii_wctomb>:
 800d216:	4603      	mov	r3, r0
 800d218:	4608      	mov	r0, r1
 800d21a:	b141      	cbz	r1, 800d22e <__ascii_wctomb+0x18>
 800d21c:	2aff      	cmp	r2, #255	@ 0xff
 800d21e:	d904      	bls.n	800d22a <__ascii_wctomb+0x14>
 800d220:	228a      	movs	r2, #138	@ 0x8a
 800d222:	601a      	str	r2, [r3, #0]
 800d224:	f04f 30ff 	mov.w	r0, #4294967295
 800d228:	4770      	bx	lr
 800d22a:	700a      	strb	r2, [r1, #0]
 800d22c:	2001      	movs	r0, #1
 800d22e:	4770      	bx	lr

0800d230 <fiprintf>:
 800d230:	b40e      	push	{r1, r2, r3}
 800d232:	b503      	push	{r0, r1, lr}
 800d234:	4601      	mov	r1, r0
 800d236:	ab03      	add	r3, sp, #12
 800d238:	4805      	ldr	r0, [pc, #20]	@ (800d250 <fiprintf+0x20>)
 800d23a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d23e:	6800      	ldr	r0, [r0, #0]
 800d240:	9301      	str	r3, [sp, #4]
 800d242:	f7ff f9b1 	bl	800c5a8 <_vfiprintf_r>
 800d246:	b002      	add	sp, #8
 800d248:	f85d eb04 	ldr.w	lr, [sp], #4
 800d24c:	b003      	add	sp, #12
 800d24e:	4770      	bx	lr
 800d250:	2000001c 	.word	0x2000001c

0800d254 <abort>:
 800d254:	b508      	push	{r3, lr}
 800d256:	2006      	movs	r0, #6
 800d258:	f000 f834 	bl	800d2c4 <raise>
 800d25c:	2001      	movs	r0, #1
 800d25e:	f7f4 fb69 	bl	8001934 <_exit>

0800d262 <_malloc_usable_size_r>:
 800d262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d266:	1f18      	subs	r0, r3, #4
 800d268:	2b00      	cmp	r3, #0
 800d26a:	bfbc      	itt	lt
 800d26c:	580b      	ldrlt	r3, [r1, r0]
 800d26e:	18c0      	addlt	r0, r0, r3
 800d270:	4770      	bx	lr

0800d272 <_raise_r>:
 800d272:	291f      	cmp	r1, #31
 800d274:	b538      	push	{r3, r4, r5, lr}
 800d276:	4605      	mov	r5, r0
 800d278:	460c      	mov	r4, r1
 800d27a:	d904      	bls.n	800d286 <_raise_r+0x14>
 800d27c:	2316      	movs	r3, #22
 800d27e:	6003      	str	r3, [r0, #0]
 800d280:	f04f 30ff 	mov.w	r0, #4294967295
 800d284:	bd38      	pop	{r3, r4, r5, pc}
 800d286:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d288:	b112      	cbz	r2, 800d290 <_raise_r+0x1e>
 800d28a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d28e:	b94b      	cbnz	r3, 800d2a4 <_raise_r+0x32>
 800d290:	4628      	mov	r0, r5
 800d292:	f000 f831 	bl	800d2f8 <_getpid_r>
 800d296:	4622      	mov	r2, r4
 800d298:	4601      	mov	r1, r0
 800d29a:	4628      	mov	r0, r5
 800d29c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2a0:	f000 b818 	b.w	800d2d4 <_kill_r>
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	d00a      	beq.n	800d2be <_raise_r+0x4c>
 800d2a8:	1c59      	adds	r1, r3, #1
 800d2aa:	d103      	bne.n	800d2b4 <_raise_r+0x42>
 800d2ac:	2316      	movs	r3, #22
 800d2ae:	6003      	str	r3, [r0, #0]
 800d2b0:	2001      	movs	r0, #1
 800d2b2:	e7e7      	b.n	800d284 <_raise_r+0x12>
 800d2b4:	2100      	movs	r1, #0
 800d2b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d2ba:	4620      	mov	r0, r4
 800d2bc:	4798      	blx	r3
 800d2be:	2000      	movs	r0, #0
 800d2c0:	e7e0      	b.n	800d284 <_raise_r+0x12>
	...

0800d2c4 <raise>:
 800d2c4:	4b02      	ldr	r3, [pc, #8]	@ (800d2d0 <raise+0xc>)
 800d2c6:	4601      	mov	r1, r0
 800d2c8:	6818      	ldr	r0, [r3, #0]
 800d2ca:	f7ff bfd2 	b.w	800d272 <_raise_r>
 800d2ce:	bf00      	nop
 800d2d0:	2000001c 	.word	0x2000001c

0800d2d4 <_kill_r>:
 800d2d4:	b538      	push	{r3, r4, r5, lr}
 800d2d6:	4d07      	ldr	r5, [pc, #28]	@ (800d2f4 <_kill_r+0x20>)
 800d2d8:	2300      	movs	r3, #0
 800d2da:	4604      	mov	r4, r0
 800d2dc:	4608      	mov	r0, r1
 800d2de:	4611      	mov	r1, r2
 800d2e0:	602b      	str	r3, [r5, #0]
 800d2e2:	f7f4 fb17 	bl	8001914 <_kill>
 800d2e6:	1c43      	adds	r3, r0, #1
 800d2e8:	d102      	bne.n	800d2f0 <_kill_r+0x1c>
 800d2ea:	682b      	ldr	r3, [r5, #0]
 800d2ec:	b103      	cbz	r3, 800d2f0 <_kill_r+0x1c>
 800d2ee:	6023      	str	r3, [r4, #0]
 800d2f0:	bd38      	pop	{r3, r4, r5, pc}
 800d2f2:	bf00      	nop
 800d2f4:	20004748 	.word	0x20004748

0800d2f8 <_getpid_r>:
 800d2f8:	f7f4 bb04 	b.w	8001904 <_getpid>

0800d2fc <_init>:
 800d2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2fe:	bf00      	nop
 800d300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d302:	bc08      	pop	{r3}
 800d304:	469e      	mov	lr, r3
 800d306:	4770      	bx	lr

0800d308 <_fini>:
 800d308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d30a:	bf00      	nop
 800d30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d30e:	bc08      	pop	{r3}
 800d310:	469e      	mov	lr, r3
 800d312:	4770      	bx	lr
