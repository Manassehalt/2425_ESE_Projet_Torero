
Projet_Torero_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfac  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  0800d190  0800d190  0000e190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d718  0800d718  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d718  0800d718  0000e718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d720  0800d720  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d720  0800d720  0000e720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d724  0800d724  0000e724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d728  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fd4  200001d8  0800d900  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200041ac  0800d900  000101ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dfa3  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004920  00000000  00000000  0002d1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab0  00000000  00000000  00031ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000149c  00000000  00000000  00033580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022dbb  00000000  00000000  00034a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021519  00000000  00000000  000577d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3ebe  00000000  00000000  00078cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014cbae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008398  00000000  00000000  0014cbf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  00154f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d174 	.word	0x0800d174

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800d174 	.word	0x0800d174

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001034:	b5b0      	push	{r4, r5, r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800103a:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <MX_FREERTOS_Init+0x2c>)
 800103c:	1d3c      	adds	r4, r7, #4
 800103e:	461d      	mov	r5, r3
 8001040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001044:	682b      	ldr	r3, [r5, #0]
 8001046:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f005 ff06 	bl	8006e5e <osThreadCreate>
 8001052:	4603      	mov	r3, r0
 8001054:	4a03      	ldr	r2, [pc, #12]	@ (8001064 <MX_FREERTOS_Init+0x30>)
 8001056:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001058:	bf00      	nop
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bdb0      	pop	{r4, r5, r7, pc}
 8001060:	0800d19c 	.word	0x0800d19c
 8001064:	200001f4 	.word	0x200001f4

08001068 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001070:	2001      	movs	r0, #1
 8001072:	f005 ff1b 	bl	8006eac <osDelay>
 8001076:	e7fb      	b.n	8001070 <StartDefaultTask+0x8>

08001078 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800107e:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <MX_DMA_Init+0x50>)
 8001080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001082:	4a11      	ldr	r2, [pc, #68]	@ (80010c8 <MX_DMA_Init+0x50>)
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	6493      	str	r3, [r2, #72]	@ 0x48
 800108a:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <MX_DMA_Init+0x50>)
 800108c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001096:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <MX_DMA_Init+0x50>)
 8001098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800109a:	4a0b      	ldr	r2, [pc, #44]	@ (80010c8 <MX_DMA_Init+0x50>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80010a2:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <MX_DMA_Init+0x50>)
 80010a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2105      	movs	r1, #5
 80010b2:	200b      	movs	r0, #11
 80010b4:	f001 fa5f 	bl	8002576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010b8:	200b      	movs	r0, #11
 80010ba:	f001 fa76 	bl	80025aa <HAL_NVIC_EnableIRQ>

}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000

080010cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	4b6b      	ldr	r3, [pc, #428]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	4a6a      	ldr	r2, [pc, #424]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ee:	4b68      	ldr	r3, [pc, #416]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010fa:	4b65      	ldr	r3, [pc, #404]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a64      	ldr	r2, [pc, #400]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 8001100:	f043 0320 	orr.w	r3, r3, #32
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b62      	ldr	r3, [pc, #392]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0320 	and.w	r3, r3, #32
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001112:	4b5f      	ldr	r3, [pc, #380]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a5e      	ldr	r2, [pc, #376]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 8001118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b5c      	ldr	r3, [pc, #368]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	4b59      	ldr	r3, [pc, #356]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4a58      	ldr	r2, [pc, #352]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001136:	4b56      	ldr	r3, [pc, #344]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	4b53      	ldr	r3, [pc, #332]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	4a52      	ldr	r2, [pc, #328]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114e:	4b50      	ldr	r3, [pc, #320]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INT2_ACC_Pin|LED_SE_Pin|LED_SW_Pin|Status_LED_Pin
 800115a:	2200      	movs	r2, #0
 800115c:	f642 4150 	movw	r1, #11344	@ 0x2c50
 8001160:	484c      	ldr	r0, [pc, #304]	@ (8001294 <MX_GPIO_Init+0x1c8>)
 8001162:	f001 fe31 	bl	8002dc8 <HAL_GPIO_WritePin>
                          |Status_LED_debbug_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	2120      	movs	r1, #32
 800116a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800116e:	f001 fe2b 	bl	8002dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_NE_Pin|DEV_EN_LIDAR_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	f248 0180 	movw	r1, #32896	@ 0x8080
 8001178:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800117c:	f001 fe24 	bl	8002dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M_EN_LIDAR_Pin|LED_NW_Pin|LED_W_Pin|LED_N_Pin
 8001180:	2200      	movs	r2, #0
 8001182:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 8001186:	4844      	ldr	r0, [pc, #272]	@ (8001298 <MX_GPIO_Init+0x1cc>)
 8001188:	f001 fe1e 	bl	8002dc8 <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_S_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = INT2_ACC_Pin|LED_SE_Pin|LED_SW_Pin|Status_LED_Pin
 800118c:	f642 4350 	movw	r3, #11344	@ 0x2c50
 8001190:	617b      	str	r3, [r7, #20]
                          |Status_LED_debbug_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	2301      	movs	r3, #1
 8001194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	483b      	ldr	r0, [pc, #236]	@ (8001294 <MX_GPIO_Init+0x1c8>)
 80011a6:	f001 fc8d 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 80011aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	4837      	ldr	r0, [pc, #220]	@ (800129c <MX_GPIO_Init+0x1d0>)
 80011c0:	f001 fc80 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS_ACC_Pin|LED_NE_Pin|DEV_EN_LIDAR_Pin;
 80011c4:	f248 03a0 	movw	r3, #32928	@ 0x80a0
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e0:	f001 fc70 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CAPTEUR_G_Pin|CAPTEUR_D_Pin;
 80011e4:	2303      	movs	r3, #3
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80011e8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	4827      	ldr	r0, [pc, #156]	@ (8001298 <MX_GPIO_Init+0x1cc>)
 80011fa:	f001 fc63 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = M_EN_LIDAR_Pin|LED_NW_Pin|LED_W_Pin|LED_N_Pin
 80011fe:	f241 03f4 	movw	r3, #4340	@ 0x10f4
 8001202:	617b      	str	r3, [r7, #20]
                          |LED_E_Pin|LED_S_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	4820      	ldr	r0, [pc, #128]	@ (8001298 <MX_GPIO_Init+0x1cc>)
 8001218:	f001 fc54 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT1_ACC_Pin;
 800121c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001222:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT1_ACC_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001236:	f001 fc45 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800123a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001240:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	4811      	ldr	r0, [pc, #68]	@ (8001298 <MX_GPIO_Init+0x1cc>)
 8001252:	f001 fc37 	bl	8002ac4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2105      	movs	r1, #5
 800125a:	2006      	movs	r0, #6
 800125c:	f001 f98b 	bl	8002576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001260:	2006      	movs	r0, #6
 8001262:	f001 f9a2 	bl	80025aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2105      	movs	r1, #5
 800126a:	2007      	movs	r0, #7
 800126c:	f001 f983 	bl	8002576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001270:	2007      	movs	r0, #7
 8001272:	f001 f99a 	bl	80025aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2105      	movs	r1, #5
 800127a:	2028      	movs	r0, #40	@ 0x28
 800127c:	f001 f97b 	bl	8002576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001280:	2028      	movs	r0, #40	@ 0x28
 8001282:	f001 f992 	bl	80025aa <HAL_NVIC_EnableIRQ>

}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	@ 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000
 8001294:	48000800 	.word	0x48000800
 8001298:	48000400 	.word	0x48000400
 800129c:	48001800 	.word	0x48001800

080012a0 <__io_putchar>:
int frame_start = 0;
int frame_end = 0;



int __io_putchar(int chr){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 80012a8:	1d39      	adds	r1, r7, #4
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
 80012ae:	2201      	movs	r2, #1
 80012b0:	4803      	ldr	r0, [pc, #12]	@ (80012c0 <__io_putchar+0x20>)
 80012b2:	f004 fce5 	bl	8005c80 <HAL_UART_Transmit>
	return chr;
 80012b6:	687b      	ldr	r3, [r7, #4]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20001670 	.word	0x20001670

080012c4 <TaskMOTOR>:
	for (;;) {

	}
}

void TaskMOTOR (void * pvParameters){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	for(;;){

		Motor_Forward_R(50);
 80012cc:	2032      	movs	r0, #50	@ 0x32
 80012ce:	f007 fa55 	bl	800877c <Motor_Forward_R>
		Motor_Forward_L(50);
 80012d2:	2032      	movs	r0, #50	@ 0x32
 80012d4:	f007 faba 	bl	800884c <Motor_Forward_L>
		Motor_Forward_R(50);
 80012d8:	bf00      	nop
 80012da:	e7f7      	b.n	80012cc <TaskMOTOR+0x8>

080012dc <TaskEDGE>:
		int erreurLidar = 10/180;
		int alphaD = coeff_Lidar*erreurLidar-coeff_Capteur*erreur_capteur;
		int alphaG = -coeff_Lidar*erreurLidar+coeff_Capteur*erreur_capteur;
 */

void TaskEDGE(void * pvParameters){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	for (;;) {

		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295
 80012e8:	2001      	movs	r0, #1
 80012ea:	f006 fc13 	bl	8007b14 <ulTaskNotifyTake>
		Motor_Forward_R(0);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f007 fa44 	bl	800877c <Motor_Forward_R>
		Motor_Forward_L(0);
 80012f4:	2000      	movs	r0, #0
 80012f6:	f007 faa9 	bl	800884c <Motor_Forward_L>
		HAL_Delay(10);
 80012fa:	200a      	movs	r0, #10
 80012fc:	f001 f83e 	bl	800237c <HAL_Delay>
		while((capteur_D||capteur_G)==1){
 8001300:	e008      	b.n	8001314 <TaskEDGE+0x38>
			Motor_Reverse_R(50);
 8001302:	2032      	movs	r0, #50	@ 0x32
 8001304:	f007 fa6e 	bl	80087e4 <Motor_Reverse_R>
			Motor_Reverse_L(50);
 8001308:	2032      	movs	r0, #50	@ 0x32
 800130a:	f007 fad1 	bl	80088b0 <Motor_Reverse_L>
			HAL_Delay(100);
 800130e:	2064      	movs	r0, #100	@ 0x64
 8001310:	f001 f834 	bl	800237c <HAL_Delay>
		while((capteur_D||capteur_G)==1){
 8001314:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <TaskEDGE+0x54>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d103      	bne.n	8001324 <TaskEDGE+0x48>
 800131c:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <TaskEDGE+0x58>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <TaskEDGE+0x4c>
 8001324:	2301      	movs	r3, #1
 8001326:	e000      	b.n	800132a <TaskEDGE+0x4e>
 8001328:	2300      	movs	r3, #0
 800132a:	2b01      	cmp	r3, #1
 800132c:	d0e9      	beq.n	8001302 <TaskEDGE+0x26>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800132e:	e7d9      	b.n	80012e4 <TaskEDGE+0x8>
 8001330:	200014c4 	.word	0x200014c4
 8001334:	200014c0 	.word	0x200014c0

08001338 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800133e:	f000 ffac 	bl	800229a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001342:	f000 f897 	bl	8001474 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001346:	f7ff fec1 	bl	80010cc <MX_GPIO_Init>
	MX_DMA_Init();
 800134a:	f7ff fe95 	bl	8001078 <MX_DMA_Init>
	MX_SPI2_Init();
 800134e:	f000 f94d 	bl	80015ec <MX_SPI2_Init>
	MX_TIM1_Init();
 8001352:	f000 fb17 	bl	8001984 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001356:	f000 fbb3 	bl	8001ac0 <MX_TIM2_Init>
	MX_TIM3_Init();
 800135a:	f000 fc15 	bl	8001b88 <MX_TIM3_Init>
	MX_TIM4_Init();
 800135e:	f000 fc69 	bl	8001c34 <MX_TIM4_Init>
	MX_USART2_UART_Init();
 8001362:	f000 fe13 	bl	8001f8c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001366:	f000 fe5d 	bl	8002024 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	Start_Motors();
 800136a:	f007 fad3 	bl	8008914 <Start_Motors>
	ADXL343_Init();
 800136e:	f007 f9ad 	bl	80086cc <ADXL343_Init>
	LIDAR_Init(&hlidar);
 8001372:	4830      	ldr	r0, [pc, #192]	@ (8001434 <main+0xfc>)
 8001374:	f007 faf6 	bl	8008964 <LIDAR_Init>
	LIDAR_Start(&hlidar);
 8001378:	482e      	ldr	r0, [pc, #184]	@ (8001434 <main+0xfc>)
 800137a:	f007 fb0f 	bl	800899c <LIDAR_Start>
	//	printf("Error creating TaskACC\r\n");
	//	Error_Handler();
	//}
	//printf("Task ACC created\r\n");

	ret = xTaskCreate(TaskMOTOR,"TaskMOTOR",STACK_SIZE,(void *) NULL,1,&xHandleMOTOR);
 800137e:	4b2e      	ldr	r3, [pc, #184]	@ (8001438 <main+0x100>)
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	2301      	movs	r3, #1
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	2300      	movs	r3, #0
 8001388:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800138c:	492b      	ldr	r1, [pc, #172]	@ (800143c <main+0x104>)
 800138e:	482c      	ldr	r0, [pc, #176]	@ (8001440 <main+0x108>)
 8001390:	f005 ff14 	bl	80071bc <xTaskCreate>
 8001394:	4603      	mov	r3, r0
 8001396:	4a2b      	ldr	r2, [pc, #172]	@ (8001444 <main+0x10c>)
 8001398:	6013      	str	r3, [r2, #0]
	if (ret != pdPASS)
 800139a:	4b2a      	ldr	r3, [pc, #168]	@ (8001444 <main+0x10c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d004      	beq.n	80013ac <main+0x74>
	{
		printf("Error creating TaskMOTOR\r\n");
 80013a2:	4829      	ldr	r0, [pc, #164]	@ (8001448 <main+0x110>)
 80013a4:	f008 faa2 	bl	80098ec <puts>
		Error_Handler();
 80013a8:	f000 f91a 	bl	80015e0 <Error_Handler>
	}
	printf("Task MOTOR created\r\n");
 80013ac:	4827      	ldr	r0, [pc, #156]	@ (800144c <main+0x114>)
 80013ae:	f008 fa9d 	bl	80098ec <puts>


	ret = xTaskCreate(TaskEDGE,"TaskEDGE",STACK_SIZE,(void *) NULL,4,&xHandleEDGE);
 80013b2:	4b27      	ldr	r3, [pc, #156]	@ (8001450 <main+0x118>)
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	2304      	movs	r3, #4
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	2300      	movs	r3, #0
 80013bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013c0:	4924      	ldr	r1, [pc, #144]	@ (8001454 <main+0x11c>)
 80013c2:	4825      	ldr	r0, [pc, #148]	@ (8001458 <main+0x120>)
 80013c4:	f005 fefa 	bl	80071bc <xTaskCreate>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001444 <main+0x10c>)
 80013cc:	6013      	str	r3, [r2, #0]
	if (ret != pdPASS)
 80013ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001444 <main+0x10c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d004      	beq.n	80013e0 <main+0xa8>
	{
		printf("Error creating TaskEDGE\r\n");
 80013d6:	4821      	ldr	r0, [pc, #132]	@ (800145c <main+0x124>)
 80013d8:	f008 fa88 	bl	80098ec <puts>
		Error_Handler();
 80013dc:	f000 f900 	bl	80015e0 <Error_Handler>
	}
	printf("Task EDGE created\r\n");
 80013e0:	481f      	ldr	r0, [pc, #124]	@ (8001460 <main+0x128>)
 80013e2:	f008 fa83 	bl	80098ec <puts>

	SemDMAHalfCallBack = xSemaphoreCreateBinary();
 80013e6:	2203      	movs	r2, #3
 80013e8:	2100      	movs	r1, #0
 80013ea:	2001      	movs	r0, #1
 80013ec:	f005 fe90 	bl	8007110 <xQueueGenericCreate>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001464 <main+0x12c>)
 80013f4:	6013      	str	r3, [r2, #0]
	SemDMAClpCallBack = xSemaphoreCreateBinary();
 80013f6:	2203      	movs	r2, #3
 80013f8:	2100      	movs	r1, #0
 80013fa:	2001      	movs	r0, #1
 80013fc:	f005 fe88 	bl	8007110 <xQueueGenericCreate>
 8001400:	4603      	mov	r3, r0
 8001402:	4a19      	ldr	r2, [pc, #100]	@ (8001468 <main+0x130>)
 8001404:	6013      	str	r3, [r2, #0]
	xShockSemaphore = xSemaphoreCreateBinary();
 8001406:	2203      	movs	r2, #3
 8001408:	2100      	movs	r1, #0
 800140a:	2001      	movs	r0, #1
 800140c:	f005 fe80 	bl	8007110 <xQueueGenericCreate>
 8001410:	4603      	mov	r3, r0
 8001412:	4a16      	ldr	r2, [pc, #88]	@ (800146c <main+0x134>)
 8001414:	6013      	str	r3, [r2, #0]
	SemEtat = xSemaphoreCreateBinary();
 8001416:	2203      	movs	r2, #3
 8001418:	2100      	movs	r1, #0
 800141a:	2001      	movs	r0, #1
 800141c:	f005 fe78 	bl	8007110 <xQueueGenericCreate>
 8001420:	4603      	mov	r3, r0
 8001422:	4a13      	ldr	r2, [pc, #76]	@ (8001470 <main+0x138>)
 8001424:	6013      	str	r3, [r2, #0]
	//xNoSignalSemaphore = xSemaphoreCreateBinary();
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8001426:	f7ff fe05 	bl	8001034 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 800142a:	f005 fd11 	bl	8006e50 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800142e:	bf00      	nop
 8001430:	e7fd      	b.n	800142e <main+0xf6>
 8001432:	bf00      	nop
 8001434:	200001f8 	.word	0x200001f8
 8001438:	200014b4 	.word	0x200014b4
 800143c:	0800d1dc 	.word	0x0800d1dc
 8001440:	080012c5 	.word	0x080012c5
 8001444:	200014bc 	.word	0x200014bc
 8001448:	0800d1e8 	.word	0x0800d1e8
 800144c:	0800d204 	.word	0x0800d204
 8001450:	200014b8 	.word	0x200014b8
 8001454:	0800d218 	.word	0x0800d218
 8001458:	080012dd 	.word	0x080012dd
 800145c:	0800d224 	.word	0x0800d224
 8001460:	0800d240 	.word	0x0800d240
 8001464:	200014d0 	.word	0x200014d0
 8001468:	200014d4 	.word	0x200014d4
 800146c:	200014cc 	.word	0x200014cc
 8001470:	200014c8 	.word	0x200014c8

08001474 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b094      	sub	sp, #80	@ 0x50
 8001478:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147a:	f107 0318 	add.w	r3, r7, #24
 800147e:	2238      	movs	r2, #56	@ 0x38
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f008 fb32 	bl	8009aec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001496:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800149a:	f001 fcc5 	bl	8002e28 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800149e:	2301      	movs	r3, #1
 80014a0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014a6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ac:	f107 0318 	add.w	r3, r7, #24
 80014b0:	4618      	mov	r0, r3
 80014b2:	f001 fd6d 	bl	8002f90 <HAL_RCC_OscConfig>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <SystemClock_Config+0x4c>
	{
		Error_Handler();
 80014bc:	f000 f890 	bl	80015e0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c0:	230f      	movs	r3, #15
 80014c2:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80014c4:	2302      	movs	r3, #2
 80014c6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 f86b 	bl	80035b4 <HAL_RCC_ClockConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0x74>
	{
		Error_Handler();
 80014e4:	f000 f87c 	bl	80015e0 <Error_Handler>
	}
}
 80014e8:	bf00      	nop
 80014ea:	3750      	adds	r7, #80	@ 0x50
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == INT1_ACC_Pin) {
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001500:	d117      	bne.n	8001532 <HAL_GPIO_EXTI_Callback+0x42>
		printf("yeah\r\n");
 8001502:	4831      	ldr	r0, [pc, #196]	@ (80015c8 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001504:	f008 f9f2 	bl	80098ec <puts>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
		vTaskNotifyGiveFromISR(xHandleETAT, &xHigherPriorityTaskWoken);
 800150c:	4b2f      	ldr	r3, [pc, #188]	@ (80015cc <HAL_GPIO_EXTI_Callback+0xdc>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f107 0214 	add.w	r2, r7, #20
 8001514:	4611      	mov	r1, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f006 fb44 	bl	8007ba4 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d007      	beq.n	8001532 <HAL_GPIO_EXTI_Callback+0x42>
 8001522:	4b2b      	ldr	r3, [pc, #172]	@ (80015d0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001524:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	f3bf 8f4f 	dsb	sy
 800152e:	f3bf 8f6f 	isb	sy
	}
	if (GPIO_Pin == CAPTEUR_D_Pin) {
 8001532:	88fb      	ldrh	r3, [r7, #6]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d11f      	bne.n	8001578 <HAL_GPIO_EXTI_Callback+0x88>
		if(capteur_D==1){
 8001538:	4b26      	ldr	r3, [pc, #152]	@ (80015d4 <HAL_GPIO_EXTI_Callback+0xe4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d103      	bne.n	8001548 <HAL_GPIO_EXTI_Callback+0x58>
			capteur_D=0;
 8001540:	4b24      	ldr	r3, [pc, #144]	@ (80015d4 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	e002      	b.n	800154e <HAL_GPIO_EXTI_Callback+0x5e>
		}
		else{
			capteur_D=1;
 8001548:	4b22      	ldr	r3, [pc, #136]	@ (80015d4 <HAL_GPIO_EXTI_Callback+0xe4>)
 800154a:	2201      	movs	r2, #1
 800154c:	601a      	str	r2, [r3, #0]
		}
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
		vTaskNotifyGiveFromISR(xHandleEDGE, &xHigherPriorityTaskWoken);
 8001552:	4b21      	ldr	r3, [pc, #132]	@ (80015d8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f107 0210 	add.w	r2, r7, #16
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f006 fb21 	bl	8007ba4 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d007      	beq.n	8001578 <HAL_GPIO_EXTI_Callback+0x88>
 8001568:	4b19      	ldr	r3, [pc, #100]	@ (80015d0 <HAL_GPIO_EXTI_Callback+0xe0>)
 800156a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	f3bf 8f4f 	dsb	sy
 8001574:	f3bf 8f6f 	isb	sy
	}
	if (GPIO_Pin == CAPTEUR_G_Pin) {
 8001578:	88fb      	ldrh	r3, [r7, #6]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d11f      	bne.n	80015be <HAL_GPIO_EXTI_Callback+0xce>
		if(capteur_G==1){
 800157e:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <HAL_GPIO_EXTI_Callback+0xec>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d103      	bne.n	800158e <HAL_GPIO_EXTI_Callback+0x9e>
			capteur_G=0;
 8001586:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <HAL_GPIO_EXTI_Callback+0xec>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	e002      	b.n	8001594 <HAL_GPIO_EXTI_Callback+0xa4>
		}
		else{
			capteur_G=1;
 800158e:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <HAL_GPIO_EXTI_Callback+0xec>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]
		}
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
		vTaskNotifyGiveFromISR(xHandleEDGE, &xHigherPriorityTaskWoken);
 8001598:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <HAL_GPIO_EXTI_Callback+0xe8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f107 020c 	add.w	r2, r7, #12
 80015a0:	4611      	mov	r1, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f006 fafe 	bl	8007ba4 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d007      	beq.n	80015be <HAL_GPIO_EXTI_Callback+0xce>
 80015ae:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <HAL_GPIO_EXTI_Callback+0xe0>)
 80015b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	f3bf 8f4f 	dsb	sy
 80015ba:	f3bf 8f6f 	isb	sy
	}
}
 80015be:	bf00      	nop
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	0800d254 	.word	0x0800d254
 80015cc:	200014b0 	.word	0x200014b0
 80015d0:	e000ed04 	.word	0xe000ed04
 80015d4:	200014c4 	.word	0x200014c4
 80015d8:	200014b8 	.word	0x200014b8
 80015dc:	200014c0 	.word	0x200014c0

080015e0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e4:	b672      	cpsid	i
}
 80015e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <Error_Handler+0x8>

080015ec <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80015f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001660 <MX_SPI2_Init+0x74>)
 80015f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001664 <MX_SPI2_Init+0x78>)
 80015f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <MX_SPI2_Init+0x74>)
 80015f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015fe:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <MX_SPI2_Init+0x74>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001604:	4b16      	ldr	r3, [pc, #88]	@ (8001660 <MX_SPI2_Init+0x74>)
 8001606:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800160a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800160c:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <MX_SPI2_Init+0x74>)
 800160e:	2202      	movs	r2, #2
 8001610:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001612:	4b13      	ldr	r3, [pc, #76]	@ (8001660 <MX_SPI2_Init+0x74>)
 8001614:	2201      	movs	r2, #1
 8001616:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001618:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <MX_SPI2_Init+0x74>)
 800161a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800161e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001620:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <MX_SPI2_Init+0x74>)
 8001622:	2218      	movs	r2, #24
 8001624:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <MX_SPI2_Init+0x74>)
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800162c:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <MX_SPI2_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001632:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <MX_SPI2_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001638:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <MX_SPI2_Init+0x74>)
 800163a:	2207      	movs	r2, #7
 800163c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800163e:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <MX_SPI2_Init+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <MX_SPI2_Init+0x74>)
 8001646:	2200      	movs	r2, #0
 8001648:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800164a:	4805      	ldr	r0, [pc, #20]	@ (8001660 <MX_SPI2_Init+0x74>)
 800164c:	f002 fbba 	bl	8003dc4 <HAL_SPI_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001656:	f7ff ffc3 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200014d8 	.word	0x200014d8
 8001664:	40003800 	.word	0x40003800

08001668 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	@ 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a17      	ldr	r2, [pc, #92]	@ (80016e4 <HAL_SPI_MspInit+0x7c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d128      	bne.n	80016dc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800168a:	4b17      	ldr	r3, [pc, #92]	@ (80016e8 <HAL_SPI_MspInit+0x80>)
 800168c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168e:	4a16      	ldr	r2, [pc, #88]	@ (80016e8 <HAL_SPI_MspInit+0x80>)
 8001690:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001694:	6593      	str	r3, [r2, #88]	@ 0x58
 8001696:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <HAL_SPI_MspInit+0x80>)
 8001698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <HAL_SPI_MspInit+0x80>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a6:	4a10      	ldr	r2, [pc, #64]	@ (80016e8 <HAL_SPI_MspInit+0x80>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ae:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <HAL_SPI_MspInit+0x80>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_TO_SCLK_ACC_Pin|SPI2_MISO_TO_SDO_ACC_Pin|SPI2_MOSI_TO_SDI_ACC_Pin;
 80016ba:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80016be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016cc:	2305      	movs	r3, #5
 80016ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	4805      	ldr	r0, [pc, #20]	@ (80016ec <HAL_SPI_MspInit+0x84>)
 80016d8:	f001 f9f4 	bl	8002ac4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80016dc:	bf00      	nop
 80016de:	3728      	adds	r7, #40	@ 0x28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40003800 	.word	0x40003800
 80016e8:	40021000 	.word	0x40021000
 80016ec:	48000400 	.word	0x48000400

080016f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <HAL_MspInit+0x50>)
 80016f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016fa:	4a11      	ldr	r2, [pc, #68]	@ (8001740 <HAL_MspInit+0x50>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6613      	str	r3, [r2, #96]	@ 0x60
 8001702:	4b0f      	ldr	r3, [pc, #60]	@ (8001740 <HAL_MspInit+0x50>)
 8001704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <HAL_MspInit+0x50>)
 8001710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001712:	4a0b      	ldr	r2, [pc, #44]	@ (8001740 <HAL_MspInit+0x50>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001718:	6593      	str	r3, [r2, #88]	@ 0x58
 800171a:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <HAL_MspInit+0x50>)
 800171c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	210f      	movs	r1, #15
 800172a:	f06f 0001 	mvn.w	r0, #1
 800172e:	f000 ff22 	bl	8002576 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001732:	f001 fc1d 	bl	8002f70 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <NMI_Handler+0x4>

0800174c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <HardFault_Handler+0x4>

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <MemManage_Handler+0x4>

0800175c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <BusFault_Handler+0x4>

08001764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <UsageFault_Handler+0x4>

0800176c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177e:	f000 fddf 	bl	8002340 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001782:	f006 f9a9 	bl	8007ad8 <xTaskGetSchedulerState>
 8001786:	4603      	mov	r3, r0
 8001788:	2b01      	cmp	r3, #1
 800178a:	d001      	beq.n	8001790 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800178c:	f006 fcc4 	bl	8008118 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}

08001794 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAPTEUR_G_Pin);
 8001798:	2001      	movs	r0, #1
 800179a:	f001 fb2d 	bl	8002df8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAPTEUR_D_Pin);
 80017a6:	2002      	movs	r0, #2
 80017a8:	f001 fb26 	bl	8002df8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80017b4:	4802      	ldr	r0, [pc, #8]	@ (80017c0 <DMA1_Channel1_IRQHandler+0x10>)
 80017b6:	f001 f836 	bl	8002826 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20001798 	.word	0x20001798

080017c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACC_Pin);
 80017c8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80017cc:	f001 fb14 	bl	8002df8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return 1;
 80017d8:	2301      	movs	r3, #1
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <_kill>:

int _kill(int pid, int sig)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017ee:	f008 f9cf 	bl	8009b90 <__errno>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2216      	movs	r2, #22
 80017f6:	601a      	str	r2, [r3, #0]
  return -1;
 80017f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <_exit>:

void _exit (int status)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800180c:	f04f 31ff 	mov.w	r1, #4294967295
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ffe7 	bl	80017e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001816:	bf00      	nop
 8001818:	e7fd      	b.n	8001816 <_exit+0x12>

0800181a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	e00a      	b.n	8001842 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800182c:	f3af 8000 	nop.w
 8001830:	4601      	mov	r1, r0
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	1c5a      	adds	r2, r3, #1
 8001836:	60ba      	str	r2, [r7, #8]
 8001838:	b2ca      	uxtb	r2, r1
 800183a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	3301      	adds	r3, #1
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	429a      	cmp	r2, r3
 8001848:	dbf0      	blt.n	800182c <_read+0x12>
  }

  return len;
 800184a:	687b      	ldr	r3, [r7, #4]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	e009      	b.n	800187a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	60ba      	str	r2, [r7, #8]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fd16 	bl	80012a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	3301      	adds	r3, #1
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	429a      	cmp	r2, r3
 8001880:	dbf1      	blt.n	8001866 <_write+0x12>
  }
  return len;
 8001882:	687b      	ldr	r3, [r7, #4]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <_close>:

int _close(int file)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001894:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018b4:	605a      	str	r2, [r3, #4]
  return 0;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <_isatty>:

int _isatty(int file)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018cc:	2301      	movs	r3, #1
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018da:	b480      	push	{r7}
 80018dc:	b085      	sub	sp, #20
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018fc:	4a14      	ldr	r2, [pc, #80]	@ (8001950 <_sbrk+0x5c>)
 80018fe:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <_sbrk+0x60>)
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001908:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d102      	bne.n	8001916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001910:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <_sbrk+0x64>)
 8001912:	4a12      	ldr	r2, [pc, #72]	@ (800195c <_sbrk+0x68>)
 8001914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001916:	4b10      	ldr	r3, [pc, #64]	@ (8001958 <_sbrk+0x64>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	429a      	cmp	r2, r3
 8001922:	d207      	bcs.n	8001934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001924:	f008 f934 	bl	8009b90 <__errno>
 8001928:	4603      	mov	r3, r0
 800192a:	220c      	movs	r2, #12
 800192c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
 8001932:	e009      	b.n	8001948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001934:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193a:	4b07      	ldr	r3, [pc, #28]	@ (8001958 <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	4a05      	ldr	r2, [pc, #20]	@ (8001958 <_sbrk+0x64>)
 8001944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001946:	68fb      	ldr	r3, [r7, #12]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20008000 	.word	0x20008000
 8001954:	00000400 	.word	0x00000400
 8001958:	2000153c 	.word	0x2000153c
 800195c:	200041b0 	.word	0x200041b0

08001960 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001964:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <SystemInit+0x20>)
 8001966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800196a:	4a05      	ldr	r2, [pc, #20]	@ (8001980 <SystemInit+0x20>)
 800196c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001970:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b098      	sub	sp, #96	@ 0x60
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001996:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
 80019a4:	611a      	str	r2, [r3, #16]
 80019a6:	615a      	str	r2, [r3, #20]
 80019a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	2234      	movs	r2, #52	@ 0x34
 80019ae:	2100      	movs	r1, #0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f008 f89b 	bl	8009aec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019b6:	4b40      	ldr	r3, [pc, #256]	@ (8001ab8 <MX_TIM1_Init+0x134>)
 80019b8:	4a40      	ldr	r2, [pc, #256]	@ (8001abc <MX_TIM1_Init+0x138>)
 80019ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80019bc:	4b3e      	ldr	r3, [pc, #248]	@ (8001ab8 <MX_TIM1_Init+0x134>)
 80019be:	220f      	movs	r2, #15
 80019c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab8 <MX_TIM1_Init+0x134>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39;
 80019c8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ab8 <MX_TIM1_Init+0x134>)
 80019ca:	2227      	movs	r2, #39	@ 0x27
 80019cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ce:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab8 <MX_TIM1_Init+0x134>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019d4:	4b38      	ldr	r3, [pc, #224]	@ (8001ab8 <MX_TIM1_Init+0x134>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019da:	4b37      	ldr	r3, [pc, #220]	@ (8001ab8 <MX_TIM1_Init+0x134>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019e0:	4835      	ldr	r0, [pc, #212]	@ (8001ab8 <MX_TIM1_Init+0x134>)
 80019e2:	f003 f925 	bl	8004c30 <HAL_TIM_PWM_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80019ec:	f7ff fdf8 	bl	80015e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f0:	2300      	movs	r3, #0
 80019f2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019f4:	2300      	movs	r3, #0
 80019f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a00:	4619      	mov	r1, r3
 8001a02:	482d      	ldr	r0, [pc, #180]	@ (8001ab8 <MX_TIM1_Init+0x134>)
 8001a04:	f003 ffde 	bl	80059c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001a0e:	f7ff fde7 	bl	80015e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a12:	2360      	movs	r3, #96	@ 0x60
 8001a14:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a2e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a32:	2200      	movs	r2, #0
 8001a34:	4619      	mov	r1, r3
 8001a36:	4820      	ldr	r0, [pc, #128]	@ (8001ab8 <MX_TIM1_Init+0x134>)
 8001a38:	f003 faf8 	bl	800502c <HAL_TIM_PWM_ConfigChannel>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001a42:	f7ff fdcd 	bl	80015e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a46:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	481a      	ldr	r0, [pc, #104]	@ (8001ab8 <MX_TIM1_Init+0x134>)
 8001a50:	f003 faec 	bl	800502c <HAL_TIM_PWM_ConfigChannel>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8001a5a:	f7ff fdc1 	bl	80015e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a76:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4807      	ldr	r0, [pc, #28]	@ (8001ab8 <MX_TIM1_Init+0x134>)
 8001a9c:	f004 f814 	bl	8005ac8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001aa6:	f7ff fd9b 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001aaa:	4803      	ldr	r0, [pc, #12]	@ (8001ab8 <MX_TIM1_Init+0x134>)
 8001aac:	f000 f9ec 	bl	8001e88 <HAL_TIM_MspPostInit>

}
 8001ab0:	bf00      	nop
 8001ab2:	3760      	adds	r7, #96	@ 0x60
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20001540 	.word	0x20001540
 8001abc:	40012c00 	.word	0x40012c00

08001ac0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	@ 0x28
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac6:	f107 031c 	add.w	r3, r7, #28
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ad2:	463b      	mov	r3, r7
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
 8001ae0:	615a      	str	r2, [r3, #20]
 8001ae2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ae4:	4b27      	ldr	r3, [pc, #156]	@ (8001b84 <MX_TIM2_Init+0xc4>)
 8001ae6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001aea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8001aec:	4b25      	ldr	r3, [pc, #148]	@ (8001b84 <MX_TIM2_Init+0xc4>)
 8001aee:	220f      	movs	r2, #15
 8001af0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af2:	4b24      	ldr	r3, [pc, #144]	@ (8001b84 <MX_TIM2_Init+0xc4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 8001af8:	4b22      	ldr	r3, [pc, #136]	@ (8001b84 <MX_TIM2_Init+0xc4>)
 8001afa:	2227      	movs	r2, #39	@ 0x27
 8001afc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afe:	4b21      	ldr	r3, [pc, #132]	@ (8001b84 <MX_TIM2_Init+0xc4>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b04:	4b1f      	ldr	r3, [pc, #124]	@ (8001b84 <MX_TIM2_Init+0xc4>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b0a:	481e      	ldr	r0, [pc, #120]	@ (8001b84 <MX_TIM2_Init+0xc4>)
 8001b0c:	f003 f890 	bl	8004c30 <HAL_TIM_PWM_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001b16:	f7ff fd63 	bl	80015e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b22:	f107 031c 	add.w	r3, r7, #28
 8001b26:	4619      	mov	r1, r3
 8001b28:	4816      	ldr	r0, [pc, #88]	@ (8001b84 <MX_TIM2_Init+0xc4>)
 8001b2a:	f003 ff4b 	bl	80059c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001b34:	f7ff fd54 	bl	80015e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b38:	2360      	movs	r3, #96	@ 0x60
 8001b3a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b48:	463b      	mov	r3, r7
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	480d      	ldr	r0, [pc, #52]	@ (8001b84 <MX_TIM2_Init+0xc4>)
 8001b50:	f003 fa6c 	bl	800502c <HAL_TIM_PWM_ConfigChannel>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001b5a:	f7ff fd41 	bl	80015e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b5e:	463b      	mov	r3, r7
 8001b60:	2204      	movs	r2, #4
 8001b62:	4619      	mov	r1, r3
 8001b64:	4807      	ldr	r0, [pc, #28]	@ (8001b84 <MX_TIM2_Init+0xc4>)
 8001b66:	f003 fa61 	bl	800502c <HAL_TIM_PWM_ConfigChannel>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b70:	f7ff fd36 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b74:	4803      	ldr	r0, [pc, #12]	@ (8001b84 <MX_TIM2_Init+0xc4>)
 8001b76:	f000 f987 	bl	8001e88 <HAL_TIM_MspPostInit>

}
 8001b7a:	bf00      	nop
 8001b7c:	3728      	adds	r7, #40	@ 0x28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	2000158c 	.word	0x2000158c

08001b88 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08c      	sub	sp, #48	@ 0x30
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b8e:	f107 030c 	add.w	r3, r7, #12
 8001b92:	2224      	movs	r2, #36	@ 0x24
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f007 ffa8 	bl	8009aec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ba6:	4b21      	ldr	r3, [pc, #132]	@ (8001c2c <MX_TIM3_Init+0xa4>)
 8001ba8:	4a21      	ldr	r2, [pc, #132]	@ (8001c30 <MX_TIM3_Init+0xa8>)
 8001baa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bac:	4b1f      	ldr	r3, [pc, #124]	@ (8001c2c <MX_TIM3_Init+0xa4>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c2c <MX_TIM3_Init+0xa4>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c2c <MX_TIM3_Init+0xa4>)
 8001bba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c2c <MX_TIM3_Init+0xa4>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc6:	4b19      	ldr	r3, [pc, #100]	@ (8001c2c <MX_TIM3_Init+0xa4>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001be4:	2301      	movs	r3, #1
 8001be6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001be8:	2300      	movs	r3, #0
 8001bea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001bf0:	f107 030c 	add.w	r3, r7, #12
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	480d      	ldr	r0, [pc, #52]	@ (8001c2c <MX_TIM3_Init+0xa4>)
 8001bf8:	f003 f972 	bl	8004ee0 <HAL_TIM_Encoder_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001c02:	f7ff fced 	bl	80015e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c06:	2300      	movs	r3, #0
 8001c08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c0e:	463b      	mov	r3, r7
 8001c10:	4619      	mov	r1, r3
 8001c12:	4806      	ldr	r0, [pc, #24]	@ (8001c2c <MX_TIM3_Init+0xa4>)
 8001c14:	f003 fed6 	bl	80059c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001c1e:	f7ff fcdf 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c22:	bf00      	nop
 8001c24:	3730      	adds	r7, #48	@ 0x30
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	200015d8 	.word	0x200015d8
 8001c30:	40000400 	.word	0x40000400

08001c34 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b094      	sub	sp, #80	@ 0x50
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c3e:	2224      	movs	r2, #36	@ 0x24
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f007 ff52 	bl	8009aec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c48:	f107 0320 	add.w	r3, r7, #32
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
 8001c60:	611a      	str	r2, [r3, #16]
 8001c62:	615a      	str	r2, [r3, #20]
 8001c64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c66:	4b30      	ldr	r3, [pc, #192]	@ (8001d28 <MX_TIM4_Init+0xf4>)
 8001c68:	4a30      	ldr	r2, [pc, #192]	@ (8001d2c <MX_TIM4_Init+0xf8>)
 8001c6a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d28 <MX_TIM4_Init+0xf4>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c72:	4b2d      	ldr	r3, [pc, #180]	@ (8001d28 <MX_TIM4_Init+0xf4>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c78:	4b2b      	ldr	r3, [pc, #172]	@ (8001d28 <MX_TIM4_Init+0xf4>)
 8001c7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c7e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c80:	4b29      	ldr	r3, [pc, #164]	@ (8001d28 <MX_TIM4_Init+0xf4>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c86:	4b28      	ldr	r3, [pc, #160]	@ (8001d28 <MX_TIM4_Init+0xf4>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c8c:	4826      	ldr	r0, [pc, #152]	@ (8001d28 <MX_TIM4_Init+0xf4>)
 8001c8e:	f002 ffcf 	bl	8004c30 <HAL_TIM_PWM_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001c98:	f7ff fca2 	bl	80015e0 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC1Filter = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.IC2Filter = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001cc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4818      	ldr	r0, [pc, #96]	@ (8001d28 <MX_TIM4_Init+0xf4>)
 8001cc8:	f003 f90a 	bl	8004ee0 <HAL_TIM_Encoder_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8001cd2:	f7ff fc85 	bl	80015e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cde:	f107 0320 	add.w	r3, r7, #32
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4810      	ldr	r0, [pc, #64]	@ (8001d28 <MX_TIM4_Init+0xf4>)
 8001ce6:	f003 fe6d 	bl	80059c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8001cf0:	f7ff fc76 	bl	80015e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cf4:	2360      	movs	r3, #96	@ 0x60
 8001cf6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	220c      	movs	r2, #12
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4807      	ldr	r0, [pc, #28]	@ (8001d28 <MX_TIM4_Init+0xf4>)
 8001d0c:	f003 f98e 	bl	800502c <HAL_TIM_PWM_ConfigChannel>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8001d16:	f7ff fc63 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d1a:	4803      	ldr	r0, [pc, #12]	@ (8001d28 <MX_TIM4_Init+0xf4>)
 8001d1c:	f000 f8b4 	bl	8001e88 <HAL_TIM_MspPostInit>

}
 8001d20:	bf00      	nop
 8001d22:	3750      	adds	r7, #80	@ 0x50
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20001624 	.word	0x20001624
 8001d2c:	40000800 	.word	0x40000800

08001d30 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08c      	sub	sp, #48	@ 0x30
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 031c 	add.w	r3, r7, #28
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a2a      	ldr	r2, [pc, #168]	@ (8001df8 <HAL_TIM_PWM_MspInit+0xc8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d10c      	bne.n	8001d6c <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d52:	4b2a      	ldr	r3, [pc, #168]	@ (8001dfc <HAL_TIM_PWM_MspInit+0xcc>)
 8001d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d56:	4a29      	ldr	r2, [pc, #164]	@ (8001dfc <HAL_TIM_PWM_MspInit+0xcc>)
 8001d58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d5e:	4b27      	ldr	r3, [pc, #156]	@ (8001dfc <HAL_TIM_PWM_MspInit+0xcc>)
 8001d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001d6a:	e040      	b.n	8001dee <HAL_TIM_PWM_MspInit+0xbe>
  else if(tim_pwmHandle->Instance==TIM2)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d74:	d10c      	bne.n	8001d90 <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d76:	4b21      	ldr	r3, [pc, #132]	@ (8001dfc <HAL_TIM_PWM_MspInit+0xcc>)
 8001d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d7a:	4a20      	ldr	r2, [pc, #128]	@ (8001dfc <HAL_TIM_PWM_MspInit+0xcc>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d82:	4b1e      	ldr	r3, [pc, #120]	@ (8001dfc <HAL_TIM_PWM_MspInit+0xcc>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	697b      	ldr	r3, [r7, #20]
}
 8001d8e:	e02e      	b.n	8001dee <HAL_TIM_PWM_MspInit+0xbe>
  else if(tim_pwmHandle->Instance==TIM4)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a1a      	ldr	r2, [pc, #104]	@ (8001e00 <HAL_TIM_PWM_MspInit+0xd0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d129      	bne.n	8001dee <HAL_TIM_PWM_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d9a:	4b18      	ldr	r3, [pc, #96]	@ (8001dfc <HAL_TIM_PWM_MspInit+0xcc>)
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9e:	4a17      	ldr	r2, [pc, #92]	@ (8001dfc <HAL_TIM_PWM_MspInit+0xcc>)
 8001da0:	f043 0304 	orr.w	r3, r3, #4
 8001da4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001da6:	4b15      	ldr	r3, [pc, #84]	@ (8001dfc <HAL_TIM_PWM_MspInit+0xcc>)
 8001da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db2:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <HAL_TIM_PWM_MspInit+0xcc>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db6:	4a11      	ldr	r2, [pc, #68]	@ (8001dfc <HAL_TIM_PWM_MspInit+0xcc>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001dfc <HAL_TIM_PWM_MspInit+0xcc>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001dca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001ddc:	230a      	movs	r3, #10
 8001dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de0:	f107 031c 	add.w	r3, r7, #28
 8001de4:	4619      	mov	r1, r3
 8001de6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dea:	f000 fe6b 	bl	8002ac4 <HAL_GPIO_Init>
}
 8001dee:	bf00      	nop
 8001df0:	3730      	adds	r7, #48	@ 0x30
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40012c00 	.word	0x40012c00
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40000800 	.word	0x40000800

08001e04 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	@ 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a17      	ldr	r2, [pc, #92]	@ (8001e80 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d128      	bne.n	8001e78 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e26:	4b17      	ldr	r3, [pc, #92]	@ (8001e84 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2a:	4a16      	ldr	r2, [pc, #88]	@ (8001e84 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e32:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e42:	4a10      	ldr	r2, [pc, #64]	@ (8001e84 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001e56:	2350      	movs	r3, #80	@ 0x50
 8001e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	2300      	movs	r3, #0
 8001e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e66:	2302      	movs	r3, #2
 8001e68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 0314 	add.w	r3, r7, #20
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e74:	f000 fe26 	bl	8002ac4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e78:	bf00      	nop
 8001e7a:	3728      	adds	r7, #40	@ 0x28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40000400 	.word	0x40000400
 8001e84:	40021000 	.word	0x40021000

08001e88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	@ 0x28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a35      	ldr	r2, [pc, #212]	@ (8001f7c <HAL_TIM_MspPostInit+0xf4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d11e      	bne.n	8001ee8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eaa:	4b35      	ldr	r3, [pc, #212]	@ (8001f80 <HAL_TIM_MspPostInit+0xf8>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eae:	4a34      	ldr	r2, [pc, #208]	@ (8001f80 <HAL_TIM_MspPostInit+0xf8>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eb6:	4b32      	ldr	r3, [pc, #200]	@ (8001f80 <HAL_TIM_MspPostInit+0xf8>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ec2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ed4:	2306      	movs	r3, #6
 8001ed6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4619      	mov	r1, r3
 8001ede:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ee2:	f000 fdef 	bl	8002ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ee6:	e044      	b.n	8001f72 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ef0:	d11d      	bne.n	8001f2e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef2:	4b23      	ldr	r3, [pc, #140]	@ (8001f80 <HAL_TIM_MspPostInit+0xf8>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef6:	4a22      	ldr	r2, [pc, #136]	@ (8001f80 <HAL_TIM_MspPostInit+0xf8>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001efe:	4b20      	ldr	r3, [pc, #128]	@ (8001f80 <HAL_TIM_MspPostInit+0xf8>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1e:	f107 0314 	add.w	r3, r7, #20
 8001f22:	4619      	mov	r1, r3
 8001f24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f28:	f000 fdcc 	bl	8002ac4 <HAL_GPIO_Init>
}
 8001f2c:	e021      	b.n	8001f72 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM4)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a14      	ldr	r2, [pc, #80]	@ (8001f84 <HAL_TIM_MspPostInit+0xfc>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d11c      	bne.n	8001f72 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <HAL_TIM_MspPostInit+0xf8>)
 8001f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3c:	4a10      	ldr	r2, [pc, #64]	@ (8001f80 <HAL_TIM_MspPostInit+0xf8>)
 8001f3e:	f043 0302 	orr.w	r3, r3, #2
 8001f42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f44:	4b0e      	ldr	r3, [pc, #56]	@ (8001f80 <HAL_TIM_MspPostInit+0xf8>)
 8001f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM4_CH4_M_SCTR_LIDAR_Pin;
 8001f50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f62:	2302      	movs	r3, #2
 8001f64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM4_CH4_M_SCTR_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8001f66:	f107 0314 	add.w	r3, r7, #20
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4806      	ldr	r0, [pc, #24]	@ (8001f88 <HAL_TIM_MspPostInit+0x100>)
 8001f6e:	f000 fda9 	bl	8002ac4 <HAL_GPIO_Init>
}
 8001f72:	bf00      	nop
 8001f74:	3728      	adds	r7, #40	@ 0x28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40012c00 	.word	0x40012c00
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40000800 	.word	0x40000800
 8001f88:	48000400 	.word	0x48000400

08001f8c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f90:	4b22      	ldr	r3, [pc, #136]	@ (800201c <MX_USART2_UART_Init+0x90>)
 8001f92:	4a23      	ldr	r2, [pc, #140]	@ (8002020 <MX_USART2_UART_Init+0x94>)
 8001f94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f96:	4b21      	ldr	r3, [pc, #132]	@ (800201c <MX_USART2_UART_Init+0x90>)
 8001f98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800201c <MX_USART2_UART_Init+0x90>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800201c <MX_USART2_UART_Init+0x90>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001faa:	4b1c      	ldr	r3, [pc, #112]	@ (800201c <MX_USART2_UART_Init+0x90>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800201c <MX_USART2_UART_Init+0x90>)
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb6:	4b19      	ldr	r3, [pc, #100]	@ (800201c <MX_USART2_UART_Init+0x90>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fbc:	4b17      	ldr	r3, [pc, #92]	@ (800201c <MX_USART2_UART_Init+0x90>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fc2:	4b16      	ldr	r3, [pc, #88]	@ (800201c <MX_USART2_UART_Init+0x90>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fc8:	4b14      	ldr	r3, [pc, #80]	@ (800201c <MX_USART2_UART_Init+0x90>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fce:	4b13      	ldr	r3, [pc, #76]	@ (800201c <MX_USART2_UART_Init+0x90>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fd4:	4811      	ldr	r0, [pc, #68]	@ (800201c <MX_USART2_UART_Init+0x90>)
 8001fd6:	f003 fe03 	bl	8005be0 <HAL_UART_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001fe0:	f7ff fafe 	bl	80015e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	480d      	ldr	r0, [pc, #52]	@ (800201c <MX_USART2_UART_Init+0x90>)
 8001fe8:	f004 fe4f 	bl	8006c8a <HAL_UARTEx_SetTxFifoThreshold>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001ff2:	f7ff faf5 	bl	80015e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4808      	ldr	r0, [pc, #32]	@ (800201c <MX_USART2_UART_Init+0x90>)
 8001ffa:	f004 fe84 	bl	8006d06 <HAL_UARTEx_SetRxFifoThreshold>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002004:	f7ff faec 	bl	80015e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002008:	4804      	ldr	r0, [pc, #16]	@ (800201c <MX_USART2_UART_Init+0x90>)
 800200a:	f004 fe05 	bl	8006c18 <HAL_UARTEx_DisableFifoMode>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002014:	f7ff fae4 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20001670 	.word	0x20001670
 8002020:	40004400 	.word	0x40004400

08002024 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002028:	4b22      	ldr	r3, [pc, #136]	@ (80020b4 <MX_USART3_UART_Init+0x90>)
 800202a:	4a23      	ldr	r2, [pc, #140]	@ (80020b8 <MX_USART3_UART_Init+0x94>)
 800202c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 128000;
 800202e:	4b21      	ldr	r3, [pc, #132]	@ (80020b4 <MX_USART3_UART_Init+0x90>)
 8002030:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8002034:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002036:	4b1f      	ldr	r3, [pc, #124]	@ (80020b4 <MX_USART3_UART_Init+0x90>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800203c:	4b1d      	ldr	r3, [pc, #116]	@ (80020b4 <MX_USART3_UART_Init+0x90>)
 800203e:	2200      	movs	r2, #0
 8002040:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002042:	4b1c      	ldr	r3, [pc, #112]	@ (80020b4 <MX_USART3_UART_Init+0x90>)
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002048:	4b1a      	ldr	r3, [pc, #104]	@ (80020b4 <MX_USART3_UART_Init+0x90>)
 800204a:	220c      	movs	r2, #12
 800204c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204e:	4b19      	ldr	r3, [pc, #100]	@ (80020b4 <MX_USART3_UART_Init+0x90>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002054:	4b17      	ldr	r3, [pc, #92]	@ (80020b4 <MX_USART3_UART_Init+0x90>)
 8002056:	2200      	movs	r2, #0
 8002058:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800205a:	4b16      	ldr	r3, [pc, #88]	@ (80020b4 <MX_USART3_UART_Init+0x90>)
 800205c:	2200      	movs	r2, #0
 800205e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002060:	4b14      	ldr	r3, [pc, #80]	@ (80020b4 <MX_USART3_UART_Init+0x90>)
 8002062:	2200      	movs	r2, #0
 8002064:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002066:	4b13      	ldr	r3, [pc, #76]	@ (80020b4 <MX_USART3_UART_Init+0x90>)
 8002068:	2200      	movs	r2, #0
 800206a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800206c:	4811      	ldr	r0, [pc, #68]	@ (80020b4 <MX_USART3_UART_Init+0x90>)
 800206e:	f003 fdb7 	bl	8005be0 <HAL_UART_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002078:	f7ff fab2 	bl	80015e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800207c:	2100      	movs	r1, #0
 800207e:	480d      	ldr	r0, [pc, #52]	@ (80020b4 <MX_USART3_UART_Init+0x90>)
 8002080:	f004 fe03 	bl	8006c8a <HAL_UARTEx_SetTxFifoThreshold>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800208a:	f7ff faa9 	bl	80015e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800208e:	2100      	movs	r1, #0
 8002090:	4808      	ldr	r0, [pc, #32]	@ (80020b4 <MX_USART3_UART_Init+0x90>)
 8002092:	f004 fe38 	bl	8006d06 <HAL_UARTEx_SetRxFifoThreshold>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800209c:	f7ff faa0 	bl	80015e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80020a0:	4804      	ldr	r0, [pc, #16]	@ (80020b4 <MX_USART3_UART_Init+0x90>)
 80020a2:	f004 fdb9 	bl	8006c18 <HAL_UARTEx_DisableFifoMode>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80020ac:	f7ff fa98 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20001704 	.word	0x20001704
 80020b8:	40004800 	.word	0x40004800

080020bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b09c      	sub	sp, #112	@ 0x70
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020d4:	f107 0318 	add.w	r3, r7, #24
 80020d8:	2244      	movs	r2, #68	@ 0x44
 80020da:	2100      	movs	r1, #0
 80020dc:	4618      	mov	r0, r3
 80020de:	f007 fd05 	bl	8009aec <memset>
  if(uartHandle->Instance==USART2)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a52      	ldr	r2, [pc, #328]	@ (8002230 <HAL_UART_MspInit+0x174>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d137      	bne.n	800215c <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020ec:	2302      	movs	r3, #2
 80020ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020f0:	2300      	movs	r3, #0
 80020f2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020f4:	f107 0318 	add.w	r3, r7, #24
 80020f8:	4618      	mov	r0, r3
 80020fa:	f001 fc73 	bl	80039e4 <HAL_RCCEx_PeriphCLKConfig>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002104:	f7ff fa6c 	bl	80015e0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002108:	4b4a      	ldr	r3, [pc, #296]	@ (8002234 <HAL_UART_MspInit+0x178>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210c:	4a49      	ldr	r2, [pc, #292]	@ (8002234 <HAL_UART_MspInit+0x178>)
 800210e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002112:	6593      	str	r3, [r2, #88]	@ 0x58
 8002114:	4b47      	ldr	r3, [pc, #284]	@ (8002234 <HAL_UART_MspInit+0x178>)
 8002116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002120:	4b44      	ldr	r3, [pc, #272]	@ (8002234 <HAL_UART_MspInit+0x178>)
 8002122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002124:	4a43      	ldr	r2, [pc, #268]	@ (8002234 <HAL_UART_MspInit+0x178>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800212c:	4b41      	ldr	r3, [pc, #260]	@ (8002234 <HAL_UART_MspInit+0x178>)
 800212e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002138:	230c      	movs	r3, #12
 800213a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	2300      	movs	r3, #0
 8002146:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002148:	2307      	movs	r3, #7
 800214a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002150:	4619      	mov	r1, r3
 8002152:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002156:	f000 fcb5 	bl	8002ac4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800215a:	e065      	b.n	8002228 <HAL_UART_MspInit+0x16c>
  else if(uartHandle->Instance==USART3)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a35      	ldr	r2, [pc, #212]	@ (8002238 <HAL_UART_MspInit+0x17c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d160      	bne.n	8002228 <HAL_UART_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002166:	2304      	movs	r3, #4
 8002168:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800216a:	2300      	movs	r3, #0
 800216c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800216e:	f107 0318 	add.w	r3, r7, #24
 8002172:	4618      	mov	r0, r3
 8002174:	f001 fc36 	bl	80039e4 <HAL_RCCEx_PeriphCLKConfig>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800217e:	f7ff fa2f 	bl	80015e0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002182:	4b2c      	ldr	r3, [pc, #176]	@ (8002234 <HAL_UART_MspInit+0x178>)
 8002184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002186:	4a2b      	ldr	r2, [pc, #172]	@ (8002234 <HAL_UART_MspInit+0x178>)
 8002188:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800218c:	6593      	str	r3, [r2, #88]	@ 0x58
 800218e:	4b29      	ldr	r3, [pc, #164]	@ (8002234 <HAL_UART_MspInit+0x178>)
 8002190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002192:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219a:	4b26      	ldr	r3, [pc, #152]	@ (8002234 <HAL_UART_MspInit+0x178>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219e:	4a25      	ldr	r2, [pc, #148]	@ (8002234 <HAL_UART_MspInit+0x178>)
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021a6:	4b23      	ldr	r3, [pc, #140]	@ (8002234 <HAL_UART_MspInit+0x178>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_TX_LIDAR_Pin|USART3_RX_LIDAR_Pin;
 80021b2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80021b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2300      	movs	r3, #0
 80021c2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021c4:	2307      	movs	r3, #7
 80021c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80021cc:	4619      	mov	r1, r3
 80021ce:	481b      	ldr	r0, [pc, #108]	@ (800223c <HAL_UART_MspInit+0x180>)
 80021d0:	f000 fc78 	bl	8002ac4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 80021d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002240 <HAL_UART_MspInit+0x184>)
 80021d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002244 <HAL_UART_MspInit+0x188>)
 80021d8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80021da:	4b19      	ldr	r3, [pc, #100]	@ (8002240 <HAL_UART_MspInit+0x184>)
 80021dc:	221c      	movs	r2, #28
 80021de:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021e0:	4b17      	ldr	r3, [pc, #92]	@ (8002240 <HAL_UART_MspInit+0x184>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e6:	4b16      	ldr	r3, [pc, #88]	@ (8002240 <HAL_UART_MspInit+0x184>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021ec:	4b14      	ldr	r3, [pc, #80]	@ (8002240 <HAL_UART_MspInit+0x184>)
 80021ee:	2280      	movs	r2, #128	@ 0x80
 80021f0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021f2:	4b13      	ldr	r3, [pc, #76]	@ (8002240 <HAL_UART_MspInit+0x184>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021f8:	4b11      	ldr	r3, [pc, #68]	@ (8002240 <HAL_UART_MspInit+0x184>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80021fe:	4b10      	ldr	r3, [pc, #64]	@ (8002240 <HAL_UART_MspInit+0x184>)
 8002200:	2220      	movs	r2, #32
 8002202:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002204:	4b0e      	ldr	r3, [pc, #56]	@ (8002240 <HAL_UART_MspInit+0x184>)
 8002206:	2200      	movs	r2, #0
 8002208:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800220a:	480d      	ldr	r0, [pc, #52]	@ (8002240 <HAL_UART_MspInit+0x184>)
 800220c:	f000 f9e8 	bl	80025e0 <HAL_DMA_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_UART_MspInit+0x15e>
      Error_Handler();
 8002216:	f7ff f9e3 	bl	80015e0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a08      	ldr	r2, [pc, #32]	@ (8002240 <HAL_UART_MspInit+0x184>)
 800221e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002222:	4a07      	ldr	r2, [pc, #28]	@ (8002240 <HAL_UART_MspInit+0x184>)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002228:	bf00      	nop
 800222a:	3770      	adds	r7, #112	@ 0x70
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40004400 	.word	0x40004400
 8002234:	40021000 	.word	0x40021000
 8002238:	40004800 	.word	0x40004800
 800223c:	48000400 	.word	0x48000400
 8002240:	20001798 	.word	0x20001798
 8002244:	40020008 	.word	0x40020008

08002248 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002248:	480d      	ldr	r0, [pc, #52]	@ (8002280 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800224a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800224c:	f7ff fb88 	bl	8001960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002250:	480c      	ldr	r0, [pc, #48]	@ (8002284 <LoopForever+0x6>)
  ldr r1, =_edata
 8002252:	490d      	ldr	r1, [pc, #52]	@ (8002288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002254:	4a0d      	ldr	r2, [pc, #52]	@ (800228c <LoopForever+0xe>)
  movs r3, #0
 8002256:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002258:	e002      	b.n	8002260 <LoopCopyDataInit>

0800225a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800225a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800225c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225e:	3304      	adds	r3, #4

08002260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002264:	d3f9      	bcc.n	800225a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002266:	4a0a      	ldr	r2, [pc, #40]	@ (8002290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002268:	4c0a      	ldr	r4, [pc, #40]	@ (8002294 <LoopForever+0x16>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800226c:	e001      	b.n	8002272 <LoopFillZerobss>

0800226e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002270:	3204      	adds	r2, #4

08002272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002274:	d3fb      	bcc.n	800226e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002276:	f007 fc91 	bl	8009b9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800227a:	f7ff f85d 	bl	8001338 <main>

0800227e <LoopForever>:

LoopForever:
    b LoopForever
 800227e:	e7fe      	b.n	800227e <LoopForever>
  ldr   r0, =_estack
 8002280:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002288:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800228c:	0800d728 	.word	0x0800d728
  ldr r2, =_sbss
 8002290:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002294:	200041ac 	.word	0x200041ac

08002298 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002298:	e7fe      	b.n	8002298 <ADC1_2_IRQHandler>

0800229a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a4:	2003      	movs	r0, #3
 80022a6:	f000 f95b 	bl	8002560 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022aa:	200f      	movs	r0, #15
 80022ac:	f000 f80e 	bl	80022cc <HAL_InitTick>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	71fb      	strb	r3, [r7, #7]
 80022ba:	e001      	b.n	80022c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022bc:	f7ff fa18 	bl	80016f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022c0:	79fb      	ldrb	r3, [r7, #7]

}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80022d8:	4b16      	ldr	r3, [pc, #88]	@ (8002334 <HAL_InitTick+0x68>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d022      	beq.n	8002326 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80022e0:	4b15      	ldr	r3, [pc, #84]	@ (8002338 <HAL_InitTick+0x6c>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4b13      	ldr	r3, [pc, #76]	@ (8002334 <HAL_InitTick+0x68>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80022ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80022f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 f966 	bl	80025c6 <HAL_SYSTICK_Config>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10f      	bne.n	8002320 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b0f      	cmp	r3, #15
 8002304:	d809      	bhi.n	800231a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002306:	2200      	movs	r2, #0
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	f04f 30ff 	mov.w	r0, #4294967295
 800230e:	f000 f932 	bl	8002576 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002312:	4a0a      	ldr	r2, [pc, #40]	@ (800233c <HAL_InitTick+0x70>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	e007      	b.n	800232a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	73fb      	strb	r3, [r7, #15]
 800231e:	e004      	b.n	800232a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
 8002324:	e001      	b.n	800232a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800232a:	7bfb      	ldrb	r3, [r7, #15]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000008 	.word	0x20000008
 8002338:	20000000 	.word	0x20000000
 800233c:	20000004 	.word	0x20000004

08002340 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002344:	4b05      	ldr	r3, [pc, #20]	@ (800235c <HAL_IncTick+0x1c>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4b05      	ldr	r3, [pc, #20]	@ (8002360 <HAL_IncTick+0x20>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4413      	add	r3, r2
 800234e:	4a03      	ldr	r2, [pc, #12]	@ (800235c <HAL_IncTick+0x1c>)
 8002350:	6013      	str	r3, [r2, #0]
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	200017f8 	.word	0x200017f8
 8002360:	20000008 	.word	0x20000008

08002364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return uwTick;
 8002368:	4b03      	ldr	r3, [pc, #12]	@ (8002378 <HAL_GetTick+0x14>)
 800236a:	681b      	ldr	r3, [r3, #0]
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	200017f8 	.word	0x200017f8

0800237c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002384:	f7ff ffee 	bl	8002364 <HAL_GetTick>
 8002388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002394:	d004      	beq.n	80023a0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002396:	4b09      	ldr	r3, [pc, #36]	@ (80023bc <HAL_Delay+0x40>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	4413      	add	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023a0:	bf00      	nop
 80023a2:	f7ff ffdf 	bl	8002364 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d8f7      	bhi.n	80023a2 <HAL_Delay+0x26>
  {
  }
}
 80023b2:	bf00      	nop
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000008 	.word	0x20000008

080023c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002404 <__NVIC_SetPriorityGrouping+0x44>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023dc:	4013      	ands	r3, r2
 80023de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023f2:	4a04      	ldr	r2, [pc, #16]	@ (8002404 <__NVIC_SetPriorityGrouping+0x44>)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	60d3      	str	r3, [r2, #12]
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800240c:	4b04      	ldr	r3, [pc, #16]	@ (8002420 <__NVIC_GetPriorityGrouping+0x18>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	0a1b      	lsrs	r3, r3, #8
 8002412:	f003 0307 	and.w	r3, r3, #7
}
 8002416:	4618      	mov	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	2b00      	cmp	r3, #0
 8002434:	db0b      	blt.n	800244e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	f003 021f 	and.w	r2, r3, #31
 800243c:	4907      	ldr	r1, [pc, #28]	@ (800245c <__NVIC_EnableIRQ+0x38>)
 800243e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002442:	095b      	lsrs	r3, r3, #5
 8002444:	2001      	movs	r0, #1
 8002446:	fa00 f202 	lsl.w	r2, r0, r2
 800244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000e100 	.word	0xe000e100

08002460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	6039      	str	r1, [r7, #0]
 800246a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002470:	2b00      	cmp	r3, #0
 8002472:	db0a      	blt.n	800248a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	490c      	ldr	r1, [pc, #48]	@ (80024ac <__NVIC_SetPriority+0x4c>)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	0112      	lsls	r2, r2, #4
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	440b      	add	r3, r1
 8002484:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002488:	e00a      	b.n	80024a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4908      	ldr	r1, [pc, #32]	@ (80024b0 <__NVIC_SetPriority+0x50>)
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	3b04      	subs	r3, #4
 8002498:	0112      	lsls	r2, r2, #4
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	440b      	add	r3, r1
 800249e:	761a      	strb	r2, [r3, #24]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000e100 	.word	0xe000e100
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	@ 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f1c3 0307 	rsb	r3, r3, #7
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	bf28      	it	cs
 80024d2:	2304      	movcs	r3, #4
 80024d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3304      	adds	r3, #4
 80024da:	2b06      	cmp	r3, #6
 80024dc:	d902      	bls.n	80024e4 <NVIC_EncodePriority+0x30>
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3b03      	subs	r3, #3
 80024e2:	e000      	b.n	80024e6 <NVIC_EncodePriority+0x32>
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43da      	mvns	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	401a      	ands	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	43d9      	mvns	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	4313      	orrs	r3, r2
         );
}
 800250e:	4618      	mov	r0, r3
 8002510:	3724      	adds	r7, #36	@ 0x24
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3b01      	subs	r3, #1
 8002528:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800252c:	d301      	bcc.n	8002532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800252e:	2301      	movs	r3, #1
 8002530:	e00f      	b.n	8002552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002532:	4a0a      	ldr	r2, [pc, #40]	@ (800255c <SysTick_Config+0x40>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3b01      	subs	r3, #1
 8002538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800253a:	210f      	movs	r1, #15
 800253c:	f04f 30ff 	mov.w	r0, #4294967295
 8002540:	f7ff ff8e 	bl	8002460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002544:	4b05      	ldr	r3, [pc, #20]	@ (800255c <SysTick_Config+0x40>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800254a:	4b04      	ldr	r3, [pc, #16]	@ (800255c <SysTick_Config+0x40>)
 800254c:	2207      	movs	r2, #7
 800254e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	e000e010 	.word	0xe000e010

08002560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff ff29 	bl	80023c0 <__NVIC_SetPriorityGrouping>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002584:	f7ff ff40 	bl	8002408 <__NVIC_GetPriorityGrouping>
 8002588:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	6978      	ldr	r0, [r7, #20]
 8002590:	f7ff ff90 	bl	80024b4 <NVIC_EncodePriority>
 8002594:	4602      	mov	r2, r0
 8002596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff5f 	bl	8002460 <__NVIC_SetPriority>
}
 80025a2:	bf00      	nop
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	4603      	mov	r3, r0
 80025b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff33 	bl	8002424 <__NVIC_EnableIRQ>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff ffa4 	bl	800251c <SysTick_Config>
 80025d4:	4603      	mov	r3, r0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e08d      	b.n	800270e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	4b47      	ldr	r3, [pc, #284]	@ (8002718 <HAL_DMA_Init+0x138>)
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d80f      	bhi.n	800261e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	4b45      	ldr	r3, [pc, #276]	@ (800271c <HAL_DMA_Init+0x13c>)
 8002606:	4413      	add	r3, r2
 8002608:	4a45      	ldr	r2, [pc, #276]	@ (8002720 <HAL_DMA_Init+0x140>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	091b      	lsrs	r3, r3, #4
 8002610:	009a      	lsls	r2, r3, #2
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a42      	ldr	r2, [pc, #264]	@ (8002724 <HAL_DMA_Init+0x144>)
 800261a:	641a      	str	r2, [r3, #64]	@ 0x40
 800261c:	e00e      	b.n	800263c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	4b40      	ldr	r3, [pc, #256]	@ (8002728 <HAL_DMA_Init+0x148>)
 8002626:	4413      	add	r3, r2
 8002628:	4a3d      	ldr	r2, [pc, #244]	@ (8002720 <HAL_DMA_Init+0x140>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	009a      	lsls	r2, r3, #2
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a3c      	ldr	r2, [pc, #240]	@ (800272c <HAL_DMA_Init+0x14c>)
 800263a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2202      	movs	r2, #2
 8002640:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002656:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002660:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800266c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002678:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f9b6 	bl	8002a00 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800269c:	d102      	bne.n	80026a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80026b8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d010      	beq.n	80026e4 <HAL_DMA_Init+0x104>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d80c      	bhi.n	80026e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f9d6 	bl	8002a7c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	e008      	b.n	80026f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40020407 	.word	0x40020407
 800271c:	bffdfff8 	.word	0xbffdfff8
 8002720:	cccccccd 	.word	0xcccccccd
 8002724:	40020000 	.word	0x40020000
 8002728:	bffdfbf8 	.word	0xbffdfbf8
 800272c:	40020400 	.word	0x40020400

08002730 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_DMA_Start_IT+0x20>
 800274c:	2302      	movs	r3, #2
 800274e:	e066      	b.n	800281e <HAL_DMA_Start_IT+0xee>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b01      	cmp	r3, #1
 8002762:	d155      	bne.n	8002810 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0201 	bic.w	r2, r2, #1
 8002780:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	68b9      	ldr	r1, [r7, #8]
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f8fb 	bl	8002984 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	2b00      	cmp	r3, #0
 8002794:	d008      	beq.n	80027a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 020e 	orr.w	r2, r2, #14
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	e00f      	b.n	80027c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0204 	bic.w	r2, r2, #4
 80027b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 020a 	orr.w	r2, r2, #10
 80027c6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d007      	beq.n	80027e6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027e4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d007      	beq.n	80027fe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027fc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 0201 	orr.w	r2, r2, #1
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	e005      	b.n	800281c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002818:	2302      	movs	r3, #2
 800281a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800281c:	7dfb      	ldrb	r3, [r7, #23]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b084      	sub	sp, #16
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	2204      	movs	r2, #4
 8002848:	409a      	lsls	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4013      	ands	r3, r2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d026      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x7a>
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d021      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0320 	and.w	r3, r3, #32
 8002866:	2b00      	cmp	r3, #0
 8002868:	d107      	bne.n	800287a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0204 	bic.w	r2, r2, #4
 8002878:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287e:	f003 021f 	and.w	r2, r3, #31
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002886:	2104      	movs	r1, #4
 8002888:	fa01 f202 	lsl.w	r2, r1, r2
 800288c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002892:	2b00      	cmp	r3, #0
 8002894:	d071      	beq.n	800297a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800289e:	e06c      	b.n	800297a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	2202      	movs	r2, #2
 80028aa:	409a      	lsls	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d02e      	beq.n	8002912 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d029      	beq.n	8002912 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0320 	and.w	r3, r3, #32
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10b      	bne.n	80028e4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 020a 	bic.w	r2, r2, #10
 80028da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f0:	2102      	movs	r1, #2
 80028f2:	fa01 f202 	lsl.w	r2, r1, r2
 80028f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002904:	2b00      	cmp	r3, #0
 8002906:	d038      	beq.n	800297a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002910:	e033      	b.n	800297a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002916:	f003 031f 	and.w	r3, r3, #31
 800291a:	2208      	movs	r2, #8
 800291c:	409a      	lsls	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	4013      	ands	r3, r2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d02a      	beq.n	800297c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d025      	beq.n	800297c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 020e 	bic.w	r2, r2, #14
 800293e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002944:	f003 021f 	and.w	r2, r3, #31
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294c:	2101      	movs	r1, #1
 800294e:	fa01 f202 	lsl.w	r2, r1, r2
 8002952:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800296e:	2b00      	cmp	r3, #0
 8002970:	d004      	beq.n	800297c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800297a:	bf00      	nop
 800297c:	bf00      	nop
}
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
 8002990:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800299a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d004      	beq.n	80029ae <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80029ac:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b2:	f003 021f 	and.w	r2, r3, #31
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	2101      	movs	r1, #1
 80029bc:	fa01 f202 	lsl.w	r2, r1, r2
 80029c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b10      	cmp	r3, #16
 80029d0:	d108      	bne.n	80029e4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029e2:	e007      	b.n	80029f4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	60da      	str	r2, [r3, #12]
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b16      	ldr	r3, [pc, #88]	@ (8002a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d802      	bhi.n	8002a1a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002a14:	4b15      	ldr	r3, [pc, #84]	@ (8002a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	e001      	b.n	8002a1e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002a1a:	4b15      	ldr	r3, [pc, #84]	@ (8002a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002a1c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	3b08      	subs	r3, #8
 8002a2a:	4a12      	ldr	r2, [pc, #72]	@ (8002a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a38:	089b      	lsrs	r3, r3, #2
 8002a3a:	009a      	lsls	r2, r3, #2
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4413      	add	r3, r2
 8002a40:	461a      	mov	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a0b      	ldr	r2, [pc, #44]	@ (8002a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002a4a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	2201      	movs	r2, #1
 8002a54:	409a      	lsls	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002a5a:	bf00      	nop
 8002a5c:	371c      	adds	r7, #28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40020407 	.word	0x40020407
 8002a6c:	40020800 	.word	0x40020800
 8002a70:	40020820 	.word	0x40020820
 8002a74:	cccccccd 	.word	0xcccccccd
 8002a78:	40020880 	.word	0x40020880

08002a7c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	461a      	mov	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a08      	ldr	r2, [pc, #32]	@ (8002ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002a9e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	1000823f 	.word	0x1000823f
 8002ac0:	40020940 	.word	0x40020940

08002ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ad2:	e15a      	b.n	8002d8a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	2101      	movs	r1, #1
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 814c 	beq.w	8002d84 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d005      	beq.n	8002b04 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d130      	bne.n	8002b66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	2203      	movs	r2, #3
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43db      	mvns	r3, r3
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4013      	ands	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	091b      	lsrs	r3, r3, #4
 8002b50:	f003 0201 	and.w	r2, r3, #1
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d017      	beq.n	8002ba2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d123      	bne.n	8002bf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	08da      	lsrs	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3208      	adds	r2, #8
 8002bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	220f      	movs	r2, #15
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	08da      	lsrs	r2, r3, #3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3208      	adds	r2, #8
 8002bf0:	6939      	ldr	r1, [r7, #16]
 8002bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	2203      	movs	r2, #3
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 0203 	and.w	r2, r3, #3
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 80a6 	beq.w	8002d84 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c38:	4b5b      	ldr	r3, [pc, #364]	@ (8002da8 <HAL_GPIO_Init+0x2e4>)
 8002c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c3c:	4a5a      	ldr	r2, [pc, #360]	@ (8002da8 <HAL_GPIO_Init+0x2e4>)
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c44:	4b58      	ldr	r3, [pc, #352]	@ (8002da8 <HAL_GPIO_Init+0x2e4>)
 8002c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c50:	4a56      	ldr	r2, [pc, #344]	@ (8002dac <HAL_GPIO_Init+0x2e8>)
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	089b      	lsrs	r3, r3, #2
 8002c56:	3302      	adds	r3, #2
 8002c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	220f      	movs	r2, #15
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c7a:	d01f      	beq.n	8002cbc <HAL_GPIO_Init+0x1f8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a4c      	ldr	r2, [pc, #304]	@ (8002db0 <HAL_GPIO_Init+0x2ec>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d019      	beq.n	8002cb8 <HAL_GPIO_Init+0x1f4>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a4b      	ldr	r2, [pc, #300]	@ (8002db4 <HAL_GPIO_Init+0x2f0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d013      	beq.n	8002cb4 <HAL_GPIO_Init+0x1f0>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a4a      	ldr	r2, [pc, #296]	@ (8002db8 <HAL_GPIO_Init+0x2f4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00d      	beq.n	8002cb0 <HAL_GPIO_Init+0x1ec>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a49      	ldr	r2, [pc, #292]	@ (8002dbc <HAL_GPIO_Init+0x2f8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d007      	beq.n	8002cac <HAL_GPIO_Init+0x1e8>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a48      	ldr	r2, [pc, #288]	@ (8002dc0 <HAL_GPIO_Init+0x2fc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d101      	bne.n	8002ca8 <HAL_GPIO_Init+0x1e4>
 8002ca4:	2305      	movs	r3, #5
 8002ca6:	e00a      	b.n	8002cbe <HAL_GPIO_Init+0x1fa>
 8002ca8:	2306      	movs	r3, #6
 8002caa:	e008      	b.n	8002cbe <HAL_GPIO_Init+0x1fa>
 8002cac:	2304      	movs	r3, #4
 8002cae:	e006      	b.n	8002cbe <HAL_GPIO_Init+0x1fa>
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e004      	b.n	8002cbe <HAL_GPIO_Init+0x1fa>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e002      	b.n	8002cbe <HAL_GPIO_Init+0x1fa>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <HAL_GPIO_Init+0x1fa>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	f002 0203 	and.w	r2, r2, #3
 8002cc4:	0092      	lsls	r2, r2, #2
 8002cc6:	4093      	lsls	r3, r2
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cce:	4937      	ldr	r1, [pc, #220]	@ (8002dac <HAL_GPIO_Init+0x2e8>)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	089b      	lsrs	r3, r3, #2
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cdc:	4b39      	ldr	r3, [pc, #228]	@ (8002dc4 <HAL_GPIO_Init+0x300>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d00:	4a30      	ldr	r2, [pc, #192]	@ (8002dc4 <HAL_GPIO_Init+0x300>)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d06:	4b2f      	ldr	r3, [pc, #188]	@ (8002dc4 <HAL_GPIO_Init+0x300>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4013      	ands	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d2a:	4a26      	ldr	r2, [pc, #152]	@ (8002dc4 <HAL_GPIO_Init+0x300>)
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002d30:	4b24      	ldr	r3, [pc, #144]	@ (8002dc4 <HAL_GPIO_Init+0x300>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d54:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc4 <HAL_GPIO_Init+0x300>)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc4 <HAL_GPIO_Init+0x300>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4013      	ands	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d7e:	4a11      	ldr	r2, [pc, #68]	@ (8002dc4 <HAL_GPIO_Init+0x300>)
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	3301      	adds	r3, #1
 8002d88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	fa22 f303 	lsr.w	r3, r2, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f47f ae9d 	bne.w	8002ad4 <HAL_GPIO_Init+0x10>
  }
}
 8002d9a:	bf00      	nop
 8002d9c:	bf00      	nop
 8002d9e:	371c      	adds	r7, #28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40010000 	.word	0x40010000
 8002db0:	48000400 	.word	0x48000400
 8002db4:	48000800 	.word	0x48000800
 8002db8:	48000c00 	.word	0x48000c00
 8002dbc:	48001000 	.word	0x48001000
 8002dc0:	48001400 	.word	0x48001400
 8002dc4:	40010400 	.word	0x40010400

08002dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	807b      	strh	r3, [r7, #2]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dd8:	787b      	ldrb	r3, [r7, #1]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dde:	887a      	ldrh	r2, [r7, #2]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002de4:	e002      	b.n	8002dec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002de6:	887a      	ldrh	r2, [r7, #2]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e02:	4b08      	ldr	r3, [pc, #32]	@ (8002e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d006      	beq.n	8002e1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e0e:	4a05      	ldr	r2, [pc, #20]	@ (8002e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe fb6a 	bl	80014f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40010400 	.word	0x40010400

08002e28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d141      	bne.n	8002eba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e36:	4b4b      	ldr	r3, [pc, #300]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e42:	d131      	bne.n	8002ea8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e44:	4b47      	ldr	r3, [pc, #284]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e4a:	4a46      	ldr	r2, [pc, #280]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e54:	4b43      	ldr	r3, [pc, #268]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e5c:	4a41      	ldr	r2, [pc, #260]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e64:	4b40      	ldr	r3, [pc, #256]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2232      	movs	r2, #50	@ 0x32
 8002e6a:	fb02 f303 	mul.w	r3, r2, r3
 8002e6e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e70:	fba2 2303 	umull	r2, r3, r2, r3
 8002e74:	0c9b      	lsrs	r3, r3, #18
 8002e76:	3301      	adds	r3, #1
 8002e78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e7a:	e002      	b.n	8002e82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e82:	4b38      	ldr	r3, [pc, #224]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e8e:	d102      	bne.n	8002e96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f2      	bne.n	8002e7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e96:	4b33      	ldr	r3, [pc, #204]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ea2:	d158      	bne.n	8002f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e057      	b.n	8002f58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002eae:	4a2d      	ldr	r2, [pc, #180]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002eb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002eb8:	e04d      	b.n	8002f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ec0:	d141      	bne.n	8002f46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ec2:	4b28      	ldr	r3, [pc, #160]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ece:	d131      	bne.n	8002f34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ed0:	4b24      	ldr	r3, [pc, #144]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ed6:	4a23      	ldr	r2, [pc, #140]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002edc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ee0:	4b20      	ldr	r3, [pc, #128]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002eee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2232      	movs	r2, #50	@ 0x32
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	4a1c      	ldr	r2, [pc, #112]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002efc:	fba2 2303 	umull	r2, r3, r2, r3
 8002f00:	0c9b      	lsrs	r3, r3, #18
 8002f02:	3301      	adds	r3, #1
 8002f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f06:	e002      	b.n	8002f0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f0e:	4b15      	ldr	r3, [pc, #84]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f1a:	d102      	bne.n	8002f22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f2      	bne.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f22:	4b10      	ldr	r3, [pc, #64]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f2e:	d112      	bne.n	8002f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e011      	b.n	8002f58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f34:	4b0b      	ldr	r3, [pc, #44]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f44:	e007      	b.n	8002f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f46:	4b07      	ldr	r3, [pc, #28]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f4e:	4a05      	ldr	r2, [pc, #20]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f50:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f54:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	40007000 	.word	0x40007000
 8002f68:	20000000 	.word	0x20000000
 8002f6c:	431bde83 	.word	0x431bde83

08002f70 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002f74:	4b05      	ldr	r3, [pc, #20]	@ (8002f8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	4a04      	ldr	r2, [pc, #16]	@ (8002f8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f7e:	6093      	str	r3, [r2, #8]
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40007000 	.word	0x40007000

08002f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e2fe      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d075      	beq.n	800309a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fae:	4b97      	ldr	r3, [pc, #604]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fb8:	4b94      	ldr	r3, [pc, #592]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	2b0c      	cmp	r3, #12
 8002fc6:	d102      	bne.n	8002fce <HAL_RCC_OscConfig+0x3e>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d002      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x44>
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d10b      	bne.n	8002fec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd4:	4b8d      	ldr	r3, [pc, #564]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d05b      	beq.n	8003098 <HAL_RCC_OscConfig+0x108>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d157      	bne.n	8003098 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e2d9      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ff4:	d106      	bne.n	8003004 <HAL_RCC_OscConfig+0x74>
 8002ff6:	4b85      	ldr	r3, [pc, #532]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a84      	ldr	r2, [pc, #528]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8002ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	e01d      	b.n	8003040 <HAL_RCC_OscConfig+0xb0>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800300c:	d10c      	bne.n	8003028 <HAL_RCC_OscConfig+0x98>
 800300e:	4b7f      	ldr	r3, [pc, #508]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a7e      	ldr	r2, [pc, #504]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8003014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	4b7c      	ldr	r3, [pc, #496]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a7b      	ldr	r2, [pc, #492]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8003020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	e00b      	b.n	8003040 <HAL_RCC_OscConfig+0xb0>
 8003028:	4b78      	ldr	r3, [pc, #480]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a77      	ldr	r2, [pc, #476]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 800302e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	4b75      	ldr	r3, [pc, #468]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a74      	ldr	r2, [pc, #464]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 800303a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800303e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d013      	beq.n	8003070 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003048:	f7ff f98c 	bl	8002364 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003050:	f7ff f988 	bl	8002364 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b64      	cmp	r3, #100	@ 0x64
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e29e      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003062:	4b6a      	ldr	r3, [pc, #424]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f0      	beq.n	8003050 <HAL_RCC_OscConfig+0xc0>
 800306e:	e014      	b.n	800309a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7ff f978 	bl	8002364 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003078:	f7ff f974 	bl	8002364 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b64      	cmp	r3, #100	@ 0x64
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e28a      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800308a:	4b60      	ldr	r3, [pc, #384]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0xe8>
 8003096:	e000      	b.n	800309a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d075      	beq.n	8003192 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030a6:	4b59      	ldr	r3, [pc, #356]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030b0:	4b56      	ldr	r3, [pc, #344]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	2b0c      	cmp	r3, #12
 80030be:	d102      	bne.n	80030c6 <HAL_RCC_OscConfig+0x136>
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d002      	beq.n	80030cc <HAL_RCC_OscConfig+0x13c>
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d11f      	bne.n	800310c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030cc:	4b4f      	ldr	r3, [pc, #316]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_OscConfig+0x154>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e25d      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e4:	4b49      	ldr	r3, [pc, #292]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	061b      	lsls	r3, r3, #24
 80030f2:	4946      	ldr	r1, [pc, #280]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030f8:	4b45      	ldr	r3, [pc, #276]	@ (8003210 <HAL_RCC_OscConfig+0x280>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff f8e5 	bl	80022cc <HAL_InitTick>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d043      	beq.n	8003190 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e249      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d023      	beq.n	800315c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003114:	4b3d      	ldr	r3, [pc, #244]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a3c      	ldr	r2, [pc, #240]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 800311a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800311e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7ff f920 	bl	8002364 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003128:	f7ff f91c 	bl	8002364 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e232      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800313a:	4b34      	ldr	r3, [pc, #208]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003146:	4b31      	ldr	r3, [pc, #196]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	061b      	lsls	r3, r3, #24
 8003154:	492d      	ldr	r1, [pc, #180]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8003156:	4313      	orrs	r3, r2
 8003158:	604b      	str	r3, [r1, #4]
 800315a:	e01a      	b.n	8003192 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800315c:	4b2b      	ldr	r3, [pc, #172]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a2a      	ldr	r2, [pc, #168]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8003162:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003168:	f7ff f8fc 	bl	8002364 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003170:	f7ff f8f8 	bl	8002364 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e20e      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003182:	4b22      	ldr	r3, [pc, #136]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x1e0>
 800318e:	e000      	b.n	8003192 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003190:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d041      	beq.n	8003222 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d01c      	beq.n	80031e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031a6:	4b19      	ldr	r3, [pc, #100]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 80031a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031ac:	4a17      	ldr	r2, [pc, #92]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b6:	f7ff f8d5 	bl	8002364 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031be:	f7ff f8d1 	bl	8002364 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e1e7      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031d0:	4b0e      	ldr	r3, [pc, #56]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 80031d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0ef      	beq.n	80031be <HAL_RCC_OscConfig+0x22e>
 80031de:	e020      	b.n	8003222 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e0:	4b0a      	ldr	r3, [pc, #40]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 80031e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031e6:	4a09      	ldr	r2, [pc, #36]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 80031e8:	f023 0301 	bic.w	r3, r3, #1
 80031ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f0:	f7ff f8b8 	bl	8002364 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031f6:	e00d      	b.n	8003214 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f8:	f7ff f8b4 	bl	8002364 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d906      	bls.n	8003214 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e1ca      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000
 8003210:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003214:	4b8c      	ldr	r3, [pc, #560]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 8003216:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1ea      	bne.n	80031f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 80a6 	beq.w	800337c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003230:	2300      	movs	r3, #0
 8003232:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003234:	4b84      	ldr	r3, [pc, #528]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 8003236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003238:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_RCC_OscConfig+0x2b4>
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <HAL_RCC_OscConfig+0x2b6>
 8003244:	2300      	movs	r3, #0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00d      	beq.n	8003266 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324a:	4b7f      	ldr	r3, [pc, #508]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 800324c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324e:	4a7e      	ldr	r2, [pc, #504]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 8003250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003254:	6593      	str	r3, [r2, #88]	@ 0x58
 8003256:	4b7c      	ldr	r3, [pc, #496]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 8003258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800325a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003262:	2301      	movs	r3, #1
 8003264:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003266:	4b79      	ldr	r3, [pc, #484]	@ (800344c <HAL_RCC_OscConfig+0x4bc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d118      	bne.n	80032a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003272:	4b76      	ldr	r3, [pc, #472]	@ (800344c <HAL_RCC_OscConfig+0x4bc>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a75      	ldr	r2, [pc, #468]	@ (800344c <HAL_RCC_OscConfig+0x4bc>)
 8003278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800327c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800327e:	f7ff f871 	bl	8002364 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003286:	f7ff f86d 	bl	8002364 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e183      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003298:	4b6c      	ldr	r3, [pc, #432]	@ (800344c <HAL_RCC_OscConfig+0x4bc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d108      	bne.n	80032be <HAL_RCC_OscConfig+0x32e>
 80032ac:	4b66      	ldr	r3, [pc, #408]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80032ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b2:	4a65      	ldr	r2, [pc, #404]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032bc:	e024      	b.n	8003308 <HAL_RCC_OscConfig+0x378>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b05      	cmp	r3, #5
 80032c4:	d110      	bne.n	80032e8 <HAL_RCC_OscConfig+0x358>
 80032c6:	4b60      	ldr	r3, [pc, #384]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80032c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032cc:	4a5e      	ldr	r2, [pc, #376]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80032ce:	f043 0304 	orr.w	r3, r3, #4
 80032d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032d6:	4b5c      	ldr	r3, [pc, #368]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80032d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032dc:	4a5a      	ldr	r2, [pc, #360]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80032de:	f043 0301 	orr.w	r3, r3, #1
 80032e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032e6:	e00f      	b.n	8003308 <HAL_RCC_OscConfig+0x378>
 80032e8:	4b57      	ldr	r3, [pc, #348]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ee:	4a56      	ldr	r2, [pc, #344]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80032f0:	f023 0301 	bic.w	r3, r3, #1
 80032f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032f8:	4b53      	ldr	r3, [pc, #332]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80032fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032fe:	4a52      	ldr	r2, [pc, #328]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 8003300:	f023 0304 	bic.w	r3, r3, #4
 8003304:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d016      	beq.n	800333e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003310:	f7ff f828 	bl	8002364 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003316:	e00a      	b.n	800332e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003318:	f7ff f824 	bl	8002364 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003326:	4293      	cmp	r3, r2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e138      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800332e:	4b46      	ldr	r3, [pc, #280]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 8003330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0ed      	beq.n	8003318 <HAL_RCC_OscConfig+0x388>
 800333c:	e015      	b.n	800336a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333e:	f7ff f811 	bl	8002364 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003344:	e00a      	b.n	800335c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003346:	f7ff f80d 	bl	8002364 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003354:	4293      	cmp	r3, r2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e121      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800335c:	4b3a      	ldr	r3, [pc, #232]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1ed      	bne.n	8003346 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800336a:	7ffb      	ldrb	r3, [r7, #31]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d105      	bne.n	800337c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003370:	4b35      	ldr	r3, [pc, #212]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 8003372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003374:	4a34      	ldr	r2, [pc, #208]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 8003376:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800337a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d03c      	beq.n	8003402 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01c      	beq.n	80033ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003390:	4b2d      	ldr	r3, [pc, #180]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 8003392:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003396:	4a2c      	ldr	r2, [pc, #176]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a0:	f7fe ffe0 	bl	8002364 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033a8:	f7fe ffdc 	bl	8002364 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e0f2      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033ba:	4b23      	ldr	r3, [pc, #140]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80033bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0ef      	beq.n	80033a8 <HAL_RCC_OscConfig+0x418>
 80033c8:	e01b      	b.n	8003402 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80033cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80033d2:	f023 0301 	bic.w	r3, r3, #1
 80033d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033da:	f7fe ffc3 	bl	8002364 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033e2:	f7fe ffbf 	bl	8002364 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e0d5      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033f4:	4b14      	ldr	r3, [pc, #80]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80033f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1ef      	bne.n	80033e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 80c9 	beq.w	800359e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800340c:	4b0e      	ldr	r3, [pc, #56]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b0c      	cmp	r3, #12
 8003416:	f000 8083 	beq.w	8003520 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d15e      	bne.n	80034e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003422:	4b09      	ldr	r3, [pc, #36]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a08      	ldr	r2, [pc, #32]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 8003428:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800342c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342e:	f7fe ff99 	bl	8002364 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003434:	e00c      	b.n	8003450 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003436:	f7fe ff95 	bl	8002364 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d905      	bls.n	8003450 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e0ab      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
 8003448:	40021000 	.word	0x40021000
 800344c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003450:	4b55      	ldr	r3, [pc, #340]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1ec      	bne.n	8003436 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800345c:	4b52      	ldr	r3, [pc, #328]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	4b52      	ldr	r3, [pc, #328]	@ (80035ac <HAL_RCC_OscConfig+0x61c>)
 8003462:	4013      	ands	r3, r2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6a11      	ldr	r1, [r2, #32]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800346c:	3a01      	subs	r2, #1
 800346e:	0112      	lsls	r2, r2, #4
 8003470:	4311      	orrs	r1, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003476:	0212      	lsls	r2, r2, #8
 8003478:	4311      	orrs	r1, r2
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800347e:	0852      	lsrs	r2, r2, #1
 8003480:	3a01      	subs	r2, #1
 8003482:	0552      	lsls	r2, r2, #21
 8003484:	4311      	orrs	r1, r2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800348a:	0852      	lsrs	r2, r2, #1
 800348c:	3a01      	subs	r2, #1
 800348e:	0652      	lsls	r2, r2, #25
 8003490:	4311      	orrs	r1, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003496:	06d2      	lsls	r2, r2, #27
 8003498:	430a      	orrs	r2, r1
 800349a:	4943      	ldr	r1, [pc, #268]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 800349c:	4313      	orrs	r3, r2
 800349e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a0:	4b41      	ldr	r3, [pc, #260]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a40      	ldr	r2, [pc, #256]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 80034a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034ac:	4b3e      	ldr	r3, [pc, #248]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4a3d      	ldr	r2, [pc, #244]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 80034b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fe ff54 	bl	8002364 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c0:	f7fe ff50 	bl	8002364 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e066      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d2:	4b35      	ldr	r3, [pc, #212]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x530>
 80034de:	e05e      	b.n	800359e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e0:	4b31      	ldr	r3, [pc, #196]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a30      	ldr	r2, [pc, #192]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 80034e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7fe ff3a 	bl	8002364 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f4:	f7fe ff36 	bl	8002364 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e04c      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003506:	4b28      	ldr	r3, [pc, #160]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003512:	4b25      	ldr	r3, [pc, #148]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	4924      	ldr	r1, [pc, #144]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 8003518:	4b25      	ldr	r3, [pc, #148]	@ (80035b0 <HAL_RCC_OscConfig+0x620>)
 800351a:	4013      	ands	r3, r2
 800351c:	60cb      	str	r3, [r1, #12]
 800351e:	e03e      	b.n	800359e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e039      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800352c:	4b1e      	ldr	r3, [pc, #120]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f003 0203 	and.w	r2, r3, #3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	429a      	cmp	r2, r3
 800353e:	d12c      	bne.n	800359a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354a:	3b01      	subs	r3, #1
 800354c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354e:	429a      	cmp	r2, r3
 8003550:	d123      	bne.n	800359a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800355e:	429a      	cmp	r2, r3
 8003560:	d11b      	bne.n	800359a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800356e:	429a      	cmp	r2, r3
 8003570:	d113      	bne.n	800359a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357c:	085b      	lsrs	r3, r3, #1
 800357e:	3b01      	subs	r3, #1
 8003580:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003582:	429a      	cmp	r2, r3
 8003584:	d109      	bne.n	800359a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003590:	085b      	lsrs	r3, r3, #1
 8003592:	3b01      	subs	r3, #1
 8003594:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003596:	429a      	cmp	r2, r3
 8003598:	d001      	beq.n	800359e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3720      	adds	r7, #32
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40021000 	.word	0x40021000
 80035ac:	019f800c 	.word	0x019f800c
 80035b0:	feeefffc 	.word	0xfeeefffc

080035b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e11e      	b.n	800380a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035cc:	4b91      	ldr	r3, [pc, #580]	@ (8003814 <HAL_RCC_ClockConfig+0x260>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d910      	bls.n	80035fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035da:	4b8e      	ldr	r3, [pc, #568]	@ (8003814 <HAL_RCC_ClockConfig+0x260>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 020f 	bic.w	r2, r3, #15
 80035e2:	498c      	ldr	r1, [pc, #560]	@ (8003814 <HAL_RCC_ClockConfig+0x260>)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ea:	4b8a      	ldr	r3, [pc, #552]	@ (8003814 <HAL_RCC_ClockConfig+0x260>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d001      	beq.n	80035fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e106      	b.n	800380a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d073      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d129      	bne.n	8003664 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003610:	4b81      	ldr	r3, [pc, #516]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e0f4      	b.n	800380a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003620:	f000 f99c 	bl	800395c <RCC_GetSysClockFreqFromPLLSource>
 8003624:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	4a7c      	ldr	r2, [pc, #496]	@ (800381c <HAL_RCC_ClockConfig+0x268>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d93f      	bls.n	80036ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800362e:	4b7a      	ldr	r3, [pc, #488]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d009      	beq.n	800364e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003642:	2b00      	cmp	r3, #0
 8003644:	d033      	beq.n	80036ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800364a:	2b00      	cmp	r3, #0
 800364c:	d12f      	bne.n	80036ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800364e:	4b72      	ldr	r3, [pc, #456]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003656:	4a70      	ldr	r2, [pc, #448]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 8003658:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800365c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800365e:	2380      	movs	r3, #128	@ 0x80
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	e024      	b.n	80036ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d107      	bne.n	800367c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800366c:	4b6a      	ldr	r3, [pc, #424]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d109      	bne.n	800368c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0c6      	b.n	800380a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800367c:	4b66      	ldr	r3, [pc, #408]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0be      	b.n	800380a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800368c:	f000 f8ce 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8003690:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4a61      	ldr	r2, [pc, #388]	@ (800381c <HAL_RCC_ClockConfig+0x268>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d909      	bls.n	80036ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800369a:	4b5f      	ldr	r3, [pc, #380]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036a2:	4a5d      	ldr	r2, [pc, #372]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 80036a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80036aa:	2380      	movs	r3, #128	@ 0x80
 80036ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036ae:	4b5a      	ldr	r3, [pc, #360]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f023 0203 	bic.w	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4957      	ldr	r1, [pc, #348]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c0:	f7fe fe50 	bl	8002364 <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c6:	e00a      	b.n	80036de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c8:	f7fe fe4c 	bl	8002364 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e095      	b.n	800380a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036de:	4b4e      	ldr	r3, [pc, #312]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 020c 	and.w	r2, r3, #12
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d1eb      	bne.n	80036c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d023      	beq.n	8003744 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003708:	4b43      	ldr	r3, [pc, #268]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	4a42      	ldr	r2, [pc, #264]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 800370e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003712:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b00      	cmp	r3, #0
 800371e:	d007      	beq.n	8003730 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003720:	4b3d      	ldr	r3, [pc, #244]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003728:	4a3b      	ldr	r2, [pc, #236]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 800372a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800372e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003730:	4b39      	ldr	r3, [pc, #228]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	4936      	ldr	r1, [pc, #216]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 800373e:	4313      	orrs	r3, r2
 8003740:	608b      	str	r3, [r1, #8]
 8003742:	e008      	b.n	8003756 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2b80      	cmp	r3, #128	@ 0x80
 8003748:	d105      	bne.n	8003756 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800374a:	4b33      	ldr	r3, [pc, #204]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	4a32      	ldr	r2, [pc, #200]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 8003750:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003754:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003756:	4b2f      	ldr	r3, [pc, #188]	@ (8003814 <HAL_RCC_ClockConfig+0x260>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d21d      	bcs.n	80037a0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003764:	4b2b      	ldr	r3, [pc, #172]	@ (8003814 <HAL_RCC_ClockConfig+0x260>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f023 020f 	bic.w	r2, r3, #15
 800376c:	4929      	ldr	r1, [pc, #164]	@ (8003814 <HAL_RCC_ClockConfig+0x260>)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	4313      	orrs	r3, r2
 8003772:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003774:	f7fe fdf6 	bl	8002364 <HAL_GetTick>
 8003778:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800377a:	e00a      	b.n	8003792 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800377c:	f7fe fdf2 	bl	8002364 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e03b      	b.n	800380a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003792:	4b20      	ldr	r3, [pc, #128]	@ (8003814 <HAL_RCC_ClockConfig+0x260>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d1ed      	bne.n	800377c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4917      	ldr	r1, [pc, #92]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d009      	beq.n	80037de <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ca:	4b13      	ldr	r3, [pc, #76]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	490f      	ldr	r1, [pc, #60]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037de:	f000 f825 	bl	800382c <HAL_RCC_GetSysClockFreq>
 80037e2:	4602      	mov	r2, r0
 80037e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	091b      	lsrs	r3, r3, #4
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	490c      	ldr	r1, [pc, #48]	@ (8003820 <HAL_RCC_ClockConfig+0x26c>)
 80037f0:	5ccb      	ldrb	r3, [r1, r3]
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	fa22 f303 	lsr.w	r3, r2, r3
 80037fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003824 <HAL_RCC_ClockConfig+0x270>)
 80037fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80037fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003828 <HAL_RCC_ClockConfig+0x274>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fe fd62 	bl	80022cc <HAL_InitTick>
 8003808:	4603      	mov	r3, r0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40022000 	.word	0x40022000
 8003818:	40021000 	.word	0x40021000
 800381c:	04c4b400 	.word	0x04c4b400
 8003820:	0800d2ac 	.word	0x0800d2ac
 8003824:	20000000 	.word	0x20000000
 8003828:	20000004 	.word	0x20000004

0800382c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003832:	4b2c      	ldr	r3, [pc, #176]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b04      	cmp	r3, #4
 800383c:	d102      	bne.n	8003844 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800383e:	4b2a      	ldr	r3, [pc, #168]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	e047      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003844:	4b27      	ldr	r3, [pc, #156]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 030c 	and.w	r3, r3, #12
 800384c:	2b08      	cmp	r3, #8
 800384e:	d102      	bne.n	8003856 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003850:	4b25      	ldr	r3, [pc, #148]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	e03e      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003856:	4b23      	ldr	r3, [pc, #140]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b0c      	cmp	r3, #12
 8003860:	d136      	bne.n	80038d0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003862:	4b20      	ldr	r3, [pc, #128]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800386c:	4b1d      	ldr	r3, [pc, #116]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	3301      	adds	r3, #1
 8003878:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b03      	cmp	r3, #3
 800387e:	d10c      	bne.n	800389a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003880:	4a19      	ldr	r2, [pc, #100]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	fbb2 f3f3 	udiv	r3, r2, r3
 8003888:	4a16      	ldr	r2, [pc, #88]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800388a:	68d2      	ldr	r2, [r2, #12]
 800388c:	0a12      	lsrs	r2, r2, #8
 800388e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003892:	fb02 f303 	mul.w	r3, r2, r3
 8003896:	617b      	str	r3, [r7, #20]
      break;
 8003898:	e00c      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800389a:	4a13      	ldr	r2, [pc, #76]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a2:	4a10      	ldr	r2, [pc, #64]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038a4:	68d2      	ldr	r2, [r2, #12]
 80038a6:	0a12      	lsrs	r2, r2, #8
 80038a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80038ac:	fb02 f303 	mul.w	r3, r2, r3
 80038b0:	617b      	str	r3, [r7, #20]
      break;
 80038b2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038b4:	4b0b      	ldr	r3, [pc, #44]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	0e5b      	lsrs	r3, r3, #25
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	3301      	adds	r3, #1
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	e001      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80038d4:	693b      	ldr	r3, [r7, #16]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	371c      	adds	r7, #28
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40021000 	.word	0x40021000
 80038e8:	00f42400 	.word	0x00f42400

080038ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f0:	4b03      	ldr	r3, [pc, #12]	@ (8003900 <HAL_RCC_GetHCLKFreq+0x14>)
 80038f2:	681b      	ldr	r3, [r3, #0]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000000 	.word	0x20000000

08003904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003908:	f7ff fff0 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 800390c:	4602      	mov	r2, r0
 800390e:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	0a1b      	lsrs	r3, r3, #8
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	4904      	ldr	r1, [pc, #16]	@ (800392c <HAL_RCC_GetPCLK1Freq+0x28>)
 800391a:	5ccb      	ldrb	r3, [r1, r3]
 800391c:	f003 031f 	and.w	r3, r3, #31
 8003920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003924:	4618      	mov	r0, r3
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40021000 	.word	0x40021000
 800392c:	0800d2bc 	.word	0x0800d2bc

08003930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003934:	f7ff ffda 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <HAL_RCC_GetPCLK2Freq+0x24>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	0adb      	lsrs	r3, r3, #11
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	4904      	ldr	r1, [pc, #16]	@ (8003958 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003950:	4618      	mov	r0, r3
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40021000 	.word	0x40021000
 8003958:	0800d2bc 	.word	0x0800d2bc

0800395c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003962:	4b1e      	ldr	r3, [pc, #120]	@ (80039dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800396c:	4b1b      	ldr	r3, [pc, #108]	@ (80039dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	091b      	lsrs	r3, r3, #4
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	3301      	adds	r3, #1
 8003978:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	2b03      	cmp	r3, #3
 800397e:	d10c      	bne.n	800399a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003980:	4a17      	ldr	r2, [pc, #92]	@ (80039e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	fbb2 f3f3 	udiv	r3, r2, r3
 8003988:	4a14      	ldr	r2, [pc, #80]	@ (80039dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800398a:	68d2      	ldr	r2, [r2, #12]
 800398c:	0a12      	lsrs	r2, r2, #8
 800398e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	617b      	str	r3, [r7, #20]
    break;
 8003998:	e00c      	b.n	80039b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800399a:	4a11      	ldr	r2, [pc, #68]	@ (80039e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a2:	4a0e      	ldr	r2, [pc, #56]	@ (80039dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039a4:	68d2      	ldr	r2, [r2, #12]
 80039a6:	0a12      	lsrs	r2, r2, #8
 80039a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039ac:	fb02 f303 	mul.w	r3, r2, r3
 80039b0:	617b      	str	r3, [r7, #20]
    break;
 80039b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039b4:	4b09      	ldr	r3, [pc, #36]	@ (80039dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	0e5b      	lsrs	r3, r3, #25
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	3301      	adds	r3, #1
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80039ce:	687b      	ldr	r3, [r7, #4]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	40021000 	.word	0x40021000
 80039e0:	00f42400 	.word	0x00f42400

080039e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039ec:	2300      	movs	r3, #0
 80039ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039f0:	2300      	movs	r3, #0
 80039f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 8098 	beq.w	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a02:	2300      	movs	r3, #0
 8003a04:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a06:	4b43      	ldr	r3, [pc, #268]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10d      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a12:	4b40      	ldr	r3, [pc, #256]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a16:	4a3f      	ldr	r2, [pc, #252]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a1e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a26:	60bb      	str	r3, [r7, #8]
 8003a28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a2e:	4b3a      	ldr	r3, [pc, #232]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a39      	ldr	r2, [pc, #228]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a3a:	f7fe fc93 	bl	8002364 <HAL_GetTick>
 8003a3e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a40:	e009      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a42:	f7fe fc8f 	bl	8002364 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d902      	bls.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	74fb      	strb	r3, [r7, #19]
        break;
 8003a54:	e005      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a56:	4b30      	ldr	r3, [pc, #192]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0ef      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a62:	7cfb      	ldrb	r3, [r7, #19]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d159      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a68:	4b2a      	ldr	r3, [pc, #168]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a72:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d01e      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d019      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a84:	4b23      	ldr	r3, [pc, #140]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a90:	4b20      	ldr	r3, [pc, #128]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a96:	4a1f      	ldr	r2, [pc, #124]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ab0:	4a18      	ldr	r2, [pc, #96]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d016      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac2:	f7fe fc4f 	bl	8002364 <HAL_GetTick>
 8003ac6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac8:	e00b      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aca:	f7fe fc4b 	bl	8002364 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d902      	bls.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	74fb      	strb	r3, [r7, #19]
            break;
 8003ae0:	e006      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0ec      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003af0:	7cfb      	ldrb	r3, [r7, #19]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10b      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003af6:	4b07      	ldr	r3, [pc, #28]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003afc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b04:	4903      	ldr	r1, [pc, #12]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b0c:	e008      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b0e:	7cfb      	ldrb	r3, [r7, #19]
 8003b10:	74bb      	strb	r3, [r7, #18]
 8003b12:	e005      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1c:	7cfb      	ldrb	r3, [r7, #19]
 8003b1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b20:	7c7b      	ldrb	r3, [r7, #17]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d105      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b26:	4ba6      	ldr	r3, [pc, #664]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2a:	4aa5      	ldr	r2, [pc, #660]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b30:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b3e:	4ba0      	ldr	r3, [pc, #640]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b44:	f023 0203 	bic.w	r2, r3, #3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	499c      	ldr	r1, [pc, #624]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b60:	4b97      	ldr	r3, [pc, #604]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b66:	f023 020c 	bic.w	r2, r3, #12
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	4994      	ldr	r1, [pc, #592]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b82:	4b8f      	ldr	r3, [pc, #572]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b88:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	498b      	ldr	r1, [pc, #556]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ba4:	4b86      	ldr	r3, [pc, #536]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003baa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	4983      	ldr	r1, [pc, #524]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0320 	and.w	r3, r3, #32
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bc6:	4b7e      	ldr	r3, [pc, #504]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bcc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	497a      	ldr	r1, [pc, #488]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003be8:	4b75      	ldr	r3, [pc, #468]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	4972      	ldr	r1, [pc, #456]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c0a:	4b6d      	ldr	r3, [pc, #436]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c10:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	4969      	ldr	r1, [pc, #420]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c2c:	4b64      	ldr	r3, [pc, #400]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c32:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	4961      	ldr	r1, [pc, #388]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c4e:	4b5c      	ldr	r3, [pc, #368]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5c:	4958      	ldr	r1, [pc, #352]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d015      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c70:	4b53      	ldr	r3, [pc, #332]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7e:	4950      	ldr	r1, [pc, #320]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c8e:	d105      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c90:	4b4b      	ldr	r3, [pc, #300]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4a4a      	ldr	r2, [pc, #296]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c9a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d015      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ca8:	4b45      	ldr	r3, [pc, #276]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb6:	4942      	ldr	r1, [pc, #264]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cc6:	d105      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cc8:	4b3d      	ldr	r3, [pc, #244]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	4a3c      	ldr	r2, [pc, #240]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cd2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d015      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ce0:	4b37      	ldr	r3, [pc, #220]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cee:	4934      	ldr	r1, [pc, #208]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cfe:	d105      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d00:	4b2f      	ldr	r3, [pc, #188]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	4a2e      	ldr	r2, [pc, #184]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d0a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d015      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d18:	4b29      	ldr	r3, [pc, #164]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d26:	4926      	ldr	r1, [pc, #152]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d36:	d105      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d38:	4b21      	ldr	r3, [pc, #132]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	4a20      	ldr	r2, [pc, #128]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d42:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d015      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d50:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d5e:	4918      	ldr	r1, [pc, #96]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d6e:	d105      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d70:	4b13      	ldr	r3, [pc, #76]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4a12      	ldr	r2, [pc, #72]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d015      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d88:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d8e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d96:	490a      	ldr	r1, [pc, #40]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003da6:	d105      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003da8:	4b05      	ldr	r3, [pc, #20]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	4a04      	ldr	r2, [pc, #16]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003db2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003db4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40021000 	.word	0x40021000

08003dc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e09d      	b.n	8003f12 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d108      	bne.n	8003df0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003de6:	d009      	beq.n	8003dfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	61da      	str	r2, [r3, #28]
 8003dee:	e005      	b.n	8003dfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7fd fc26 	bl	8001668 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e3c:	d902      	bls.n	8003e44 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	e002      	b.n	8003e4a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e48:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003e52:	d007      	beq.n	8003e64 <HAL_SPI_Init+0xa0>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e5c:	d002      	beq.n	8003e64 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea6:	ea42 0103 	orr.w	r1, r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	0c1b      	lsrs	r3, r3, #16
 8003ec0:	f003 0204 	and.w	r2, r3, #4
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003ee0:	ea42 0103 	orr.w	r1, r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69da      	ldr	r2, [r3, #28]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b088      	sub	sp, #32
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	60f8      	str	r0, [r7, #12]
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	603b      	str	r3, [r7, #0]
 8003f26:	4613      	mov	r3, r2
 8003f28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d101      	bne.n	8003f3c <HAL_SPI_Transmit+0x22>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e15f      	b.n	80041fc <HAL_SPI_Transmit+0x2e2>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f44:	f7fe fa0e 	bl	8002364 <HAL_GetTick>
 8003f48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f4a:	88fb      	ldrh	r3, [r7, #6]
 8003f4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d002      	beq.n	8003f60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f5e:	e148      	b.n	80041f2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_SPI_Transmit+0x52>
 8003f66:	88fb      	ldrh	r3, [r7, #6]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d102      	bne.n	8003f72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f70:	e13f      	b.n	80041f2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2203      	movs	r2, #3
 8003f76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	88fa      	ldrh	r2, [r7, #6]
 8003f8a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	88fa      	ldrh	r2, [r7, #6]
 8003f90:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fbc:	d10f      	bne.n	8003fde <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fdc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe8:	2b40      	cmp	r3, #64	@ 0x40
 8003fea:	d007      	beq.n	8003ffc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ffa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004004:	d94f      	bls.n	80040a6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <HAL_SPI_Transmit+0xfa>
 800400e:	8afb      	ldrh	r3, [r7, #22]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d142      	bne.n	800409a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004018:	881a      	ldrh	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004024:	1c9a      	adds	r2, r3, #2
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004038:	e02f      	b.n	800409a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b02      	cmp	r3, #2
 8004046:	d112      	bne.n	800406e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800404c:	881a      	ldrh	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004058:	1c9a      	adds	r2, r3, #2
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800406c:	e015      	b.n	800409a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800406e:	f7fe f979 	bl	8002364 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d803      	bhi.n	8004086 <HAL_SPI_Transmit+0x16c>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004084:	d102      	bne.n	800408c <HAL_SPI_Transmit+0x172>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d106      	bne.n	800409a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004098:	e0ab      	b.n	80041f2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1ca      	bne.n	800403a <HAL_SPI_Transmit+0x120>
 80040a4:	e080      	b.n	80041a8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <HAL_SPI_Transmit+0x19a>
 80040ae:	8afb      	ldrh	r3, [r7, #22]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d174      	bne.n	800419e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d912      	bls.n	80040e4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c2:	881a      	ldrh	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ce:	1c9a      	adds	r2, r3, #2
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b02      	subs	r3, #2
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80040e2:	e05c      	b.n	800419e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	330c      	adds	r3, #12
 80040ee:	7812      	ldrb	r2, [r2, #0]
 80040f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800410a:	e048      	b.n	800419e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b02      	cmp	r3, #2
 8004118:	d12b      	bne.n	8004172 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	d912      	bls.n	800414a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004128:	881a      	ldrh	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004134:	1c9a      	adds	r2, r3, #2
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b02      	subs	r3, #2
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004148:	e029      	b.n	800419e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	330c      	adds	r3, #12
 8004154:	7812      	ldrb	r2, [r2, #0]
 8004156:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004170:	e015      	b.n	800419e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004172:	f7fe f8f7 	bl	8002364 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d803      	bhi.n	800418a <HAL_SPI_Transmit+0x270>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004188:	d102      	bne.n	8004190 <HAL_SPI_Transmit+0x276>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d106      	bne.n	800419e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800419c:	e029      	b.n	80041f2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1b1      	bne.n	800410c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	6839      	ldr	r1, [r7, #0]
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 fcf9 	bl	8004ba4 <SPI_EndRxTxTransaction>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d002      	beq.n	80041be <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2220      	movs	r2, #32
 80041bc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10a      	bne.n	80041dc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041c6:	2300      	movs	r3, #0
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	77fb      	strb	r3, [r7, #31]
 80041e8:	e003      	b.n	80041f2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80041fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3720      	adds	r7, #32
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af02      	add	r7, sp, #8
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	4613      	mov	r3, r2
 8004212:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004214:	2300      	movs	r3, #0
 8004216:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b01      	cmp	r3, #1
 8004222:	d002      	beq.n	800422a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004224:	2302      	movs	r3, #2
 8004226:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004228:	e11a      	b.n	8004460 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004232:	d112      	bne.n	800425a <HAL_SPI_Receive+0x56>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10e      	bne.n	800425a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2204      	movs	r2, #4
 8004240:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004244:	88fa      	ldrh	r2, [r7, #6]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	4613      	mov	r3, r2
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	68b9      	ldr	r1, [r7, #8]
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f90e 	bl	8004472 <HAL_SPI_TransmitReceive>
 8004256:	4603      	mov	r3, r0
 8004258:	e107      	b.n	800446a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_SPI_Receive+0x64>
 8004264:	2302      	movs	r3, #2
 8004266:	e100      	b.n	800446a <HAL_SPI_Receive+0x266>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004270:	f7fe f878 	bl	8002364 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <HAL_SPI_Receive+0x7e>
 800427c:	88fb      	ldrh	r3, [r7, #6]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d102      	bne.n	8004288 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004286:	e0eb      	b.n	8004460 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2204      	movs	r2, #4
 800428c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	88fa      	ldrh	r2, [r7, #6]
 80042a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	88fa      	ldrh	r2, [r7, #6]
 80042a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042d2:	d908      	bls.n	80042e6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80042e2:	605a      	str	r2, [r3, #4]
 80042e4:	e007      	b.n	80042f6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042f4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042fe:	d10f      	bne.n	8004320 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800430e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800431e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800432a:	2b40      	cmp	r3, #64	@ 0x40
 800432c:	d007      	beq.n	800433e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800433c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004346:	d86f      	bhi.n	8004428 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004348:	e034      	b.n	80043b4 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b01      	cmp	r3, #1
 8004356:	d117      	bne.n	8004388 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f103 020c 	add.w	r2, r3, #12
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004364:	7812      	ldrb	r2, [r2, #0]
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004386:	e015      	b.n	80043b4 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004388:	f7fd ffec 	bl	8002364 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d803      	bhi.n	80043a0 <HAL_SPI_Receive+0x19c>
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439e:	d102      	bne.n	80043a6 <HAL_SPI_Receive+0x1a2>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80043b2:	e055      	b.n	8004460 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1c4      	bne.n	800434a <HAL_SPI_Receive+0x146>
 80043c0:	e038      	b.n	8004434 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d115      	bne.n	80043fc <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043da:	b292      	uxth	r2, r2
 80043dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	1c9a      	adds	r2, r3, #2
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80043fa:	e015      	b.n	8004428 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043fc:	f7fd ffb2 	bl	8002364 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d803      	bhi.n	8004414 <HAL_SPI_Receive+0x210>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004412:	d102      	bne.n	800441a <HAL_SPI_Receive+0x216>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004426:	e01b      	b.n	8004460 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1c6      	bne.n	80043c2 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	6839      	ldr	r1, [r7, #0]
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 fb5b 	bl	8004af4 <SPI_EndRxTransaction>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2220      	movs	r2, #32
 8004448:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	75fb      	strb	r3, [r7, #23]
 8004456:	e003      	b.n	8004460 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004468:	7dfb      	ldrb	r3, [r7, #23]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b08a      	sub	sp, #40	@ 0x28
 8004476:	af00      	add	r7, sp, #0
 8004478:	60f8      	str	r0, [r7, #12]
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	607a      	str	r2, [r7, #4]
 800447e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004480:	2301      	movs	r3, #1
 8004482:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004484:	2300      	movs	r3, #0
 8004486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_SPI_TransmitReceive+0x26>
 8004494:	2302      	movs	r3, #2
 8004496:	e20a      	b.n	80048ae <HAL_SPI_TransmitReceive+0x43c>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044a0:	f7fd ff60 	bl	8002364 <HAL_GetTick>
 80044a4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80044ac:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80044b4:	887b      	ldrh	r3, [r7, #2]
 80044b6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80044b8:	887b      	ldrh	r3, [r7, #2]
 80044ba:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044bc:	7efb      	ldrb	r3, [r7, #27]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d00e      	beq.n	80044e0 <HAL_SPI_TransmitReceive+0x6e>
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044c8:	d106      	bne.n	80044d8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d102      	bne.n	80044d8 <HAL_SPI_TransmitReceive+0x66>
 80044d2:	7efb      	ldrb	r3, [r7, #27]
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d003      	beq.n	80044e0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80044d8:	2302      	movs	r3, #2
 80044da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80044de:	e1e0      	b.n	80048a2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <HAL_SPI_TransmitReceive+0x80>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <HAL_SPI_TransmitReceive+0x80>
 80044ec:	887b      	ldrh	r3, [r7, #2]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d103      	bne.n	80044fa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80044f8:	e1d3      	b.n	80048a2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b04      	cmp	r3, #4
 8004504:	d003      	beq.n	800450e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2205      	movs	r2, #5
 800450a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	887a      	ldrh	r2, [r7, #2]
 800451e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	887a      	ldrh	r2, [r7, #2]
 8004526:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	887a      	ldrh	r2, [r7, #2]
 8004534:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	887a      	ldrh	r2, [r7, #2]
 800453a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004550:	d802      	bhi.n	8004558 <HAL_SPI_TransmitReceive+0xe6>
 8004552:	8a3b      	ldrh	r3, [r7, #16]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d908      	bls.n	800456a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004566:	605a      	str	r2, [r3, #4]
 8004568:	e007      	b.n	800457a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004578:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004584:	2b40      	cmp	r3, #64	@ 0x40
 8004586:	d007      	beq.n	8004598 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004596:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80045a0:	f240 8081 	bls.w	80046a6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <HAL_SPI_TransmitReceive+0x140>
 80045ac:	8a7b      	ldrh	r3, [r7, #18]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d16d      	bne.n	800468e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b6:	881a      	ldrh	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c2:	1c9a      	adds	r2, r3, #2
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045d6:	e05a      	b.n	800468e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d11b      	bne.n	800461e <HAL_SPI_TransmitReceive+0x1ac>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d016      	beq.n	800461e <HAL_SPI_TransmitReceive+0x1ac>
 80045f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d113      	bne.n	800461e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fa:	881a      	ldrh	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004606:	1c9a      	adds	r2, r3, #2
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004610:	b29b      	uxth	r3, r3
 8004612:	3b01      	subs	r3, #1
 8004614:	b29a      	uxth	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b01      	cmp	r3, #1
 800462a:	d11c      	bne.n	8004666 <HAL_SPI_TransmitReceive+0x1f4>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d016      	beq.n	8004666 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004642:	b292      	uxth	r2, r2
 8004644:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464a:	1c9a      	adds	r2, r3, #2
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004662:	2301      	movs	r3, #1
 8004664:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004666:	f7fd fe7d 	bl	8002364 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004672:	429a      	cmp	r2, r3
 8004674:	d80b      	bhi.n	800468e <HAL_SPI_TransmitReceive+0x21c>
 8004676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467c:	d007      	beq.n	800468e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800468c:	e109      	b.n	80048a2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d19f      	bne.n	80045d8 <HAL_SPI_TransmitReceive+0x166>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800469e:	b29b      	uxth	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d199      	bne.n	80045d8 <HAL_SPI_TransmitReceive+0x166>
 80046a4:	e0e3      	b.n	800486e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_SPI_TransmitReceive+0x244>
 80046ae:	8a7b      	ldrh	r3, [r7, #18]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	f040 80cf 	bne.w	8004854 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d912      	bls.n	80046e6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c4:	881a      	ldrh	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d0:	1c9a      	adds	r2, r3, #2
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b02      	subs	r3, #2
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046e4:	e0b6      	b.n	8004854 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	330c      	adds	r3, #12
 80046f0:	7812      	ldrb	r2, [r2, #0]
 80046f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004702:	b29b      	uxth	r3, r3
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800470c:	e0a2      	b.n	8004854 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b02      	cmp	r3, #2
 800471a:	d134      	bne.n	8004786 <HAL_SPI_TransmitReceive+0x314>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d02f      	beq.n	8004786 <HAL_SPI_TransmitReceive+0x314>
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	2b01      	cmp	r3, #1
 800472a:	d12c      	bne.n	8004786 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004730:	b29b      	uxth	r3, r3
 8004732:	2b01      	cmp	r3, #1
 8004734:	d912      	bls.n	800475c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800473a:	881a      	ldrh	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004746:	1c9a      	adds	r2, r3, #2
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004750:	b29b      	uxth	r3, r3
 8004752:	3b02      	subs	r3, #2
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800475a:	e012      	b.n	8004782 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	330c      	adds	r3, #12
 8004766:	7812      	ldrb	r2, [r2, #0]
 8004768:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004778:	b29b      	uxth	r3, r3
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b01      	cmp	r3, #1
 8004792:	d148      	bne.n	8004826 <HAL_SPI_TransmitReceive+0x3b4>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800479a:	b29b      	uxth	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d042      	beq.n	8004826 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d923      	bls.n	80047f4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b6:	b292      	uxth	r2, r2
 80047b8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047be:	1c9a      	adds	r2, r3, #2
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b02      	subs	r3, #2
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d81f      	bhi.n	8004822 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80047f0:	605a      	str	r2, [r3, #4]
 80047f2:	e016      	b.n	8004822 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f103 020c 	add.w	r2, r3, #12
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004800:	7812      	ldrb	r2, [r2, #0]
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480a:	1c5a      	adds	r2, r3, #1
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004816:	b29b      	uxth	r3, r3
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004822:	2301      	movs	r3, #1
 8004824:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004826:	f7fd fd9d 	bl	8002364 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004832:	429a      	cmp	r2, r3
 8004834:	d803      	bhi.n	800483e <HAL_SPI_TransmitReceive+0x3cc>
 8004836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483c:	d102      	bne.n	8004844 <HAL_SPI_TransmitReceive+0x3d2>
 800483e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004840:	2b00      	cmp	r3, #0
 8004842:	d107      	bne.n	8004854 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004852:	e026      	b.n	80048a2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	f47f af57 	bne.w	800470e <HAL_SPI_TransmitReceive+0x29c>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	f47f af50 	bne.w	800470e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f996 	bl	8004ba4 <SPI_EndRxTxTransaction>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d005      	beq.n	800488a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2220      	movs	r2, #32
 8004888:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004898:	e003      	b.n	80048a2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80048aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3728      	adds	r7, #40	@ 0x28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
	...

080048b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b088      	sub	sp, #32
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	4613      	mov	r3, r2
 80048c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048c8:	f7fd fd4c 	bl	8002364 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d0:	1a9b      	subs	r3, r3, r2
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	4413      	add	r3, r2
 80048d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048d8:	f7fd fd44 	bl	8002364 <HAL_GetTick>
 80048dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048de:	4b39      	ldr	r3, [pc, #228]	@ (80049c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	015b      	lsls	r3, r3, #5
 80048e4:	0d1b      	lsrs	r3, r3, #20
 80048e6:	69fa      	ldr	r2, [r7, #28]
 80048e8:	fb02 f303 	mul.w	r3, r2, r3
 80048ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048ee:	e054      	b.n	800499a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f6:	d050      	beq.n	800499a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048f8:	f7fd fd34 	bl	8002364 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	69fa      	ldr	r2, [r7, #28]
 8004904:	429a      	cmp	r2, r3
 8004906:	d902      	bls.n	800490e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d13d      	bne.n	800498a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800491c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004926:	d111      	bne.n	800494c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004930:	d004      	beq.n	800493c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800493a:	d107      	bne.n	800494c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800494a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004950:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004954:	d10f      	bne.n	8004976 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004974:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e017      	b.n	80049ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	3b01      	subs	r3, #1
 8004998:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	4013      	ands	r3, r2
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	bf0c      	ite	eq
 80049aa:	2301      	moveq	r3, #1
 80049ac:	2300      	movne	r3, #0
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	461a      	mov	r2, r3
 80049b2:	79fb      	ldrb	r3, [r7, #7]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d19b      	bne.n	80048f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3720      	adds	r7, #32
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20000000 	.word	0x20000000

080049c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08a      	sub	sp, #40	@ 0x28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80049d6:	2300      	movs	r3, #0
 80049d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80049da:	f7fd fcc3 	bl	8002364 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	4413      	add	r3, r2
 80049e8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80049ea:	f7fd fcbb 	bl	8002364 <HAL_GetTick>
 80049ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	330c      	adds	r3, #12
 80049f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80049f8:	4b3d      	ldr	r3, [pc, #244]	@ (8004af0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	00da      	lsls	r2, r3, #3
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	0d1b      	lsrs	r3, r3, #20
 8004a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a0a:	fb02 f303 	mul.w	r3, r2, r3
 8004a0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004a10:	e060      	b.n	8004ad4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004a18:	d107      	bne.n	8004a2a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d104      	bne.n	8004a2a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004a28:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a30:	d050      	beq.n	8004ad4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a32:	f7fd fc97 	bl	8002364 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d902      	bls.n	8004a48 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d13d      	bne.n	8004ac4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a60:	d111      	bne.n	8004a86 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a6a:	d004      	beq.n	8004a76 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a74:	d107      	bne.n	8004a86 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a8e:	d10f      	bne.n	8004ab0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004aae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e010      	b.n	8004ae6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4013      	ands	r3, r2
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d196      	bne.n	8004a12 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3728      	adds	r7, #40	@ 0x28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20000000 	.word	0x20000000

08004af4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b08:	d111      	bne.n	8004b2e <SPI_EndRxTransaction+0x3a>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b12:	d004      	beq.n	8004b1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b1c:	d107      	bne.n	8004b2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b2c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2200      	movs	r2, #0
 8004b36:	2180      	movs	r1, #128	@ 0x80
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f7ff febd 	bl	80048b8 <SPI_WaitFlagStateUntilTimeout>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d007      	beq.n	8004b54 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b48:	f043 0220 	orr.w	r2, r3, #32
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e023      	b.n	8004b9c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b5c:	d11d      	bne.n	8004b9a <SPI_EndRxTransaction+0xa6>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b66:	d004      	beq.n	8004b72 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b70:	d113      	bne.n	8004b9a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f7ff ff22 	bl	80049c8 <SPI_WaitFifoStateUntilTimeout>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d007      	beq.n	8004b9a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b8e:	f043 0220 	orr.w	r2, r3, #32
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e000      	b.n	8004b9c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f7ff ff03 	bl	80049c8 <SPI_WaitFifoStateUntilTimeout>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d007      	beq.n	8004bd8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bcc:	f043 0220 	orr.w	r2, r3, #32
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e027      	b.n	8004c28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2200      	movs	r2, #0
 8004be0:	2180      	movs	r1, #128	@ 0x80
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f7ff fe68 	bl	80048b8 <SPI_WaitFlagStateUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d007      	beq.n	8004bfe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bf2:	f043 0220 	orr.w	r2, r3, #32
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e014      	b.n	8004c28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f7ff fedc 	bl	80049c8 <SPI_WaitFifoStateUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d007      	beq.n	8004c26 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c1a:	f043 0220 	orr.w	r2, r3, #32
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e000      	b.n	8004c28 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e049      	b.n	8004cd6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d106      	bne.n	8004c5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fd f86a 	bl	8001d30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3304      	adds	r3, #4
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4610      	mov	r0, r2
 8004c70:	f000 faf0 	bl	8005254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
	...

08004ce0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d109      	bne.n	8004d04 <HAL_TIM_PWM_Start+0x24>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	bf14      	ite	ne
 8004cfc:	2301      	movne	r3, #1
 8004cfe:	2300      	moveq	r3, #0
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	e03c      	b.n	8004d7e <HAL_TIM_PWM_Start+0x9e>
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d109      	bne.n	8004d1e <HAL_TIM_PWM_Start+0x3e>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	bf14      	ite	ne
 8004d16:	2301      	movne	r3, #1
 8004d18:	2300      	moveq	r3, #0
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	e02f      	b.n	8004d7e <HAL_TIM_PWM_Start+0x9e>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d109      	bne.n	8004d38 <HAL_TIM_PWM_Start+0x58>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	bf14      	ite	ne
 8004d30:	2301      	movne	r3, #1
 8004d32:	2300      	moveq	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	e022      	b.n	8004d7e <HAL_TIM_PWM_Start+0x9e>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2b0c      	cmp	r3, #12
 8004d3c:	d109      	bne.n	8004d52 <HAL_TIM_PWM_Start+0x72>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	bf14      	ite	ne
 8004d4a:	2301      	movne	r3, #1
 8004d4c:	2300      	moveq	r3, #0
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	e015      	b.n	8004d7e <HAL_TIM_PWM_Start+0x9e>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b10      	cmp	r3, #16
 8004d56:	d109      	bne.n	8004d6c <HAL_TIM_PWM_Start+0x8c>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	bf14      	ite	ne
 8004d64:	2301      	movne	r3, #1
 8004d66:	2300      	moveq	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	e008      	b.n	8004d7e <HAL_TIM_PWM_Start+0x9e>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	bf14      	ite	ne
 8004d78:	2301      	movne	r3, #1
 8004d7a:	2300      	moveq	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e097      	b.n	8004eb6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d104      	bne.n	8004d96 <HAL_TIM_PWM_Start+0xb6>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d94:	e023      	b.n	8004dde <HAL_TIM_PWM_Start+0xfe>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d104      	bne.n	8004da6 <HAL_TIM_PWM_Start+0xc6>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004da4:	e01b      	b.n	8004dde <HAL_TIM_PWM_Start+0xfe>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d104      	bne.n	8004db6 <HAL_TIM_PWM_Start+0xd6>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004db4:	e013      	b.n	8004dde <HAL_TIM_PWM_Start+0xfe>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b0c      	cmp	r3, #12
 8004dba:	d104      	bne.n	8004dc6 <HAL_TIM_PWM_Start+0xe6>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dc4:	e00b      	b.n	8004dde <HAL_TIM_PWM_Start+0xfe>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b10      	cmp	r3, #16
 8004dca:	d104      	bne.n	8004dd6 <HAL_TIM_PWM_Start+0xf6>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dd4:	e003      	b.n	8004dde <HAL_TIM_PWM_Start+0xfe>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2201      	movs	r2, #1
 8004de4:	6839      	ldr	r1, [r7, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fdc6 	bl	8005978 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a33      	ldr	r2, [pc, #204]	@ (8004ec0 <HAL_TIM_PWM_Start+0x1e0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d013      	beq.n	8004e1e <HAL_TIM_PWM_Start+0x13e>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a32      	ldr	r2, [pc, #200]	@ (8004ec4 <HAL_TIM_PWM_Start+0x1e4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00e      	beq.n	8004e1e <HAL_TIM_PWM_Start+0x13e>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a30      	ldr	r2, [pc, #192]	@ (8004ec8 <HAL_TIM_PWM_Start+0x1e8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d009      	beq.n	8004e1e <HAL_TIM_PWM_Start+0x13e>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a2f      	ldr	r2, [pc, #188]	@ (8004ecc <HAL_TIM_PWM_Start+0x1ec>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d004      	beq.n	8004e1e <HAL_TIM_PWM_Start+0x13e>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a2d      	ldr	r2, [pc, #180]	@ (8004ed0 <HAL_TIM_PWM_Start+0x1f0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d101      	bne.n	8004e22 <HAL_TIM_PWM_Start+0x142>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <HAL_TIM_PWM_Start+0x144>
 8004e22:	2300      	movs	r3, #0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d007      	beq.n	8004e38 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e36:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a20      	ldr	r2, [pc, #128]	@ (8004ec0 <HAL_TIM_PWM_Start+0x1e0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d018      	beq.n	8004e74 <HAL_TIM_PWM_Start+0x194>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e4a:	d013      	beq.n	8004e74 <HAL_TIM_PWM_Start+0x194>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a20      	ldr	r2, [pc, #128]	@ (8004ed4 <HAL_TIM_PWM_Start+0x1f4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00e      	beq.n	8004e74 <HAL_TIM_PWM_Start+0x194>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ed8 <HAL_TIM_PWM_Start+0x1f8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d009      	beq.n	8004e74 <HAL_TIM_PWM_Start+0x194>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a17      	ldr	r2, [pc, #92]	@ (8004ec4 <HAL_TIM_PWM_Start+0x1e4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d004      	beq.n	8004e74 <HAL_TIM_PWM_Start+0x194>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a16      	ldr	r2, [pc, #88]	@ (8004ec8 <HAL_TIM_PWM_Start+0x1e8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d115      	bne.n	8004ea0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	4b18      	ldr	r3, [pc, #96]	@ (8004edc <HAL_TIM_PWM_Start+0x1fc>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b06      	cmp	r3, #6
 8004e84:	d015      	beq.n	8004eb2 <HAL_TIM_PWM_Start+0x1d2>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e8c:	d011      	beq.n	8004eb2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f042 0201 	orr.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e9e:	e008      	b.n	8004eb2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	e000      	b.n	8004eb4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40012c00 	.word	0x40012c00
 8004ec4:	40013400 	.word	0x40013400
 8004ec8:	40014000 	.word	0x40014000
 8004ecc:	40014400 	.word	0x40014400
 8004ed0:	40014800 	.word	0x40014800
 8004ed4:	40000400 	.word	0x40000400
 8004ed8:	40000800 	.word	0x40000800
 8004edc:	00010007 	.word	0x00010007

08004ee0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e097      	b.n	8005024 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d106      	bne.n	8004f0e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7fc ff7b 	bl	8001e04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2202      	movs	r2, #2
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6812      	ldr	r2, [r2, #0]
 8004f20:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004f24:	f023 0307 	bic.w	r3, r3, #7
 8004f28:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3304      	adds	r3, #4
 8004f32:	4619      	mov	r1, r3
 8004f34:	4610      	mov	r0, r2
 8004f36:	f000 f98d 	bl	8005254 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f62:	f023 0303 	bic.w	r3, r3, #3
 8004f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	021b      	lsls	r3, r3, #8
 8004f72:	4313      	orrs	r3, r2
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004f80:	f023 030c 	bic.w	r3, r3, #12
 8004f84:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	021b      	lsls	r3, r3, #8
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	011a      	lsls	r2, r3, #4
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	031b      	lsls	r3, r3, #12
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004fbe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004fc6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3718      	adds	r7, #24
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005046:	2302      	movs	r3, #2
 8005048:	e0ff      	b.n	800524a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b14      	cmp	r3, #20
 8005056:	f200 80f0 	bhi.w	800523a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800505a:	a201      	add	r2, pc, #4	@ (adr r2, 8005060 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800505c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005060:	080050b5 	.word	0x080050b5
 8005064:	0800523b 	.word	0x0800523b
 8005068:	0800523b 	.word	0x0800523b
 800506c:	0800523b 	.word	0x0800523b
 8005070:	080050f5 	.word	0x080050f5
 8005074:	0800523b 	.word	0x0800523b
 8005078:	0800523b 	.word	0x0800523b
 800507c:	0800523b 	.word	0x0800523b
 8005080:	08005137 	.word	0x08005137
 8005084:	0800523b 	.word	0x0800523b
 8005088:	0800523b 	.word	0x0800523b
 800508c:	0800523b 	.word	0x0800523b
 8005090:	08005177 	.word	0x08005177
 8005094:	0800523b 	.word	0x0800523b
 8005098:	0800523b 	.word	0x0800523b
 800509c:	0800523b 	.word	0x0800523b
 80050a0:	080051b9 	.word	0x080051b9
 80050a4:	0800523b 	.word	0x0800523b
 80050a8:	0800523b 	.word	0x0800523b
 80050ac:	0800523b 	.word	0x0800523b
 80050b0:	080051f9 	.word	0x080051f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68b9      	ldr	r1, [r7, #8]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 f966 	bl	800538c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699a      	ldr	r2, [r3, #24]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0208 	orr.w	r2, r2, #8
 80050ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699a      	ldr	r2, [r3, #24]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0204 	bic.w	r2, r2, #4
 80050de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6999      	ldr	r1, [r3, #24]
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	691a      	ldr	r2, [r3, #16]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	619a      	str	r2, [r3, #24]
      break;
 80050f2:	e0a5      	b.n	8005240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68b9      	ldr	r1, [r7, #8]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 f9d6 	bl	80054ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800510e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699a      	ldr	r2, [r3, #24]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800511e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6999      	ldr	r1, [r3, #24]
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	021a      	lsls	r2, r3, #8
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	619a      	str	r2, [r3, #24]
      break;
 8005134:	e084      	b.n	8005240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68b9      	ldr	r1, [r7, #8]
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fa3f 	bl	80055c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69da      	ldr	r2, [r3, #28]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0208 	orr.w	r2, r2, #8
 8005150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69da      	ldr	r2, [r3, #28]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0204 	bic.w	r2, r2, #4
 8005160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	69d9      	ldr	r1, [r3, #28]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	61da      	str	r2, [r3, #28]
      break;
 8005174:	e064      	b.n	8005240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68b9      	ldr	r1, [r7, #8]
 800517c:	4618      	mov	r0, r3
 800517e:	f000 faa7 	bl	80056d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69da      	ldr	r2, [r3, #28]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69da      	ldr	r2, [r3, #28]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69d9      	ldr	r1, [r3, #28]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	021a      	lsls	r2, r3, #8
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	61da      	str	r2, [r3, #28]
      break;
 80051b6:	e043      	b.n	8005240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68b9      	ldr	r1, [r7, #8]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fb10 	bl	80057e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0208 	orr.w	r2, r2, #8
 80051d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0204 	bic.w	r2, r2, #4
 80051e2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	691a      	ldr	r2, [r3, #16]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80051f6:	e023      	b.n	8005240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68b9      	ldr	r1, [r7, #8]
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fb54 	bl	80058ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005212:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005222:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	021a      	lsls	r2, r3, #8
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005238:	e002      	b.n	8005240 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	75fb      	strb	r3, [r7, #23]
      break;
 800523e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005248:	7dfb      	ldrb	r3, [r7, #23]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop

08005254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a42      	ldr	r2, [pc, #264]	@ (8005370 <TIM_Base_SetConfig+0x11c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d00f      	beq.n	800528c <TIM_Base_SetConfig+0x38>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005272:	d00b      	beq.n	800528c <TIM_Base_SetConfig+0x38>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a3f      	ldr	r2, [pc, #252]	@ (8005374 <TIM_Base_SetConfig+0x120>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d007      	beq.n	800528c <TIM_Base_SetConfig+0x38>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a3e      	ldr	r2, [pc, #248]	@ (8005378 <TIM_Base_SetConfig+0x124>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d003      	beq.n	800528c <TIM_Base_SetConfig+0x38>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a3d      	ldr	r2, [pc, #244]	@ (800537c <TIM_Base_SetConfig+0x128>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d108      	bne.n	800529e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a33      	ldr	r2, [pc, #204]	@ (8005370 <TIM_Base_SetConfig+0x11c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d01b      	beq.n	80052de <TIM_Base_SetConfig+0x8a>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ac:	d017      	beq.n	80052de <TIM_Base_SetConfig+0x8a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a30      	ldr	r2, [pc, #192]	@ (8005374 <TIM_Base_SetConfig+0x120>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d013      	beq.n	80052de <TIM_Base_SetConfig+0x8a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a2f      	ldr	r2, [pc, #188]	@ (8005378 <TIM_Base_SetConfig+0x124>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00f      	beq.n	80052de <TIM_Base_SetConfig+0x8a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a2e      	ldr	r2, [pc, #184]	@ (800537c <TIM_Base_SetConfig+0x128>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00b      	beq.n	80052de <TIM_Base_SetConfig+0x8a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a2d      	ldr	r2, [pc, #180]	@ (8005380 <TIM_Base_SetConfig+0x12c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d007      	beq.n	80052de <TIM_Base_SetConfig+0x8a>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a2c      	ldr	r2, [pc, #176]	@ (8005384 <TIM_Base_SetConfig+0x130>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d003      	beq.n	80052de <TIM_Base_SetConfig+0x8a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a2b      	ldr	r2, [pc, #172]	@ (8005388 <TIM_Base_SetConfig+0x134>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d108      	bne.n	80052f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a16      	ldr	r2, [pc, #88]	@ (8005370 <TIM_Base_SetConfig+0x11c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00f      	beq.n	800533c <TIM_Base_SetConfig+0xe8>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a17      	ldr	r2, [pc, #92]	@ (800537c <TIM_Base_SetConfig+0x128>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00b      	beq.n	800533c <TIM_Base_SetConfig+0xe8>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a16      	ldr	r2, [pc, #88]	@ (8005380 <TIM_Base_SetConfig+0x12c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d007      	beq.n	800533c <TIM_Base_SetConfig+0xe8>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a15      	ldr	r2, [pc, #84]	@ (8005384 <TIM_Base_SetConfig+0x130>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d003      	beq.n	800533c <TIM_Base_SetConfig+0xe8>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a14      	ldr	r2, [pc, #80]	@ (8005388 <TIM_Base_SetConfig+0x134>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d103      	bne.n	8005344 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	691a      	ldr	r2, [r3, #16]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b01      	cmp	r3, #1
 8005354:	d105      	bne.n	8005362 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f023 0201 	bic.w	r2, r3, #1
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	611a      	str	r2, [r3, #16]
  }
}
 8005362:	bf00      	nop
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40012c00 	.word	0x40012c00
 8005374:	40000400 	.word	0x40000400
 8005378:	40000800 	.word	0x40000800
 800537c:	40013400 	.word	0x40013400
 8005380:	40014000 	.word	0x40014000
 8005384:	40014400 	.word	0x40014400
 8005388:	40014800 	.word	0x40014800

0800538c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	f023 0201 	bic.w	r2, r3, #1
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f023 0303 	bic.w	r3, r3, #3
 80053c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f023 0302 	bic.w	r3, r3, #2
 80053d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a2c      	ldr	r2, [pc, #176]	@ (8005498 <TIM_OC1_SetConfig+0x10c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00f      	beq.n	800540c <TIM_OC1_SetConfig+0x80>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a2b      	ldr	r2, [pc, #172]	@ (800549c <TIM_OC1_SetConfig+0x110>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d00b      	beq.n	800540c <TIM_OC1_SetConfig+0x80>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a2a      	ldr	r2, [pc, #168]	@ (80054a0 <TIM_OC1_SetConfig+0x114>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d007      	beq.n	800540c <TIM_OC1_SetConfig+0x80>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a29      	ldr	r2, [pc, #164]	@ (80054a4 <TIM_OC1_SetConfig+0x118>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d003      	beq.n	800540c <TIM_OC1_SetConfig+0x80>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a28      	ldr	r2, [pc, #160]	@ (80054a8 <TIM_OC1_SetConfig+0x11c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d10c      	bne.n	8005426 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f023 0308 	bic.w	r3, r3, #8
 8005412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f023 0304 	bic.w	r3, r3, #4
 8005424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a1b      	ldr	r2, [pc, #108]	@ (8005498 <TIM_OC1_SetConfig+0x10c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00f      	beq.n	800544e <TIM_OC1_SetConfig+0xc2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a1a      	ldr	r2, [pc, #104]	@ (800549c <TIM_OC1_SetConfig+0x110>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d00b      	beq.n	800544e <TIM_OC1_SetConfig+0xc2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a19      	ldr	r2, [pc, #100]	@ (80054a0 <TIM_OC1_SetConfig+0x114>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d007      	beq.n	800544e <TIM_OC1_SetConfig+0xc2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a18      	ldr	r2, [pc, #96]	@ (80054a4 <TIM_OC1_SetConfig+0x118>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d003      	beq.n	800544e <TIM_OC1_SetConfig+0xc2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a17      	ldr	r2, [pc, #92]	@ (80054a8 <TIM_OC1_SetConfig+0x11c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d111      	bne.n	8005472 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800545c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	4313      	orrs	r3, r2
 8005466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	621a      	str	r2, [r3, #32]
}
 800548c:	bf00      	nop
 800548e:	371c      	adds	r7, #28
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	40012c00 	.word	0x40012c00
 800549c:	40013400 	.word	0x40013400
 80054a0:	40014000 	.word	0x40014000
 80054a4:	40014400 	.word	0x40014400
 80054a8:	40014800 	.word	0x40014800

080054ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	f023 0210 	bic.w	r2, r3, #16
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	021b      	lsls	r3, r3, #8
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f023 0320 	bic.w	r3, r3, #32
 80054fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	4313      	orrs	r3, r2
 8005506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a28      	ldr	r2, [pc, #160]	@ (80055ac <TIM_OC2_SetConfig+0x100>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d003      	beq.n	8005518 <TIM_OC2_SetConfig+0x6c>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a27      	ldr	r2, [pc, #156]	@ (80055b0 <TIM_OC2_SetConfig+0x104>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d10d      	bne.n	8005534 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800551e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	011b      	lsls	r3, r3, #4
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	4313      	orrs	r3, r2
 800552a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005532:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a1d      	ldr	r2, [pc, #116]	@ (80055ac <TIM_OC2_SetConfig+0x100>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d00f      	beq.n	800555c <TIM_OC2_SetConfig+0xb0>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a1c      	ldr	r2, [pc, #112]	@ (80055b0 <TIM_OC2_SetConfig+0x104>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d00b      	beq.n	800555c <TIM_OC2_SetConfig+0xb0>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a1b      	ldr	r2, [pc, #108]	@ (80055b4 <TIM_OC2_SetConfig+0x108>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d007      	beq.n	800555c <TIM_OC2_SetConfig+0xb0>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a1a      	ldr	r2, [pc, #104]	@ (80055b8 <TIM_OC2_SetConfig+0x10c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d003      	beq.n	800555c <TIM_OC2_SetConfig+0xb0>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a19      	ldr	r2, [pc, #100]	@ (80055bc <TIM_OC2_SetConfig+0x110>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d113      	bne.n	8005584 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005562:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800556a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	4313      	orrs	r3, r2
 8005576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	621a      	str	r2, [r3, #32]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40012c00 	.word	0x40012c00
 80055b0:	40013400 	.word	0x40013400
 80055b4:	40014000 	.word	0x40014000
 80055b8:	40014400 	.word	0x40014400
 80055bc:	40014800 	.word	0x40014800

080055c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f023 0303 	bic.w	r3, r3, #3
 80055fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	4313      	orrs	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800560c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	021b      	lsls	r3, r3, #8
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	4313      	orrs	r3, r2
 8005618:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a27      	ldr	r2, [pc, #156]	@ (80056bc <TIM_OC3_SetConfig+0xfc>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d003      	beq.n	800562a <TIM_OC3_SetConfig+0x6a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a26      	ldr	r2, [pc, #152]	@ (80056c0 <TIM_OC3_SetConfig+0x100>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d10d      	bne.n	8005646 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005630:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	021b      	lsls	r3, r3, #8
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	4313      	orrs	r3, r2
 800563c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a1c      	ldr	r2, [pc, #112]	@ (80056bc <TIM_OC3_SetConfig+0xfc>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00f      	beq.n	800566e <TIM_OC3_SetConfig+0xae>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a1b      	ldr	r2, [pc, #108]	@ (80056c0 <TIM_OC3_SetConfig+0x100>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d00b      	beq.n	800566e <TIM_OC3_SetConfig+0xae>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a1a      	ldr	r2, [pc, #104]	@ (80056c4 <TIM_OC3_SetConfig+0x104>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d007      	beq.n	800566e <TIM_OC3_SetConfig+0xae>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a19      	ldr	r2, [pc, #100]	@ (80056c8 <TIM_OC3_SetConfig+0x108>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d003      	beq.n	800566e <TIM_OC3_SetConfig+0xae>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a18      	ldr	r2, [pc, #96]	@ (80056cc <TIM_OC3_SetConfig+0x10c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d113      	bne.n	8005696 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800567c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	4313      	orrs	r3, r2
 8005694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	621a      	str	r2, [r3, #32]
}
 80056b0:	bf00      	nop
 80056b2:	371c      	adds	r7, #28
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	40012c00 	.word	0x40012c00
 80056c0:	40013400 	.word	0x40013400
 80056c4:	40014000 	.word	0x40014000
 80056c8:	40014400 	.word	0x40014400
 80056cc:	40014800 	.word	0x40014800

080056d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800570a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	021b      	lsls	r3, r3, #8
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4313      	orrs	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800571e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	031b      	lsls	r3, r3, #12
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a28      	ldr	r2, [pc, #160]	@ (80057d0 <TIM_OC4_SetConfig+0x100>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d003      	beq.n	800573c <TIM_OC4_SetConfig+0x6c>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a27      	ldr	r2, [pc, #156]	@ (80057d4 <TIM_OC4_SetConfig+0x104>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d10d      	bne.n	8005758 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	031b      	lsls	r3, r3, #12
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	4313      	orrs	r3, r2
 800574e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005756:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a1d      	ldr	r2, [pc, #116]	@ (80057d0 <TIM_OC4_SetConfig+0x100>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00f      	beq.n	8005780 <TIM_OC4_SetConfig+0xb0>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a1c      	ldr	r2, [pc, #112]	@ (80057d4 <TIM_OC4_SetConfig+0x104>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00b      	beq.n	8005780 <TIM_OC4_SetConfig+0xb0>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a1b      	ldr	r2, [pc, #108]	@ (80057d8 <TIM_OC4_SetConfig+0x108>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d007      	beq.n	8005780 <TIM_OC4_SetConfig+0xb0>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a1a      	ldr	r2, [pc, #104]	@ (80057dc <TIM_OC4_SetConfig+0x10c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d003      	beq.n	8005780 <TIM_OC4_SetConfig+0xb0>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a19      	ldr	r2, [pc, #100]	@ (80057e0 <TIM_OC4_SetConfig+0x110>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d113      	bne.n	80057a8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005786:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800578e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	019b      	lsls	r3, r3, #6
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	4313      	orrs	r3, r2
 800579a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	019b      	lsls	r3, r3, #6
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	621a      	str	r2, [r3, #32]
}
 80057c2:	bf00      	nop
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	40012c00 	.word	0x40012c00
 80057d4:	40013400 	.word	0x40013400
 80057d8:	40014000 	.word	0x40014000
 80057dc:	40014400 	.word	0x40014400
 80057e0:	40014800 	.word	0x40014800

080057e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800580a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005828:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	041b      	lsls	r3, r3, #16
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a17      	ldr	r2, [pc, #92]	@ (8005898 <TIM_OC5_SetConfig+0xb4>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d00f      	beq.n	800585e <TIM_OC5_SetConfig+0x7a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a16      	ldr	r2, [pc, #88]	@ (800589c <TIM_OC5_SetConfig+0xb8>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d00b      	beq.n	800585e <TIM_OC5_SetConfig+0x7a>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a15      	ldr	r2, [pc, #84]	@ (80058a0 <TIM_OC5_SetConfig+0xbc>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d007      	beq.n	800585e <TIM_OC5_SetConfig+0x7a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a14      	ldr	r2, [pc, #80]	@ (80058a4 <TIM_OC5_SetConfig+0xc0>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d003      	beq.n	800585e <TIM_OC5_SetConfig+0x7a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a13      	ldr	r2, [pc, #76]	@ (80058a8 <TIM_OC5_SetConfig+0xc4>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d109      	bne.n	8005872 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005864:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	021b      	lsls	r3, r3, #8
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	4313      	orrs	r3, r2
 8005870:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	621a      	str	r2, [r3, #32]
}
 800588c:	bf00      	nop
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	40012c00 	.word	0x40012c00
 800589c:	40013400 	.word	0x40013400
 80058a0:	40014000 	.word	0x40014000
 80058a4:	40014400 	.word	0x40014400
 80058a8:	40014800 	.word	0x40014800

080058ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	021b      	lsls	r3, r3, #8
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80058f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	051b      	lsls	r3, r3, #20
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a18      	ldr	r2, [pc, #96]	@ (8005964 <TIM_OC6_SetConfig+0xb8>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00f      	beq.n	8005928 <TIM_OC6_SetConfig+0x7c>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a17      	ldr	r2, [pc, #92]	@ (8005968 <TIM_OC6_SetConfig+0xbc>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d00b      	beq.n	8005928 <TIM_OC6_SetConfig+0x7c>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a16      	ldr	r2, [pc, #88]	@ (800596c <TIM_OC6_SetConfig+0xc0>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d007      	beq.n	8005928 <TIM_OC6_SetConfig+0x7c>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a15      	ldr	r2, [pc, #84]	@ (8005970 <TIM_OC6_SetConfig+0xc4>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d003      	beq.n	8005928 <TIM_OC6_SetConfig+0x7c>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a14      	ldr	r2, [pc, #80]	@ (8005974 <TIM_OC6_SetConfig+0xc8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d109      	bne.n	800593c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800592e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	029b      	lsls	r3, r3, #10
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	4313      	orrs	r3, r2
 800593a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	621a      	str	r2, [r3, #32]
}
 8005956:	bf00      	nop
 8005958:	371c      	adds	r7, #28
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	40012c00 	.word	0x40012c00
 8005968:	40013400 	.word	0x40013400
 800596c:	40014000 	.word	0x40014000
 8005970:	40014400 	.word	0x40014400
 8005974:	40014800 	.word	0x40014800

08005978 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f003 031f 	and.w	r3, r3, #31
 800598a:	2201      	movs	r2, #1
 800598c:	fa02 f303 	lsl.w	r3, r2, r3
 8005990:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6a1a      	ldr	r2, [r3, #32]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	43db      	mvns	r3, r3
 800599a:	401a      	ands	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a1a      	ldr	r2, [r3, #32]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f003 031f 	and.w	r3, r3, #31
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	fa01 f303 	lsl.w	r3, r1, r3
 80059b0:	431a      	orrs	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	621a      	str	r2, [r3, #32]
}
 80059b6:	bf00      	nop
 80059b8:	371c      	adds	r7, #28
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
	...

080059c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d101      	bne.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059d8:	2302      	movs	r3, #2
 80059da:	e065      	b.n	8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a2c      	ldr	r2, [pc, #176]	@ (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d004      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a2b      	ldr	r2, [pc, #172]	@ (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d108      	bne.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005a16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005a28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1b      	ldr	r2, [pc, #108]	@ (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d018      	beq.n	8005a7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a52:	d013      	beq.n	8005a7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a18      	ldr	r2, [pc, #96]	@ (8005abc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d00e      	beq.n	8005a7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a17      	ldr	r2, [pc, #92]	@ (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d009      	beq.n	8005a7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a12      	ldr	r2, [pc, #72]	@ (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d004      	beq.n	8005a7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a13      	ldr	r2, [pc, #76]	@ (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d10c      	bne.n	8005a96 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	40012c00 	.word	0x40012c00
 8005ab8:	40013400 	.word	0x40013400
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40000800 	.word	0x40000800
 8005ac4:	40014000 	.word	0x40014000

08005ac8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d101      	bne.n	8005ae4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e073      	b.n	8005bcc <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	041b      	lsls	r3, r3, #16
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a19      	ldr	r2, [pc, #100]	@ (8005bd8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d004      	beq.n	8005b80 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a18      	ldr	r2, [pc, #96]	@ (8005bdc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d11c      	bne.n	8005bba <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8a:	051b      	lsls	r3, r3, #20
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	40012c00 	.word	0x40012c00
 8005bdc:	40013400 	.word	0x40013400

08005be0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d101      	bne.n	8005bf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e042      	b.n	8005c78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d106      	bne.n	8005c0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7fc fa59 	bl	80020bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2224      	movs	r2, #36	@ 0x24
 8005c0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 0201 	bic.w	r2, r2, #1
 8005c20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fbf8 	bl	8006420 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f929 	bl	8005e88 <UART_SetConfig>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d101      	bne.n	8005c40 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e01b      	b.n	8005c78 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0201 	orr.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fc77 	bl	8006564 <UART_CheckIdleState>
 8005c76:	4603      	mov	r3, r0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08a      	sub	sp, #40	@ 0x28
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c96:	2b20      	cmp	r3, #32
 8005c98:	d17b      	bne.n	8005d92 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <HAL_UART_Transmit+0x26>
 8005ca0:	88fb      	ldrh	r3, [r7, #6]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e074      	b.n	8005d94 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2221      	movs	r2, #33	@ 0x21
 8005cb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cba:	f7fc fb53 	bl	8002364 <HAL_GetTick>
 8005cbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	88fa      	ldrh	r2, [r7, #6]
 8005cc4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	88fa      	ldrh	r2, [r7, #6]
 8005ccc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cd8:	d108      	bne.n	8005cec <HAL_UART_Transmit+0x6c>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d104      	bne.n	8005cec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	61bb      	str	r3, [r7, #24]
 8005cea:	e003      	b.n	8005cf4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005cf4:	e030      	b.n	8005d58 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	2180      	movs	r1, #128	@ 0x80
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 fcd9 	bl	80066b8 <UART_WaitOnFlagUntilTimeout>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e03d      	b.n	8005d94 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10b      	bne.n	8005d36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	461a      	mov	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d2c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	3302      	adds	r3, #2
 8005d32:	61bb      	str	r3, [r7, #24]
 8005d34:	e007      	b.n	8005d46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	781a      	ldrb	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	3301      	adds	r3, #1
 8005d44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1c8      	bne.n	8005cf6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2140      	movs	r1, #64	@ 0x40
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 fca2 	bl	80066b8 <UART_WaitOnFlagUntilTimeout>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d005      	beq.n	8005d86 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e006      	b.n	8005d94 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	e000      	b.n	8005d94 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005d92:	2302      	movs	r3, #2
  }
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3720      	adds	r7, #32
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08a      	sub	sp, #40	@ 0x28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	4613      	mov	r3, r2
 8005da8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	d137      	bne.n	8005e24 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <HAL_UART_Receive_DMA+0x24>
 8005dba:	88fb      	ldrh	r3, [r7, #6]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e030      	b.n	8005e26 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a18      	ldr	r2, [pc, #96]	@ (8005e30 <HAL_UART_Receive_DMA+0x94>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d01f      	beq.n	8005e14 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d018      	beq.n	8005e14 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	e853 3f00 	ldrex	r3, [r3]
 8005dee:	613b      	str	r3, [r7, #16]
   return(result);
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005df6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e00:	623b      	str	r3, [r7, #32]
 8005e02:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e04:	69f9      	ldr	r1, [r7, #28]
 8005e06:	6a3a      	ldr	r2, [r7, #32]
 8005e08:	e841 2300 	strex	r3, r2, [r1]
 8005e0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1e6      	bne.n	8005de2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005e14:	88fb      	ldrh	r3, [r7, #6]
 8005e16:	461a      	mov	r2, r3
 8005e18:	68b9      	ldr	r1, [r7, #8]
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 fcba 	bl	8006794 <UART_Start_Receive_DMA>
 8005e20:	4603      	mov	r3, r0
 8005e22:	e000      	b.n	8005e26 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e24:	2302      	movs	r3, #2
  }
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3728      	adds	r7, #40	@ 0x28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	40008000 	.word	0x40008000

08005e34 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e8c:	b08c      	sub	sp, #48	@ 0x30
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	4bab      	ldr	r3, [pc, #684]	@ (8006164 <UART_SetConfig+0x2dc>)
 8005eb8:	4013      	ands	r3, r2
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	6812      	ldr	r2, [r2, #0]
 8005ebe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ec0:	430b      	orrs	r3, r1
 8005ec2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4aa0      	ldr	r2, [pc, #640]	@ (8006168 <UART_SetConfig+0x2e0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d004      	beq.n	8005ef4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005efe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	6812      	ldr	r2, [r2, #0]
 8005f06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f08:	430b      	orrs	r3, r1
 8005f0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f12:	f023 010f 	bic.w	r1, r3, #15
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a91      	ldr	r2, [pc, #580]	@ (800616c <UART_SetConfig+0x2e4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d125      	bne.n	8005f78 <UART_SetConfig+0xf0>
 8005f2c:	4b90      	ldr	r3, [pc, #576]	@ (8006170 <UART_SetConfig+0x2e8>)
 8005f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d81a      	bhi.n	8005f70 <UART_SetConfig+0xe8>
 8005f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f40 <UART_SetConfig+0xb8>)
 8005f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f40:	08005f51 	.word	0x08005f51
 8005f44:	08005f61 	.word	0x08005f61
 8005f48:	08005f59 	.word	0x08005f59
 8005f4c:	08005f69 	.word	0x08005f69
 8005f50:	2301      	movs	r3, #1
 8005f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f56:	e0d6      	b.n	8006106 <UART_SetConfig+0x27e>
 8005f58:	2302      	movs	r3, #2
 8005f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f5e:	e0d2      	b.n	8006106 <UART_SetConfig+0x27e>
 8005f60:	2304      	movs	r3, #4
 8005f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f66:	e0ce      	b.n	8006106 <UART_SetConfig+0x27e>
 8005f68:	2308      	movs	r3, #8
 8005f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f6e:	e0ca      	b.n	8006106 <UART_SetConfig+0x27e>
 8005f70:	2310      	movs	r3, #16
 8005f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f76:	e0c6      	b.n	8006106 <UART_SetConfig+0x27e>
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a7d      	ldr	r2, [pc, #500]	@ (8006174 <UART_SetConfig+0x2ec>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d138      	bne.n	8005ff4 <UART_SetConfig+0x16c>
 8005f82:	4b7b      	ldr	r3, [pc, #492]	@ (8006170 <UART_SetConfig+0x2e8>)
 8005f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f88:	f003 030c 	and.w	r3, r3, #12
 8005f8c:	2b0c      	cmp	r3, #12
 8005f8e:	d82d      	bhi.n	8005fec <UART_SetConfig+0x164>
 8005f90:	a201      	add	r2, pc, #4	@ (adr r2, 8005f98 <UART_SetConfig+0x110>)
 8005f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f96:	bf00      	nop
 8005f98:	08005fcd 	.word	0x08005fcd
 8005f9c:	08005fed 	.word	0x08005fed
 8005fa0:	08005fed 	.word	0x08005fed
 8005fa4:	08005fed 	.word	0x08005fed
 8005fa8:	08005fdd 	.word	0x08005fdd
 8005fac:	08005fed 	.word	0x08005fed
 8005fb0:	08005fed 	.word	0x08005fed
 8005fb4:	08005fed 	.word	0x08005fed
 8005fb8:	08005fd5 	.word	0x08005fd5
 8005fbc:	08005fed 	.word	0x08005fed
 8005fc0:	08005fed 	.word	0x08005fed
 8005fc4:	08005fed 	.word	0x08005fed
 8005fc8:	08005fe5 	.word	0x08005fe5
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fd2:	e098      	b.n	8006106 <UART_SetConfig+0x27e>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fda:	e094      	b.n	8006106 <UART_SetConfig+0x27e>
 8005fdc:	2304      	movs	r3, #4
 8005fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fe2:	e090      	b.n	8006106 <UART_SetConfig+0x27e>
 8005fe4:	2308      	movs	r3, #8
 8005fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fea:	e08c      	b.n	8006106 <UART_SetConfig+0x27e>
 8005fec:	2310      	movs	r3, #16
 8005fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ff2:	e088      	b.n	8006106 <UART_SetConfig+0x27e>
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a5f      	ldr	r2, [pc, #380]	@ (8006178 <UART_SetConfig+0x2f0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d125      	bne.n	800604a <UART_SetConfig+0x1c2>
 8005ffe:	4b5c      	ldr	r3, [pc, #368]	@ (8006170 <UART_SetConfig+0x2e8>)
 8006000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006004:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006008:	2b30      	cmp	r3, #48	@ 0x30
 800600a:	d016      	beq.n	800603a <UART_SetConfig+0x1b2>
 800600c:	2b30      	cmp	r3, #48	@ 0x30
 800600e:	d818      	bhi.n	8006042 <UART_SetConfig+0x1ba>
 8006010:	2b20      	cmp	r3, #32
 8006012:	d00a      	beq.n	800602a <UART_SetConfig+0x1a2>
 8006014:	2b20      	cmp	r3, #32
 8006016:	d814      	bhi.n	8006042 <UART_SetConfig+0x1ba>
 8006018:	2b00      	cmp	r3, #0
 800601a:	d002      	beq.n	8006022 <UART_SetConfig+0x19a>
 800601c:	2b10      	cmp	r3, #16
 800601e:	d008      	beq.n	8006032 <UART_SetConfig+0x1aa>
 8006020:	e00f      	b.n	8006042 <UART_SetConfig+0x1ba>
 8006022:	2300      	movs	r3, #0
 8006024:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006028:	e06d      	b.n	8006106 <UART_SetConfig+0x27e>
 800602a:	2302      	movs	r3, #2
 800602c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006030:	e069      	b.n	8006106 <UART_SetConfig+0x27e>
 8006032:	2304      	movs	r3, #4
 8006034:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006038:	e065      	b.n	8006106 <UART_SetConfig+0x27e>
 800603a:	2308      	movs	r3, #8
 800603c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006040:	e061      	b.n	8006106 <UART_SetConfig+0x27e>
 8006042:	2310      	movs	r3, #16
 8006044:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006048:	e05d      	b.n	8006106 <UART_SetConfig+0x27e>
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a4b      	ldr	r2, [pc, #300]	@ (800617c <UART_SetConfig+0x2f4>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d125      	bne.n	80060a0 <UART_SetConfig+0x218>
 8006054:	4b46      	ldr	r3, [pc, #280]	@ (8006170 <UART_SetConfig+0x2e8>)
 8006056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800605a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800605e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006060:	d016      	beq.n	8006090 <UART_SetConfig+0x208>
 8006062:	2bc0      	cmp	r3, #192	@ 0xc0
 8006064:	d818      	bhi.n	8006098 <UART_SetConfig+0x210>
 8006066:	2b80      	cmp	r3, #128	@ 0x80
 8006068:	d00a      	beq.n	8006080 <UART_SetConfig+0x1f8>
 800606a:	2b80      	cmp	r3, #128	@ 0x80
 800606c:	d814      	bhi.n	8006098 <UART_SetConfig+0x210>
 800606e:	2b00      	cmp	r3, #0
 8006070:	d002      	beq.n	8006078 <UART_SetConfig+0x1f0>
 8006072:	2b40      	cmp	r3, #64	@ 0x40
 8006074:	d008      	beq.n	8006088 <UART_SetConfig+0x200>
 8006076:	e00f      	b.n	8006098 <UART_SetConfig+0x210>
 8006078:	2300      	movs	r3, #0
 800607a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800607e:	e042      	b.n	8006106 <UART_SetConfig+0x27e>
 8006080:	2302      	movs	r3, #2
 8006082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006086:	e03e      	b.n	8006106 <UART_SetConfig+0x27e>
 8006088:	2304      	movs	r3, #4
 800608a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800608e:	e03a      	b.n	8006106 <UART_SetConfig+0x27e>
 8006090:	2308      	movs	r3, #8
 8006092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006096:	e036      	b.n	8006106 <UART_SetConfig+0x27e>
 8006098:	2310      	movs	r3, #16
 800609a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800609e:	e032      	b.n	8006106 <UART_SetConfig+0x27e>
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a30      	ldr	r2, [pc, #192]	@ (8006168 <UART_SetConfig+0x2e0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d12a      	bne.n	8006100 <UART_SetConfig+0x278>
 80060aa:	4b31      	ldr	r3, [pc, #196]	@ (8006170 <UART_SetConfig+0x2e8>)
 80060ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80060b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060b8:	d01a      	beq.n	80060f0 <UART_SetConfig+0x268>
 80060ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060be:	d81b      	bhi.n	80060f8 <UART_SetConfig+0x270>
 80060c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060c4:	d00c      	beq.n	80060e0 <UART_SetConfig+0x258>
 80060c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060ca:	d815      	bhi.n	80060f8 <UART_SetConfig+0x270>
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d003      	beq.n	80060d8 <UART_SetConfig+0x250>
 80060d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060d4:	d008      	beq.n	80060e8 <UART_SetConfig+0x260>
 80060d6:	e00f      	b.n	80060f8 <UART_SetConfig+0x270>
 80060d8:	2300      	movs	r3, #0
 80060da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060de:	e012      	b.n	8006106 <UART_SetConfig+0x27e>
 80060e0:	2302      	movs	r3, #2
 80060e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060e6:	e00e      	b.n	8006106 <UART_SetConfig+0x27e>
 80060e8:	2304      	movs	r3, #4
 80060ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ee:	e00a      	b.n	8006106 <UART_SetConfig+0x27e>
 80060f0:	2308      	movs	r3, #8
 80060f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060f6:	e006      	b.n	8006106 <UART_SetConfig+0x27e>
 80060f8:	2310      	movs	r3, #16
 80060fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060fe:	e002      	b.n	8006106 <UART_SetConfig+0x27e>
 8006100:	2310      	movs	r3, #16
 8006102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a17      	ldr	r2, [pc, #92]	@ (8006168 <UART_SetConfig+0x2e0>)
 800610c:	4293      	cmp	r3, r2
 800610e:	f040 80a8 	bne.w	8006262 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006112:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006116:	2b08      	cmp	r3, #8
 8006118:	d834      	bhi.n	8006184 <UART_SetConfig+0x2fc>
 800611a:	a201      	add	r2, pc, #4	@ (adr r2, 8006120 <UART_SetConfig+0x298>)
 800611c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006120:	08006145 	.word	0x08006145
 8006124:	08006185 	.word	0x08006185
 8006128:	0800614d 	.word	0x0800614d
 800612c:	08006185 	.word	0x08006185
 8006130:	08006153 	.word	0x08006153
 8006134:	08006185 	.word	0x08006185
 8006138:	08006185 	.word	0x08006185
 800613c:	08006185 	.word	0x08006185
 8006140:	0800615b 	.word	0x0800615b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006144:	f7fd fbde 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 8006148:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800614a:	e021      	b.n	8006190 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800614c:	4b0c      	ldr	r3, [pc, #48]	@ (8006180 <UART_SetConfig+0x2f8>)
 800614e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006150:	e01e      	b.n	8006190 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006152:	f7fd fb6b 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8006156:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006158:	e01a      	b.n	8006190 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800615a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800615e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006160:	e016      	b.n	8006190 <UART_SetConfig+0x308>
 8006162:	bf00      	nop
 8006164:	cfff69f3 	.word	0xcfff69f3
 8006168:	40008000 	.word	0x40008000
 800616c:	40013800 	.word	0x40013800
 8006170:	40021000 	.word	0x40021000
 8006174:	40004400 	.word	0x40004400
 8006178:	40004800 	.word	0x40004800
 800617c:	40004c00 	.word	0x40004c00
 8006180:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006184:	2300      	movs	r3, #0
 8006186:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800618e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 812a 	beq.w	80063ec <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619c:	4a9e      	ldr	r2, [pc, #632]	@ (8006418 <UART_SetConfig+0x590>)
 800619e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061a2:	461a      	mov	r2, r3
 80061a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	4613      	mov	r3, r2
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	4413      	add	r3, r2
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d305      	bcc.n	80061c8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d903      	bls.n	80061d0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80061ce:	e10d      	b.n	80063ec <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d2:	2200      	movs	r2, #0
 80061d4:	60bb      	str	r3, [r7, #8]
 80061d6:	60fa      	str	r2, [r7, #12]
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061dc:	4a8e      	ldr	r2, [pc, #568]	@ (8006418 <UART_SetConfig+0x590>)
 80061de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	2200      	movs	r2, #0
 80061e6:	603b      	str	r3, [r7, #0]
 80061e8:	607a      	str	r2, [r7, #4]
 80061ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80061f2:	f7fa fd71 	bl	8000cd8 <__aeabi_uldivmod>
 80061f6:	4602      	mov	r2, r0
 80061f8:	460b      	mov	r3, r1
 80061fa:	4610      	mov	r0, r2
 80061fc:	4619      	mov	r1, r3
 80061fe:	f04f 0200 	mov.w	r2, #0
 8006202:	f04f 0300 	mov.w	r3, #0
 8006206:	020b      	lsls	r3, r1, #8
 8006208:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800620c:	0202      	lsls	r2, r0, #8
 800620e:	6979      	ldr	r1, [r7, #20]
 8006210:	6849      	ldr	r1, [r1, #4]
 8006212:	0849      	lsrs	r1, r1, #1
 8006214:	2000      	movs	r0, #0
 8006216:	460c      	mov	r4, r1
 8006218:	4605      	mov	r5, r0
 800621a:	eb12 0804 	adds.w	r8, r2, r4
 800621e:	eb43 0905 	adc.w	r9, r3, r5
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	469a      	mov	sl, r3
 800622a:	4693      	mov	fp, r2
 800622c:	4652      	mov	r2, sl
 800622e:	465b      	mov	r3, fp
 8006230:	4640      	mov	r0, r8
 8006232:	4649      	mov	r1, r9
 8006234:	f7fa fd50 	bl	8000cd8 <__aeabi_uldivmod>
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	4613      	mov	r3, r2
 800623e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006246:	d308      	bcc.n	800625a <UART_SetConfig+0x3d2>
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800624e:	d204      	bcs.n	800625a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6a3a      	ldr	r2, [r7, #32]
 8006256:	60da      	str	r2, [r3, #12]
 8006258:	e0c8      	b.n	80063ec <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006260:	e0c4      	b.n	80063ec <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800626a:	d167      	bne.n	800633c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800626c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006270:	2b08      	cmp	r3, #8
 8006272:	d828      	bhi.n	80062c6 <UART_SetConfig+0x43e>
 8006274:	a201      	add	r2, pc, #4	@ (adr r2, 800627c <UART_SetConfig+0x3f4>)
 8006276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627a:	bf00      	nop
 800627c:	080062a1 	.word	0x080062a1
 8006280:	080062a9 	.word	0x080062a9
 8006284:	080062b1 	.word	0x080062b1
 8006288:	080062c7 	.word	0x080062c7
 800628c:	080062b7 	.word	0x080062b7
 8006290:	080062c7 	.word	0x080062c7
 8006294:	080062c7 	.word	0x080062c7
 8006298:	080062c7 	.word	0x080062c7
 800629c:	080062bf 	.word	0x080062bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a0:	f7fd fb30 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 80062a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062a6:	e014      	b.n	80062d2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062a8:	f7fd fb42 	bl	8003930 <HAL_RCC_GetPCLK2Freq>
 80062ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062ae:	e010      	b.n	80062d2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062b0:	4b5a      	ldr	r3, [pc, #360]	@ (800641c <UART_SetConfig+0x594>)
 80062b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062b4:	e00d      	b.n	80062d2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062b6:	f7fd fab9 	bl	800382c <HAL_RCC_GetSysClockFreq>
 80062ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062bc:	e009      	b.n	80062d2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062c4:	e005      	b.n	80062d2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80062d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 8089 	beq.w	80063ec <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062de:	4a4e      	ldr	r2, [pc, #312]	@ (8006418 <UART_SetConfig+0x590>)
 80062e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062e4:	461a      	mov	r2, r3
 80062e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80062ec:	005a      	lsls	r2, r3, #1
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	085b      	lsrs	r3, r3, #1
 80062f4:	441a      	add	r2, r3
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80062fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	2b0f      	cmp	r3, #15
 8006304:	d916      	bls.n	8006334 <UART_SetConfig+0x4ac>
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800630c:	d212      	bcs.n	8006334 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	b29b      	uxth	r3, r3
 8006312:	f023 030f 	bic.w	r3, r3, #15
 8006316:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	085b      	lsrs	r3, r3, #1
 800631c:	b29b      	uxth	r3, r3
 800631e:	f003 0307 	and.w	r3, r3, #7
 8006322:	b29a      	uxth	r2, r3
 8006324:	8bfb      	ldrh	r3, [r7, #30]
 8006326:	4313      	orrs	r3, r2
 8006328:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	8bfa      	ldrh	r2, [r7, #30]
 8006330:	60da      	str	r2, [r3, #12]
 8006332:	e05b      	b.n	80063ec <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800633a:	e057      	b.n	80063ec <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800633c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006340:	2b08      	cmp	r3, #8
 8006342:	d828      	bhi.n	8006396 <UART_SetConfig+0x50e>
 8006344:	a201      	add	r2, pc, #4	@ (adr r2, 800634c <UART_SetConfig+0x4c4>)
 8006346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634a:	bf00      	nop
 800634c:	08006371 	.word	0x08006371
 8006350:	08006379 	.word	0x08006379
 8006354:	08006381 	.word	0x08006381
 8006358:	08006397 	.word	0x08006397
 800635c:	08006387 	.word	0x08006387
 8006360:	08006397 	.word	0x08006397
 8006364:	08006397 	.word	0x08006397
 8006368:	08006397 	.word	0x08006397
 800636c:	0800638f 	.word	0x0800638f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006370:	f7fd fac8 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 8006374:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006376:	e014      	b.n	80063a2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006378:	f7fd fada 	bl	8003930 <HAL_RCC_GetPCLK2Freq>
 800637c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800637e:	e010      	b.n	80063a2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006380:	4b26      	ldr	r3, [pc, #152]	@ (800641c <UART_SetConfig+0x594>)
 8006382:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006384:	e00d      	b.n	80063a2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006386:	f7fd fa51 	bl	800382c <HAL_RCC_GetSysClockFreq>
 800638a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800638c:	e009      	b.n	80063a2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800638e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006392:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006394:	e005      	b.n	80063a2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80063a0:	bf00      	nop
    }

    if (pclk != 0U)
 80063a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d021      	beq.n	80063ec <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ac:	4a1a      	ldr	r2, [pc, #104]	@ (8006418 <UART_SetConfig+0x590>)
 80063ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063b2:	461a      	mov	r2, r3
 80063b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	085b      	lsrs	r3, r3, #1
 80063c0:	441a      	add	r2, r3
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	2b0f      	cmp	r3, #15
 80063d0:	d909      	bls.n	80063e6 <UART_SetConfig+0x55e>
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063d8:	d205      	bcs.n	80063e6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	b29a      	uxth	r2, r3
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	60da      	str	r2, [r3, #12]
 80063e4:	e002      	b.n	80063ec <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2200      	movs	r2, #0
 8006400:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2200      	movs	r2, #0
 8006406:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006408:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800640c:	4618      	mov	r0, r3
 800640e:	3730      	adds	r7, #48	@ 0x30
 8006410:	46bd      	mov	sp, r7
 8006412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006416:	bf00      	nop
 8006418:	0800d2c4 	.word	0x0800d2c4
 800641c:	00f42400 	.word	0x00f42400

08006420 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800642c:	f003 0308 	and.w	r3, r3, #8
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00a      	beq.n	800644a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00a      	beq.n	800646c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00a      	beq.n	800648e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006492:	f003 0304 	and.w	r3, r3, #4
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	430a      	orrs	r2, r1
 80064ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b4:	f003 0310 	and.w	r3, r3, #16
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00a      	beq.n	80064d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d6:	f003 0320 	and.w	r3, r3, #32
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00a      	beq.n	80064f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01a      	beq.n	8006536 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800651a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800651e:	d10a      	bne.n	8006536 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	430a      	orrs	r2, r1
 8006534:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800653a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00a      	beq.n	8006558 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	430a      	orrs	r2, r1
 8006556:	605a      	str	r2, [r3, #4]
  }
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b098      	sub	sp, #96	@ 0x60
 8006568:	af02      	add	r7, sp, #8
 800656a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006574:	f7fb fef6 	bl	8002364 <HAL_GetTick>
 8006578:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0308 	and.w	r3, r3, #8
 8006584:	2b08      	cmp	r3, #8
 8006586:	d12f      	bne.n	80065e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006588:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006590:	2200      	movs	r2, #0
 8006592:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f88e 	bl	80066b8 <UART_WaitOnFlagUntilTimeout>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d022      	beq.n	80065e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065aa:	e853 3f00 	ldrex	r3, [r3]
 80065ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80065b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	461a      	mov	r2, r3
 80065be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80065c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065c8:	e841 2300 	strex	r3, r2, [r1]
 80065cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e6      	bne.n	80065a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e063      	b.n	80066b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0304 	and.w	r3, r3, #4
 80065f2:	2b04      	cmp	r3, #4
 80065f4:	d149      	bne.n	800668a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065fe:	2200      	movs	r2, #0
 8006600:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f857 	bl	80066b8 <UART_WaitOnFlagUntilTimeout>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d03c      	beq.n	800668a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006618:	e853 3f00 	ldrex	r3, [r3]
 800661c:	623b      	str	r3, [r7, #32]
   return(result);
 800661e:	6a3b      	ldr	r3, [r7, #32]
 8006620:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006624:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	461a      	mov	r2, r3
 800662c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800662e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006630:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006632:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006634:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006636:	e841 2300 	strex	r3, r2, [r1]
 800663a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800663c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1e6      	bne.n	8006610 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3308      	adds	r3, #8
 8006648:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	60fb      	str	r3, [r7, #12]
   return(result);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f023 0301 	bic.w	r3, r3, #1
 8006658:	64bb      	str	r3, [r7, #72]	@ 0x48
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3308      	adds	r3, #8
 8006660:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006662:	61fa      	str	r2, [r7, #28]
 8006664:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006666:	69b9      	ldr	r1, [r7, #24]
 8006668:	69fa      	ldr	r2, [r7, #28]
 800666a:	e841 2300 	strex	r3, r2, [r1]
 800666e:	617b      	str	r3, [r7, #20]
   return(result);
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1e5      	bne.n	8006642 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2220      	movs	r2, #32
 800667a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e012      	b.n	80066b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2220      	movs	r2, #32
 800668e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2220      	movs	r2, #32
 8006696:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3758      	adds	r7, #88	@ 0x58
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	603b      	str	r3, [r7, #0]
 80066c4:	4613      	mov	r3, r2
 80066c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066c8:	e04f      	b.n	800676a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d0:	d04b      	beq.n	800676a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066d2:	f7fb fe47 	bl	8002364 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d302      	bcc.n	80066e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e04e      	b.n	800678a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0304 	and.w	r3, r3, #4
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d037      	beq.n	800676a <UART_WaitOnFlagUntilTimeout+0xb2>
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2b80      	cmp	r3, #128	@ 0x80
 80066fe:	d034      	beq.n	800676a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2b40      	cmp	r3, #64	@ 0x40
 8006704:	d031      	beq.n	800676a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	f003 0308 	and.w	r3, r3, #8
 8006710:	2b08      	cmp	r3, #8
 8006712:	d110      	bne.n	8006736 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2208      	movs	r2, #8
 800671a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f000 f920 	bl	8006962 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2208      	movs	r2, #8
 8006726:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e029      	b.n	800678a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006740:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006744:	d111      	bne.n	800676a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800674e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 f906 	bl	8006962 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2220      	movs	r2, #32
 800675a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e00f      	b.n	800678a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	69da      	ldr	r2, [r3, #28]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	4013      	ands	r3, r2
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	429a      	cmp	r2, r3
 8006778:	bf0c      	ite	eq
 800677a:	2301      	moveq	r3, #1
 800677c:	2300      	movne	r3, #0
 800677e:	b2db      	uxtb	r3, r3
 8006780:	461a      	mov	r2, r3
 8006782:	79fb      	ldrb	r3, [r7, #7]
 8006784:	429a      	cmp	r2, r3
 8006786:	d0a0      	beq.n	80066ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
	...

08006794 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b096      	sub	sp, #88	@ 0x58
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	4613      	mov	r3, r2
 80067a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	88fa      	ldrh	r2, [r7, #6]
 80067ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2222      	movs	r2, #34	@ 0x22
 80067bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d02d      	beq.n	8006826 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067d0:	4a40      	ldr	r2, [pc, #256]	@ (80068d4 <UART_Start_Receive_DMA+0x140>)
 80067d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067da:	4a3f      	ldr	r2, [pc, #252]	@ (80068d8 <UART_Start_Receive_DMA+0x144>)
 80067dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067e4:	4a3d      	ldr	r2, [pc, #244]	@ (80068dc <UART_Start_Receive_DMA+0x148>)
 80067e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067ee:	2200      	movs	r2, #0
 80067f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3324      	adds	r3, #36	@ 0x24
 80067fe:	4619      	mov	r1, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006804:	461a      	mov	r2, r3
 8006806:	88fb      	ldrh	r3, [r7, #6]
 8006808:	f7fb ff92 	bl	8002730 <HAL_DMA_Start_IT>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d009      	beq.n	8006826 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2210      	movs	r2, #16
 8006816:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2220      	movs	r2, #32
 800681e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e051      	b.n	80068ca <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d018      	beq.n	8006860 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006836:	e853 3f00 	ldrex	r3, [r3]
 800683a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800683c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006842:	657b      	str	r3, [r7, #84]	@ 0x54
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	461a      	mov	r2, r3
 800684a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800684c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800684e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006850:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006852:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006854:	e841 2300 	strex	r3, r2, [r1]
 8006858:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800685a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1e6      	bne.n	800682e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3308      	adds	r3, #8
 8006866:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686a:	e853 3f00 	ldrex	r3, [r3]
 800686e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006872:	f043 0301 	orr.w	r3, r3, #1
 8006876:	653b      	str	r3, [r7, #80]	@ 0x50
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3308      	adds	r3, #8
 800687e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006880:	637a      	str	r2, [r7, #52]	@ 0x34
 8006882:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006884:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006886:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006888:	e841 2300 	strex	r3, r2, [r1]
 800688c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800688e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1e5      	bne.n	8006860 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3308      	adds	r3, #8
 800689a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	e853 3f00 	ldrex	r3, [r3]
 80068a2:	613b      	str	r3, [r7, #16]
   return(result);
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3308      	adds	r3, #8
 80068b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068b4:	623a      	str	r2, [r7, #32]
 80068b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b8:	69f9      	ldr	r1, [r7, #28]
 80068ba:	6a3a      	ldr	r2, [r7, #32]
 80068bc:	e841 2300 	strex	r3, r2, [r1]
 80068c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e5      	bne.n	8006894 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3758      	adds	r7, #88	@ 0x58
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	08006a2f 	.word	0x08006a2f
 80068d8:	08006b5b 	.word	0x08006b5b
 80068dc:	08006b99 	.word	0x08006b99

080068e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b08f      	sub	sp, #60	@ 0x3c
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	e853 3f00 	ldrex	r3, [r3]
 80068f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80068fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006906:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006908:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800690c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800690e:	e841 2300 	strex	r3, r2, [r1]
 8006912:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1e6      	bne.n	80068e8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3308      	adds	r3, #8
 8006920:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	e853 3f00 	ldrex	r3, [r3]
 8006928:	60bb      	str	r3, [r7, #8]
   return(result);
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006930:	633b      	str	r3, [r7, #48]	@ 0x30
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3308      	adds	r3, #8
 8006938:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800693a:	61ba      	str	r2, [r7, #24]
 800693c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693e:	6979      	ldr	r1, [r7, #20]
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	e841 2300 	strex	r3, r2, [r1]
 8006946:	613b      	str	r3, [r7, #16]
   return(result);
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1e5      	bne.n	800691a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2220      	movs	r2, #32
 8006952:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006956:	bf00      	nop
 8006958:	373c      	adds	r7, #60	@ 0x3c
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006962:	b480      	push	{r7}
 8006964:	b095      	sub	sp, #84	@ 0x54
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006972:	e853 3f00 	ldrex	r3, [r3]
 8006976:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800697e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
 8006986:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006988:	643b      	str	r3, [r7, #64]	@ 0x40
 800698a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800698e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e6      	bne.n	800696a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3308      	adds	r3, #8
 80069a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	e853 3f00 	ldrex	r3, [r3]
 80069aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069b2:	f023 0301 	bic.w	r3, r3, #1
 80069b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3308      	adds	r3, #8
 80069be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069c8:	e841 2300 	strex	r3, r2, [r1]
 80069cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1e3      	bne.n	800699c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d118      	bne.n	8006a0e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f023 0310 	bic.w	r3, r3, #16
 80069f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	461a      	mov	r2, r3
 80069f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069fa:	61bb      	str	r3, [r7, #24]
 80069fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	6979      	ldr	r1, [r7, #20]
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	613b      	str	r3, [r7, #16]
   return(result);
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1e6      	bne.n	80069dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2220      	movs	r2, #32
 8006a12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006a22:	bf00      	nop
 8006a24:	3754      	adds	r7, #84	@ 0x54
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b09c      	sub	sp, #112	@ 0x70
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a3a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0320 	and.w	r3, r3, #32
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d171      	bne.n	8006b2e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006a4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a62:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a66:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a72:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a78:	e841 2300 	strex	r3, r2, [r1]
 8006a7c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e6      	bne.n	8006a52 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3308      	adds	r3, #8
 8006a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a8e:	e853 3f00 	ldrex	r3, [r3]
 8006a92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a96:	f023 0301 	bic.w	r3, r3, #1
 8006a9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006aa4:	647a      	str	r2, [r7, #68]	@ 0x44
 8006aa6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006aaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006aac:	e841 2300 	strex	r3, r2, [r1]
 8006ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1e5      	bne.n	8006a84 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ab8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	3308      	adds	r3, #8
 8006abe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac2:	e853 3f00 	ldrex	r3, [r3]
 8006ac6:	623b      	str	r3, [r7, #32]
   return(result);
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ace:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ad0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3308      	adds	r3, #8
 8006ad6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006ad8:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006adc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ae0:	e841 2300 	strex	r3, r2, [r1]
 8006ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1e5      	bne.n	8006ab8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006aec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aee:	2220      	movs	r2, #32
 8006af0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006af4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006af6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d118      	bne.n	8006b2e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006afc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f023 0310 	bic.w	r3, r3, #16
 8006b10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b1a:	61fb      	str	r3, [r7, #28]
 8006b1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1e:	69b9      	ldr	r1, [r7, #24]
 8006b20:	69fa      	ldr	r2, [r7, #28]
 8006b22:	e841 2300 	strex	r3, r2, [r1]
 8006b26:	617b      	str	r3, [r7, #20]
   return(result);
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1e6      	bne.n	8006afc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b30:	2200      	movs	r2, #0
 8006b32:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d107      	bne.n	8006b4c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b42:	4619      	mov	r1, r3
 8006b44:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006b46:	f7ff f993 	bl	8005e70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b4a:	e002      	b.n	8006b52 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006b4c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006b4e:	f7ff f971 	bl	8005e34 <HAL_UART_RxCpltCallback>
}
 8006b52:	bf00      	nop
 8006b54:	3770      	adds	r7, #112	@ 0x70
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d109      	bne.n	8006b8a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b7c:	085b      	lsrs	r3, r3, #1
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	4619      	mov	r1, r3
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f7ff f974 	bl	8005e70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b88:	e002      	b.n	8006b90 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7ff f95c 	bl	8005e48 <HAL_UART_RxHalfCpltCallback>
}
 8006b90:	bf00      	nop
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bac:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bb4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bc0:	2b80      	cmp	r3, #128	@ 0x80
 8006bc2:	d109      	bne.n	8006bd8 <UART_DMAError+0x40>
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	2b21      	cmp	r3, #33	@ 0x21
 8006bc8:	d106      	bne.n	8006bd8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006bd2:	6978      	ldr	r0, [r7, #20]
 8006bd4:	f7ff fe84 	bl	80068e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be2:	2b40      	cmp	r3, #64	@ 0x40
 8006be4:	d109      	bne.n	8006bfa <UART_DMAError+0x62>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2b22      	cmp	r3, #34	@ 0x22
 8006bea:	d106      	bne.n	8006bfa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006bf4:	6978      	ldr	r0, [r7, #20]
 8006bf6:	f7ff feb4 	bl	8006962 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c00:	f043 0210 	orr.w	r2, r3, #16
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c0a:	6978      	ldr	r0, [r7, #20]
 8006c0c:	f7ff f926 	bl	8005e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c10:	bf00      	nop
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d101      	bne.n	8006c2e <HAL_UARTEx_DisableFifoMode+0x16>
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	e027      	b.n	8006c7e <HAL_UARTEx_DisableFifoMode+0x66>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2224      	movs	r2, #36	@ 0x24
 8006c3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 0201 	bic.w	r2, r2, #1
 8006c54:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006c5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b084      	sub	sp, #16
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d101      	bne.n	8006ca2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c9e:	2302      	movs	r3, #2
 8006ca0:	e02d      	b.n	8006cfe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2224      	movs	r2, #36	@ 0x24
 8006cae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f022 0201 	bic.w	r2, r2, #1
 8006cc8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f850 	bl	8006d84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d101      	bne.n	8006d1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	e02d      	b.n	8006d7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2224      	movs	r2, #36	@ 0x24
 8006d2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f022 0201 	bic.w	r2, r2, #1
 8006d44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f812 	bl	8006d84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
	...

08006d84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d108      	bne.n	8006da6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006da4:	e031      	b.n	8006e0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006da6:	2308      	movs	r3, #8
 8006da8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006daa:	2308      	movs	r3, #8
 8006dac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	0e5b      	lsrs	r3, r3, #25
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	f003 0307 	and.w	r3, r3, #7
 8006dbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	0f5b      	lsrs	r3, r3, #29
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	f003 0307 	and.w	r3, r3, #7
 8006dcc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dce:	7bbb      	ldrb	r3, [r7, #14]
 8006dd0:	7b3a      	ldrb	r2, [r7, #12]
 8006dd2:	4911      	ldr	r1, [pc, #68]	@ (8006e18 <UARTEx_SetNbDataToProcess+0x94>)
 8006dd4:	5c8a      	ldrb	r2, [r1, r2]
 8006dd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006dda:	7b3a      	ldrb	r2, [r7, #12]
 8006ddc:	490f      	ldr	r1, [pc, #60]	@ (8006e1c <UARTEx_SetNbDataToProcess+0x98>)
 8006dde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006de0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
 8006dee:	7b7a      	ldrb	r2, [r7, #13]
 8006df0:	4909      	ldr	r1, [pc, #36]	@ (8006e18 <UARTEx_SetNbDataToProcess+0x94>)
 8006df2:	5c8a      	ldrb	r2, [r1, r2]
 8006df4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006df8:	7b7a      	ldrb	r2, [r7, #13]
 8006dfa:	4908      	ldr	r1, [pc, #32]	@ (8006e1c <UARTEx_SetNbDataToProcess+0x98>)
 8006dfc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dfe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006e0a:	bf00      	nop
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	0800d2dc 	.word	0x0800d2dc
 8006e1c:	0800d2e4 	.word	0x0800d2e4

08006e20 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	4603      	mov	r3, r0
 8006e28:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e32:	2b84      	cmp	r3, #132	@ 0x84
 8006e34:	d005      	beq.n	8006e42 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006e36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	3303      	adds	r3, #3
 8006e40:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006e42:	68fb      	ldr	r3, [r7, #12]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006e54:	f000 fb1c 	bl	8007490 <vTaskStartScheduler>
  
  return osOK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e60:	b087      	sub	sp, #28
 8006e62:	af02      	add	r7, sp, #8
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685c      	ldr	r4, [r3, #4]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e74:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7ff ffcf 	bl	8006e20 <makeFreeRtosPriority>
 8006e82:	4602      	mov	r2, r0
 8006e84:	f107 030c 	add.w	r3, r7, #12
 8006e88:	9301      	str	r3, [sp, #4]
 8006e8a:	9200      	str	r2, [sp, #0]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	4632      	mov	r2, r6
 8006e90:	4629      	mov	r1, r5
 8006e92:	4620      	mov	r0, r4
 8006e94:	f000 f992 	bl	80071bc <xTaskCreate>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d001      	beq.n	8006ea2 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	e000      	b.n	8006ea4 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006eac <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <osDelay+0x16>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	e000      	b.n	8006ec4 <osDelay+0x18>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 faad 	bl	8007424 <vTaskDelay>
  
  return osOK;
 8006eca:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f103 0208 	add.w	r2, r3, #8
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8006eec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f103 0208 	add.w	r2, r3, #8
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f103 0208 	add.w	r2, r3, #8
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f22:	bf00      	nop
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b085      	sub	sp, #20
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	689a      	ldr	r2, [r3, #8]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	1c5a      	adds	r2, r3, #1
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	601a      	str	r2, [r3, #0]
}
 8006f6a:	bf00      	nop
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f76:	b480      	push	{r7}
 8006f78:	b085      	sub	sp, #20
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8c:	d103      	bne.n	8006f96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	e00c      	b.n	8006fb0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	3308      	adds	r3, #8
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	e002      	b.n	8006fa4 <vListInsert+0x2e>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	60fb      	str	r3, [r7, #12]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d2f6      	bcs.n	8006f9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	601a      	str	r2, [r3, #0]
}
 8006fdc:	bf00      	nop
 8006fde:	3714      	adds	r7, #20
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	6892      	ldr	r2, [r2, #8]
 8006ffe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	6852      	ldr	r2, [r2, #4]
 8007008:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	429a      	cmp	r2, r3
 8007012:	d103      	bne.n	800701c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	1e5a      	subs	r2, r3, #1
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10b      	bne.n	8007068 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007062:	bf00      	nop
 8007064:	bf00      	nop
 8007066:	e7fd      	b.n	8007064 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007068:	f000 ffc6 	bl	8007ff8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007074:	68f9      	ldr	r1, [r7, #12]
 8007076:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007078:	fb01 f303 	mul.w	r3, r1, r3
 800707c:	441a      	add	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007098:	3b01      	subs	r3, #1
 800709a:	68f9      	ldr	r1, [r7, #12]
 800709c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800709e:	fb01 f303 	mul.w	r3, r1, r3
 80070a2:	441a      	add	r2, r3
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	22ff      	movs	r2, #255	@ 0xff
 80070ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	22ff      	movs	r2, #255	@ 0xff
 80070b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d114      	bne.n	80070e8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d01a      	beq.n	80070fc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3310      	adds	r3, #16
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 fbea 	bl	80078a4 <xTaskRemoveFromEventList>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d012      	beq.n	80070fc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80070d6:	4b0d      	ldr	r3, [pc, #52]	@ (800710c <xQueueGenericReset+0xd0>)
 80070d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070dc:	601a      	str	r2, [r3, #0]
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	e009      	b.n	80070fc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3310      	adds	r3, #16
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7ff fef1 	bl	8006ed4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	3324      	adds	r3, #36	@ 0x24
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7ff feec 	bl	8006ed4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80070fc:	f000 ffae 	bl	800805c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007100:	2301      	movs	r3, #1
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	e000ed04 	.word	0xe000ed04

08007110 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007110:	b580      	push	{r7, lr}
 8007112:	b08a      	sub	sp, #40	@ 0x28
 8007114:	af02      	add	r7, sp, #8
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	4613      	mov	r3, r2
 800711c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10b      	bne.n	800713c <xQueueGenericCreate+0x2c>
	__asm volatile
 8007124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007128:	f383 8811 	msr	BASEPRI, r3
 800712c:	f3bf 8f6f 	isb	sy
 8007130:	f3bf 8f4f 	dsb	sy
 8007134:	613b      	str	r3, [r7, #16]
}
 8007136:	bf00      	nop
 8007138:	bf00      	nop
 800713a:	e7fd      	b.n	8007138 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	fb02 f303 	mul.w	r3, r2, r3
 8007144:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	3348      	adds	r3, #72	@ 0x48
 800714a:	4618      	mov	r0, r3
 800714c:	f001 f876 	bl	800823c <pvPortMalloc>
 8007150:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00d      	beq.n	8007174 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	3348      	adds	r3, #72	@ 0x48
 8007160:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007162:	79fa      	ldrb	r2, [r7, #7]
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	4613      	mov	r3, r2
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	68b9      	ldr	r1, [r7, #8]
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 f805 	bl	800717e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007174:	69bb      	ldr	r3, [r7, #24]
	}
 8007176:	4618      	mov	r0, r3
 8007178:	3720      	adds	r7, #32
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b084      	sub	sp, #16
 8007182:	af00      	add	r7, sp, #0
 8007184:	60f8      	str	r0, [r7, #12]
 8007186:	60b9      	str	r1, [r7, #8]
 8007188:	607a      	str	r2, [r7, #4]
 800718a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d103      	bne.n	800719a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	69ba      	ldr	r2, [r7, #24]
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	e002      	b.n	80071a0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80071ac:	2101      	movs	r1, #1
 80071ae:	69b8      	ldr	r0, [r7, #24]
 80071b0:	f7ff ff44 	bl	800703c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80071b4:	bf00      	nop
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b08c      	sub	sp, #48	@ 0x30
 80071c0:	af04      	add	r7, sp, #16
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	603b      	str	r3, [r7, #0]
 80071c8:	4613      	mov	r3, r2
 80071ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071cc:	88fb      	ldrh	r3, [r7, #6]
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4618      	mov	r0, r3
 80071d2:	f001 f833 	bl	800823c <pvPortMalloc>
 80071d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00e      	beq.n	80071fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80071de:	2054      	movs	r0, #84	@ 0x54
 80071e0:	f001 f82c 	bl	800823c <pvPortMalloc>
 80071e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80071f2:	e005      	b.n	8007200 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80071f4:	6978      	ldr	r0, [r7, #20]
 80071f6:	f001 f8ef 	bl	80083d8 <vPortFree>
 80071fa:	e001      	b.n	8007200 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80071fc:	2300      	movs	r3, #0
 80071fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d013      	beq.n	800722e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007206:	88fa      	ldrh	r2, [r7, #6]
 8007208:	2300      	movs	r3, #0
 800720a:	9303      	str	r3, [sp, #12]
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	9302      	str	r3, [sp, #8]
 8007210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007212:	9301      	str	r3, [sp, #4]
 8007214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	68b9      	ldr	r1, [r7, #8]
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 f80e 	bl	800723e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007222:	69f8      	ldr	r0, [r7, #28]
 8007224:	f000 f894 	bl	8007350 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007228:	2301      	movs	r3, #1
 800722a:	61bb      	str	r3, [r7, #24]
 800722c:	e002      	b.n	8007234 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800722e:	f04f 33ff 	mov.w	r3, #4294967295
 8007232:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007234:	69bb      	ldr	r3, [r7, #24]
	}
 8007236:	4618      	mov	r0, r3
 8007238:	3720      	adds	r7, #32
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b088      	sub	sp, #32
 8007242:	af00      	add	r7, sp, #0
 8007244:	60f8      	str	r0, [r7, #12]
 8007246:	60b9      	str	r1, [r7, #8]
 8007248:	607a      	str	r2, [r7, #4]
 800724a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800724c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007256:	3b01      	subs	r3, #1
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4413      	add	r3, r2
 800725c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	f023 0307 	bic.w	r3, r3, #7
 8007264:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	f003 0307 	and.w	r3, r3, #7
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00b      	beq.n	8007288 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	617b      	str	r3, [r7, #20]
}
 8007282:	bf00      	nop
 8007284:	bf00      	nop
 8007286:	e7fd      	b.n	8007284 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d01f      	beq.n	80072ce <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800728e:	2300      	movs	r3, #0
 8007290:	61fb      	str	r3, [r7, #28]
 8007292:	e012      	b.n	80072ba <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	4413      	add	r3, r2
 800729a:	7819      	ldrb	r1, [r3, #0]
 800729c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	4413      	add	r3, r2
 80072a2:	3334      	adds	r3, #52	@ 0x34
 80072a4:	460a      	mov	r2, r1
 80072a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	4413      	add	r3, r2
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d006      	beq.n	80072c2 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	3301      	adds	r3, #1
 80072b8:	61fb      	str	r3, [r7, #28]
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	2b0f      	cmp	r3, #15
 80072be:	d9e9      	bls.n	8007294 <prvInitialiseNewTask+0x56>
 80072c0:	e000      	b.n	80072c4 <prvInitialiseNewTask+0x86>
			{
				break;
 80072c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072cc:	e003      	b.n	80072d6 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80072ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d8:	2b06      	cmp	r3, #6
 80072da:	d901      	bls.n	80072e0 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80072dc:	2306      	movs	r3, #6
 80072de:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80072e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072e4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80072e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072ea:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80072ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ee:	2200      	movs	r2, #0
 80072f0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f4:	3304      	adds	r3, #4
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7ff fe0c 	bl	8006f14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fe:	3318      	adds	r3, #24
 8007300:	4618      	mov	r0, r3
 8007302:	f7ff fe07 	bl	8006f14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007308:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800730a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800730c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800730e:	f1c3 0207 	rsb	r2, r3, #7
 8007312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007314:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007318:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800731a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800731c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731e:	2200      	movs	r2, #0
 8007320:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	68f9      	ldr	r1, [r7, #12]
 800732e:	69b8      	ldr	r0, [r7, #24]
 8007330:	f000 fd32 	bl	8007d98 <pxPortInitialiseStack>
 8007334:	4602      	mov	r2, r0
 8007336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007338:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800733a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733c:	2b00      	cmp	r3, #0
 800733e:	d002      	beq.n	8007346 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007346:	bf00      	nop
 8007348:	3720      	adds	r7, #32
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
	...

08007350 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007358:	f000 fe4e 	bl	8007ff8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800735c:	4b2a      	ldr	r3, [pc, #168]	@ (8007408 <prvAddNewTaskToReadyList+0xb8>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3301      	adds	r3, #1
 8007362:	4a29      	ldr	r2, [pc, #164]	@ (8007408 <prvAddNewTaskToReadyList+0xb8>)
 8007364:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007366:	4b29      	ldr	r3, [pc, #164]	@ (800740c <prvAddNewTaskToReadyList+0xbc>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d109      	bne.n	8007382 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800736e:	4a27      	ldr	r2, [pc, #156]	@ (800740c <prvAddNewTaskToReadyList+0xbc>)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007374:	4b24      	ldr	r3, [pc, #144]	@ (8007408 <prvAddNewTaskToReadyList+0xb8>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d110      	bne.n	800739e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800737c:	f000 fb0e 	bl	800799c <prvInitialiseTaskLists>
 8007380:	e00d      	b.n	800739e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007382:	4b23      	ldr	r3, [pc, #140]	@ (8007410 <prvAddNewTaskToReadyList+0xc0>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d109      	bne.n	800739e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800738a:	4b20      	ldr	r3, [pc, #128]	@ (800740c <prvAddNewTaskToReadyList+0xbc>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007394:	429a      	cmp	r2, r3
 8007396:	d802      	bhi.n	800739e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007398:	4a1c      	ldr	r2, [pc, #112]	@ (800740c <prvAddNewTaskToReadyList+0xbc>)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800739e:	4b1d      	ldr	r3, [pc, #116]	@ (8007414 <prvAddNewTaskToReadyList+0xc4>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3301      	adds	r3, #1
 80073a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007414 <prvAddNewTaskToReadyList+0xc4>)
 80073a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ac:	2201      	movs	r2, #1
 80073ae:	409a      	lsls	r2, r3
 80073b0:	4b19      	ldr	r3, [pc, #100]	@ (8007418 <prvAddNewTaskToReadyList+0xc8>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	4a18      	ldr	r2, [pc, #96]	@ (8007418 <prvAddNewTaskToReadyList+0xc8>)
 80073b8:	6013      	str	r3, [r2, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073be:	4613      	mov	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4a15      	ldr	r2, [pc, #84]	@ (800741c <prvAddNewTaskToReadyList+0xcc>)
 80073c8:	441a      	add	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	3304      	adds	r3, #4
 80073ce:	4619      	mov	r1, r3
 80073d0:	4610      	mov	r0, r2
 80073d2:	f7ff fdac 	bl	8006f2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073d6:	f000 fe41 	bl	800805c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073da:	4b0d      	ldr	r3, [pc, #52]	@ (8007410 <prvAddNewTaskToReadyList+0xc0>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00e      	beq.n	8007400 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073e2:	4b0a      	ldr	r3, [pc, #40]	@ (800740c <prvAddNewTaskToReadyList+0xbc>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d207      	bcs.n	8007400 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80073f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007420 <prvAddNewTaskToReadyList+0xd0>)
 80073f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007400:	bf00      	nop
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	200018fc 	.word	0x200018fc
 800740c:	200017fc 	.word	0x200017fc
 8007410:	20001908 	.word	0x20001908
 8007414:	20001918 	.word	0x20001918
 8007418:	20001904 	.word	0x20001904
 800741c:	20001800 	.word	0x20001800
 8007420:	e000ed04 	.word	0xe000ed04

08007424 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800742c:	2300      	movs	r3, #0
 800742e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d018      	beq.n	8007468 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007436:	4b14      	ldr	r3, [pc, #80]	@ (8007488 <vTaskDelay+0x64>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00b      	beq.n	8007456 <vTaskDelay+0x32>
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	60bb      	str	r3, [r7, #8]
}
 8007450:	bf00      	nop
 8007452:	bf00      	nop
 8007454:	e7fd      	b.n	8007452 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007456:	f000 f863 	bl	8007520 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800745a:	2100      	movs	r1, #0
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fc35 	bl	8007ccc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007462:	f000 f86b 	bl	800753c <xTaskResumeAll>
 8007466:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d107      	bne.n	800747e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800746e:	4b07      	ldr	r3, [pc, #28]	@ (800748c <vTaskDelay+0x68>)
 8007470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007474:	601a      	str	r2, [r3, #0]
 8007476:	f3bf 8f4f 	dsb	sy
 800747a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800747e:	bf00      	nop
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	20001924 	.word	0x20001924
 800748c:	e000ed04 	.word	0xe000ed04

08007490 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8007496:	4b1c      	ldr	r3, [pc, #112]	@ (8007508 <vTaskStartScheduler+0x78>)
 8007498:	9301      	str	r3, [sp, #4]
 800749a:	2300      	movs	r3, #0
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	2300      	movs	r3, #0
 80074a0:	2280      	movs	r2, #128	@ 0x80
 80074a2:	491a      	ldr	r1, [pc, #104]	@ (800750c <vTaskStartScheduler+0x7c>)
 80074a4:	481a      	ldr	r0, [pc, #104]	@ (8007510 <vTaskStartScheduler+0x80>)
 80074a6:	f7ff fe89 	bl	80071bc <xTaskCreate>
 80074aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d116      	bne.n	80074e0 <vTaskStartScheduler+0x50>
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	60bb      	str	r3, [r7, #8]
}
 80074c4:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80074c6:	4b13      	ldr	r3, [pc, #76]	@ (8007514 <vTaskStartScheduler+0x84>)
 80074c8:	f04f 32ff 	mov.w	r2, #4294967295
 80074cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80074ce:	4b12      	ldr	r3, [pc, #72]	@ (8007518 <vTaskStartScheduler+0x88>)
 80074d0:	2201      	movs	r2, #1
 80074d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80074d4:	4b11      	ldr	r3, [pc, #68]	@ (800751c <vTaskStartScheduler+0x8c>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80074da:	f000 fce9 	bl	8007eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80074de:	e00f      	b.n	8007500 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e6:	d10b      	bne.n	8007500 <vTaskStartScheduler+0x70>
	__asm volatile
 80074e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ec:	f383 8811 	msr	BASEPRI, r3
 80074f0:	f3bf 8f6f 	isb	sy
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	607b      	str	r3, [r7, #4]
}
 80074fa:	bf00      	nop
 80074fc:	bf00      	nop
 80074fe:	e7fd      	b.n	80074fc <vTaskStartScheduler+0x6c>
}
 8007500:	bf00      	nop
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	20001920 	.word	0x20001920
 800750c:	0800d25c 	.word	0x0800d25c
 8007510:	0800796d 	.word	0x0800796d
 8007514:	2000191c 	.word	0x2000191c
 8007518:	20001908 	.word	0x20001908
 800751c:	20001900 	.word	0x20001900

08007520 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007520:	b480      	push	{r7}
 8007522:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007524:	4b04      	ldr	r3, [pc, #16]	@ (8007538 <vTaskSuspendAll+0x18>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	3301      	adds	r3, #1
 800752a:	4a03      	ldr	r2, [pc, #12]	@ (8007538 <vTaskSuspendAll+0x18>)
 800752c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800752e:	bf00      	nop
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr
 8007538:	20001924 	.word	0x20001924

0800753c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007542:	2300      	movs	r3, #0
 8007544:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007546:	2300      	movs	r3, #0
 8007548:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800754a:	4b42      	ldr	r3, [pc, #264]	@ (8007654 <xTaskResumeAll+0x118>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10b      	bne.n	800756a <xTaskResumeAll+0x2e>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	603b      	str	r3, [r7, #0]
}
 8007564:	bf00      	nop
 8007566:	bf00      	nop
 8007568:	e7fd      	b.n	8007566 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800756a:	f000 fd45 	bl	8007ff8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800756e:	4b39      	ldr	r3, [pc, #228]	@ (8007654 <xTaskResumeAll+0x118>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	3b01      	subs	r3, #1
 8007574:	4a37      	ldr	r2, [pc, #220]	@ (8007654 <xTaskResumeAll+0x118>)
 8007576:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007578:	4b36      	ldr	r3, [pc, #216]	@ (8007654 <xTaskResumeAll+0x118>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d161      	bne.n	8007644 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007580:	4b35      	ldr	r3, [pc, #212]	@ (8007658 <xTaskResumeAll+0x11c>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d05d      	beq.n	8007644 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007588:	e02e      	b.n	80075e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800758a:	4b34      	ldr	r3, [pc, #208]	@ (800765c <xTaskResumeAll+0x120>)
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	3318      	adds	r3, #24
 8007596:	4618      	mov	r0, r3
 8007598:	f7ff fd26 	bl	8006fe8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	3304      	adds	r3, #4
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7ff fd21 	bl	8006fe8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075aa:	2201      	movs	r2, #1
 80075ac:	409a      	lsls	r2, r3
 80075ae:	4b2c      	ldr	r3, [pc, #176]	@ (8007660 <xTaskResumeAll+0x124>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	4a2a      	ldr	r2, [pc, #168]	@ (8007660 <xTaskResumeAll+0x124>)
 80075b6:	6013      	str	r3, [r2, #0]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075bc:	4613      	mov	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4413      	add	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4a27      	ldr	r2, [pc, #156]	@ (8007664 <xTaskResumeAll+0x128>)
 80075c6:	441a      	add	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3304      	adds	r3, #4
 80075cc:	4619      	mov	r1, r3
 80075ce:	4610      	mov	r0, r2
 80075d0:	f7ff fcad 	bl	8006f2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d8:	4b23      	ldr	r3, [pc, #140]	@ (8007668 <xTaskResumeAll+0x12c>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075de:	429a      	cmp	r2, r3
 80075e0:	d302      	bcc.n	80075e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80075e2:	4b22      	ldr	r3, [pc, #136]	@ (800766c <xTaskResumeAll+0x130>)
 80075e4:	2201      	movs	r2, #1
 80075e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075e8:	4b1c      	ldr	r3, [pc, #112]	@ (800765c <xTaskResumeAll+0x120>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1cc      	bne.n	800758a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80075f6:	f000 fa4f 	bl	8007a98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80075fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007670 <xTaskResumeAll+0x134>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d010      	beq.n	8007628 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007606:	f000 f837 	bl	8007678 <xTaskIncrementTick>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d002      	beq.n	8007616 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007610:	4b16      	ldr	r3, [pc, #88]	@ (800766c <xTaskResumeAll+0x130>)
 8007612:	2201      	movs	r2, #1
 8007614:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	3b01      	subs	r3, #1
 800761a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1f1      	bne.n	8007606 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007622:	4b13      	ldr	r3, [pc, #76]	@ (8007670 <xTaskResumeAll+0x134>)
 8007624:	2200      	movs	r2, #0
 8007626:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007628:	4b10      	ldr	r3, [pc, #64]	@ (800766c <xTaskResumeAll+0x130>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d009      	beq.n	8007644 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007630:	2301      	movs	r3, #1
 8007632:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007634:	4b0f      	ldr	r3, [pc, #60]	@ (8007674 <xTaskResumeAll+0x138>)
 8007636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800763a:	601a      	str	r2, [r3, #0]
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007644:	f000 fd0a 	bl	800805c <vPortExitCritical>

	return xAlreadyYielded;
 8007648:	68bb      	ldr	r3, [r7, #8]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	20001924 	.word	0x20001924
 8007658:	200018fc 	.word	0x200018fc
 800765c:	200018bc 	.word	0x200018bc
 8007660:	20001904 	.word	0x20001904
 8007664:	20001800 	.word	0x20001800
 8007668:	200017fc 	.word	0x200017fc
 800766c:	20001910 	.word	0x20001910
 8007670:	2000190c 	.word	0x2000190c
 8007674:	e000ed04 	.word	0xe000ed04

08007678 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800767e:	2300      	movs	r3, #0
 8007680:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007682:	4b4f      	ldr	r3, [pc, #316]	@ (80077c0 <xTaskIncrementTick+0x148>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	f040 808f 	bne.w	80077aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800768c:	4b4d      	ldr	r3, [pc, #308]	@ (80077c4 <xTaskIncrementTick+0x14c>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	3301      	adds	r3, #1
 8007692:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007694:	4a4b      	ldr	r2, [pc, #300]	@ (80077c4 <xTaskIncrementTick+0x14c>)
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d121      	bne.n	80076e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80076a0:	4b49      	ldr	r3, [pc, #292]	@ (80077c8 <xTaskIncrementTick+0x150>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00b      	beq.n	80076c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80076aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	603b      	str	r3, [r7, #0]
}
 80076bc:	bf00      	nop
 80076be:	bf00      	nop
 80076c0:	e7fd      	b.n	80076be <xTaskIncrementTick+0x46>
 80076c2:	4b41      	ldr	r3, [pc, #260]	@ (80077c8 <xTaskIncrementTick+0x150>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	60fb      	str	r3, [r7, #12]
 80076c8:	4b40      	ldr	r3, [pc, #256]	@ (80077cc <xTaskIncrementTick+0x154>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a3e      	ldr	r2, [pc, #248]	@ (80077c8 <xTaskIncrementTick+0x150>)
 80076ce:	6013      	str	r3, [r2, #0]
 80076d0:	4a3e      	ldr	r2, [pc, #248]	@ (80077cc <xTaskIncrementTick+0x154>)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6013      	str	r3, [r2, #0]
 80076d6:	4b3e      	ldr	r3, [pc, #248]	@ (80077d0 <xTaskIncrementTick+0x158>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3301      	adds	r3, #1
 80076dc:	4a3c      	ldr	r2, [pc, #240]	@ (80077d0 <xTaskIncrementTick+0x158>)
 80076de:	6013      	str	r3, [r2, #0]
 80076e0:	f000 f9da 	bl	8007a98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80076e4:	4b3b      	ldr	r3, [pc, #236]	@ (80077d4 <xTaskIncrementTick+0x15c>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d348      	bcc.n	8007780 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076ee:	4b36      	ldr	r3, [pc, #216]	@ (80077c8 <xTaskIncrementTick+0x150>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d104      	bne.n	8007702 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076f8:	4b36      	ldr	r3, [pc, #216]	@ (80077d4 <xTaskIncrementTick+0x15c>)
 80076fa:	f04f 32ff 	mov.w	r2, #4294967295
 80076fe:	601a      	str	r2, [r3, #0]
					break;
 8007700:	e03e      	b.n	8007780 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007702:	4b31      	ldr	r3, [pc, #196]	@ (80077c8 <xTaskIncrementTick+0x150>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	429a      	cmp	r2, r3
 8007718:	d203      	bcs.n	8007722 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800771a:	4a2e      	ldr	r2, [pc, #184]	@ (80077d4 <xTaskIncrementTick+0x15c>)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007720:	e02e      	b.n	8007780 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	3304      	adds	r3, #4
 8007726:	4618      	mov	r0, r3
 8007728:	f7ff fc5e 	bl	8006fe8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007730:	2b00      	cmp	r3, #0
 8007732:	d004      	beq.n	800773e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	3318      	adds	r3, #24
 8007738:	4618      	mov	r0, r3
 800773a:	f7ff fc55 	bl	8006fe8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007742:	2201      	movs	r2, #1
 8007744:	409a      	lsls	r2, r3
 8007746:	4b24      	ldr	r3, [pc, #144]	@ (80077d8 <xTaskIncrementTick+0x160>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4313      	orrs	r3, r2
 800774c:	4a22      	ldr	r2, [pc, #136]	@ (80077d8 <xTaskIncrementTick+0x160>)
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007754:	4613      	mov	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4a1f      	ldr	r2, [pc, #124]	@ (80077dc <xTaskIncrementTick+0x164>)
 800775e:	441a      	add	r2, r3
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	3304      	adds	r3, #4
 8007764:	4619      	mov	r1, r3
 8007766:	4610      	mov	r0, r2
 8007768:	f7ff fbe1 	bl	8006f2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007770:	4b1b      	ldr	r3, [pc, #108]	@ (80077e0 <xTaskIncrementTick+0x168>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007776:	429a      	cmp	r2, r3
 8007778:	d3b9      	bcc.n	80076ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800777a:	2301      	movs	r3, #1
 800777c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800777e:	e7b6      	b.n	80076ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007780:	4b17      	ldr	r3, [pc, #92]	@ (80077e0 <xTaskIncrementTick+0x168>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007786:	4915      	ldr	r1, [pc, #84]	@ (80077dc <xTaskIncrementTick+0x164>)
 8007788:	4613      	mov	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4413      	add	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	440b      	add	r3, r1
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2b01      	cmp	r3, #1
 8007796:	d901      	bls.n	800779c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007798:	2301      	movs	r3, #1
 800779a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800779c:	4b11      	ldr	r3, [pc, #68]	@ (80077e4 <xTaskIncrementTick+0x16c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d007      	beq.n	80077b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80077a4:	2301      	movs	r3, #1
 80077a6:	617b      	str	r3, [r7, #20]
 80077a8:	e004      	b.n	80077b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80077aa:	4b0f      	ldr	r3, [pc, #60]	@ (80077e8 <xTaskIncrementTick+0x170>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3301      	adds	r3, #1
 80077b0:	4a0d      	ldr	r2, [pc, #52]	@ (80077e8 <xTaskIncrementTick+0x170>)
 80077b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80077b4:	697b      	ldr	r3, [r7, #20]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	20001924 	.word	0x20001924
 80077c4:	20001900 	.word	0x20001900
 80077c8:	200018b4 	.word	0x200018b4
 80077cc:	200018b8 	.word	0x200018b8
 80077d0:	20001914 	.word	0x20001914
 80077d4:	2000191c 	.word	0x2000191c
 80077d8:	20001904 	.word	0x20001904
 80077dc:	20001800 	.word	0x20001800
 80077e0:	200017fc 	.word	0x200017fc
 80077e4:	20001910 	.word	0x20001910
 80077e8:	2000190c 	.word	0x2000190c

080077ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80077f2:	4b27      	ldr	r3, [pc, #156]	@ (8007890 <vTaskSwitchContext+0xa4>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80077fa:	4b26      	ldr	r3, [pc, #152]	@ (8007894 <vTaskSwitchContext+0xa8>)
 80077fc:	2201      	movs	r2, #1
 80077fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007800:	e040      	b.n	8007884 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007802:	4b24      	ldr	r3, [pc, #144]	@ (8007894 <vTaskSwitchContext+0xa8>)
 8007804:	2200      	movs	r2, #0
 8007806:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007808:	4b23      	ldr	r3, [pc, #140]	@ (8007898 <vTaskSwitchContext+0xac>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	fab3 f383 	clz	r3, r3
 8007814:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007816:	7afb      	ldrb	r3, [r7, #11]
 8007818:	f1c3 031f 	rsb	r3, r3, #31
 800781c:	617b      	str	r3, [r7, #20]
 800781e:	491f      	ldr	r1, [pc, #124]	@ (800789c <vTaskSwitchContext+0xb0>)
 8007820:	697a      	ldr	r2, [r7, #20]
 8007822:	4613      	mov	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	440b      	add	r3, r1
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10b      	bne.n	800784a <vTaskSwitchContext+0x5e>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	607b      	str	r3, [r7, #4]
}
 8007844:	bf00      	nop
 8007846:	bf00      	nop
 8007848:	e7fd      	b.n	8007846 <vTaskSwitchContext+0x5a>
 800784a:	697a      	ldr	r2, [r7, #20]
 800784c:	4613      	mov	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4a11      	ldr	r2, [pc, #68]	@ (800789c <vTaskSwitchContext+0xb0>)
 8007856:	4413      	add	r3, r2
 8007858:	613b      	str	r3, [r7, #16]
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	605a      	str	r2, [r3, #4]
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	3308      	adds	r3, #8
 800786c:	429a      	cmp	r2, r3
 800786e:	d104      	bne.n	800787a <vTaskSwitchContext+0x8e>
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	685a      	ldr	r2, [r3, #4]
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	605a      	str	r2, [r3, #4]
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	4a07      	ldr	r2, [pc, #28]	@ (80078a0 <vTaskSwitchContext+0xb4>)
 8007882:	6013      	str	r3, [r2, #0]
}
 8007884:	bf00      	nop
 8007886:	371c      	adds	r7, #28
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	20001924 	.word	0x20001924
 8007894:	20001910 	.word	0x20001910
 8007898:	20001904 	.word	0x20001904
 800789c:	20001800 	.word	0x20001800
 80078a0:	200017fc 	.word	0x200017fc

080078a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10b      	bne.n	80078d2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80078ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	60fb      	str	r3, [r7, #12]
}
 80078cc:	bf00      	nop
 80078ce:	bf00      	nop
 80078d0:	e7fd      	b.n	80078ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	3318      	adds	r3, #24
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7ff fb86 	bl	8006fe8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078dc:	4b1d      	ldr	r3, [pc, #116]	@ (8007954 <xTaskRemoveFromEventList+0xb0>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d11c      	bne.n	800791e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	3304      	adds	r3, #4
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7ff fb7d 	bl	8006fe8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f2:	2201      	movs	r2, #1
 80078f4:	409a      	lsls	r2, r3
 80078f6:	4b18      	ldr	r3, [pc, #96]	@ (8007958 <xTaskRemoveFromEventList+0xb4>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	4a16      	ldr	r2, [pc, #88]	@ (8007958 <xTaskRemoveFromEventList+0xb4>)
 80078fe:	6013      	str	r3, [r2, #0]
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007904:	4613      	mov	r3, r2
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4413      	add	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4a13      	ldr	r2, [pc, #76]	@ (800795c <xTaskRemoveFromEventList+0xb8>)
 800790e:	441a      	add	r2, r3
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	3304      	adds	r3, #4
 8007914:	4619      	mov	r1, r3
 8007916:	4610      	mov	r0, r2
 8007918:	f7ff fb09 	bl	8006f2e <vListInsertEnd>
 800791c:	e005      	b.n	800792a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	3318      	adds	r3, #24
 8007922:	4619      	mov	r1, r3
 8007924:	480e      	ldr	r0, [pc, #56]	@ (8007960 <xTaskRemoveFromEventList+0xbc>)
 8007926:	f7ff fb02 	bl	8006f2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800792e:	4b0d      	ldr	r3, [pc, #52]	@ (8007964 <xTaskRemoveFromEventList+0xc0>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007934:	429a      	cmp	r2, r3
 8007936:	d905      	bls.n	8007944 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007938:	2301      	movs	r3, #1
 800793a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800793c:	4b0a      	ldr	r3, [pc, #40]	@ (8007968 <xTaskRemoveFromEventList+0xc4>)
 800793e:	2201      	movs	r2, #1
 8007940:	601a      	str	r2, [r3, #0]
 8007942:	e001      	b.n	8007948 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007944:	2300      	movs	r3, #0
 8007946:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007948:	697b      	ldr	r3, [r7, #20]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3718      	adds	r7, #24
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	20001924 	.word	0x20001924
 8007958:	20001904 	.word	0x20001904
 800795c:	20001800 	.word	0x20001800
 8007960:	200018bc 	.word	0x200018bc
 8007964:	200017fc 	.word	0x200017fc
 8007968:	20001910 	.word	0x20001910

0800796c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007974:	f000 f852 	bl	8007a1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007978:	4b06      	ldr	r3, [pc, #24]	@ (8007994 <prvIdleTask+0x28>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d9f9      	bls.n	8007974 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007980:	4b05      	ldr	r3, [pc, #20]	@ (8007998 <prvIdleTask+0x2c>)
 8007982:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007990:	e7f0      	b.n	8007974 <prvIdleTask+0x8>
 8007992:	bf00      	nop
 8007994:	20001800 	.word	0x20001800
 8007998:	e000ed04 	.word	0xe000ed04

0800799c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079a2:	2300      	movs	r3, #0
 80079a4:	607b      	str	r3, [r7, #4]
 80079a6:	e00c      	b.n	80079c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	4613      	mov	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4a12      	ldr	r2, [pc, #72]	@ (80079fc <prvInitialiseTaskLists+0x60>)
 80079b4:	4413      	add	r3, r2
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7ff fa8c 	bl	8006ed4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	3301      	adds	r3, #1
 80079c0:	607b      	str	r3, [r7, #4]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b06      	cmp	r3, #6
 80079c6:	d9ef      	bls.n	80079a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80079c8:	480d      	ldr	r0, [pc, #52]	@ (8007a00 <prvInitialiseTaskLists+0x64>)
 80079ca:	f7ff fa83 	bl	8006ed4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80079ce:	480d      	ldr	r0, [pc, #52]	@ (8007a04 <prvInitialiseTaskLists+0x68>)
 80079d0:	f7ff fa80 	bl	8006ed4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80079d4:	480c      	ldr	r0, [pc, #48]	@ (8007a08 <prvInitialiseTaskLists+0x6c>)
 80079d6:	f7ff fa7d 	bl	8006ed4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80079da:	480c      	ldr	r0, [pc, #48]	@ (8007a0c <prvInitialiseTaskLists+0x70>)
 80079dc:	f7ff fa7a 	bl	8006ed4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80079e0:	480b      	ldr	r0, [pc, #44]	@ (8007a10 <prvInitialiseTaskLists+0x74>)
 80079e2:	f7ff fa77 	bl	8006ed4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80079e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007a14 <prvInitialiseTaskLists+0x78>)
 80079e8:	4a05      	ldr	r2, [pc, #20]	@ (8007a00 <prvInitialiseTaskLists+0x64>)
 80079ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80079ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007a18 <prvInitialiseTaskLists+0x7c>)
 80079ee:	4a05      	ldr	r2, [pc, #20]	@ (8007a04 <prvInitialiseTaskLists+0x68>)
 80079f0:	601a      	str	r2, [r3, #0]
}
 80079f2:	bf00      	nop
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	20001800 	.word	0x20001800
 8007a00:	2000188c 	.word	0x2000188c
 8007a04:	200018a0 	.word	0x200018a0
 8007a08:	200018bc 	.word	0x200018bc
 8007a0c:	200018d0 	.word	0x200018d0
 8007a10:	200018e8 	.word	0x200018e8
 8007a14:	200018b4 	.word	0x200018b4
 8007a18:	200018b8 	.word	0x200018b8

08007a1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a22:	e019      	b.n	8007a58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a24:	f000 fae8 	bl	8007ff8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a28:	4b10      	ldr	r3, [pc, #64]	@ (8007a6c <prvCheckTasksWaitingTermination+0x50>)
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	3304      	adds	r3, #4
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7ff fad7 	bl	8006fe8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007a70 <prvCheckTasksWaitingTermination+0x54>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	4a0b      	ldr	r2, [pc, #44]	@ (8007a70 <prvCheckTasksWaitingTermination+0x54>)
 8007a42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a44:	4b0b      	ldr	r3, [pc, #44]	@ (8007a74 <prvCheckTasksWaitingTermination+0x58>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8007a74 <prvCheckTasksWaitingTermination+0x58>)
 8007a4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a4e:	f000 fb05 	bl	800805c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f810 	bl	8007a78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a58:	4b06      	ldr	r3, [pc, #24]	@ (8007a74 <prvCheckTasksWaitingTermination+0x58>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e1      	bne.n	8007a24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a60:	bf00      	nop
 8007a62:	bf00      	nop
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	200018d0 	.word	0x200018d0
 8007a70:	200018fc 	.word	0x200018fc
 8007a74:	200018e4 	.word	0x200018e4

08007a78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 fca7 	bl	80083d8 <vPortFree>
			vPortFree( pxTCB );
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fca4 	bl	80083d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a90:	bf00      	nop
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8007ad0 <prvResetNextTaskUnblockTime+0x38>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d104      	bne.n	8007ab2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8007ad4 <prvResetNextTaskUnblockTime+0x3c>)
 8007aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8007aae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ab0:	e008      	b.n	8007ac4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ab2:	4b07      	ldr	r3, [pc, #28]	@ (8007ad0 <prvResetNextTaskUnblockTime+0x38>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	4a04      	ldr	r2, [pc, #16]	@ (8007ad4 <prvResetNextTaskUnblockTime+0x3c>)
 8007ac2:	6013      	str	r3, [r2, #0]
}
 8007ac4:	bf00      	nop
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	200018b4 	.word	0x200018b4
 8007ad4:	2000191c 	.word	0x2000191c

08007ad8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007ade:	4b0b      	ldr	r3, [pc, #44]	@ (8007b0c <xTaskGetSchedulerState+0x34>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d102      	bne.n	8007aec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	607b      	str	r3, [r7, #4]
 8007aea:	e008      	b.n	8007afe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aec:	4b08      	ldr	r3, [pc, #32]	@ (8007b10 <xTaskGetSchedulerState+0x38>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d102      	bne.n	8007afa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007af4:	2302      	movs	r3, #2
 8007af6:	607b      	str	r3, [r7, #4]
 8007af8:	e001      	b.n	8007afe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007afa:	2300      	movs	r3, #0
 8007afc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007afe:	687b      	ldr	r3, [r7, #4]
	}
 8007b00:	4618      	mov	r0, r3
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	20001908 	.word	0x20001908
 8007b10:	20001924 	.word	0x20001924

08007b14 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8007b1e:	f000 fa6b 	bl	8007ff8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8007b22:	4b1e      	ldr	r3, [pc, #120]	@ (8007b9c <ulTaskNotifyTake+0x88>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d113      	bne.n	8007b54 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8007b9c <ulTaskNotifyTake+0x88>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00b      	beq.n	8007b54 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	6838      	ldr	r0, [r7, #0]
 8007b40:	f000 f8c4 	bl	8007ccc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007b44:	4b16      	ldr	r3, [pc, #88]	@ (8007ba0 <ulTaskNotifyTake+0x8c>)
 8007b46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b4a:	601a      	str	r2, [r3, #0]
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007b54:	f000 fa82 	bl	800805c <vPortExitCritical>

		taskENTER_CRITICAL();
 8007b58:	f000 fa4e 	bl	8007ff8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8007b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8007b9c <ulTaskNotifyTake+0x88>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b62:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00c      	beq.n	8007b84 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d004      	beq.n	8007b7a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007b70:	4b0a      	ldr	r3, [pc, #40]	@ (8007b9c <ulTaskNotifyTake+0x88>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2200      	movs	r2, #0
 8007b76:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007b78:	e004      	b.n	8007b84 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8007b7a:	4b08      	ldr	r3, [pc, #32]	@ (8007b9c <ulTaskNotifyTake+0x88>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	3a01      	subs	r2, #1
 8007b82:	64da      	str	r2, [r3, #76]	@ 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b84:	4b05      	ldr	r3, [pc, #20]	@ (8007b9c <ulTaskNotifyTake+0x88>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 8007b8e:	f000 fa65 	bl	800805c <vPortExitCritical>

		return ulReturn;
 8007b92:	68fb      	ldr	r3, [r7, #12]
	}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	200017fc 	.word	0x200017fc
 8007ba0:	e000ed04 	.word	0xe000ed04

08007ba4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08a      	sub	sp, #40	@ 0x28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10b      	bne.n	8007bcc <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8007bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
 8007bc4:	61bb      	str	r3, [r7, #24]
}
 8007bc6:	bf00      	nop
 8007bc8:	bf00      	nop
 8007bca:	e7fd      	b.n	8007bc8 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bcc:	f000 faf4 	bl	80081b8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	627b      	str	r3, [r7, #36]	@ 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007bd4:	f3ef 8211 	mrs	r2, BASEPRI
 8007bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bdc:	f383 8811 	msr	BASEPRI, r3
 8007be0:	f3bf 8f6f 	isb	sy
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	617a      	str	r2, [r7, #20]
 8007bea:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007bec:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bee:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007bf6:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8007c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c04:	1c5a      	adds	r2, r3, #1
 8007c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c08:	64da      	str	r2, [r3, #76]	@ 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007c0a:	7ffb      	ldrb	r3, [r7, #31]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d146      	bne.n	8007c9e <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00b      	beq.n	8007c30 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8007c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c1c:	f383 8811 	msr	BASEPRI, r3
 8007c20:	f3bf 8f6f 	isb	sy
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	60fb      	str	r3, [r7, #12]
}
 8007c2a:	bf00      	nop
 8007c2c:	bf00      	nop
 8007c2e:	e7fd      	b.n	8007c2c <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c30:	4b20      	ldr	r3, [pc, #128]	@ (8007cb4 <vTaskNotifyGiveFromISR+0x110>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d11c      	bne.n	8007c72 <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7ff f9d3 	bl	8006fe8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c46:	2201      	movs	r2, #1
 8007c48:	409a      	lsls	r2, r3
 8007c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8007cb8 <vTaskNotifyGiveFromISR+0x114>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	4a19      	ldr	r2, [pc, #100]	@ (8007cb8 <vTaskNotifyGiveFromISR+0x114>)
 8007c52:	6013      	str	r3, [r2, #0]
 8007c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c58:	4613      	mov	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	4413      	add	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4a16      	ldr	r2, [pc, #88]	@ (8007cbc <vTaskNotifyGiveFromISR+0x118>)
 8007c62:	441a      	add	r2, r3
 8007c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c66:	3304      	adds	r3, #4
 8007c68:	4619      	mov	r1, r3
 8007c6a:	4610      	mov	r0, r2
 8007c6c:	f7ff f95f 	bl	8006f2e <vListInsertEnd>
 8007c70:	e005      	b.n	8007c7e <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c74:	3318      	adds	r3, #24
 8007c76:	4619      	mov	r1, r3
 8007c78:	4811      	ldr	r0, [pc, #68]	@ (8007cc0 <vTaskNotifyGiveFromISR+0x11c>)
 8007c7a:	f7ff f958 	bl	8006f2e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c82:	4b10      	ldr	r3, [pc, #64]	@ (8007cc4 <vTaskNotifyGiveFromISR+0x120>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d908      	bls.n	8007c9e <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d002      	beq.n	8007c98 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2201      	movs	r2, #1
 8007c96:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007c98:	4b0b      	ldr	r3, [pc, #44]	@ (8007cc8 <vTaskNotifyGiveFromISR+0x124>)
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007ca8:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8007caa:	bf00      	nop
 8007cac:	3728      	adds	r7, #40	@ 0x28
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20001924 	.word	0x20001924
 8007cb8:	20001904 	.word	0x20001904
 8007cbc:	20001800 	.word	0x20001800
 8007cc0:	200018bc 	.word	0x200018bc
 8007cc4:	200017fc 	.word	0x200017fc
 8007cc8:	20001910 	.word	0x20001910

08007ccc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007cd6:	4b29      	ldr	r3, [pc, #164]	@ (8007d7c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cdc:	4b28      	ldr	r3, [pc, #160]	@ (8007d80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7ff f980 	bl	8006fe8 <uxListRemove>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10b      	bne.n	8007d06 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007cee:	4b24      	ldr	r3, [pc, #144]	@ (8007d80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfa:	43da      	mvns	r2, r3
 8007cfc:	4b21      	ldr	r3, [pc, #132]	@ (8007d84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4013      	ands	r3, r2
 8007d02:	4a20      	ldr	r2, [pc, #128]	@ (8007d84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d04:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0c:	d10a      	bne.n	8007d24 <prvAddCurrentTaskToDelayedList+0x58>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d007      	beq.n	8007d24 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d14:	4b1a      	ldr	r3, [pc, #104]	@ (8007d80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	3304      	adds	r3, #4
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	481a      	ldr	r0, [pc, #104]	@ (8007d88 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007d1e:	f7ff f906 	bl	8006f2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d22:	e026      	b.n	8007d72 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4413      	add	r3, r2
 8007d2a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d2c:	4b14      	ldr	r3, [pc, #80]	@ (8007d80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d209      	bcs.n	8007d50 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d3c:	4b13      	ldr	r3, [pc, #76]	@ (8007d8c <prvAddCurrentTaskToDelayedList+0xc0>)
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	4b0f      	ldr	r3, [pc, #60]	@ (8007d80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3304      	adds	r3, #4
 8007d46:	4619      	mov	r1, r3
 8007d48:	4610      	mov	r0, r2
 8007d4a:	f7ff f914 	bl	8006f76 <vListInsert>
}
 8007d4e:	e010      	b.n	8007d72 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d50:	4b0f      	ldr	r3, [pc, #60]	@ (8007d90 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	4b0a      	ldr	r3, [pc, #40]	@ (8007d80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	3304      	adds	r3, #4
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	f7ff f90a 	bl	8006f76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d62:	4b0c      	ldr	r3, [pc, #48]	@ (8007d94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d202      	bcs.n	8007d72 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007d6c:	4a09      	ldr	r2, [pc, #36]	@ (8007d94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	6013      	str	r3, [r2, #0]
}
 8007d72:	bf00      	nop
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	20001900 	.word	0x20001900
 8007d80:	200017fc 	.word	0x200017fc
 8007d84:	20001904 	.word	0x20001904
 8007d88:	200018e8 	.word	0x200018e8
 8007d8c:	200018b8 	.word	0x200018b8
 8007d90:	200018b4 	.word	0x200018b4
 8007d94:	2000191c 	.word	0x2000191c

08007d98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3b04      	subs	r3, #4
 8007da8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007db0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	3b04      	subs	r3, #4
 8007db6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	f023 0201 	bic.w	r2, r3, #1
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	3b04      	subs	r3, #4
 8007dc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8007dfc <pxPortInitialiseStack+0x64>)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3b14      	subs	r3, #20
 8007dd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3b04      	subs	r3, #4
 8007dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f06f 0202 	mvn.w	r2, #2
 8007de6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	3b20      	subs	r3, #32
 8007dec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007dee:	68fb      	ldr	r3, [r7, #12]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	08007e01 	.word	0x08007e01

08007e00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e0a:	4b13      	ldr	r3, [pc, #76]	@ (8007e58 <prvTaskExitError+0x58>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e12:	d00b      	beq.n	8007e2c <prvTaskExitError+0x2c>
	__asm volatile
 8007e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	60fb      	str	r3, [r7, #12]
}
 8007e26:	bf00      	nop
 8007e28:	bf00      	nop
 8007e2a:	e7fd      	b.n	8007e28 <prvTaskExitError+0x28>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	60bb      	str	r3, [r7, #8]
}
 8007e3e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e40:	bf00      	nop
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d0fc      	beq.n	8007e42 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e48:	bf00      	nop
 8007e4a:	bf00      	nop
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	2000000c 	.word	0x2000000c
 8007e5c:	00000000 	.word	0x00000000

08007e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e60:	4b07      	ldr	r3, [pc, #28]	@ (8007e80 <pxCurrentTCBConst2>)
 8007e62:	6819      	ldr	r1, [r3, #0]
 8007e64:	6808      	ldr	r0, [r1, #0]
 8007e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6a:	f380 8809 	msr	PSP, r0
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f04f 0000 	mov.w	r0, #0
 8007e76:	f380 8811 	msr	BASEPRI, r0
 8007e7a:	4770      	bx	lr
 8007e7c:	f3af 8000 	nop.w

08007e80 <pxCurrentTCBConst2>:
 8007e80:	200017fc 	.word	0x200017fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop

08007e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e88:	4808      	ldr	r0, [pc, #32]	@ (8007eac <prvPortStartFirstTask+0x24>)
 8007e8a:	6800      	ldr	r0, [r0, #0]
 8007e8c:	6800      	ldr	r0, [r0, #0]
 8007e8e:	f380 8808 	msr	MSP, r0
 8007e92:	f04f 0000 	mov.w	r0, #0
 8007e96:	f380 8814 	msr	CONTROL, r0
 8007e9a:	b662      	cpsie	i
 8007e9c:	b661      	cpsie	f
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	df00      	svc	0
 8007ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007eaa:	bf00      	nop
 8007eac:	e000ed08 	.word	0xe000ed08

08007eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007eb6:	4b47      	ldr	r3, [pc, #284]	@ (8007fd4 <xPortStartScheduler+0x124>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a47      	ldr	r2, [pc, #284]	@ (8007fd8 <xPortStartScheduler+0x128>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d10b      	bne.n	8007ed8 <xPortStartScheduler+0x28>
	__asm volatile
 8007ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	613b      	str	r3, [r7, #16]
}
 8007ed2:	bf00      	nop
 8007ed4:	bf00      	nop
 8007ed6:	e7fd      	b.n	8007ed4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8007fd4 <xPortStartScheduler+0x124>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a3f      	ldr	r2, [pc, #252]	@ (8007fdc <xPortStartScheduler+0x12c>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d10b      	bne.n	8007efa <xPortStartScheduler+0x4a>
	__asm volatile
 8007ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	60fb      	str	r3, [r7, #12]
}
 8007ef4:	bf00      	nop
 8007ef6:	bf00      	nop
 8007ef8:	e7fd      	b.n	8007ef6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007efa:	4b39      	ldr	r3, [pc, #228]	@ (8007fe0 <xPortStartScheduler+0x130>)
 8007efc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	22ff      	movs	r2, #255	@ 0xff
 8007f0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f14:	78fb      	ldrb	r3, [r7, #3]
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	4b31      	ldr	r3, [pc, #196]	@ (8007fe4 <xPortStartScheduler+0x134>)
 8007f20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f22:	4b31      	ldr	r3, [pc, #196]	@ (8007fe8 <xPortStartScheduler+0x138>)
 8007f24:	2207      	movs	r2, #7
 8007f26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f28:	e009      	b.n	8007f3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8007fe8 <xPortStartScheduler+0x138>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	4a2d      	ldr	r2, [pc, #180]	@ (8007fe8 <xPortStartScheduler+0x138>)
 8007f32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	005b      	lsls	r3, r3, #1
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f3e:	78fb      	ldrb	r3, [r7, #3]
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f46:	2b80      	cmp	r3, #128	@ 0x80
 8007f48:	d0ef      	beq.n	8007f2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f4a:	4b27      	ldr	r3, [pc, #156]	@ (8007fe8 <xPortStartScheduler+0x138>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f1c3 0307 	rsb	r3, r3, #7
 8007f52:	2b04      	cmp	r3, #4
 8007f54:	d00b      	beq.n	8007f6e <xPortStartScheduler+0xbe>
	__asm volatile
 8007f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f5a:	f383 8811 	msr	BASEPRI, r3
 8007f5e:	f3bf 8f6f 	isb	sy
 8007f62:	f3bf 8f4f 	dsb	sy
 8007f66:	60bb      	str	r3, [r7, #8]
}
 8007f68:	bf00      	nop
 8007f6a:	bf00      	nop
 8007f6c:	e7fd      	b.n	8007f6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8007fe8 <xPortStartScheduler+0x138>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	021b      	lsls	r3, r3, #8
 8007f74:	4a1c      	ldr	r2, [pc, #112]	@ (8007fe8 <xPortStartScheduler+0x138>)
 8007f76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f78:	4b1b      	ldr	r3, [pc, #108]	@ (8007fe8 <xPortStartScheduler+0x138>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007f80:	4a19      	ldr	r2, [pc, #100]	@ (8007fe8 <xPortStartScheduler+0x138>)
 8007f82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f8c:	4b17      	ldr	r3, [pc, #92]	@ (8007fec <xPortStartScheduler+0x13c>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a16      	ldr	r2, [pc, #88]	@ (8007fec <xPortStartScheduler+0x13c>)
 8007f92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007f96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f98:	4b14      	ldr	r3, [pc, #80]	@ (8007fec <xPortStartScheduler+0x13c>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a13      	ldr	r2, [pc, #76]	@ (8007fec <xPortStartScheduler+0x13c>)
 8007f9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007fa2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007fa4:	f000 f8da 	bl	800815c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007fa8:	4b11      	ldr	r3, [pc, #68]	@ (8007ff0 <xPortStartScheduler+0x140>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007fae:	f000 f8f9 	bl	80081a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007fb2:	4b10      	ldr	r3, [pc, #64]	@ (8007ff4 <xPortStartScheduler+0x144>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8007ff4 <xPortStartScheduler+0x144>)
 8007fb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007fbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007fbe:	f7ff ff63 	bl	8007e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007fc2:	f7ff fc13 	bl	80077ec <vTaskSwitchContext>
	prvTaskExitError();
 8007fc6:	f7ff ff1b 	bl	8007e00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3718      	adds	r7, #24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	e000ed00 	.word	0xe000ed00
 8007fd8:	410fc271 	.word	0x410fc271
 8007fdc:	410fc270 	.word	0x410fc270
 8007fe0:	e000e400 	.word	0xe000e400
 8007fe4:	20001928 	.word	0x20001928
 8007fe8:	2000192c 	.word	0x2000192c
 8007fec:	e000ed20 	.word	0xe000ed20
 8007ff0:	2000000c 	.word	0x2000000c
 8007ff4:	e000ef34 	.word	0xe000ef34

08007ff8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	607b      	str	r3, [r7, #4]
}
 8008010:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008012:	4b10      	ldr	r3, [pc, #64]	@ (8008054 <vPortEnterCritical+0x5c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	3301      	adds	r3, #1
 8008018:	4a0e      	ldr	r2, [pc, #56]	@ (8008054 <vPortEnterCritical+0x5c>)
 800801a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800801c:	4b0d      	ldr	r3, [pc, #52]	@ (8008054 <vPortEnterCritical+0x5c>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d110      	bne.n	8008046 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008024:	4b0c      	ldr	r3, [pc, #48]	@ (8008058 <vPortEnterCritical+0x60>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00b      	beq.n	8008046 <vPortEnterCritical+0x4e>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	603b      	str	r3, [r7, #0]
}
 8008040:	bf00      	nop
 8008042:	bf00      	nop
 8008044:	e7fd      	b.n	8008042 <vPortEnterCritical+0x4a>
	}
}
 8008046:	bf00      	nop
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	2000000c 	.word	0x2000000c
 8008058:	e000ed04 	.word	0xe000ed04

0800805c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008062:	4b12      	ldr	r3, [pc, #72]	@ (80080ac <vPortExitCritical+0x50>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10b      	bne.n	8008082 <vPortExitCritical+0x26>
	__asm volatile
 800806a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	607b      	str	r3, [r7, #4]
}
 800807c:	bf00      	nop
 800807e:	bf00      	nop
 8008080:	e7fd      	b.n	800807e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008082:	4b0a      	ldr	r3, [pc, #40]	@ (80080ac <vPortExitCritical+0x50>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	3b01      	subs	r3, #1
 8008088:	4a08      	ldr	r2, [pc, #32]	@ (80080ac <vPortExitCritical+0x50>)
 800808a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800808c:	4b07      	ldr	r3, [pc, #28]	@ (80080ac <vPortExitCritical+0x50>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d105      	bne.n	80080a0 <vPortExitCritical+0x44>
 8008094:	2300      	movs	r3, #0
 8008096:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	f383 8811 	msr	BASEPRI, r3
}
 800809e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	2000000c 	.word	0x2000000c

080080b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80080b0:	f3ef 8009 	mrs	r0, PSP
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	4b15      	ldr	r3, [pc, #84]	@ (8008110 <pxCurrentTCBConst>)
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	f01e 0f10 	tst.w	lr, #16
 80080c0:	bf08      	it	eq
 80080c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80080c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ca:	6010      	str	r0, [r2, #0]
 80080cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80080d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80080d4:	f380 8811 	msr	BASEPRI, r0
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f7ff fb84 	bl	80077ec <vTaskSwitchContext>
 80080e4:	f04f 0000 	mov.w	r0, #0
 80080e8:	f380 8811 	msr	BASEPRI, r0
 80080ec:	bc09      	pop	{r0, r3}
 80080ee:	6819      	ldr	r1, [r3, #0]
 80080f0:	6808      	ldr	r0, [r1, #0]
 80080f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f6:	f01e 0f10 	tst.w	lr, #16
 80080fa:	bf08      	it	eq
 80080fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008100:	f380 8809 	msr	PSP, r0
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	f3af 8000 	nop.w

08008110 <pxCurrentTCBConst>:
 8008110:	200017fc 	.word	0x200017fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008114:	bf00      	nop
 8008116:	bf00      	nop

08008118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
	__asm volatile
 800811e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008122:	f383 8811 	msr	BASEPRI, r3
 8008126:	f3bf 8f6f 	isb	sy
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	607b      	str	r3, [r7, #4]
}
 8008130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008132:	f7ff faa1 	bl	8007678 <xTaskIncrementTick>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d003      	beq.n	8008144 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800813c:	4b06      	ldr	r3, [pc, #24]	@ (8008158 <xPortSysTickHandler+0x40>)
 800813e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	2300      	movs	r3, #0
 8008146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	f383 8811 	msr	BASEPRI, r3
}
 800814e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008150:	bf00      	nop
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	e000ed04 	.word	0xe000ed04

0800815c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800815c:	b480      	push	{r7}
 800815e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008160:	4b0b      	ldr	r3, [pc, #44]	@ (8008190 <vPortSetupTimerInterrupt+0x34>)
 8008162:	2200      	movs	r2, #0
 8008164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008166:	4b0b      	ldr	r3, [pc, #44]	@ (8008194 <vPortSetupTimerInterrupt+0x38>)
 8008168:	2200      	movs	r2, #0
 800816a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800816c:	4b0a      	ldr	r3, [pc, #40]	@ (8008198 <vPortSetupTimerInterrupt+0x3c>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a0a      	ldr	r2, [pc, #40]	@ (800819c <vPortSetupTimerInterrupt+0x40>)
 8008172:	fba2 2303 	umull	r2, r3, r2, r3
 8008176:	099b      	lsrs	r3, r3, #6
 8008178:	4a09      	ldr	r2, [pc, #36]	@ (80081a0 <vPortSetupTimerInterrupt+0x44>)
 800817a:	3b01      	subs	r3, #1
 800817c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800817e:	4b04      	ldr	r3, [pc, #16]	@ (8008190 <vPortSetupTimerInterrupt+0x34>)
 8008180:	2207      	movs	r2, #7
 8008182:	601a      	str	r2, [r3, #0]
}
 8008184:	bf00      	nop
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	e000e010 	.word	0xe000e010
 8008194:	e000e018 	.word	0xe000e018
 8008198:	20000000 	.word	0x20000000
 800819c:	10624dd3 	.word	0x10624dd3
 80081a0:	e000e014 	.word	0xe000e014

080081a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80081a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80081b4 <vPortEnableVFP+0x10>
 80081a8:	6801      	ldr	r1, [r0, #0]
 80081aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80081ae:	6001      	str	r1, [r0, #0]
 80081b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80081b2:	bf00      	nop
 80081b4:	e000ed88 	.word	0xe000ed88

080081b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80081be:	f3ef 8305 	mrs	r3, IPSR
 80081c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2b0f      	cmp	r3, #15
 80081c8:	d915      	bls.n	80081f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081ca:	4a18      	ldr	r2, [pc, #96]	@ (800822c <vPortValidateInterruptPriority+0x74>)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4413      	add	r3, r2
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081d4:	4b16      	ldr	r3, [pc, #88]	@ (8008230 <vPortValidateInterruptPriority+0x78>)
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	7afa      	ldrb	r2, [r7, #11]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d20b      	bcs.n	80081f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80081de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	607b      	str	r3, [r7, #4]
}
 80081f0:	bf00      	nop
 80081f2:	bf00      	nop
 80081f4:	e7fd      	b.n	80081f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80081f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008234 <vPortValidateInterruptPriority+0x7c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80081fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008238 <vPortValidateInterruptPriority+0x80>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	429a      	cmp	r2, r3
 8008204:	d90b      	bls.n	800821e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	603b      	str	r3, [r7, #0]
}
 8008218:	bf00      	nop
 800821a:	bf00      	nop
 800821c:	e7fd      	b.n	800821a <vPortValidateInterruptPriority+0x62>
	}
 800821e:	bf00      	nop
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	e000e3f0 	.word	0xe000e3f0
 8008230:	20001928 	.word	0x20001928
 8008234:	e000ed0c 	.word	0xe000ed0c
 8008238:	2000192c 	.word	0x2000192c

0800823c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b08a      	sub	sp, #40	@ 0x28
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008244:	2300      	movs	r3, #0
 8008246:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008248:	f7ff f96a 	bl	8007520 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800824c:	4b5c      	ldr	r3, [pc, #368]	@ (80083c0 <pvPortMalloc+0x184>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d101      	bne.n	8008258 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008254:	f000 f924 	bl	80084a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008258:	4b5a      	ldr	r3, [pc, #360]	@ (80083c4 <pvPortMalloc+0x188>)
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4013      	ands	r3, r2
 8008260:	2b00      	cmp	r3, #0
 8008262:	f040 8095 	bne.w	8008390 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d01e      	beq.n	80082aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800826c:	2208      	movs	r2, #8
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4413      	add	r3, r2
 8008272:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f003 0307 	and.w	r3, r3, #7
 800827a:	2b00      	cmp	r3, #0
 800827c:	d015      	beq.n	80082aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f023 0307 	bic.w	r3, r3, #7
 8008284:	3308      	adds	r3, #8
 8008286:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f003 0307 	and.w	r3, r3, #7
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00b      	beq.n	80082aa <pvPortMalloc+0x6e>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	617b      	str	r3, [r7, #20]
}
 80082a4:	bf00      	nop
 80082a6:	bf00      	nop
 80082a8:	e7fd      	b.n	80082a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d06f      	beq.n	8008390 <pvPortMalloc+0x154>
 80082b0:	4b45      	ldr	r3, [pc, #276]	@ (80083c8 <pvPortMalloc+0x18c>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d86a      	bhi.n	8008390 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082ba:	4b44      	ldr	r3, [pc, #272]	@ (80083cc <pvPortMalloc+0x190>)
 80082bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082be:	4b43      	ldr	r3, [pc, #268]	@ (80083cc <pvPortMalloc+0x190>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082c4:	e004      	b.n	80082d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80082c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80082ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d903      	bls.n	80082e2 <pvPortMalloc+0xa6>
 80082da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1f1      	bne.n	80082c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80082e2:	4b37      	ldr	r3, [pc, #220]	@ (80083c0 <pvPortMalloc+0x184>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d051      	beq.n	8008390 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80082ec:	6a3b      	ldr	r3, [r7, #32]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2208      	movs	r2, #8
 80082f2:	4413      	add	r3, r2
 80082f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80082f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80082fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008300:	685a      	ldr	r2, [r3, #4]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	1ad2      	subs	r2, r2, r3
 8008306:	2308      	movs	r3, #8
 8008308:	005b      	lsls	r3, r3, #1
 800830a:	429a      	cmp	r2, r3
 800830c:	d920      	bls.n	8008350 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800830e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4413      	add	r3, r2
 8008314:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	f003 0307 	and.w	r3, r3, #7
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00b      	beq.n	8008338 <pvPortMalloc+0xfc>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	613b      	str	r3, [r7, #16]
}
 8008332:	bf00      	nop
 8008334:	bf00      	nop
 8008336:	e7fd      	b.n	8008334 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	1ad2      	subs	r2, r2, r3
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800834a:	69b8      	ldr	r0, [r7, #24]
 800834c:	f000 f90a 	bl	8008564 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008350:	4b1d      	ldr	r3, [pc, #116]	@ (80083c8 <pvPortMalloc+0x18c>)
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	4a1b      	ldr	r2, [pc, #108]	@ (80083c8 <pvPortMalloc+0x18c>)
 800835c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800835e:	4b1a      	ldr	r3, [pc, #104]	@ (80083c8 <pvPortMalloc+0x18c>)
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	4b1b      	ldr	r3, [pc, #108]	@ (80083d0 <pvPortMalloc+0x194>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	429a      	cmp	r2, r3
 8008368:	d203      	bcs.n	8008372 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800836a:	4b17      	ldr	r3, [pc, #92]	@ (80083c8 <pvPortMalloc+0x18c>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a18      	ldr	r2, [pc, #96]	@ (80083d0 <pvPortMalloc+0x194>)
 8008370:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	4b13      	ldr	r3, [pc, #76]	@ (80083c4 <pvPortMalloc+0x188>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	431a      	orrs	r2, r3
 800837c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008386:	4b13      	ldr	r3, [pc, #76]	@ (80083d4 <pvPortMalloc+0x198>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	3301      	adds	r3, #1
 800838c:	4a11      	ldr	r2, [pc, #68]	@ (80083d4 <pvPortMalloc+0x198>)
 800838e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008390:	f7ff f8d4 	bl	800753c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00b      	beq.n	80083b6 <pvPortMalloc+0x17a>
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	60fb      	str	r3, [r7, #12]
}
 80083b0:	bf00      	nop
 80083b2:	bf00      	nop
 80083b4:	e7fd      	b.n	80083b2 <pvPortMalloc+0x176>
	return pvReturn;
 80083b6:	69fb      	ldr	r3, [r7, #28]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3728      	adds	r7, #40	@ 0x28
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	20004048 	.word	0x20004048
 80083c4:	2000405c 	.word	0x2000405c
 80083c8:	2000404c 	.word	0x2000404c
 80083cc:	20004040 	.word	0x20004040
 80083d0:	20004050 	.word	0x20004050
 80083d4:	20004054 	.word	0x20004054

080083d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d04f      	beq.n	800848a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80083ea:	2308      	movs	r3, #8
 80083ec:	425b      	negs	r3, r3
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	4413      	add	r3, r2
 80083f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	4b25      	ldr	r3, [pc, #148]	@ (8008494 <vPortFree+0xbc>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4013      	ands	r3, r2
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10b      	bne.n	800841e <vPortFree+0x46>
	__asm volatile
 8008406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	60fb      	str	r3, [r7, #12]
}
 8008418:	bf00      	nop
 800841a:	bf00      	nop
 800841c:	e7fd      	b.n	800841a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00b      	beq.n	800843e <vPortFree+0x66>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	60bb      	str	r3, [r7, #8]
}
 8008438:	bf00      	nop
 800843a:	bf00      	nop
 800843c:	e7fd      	b.n	800843a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	685a      	ldr	r2, [r3, #4]
 8008442:	4b14      	ldr	r3, [pc, #80]	@ (8008494 <vPortFree+0xbc>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4013      	ands	r3, r2
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01e      	beq.n	800848a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d11a      	bne.n	800848a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	4b0e      	ldr	r3, [pc, #56]	@ (8008494 <vPortFree+0xbc>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	43db      	mvns	r3, r3
 800845e:	401a      	ands	r2, r3
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008464:	f7ff f85c 	bl	8007520 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	685a      	ldr	r2, [r3, #4]
 800846c:	4b0a      	ldr	r3, [pc, #40]	@ (8008498 <vPortFree+0xc0>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4413      	add	r3, r2
 8008472:	4a09      	ldr	r2, [pc, #36]	@ (8008498 <vPortFree+0xc0>)
 8008474:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008476:	6938      	ldr	r0, [r7, #16]
 8008478:	f000 f874 	bl	8008564 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800847c:	4b07      	ldr	r3, [pc, #28]	@ (800849c <vPortFree+0xc4>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3301      	adds	r3, #1
 8008482:	4a06      	ldr	r2, [pc, #24]	@ (800849c <vPortFree+0xc4>)
 8008484:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008486:	f7ff f859 	bl	800753c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800848a:	bf00      	nop
 800848c:	3718      	adds	r7, #24
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	2000405c 	.word	0x2000405c
 8008498:	2000404c 	.word	0x2000404c
 800849c:	20004058 	.word	0x20004058

080084a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084a6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80084aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084ac:	4b27      	ldr	r3, [pc, #156]	@ (800854c <prvHeapInit+0xac>)
 80084ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f003 0307 	and.w	r3, r3, #7
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00c      	beq.n	80084d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	3307      	adds	r3, #7
 80084be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f023 0307 	bic.w	r3, r3, #7
 80084c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	4a1f      	ldr	r2, [pc, #124]	@ (800854c <prvHeapInit+0xac>)
 80084d0:	4413      	add	r3, r2
 80084d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008550 <prvHeapInit+0xb0>)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80084de:	4b1c      	ldr	r3, [pc, #112]	@ (8008550 <prvHeapInit+0xb0>)
 80084e0:	2200      	movs	r2, #0
 80084e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	4413      	add	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80084ec:	2208      	movs	r2, #8
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	1a9b      	subs	r3, r3, r2
 80084f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f023 0307 	bic.w	r3, r3, #7
 80084fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	4a15      	ldr	r2, [pc, #84]	@ (8008554 <prvHeapInit+0xb4>)
 8008500:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008502:	4b14      	ldr	r3, [pc, #80]	@ (8008554 <prvHeapInit+0xb4>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2200      	movs	r2, #0
 8008508:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800850a:	4b12      	ldr	r3, [pc, #72]	@ (8008554 <prvHeapInit+0xb4>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2200      	movs	r2, #0
 8008510:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	1ad2      	subs	r2, r2, r3
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008520:	4b0c      	ldr	r3, [pc, #48]	@ (8008554 <prvHeapInit+0xb4>)
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	4a0a      	ldr	r2, [pc, #40]	@ (8008558 <prvHeapInit+0xb8>)
 800852e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	4a09      	ldr	r2, [pc, #36]	@ (800855c <prvHeapInit+0xbc>)
 8008536:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008538:	4b09      	ldr	r3, [pc, #36]	@ (8008560 <prvHeapInit+0xc0>)
 800853a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800853e:	601a      	str	r2, [r3, #0]
}
 8008540:	bf00      	nop
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr
 800854c:	20001930 	.word	0x20001930
 8008550:	20004040 	.word	0x20004040
 8008554:	20004048 	.word	0x20004048
 8008558:	20004050 	.word	0x20004050
 800855c:	2000404c 	.word	0x2000404c
 8008560:	2000405c 	.word	0x2000405c

08008564 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800856c:	4b28      	ldr	r3, [pc, #160]	@ (8008610 <prvInsertBlockIntoFreeList+0xac>)
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	e002      	b.n	8008578 <prvInsertBlockIntoFreeList+0x14>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	60fb      	str	r3, [r7, #12]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	429a      	cmp	r2, r3
 8008580:	d8f7      	bhi.n	8008572 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	4413      	add	r3, r2
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	429a      	cmp	r2, r3
 8008592:	d108      	bne.n	80085a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	441a      	add	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	441a      	add	r2, r3
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d118      	bne.n	80085ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	4b15      	ldr	r3, [pc, #84]	@ (8008614 <prvInsertBlockIntoFreeList+0xb0>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d00d      	beq.n	80085e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	685a      	ldr	r2, [r3, #4]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	441a      	add	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	601a      	str	r2, [r3, #0]
 80085e0:	e008      	b.n	80085f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80085e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008614 <prvInsertBlockIntoFreeList+0xb0>)
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	601a      	str	r2, [r3, #0]
 80085ea:	e003      	b.n	80085f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d002      	beq.n	8008602 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008602:	bf00      	nop
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	20004040 	.word	0x20004040
 8008614:	20004048 	.word	0x20004048

08008618 <SPI_Write>:


TaskHandle_t Bump_task = NULL;


void SPI_Write(uint8_t reg, uint8_t value) {
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	4603      	mov	r3, r0
 8008620:	460a      	mov	r2, r1
 8008622:	71fb      	strb	r3, [r7, #7]
 8008624:	4613      	mov	r3, r2
 8008626:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg | 0x40;
 8008628:	79fb      	ldrb	r3, [r7, #7]
 800862a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800862e:	b2db      	uxtb	r3, r3
 8008630:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8008632:	79bb      	ldrb	r3, [r7, #6]
 8008634:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_RESET);
 8008636:	2200      	movs	r2, #0
 8008638:	2120      	movs	r1, #32
 800863a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800863e:	f7fa fbc3 	bl	8002dc8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, data, 2, HAL_MAX_DELAY);
 8008642:	f107 010c 	add.w	r1, r7, #12
 8008646:	f04f 33ff 	mov.w	r3, #4294967295
 800864a:	2202      	movs	r2, #2
 800864c:	4806      	ldr	r0, [pc, #24]	@ (8008668 <SPI_Write+0x50>)
 800864e:	f7fb fc64 	bl	8003f1a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_SET);
 8008652:	2201      	movs	r2, #1
 8008654:	2120      	movs	r1, #32
 8008656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800865a:	f7fa fbb5 	bl	8002dc8 <HAL_GPIO_WritePin>
}
 800865e:	bf00      	nop
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	200014d8 	.word	0x200014d8

0800866c <SPI_Read>:

uint8_t SPI_Read(uint8_t reg) {
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	4603      	mov	r3, r0
 8008674:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_data = reg | 0x80;
 8008676:	79fb      	ldrb	r3, [r7, #7]
 8008678:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800867c:	b2db      	uxtb	r3, r3
 800867e:	73fb      	strb	r3, [r7, #15]
	uint8_t rx_data = 0;
 8008680:	2300      	movs	r3, #0
 8008682:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_RESET);
 8008684:	2200      	movs	r2, #0
 8008686:	2120      	movs	r1, #32
 8008688:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800868c:	f7fa fb9c 	bl	8002dc8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &tx_data, 1, HAL_MAX_DELAY);
 8008690:	f107 010f 	add.w	r1, r7, #15
 8008694:	f04f 33ff 	mov.w	r3, #4294967295
 8008698:	2201      	movs	r2, #1
 800869a:	480b      	ldr	r0, [pc, #44]	@ (80086c8 <SPI_Read+0x5c>)
 800869c:	f7fb fc3d 	bl	8003f1a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &rx_data, 1, HAL_MAX_DELAY);
 80086a0:	f107 010e 	add.w	r1, r7, #14
 80086a4:	f04f 33ff 	mov.w	r3, #4294967295
 80086a8:	2201      	movs	r2, #1
 80086aa:	4807      	ldr	r0, [pc, #28]	@ (80086c8 <SPI_Read+0x5c>)
 80086ac:	f7fb fdaa 	bl	8004204 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_SET);
 80086b0:	2201      	movs	r2, #1
 80086b2:	2120      	movs	r1, #32
 80086b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80086b8:	f7fa fb86 	bl	8002dc8 <HAL_GPIO_WritePin>

	return rx_data;
 80086bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	200014d8 	.word	0x200014d8

080086cc <ADXL343_Init>:
	accel_data[2] = (float)raw_accel[2]; // Accélération Z en g

	return HAL_OK;
}

void ADXL343_Init(void) {
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
	uint8_t devid = SPI_Read(ADXL343_REG_DEVID);  // Lire le registre DEVID (0x00)
 80086d2:	2000      	movs	r0, #0
 80086d4:	f7ff ffca 	bl	800866c <SPI_Read>
 80086d8:	4603      	mov	r3, r0
 80086da:	73fb      	strb	r3, [r7, #15]

	if (devid == 0xE5) {
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
 80086de:	2be5      	cmp	r3, #229	@ 0xe5
 80086e0:	d135      	bne.n	800874e <ADXL343_Init+0x82>
		// Le composant est détecté, procéder à l'initialisation

		SPI_Write(ADXL343_REG_POWER_CTL, 0x00);  // Désactiver appareil
 80086e2:	2100      	movs	r1, #0
 80086e4:	202d      	movs	r0, #45	@ 0x2d
 80086e6:	f7ff ff97 	bl	8008618 <SPI_Write>
		SPI_Write(ADXL343_REG_DATA_FORMAT, 0x00);  // DATA_FORMAT : FULL_RES = 1, RANGE = ±2g
 80086ea:	2100      	movs	r1, #0
 80086ec:	2031      	movs	r0, #49	@ 0x31
 80086ee:	f7ff ff93 	bl	8008618 <SPI_Write>
		SPI_Write(ADXL343_REG_INT_ENABLE, 0x00);  // Désactiver interruption
 80086f2:	2100      	movs	r1, #0
 80086f4:	202e      	movs	r0, #46	@ 0x2e
 80086f6:	f7ff ff8f 	bl	8008618 <SPI_Write>
		SPI_Write(ADXL343_REG_THRESH_TAP, 0x20);	// Config seuil choc
 80086fa:	2120      	movs	r1, #32
 80086fc:	201d      	movs	r0, #29
 80086fe:	f7ff ff8b 	bl	8008618 <SPI_Write>
		SPI_Write(ADXL343_REG_DUR, 0x20);	// Config durée choc
 8008702:	2120      	movs	r1, #32
 8008704:	2021      	movs	r0, #33	@ 0x21
 8008706:	f7ff ff87 	bl	8008618 <SPI_Write>
		SPI_Write(ADXL343_REG_LATENT, 0xC8);	// Config latence choc
 800870a:	21c8      	movs	r1, #200	@ 0xc8
 800870c:	2022      	movs	r0, #34	@ 0x22
 800870e:	f7ff ff83 	bl	8008618 <SPI_Write>
		SPI_Write(ADXL343_REG_TAP_AXES, 0x06);	// Activer axe X Y
 8008712:	2106      	movs	r1, #6
 8008714:	202a      	movs	r0, #42	@ 0x2a
 8008716:	f7ff ff7f 	bl	8008618 <SPI_Write>
		SPI_Write(ADXL343_REG_BW_RATE, 0x0F);  // Configurer la bande passante
 800871a:	210f      	movs	r1, #15
 800871c:	202c      	movs	r0, #44	@ 0x2c
 800871e:	f7ff ff7b 	bl	8008618 <SPI_Write>
		SPI_Write(ADXL343_REG_INT_MAP, 0x40);	// Configurer pin interruption
 8008722:	2140      	movs	r1, #64	@ 0x40
 8008724:	202f      	movs	r0, #47	@ 0x2f
 8008726:	f7ff ff77 	bl	8008618 <SPI_Write>
		SPI_Write(ADXL343_REG_INT_ENABLE, 0x40);  // Activer interruption
 800872a:	2140      	movs	r1, #64	@ 0x40
 800872c:	202e      	movs	r0, #46	@ 0x2e
 800872e:	f7ff ff73 	bl	8008618 <SPI_Write>
		//Read_Acceleration(float *accel_data);    // Lire les données pour effacer l'interruption

		char *msg = "ADXL343 detecte et initialise !\r\n";
 8008732:	4b0f      	ldr	r3, [pc, #60]	@ (8008770 <ADXL343_Init+0xa4>)
 8008734:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7f7 fdc2 	bl	80002c0 <strlen>
 800873c:	4603      	mov	r3, r0
 800873e:	b29a      	uxth	r2, r3
 8008740:	f04f 33ff 	mov.w	r3, #4294967295
 8008744:	6879      	ldr	r1, [r7, #4]
 8008746:	480b      	ldr	r0, [pc, #44]	@ (8008774 <ADXL343_Init+0xa8>)
 8008748:	f7fd fa9a 	bl	8005c80 <HAL_UART_Transmit>
	} else {
		char *error_msg = "Erreur : ADXL343 non detecte !\r\n";
		HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
	}
}
 800874c:	e00c      	b.n	8008768 <ADXL343_Init+0x9c>
		char *error_msg = "Erreur : ADXL343 non detecte !\r\n";
 800874e:	4b0a      	ldr	r3, [pc, #40]	@ (8008778 <ADXL343_Init+0xac>)
 8008750:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8008752:	68b8      	ldr	r0, [r7, #8]
 8008754:	f7f7 fdb4 	bl	80002c0 <strlen>
 8008758:	4603      	mov	r3, r0
 800875a:	b29a      	uxth	r2, r3
 800875c:	f04f 33ff 	mov.w	r3, #4294967295
 8008760:	68b9      	ldr	r1, [r7, #8]
 8008762:	4804      	ldr	r0, [pc, #16]	@ (8008774 <ADXL343_Init+0xa8>)
 8008764:	f7fd fa8c 	bl	8005c80 <HAL_UART_Transmit>
}
 8008768:	bf00      	nop
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	0800d264 	.word	0x0800d264
 8008774:	20001670 	.word	0x20001670
 8008778:	0800d288 	.word	0x0800d288

0800877c <Motor_Forward_R>:
#define FWD_GPIO_PORT_L GPIOA      // Port pour FWD_L
#define REV_GPIO_PORT_L GPIOA      // Port pour REV_L
#define UART_RX_BUFFER_SIZE 1
#define UART_TX_BUFFER_SIZE 64

void Motor_Forward_R(int percentage) {
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
    // Limiter le pourcentage entre 0 et 100
    if (percentage > 100) percentage = 100;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b64      	cmp	r3, #100	@ 0x64
 8008788:	dd01      	ble.n	800878e <Motor_Forward_R+0x12>
 800878a:	2364      	movs	r3, #100	@ 0x64
 800878c:	607b      	str	r3, [r7, #4]
    if (percentage < 0) percentage = 0;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2b00      	cmp	r3, #0
 8008792:	da01      	bge.n	8008798 <Motor_Forward_R+0x1c>
 8008794:	2300      	movs	r3, #0
 8008796:	607b      	str	r3, [r7, #4]

    // Mettre à jour les GPIO et PWM pour avancer (moteur droit)
    HAL_GPIO_WritePin(REV_GPIO_PORT_R, REV_GPIO_PIN_R, GPIO_PIN_RESET);
 8008798:	2200      	movs	r2, #0
 800879a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800879e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80087a2:	f7fa fb11 	bl	8002dc8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FWD_GPIO_PORT_R, FWD_GPIO_PIN_R, GPIO_PIN_SET);
 80087a6:	2201      	movs	r2, #1
 80087a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80087ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80087b0:	f7fa fb0a 	bl	8002dc8 <HAL_GPIO_WritePin>
    TIM1->CCR1 = (percentage * PWM_MAX_DUTY_CYCLE) / 100;
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	4613      	mov	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4413      	add	r3, r2
 80087bc:	00db      	lsls	r3, r3, #3
 80087be:	4a07      	ldr	r2, [pc, #28]	@ (80087dc <Motor_Forward_R+0x60>)
 80087c0:	fb82 1203 	smull	r1, r2, r2, r3
 80087c4:	1152      	asrs	r2, r2, #5
 80087c6:	17db      	asrs	r3, r3, #31
 80087c8:	1ad2      	subs	r2, r2, r3
 80087ca:	4b05      	ldr	r3, [pc, #20]	@ (80087e0 <Motor_Forward_R+0x64>)
 80087cc:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 = 0;
 80087ce:	4b04      	ldr	r3, [pc, #16]	@ (80087e0 <Motor_Forward_R+0x64>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80087d4:	bf00      	nop
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	51eb851f 	.word	0x51eb851f
 80087e0:	40012c00 	.word	0x40012c00

080087e4 <Motor_Reverse_R>:

void Motor_Reverse_R(int percentage) {
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
    // Limiter le pourcentage entre 0 et 100
    if (percentage > 100) percentage = 100;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2b64      	cmp	r3, #100	@ 0x64
 80087f0:	dd01      	ble.n	80087f6 <Motor_Reverse_R+0x12>
 80087f2:	2364      	movs	r3, #100	@ 0x64
 80087f4:	607b      	str	r3, [r7, #4]
    if (percentage < 0) percentage = 0;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	da01      	bge.n	8008800 <Motor_Reverse_R+0x1c>
 80087fc:	2300      	movs	r3, #0
 80087fe:	607b      	str	r3, [r7, #4]

    // Mettre à jour les GPIO et PWM pour reculer (moteur droit)
    HAL_GPIO_WritePin(FWD_GPIO_PORT_R, FWD_GPIO_PIN_R, GPIO_PIN_RESET);
 8008800:	2200      	movs	r2, #0
 8008802:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800880a:	f7fa fadd 	bl	8002dc8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(REV_GPIO_PORT_R, REV_GPIO_PIN_R, GPIO_PIN_SET);
 800880e:	2201      	movs	r2, #1
 8008810:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008814:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008818:	f7fa fad6 	bl	8002dc8 <HAL_GPIO_WritePin>
    TIM1->CCR2 = (percentage * PWM_MAX_DUTY_CYCLE) / 100;
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	4613      	mov	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	4413      	add	r3, r2
 8008824:	00db      	lsls	r3, r3, #3
 8008826:	4a07      	ldr	r2, [pc, #28]	@ (8008844 <Motor_Reverse_R+0x60>)
 8008828:	fb82 1203 	smull	r1, r2, r2, r3
 800882c:	1152      	asrs	r2, r2, #5
 800882e:	17db      	asrs	r3, r3, #31
 8008830:	1ad2      	subs	r2, r2, r3
 8008832:	4b05      	ldr	r3, [pc, #20]	@ (8008848 <Motor_Reverse_R+0x64>)
 8008834:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM1->CCR1 = 0;
 8008836:	4b04      	ldr	r3, [pc, #16]	@ (8008848 <Motor_Reverse_R+0x64>)
 8008838:	2200      	movs	r2, #0
 800883a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800883c:	bf00      	nop
 800883e:	3708      	adds	r7, #8
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	51eb851f 	.word	0x51eb851f
 8008848:	40012c00 	.word	0x40012c00

0800884c <Motor_Forward_L>:

void Motor_Forward_L(int percentage) {
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
    // Limiter le pourcentage entre 0 et 100
    if (percentage > 100) percentage = 100;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2b64      	cmp	r3, #100	@ 0x64
 8008858:	dd01      	ble.n	800885e <Motor_Forward_L+0x12>
 800885a:	2364      	movs	r3, #100	@ 0x64
 800885c:	607b      	str	r3, [r7, #4]
    if (percentage < 0) percentage = 0;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	da01      	bge.n	8008868 <Motor_Forward_L+0x1c>
 8008864:	2300      	movs	r3, #0
 8008866:	607b      	str	r3, [r7, #4]

    // Mettre à jour les GPIO et PWM pour avancer (moteur gauche)
    HAL_GPIO_WritePin(REV_GPIO_PORT_L, REV_GPIO_PIN_L, GPIO_PIN_RESET);
 8008868:	2200      	movs	r2, #0
 800886a:	2102      	movs	r1, #2
 800886c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008870:	f7fa faaa 	bl	8002dc8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FWD_GPIO_PORT_L, FWD_GPIO_PIN_L, GPIO_PIN_SET);
 8008874:	2201      	movs	r2, #1
 8008876:	2101      	movs	r1, #1
 8008878:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800887c:	f7fa faa4 	bl	8002dc8 <HAL_GPIO_WritePin>
    TIM2->CCR2 = (percentage * PWM_MAX_DUTY_CYCLE) / 100;
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	4613      	mov	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4413      	add	r3, r2
 8008888:	00db      	lsls	r3, r3, #3
 800888a:	4a08      	ldr	r2, [pc, #32]	@ (80088ac <Motor_Forward_L+0x60>)
 800888c:	fb82 1203 	smull	r1, r2, r2, r3
 8008890:	1152      	asrs	r2, r2, #5
 8008892:	17db      	asrs	r3, r3, #31
 8008894:	1ad2      	subs	r2, r2, r3
 8008896:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800889a:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->CCR1 = 0;
 800889c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80088a0:	2200      	movs	r2, #0
 80088a2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80088a4:	bf00      	nop
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	51eb851f 	.word	0x51eb851f

080088b0 <Motor_Reverse_L>:

void Motor_Reverse_L(int percentage) {
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
    // Limiter le pourcentage entre 0 et 100
    if (percentage > 100) percentage = 100;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b64      	cmp	r3, #100	@ 0x64
 80088bc:	dd01      	ble.n	80088c2 <Motor_Reverse_L+0x12>
 80088be:	2364      	movs	r3, #100	@ 0x64
 80088c0:	607b      	str	r3, [r7, #4]
    if (percentage < 0) percentage = 0;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	da01      	bge.n	80088cc <Motor_Reverse_L+0x1c>
 80088c8:	2300      	movs	r3, #0
 80088ca:	607b      	str	r3, [r7, #4]

    // Mettre à jour les GPIO et PWM pour reculer (moteur gauche)
    HAL_GPIO_WritePin(FWD_GPIO_PORT_L, FWD_GPIO_PIN_L, GPIO_PIN_RESET);
 80088cc:	2200      	movs	r2, #0
 80088ce:	2101      	movs	r1, #1
 80088d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80088d4:	f7fa fa78 	bl	8002dc8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(REV_GPIO_PORT_L, REV_GPIO_PIN_L, GPIO_PIN_SET);
 80088d8:	2201      	movs	r2, #1
 80088da:	2102      	movs	r1, #2
 80088dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80088e0:	f7fa fa72 	bl	8002dc8 <HAL_GPIO_WritePin>
    TIM2->CCR1 = (percentage * PWM_MAX_DUTY_CYCLE) / 100;
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	4613      	mov	r3, r2
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4413      	add	r3, r2
 80088ec:	00db      	lsls	r3, r3, #3
 80088ee:	4a08      	ldr	r2, [pc, #32]	@ (8008910 <Motor_Reverse_L+0x60>)
 80088f0:	fb82 1203 	smull	r1, r2, r2, r3
 80088f4:	1152      	asrs	r2, r2, #5
 80088f6:	17db      	asrs	r3, r3, #31
 80088f8:	1ad2      	subs	r2, r2, r3
 80088fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80088fe:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = 0;
 8008900:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008904:	2200      	movs	r2, #0
 8008906:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8008908:	bf00      	nop
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	51eb851f 	.word	0x51eb851f

08008914 <Start_Motors>:
    TIM1->CCR2 = 0;
    TIM2->CCR1 = 0;
    TIM2->CCR2 = 0;
}

void Start_Motors(void) {
 8008914:	b580      	push	{r7, lr}
 8008916:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8008918:	2100      	movs	r1, #0
 800891a:	480f      	ldr	r0, [pc, #60]	@ (8008958 <Start_Motors+0x44>)
 800891c:	f7fc f9e0 	bl	8004ce0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8008920:	2104      	movs	r1, #4
 8008922:	480d      	ldr	r0, [pc, #52]	@ (8008958 <Start_Motors+0x44>)
 8008924:	f7fc f9dc 	bl	8004ce0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8008928:	2100      	movs	r1, #0
 800892a:	480c      	ldr	r0, [pc, #48]	@ (800895c <Start_Motors+0x48>)
 800892c:	f7fc f9d8 	bl	8004ce0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8008930:	2104      	movs	r1, #4
 8008932:	480a      	ldr	r0, [pc, #40]	@ (800895c <Start_Motors+0x48>)
 8008934:	f7fc f9d4 	bl	8004ce0 <HAL_TIM_PWM_Start>
    TIM1->CCR1 = 0;
 8008938:	4b09      	ldr	r3, [pc, #36]	@ (8008960 <Start_Motors+0x4c>)
 800893a:	2200      	movs	r2, #0
 800893c:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 = 0;
 800893e:	4b08      	ldr	r3, [pc, #32]	@ (8008960 <Start_Motors+0x4c>)
 8008940:	2200      	movs	r2, #0
 8008942:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->CCR1 = 0;
 8008944:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008948:	2200      	movs	r2, #0
 800894a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = 0;
 800894c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008950:	2200      	movs	r2, #0
 8008952:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8008954:	bf00      	nop
 8008956:	bd80      	pop	{r7, pc}
 8008958:	20001540 	.word	0x20001540
 800895c:	2000158c 	.word	0x2000158c
 8008960:	40012c00 	.word	0x40012c00

08008964 <LIDAR_Init>:

/*
 * @brief Initialization of the lidar
 * @param
 */
void LIDAR_Init(LIDAR_HandleTypeDef_t * hlidar){
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
	hlidar->huart = &huart3;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a09      	ldr	r2, [pc, #36]	@ (8008994 <LIDAR_Init+0x30>)
 8008970:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, DEV_EN_LIDAR_Pin, GPIO_PIN_SET);
 8008972:	2201      	movs	r2, #1
 8008974:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008978:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800897c:	f7fa fa24 	bl	8002dc8 <HAL_GPIO_WritePin>
	// Enable M_EN lidar
	HAL_GPIO_WritePin(M_EN_LIDAR_GPIO_Port, M_EN_LIDAR_Pin, GPIO_PIN_SET);
 8008980:	2201      	movs	r2, #1
 8008982:	2104      	movs	r1, #4
 8008984:	4804      	ldr	r0, [pc, #16]	@ (8008998 <LIDAR_Init+0x34>)
 8008986:	f7fa fa1f 	bl	8002dc8 <HAL_GPIO_WritePin>

}
 800898a:	bf00      	nop
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	20001704 	.word	0x20001704
 8008998:	48000400 	.word	0x48000400

0800899c <LIDAR_Start>:

/*
 * @brief
 * @param
 */
HAL_StatusTypeDef LIDAR_Start(LIDAR_HandleTypeDef_t * hlidar){
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
	uint8_t lidar_command[2] = {START_CMD_LIDAR, SCAN_CMD_LIDAR};
 80089a4:	f246 03a5 	movw	r3, #24741	@ 0x60a5
 80089a8:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_UART_Transmit(hlidar->huart, lidar_command, 2, 2000);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6818      	ldr	r0, [r3, #0]
 80089ae:	f107 010c 	add.w	r1, r7, #12
 80089b2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80089b6:	2202      	movs	r2, #2
 80089b8:	f7fd f962 	bl	8005c80 <HAL_UART_Transmit>
 80089bc:	4603      	mov	r3, r0
 80089be:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK){
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10a      	bne.n	80089dc <LIDAR_Start+0x40>
		HAL_UART_Receive_DMA(hlidar->huart, hlidar->data_buff, DATA_BUFF_SIZE_LIDAR);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6818      	ldr	r0, [r3, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	3329      	adds	r3, #41	@ 0x29
 80089ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80089d2:	4619      	mov	r1, r3
 80089d4:	f7fd f9e2 	bl	8005d9c <HAL_UART_Receive_DMA>
		return status;
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	e000      	b.n	80089de <LIDAR_Start+0x42>
	}
	else{
		return status;
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <__cvt>:
 80089e6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089ea:	ec57 6b10 	vmov	r6, r7, d0
 80089ee:	2f00      	cmp	r7, #0
 80089f0:	460c      	mov	r4, r1
 80089f2:	4619      	mov	r1, r3
 80089f4:	463b      	mov	r3, r7
 80089f6:	bfbb      	ittet	lt
 80089f8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80089fc:	461f      	movlt	r7, r3
 80089fe:	2300      	movge	r3, #0
 8008a00:	232d      	movlt	r3, #45	@ 0x2d
 8008a02:	700b      	strb	r3, [r1, #0]
 8008a04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a06:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008a0a:	4691      	mov	r9, r2
 8008a0c:	f023 0820 	bic.w	r8, r3, #32
 8008a10:	bfbc      	itt	lt
 8008a12:	4632      	movlt	r2, r6
 8008a14:	4616      	movlt	r6, r2
 8008a16:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008a1a:	d005      	beq.n	8008a28 <__cvt+0x42>
 8008a1c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008a20:	d100      	bne.n	8008a24 <__cvt+0x3e>
 8008a22:	3401      	adds	r4, #1
 8008a24:	2102      	movs	r1, #2
 8008a26:	e000      	b.n	8008a2a <__cvt+0x44>
 8008a28:	2103      	movs	r1, #3
 8008a2a:	ab03      	add	r3, sp, #12
 8008a2c:	9301      	str	r3, [sp, #4]
 8008a2e:	ab02      	add	r3, sp, #8
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	ec47 6b10 	vmov	d0, r6, r7
 8008a36:	4653      	mov	r3, sl
 8008a38:	4622      	mov	r2, r4
 8008a3a:	f001 f975 	bl	8009d28 <_dtoa_r>
 8008a3e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008a42:	4605      	mov	r5, r0
 8008a44:	d119      	bne.n	8008a7a <__cvt+0x94>
 8008a46:	f019 0f01 	tst.w	r9, #1
 8008a4a:	d00e      	beq.n	8008a6a <__cvt+0x84>
 8008a4c:	eb00 0904 	add.w	r9, r0, r4
 8008a50:	2200      	movs	r2, #0
 8008a52:	2300      	movs	r3, #0
 8008a54:	4630      	mov	r0, r6
 8008a56:	4639      	mov	r1, r7
 8008a58:	f7f8 f85e 	bl	8000b18 <__aeabi_dcmpeq>
 8008a5c:	b108      	cbz	r0, 8008a62 <__cvt+0x7c>
 8008a5e:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a62:	2230      	movs	r2, #48	@ 0x30
 8008a64:	9b03      	ldr	r3, [sp, #12]
 8008a66:	454b      	cmp	r3, r9
 8008a68:	d31e      	bcc.n	8008aa8 <__cvt+0xc2>
 8008a6a:	9b03      	ldr	r3, [sp, #12]
 8008a6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a6e:	1b5b      	subs	r3, r3, r5
 8008a70:	4628      	mov	r0, r5
 8008a72:	6013      	str	r3, [r2, #0]
 8008a74:	b004      	add	sp, #16
 8008a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a7a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008a7e:	eb00 0904 	add.w	r9, r0, r4
 8008a82:	d1e5      	bne.n	8008a50 <__cvt+0x6a>
 8008a84:	7803      	ldrb	r3, [r0, #0]
 8008a86:	2b30      	cmp	r3, #48	@ 0x30
 8008a88:	d10a      	bne.n	8008aa0 <__cvt+0xba>
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	4630      	mov	r0, r6
 8008a90:	4639      	mov	r1, r7
 8008a92:	f7f8 f841 	bl	8000b18 <__aeabi_dcmpeq>
 8008a96:	b918      	cbnz	r0, 8008aa0 <__cvt+0xba>
 8008a98:	f1c4 0401 	rsb	r4, r4, #1
 8008a9c:	f8ca 4000 	str.w	r4, [sl]
 8008aa0:	f8da 3000 	ldr.w	r3, [sl]
 8008aa4:	4499      	add	r9, r3
 8008aa6:	e7d3      	b.n	8008a50 <__cvt+0x6a>
 8008aa8:	1c59      	adds	r1, r3, #1
 8008aaa:	9103      	str	r1, [sp, #12]
 8008aac:	701a      	strb	r2, [r3, #0]
 8008aae:	e7d9      	b.n	8008a64 <__cvt+0x7e>

08008ab0 <__exponent>:
 8008ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ab2:	2900      	cmp	r1, #0
 8008ab4:	bfba      	itte	lt
 8008ab6:	4249      	neglt	r1, r1
 8008ab8:	232d      	movlt	r3, #45	@ 0x2d
 8008aba:	232b      	movge	r3, #43	@ 0x2b
 8008abc:	2909      	cmp	r1, #9
 8008abe:	7002      	strb	r2, [r0, #0]
 8008ac0:	7043      	strb	r3, [r0, #1]
 8008ac2:	dd29      	ble.n	8008b18 <__exponent+0x68>
 8008ac4:	f10d 0307 	add.w	r3, sp, #7
 8008ac8:	461d      	mov	r5, r3
 8008aca:	270a      	movs	r7, #10
 8008acc:	461a      	mov	r2, r3
 8008ace:	fbb1 f6f7 	udiv	r6, r1, r7
 8008ad2:	fb07 1416 	mls	r4, r7, r6, r1
 8008ad6:	3430      	adds	r4, #48	@ 0x30
 8008ad8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008adc:	460c      	mov	r4, r1
 8008ade:	2c63      	cmp	r4, #99	@ 0x63
 8008ae0:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ae4:	4631      	mov	r1, r6
 8008ae6:	dcf1      	bgt.n	8008acc <__exponent+0x1c>
 8008ae8:	3130      	adds	r1, #48	@ 0x30
 8008aea:	1e94      	subs	r4, r2, #2
 8008aec:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008af0:	1c41      	adds	r1, r0, #1
 8008af2:	4623      	mov	r3, r4
 8008af4:	42ab      	cmp	r3, r5
 8008af6:	d30a      	bcc.n	8008b0e <__exponent+0x5e>
 8008af8:	f10d 0309 	add.w	r3, sp, #9
 8008afc:	1a9b      	subs	r3, r3, r2
 8008afe:	42ac      	cmp	r4, r5
 8008b00:	bf88      	it	hi
 8008b02:	2300      	movhi	r3, #0
 8008b04:	3302      	adds	r3, #2
 8008b06:	4403      	add	r3, r0
 8008b08:	1a18      	subs	r0, r3, r0
 8008b0a:	b003      	add	sp, #12
 8008b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b0e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008b12:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008b16:	e7ed      	b.n	8008af4 <__exponent+0x44>
 8008b18:	2330      	movs	r3, #48	@ 0x30
 8008b1a:	3130      	adds	r1, #48	@ 0x30
 8008b1c:	7083      	strb	r3, [r0, #2]
 8008b1e:	70c1      	strb	r1, [r0, #3]
 8008b20:	1d03      	adds	r3, r0, #4
 8008b22:	e7f1      	b.n	8008b08 <__exponent+0x58>

08008b24 <_printf_float>:
 8008b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b28:	b08d      	sub	sp, #52	@ 0x34
 8008b2a:	460c      	mov	r4, r1
 8008b2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008b30:	4616      	mov	r6, r2
 8008b32:	461f      	mov	r7, r3
 8008b34:	4605      	mov	r5, r0
 8008b36:	f000 ffe1 	bl	8009afc <_localeconv_r>
 8008b3a:	6803      	ldr	r3, [r0, #0]
 8008b3c:	9304      	str	r3, [sp, #16]
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7f7 fbbe 	bl	80002c0 <strlen>
 8008b44:	2300      	movs	r3, #0
 8008b46:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b48:	f8d8 3000 	ldr.w	r3, [r8]
 8008b4c:	9005      	str	r0, [sp, #20]
 8008b4e:	3307      	adds	r3, #7
 8008b50:	f023 0307 	bic.w	r3, r3, #7
 8008b54:	f103 0208 	add.w	r2, r3, #8
 8008b58:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008b5c:	f8d4 b000 	ldr.w	fp, [r4]
 8008b60:	f8c8 2000 	str.w	r2, [r8]
 8008b64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008b6c:	9307      	str	r3, [sp, #28]
 8008b6e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008b76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b7a:	4b9c      	ldr	r3, [pc, #624]	@ (8008dec <_printf_float+0x2c8>)
 8008b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b80:	f7f7 fffc 	bl	8000b7c <__aeabi_dcmpun>
 8008b84:	bb70      	cbnz	r0, 8008be4 <_printf_float+0xc0>
 8008b86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b8a:	4b98      	ldr	r3, [pc, #608]	@ (8008dec <_printf_float+0x2c8>)
 8008b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b90:	f7f7 ffd6 	bl	8000b40 <__aeabi_dcmple>
 8008b94:	bb30      	cbnz	r0, 8008be4 <_printf_float+0xc0>
 8008b96:	2200      	movs	r2, #0
 8008b98:	2300      	movs	r3, #0
 8008b9a:	4640      	mov	r0, r8
 8008b9c:	4649      	mov	r1, r9
 8008b9e:	f7f7 ffc5 	bl	8000b2c <__aeabi_dcmplt>
 8008ba2:	b110      	cbz	r0, 8008baa <_printf_float+0x86>
 8008ba4:	232d      	movs	r3, #45	@ 0x2d
 8008ba6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008baa:	4a91      	ldr	r2, [pc, #580]	@ (8008df0 <_printf_float+0x2cc>)
 8008bac:	4b91      	ldr	r3, [pc, #580]	@ (8008df4 <_printf_float+0x2d0>)
 8008bae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008bb2:	bf94      	ite	ls
 8008bb4:	4690      	movls	r8, r2
 8008bb6:	4698      	movhi	r8, r3
 8008bb8:	2303      	movs	r3, #3
 8008bba:	6123      	str	r3, [r4, #16]
 8008bbc:	f02b 0304 	bic.w	r3, fp, #4
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	f04f 0900 	mov.w	r9, #0
 8008bc6:	9700      	str	r7, [sp, #0]
 8008bc8:	4633      	mov	r3, r6
 8008bca:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008bcc:	4621      	mov	r1, r4
 8008bce:	4628      	mov	r0, r5
 8008bd0:	f000 f9d2 	bl	8008f78 <_printf_common>
 8008bd4:	3001      	adds	r0, #1
 8008bd6:	f040 808d 	bne.w	8008cf4 <_printf_float+0x1d0>
 8008bda:	f04f 30ff 	mov.w	r0, #4294967295
 8008bde:	b00d      	add	sp, #52	@ 0x34
 8008be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be4:	4642      	mov	r2, r8
 8008be6:	464b      	mov	r3, r9
 8008be8:	4640      	mov	r0, r8
 8008bea:	4649      	mov	r1, r9
 8008bec:	f7f7 ffc6 	bl	8000b7c <__aeabi_dcmpun>
 8008bf0:	b140      	cbz	r0, 8008c04 <_printf_float+0xe0>
 8008bf2:	464b      	mov	r3, r9
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	bfbc      	itt	lt
 8008bf8:	232d      	movlt	r3, #45	@ 0x2d
 8008bfa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008bfe:	4a7e      	ldr	r2, [pc, #504]	@ (8008df8 <_printf_float+0x2d4>)
 8008c00:	4b7e      	ldr	r3, [pc, #504]	@ (8008dfc <_printf_float+0x2d8>)
 8008c02:	e7d4      	b.n	8008bae <_printf_float+0x8a>
 8008c04:	6863      	ldr	r3, [r4, #4]
 8008c06:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008c0a:	9206      	str	r2, [sp, #24]
 8008c0c:	1c5a      	adds	r2, r3, #1
 8008c0e:	d13b      	bne.n	8008c88 <_printf_float+0x164>
 8008c10:	2306      	movs	r3, #6
 8008c12:	6063      	str	r3, [r4, #4]
 8008c14:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008c18:	2300      	movs	r3, #0
 8008c1a:	6022      	str	r2, [r4, #0]
 8008c1c:	9303      	str	r3, [sp, #12]
 8008c1e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008c20:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008c24:	ab09      	add	r3, sp, #36	@ 0x24
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	6861      	ldr	r1, [r4, #4]
 8008c2a:	ec49 8b10 	vmov	d0, r8, r9
 8008c2e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008c32:	4628      	mov	r0, r5
 8008c34:	f7ff fed7 	bl	80089e6 <__cvt>
 8008c38:	9b06      	ldr	r3, [sp, #24]
 8008c3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c3c:	2b47      	cmp	r3, #71	@ 0x47
 8008c3e:	4680      	mov	r8, r0
 8008c40:	d129      	bne.n	8008c96 <_printf_float+0x172>
 8008c42:	1cc8      	adds	r0, r1, #3
 8008c44:	db02      	blt.n	8008c4c <_printf_float+0x128>
 8008c46:	6863      	ldr	r3, [r4, #4]
 8008c48:	4299      	cmp	r1, r3
 8008c4a:	dd41      	ble.n	8008cd0 <_printf_float+0x1ac>
 8008c4c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008c50:	fa5f fa8a 	uxtb.w	sl, sl
 8008c54:	3901      	subs	r1, #1
 8008c56:	4652      	mov	r2, sl
 8008c58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008c5c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008c5e:	f7ff ff27 	bl	8008ab0 <__exponent>
 8008c62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c64:	1813      	adds	r3, r2, r0
 8008c66:	2a01      	cmp	r2, #1
 8008c68:	4681      	mov	r9, r0
 8008c6a:	6123      	str	r3, [r4, #16]
 8008c6c:	dc02      	bgt.n	8008c74 <_printf_float+0x150>
 8008c6e:	6822      	ldr	r2, [r4, #0]
 8008c70:	07d2      	lsls	r2, r2, #31
 8008c72:	d501      	bpl.n	8008c78 <_printf_float+0x154>
 8008c74:	3301      	adds	r3, #1
 8008c76:	6123      	str	r3, [r4, #16]
 8008c78:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d0a2      	beq.n	8008bc6 <_printf_float+0xa2>
 8008c80:	232d      	movs	r3, #45	@ 0x2d
 8008c82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c86:	e79e      	b.n	8008bc6 <_printf_float+0xa2>
 8008c88:	9a06      	ldr	r2, [sp, #24]
 8008c8a:	2a47      	cmp	r2, #71	@ 0x47
 8008c8c:	d1c2      	bne.n	8008c14 <_printf_float+0xf0>
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1c0      	bne.n	8008c14 <_printf_float+0xf0>
 8008c92:	2301      	movs	r3, #1
 8008c94:	e7bd      	b.n	8008c12 <_printf_float+0xee>
 8008c96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008c9a:	d9db      	bls.n	8008c54 <_printf_float+0x130>
 8008c9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008ca0:	d118      	bne.n	8008cd4 <_printf_float+0x1b0>
 8008ca2:	2900      	cmp	r1, #0
 8008ca4:	6863      	ldr	r3, [r4, #4]
 8008ca6:	dd0b      	ble.n	8008cc0 <_printf_float+0x19c>
 8008ca8:	6121      	str	r1, [r4, #16]
 8008caa:	b913      	cbnz	r3, 8008cb2 <_printf_float+0x18e>
 8008cac:	6822      	ldr	r2, [r4, #0]
 8008cae:	07d0      	lsls	r0, r2, #31
 8008cb0:	d502      	bpl.n	8008cb8 <_printf_float+0x194>
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	440b      	add	r3, r1
 8008cb6:	6123      	str	r3, [r4, #16]
 8008cb8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008cba:	f04f 0900 	mov.w	r9, #0
 8008cbe:	e7db      	b.n	8008c78 <_printf_float+0x154>
 8008cc0:	b913      	cbnz	r3, 8008cc8 <_printf_float+0x1a4>
 8008cc2:	6822      	ldr	r2, [r4, #0]
 8008cc4:	07d2      	lsls	r2, r2, #31
 8008cc6:	d501      	bpl.n	8008ccc <_printf_float+0x1a8>
 8008cc8:	3302      	adds	r3, #2
 8008cca:	e7f4      	b.n	8008cb6 <_printf_float+0x192>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e7f2      	b.n	8008cb6 <_printf_float+0x192>
 8008cd0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008cd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cd6:	4299      	cmp	r1, r3
 8008cd8:	db05      	blt.n	8008ce6 <_printf_float+0x1c2>
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	6121      	str	r1, [r4, #16]
 8008cde:	07d8      	lsls	r0, r3, #31
 8008ce0:	d5ea      	bpl.n	8008cb8 <_printf_float+0x194>
 8008ce2:	1c4b      	adds	r3, r1, #1
 8008ce4:	e7e7      	b.n	8008cb6 <_printf_float+0x192>
 8008ce6:	2900      	cmp	r1, #0
 8008ce8:	bfd4      	ite	le
 8008cea:	f1c1 0202 	rsble	r2, r1, #2
 8008cee:	2201      	movgt	r2, #1
 8008cf0:	4413      	add	r3, r2
 8008cf2:	e7e0      	b.n	8008cb6 <_printf_float+0x192>
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	055a      	lsls	r2, r3, #21
 8008cf8:	d407      	bmi.n	8008d0a <_printf_float+0x1e6>
 8008cfa:	6923      	ldr	r3, [r4, #16]
 8008cfc:	4642      	mov	r2, r8
 8008cfe:	4631      	mov	r1, r6
 8008d00:	4628      	mov	r0, r5
 8008d02:	47b8      	blx	r7
 8008d04:	3001      	adds	r0, #1
 8008d06:	d12b      	bne.n	8008d60 <_printf_float+0x23c>
 8008d08:	e767      	b.n	8008bda <_printf_float+0xb6>
 8008d0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008d0e:	f240 80dd 	bls.w	8008ecc <_printf_float+0x3a8>
 8008d12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008d16:	2200      	movs	r2, #0
 8008d18:	2300      	movs	r3, #0
 8008d1a:	f7f7 fefd 	bl	8000b18 <__aeabi_dcmpeq>
 8008d1e:	2800      	cmp	r0, #0
 8008d20:	d033      	beq.n	8008d8a <_printf_float+0x266>
 8008d22:	4a37      	ldr	r2, [pc, #220]	@ (8008e00 <_printf_float+0x2dc>)
 8008d24:	2301      	movs	r3, #1
 8008d26:	4631      	mov	r1, r6
 8008d28:	4628      	mov	r0, r5
 8008d2a:	47b8      	blx	r7
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	f43f af54 	beq.w	8008bda <_printf_float+0xb6>
 8008d32:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008d36:	4543      	cmp	r3, r8
 8008d38:	db02      	blt.n	8008d40 <_printf_float+0x21c>
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	07d8      	lsls	r0, r3, #31
 8008d3e:	d50f      	bpl.n	8008d60 <_printf_float+0x23c>
 8008d40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d44:	4631      	mov	r1, r6
 8008d46:	4628      	mov	r0, r5
 8008d48:	47b8      	blx	r7
 8008d4a:	3001      	adds	r0, #1
 8008d4c:	f43f af45 	beq.w	8008bda <_printf_float+0xb6>
 8008d50:	f04f 0900 	mov.w	r9, #0
 8008d54:	f108 38ff 	add.w	r8, r8, #4294967295
 8008d58:	f104 0a1a 	add.w	sl, r4, #26
 8008d5c:	45c8      	cmp	r8, r9
 8008d5e:	dc09      	bgt.n	8008d74 <_printf_float+0x250>
 8008d60:	6823      	ldr	r3, [r4, #0]
 8008d62:	079b      	lsls	r3, r3, #30
 8008d64:	f100 8103 	bmi.w	8008f6e <_printf_float+0x44a>
 8008d68:	68e0      	ldr	r0, [r4, #12]
 8008d6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d6c:	4298      	cmp	r0, r3
 8008d6e:	bfb8      	it	lt
 8008d70:	4618      	movlt	r0, r3
 8008d72:	e734      	b.n	8008bde <_printf_float+0xba>
 8008d74:	2301      	movs	r3, #1
 8008d76:	4652      	mov	r2, sl
 8008d78:	4631      	mov	r1, r6
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	47b8      	blx	r7
 8008d7e:	3001      	adds	r0, #1
 8008d80:	f43f af2b 	beq.w	8008bda <_printf_float+0xb6>
 8008d84:	f109 0901 	add.w	r9, r9, #1
 8008d88:	e7e8      	b.n	8008d5c <_printf_float+0x238>
 8008d8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	dc39      	bgt.n	8008e04 <_printf_float+0x2e0>
 8008d90:	4a1b      	ldr	r2, [pc, #108]	@ (8008e00 <_printf_float+0x2dc>)
 8008d92:	2301      	movs	r3, #1
 8008d94:	4631      	mov	r1, r6
 8008d96:	4628      	mov	r0, r5
 8008d98:	47b8      	blx	r7
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	f43f af1d 	beq.w	8008bda <_printf_float+0xb6>
 8008da0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008da4:	ea59 0303 	orrs.w	r3, r9, r3
 8008da8:	d102      	bne.n	8008db0 <_printf_float+0x28c>
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	07d9      	lsls	r1, r3, #31
 8008dae:	d5d7      	bpl.n	8008d60 <_printf_float+0x23c>
 8008db0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008db4:	4631      	mov	r1, r6
 8008db6:	4628      	mov	r0, r5
 8008db8:	47b8      	blx	r7
 8008dba:	3001      	adds	r0, #1
 8008dbc:	f43f af0d 	beq.w	8008bda <_printf_float+0xb6>
 8008dc0:	f04f 0a00 	mov.w	sl, #0
 8008dc4:	f104 0b1a 	add.w	fp, r4, #26
 8008dc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dca:	425b      	negs	r3, r3
 8008dcc:	4553      	cmp	r3, sl
 8008dce:	dc01      	bgt.n	8008dd4 <_printf_float+0x2b0>
 8008dd0:	464b      	mov	r3, r9
 8008dd2:	e793      	b.n	8008cfc <_printf_float+0x1d8>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	465a      	mov	r2, fp
 8008dd8:	4631      	mov	r1, r6
 8008dda:	4628      	mov	r0, r5
 8008ddc:	47b8      	blx	r7
 8008dde:	3001      	adds	r0, #1
 8008de0:	f43f aefb 	beq.w	8008bda <_printf_float+0xb6>
 8008de4:	f10a 0a01 	add.w	sl, sl, #1
 8008de8:	e7ee      	b.n	8008dc8 <_printf_float+0x2a4>
 8008dea:	bf00      	nop
 8008dec:	7fefffff 	.word	0x7fefffff
 8008df0:	0800d2ec 	.word	0x0800d2ec
 8008df4:	0800d2f0 	.word	0x0800d2f0
 8008df8:	0800d2f4 	.word	0x0800d2f4
 8008dfc:	0800d2f8 	.word	0x0800d2f8
 8008e00:	0800d2fc 	.word	0x0800d2fc
 8008e04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008e06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008e0a:	4553      	cmp	r3, sl
 8008e0c:	bfa8      	it	ge
 8008e0e:	4653      	movge	r3, sl
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	4699      	mov	r9, r3
 8008e14:	dc36      	bgt.n	8008e84 <_printf_float+0x360>
 8008e16:	f04f 0b00 	mov.w	fp, #0
 8008e1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e1e:	f104 021a 	add.w	r2, r4, #26
 8008e22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008e24:	9306      	str	r3, [sp, #24]
 8008e26:	eba3 0309 	sub.w	r3, r3, r9
 8008e2a:	455b      	cmp	r3, fp
 8008e2c:	dc31      	bgt.n	8008e92 <_printf_float+0x36e>
 8008e2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e30:	459a      	cmp	sl, r3
 8008e32:	dc3a      	bgt.n	8008eaa <_printf_float+0x386>
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	07da      	lsls	r2, r3, #31
 8008e38:	d437      	bmi.n	8008eaa <_printf_float+0x386>
 8008e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e3c:	ebaa 0903 	sub.w	r9, sl, r3
 8008e40:	9b06      	ldr	r3, [sp, #24]
 8008e42:	ebaa 0303 	sub.w	r3, sl, r3
 8008e46:	4599      	cmp	r9, r3
 8008e48:	bfa8      	it	ge
 8008e4a:	4699      	movge	r9, r3
 8008e4c:	f1b9 0f00 	cmp.w	r9, #0
 8008e50:	dc33      	bgt.n	8008eba <_printf_float+0x396>
 8008e52:	f04f 0800 	mov.w	r8, #0
 8008e56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e5a:	f104 0b1a 	add.w	fp, r4, #26
 8008e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e60:	ebaa 0303 	sub.w	r3, sl, r3
 8008e64:	eba3 0309 	sub.w	r3, r3, r9
 8008e68:	4543      	cmp	r3, r8
 8008e6a:	f77f af79 	ble.w	8008d60 <_printf_float+0x23c>
 8008e6e:	2301      	movs	r3, #1
 8008e70:	465a      	mov	r2, fp
 8008e72:	4631      	mov	r1, r6
 8008e74:	4628      	mov	r0, r5
 8008e76:	47b8      	blx	r7
 8008e78:	3001      	adds	r0, #1
 8008e7a:	f43f aeae 	beq.w	8008bda <_printf_float+0xb6>
 8008e7e:	f108 0801 	add.w	r8, r8, #1
 8008e82:	e7ec      	b.n	8008e5e <_printf_float+0x33a>
 8008e84:	4642      	mov	r2, r8
 8008e86:	4631      	mov	r1, r6
 8008e88:	4628      	mov	r0, r5
 8008e8a:	47b8      	blx	r7
 8008e8c:	3001      	adds	r0, #1
 8008e8e:	d1c2      	bne.n	8008e16 <_printf_float+0x2f2>
 8008e90:	e6a3      	b.n	8008bda <_printf_float+0xb6>
 8008e92:	2301      	movs	r3, #1
 8008e94:	4631      	mov	r1, r6
 8008e96:	4628      	mov	r0, r5
 8008e98:	9206      	str	r2, [sp, #24]
 8008e9a:	47b8      	blx	r7
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	f43f ae9c 	beq.w	8008bda <_printf_float+0xb6>
 8008ea2:	9a06      	ldr	r2, [sp, #24]
 8008ea4:	f10b 0b01 	add.w	fp, fp, #1
 8008ea8:	e7bb      	b.n	8008e22 <_printf_float+0x2fe>
 8008eaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008eae:	4631      	mov	r1, r6
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	47b8      	blx	r7
 8008eb4:	3001      	adds	r0, #1
 8008eb6:	d1c0      	bne.n	8008e3a <_printf_float+0x316>
 8008eb8:	e68f      	b.n	8008bda <_printf_float+0xb6>
 8008eba:	9a06      	ldr	r2, [sp, #24]
 8008ebc:	464b      	mov	r3, r9
 8008ebe:	4442      	add	r2, r8
 8008ec0:	4631      	mov	r1, r6
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	47b8      	blx	r7
 8008ec6:	3001      	adds	r0, #1
 8008ec8:	d1c3      	bne.n	8008e52 <_printf_float+0x32e>
 8008eca:	e686      	b.n	8008bda <_printf_float+0xb6>
 8008ecc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008ed0:	f1ba 0f01 	cmp.w	sl, #1
 8008ed4:	dc01      	bgt.n	8008eda <_printf_float+0x3b6>
 8008ed6:	07db      	lsls	r3, r3, #31
 8008ed8:	d536      	bpl.n	8008f48 <_printf_float+0x424>
 8008eda:	2301      	movs	r3, #1
 8008edc:	4642      	mov	r2, r8
 8008ede:	4631      	mov	r1, r6
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	47b8      	blx	r7
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	f43f ae78 	beq.w	8008bda <_printf_float+0xb6>
 8008eea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008eee:	4631      	mov	r1, r6
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	47b8      	blx	r7
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	f43f ae70 	beq.w	8008bda <_printf_float+0xb6>
 8008efa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008efe:	2200      	movs	r2, #0
 8008f00:	2300      	movs	r3, #0
 8008f02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f06:	f7f7 fe07 	bl	8000b18 <__aeabi_dcmpeq>
 8008f0a:	b9c0      	cbnz	r0, 8008f3e <_printf_float+0x41a>
 8008f0c:	4653      	mov	r3, sl
 8008f0e:	f108 0201 	add.w	r2, r8, #1
 8008f12:	4631      	mov	r1, r6
 8008f14:	4628      	mov	r0, r5
 8008f16:	47b8      	blx	r7
 8008f18:	3001      	adds	r0, #1
 8008f1a:	d10c      	bne.n	8008f36 <_printf_float+0x412>
 8008f1c:	e65d      	b.n	8008bda <_printf_float+0xb6>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	465a      	mov	r2, fp
 8008f22:	4631      	mov	r1, r6
 8008f24:	4628      	mov	r0, r5
 8008f26:	47b8      	blx	r7
 8008f28:	3001      	adds	r0, #1
 8008f2a:	f43f ae56 	beq.w	8008bda <_printf_float+0xb6>
 8008f2e:	f108 0801 	add.w	r8, r8, #1
 8008f32:	45d0      	cmp	r8, sl
 8008f34:	dbf3      	blt.n	8008f1e <_printf_float+0x3fa>
 8008f36:	464b      	mov	r3, r9
 8008f38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008f3c:	e6df      	b.n	8008cfe <_printf_float+0x1da>
 8008f3e:	f04f 0800 	mov.w	r8, #0
 8008f42:	f104 0b1a 	add.w	fp, r4, #26
 8008f46:	e7f4      	b.n	8008f32 <_printf_float+0x40e>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	4642      	mov	r2, r8
 8008f4c:	e7e1      	b.n	8008f12 <_printf_float+0x3ee>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	464a      	mov	r2, r9
 8008f52:	4631      	mov	r1, r6
 8008f54:	4628      	mov	r0, r5
 8008f56:	47b8      	blx	r7
 8008f58:	3001      	adds	r0, #1
 8008f5a:	f43f ae3e 	beq.w	8008bda <_printf_float+0xb6>
 8008f5e:	f108 0801 	add.w	r8, r8, #1
 8008f62:	68e3      	ldr	r3, [r4, #12]
 8008f64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f66:	1a5b      	subs	r3, r3, r1
 8008f68:	4543      	cmp	r3, r8
 8008f6a:	dcf0      	bgt.n	8008f4e <_printf_float+0x42a>
 8008f6c:	e6fc      	b.n	8008d68 <_printf_float+0x244>
 8008f6e:	f04f 0800 	mov.w	r8, #0
 8008f72:	f104 0919 	add.w	r9, r4, #25
 8008f76:	e7f4      	b.n	8008f62 <_printf_float+0x43e>

08008f78 <_printf_common>:
 8008f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f7c:	4616      	mov	r6, r2
 8008f7e:	4698      	mov	r8, r3
 8008f80:	688a      	ldr	r2, [r1, #8]
 8008f82:	690b      	ldr	r3, [r1, #16]
 8008f84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	bfb8      	it	lt
 8008f8c:	4613      	movlt	r3, r2
 8008f8e:	6033      	str	r3, [r6, #0]
 8008f90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f94:	4607      	mov	r7, r0
 8008f96:	460c      	mov	r4, r1
 8008f98:	b10a      	cbz	r2, 8008f9e <_printf_common+0x26>
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	6033      	str	r3, [r6, #0]
 8008f9e:	6823      	ldr	r3, [r4, #0]
 8008fa0:	0699      	lsls	r1, r3, #26
 8008fa2:	bf42      	ittt	mi
 8008fa4:	6833      	ldrmi	r3, [r6, #0]
 8008fa6:	3302      	addmi	r3, #2
 8008fa8:	6033      	strmi	r3, [r6, #0]
 8008faa:	6825      	ldr	r5, [r4, #0]
 8008fac:	f015 0506 	ands.w	r5, r5, #6
 8008fb0:	d106      	bne.n	8008fc0 <_printf_common+0x48>
 8008fb2:	f104 0a19 	add.w	sl, r4, #25
 8008fb6:	68e3      	ldr	r3, [r4, #12]
 8008fb8:	6832      	ldr	r2, [r6, #0]
 8008fba:	1a9b      	subs	r3, r3, r2
 8008fbc:	42ab      	cmp	r3, r5
 8008fbe:	dc26      	bgt.n	800900e <_printf_common+0x96>
 8008fc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008fc4:	6822      	ldr	r2, [r4, #0]
 8008fc6:	3b00      	subs	r3, #0
 8008fc8:	bf18      	it	ne
 8008fca:	2301      	movne	r3, #1
 8008fcc:	0692      	lsls	r2, r2, #26
 8008fce:	d42b      	bmi.n	8009028 <_printf_common+0xb0>
 8008fd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008fd4:	4641      	mov	r1, r8
 8008fd6:	4638      	mov	r0, r7
 8008fd8:	47c8      	blx	r9
 8008fda:	3001      	adds	r0, #1
 8008fdc:	d01e      	beq.n	800901c <_printf_common+0xa4>
 8008fde:	6823      	ldr	r3, [r4, #0]
 8008fe0:	6922      	ldr	r2, [r4, #16]
 8008fe2:	f003 0306 	and.w	r3, r3, #6
 8008fe6:	2b04      	cmp	r3, #4
 8008fe8:	bf02      	ittt	eq
 8008fea:	68e5      	ldreq	r5, [r4, #12]
 8008fec:	6833      	ldreq	r3, [r6, #0]
 8008fee:	1aed      	subeq	r5, r5, r3
 8008ff0:	68a3      	ldr	r3, [r4, #8]
 8008ff2:	bf0c      	ite	eq
 8008ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ff8:	2500      	movne	r5, #0
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	bfc4      	itt	gt
 8008ffe:	1a9b      	subgt	r3, r3, r2
 8009000:	18ed      	addgt	r5, r5, r3
 8009002:	2600      	movs	r6, #0
 8009004:	341a      	adds	r4, #26
 8009006:	42b5      	cmp	r5, r6
 8009008:	d11a      	bne.n	8009040 <_printf_common+0xc8>
 800900a:	2000      	movs	r0, #0
 800900c:	e008      	b.n	8009020 <_printf_common+0xa8>
 800900e:	2301      	movs	r3, #1
 8009010:	4652      	mov	r2, sl
 8009012:	4641      	mov	r1, r8
 8009014:	4638      	mov	r0, r7
 8009016:	47c8      	blx	r9
 8009018:	3001      	adds	r0, #1
 800901a:	d103      	bne.n	8009024 <_printf_common+0xac>
 800901c:	f04f 30ff 	mov.w	r0, #4294967295
 8009020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009024:	3501      	adds	r5, #1
 8009026:	e7c6      	b.n	8008fb6 <_printf_common+0x3e>
 8009028:	18e1      	adds	r1, r4, r3
 800902a:	1c5a      	adds	r2, r3, #1
 800902c:	2030      	movs	r0, #48	@ 0x30
 800902e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009032:	4422      	add	r2, r4
 8009034:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009038:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800903c:	3302      	adds	r3, #2
 800903e:	e7c7      	b.n	8008fd0 <_printf_common+0x58>
 8009040:	2301      	movs	r3, #1
 8009042:	4622      	mov	r2, r4
 8009044:	4641      	mov	r1, r8
 8009046:	4638      	mov	r0, r7
 8009048:	47c8      	blx	r9
 800904a:	3001      	adds	r0, #1
 800904c:	d0e6      	beq.n	800901c <_printf_common+0xa4>
 800904e:	3601      	adds	r6, #1
 8009050:	e7d9      	b.n	8009006 <_printf_common+0x8e>
	...

08009054 <_printf_i>:
 8009054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009058:	7e0f      	ldrb	r7, [r1, #24]
 800905a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800905c:	2f78      	cmp	r7, #120	@ 0x78
 800905e:	4691      	mov	r9, r2
 8009060:	4680      	mov	r8, r0
 8009062:	460c      	mov	r4, r1
 8009064:	469a      	mov	sl, r3
 8009066:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800906a:	d807      	bhi.n	800907c <_printf_i+0x28>
 800906c:	2f62      	cmp	r7, #98	@ 0x62
 800906e:	d80a      	bhi.n	8009086 <_printf_i+0x32>
 8009070:	2f00      	cmp	r7, #0
 8009072:	f000 80d2 	beq.w	800921a <_printf_i+0x1c6>
 8009076:	2f58      	cmp	r7, #88	@ 0x58
 8009078:	f000 80b9 	beq.w	80091ee <_printf_i+0x19a>
 800907c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009080:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009084:	e03a      	b.n	80090fc <_printf_i+0xa8>
 8009086:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800908a:	2b15      	cmp	r3, #21
 800908c:	d8f6      	bhi.n	800907c <_printf_i+0x28>
 800908e:	a101      	add	r1, pc, #4	@ (adr r1, 8009094 <_printf_i+0x40>)
 8009090:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009094:	080090ed 	.word	0x080090ed
 8009098:	08009101 	.word	0x08009101
 800909c:	0800907d 	.word	0x0800907d
 80090a0:	0800907d 	.word	0x0800907d
 80090a4:	0800907d 	.word	0x0800907d
 80090a8:	0800907d 	.word	0x0800907d
 80090ac:	08009101 	.word	0x08009101
 80090b0:	0800907d 	.word	0x0800907d
 80090b4:	0800907d 	.word	0x0800907d
 80090b8:	0800907d 	.word	0x0800907d
 80090bc:	0800907d 	.word	0x0800907d
 80090c0:	08009201 	.word	0x08009201
 80090c4:	0800912b 	.word	0x0800912b
 80090c8:	080091bb 	.word	0x080091bb
 80090cc:	0800907d 	.word	0x0800907d
 80090d0:	0800907d 	.word	0x0800907d
 80090d4:	08009223 	.word	0x08009223
 80090d8:	0800907d 	.word	0x0800907d
 80090dc:	0800912b 	.word	0x0800912b
 80090e0:	0800907d 	.word	0x0800907d
 80090e4:	0800907d 	.word	0x0800907d
 80090e8:	080091c3 	.word	0x080091c3
 80090ec:	6833      	ldr	r3, [r6, #0]
 80090ee:	1d1a      	adds	r2, r3, #4
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	6032      	str	r2, [r6, #0]
 80090f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80090fc:	2301      	movs	r3, #1
 80090fe:	e09d      	b.n	800923c <_printf_i+0x1e8>
 8009100:	6833      	ldr	r3, [r6, #0]
 8009102:	6820      	ldr	r0, [r4, #0]
 8009104:	1d19      	adds	r1, r3, #4
 8009106:	6031      	str	r1, [r6, #0]
 8009108:	0606      	lsls	r6, r0, #24
 800910a:	d501      	bpl.n	8009110 <_printf_i+0xbc>
 800910c:	681d      	ldr	r5, [r3, #0]
 800910e:	e003      	b.n	8009118 <_printf_i+0xc4>
 8009110:	0645      	lsls	r5, r0, #25
 8009112:	d5fb      	bpl.n	800910c <_printf_i+0xb8>
 8009114:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009118:	2d00      	cmp	r5, #0
 800911a:	da03      	bge.n	8009124 <_printf_i+0xd0>
 800911c:	232d      	movs	r3, #45	@ 0x2d
 800911e:	426d      	negs	r5, r5
 8009120:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009124:	4859      	ldr	r0, [pc, #356]	@ (800928c <_printf_i+0x238>)
 8009126:	230a      	movs	r3, #10
 8009128:	e011      	b.n	800914e <_printf_i+0xfa>
 800912a:	6821      	ldr	r1, [r4, #0]
 800912c:	6833      	ldr	r3, [r6, #0]
 800912e:	0608      	lsls	r0, r1, #24
 8009130:	f853 5b04 	ldr.w	r5, [r3], #4
 8009134:	d402      	bmi.n	800913c <_printf_i+0xe8>
 8009136:	0649      	lsls	r1, r1, #25
 8009138:	bf48      	it	mi
 800913a:	b2ad      	uxthmi	r5, r5
 800913c:	2f6f      	cmp	r7, #111	@ 0x6f
 800913e:	4853      	ldr	r0, [pc, #332]	@ (800928c <_printf_i+0x238>)
 8009140:	6033      	str	r3, [r6, #0]
 8009142:	bf14      	ite	ne
 8009144:	230a      	movne	r3, #10
 8009146:	2308      	moveq	r3, #8
 8009148:	2100      	movs	r1, #0
 800914a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800914e:	6866      	ldr	r6, [r4, #4]
 8009150:	60a6      	str	r6, [r4, #8]
 8009152:	2e00      	cmp	r6, #0
 8009154:	bfa2      	ittt	ge
 8009156:	6821      	ldrge	r1, [r4, #0]
 8009158:	f021 0104 	bicge.w	r1, r1, #4
 800915c:	6021      	strge	r1, [r4, #0]
 800915e:	b90d      	cbnz	r5, 8009164 <_printf_i+0x110>
 8009160:	2e00      	cmp	r6, #0
 8009162:	d04b      	beq.n	80091fc <_printf_i+0x1a8>
 8009164:	4616      	mov	r6, r2
 8009166:	fbb5 f1f3 	udiv	r1, r5, r3
 800916a:	fb03 5711 	mls	r7, r3, r1, r5
 800916e:	5dc7      	ldrb	r7, [r0, r7]
 8009170:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009174:	462f      	mov	r7, r5
 8009176:	42bb      	cmp	r3, r7
 8009178:	460d      	mov	r5, r1
 800917a:	d9f4      	bls.n	8009166 <_printf_i+0x112>
 800917c:	2b08      	cmp	r3, #8
 800917e:	d10b      	bne.n	8009198 <_printf_i+0x144>
 8009180:	6823      	ldr	r3, [r4, #0]
 8009182:	07df      	lsls	r7, r3, #31
 8009184:	d508      	bpl.n	8009198 <_printf_i+0x144>
 8009186:	6923      	ldr	r3, [r4, #16]
 8009188:	6861      	ldr	r1, [r4, #4]
 800918a:	4299      	cmp	r1, r3
 800918c:	bfde      	ittt	le
 800918e:	2330      	movle	r3, #48	@ 0x30
 8009190:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009194:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009198:	1b92      	subs	r2, r2, r6
 800919a:	6122      	str	r2, [r4, #16]
 800919c:	f8cd a000 	str.w	sl, [sp]
 80091a0:	464b      	mov	r3, r9
 80091a2:	aa03      	add	r2, sp, #12
 80091a4:	4621      	mov	r1, r4
 80091a6:	4640      	mov	r0, r8
 80091a8:	f7ff fee6 	bl	8008f78 <_printf_common>
 80091ac:	3001      	adds	r0, #1
 80091ae:	d14a      	bne.n	8009246 <_printf_i+0x1f2>
 80091b0:	f04f 30ff 	mov.w	r0, #4294967295
 80091b4:	b004      	add	sp, #16
 80091b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	f043 0320 	orr.w	r3, r3, #32
 80091c0:	6023      	str	r3, [r4, #0]
 80091c2:	4833      	ldr	r0, [pc, #204]	@ (8009290 <_printf_i+0x23c>)
 80091c4:	2778      	movs	r7, #120	@ 0x78
 80091c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80091ca:	6823      	ldr	r3, [r4, #0]
 80091cc:	6831      	ldr	r1, [r6, #0]
 80091ce:	061f      	lsls	r7, r3, #24
 80091d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80091d4:	d402      	bmi.n	80091dc <_printf_i+0x188>
 80091d6:	065f      	lsls	r7, r3, #25
 80091d8:	bf48      	it	mi
 80091da:	b2ad      	uxthmi	r5, r5
 80091dc:	6031      	str	r1, [r6, #0]
 80091de:	07d9      	lsls	r1, r3, #31
 80091e0:	bf44      	itt	mi
 80091e2:	f043 0320 	orrmi.w	r3, r3, #32
 80091e6:	6023      	strmi	r3, [r4, #0]
 80091e8:	b11d      	cbz	r5, 80091f2 <_printf_i+0x19e>
 80091ea:	2310      	movs	r3, #16
 80091ec:	e7ac      	b.n	8009148 <_printf_i+0xf4>
 80091ee:	4827      	ldr	r0, [pc, #156]	@ (800928c <_printf_i+0x238>)
 80091f0:	e7e9      	b.n	80091c6 <_printf_i+0x172>
 80091f2:	6823      	ldr	r3, [r4, #0]
 80091f4:	f023 0320 	bic.w	r3, r3, #32
 80091f8:	6023      	str	r3, [r4, #0]
 80091fa:	e7f6      	b.n	80091ea <_printf_i+0x196>
 80091fc:	4616      	mov	r6, r2
 80091fe:	e7bd      	b.n	800917c <_printf_i+0x128>
 8009200:	6833      	ldr	r3, [r6, #0]
 8009202:	6825      	ldr	r5, [r4, #0]
 8009204:	6961      	ldr	r1, [r4, #20]
 8009206:	1d18      	adds	r0, r3, #4
 8009208:	6030      	str	r0, [r6, #0]
 800920a:	062e      	lsls	r6, r5, #24
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	d501      	bpl.n	8009214 <_printf_i+0x1c0>
 8009210:	6019      	str	r1, [r3, #0]
 8009212:	e002      	b.n	800921a <_printf_i+0x1c6>
 8009214:	0668      	lsls	r0, r5, #25
 8009216:	d5fb      	bpl.n	8009210 <_printf_i+0x1bc>
 8009218:	8019      	strh	r1, [r3, #0]
 800921a:	2300      	movs	r3, #0
 800921c:	6123      	str	r3, [r4, #16]
 800921e:	4616      	mov	r6, r2
 8009220:	e7bc      	b.n	800919c <_printf_i+0x148>
 8009222:	6833      	ldr	r3, [r6, #0]
 8009224:	1d1a      	adds	r2, r3, #4
 8009226:	6032      	str	r2, [r6, #0]
 8009228:	681e      	ldr	r6, [r3, #0]
 800922a:	6862      	ldr	r2, [r4, #4]
 800922c:	2100      	movs	r1, #0
 800922e:	4630      	mov	r0, r6
 8009230:	f7f6 fff6 	bl	8000220 <memchr>
 8009234:	b108      	cbz	r0, 800923a <_printf_i+0x1e6>
 8009236:	1b80      	subs	r0, r0, r6
 8009238:	6060      	str	r0, [r4, #4]
 800923a:	6863      	ldr	r3, [r4, #4]
 800923c:	6123      	str	r3, [r4, #16]
 800923e:	2300      	movs	r3, #0
 8009240:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009244:	e7aa      	b.n	800919c <_printf_i+0x148>
 8009246:	6923      	ldr	r3, [r4, #16]
 8009248:	4632      	mov	r2, r6
 800924a:	4649      	mov	r1, r9
 800924c:	4640      	mov	r0, r8
 800924e:	47d0      	blx	sl
 8009250:	3001      	adds	r0, #1
 8009252:	d0ad      	beq.n	80091b0 <_printf_i+0x15c>
 8009254:	6823      	ldr	r3, [r4, #0]
 8009256:	079b      	lsls	r3, r3, #30
 8009258:	d413      	bmi.n	8009282 <_printf_i+0x22e>
 800925a:	68e0      	ldr	r0, [r4, #12]
 800925c:	9b03      	ldr	r3, [sp, #12]
 800925e:	4298      	cmp	r0, r3
 8009260:	bfb8      	it	lt
 8009262:	4618      	movlt	r0, r3
 8009264:	e7a6      	b.n	80091b4 <_printf_i+0x160>
 8009266:	2301      	movs	r3, #1
 8009268:	4632      	mov	r2, r6
 800926a:	4649      	mov	r1, r9
 800926c:	4640      	mov	r0, r8
 800926e:	47d0      	blx	sl
 8009270:	3001      	adds	r0, #1
 8009272:	d09d      	beq.n	80091b0 <_printf_i+0x15c>
 8009274:	3501      	adds	r5, #1
 8009276:	68e3      	ldr	r3, [r4, #12]
 8009278:	9903      	ldr	r1, [sp, #12]
 800927a:	1a5b      	subs	r3, r3, r1
 800927c:	42ab      	cmp	r3, r5
 800927e:	dcf2      	bgt.n	8009266 <_printf_i+0x212>
 8009280:	e7eb      	b.n	800925a <_printf_i+0x206>
 8009282:	2500      	movs	r5, #0
 8009284:	f104 0619 	add.w	r6, r4, #25
 8009288:	e7f5      	b.n	8009276 <_printf_i+0x222>
 800928a:	bf00      	nop
 800928c:	0800d2fe 	.word	0x0800d2fe
 8009290:	0800d30f 	.word	0x0800d30f

08009294 <_scanf_float>:
 8009294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009298:	b087      	sub	sp, #28
 800929a:	4617      	mov	r7, r2
 800929c:	9303      	str	r3, [sp, #12]
 800929e:	688b      	ldr	r3, [r1, #8]
 80092a0:	1e5a      	subs	r2, r3, #1
 80092a2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80092a6:	bf81      	itttt	hi
 80092a8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80092ac:	eb03 0b05 	addhi.w	fp, r3, r5
 80092b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80092b4:	608b      	strhi	r3, [r1, #8]
 80092b6:	680b      	ldr	r3, [r1, #0]
 80092b8:	460a      	mov	r2, r1
 80092ba:	f04f 0500 	mov.w	r5, #0
 80092be:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80092c2:	f842 3b1c 	str.w	r3, [r2], #28
 80092c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80092ca:	4680      	mov	r8, r0
 80092cc:	460c      	mov	r4, r1
 80092ce:	bf98      	it	ls
 80092d0:	f04f 0b00 	movls.w	fp, #0
 80092d4:	9201      	str	r2, [sp, #4]
 80092d6:	4616      	mov	r6, r2
 80092d8:	46aa      	mov	sl, r5
 80092da:	46a9      	mov	r9, r5
 80092dc:	9502      	str	r5, [sp, #8]
 80092de:	68a2      	ldr	r2, [r4, #8]
 80092e0:	b152      	cbz	r2, 80092f8 <_scanf_float+0x64>
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	2b4e      	cmp	r3, #78	@ 0x4e
 80092e8:	d864      	bhi.n	80093b4 <_scanf_float+0x120>
 80092ea:	2b40      	cmp	r3, #64	@ 0x40
 80092ec:	d83c      	bhi.n	8009368 <_scanf_float+0xd4>
 80092ee:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80092f2:	b2c8      	uxtb	r0, r1
 80092f4:	280e      	cmp	r0, #14
 80092f6:	d93a      	bls.n	800936e <_scanf_float+0xda>
 80092f8:	f1b9 0f00 	cmp.w	r9, #0
 80092fc:	d003      	beq.n	8009306 <_scanf_float+0x72>
 80092fe:	6823      	ldr	r3, [r4, #0]
 8009300:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	f10a 3aff 	add.w	sl, sl, #4294967295
 800930a:	f1ba 0f01 	cmp.w	sl, #1
 800930e:	f200 8117 	bhi.w	8009540 <_scanf_float+0x2ac>
 8009312:	9b01      	ldr	r3, [sp, #4]
 8009314:	429e      	cmp	r6, r3
 8009316:	f200 8108 	bhi.w	800952a <_scanf_float+0x296>
 800931a:	2001      	movs	r0, #1
 800931c:	b007      	add	sp, #28
 800931e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009322:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009326:	2a0d      	cmp	r2, #13
 8009328:	d8e6      	bhi.n	80092f8 <_scanf_float+0x64>
 800932a:	a101      	add	r1, pc, #4	@ (adr r1, 8009330 <_scanf_float+0x9c>)
 800932c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009330:	08009477 	.word	0x08009477
 8009334:	080092f9 	.word	0x080092f9
 8009338:	080092f9 	.word	0x080092f9
 800933c:	080092f9 	.word	0x080092f9
 8009340:	080094d7 	.word	0x080094d7
 8009344:	080094af 	.word	0x080094af
 8009348:	080092f9 	.word	0x080092f9
 800934c:	080092f9 	.word	0x080092f9
 8009350:	08009485 	.word	0x08009485
 8009354:	080092f9 	.word	0x080092f9
 8009358:	080092f9 	.word	0x080092f9
 800935c:	080092f9 	.word	0x080092f9
 8009360:	080092f9 	.word	0x080092f9
 8009364:	0800943d 	.word	0x0800943d
 8009368:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800936c:	e7db      	b.n	8009326 <_scanf_float+0x92>
 800936e:	290e      	cmp	r1, #14
 8009370:	d8c2      	bhi.n	80092f8 <_scanf_float+0x64>
 8009372:	a001      	add	r0, pc, #4	@ (adr r0, 8009378 <_scanf_float+0xe4>)
 8009374:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009378:	0800942d 	.word	0x0800942d
 800937c:	080092f9 	.word	0x080092f9
 8009380:	0800942d 	.word	0x0800942d
 8009384:	080094c3 	.word	0x080094c3
 8009388:	080092f9 	.word	0x080092f9
 800938c:	080093d5 	.word	0x080093d5
 8009390:	08009413 	.word	0x08009413
 8009394:	08009413 	.word	0x08009413
 8009398:	08009413 	.word	0x08009413
 800939c:	08009413 	.word	0x08009413
 80093a0:	08009413 	.word	0x08009413
 80093a4:	08009413 	.word	0x08009413
 80093a8:	08009413 	.word	0x08009413
 80093ac:	08009413 	.word	0x08009413
 80093b0:	08009413 	.word	0x08009413
 80093b4:	2b6e      	cmp	r3, #110	@ 0x6e
 80093b6:	d809      	bhi.n	80093cc <_scanf_float+0x138>
 80093b8:	2b60      	cmp	r3, #96	@ 0x60
 80093ba:	d8b2      	bhi.n	8009322 <_scanf_float+0x8e>
 80093bc:	2b54      	cmp	r3, #84	@ 0x54
 80093be:	d07b      	beq.n	80094b8 <_scanf_float+0x224>
 80093c0:	2b59      	cmp	r3, #89	@ 0x59
 80093c2:	d199      	bne.n	80092f8 <_scanf_float+0x64>
 80093c4:	2d07      	cmp	r5, #7
 80093c6:	d197      	bne.n	80092f8 <_scanf_float+0x64>
 80093c8:	2508      	movs	r5, #8
 80093ca:	e02c      	b.n	8009426 <_scanf_float+0x192>
 80093cc:	2b74      	cmp	r3, #116	@ 0x74
 80093ce:	d073      	beq.n	80094b8 <_scanf_float+0x224>
 80093d0:	2b79      	cmp	r3, #121	@ 0x79
 80093d2:	e7f6      	b.n	80093c2 <_scanf_float+0x12e>
 80093d4:	6821      	ldr	r1, [r4, #0]
 80093d6:	05c8      	lsls	r0, r1, #23
 80093d8:	d51b      	bpl.n	8009412 <_scanf_float+0x17e>
 80093da:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80093de:	6021      	str	r1, [r4, #0]
 80093e0:	f109 0901 	add.w	r9, r9, #1
 80093e4:	f1bb 0f00 	cmp.w	fp, #0
 80093e8:	d003      	beq.n	80093f2 <_scanf_float+0x15e>
 80093ea:	3201      	adds	r2, #1
 80093ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80093f0:	60a2      	str	r2, [r4, #8]
 80093f2:	68a3      	ldr	r3, [r4, #8]
 80093f4:	3b01      	subs	r3, #1
 80093f6:	60a3      	str	r3, [r4, #8]
 80093f8:	6923      	ldr	r3, [r4, #16]
 80093fa:	3301      	adds	r3, #1
 80093fc:	6123      	str	r3, [r4, #16]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	3b01      	subs	r3, #1
 8009402:	2b00      	cmp	r3, #0
 8009404:	607b      	str	r3, [r7, #4]
 8009406:	f340 8087 	ble.w	8009518 <_scanf_float+0x284>
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	3301      	adds	r3, #1
 800940e:	603b      	str	r3, [r7, #0]
 8009410:	e765      	b.n	80092de <_scanf_float+0x4a>
 8009412:	eb1a 0105 	adds.w	r1, sl, r5
 8009416:	f47f af6f 	bne.w	80092f8 <_scanf_float+0x64>
 800941a:	6822      	ldr	r2, [r4, #0]
 800941c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009420:	6022      	str	r2, [r4, #0]
 8009422:	460d      	mov	r5, r1
 8009424:	468a      	mov	sl, r1
 8009426:	f806 3b01 	strb.w	r3, [r6], #1
 800942a:	e7e2      	b.n	80093f2 <_scanf_float+0x15e>
 800942c:	6822      	ldr	r2, [r4, #0]
 800942e:	0610      	lsls	r0, r2, #24
 8009430:	f57f af62 	bpl.w	80092f8 <_scanf_float+0x64>
 8009434:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009438:	6022      	str	r2, [r4, #0]
 800943a:	e7f4      	b.n	8009426 <_scanf_float+0x192>
 800943c:	f1ba 0f00 	cmp.w	sl, #0
 8009440:	d10e      	bne.n	8009460 <_scanf_float+0x1cc>
 8009442:	f1b9 0f00 	cmp.w	r9, #0
 8009446:	d10e      	bne.n	8009466 <_scanf_float+0x1d2>
 8009448:	6822      	ldr	r2, [r4, #0]
 800944a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800944e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009452:	d108      	bne.n	8009466 <_scanf_float+0x1d2>
 8009454:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009458:	6022      	str	r2, [r4, #0]
 800945a:	f04f 0a01 	mov.w	sl, #1
 800945e:	e7e2      	b.n	8009426 <_scanf_float+0x192>
 8009460:	f1ba 0f02 	cmp.w	sl, #2
 8009464:	d055      	beq.n	8009512 <_scanf_float+0x27e>
 8009466:	2d01      	cmp	r5, #1
 8009468:	d002      	beq.n	8009470 <_scanf_float+0x1dc>
 800946a:	2d04      	cmp	r5, #4
 800946c:	f47f af44 	bne.w	80092f8 <_scanf_float+0x64>
 8009470:	3501      	adds	r5, #1
 8009472:	b2ed      	uxtb	r5, r5
 8009474:	e7d7      	b.n	8009426 <_scanf_float+0x192>
 8009476:	f1ba 0f01 	cmp.w	sl, #1
 800947a:	f47f af3d 	bne.w	80092f8 <_scanf_float+0x64>
 800947e:	f04f 0a02 	mov.w	sl, #2
 8009482:	e7d0      	b.n	8009426 <_scanf_float+0x192>
 8009484:	b97d      	cbnz	r5, 80094a6 <_scanf_float+0x212>
 8009486:	f1b9 0f00 	cmp.w	r9, #0
 800948a:	f47f af38 	bne.w	80092fe <_scanf_float+0x6a>
 800948e:	6822      	ldr	r2, [r4, #0]
 8009490:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009494:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009498:	f040 8108 	bne.w	80096ac <_scanf_float+0x418>
 800949c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80094a0:	6022      	str	r2, [r4, #0]
 80094a2:	2501      	movs	r5, #1
 80094a4:	e7bf      	b.n	8009426 <_scanf_float+0x192>
 80094a6:	2d03      	cmp	r5, #3
 80094a8:	d0e2      	beq.n	8009470 <_scanf_float+0x1dc>
 80094aa:	2d05      	cmp	r5, #5
 80094ac:	e7de      	b.n	800946c <_scanf_float+0x1d8>
 80094ae:	2d02      	cmp	r5, #2
 80094b0:	f47f af22 	bne.w	80092f8 <_scanf_float+0x64>
 80094b4:	2503      	movs	r5, #3
 80094b6:	e7b6      	b.n	8009426 <_scanf_float+0x192>
 80094b8:	2d06      	cmp	r5, #6
 80094ba:	f47f af1d 	bne.w	80092f8 <_scanf_float+0x64>
 80094be:	2507      	movs	r5, #7
 80094c0:	e7b1      	b.n	8009426 <_scanf_float+0x192>
 80094c2:	6822      	ldr	r2, [r4, #0]
 80094c4:	0591      	lsls	r1, r2, #22
 80094c6:	f57f af17 	bpl.w	80092f8 <_scanf_float+0x64>
 80094ca:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80094ce:	6022      	str	r2, [r4, #0]
 80094d0:	f8cd 9008 	str.w	r9, [sp, #8]
 80094d4:	e7a7      	b.n	8009426 <_scanf_float+0x192>
 80094d6:	6822      	ldr	r2, [r4, #0]
 80094d8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80094dc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80094e0:	d006      	beq.n	80094f0 <_scanf_float+0x25c>
 80094e2:	0550      	lsls	r0, r2, #21
 80094e4:	f57f af08 	bpl.w	80092f8 <_scanf_float+0x64>
 80094e8:	f1b9 0f00 	cmp.w	r9, #0
 80094ec:	f000 80de 	beq.w	80096ac <_scanf_float+0x418>
 80094f0:	0591      	lsls	r1, r2, #22
 80094f2:	bf58      	it	pl
 80094f4:	9902      	ldrpl	r1, [sp, #8]
 80094f6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80094fa:	bf58      	it	pl
 80094fc:	eba9 0101 	subpl.w	r1, r9, r1
 8009500:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009504:	bf58      	it	pl
 8009506:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800950a:	6022      	str	r2, [r4, #0]
 800950c:	f04f 0900 	mov.w	r9, #0
 8009510:	e789      	b.n	8009426 <_scanf_float+0x192>
 8009512:	f04f 0a03 	mov.w	sl, #3
 8009516:	e786      	b.n	8009426 <_scanf_float+0x192>
 8009518:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800951c:	4639      	mov	r1, r7
 800951e:	4640      	mov	r0, r8
 8009520:	4798      	blx	r3
 8009522:	2800      	cmp	r0, #0
 8009524:	f43f aedb 	beq.w	80092de <_scanf_float+0x4a>
 8009528:	e6e6      	b.n	80092f8 <_scanf_float+0x64>
 800952a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800952e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009532:	463a      	mov	r2, r7
 8009534:	4640      	mov	r0, r8
 8009536:	4798      	blx	r3
 8009538:	6923      	ldr	r3, [r4, #16]
 800953a:	3b01      	subs	r3, #1
 800953c:	6123      	str	r3, [r4, #16]
 800953e:	e6e8      	b.n	8009312 <_scanf_float+0x7e>
 8009540:	1e6b      	subs	r3, r5, #1
 8009542:	2b06      	cmp	r3, #6
 8009544:	d824      	bhi.n	8009590 <_scanf_float+0x2fc>
 8009546:	2d02      	cmp	r5, #2
 8009548:	d836      	bhi.n	80095b8 <_scanf_float+0x324>
 800954a:	9b01      	ldr	r3, [sp, #4]
 800954c:	429e      	cmp	r6, r3
 800954e:	f67f aee4 	bls.w	800931a <_scanf_float+0x86>
 8009552:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009556:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800955a:	463a      	mov	r2, r7
 800955c:	4640      	mov	r0, r8
 800955e:	4798      	blx	r3
 8009560:	6923      	ldr	r3, [r4, #16]
 8009562:	3b01      	subs	r3, #1
 8009564:	6123      	str	r3, [r4, #16]
 8009566:	e7f0      	b.n	800954a <_scanf_float+0x2b6>
 8009568:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800956c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009570:	463a      	mov	r2, r7
 8009572:	4640      	mov	r0, r8
 8009574:	4798      	blx	r3
 8009576:	6923      	ldr	r3, [r4, #16]
 8009578:	3b01      	subs	r3, #1
 800957a:	6123      	str	r3, [r4, #16]
 800957c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009580:	fa5f fa8a 	uxtb.w	sl, sl
 8009584:	f1ba 0f02 	cmp.w	sl, #2
 8009588:	d1ee      	bne.n	8009568 <_scanf_float+0x2d4>
 800958a:	3d03      	subs	r5, #3
 800958c:	b2ed      	uxtb	r5, r5
 800958e:	1b76      	subs	r6, r6, r5
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	05da      	lsls	r2, r3, #23
 8009594:	d530      	bpl.n	80095f8 <_scanf_float+0x364>
 8009596:	055b      	lsls	r3, r3, #21
 8009598:	d511      	bpl.n	80095be <_scanf_float+0x32a>
 800959a:	9b01      	ldr	r3, [sp, #4]
 800959c:	429e      	cmp	r6, r3
 800959e:	f67f aebc 	bls.w	800931a <_scanf_float+0x86>
 80095a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80095a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80095aa:	463a      	mov	r2, r7
 80095ac:	4640      	mov	r0, r8
 80095ae:	4798      	blx	r3
 80095b0:	6923      	ldr	r3, [r4, #16]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	6123      	str	r3, [r4, #16]
 80095b6:	e7f0      	b.n	800959a <_scanf_float+0x306>
 80095b8:	46aa      	mov	sl, r5
 80095ba:	46b3      	mov	fp, r6
 80095bc:	e7de      	b.n	800957c <_scanf_float+0x2e8>
 80095be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80095c2:	6923      	ldr	r3, [r4, #16]
 80095c4:	2965      	cmp	r1, #101	@ 0x65
 80095c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80095ca:	f106 35ff 	add.w	r5, r6, #4294967295
 80095ce:	6123      	str	r3, [r4, #16]
 80095d0:	d00c      	beq.n	80095ec <_scanf_float+0x358>
 80095d2:	2945      	cmp	r1, #69	@ 0x45
 80095d4:	d00a      	beq.n	80095ec <_scanf_float+0x358>
 80095d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80095da:	463a      	mov	r2, r7
 80095dc:	4640      	mov	r0, r8
 80095de:	4798      	blx	r3
 80095e0:	6923      	ldr	r3, [r4, #16]
 80095e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80095e6:	3b01      	subs	r3, #1
 80095e8:	1eb5      	subs	r5, r6, #2
 80095ea:	6123      	str	r3, [r4, #16]
 80095ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80095f0:	463a      	mov	r2, r7
 80095f2:	4640      	mov	r0, r8
 80095f4:	4798      	blx	r3
 80095f6:	462e      	mov	r6, r5
 80095f8:	6822      	ldr	r2, [r4, #0]
 80095fa:	f012 0210 	ands.w	r2, r2, #16
 80095fe:	d001      	beq.n	8009604 <_scanf_float+0x370>
 8009600:	2000      	movs	r0, #0
 8009602:	e68b      	b.n	800931c <_scanf_float+0x88>
 8009604:	7032      	strb	r2, [r6, #0]
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800960c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009610:	d11c      	bne.n	800964c <_scanf_float+0x3b8>
 8009612:	9b02      	ldr	r3, [sp, #8]
 8009614:	454b      	cmp	r3, r9
 8009616:	eba3 0209 	sub.w	r2, r3, r9
 800961a:	d123      	bne.n	8009664 <_scanf_float+0x3d0>
 800961c:	9901      	ldr	r1, [sp, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	4640      	mov	r0, r8
 8009622:	f002 fcf9 	bl	800c018 <_strtod_r>
 8009626:	9b03      	ldr	r3, [sp, #12]
 8009628:	6821      	ldr	r1, [r4, #0]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f011 0f02 	tst.w	r1, #2
 8009630:	ec57 6b10 	vmov	r6, r7, d0
 8009634:	f103 0204 	add.w	r2, r3, #4
 8009638:	d01f      	beq.n	800967a <_scanf_float+0x3e6>
 800963a:	9903      	ldr	r1, [sp, #12]
 800963c:	600a      	str	r2, [r1, #0]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	e9c3 6700 	strd	r6, r7, [r3]
 8009644:	68e3      	ldr	r3, [r4, #12]
 8009646:	3301      	adds	r3, #1
 8009648:	60e3      	str	r3, [r4, #12]
 800964a:	e7d9      	b.n	8009600 <_scanf_float+0x36c>
 800964c:	9b04      	ldr	r3, [sp, #16]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d0e4      	beq.n	800961c <_scanf_float+0x388>
 8009652:	9905      	ldr	r1, [sp, #20]
 8009654:	230a      	movs	r3, #10
 8009656:	3101      	adds	r1, #1
 8009658:	4640      	mov	r0, r8
 800965a:	f002 fd5d 	bl	800c118 <_strtol_r>
 800965e:	9b04      	ldr	r3, [sp, #16]
 8009660:	9e05      	ldr	r6, [sp, #20]
 8009662:	1ac2      	subs	r2, r0, r3
 8009664:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009668:	429e      	cmp	r6, r3
 800966a:	bf28      	it	cs
 800966c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009670:	4910      	ldr	r1, [pc, #64]	@ (80096b4 <_scanf_float+0x420>)
 8009672:	4630      	mov	r0, r6
 8009674:	f000 f942 	bl	80098fc <siprintf>
 8009678:	e7d0      	b.n	800961c <_scanf_float+0x388>
 800967a:	f011 0f04 	tst.w	r1, #4
 800967e:	9903      	ldr	r1, [sp, #12]
 8009680:	600a      	str	r2, [r1, #0]
 8009682:	d1dc      	bne.n	800963e <_scanf_float+0x3aa>
 8009684:	681d      	ldr	r5, [r3, #0]
 8009686:	4632      	mov	r2, r6
 8009688:	463b      	mov	r3, r7
 800968a:	4630      	mov	r0, r6
 800968c:	4639      	mov	r1, r7
 800968e:	f7f7 fa75 	bl	8000b7c <__aeabi_dcmpun>
 8009692:	b128      	cbz	r0, 80096a0 <_scanf_float+0x40c>
 8009694:	4808      	ldr	r0, [pc, #32]	@ (80096b8 <_scanf_float+0x424>)
 8009696:	f000 fab7 	bl	8009c08 <nanf>
 800969a:	ed85 0a00 	vstr	s0, [r5]
 800969e:	e7d1      	b.n	8009644 <_scanf_float+0x3b0>
 80096a0:	4630      	mov	r0, r6
 80096a2:	4639      	mov	r1, r7
 80096a4:	f7f7 fac8 	bl	8000c38 <__aeabi_d2f>
 80096a8:	6028      	str	r0, [r5, #0]
 80096aa:	e7cb      	b.n	8009644 <_scanf_float+0x3b0>
 80096ac:	f04f 0900 	mov.w	r9, #0
 80096b0:	e629      	b.n	8009306 <_scanf_float+0x72>
 80096b2:	bf00      	nop
 80096b4:	0800d320 	.word	0x0800d320
 80096b8:	0800d6b5 	.word	0x0800d6b5

080096bc <std>:
 80096bc:	2300      	movs	r3, #0
 80096be:	b510      	push	{r4, lr}
 80096c0:	4604      	mov	r4, r0
 80096c2:	e9c0 3300 	strd	r3, r3, [r0]
 80096c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096ca:	6083      	str	r3, [r0, #8]
 80096cc:	8181      	strh	r1, [r0, #12]
 80096ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80096d0:	81c2      	strh	r2, [r0, #14]
 80096d2:	6183      	str	r3, [r0, #24]
 80096d4:	4619      	mov	r1, r3
 80096d6:	2208      	movs	r2, #8
 80096d8:	305c      	adds	r0, #92	@ 0x5c
 80096da:	f000 fa07 	bl	8009aec <memset>
 80096de:	4b0d      	ldr	r3, [pc, #52]	@ (8009714 <std+0x58>)
 80096e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80096e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009718 <std+0x5c>)
 80096e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80096e6:	4b0d      	ldr	r3, [pc, #52]	@ (800971c <std+0x60>)
 80096e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80096ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009720 <std+0x64>)
 80096ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80096ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009724 <std+0x68>)
 80096f0:	6224      	str	r4, [r4, #32]
 80096f2:	429c      	cmp	r4, r3
 80096f4:	d006      	beq.n	8009704 <std+0x48>
 80096f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80096fa:	4294      	cmp	r4, r2
 80096fc:	d002      	beq.n	8009704 <std+0x48>
 80096fe:	33d0      	adds	r3, #208	@ 0xd0
 8009700:	429c      	cmp	r4, r3
 8009702:	d105      	bne.n	8009710 <std+0x54>
 8009704:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800970c:	f000 ba6a 	b.w	8009be4 <__retarget_lock_init_recursive>
 8009710:	bd10      	pop	{r4, pc}
 8009712:	bf00      	nop
 8009714:	0800993d 	.word	0x0800993d
 8009718:	0800995f 	.word	0x0800995f
 800971c:	08009997 	.word	0x08009997
 8009720:	080099bb 	.word	0x080099bb
 8009724:	20004060 	.word	0x20004060

08009728 <stdio_exit_handler>:
 8009728:	4a02      	ldr	r2, [pc, #8]	@ (8009734 <stdio_exit_handler+0xc>)
 800972a:	4903      	ldr	r1, [pc, #12]	@ (8009738 <stdio_exit_handler+0x10>)
 800972c:	4803      	ldr	r0, [pc, #12]	@ (800973c <stdio_exit_handler+0x14>)
 800972e:	f000 b869 	b.w	8009804 <_fwalk_sglue>
 8009732:	bf00      	nop
 8009734:	20000010 	.word	0x20000010
 8009738:	0800c759 	.word	0x0800c759
 800973c:	20000020 	.word	0x20000020

08009740 <cleanup_stdio>:
 8009740:	6841      	ldr	r1, [r0, #4]
 8009742:	4b0c      	ldr	r3, [pc, #48]	@ (8009774 <cleanup_stdio+0x34>)
 8009744:	4299      	cmp	r1, r3
 8009746:	b510      	push	{r4, lr}
 8009748:	4604      	mov	r4, r0
 800974a:	d001      	beq.n	8009750 <cleanup_stdio+0x10>
 800974c:	f003 f804 	bl	800c758 <_fflush_r>
 8009750:	68a1      	ldr	r1, [r4, #8]
 8009752:	4b09      	ldr	r3, [pc, #36]	@ (8009778 <cleanup_stdio+0x38>)
 8009754:	4299      	cmp	r1, r3
 8009756:	d002      	beq.n	800975e <cleanup_stdio+0x1e>
 8009758:	4620      	mov	r0, r4
 800975a:	f002 fffd 	bl	800c758 <_fflush_r>
 800975e:	68e1      	ldr	r1, [r4, #12]
 8009760:	4b06      	ldr	r3, [pc, #24]	@ (800977c <cleanup_stdio+0x3c>)
 8009762:	4299      	cmp	r1, r3
 8009764:	d004      	beq.n	8009770 <cleanup_stdio+0x30>
 8009766:	4620      	mov	r0, r4
 8009768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800976c:	f002 bff4 	b.w	800c758 <_fflush_r>
 8009770:	bd10      	pop	{r4, pc}
 8009772:	bf00      	nop
 8009774:	20004060 	.word	0x20004060
 8009778:	200040c8 	.word	0x200040c8
 800977c:	20004130 	.word	0x20004130

08009780 <global_stdio_init.part.0>:
 8009780:	b510      	push	{r4, lr}
 8009782:	4b0b      	ldr	r3, [pc, #44]	@ (80097b0 <global_stdio_init.part.0+0x30>)
 8009784:	4c0b      	ldr	r4, [pc, #44]	@ (80097b4 <global_stdio_init.part.0+0x34>)
 8009786:	4a0c      	ldr	r2, [pc, #48]	@ (80097b8 <global_stdio_init.part.0+0x38>)
 8009788:	601a      	str	r2, [r3, #0]
 800978a:	4620      	mov	r0, r4
 800978c:	2200      	movs	r2, #0
 800978e:	2104      	movs	r1, #4
 8009790:	f7ff ff94 	bl	80096bc <std>
 8009794:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009798:	2201      	movs	r2, #1
 800979a:	2109      	movs	r1, #9
 800979c:	f7ff ff8e 	bl	80096bc <std>
 80097a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80097a4:	2202      	movs	r2, #2
 80097a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097aa:	2112      	movs	r1, #18
 80097ac:	f7ff bf86 	b.w	80096bc <std>
 80097b0:	20004198 	.word	0x20004198
 80097b4:	20004060 	.word	0x20004060
 80097b8:	08009729 	.word	0x08009729

080097bc <__sfp_lock_acquire>:
 80097bc:	4801      	ldr	r0, [pc, #4]	@ (80097c4 <__sfp_lock_acquire+0x8>)
 80097be:	f000 ba12 	b.w	8009be6 <__retarget_lock_acquire_recursive>
 80097c2:	bf00      	nop
 80097c4:	200041a1 	.word	0x200041a1

080097c8 <__sfp_lock_release>:
 80097c8:	4801      	ldr	r0, [pc, #4]	@ (80097d0 <__sfp_lock_release+0x8>)
 80097ca:	f000 ba0d 	b.w	8009be8 <__retarget_lock_release_recursive>
 80097ce:	bf00      	nop
 80097d0:	200041a1 	.word	0x200041a1

080097d4 <__sinit>:
 80097d4:	b510      	push	{r4, lr}
 80097d6:	4604      	mov	r4, r0
 80097d8:	f7ff fff0 	bl	80097bc <__sfp_lock_acquire>
 80097dc:	6a23      	ldr	r3, [r4, #32]
 80097de:	b11b      	cbz	r3, 80097e8 <__sinit+0x14>
 80097e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097e4:	f7ff bff0 	b.w	80097c8 <__sfp_lock_release>
 80097e8:	4b04      	ldr	r3, [pc, #16]	@ (80097fc <__sinit+0x28>)
 80097ea:	6223      	str	r3, [r4, #32]
 80097ec:	4b04      	ldr	r3, [pc, #16]	@ (8009800 <__sinit+0x2c>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1f5      	bne.n	80097e0 <__sinit+0xc>
 80097f4:	f7ff ffc4 	bl	8009780 <global_stdio_init.part.0>
 80097f8:	e7f2      	b.n	80097e0 <__sinit+0xc>
 80097fa:	bf00      	nop
 80097fc:	08009741 	.word	0x08009741
 8009800:	20004198 	.word	0x20004198

08009804 <_fwalk_sglue>:
 8009804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009808:	4607      	mov	r7, r0
 800980a:	4688      	mov	r8, r1
 800980c:	4614      	mov	r4, r2
 800980e:	2600      	movs	r6, #0
 8009810:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009814:	f1b9 0901 	subs.w	r9, r9, #1
 8009818:	d505      	bpl.n	8009826 <_fwalk_sglue+0x22>
 800981a:	6824      	ldr	r4, [r4, #0]
 800981c:	2c00      	cmp	r4, #0
 800981e:	d1f7      	bne.n	8009810 <_fwalk_sglue+0xc>
 8009820:	4630      	mov	r0, r6
 8009822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009826:	89ab      	ldrh	r3, [r5, #12]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d907      	bls.n	800983c <_fwalk_sglue+0x38>
 800982c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009830:	3301      	adds	r3, #1
 8009832:	d003      	beq.n	800983c <_fwalk_sglue+0x38>
 8009834:	4629      	mov	r1, r5
 8009836:	4638      	mov	r0, r7
 8009838:	47c0      	blx	r8
 800983a:	4306      	orrs	r6, r0
 800983c:	3568      	adds	r5, #104	@ 0x68
 800983e:	e7e9      	b.n	8009814 <_fwalk_sglue+0x10>

08009840 <_puts_r>:
 8009840:	6a03      	ldr	r3, [r0, #32]
 8009842:	b570      	push	{r4, r5, r6, lr}
 8009844:	6884      	ldr	r4, [r0, #8]
 8009846:	4605      	mov	r5, r0
 8009848:	460e      	mov	r6, r1
 800984a:	b90b      	cbnz	r3, 8009850 <_puts_r+0x10>
 800984c:	f7ff ffc2 	bl	80097d4 <__sinit>
 8009850:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009852:	07db      	lsls	r3, r3, #31
 8009854:	d405      	bmi.n	8009862 <_puts_r+0x22>
 8009856:	89a3      	ldrh	r3, [r4, #12]
 8009858:	0598      	lsls	r0, r3, #22
 800985a:	d402      	bmi.n	8009862 <_puts_r+0x22>
 800985c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800985e:	f000 f9c2 	bl	8009be6 <__retarget_lock_acquire_recursive>
 8009862:	89a3      	ldrh	r3, [r4, #12]
 8009864:	0719      	lsls	r1, r3, #28
 8009866:	d502      	bpl.n	800986e <_puts_r+0x2e>
 8009868:	6923      	ldr	r3, [r4, #16]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d135      	bne.n	80098da <_puts_r+0x9a>
 800986e:	4621      	mov	r1, r4
 8009870:	4628      	mov	r0, r5
 8009872:	f000 f8e5 	bl	8009a40 <__swsetup_r>
 8009876:	b380      	cbz	r0, 80098da <_puts_r+0x9a>
 8009878:	f04f 35ff 	mov.w	r5, #4294967295
 800987c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800987e:	07da      	lsls	r2, r3, #31
 8009880:	d405      	bmi.n	800988e <_puts_r+0x4e>
 8009882:	89a3      	ldrh	r3, [r4, #12]
 8009884:	059b      	lsls	r3, r3, #22
 8009886:	d402      	bmi.n	800988e <_puts_r+0x4e>
 8009888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800988a:	f000 f9ad 	bl	8009be8 <__retarget_lock_release_recursive>
 800988e:	4628      	mov	r0, r5
 8009890:	bd70      	pop	{r4, r5, r6, pc}
 8009892:	2b00      	cmp	r3, #0
 8009894:	da04      	bge.n	80098a0 <_puts_r+0x60>
 8009896:	69a2      	ldr	r2, [r4, #24]
 8009898:	429a      	cmp	r2, r3
 800989a:	dc17      	bgt.n	80098cc <_puts_r+0x8c>
 800989c:	290a      	cmp	r1, #10
 800989e:	d015      	beq.n	80098cc <_puts_r+0x8c>
 80098a0:	6823      	ldr	r3, [r4, #0]
 80098a2:	1c5a      	adds	r2, r3, #1
 80098a4:	6022      	str	r2, [r4, #0]
 80098a6:	7019      	strb	r1, [r3, #0]
 80098a8:	68a3      	ldr	r3, [r4, #8]
 80098aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80098ae:	3b01      	subs	r3, #1
 80098b0:	60a3      	str	r3, [r4, #8]
 80098b2:	2900      	cmp	r1, #0
 80098b4:	d1ed      	bne.n	8009892 <_puts_r+0x52>
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	da11      	bge.n	80098de <_puts_r+0x9e>
 80098ba:	4622      	mov	r2, r4
 80098bc:	210a      	movs	r1, #10
 80098be:	4628      	mov	r0, r5
 80098c0:	f000 f87f 	bl	80099c2 <__swbuf_r>
 80098c4:	3001      	adds	r0, #1
 80098c6:	d0d7      	beq.n	8009878 <_puts_r+0x38>
 80098c8:	250a      	movs	r5, #10
 80098ca:	e7d7      	b.n	800987c <_puts_r+0x3c>
 80098cc:	4622      	mov	r2, r4
 80098ce:	4628      	mov	r0, r5
 80098d0:	f000 f877 	bl	80099c2 <__swbuf_r>
 80098d4:	3001      	adds	r0, #1
 80098d6:	d1e7      	bne.n	80098a8 <_puts_r+0x68>
 80098d8:	e7ce      	b.n	8009878 <_puts_r+0x38>
 80098da:	3e01      	subs	r6, #1
 80098dc:	e7e4      	b.n	80098a8 <_puts_r+0x68>
 80098de:	6823      	ldr	r3, [r4, #0]
 80098e0:	1c5a      	adds	r2, r3, #1
 80098e2:	6022      	str	r2, [r4, #0]
 80098e4:	220a      	movs	r2, #10
 80098e6:	701a      	strb	r2, [r3, #0]
 80098e8:	e7ee      	b.n	80098c8 <_puts_r+0x88>
	...

080098ec <puts>:
 80098ec:	4b02      	ldr	r3, [pc, #8]	@ (80098f8 <puts+0xc>)
 80098ee:	4601      	mov	r1, r0
 80098f0:	6818      	ldr	r0, [r3, #0]
 80098f2:	f7ff bfa5 	b.w	8009840 <_puts_r>
 80098f6:	bf00      	nop
 80098f8:	2000001c 	.word	0x2000001c

080098fc <siprintf>:
 80098fc:	b40e      	push	{r1, r2, r3}
 80098fe:	b500      	push	{lr}
 8009900:	b09c      	sub	sp, #112	@ 0x70
 8009902:	ab1d      	add	r3, sp, #116	@ 0x74
 8009904:	9002      	str	r0, [sp, #8]
 8009906:	9006      	str	r0, [sp, #24]
 8009908:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800990c:	4809      	ldr	r0, [pc, #36]	@ (8009934 <siprintf+0x38>)
 800990e:	9107      	str	r1, [sp, #28]
 8009910:	9104      	str	r1, [sp, #16]
 8009912:	4909      	ldr	r1, [pc, #36]	@ (8009938 <siprintf+0x3c>)
 8009914:	f853 2b04 	ldr.w	r2, [r3], #4
 8009918:	9105      	str	r1, [sp, #20]
 800991a:	6800      	ldr	r0, [r0, #0]
 800991c:	9301      	str	r3, [sp, #4]
 800991e:	a902      	add	r1, sp, #8
 8009920:	f002 fc58 	bl	800c1d4 <_svfiprintf_r>
 8009924:	9b02      	ldr	r3, [sp, #8]
 8009926:	2200      	movs	r2, #0
 8009928:	701a      	strb	r2, [r3, #0]
 800992a:	b01c      	add	sp, #112	@ 0x70
 800992c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009930:	b003      	add	sp, #12
 8009932:	4770      	bx	lr
 8009934:	2000001c 	.word	0x2000001c
 8009938:	ffff0208 	.word	0xffff0208

0800993c <__sread>:
 800993c:	b510      	push	{r4, lr}
 800993e:	460c      	mov	r4, r1
 8009940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009944:	f000 f900 	bl	8009b48 <_read_r>
 8009948:	2800      	cmp	r0, #0
 800994a:	bfab      	itete	ge
 800994c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800994e:	89a3      	ldrhlt	r3, [r4, #12]
 8009950:	181b      	addge	r3, r3, r0
 8009952:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009956:	bfac      	ite	ge
 8009958:	6563      	strge	r3, [r4, #84]	@ 0x54
 800995a:	81a3      	strhlt	r3, [r4, #12]
 800995c:	bd10      	pop	{r4, pc}

0800995e <__swrite>:
 800995e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009962:	461f      	mov	r7, r3
 8009964:	898b      	ldrh	r3, [r1, #12]
 8009966:	05db      	lsls	r3, r3, #23
 8009968:	4605      	mov	r5, r0
 800996a:	460c      	mov	r4, r1
 800996c:	4616      	mov	r6, r2
 800996e:	d505      	bpl.n	800997c <__swrite+0x1e>
 8009970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009974:	2302      	movs	r3, #2
 8009976:	2200      	movs	r2, #0
 8009978:	f000 f8d4 	bl	8009b24 <_lseek_r>
 800997c:	89a3      	ldrh	r3, [r4, #12]
 800997e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009982:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009986:	81a3      	strh	r3, [r4, #12]
 8009988:	4632      	mov	r2, r6
 800998a:	463b      	mov	r3, r7
 800998c:	4628      	mov	r0, r5
 800998e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009992:	f000 b8eb 	b.w	8009b6c <_write_r>

08009996 <__sseek>:
 8009996:	b510      	push	{r4, lr}
 8009998:	460c      	mov	r4, r1
 800999a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800999e:	f000 f8c1 	bl	8009b24 <_lseek_r>
 80099a2:	1c43      	adds	r3, r0, #1
 80099a4:	89a3      	ldrh	r3, [r4, #12]
 80099a6:	bf15      	itete	ne
 80099a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80099aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80099ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80099b2:	81a3      	strheq	r3, [r4, #12]
 80099b4:	bf18      	it	ne
 80099b6:	81a3      	strhne	r3, [r4, #12]
 80099b8:	bd10      	pop	{r4, pc}

080099ba <__sclose>:
 80099ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099be:	f000 b8a1 	b.w	8009b04 <_close_r>

080099c2 <__swbuf_r>:
 80099c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c4:	460e      	mov	r6, r1
 80099c6:	4614      	mov	r4, r2
 80099c8:	4605      	mov	r5, r0
 80099ca:	b118      	cbz	r0, 80099d4 <__swbuf_r+0x12>
 80099cc:	6a03      	ldr	r3, [r0, #32]
 80099ce:	b90b      	cbnz	r3, 80099d4 <__swbuf_r+0x12>
 80099d0:	f7ff ff00 	bl	80097d4 <__sinit>
 80099d4:	69a3      	ldr	r3, [r4, #24]
 80099d6:	60a3      	str	r3, [r4, #8]
 80099d8:	89a3      	ldrh	r3, [r4, #12]
 80099da:	071a      	lsls	r2, r3, #28
 80099dc:	d501      	bpl.n	80099e2 <__swbuf_r+0x20>
 80099de:	6923      	ldr	r3, [r4, #16]
 80099e0:	b943      	cbnz	r3, 80099f4 <__swbuf_r+0x32>
 80099e2:	4621      	mov	r1, r4
 80099e4:	4628      	mov	r0, r5
 80099e6:	f000 f82b 	bl	8009a40 <__swsetup_r>
 80099ea:	b118      	cbz	r0, 80099f4 <__swbuf_r+0x32>
 80099ec:	f04f 37ff 	mov.w	r7, #4294967295
 80099f0:	4638      	mov	r0, r7
 80099f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099f4:	6823      	ldr	r3, [r4, #0]
 80099f6:	6922      	ldr	r2, [r4, #16]
 80099f8:	1a98      	subs	r0, r3, r2
 80099fa:	6963      	ldr	r3, [r4, #20]
 80099fc:	b2f6      	uxtb	r6, r6
 80099fe:	4283      	cmp	r3, r0
 8009a00:	4637      	mov	r7, r6
 8009a02:	dc05      	bgt.n	8009a10 <__swbuf_r+0x4e>
 8009a04:	4621      	mov	r1, r4
 8009a06:	4628      	mov	r0, r5
 8009a08:	f002 fea6 	bl	800c758 <_fflush_r>
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	d1ed      	bne.n	80099ec <__swbuf_r+0x2a>
 8009a10:	68a3      	ldr	r3, [r4, #8]
 8009a12:	3b01      	subs	r3, #1
 8009a14:	60a3      	str	r3, [r4, #8]
 8009a16:	6823      	ldr	r3, [r4, #0]
 8009a18:	1c5a      	adds	r2, r3, #1
 8009a1a:	6022      	str	r2, [r4, #0]
 8009a1c:	701e      	strb	r6, [r3, #0]
 8009a1e:	6962      	ldr	r2, [r4, #20]
 8009a20:	1c43      	adds	r3, r0, #1
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d004      	beq.n	8009a30 <__swbuf_r+0x6e>
 8009a26:	89a3      	ldrh	r3, [r4, #12]
 8009a28:	07db      	lsls	r3, r3, #31
 8009a2a:	d5e1      	bpl.n	80099f0 <__swbuf_r+0x2e>
 8009a2c:	2e0a      	cmp	r6, #10
 8009a2e:	d1df      	bne.n	80099f0 <__swbuf_r+0x2e>
 8009a30:	4621      	mov	r1, r4
 8009a32:	4628      	mov	r0, r5
 8009a34:	f002 fe90 	bl	800c758 <_fflush_r>
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	d0d9      	beq.n	80099f0 <__swbuf_r+0x2e>
 8009a3c:	e7d6      	b.n	80099ec <__swbuf_r+0x2a>
	...

08009a40 <__swsetup_r>:
 8009a40:	b538      	push	{r3, r4, r5, lr}
 8009a42:	4b29      	ldr	r3, [pc, #164]	@ (8009ae8 <__swsetup_r+0xa8>)
 8009a44:	4605      	mov	r5, r0
 8009a46:	6818      	ldr	r0, [r3, #0]
 8009a48:	460c      	mov	r4, r1
 8009a4a:	b118      	cbz	r0, 8009a54 <__swsetup_r+0x14>
 8009a4c:	6a03      	ldr	r3, [r0, #32]
 8009a4e:	b90b      	cbnz	r3, 8009a54 <__swsetup_r+0x14>
 8009a50:	f7ff fec0 	bl	80097d4 <__sinit>
 8009a54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a58:	0719      	lsls	r1, r3, #28
 8009a5a:	d422      	bmi.n	8009aa2 <__swsetup_r+0x62>
 8009a5c:	06da      	lsls	r2, r3, #27
 8009a5e:	d407      	bmi.n	8009a70 <__swsetup_r+0x30>
 8009a60:	2209      	movs	r2, #9
 8009a62:	602a      	str	r2, [r5, #0]
 8009a64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a68:	81a3      	strh	r3, [r4, #12]
 8009a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a6e:	e033      	b.n	8009ad8 <__swsetup_r+0x98>
 8009a70:	0758      	lsls	r0, r3, #29
 8009a72:	d512      	bpl.n	8009a9a <__swsetup_r+0x5a>
 8009a74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a76:	b141      	cbz	r1, 8009a8a <__swsetup_r+0x4a>
 8009a78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a7c:	4299      	cmp	r1, r3
 8009a7e:	d002      	beq.n	8009a86 <__swsetup_r+0x46>
 8009a80:	4628      	mov	r0, r5
 8009a82:	f000 ff15 	bl	800a8b0 <_free_r>
 8009a86:	2300      	movs	r3, #0
 8009a88:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a8a:	89a3      	ldrh	r3, [r4, #12]
 8009a8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009a90:	81a3      	strh	r3, [r4, #12]
 8009a92:	2300      	movs	r3, #0
 8009a94:	6063      	str	r3, [r4, #4]
 8009a96:	6923      	ldr	r3, [r4, #16]
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	89a3      	ldrh	r3, [r4, #12]
 8009a9c:	f043 0308 	orr.w	r3, r3, #8
 8009aa0:	81a3      	strh	r3, [r4, #12]
 8009aa2:	6923      	ldr	r3, [r4, #16]
 8009aa4:	b94b      	cbnz	r3, 8009aba <__swsetup_r+0x7a>
 8009aa6:	89a3      	ldrh	r3, [r4, #12]
 8009aa8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ab0:	d003      	beq.n	8009aba <__swsetup_r+0x7a>
 8009ab2:	4621      	mov	r1, r4
 8009ab4:	4628      	mov	r0, r5
 8009ab6:	f002 fe9d 	bl	800c7f4 <__smakebuf_r>
 8009aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009abe:	f013 0201 	ands.w	r2, r3, #1
 8009ac2:	d00a      	beq.n	8009ada <__swsetup_r+0x9a>
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	60a2      	str	r2, [r4, #8]
 8009ac8:	6962      	ldr	r2, [r4, #20]
 8009aca:	4252      	negs	r2, r2
 8009acc:	61a2      	str	r2, [r4, #24]
 8009ace:	6922      	ldr	r2, [r4, #16]
 8009ad0:	b942      	cbnz	r2, 8009ae4 <__swsetup_r+0xa4>
 8009ad2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009ad6:	d1c5      	bne.n	8009a64 <__swsetup_r+0x24>
 8009ad8:	bd38      	pop	{r3, r4, r5, pc}
 8009ada:	0799      	lsls	r1, r3, #30
 8009adc:	bf58      	it	pl
 8009ade:	6962      	ldrpl	r2, [r4, #20]
 8009ae0:	60a2      	str	r2, [r4, #8]
 8009ae2:	e7f4      	b.n	8009ace <__swsetup_r+0x8e>
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	e7f7      	b.n	8009ad8 <__swsetup_r+0x98>
 8009ae8:	2000001c 	.word	0x2000001c

08009aec <memset>:
 8009aec:	4402      	add	r2, r0
 8009aee:	4603      	mov	r3, r0
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d100      	bne.n	8009af6 <memset+0xa>
 8009af4:	4770      	bx	lr
 8009af6:	f803 1b01 	strb.w	r1, [r3], #1
 8009afa:	e7f9      	b.n	8009af0 <memset+0x4>

08009afc <_localeconv_r>:
 8009afc:	4800      	ldr	r0, [pc, #0]	@ (8009b00 <_localeconv_r+0x4>)
 8009afe:	4770      	bx	lr
 8009b00:	2000015c 	.word	0x2000015c

08009b04 <_close_r>:
 8009b04:	b538      	push	{r3, r4, r5, lr}
 8009b06:	4d06      	ldr	r5, [pc, #24]	@ (8009b20 <_close_r+0x1c>)
 8009b08:	2300      	movs	r3, #0
 8009b0a:	4604      	mov	r4, r0
 8009b0c:	4608      	mov	r0, r1
 8009b0e:	602b      	str	r3, [r5, #0]
 8009b10:	f7f7 febc 	bl	800188c <_close>
 8009b14:	1c43      	adds	r3, r0, #1
 8009b16:	d102      	bne.n	8009b1e <_close_r+0x1a>
 8009b18:	682b      	ldr	r3, [r5, #0]
 8009b1a:	b103      	cbz	r3, 8009b1e <_close_r+0x1a>
 8009b1c:	6023      	str	r3, [r4, #0]
 8009b1e:	bd38      	pop	{r3, r4, r5, pc}
 8009b20:	2000419c 	.word	0x2000419c

08009b24 <_lseek_r>:
 8009b24:	b538      	push	{r3, r4, r5, lr}
 8009b26:	4d07      	ldr	r5, [pc, #28]	@ (8009b44 <_lseek_r+0x20>)
 8009b28:	4604      	mov	r4, r0
 8009b2a:	4608      	mov	r0, r1
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	2200      	movs	r2, #0
 8009b30:	602a      	str	r2, [r5, #0]
 8009b32:	461a      	mov	r2, r3
 8009b34:	f7f7 fed1 	bl	80018da <_lseek>
 8009b38:	1c43      	adds	r3, r0, #1
 8009b3a:	d102      	bne.n	8009b42 <_lseek_r+0x1e>
 8009b3c:	682b      	ldr	r3, [r5, #0]
 8009b3e:	b103      	cbz	r3, 8009b42 <_lseek_r+0x1e>
 8009b40:	6023      	str	r3, [r4, #0]
 8009b42:	bd38      	pop	{r3, r4, r5, pc}
 8009b44:	2000419c 	.word	0x2000419c

08009b48 <_read_r>:
 8009b48:	b538      	push	{r3, r4, r5, lr}
 8009b4a:	4d07      	ldr	r5, [pc, #28]	@ (8009b68 <_read_r+0x20>)
 8009b4c:	4604      	mov	r4, r0
 8009b4e:	4608      	mov	r0, r1
 8009b50:	4611      	mov	r1, r2
 8009b52:	2200      	movs	r2, #0
 8009b54:	602a      	str	r2, [r5, #0]
 8009b56:	461a      	mov	r2, r3
 8009b58:	f7f7 fe5f 	bl	800181a <_read>
 8009b5c:	1c43      	adds	r3, r0, #1
 8009b5e:	d102      	bne.n	8009b66 <_read_r+0x1e>
 8009b60:	682b      	ldr	r3, [r5, #0]
 8009b62:	b103      	cbz	r3, 8009b66 <_read_r+0x1e>
 8009b64:	6023      	str	r3, [r4, #0]
 8009b66:	bd38      	pop	{r3, r4, r5, pc}
 8009b68:	2000419c 	.word	0x2000419c

08009b6c <_write_r>:
 8009b6c:	b538      	push	{r3, r4, r5, lr}
 8009b6e:	4d07      	ldr	r5, [pc, #28]	@ (8009b8c <_write_r+0x20>)
 8009b70:	4604      	mov	r4, r0
 8009b72:	4608      	mov	r0, r1
 8009b74:	4611      	mov	r1, r2
 8009b76:	2200      	movs	r2, #0
 8009b78:	602a      	str	r2, [r5, #0]
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	f7f7 fe6a 	bl	8001854 <_write>
 8009b80:	1c43      	adds	r3, r0, #1
 8009b82:	d102      	bne.n	8009b8a <_write_r+0x1e>
 8009b84:	682b      	ldr	r3, [r5, #0]
 8009b86:	b103      	cbz	r3, 8009b8a <_write_r+0x1e>
 8009b88:	6023      	str	r3, [r4, #0]
 8009b8a:	bd38      	pop	{r3, r4, r5, pc}
 8009b8c:	2000419c 	.word	0x2000419c

08009b90 <__errno>:
 8009b90:	4b01      	ldr	r3, [pc, #4]	@ (8009b98 <__errno+0x8>)
 8009b92:	6818      	ldr	r0, [r3, #0]
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	2000001c 	.word	0x2000001c

08009b9c <__libc_init_array>:
 8009b9c:	b570      	push	{r4, r5, r6, lr}
 8009b9e:	4d0d      	ldr	r5, [pc, #52]	@ (8009bd4 <__libc_init_array+0x38>)
 8009ba0:	4c0d      	ldr	r4, [pc, #52]	@ (8009bd8 <__libc_init_array+0x3c>)
 8009ba2:	1b64      	subs	r4, r4, r5
 8009ba4:	10a4      	asrs	r4, r4, #2
 8009ba6:	2600      	movs	r6, #0
 8009ba8:	42a6      	cmp	r6, r4
 8009baa:	d109      	bne.n	8009bc0 <__libc_init_array+0x24>
 8009bac:	4d0b      	ldr	r5, [pc, #44]	@ (8009bdc <__libc_init_array+0x40>)
 8009bae:	4c0c      	ldr	r4, [pc, #48]	@ (8009be0 <__libc_init_array+0x44>)
 8009bb0:	f003 fae0 	bl	800d174 <_init>
 8009bb4:	1b64      	subs	r4, r4, r5
 8009bb6:	10a4      	asrs	r4, r4, #2
 8009bb8:	2600      	movs	r6, #0
 8009bba:	42a6      	cmp	r6, r4
 8009bbc:	d105      	bne.n	8009bca <__libc_init_array+0x2e>
 8009bbe:	bd70      	pop	{r4, r5, r6, pc}
 8009bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bc4:	4798      	blx	r3
 8009bc6:	3601      	adds	r6, #1
 8009bc8:	e7ee      	b.n	8009ba8 <__libc_init_array+0xc>
 8009bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bce:	4798      	blx	r3
 8009bd0:	3601      	adds	r6, #1
 8009bd2:	e7f2      	b.n	8009bba <__libc_init_array+0x1e>
 8009bd4:	0800d720 	.word	0x0800d720
 8009bd8:	0800d720 	.word	0x0800d720
 8009bdc:	0800d720 	.word	0x0800d720
 8009be0:	0800d724 	.word	0x0800d724

08009be4 <__retarget_lock_init_recursive>:
 8009be4:	4770      	bx	lr

08009be6 <__retarget_lock_acquire_recursive>:
 8009be6:	4770      	bx	lr

08009be8 <__retarget_lock_release_recursive>:
 8009be8:	4770      	bx	lr

08009bea <memcpy>:
 8009bea:	440a      	add	r2, r1
 8009bec:	4291      	cmp	r1, r2
 8009bee:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bf2:	d100      	bne.n	8009bf6 <memcpy+0xc>
 8009bf4:	4770      	bx	lr
 8009bf6:	b510      	push	{r4, lr}
 8009bf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c00:	4291      	cmp	r1, r2
 8009c02:	d1f9      	bne.n	8009bf8 <memcpy+0xe>
 8009c04:	bd10      	pop	{r4, pc}
	...

08009c08 <nanf>:
 8009c08:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009c10 <nanf+0x8>
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	7fc00000 	.word	0x7fc00000

08009c14 <quorem>:
 8009c14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c18:	6903      	ldr	r3, [r0, #16]
 8009c1a:	690c      	ldr	r4, [r1, #16]
 8009c1c:	42a3      	cmp	r3, r4
 8009c1e:	4607      	mov	r7, r0
 8009c20:	db7e      	blt.n	8009d20 <quorem+0x10c>
 8009c22:	3c01      	subs	r4, #1
 8009c24:	f101 0814 	add.w	r8, r1, #20
 8009c28:	00a3      	lsls	r3, r4, #2
 8009c2a:	f100 0514 	add.w	r5, r0, #20
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c34:	9301      	str	r3, [sp, #4]
 8009c36:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	429a      	cmp	r2, r3
 8009c42:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c46:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c4a:	d32e      	bcc.n	8009caa <quorem+0x96>
 8009c4c:	f04f 0a00 	mov.w	sl, #0
 8009c50:	46c4      	mov	ip, r8
 8009c52:	46ae      	mov	lr, r5
 8009c54:	46d3      	mov	fp, sl
 8009c56:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009c5a:	b298      	uxth	r0, r3
 8009c5c:	fb06 a000 	mla	r0, r6, r0, sl
 8009c60:	0c02      	lsrs	r2, r0, #16
 8009c62:	0c1b      	lsrs	r3, r3, #16
 8009c64:	fb06 2303 	mla	r3, r6, r3, r2
 8009c68:	f8de 2000 	ldr.w	r2, [lr]
 8009c6c:	b280      	uxth	r0, r0
 8009c6e:	b292      	uxth	r2, r2
 8009c70:	1a12      	subs	r2, r2, r0
 8009c72:	445a      	add	r2, fp
 8009c74:	f8de 0000 	ldr.w	r0, [lr]
 8009c78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009c82:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009c86:	b292      	uxth	r2, r2
 8009c88:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009c8c:	45e1      	cmp	r9, ip
 8009c8e:	f84e 2b04 	str.w	r2, [lr], #4
 8009c92:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009c96:	d2de      	bcs.n	8009c56 <quorem+0x42>
 8009c98:	9b00      	ldr	r3, [sp, #0]
 8009c9a:	58eb      	ldr	r3, [r5, r3]
 8009c9c:	b92b      	cbnz	r3, 8009caa <quorem+0x96>
 8009c9e:	9b01      	ldr	r3, [sp, #4]
 8009ca0:	3b04      	subs	r3, #4
 8009ca2:	429d      	cmp	r5, r3
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	d32f      	bcc.n	8009d08 <quorem+0xf4>
 8009ca8:	613c      	str	r4, [r7, #16]
 8009caa:	4638      	mov	r0, r7
 8009cac:	f001 f9c4 	bl	800b038 <__mcmp>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	db25      	blt.n	8009d00 <quorem+0xec>
 8009cb4:	4629      	mov	r1, r5
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	f858 2b04 	ldr.w	r2, [r8], #4
 8009cbc:	f8d1 c000 	ldr.w	ip, [r1]
 8009cc0:	fa1f fe82 	uxth.w	lr, r2
 8009cc4:	fa1f f38c 	uxth.w	r3, ip
 8009cc8:	eba3 030e 	sub.w	r3, r3, lr
 8009ccc:	4403      	add	r3, r0
 8009cce:	0c12      	lsrs	r2, r2, #16
 8009cd0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009cd4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cde:	45c1      	cmp	r9, r8
 8009ce0:	f841 3b04 	str.w	r3, [r1], #4
 8009ce4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009ce8:	d2e6      	bcs.n	8009cb8 <quorem+0xa4>
 8009cea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cf2:	b922      	cbnz	r2, 8009cfe <quorem+0xea>
 8009cf4:	3b04      	subs	r3, #4
 8009cf6:	429d      	cmp	r5, r3
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	d30b      	bcc.n	8009d14 <quorem+0x100>
 8009cfc:	613c      	str	r4, [r7, #16]
 8009cfe:	3601      	adds	r6, #1
 8009d00:	4630      	mov	r0, r6
 8009d02:	b003      	add	sp, #12
 8009d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d08:	6812      	ldr	r2, [r2, #0]
 8009d0a:	3b04      	subs	r3, #4
 8009d0c:	2a00      	cmp	r2, #0
 8009d0e:	d1cb      	bne.n	8009ca8 <quorem+0x94>
 8009d10:	3c01      	subs	r4, #1
 8009d12:	e7c6      	b.n	8009ca2 <quorem+0x8e>
 8009d14:	6812      	ldr	r2, [r2, #0]
 8009d16:	3b04      	subs	r3, #4
 8009d18:	2a00      	cmp	r2, #0
 8009d1a:	d1ef      	bne.n	8009cfc <quorem+0xe8>
 8009d1c:	3c01      	subs	r4, #1
 8009d1e:	e7ea      	b.n	8009cf6 <quorem+0xe2>
 8009d20:	2000      	movs	r0, #0
 8009d22:	e7ee      	b.n	8009d02 <quorem+0xee>
 8009d24:	0000      	movs	r0, r0
	...

08009d28 <_dtoa_r>:
 8009d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2c:	69c7      	ldr	r7, [r0, #28]
 8009d2e:	b099      	sub	sp, #100	@ 0x64
 8009d30:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009d34:	ec55 4b10 	vmov	r4, r5, d0
 8009d38:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009d3a:	9109      	str	r1, [sp, #36]	@ 0x24
 8009d3c:	4683      	mov	fp, r0
 8009d3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d42:	b97f      	cbnz	r7, 8009d64 <_dtoa_r+0x3c>
 8009d44:	2010      	movs	r0, #16
 8009d46:	f000 fdfd 	bl	800a944 <malloc>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009d50:	b920      	cbnz	r0, 8009d5c <_dtoa_r+0x34>
 8009d52:	4ba7      	ldr	r3, [pc, #668]	@ (8009ff0 <_dtoa_r+0x2c8>)
 8009d54:	21ef      	movs	r1, #239	@ 0xef
 8009d56:	48a7      	ldr	r0, [pc, #668]	@ (8009ff4 <_dtoa_r+0x2cc>)
 8009d58:	f002 fdee 	bl	800c938 <__assert_func>
 8009d5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009d60:	6007      	str	r7, [r0, #0]
 8009d62:	60c7      	str	r7, [r0, #12]
 8009d64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d68:	6819      	ldr	r1, [r3, #0]
 8009d6a:	b159      	cbz	r1, 8009d84 <_dtoa_r+0x5c>
 8009d6c:	685a      	ldr	r2, [r3, #4]
 8009d6e:	604a      	str	r2, [r1, #4]
 8009d70:	2301      	movs	r3, #1
 8009d72:	4093      	lsls	r3, r2
 8009d74:	608b      	str	r3, [r1, #8]
 8009d76:	4658      	mov	r0, fp
 8009d78:	f000 feda 	bl	800ab30 <_Bfree>
 8009d7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d80:	2200      	movs	r2, #0
 8009d82:	601a      	str	r2, [r3, #0]
 8009d84:	1e2b      	subs	r3, r5, #0
 8009d86:	bfb9      	ittee	lt
 8009d88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009d8c:	9303      	strlt	r3, [sp, #12]
 8009d8e:	2300      	movge	r3, #0
 8009d90:	6033      	strge	r3, [r6, #0]
 8009d92:	9f03      	ldr	r7, [sp, #12]
 8009d94:	4b98      	ldr	r3, [pc, #608]	@ (8009ff8 <_dtoa_r+0x2d0>)
 8009d96:	bfbc      	itt	lt
 8009d98:	2201      	movlt	r2, #1
 8009d9a:	6032      	strlt	r2, [r6, #0]
 8009d9c:	43bb      	bics	r3, r7
 8009d9e:	d112      	bne.n	8009dc6 <_dtoa_r+0x9e>
 8009da0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009da2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009da6:	6013      	str	r3, [r2, #0]
 8009da8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009dac:	4323      	orrs	r3, r4
 8009dae:	f000 854d 	beq.w	800a84c <_dtoa_r+0xb24>
 8009db2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009db4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a00c <_dtoa_r+0x2e4>
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 854f 	beq.w	800a85c <_dtoa_r+0xb34>
 8009dbe:	f10a 0303 	add.w	r3, sl, #3
 8009dc2:	f000 bd49 	b.w	800a858 <_dtoa_r+0xb30>
 8009dc6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	ec51 0b17 	vmov	r0, r1, d7
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009dd6:	f7f6 fe9f 	bl	8000b18 <__aeabi_dcmpeq>
 8009dda:	4680      	mov	r8, r0
 8009ddc:	b158      	cbz	r0, 8009df6 <_dtoa_r+0xce>
 8009dde:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009de0:	2301      	movs	r3, #1
 8009de2:	6013      	str	r3, [r2, #0]
 8009de4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009de6:	b113      	cbz	r3, 8009dee <_dtoa_r+0xc6>
 8009de8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009dea:	4b84      	ldr	r3, [pc, #528]	@ (8009ffc <_dtoa_r+0x2d4>)
 8009dec:	6013      	str	r3, [r2, #0]
 8009dee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a010 <_dtoa_r+0x2e8>
 8009df2:	f000 bd33 	b.w	800a85c <_dtoa_r+0xb34>
 8009df6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009dfa:	aa16      	add	r2, sp, #88	@ 0x58
 8009dfc:	a917      	add	r1, sp, #92	@ 0x5c
 8009dfe:	4658      	mov	r0, fp
 8009e00:	f001 fa3a 	bl	800b278 <__d2b>
 8009e04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009e08:	4681      	mov	r9, r0
 8009e0a:	2e00      	cmp	r6, #0
 8009e0c:	d077      	beq.n	8009efe <_dtoa_r+0x1d6>
 8009e0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009e20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009e24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009e28:	4619      	mov	r1, r3
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	4b74      	ldr	r3, [pc, #464]	@ (800a000 <_dtoa_r+0x2d8>)
 8009e2e:	f7f6 fa53 	bl	80002d8 <__aeabi_dsub>
 8009e32:	a369      	add	r3, pc, #420	@ (adr r3, 8009fd8 <_dtoa_r+0x2b0>)
 8009e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e38:	f7f6 fc06 	bl	8000648 <__aeabi_dmul>
 8009e3c:	a368      	add	r3, pc, #416	@ (adr r3, 8009fe0 <_dtoa_r+0x2b8>)
 8009e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e42:	f7f6 fa4b 	bl	80002dc <__adddf3>
 8009e46:	4604      	mov	r4, r0
 8009e48:	4630      	mov	r0, r6
 8009e4a:	460d      	mov	r5, r1
 8009e4c:	f7f6 fb92 	bl	8000574 <__aeabi_i2d>
 8009e50:	a365      	add	r3, pc, #404	@ (adr r3, 8009fe8 <_dtoa_r+0x2c0>)
 8009e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e56:	f7f6 fbf7 	bl	8000648 <__aeabi_dmul>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	4620      	mov	r0, r4
 8009e60:	4629      	mov	r1, r5
 8009e62:	f7f6 fa3b 	bl	80002dc <__adddf3>
 8009e66:	4604      	mov	r4, r0
 8009e68:	460d      	mov	r5, r1
 8009e6a:	f7f6 fe9d 	bl	8000ba8 <__aeabi_d2iz>
 8009e6e:	2200      	movs	r2, #0
 8009e70:	4607      	mov	r7, r0
 8009e72:	2300      	movs	r3, #0
 8009e74:	4620      	mov	r0, r4
 8009e76:	4629      	mov	r1, r5
 8009e78:	f7f6 fe58 	bl	8000b2c <__aeabi_dcmplt>
 8009e7c:	b140      	cbz	r0, 8009e90 <_dtoa_r+0x168>
 8009e7e:	4638      	mov	r0, r7
 8009e80:	f7f6 fb78 	bl	8000574 <__aeabi_i2d>
 8009e84:	4622      	mov	r2, r4
 8009e86:	462b      	mov	r3, r5
 8009e88:	f7f6 fe46 	bl	8000b18 <__aeabi_dcmpeq>
 8009e8c:	b900      	cbnz	r0, 8009e90 <_dtoa_r+0x168>
 8009e8e:	3f01      	subs	r7, #1
 8009e90:	2f16      	cmp	r7, #22
 8009e92:	d851      	bhi.n	8009f38 <_dtoa_r+0x210>
 8009e94:	4b5b      	ldr	r3, [pc, #364]	@ (800a004 <_dtoa_r+0x2dc>)
 8009e96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ea2:	f7f6 fe43 	bl	8000b2c <__aeabi_dcmplt>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d048      	beq.n	8009f3c <_dtoa_r+0x214>
 8009eaa:	3f01      	subs	r7, #1
 8009eac:	2300      	movs	r3, #0
 8009eae:	9312      	str	r3, [sp, #72]	@ 0x48
 8009eb0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009eb2:	1b9b      	subs	r3, r3, r6
 8009eb4:	1e5a      	subs	r2, r3, #1
 8009eb6:	bf44      	itt	mi
 8009eb8:	f1c3 0801 	rsbmi	r8, r3, #1
 8009ebc:	2300      	movmi	r3, #0
 8009ebe:	9208      	str	r2, [sp, #32]
 8009ec0:	bf54      	ite	pl
 8009ec2:	f04f 0800 	movpl.w	r8, #0
 8009ec6:	9308      	strmi	r3, [sp, #32]
 8009ec8:	2f00      	cmp	r7, #0
 8009eca:	db39      	blt.n	8009f40 <_dtoa_r+0x218>
 8009ecc:	9b08      	ldr	r3, [sp, #32]
 8009ece:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009ed0:	443b      	add	r3, r7
 8009ed2:	9308      	str	r3, [sp, #32]
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eda:	2b09      	cmp	r3, #9
 8009edc:	d864      	bhi.n	8009fa8 <_dtoa_r+0x280>
 8009ede:	2b05      	cmp	r3, #5
 8009ee0:	bfc4      	itt	gt
 8009ee2:	3b04      	subgt	r3, #4
 8009ee4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ee8:	f1a3 0302 	sub.w	r3, r3, #2
 8009eec:	bfcc      	ite	gt
 8009eee:	2400      	movgt	r4, #0
 8009ef0:	2401      	movle	r4, #1
 8009ef2:	2b03      	cmp	r3, #3
 8009ef4:	d863      	bhi.n	8009fbe <_dtoa_r+0x296>
 8009ef6:	e8df f003 	tbb	[pc, r3]
 8009efa:	372a      	.short	0x372a
 8009efc:	5535      	.short	0x5535
 8009efe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009f02:	441e      	add	r6, r3
 8009f04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009f08:	2b20      	cmp	r3, #32
 8009f0a:	bfc1      	itttt	gt
 8009f0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009f10:	409f      	lslgt	r7, r3
 8009f12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009f16:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009f1a:	bfd6      	itet	le
 8009f1c:	f1c3 0320 	rsble	r3, r3, #32
 8009f20:	ea47 0003 	orrgt.w	r0, r7, r3
 8009f24:	fa04 f003 	lslle.w	r0, r4, r3
 8009f28:	f7f6 fb14 	bl	8000554 <__aeabi_ui2d>
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009f32:	3e01      	subs	r6, #1
 8009f34:	9214      	str	r2, [sp, #80]	@ 0x50
 8009f36:	e777      	b.n	8009e28 <_dtoa_r+0x100>
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e7b8      	b.n	8009eae <_dtoa_r+0x186>
 8009f3c:	9012      	str	r0, [sp, #72]	@ 0x48
 8009f3e:	e7b7      	b.n	8009eb0 <_dtoa_r+0x188>
 8009f40:	427b      	negs	r3, r7
 8009f42:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f44:	2300      	movs	r3, #0
 8009f46:	eba8 0807 	sub.w	r8, r8, r7
 8009f4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f4c:	e7c4      	b.n	8009ed8 <_dtoa_r+0x1b0>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	dc35      	bgt.n	8009fc4 <_dtoa_r+0x29c>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	9300      	str	r3, [sp, #0]
 8009f5c:	9307      	str	r3, [sp, #28]
 8009f5e:	461a      	mov	r2, r3
 8009f60:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f62:	e00b      	b.n	8009f7c <_dtoa_r+0x254>
 8009f64:	2301      	movs	r3, #1
 8009f66:	e7f3      	b.n	8009f50 <_dtoa_r+0x228>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f6e:	18fb      	adds	r3, r7, r3
 8009f70:	9300      	str	r3, [sp, #0]
 8009f72:	3301      	adds	r3, #1
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	9307      	str	r3, [sp, #28]
 8009f78:	bfb8      	it	lt
 8009f7a:	2301      	movlt	r3, #1
 8009f7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009f80:	2100      	movs	r1, #0
 8009f82:	2204      	movs	r2, #4
 8009f84:	f102 0514 	add.w	r5, r2, #20
 8009f88:	429d      	cmp	r5, r3
 8009f8a:	d91f      	bls.n	8009fcc <_dtoa_r+0x2a4>
 8009f8c:	6041      	str	r1, [r0, #4]
 8009f8e:	4658      	mov	r0, fp
 8009f90:	f000 fd8e 	bl	800aab0 <_Balloc>
 8009f94:	4682      	mov	sl, r0
 8009f96:	2800      	cmp	r0, #0
 8009f98:	d13c      	bne.n	800a014 <_dtoa_r+0x2ec>
 8009f9a:	4b1b      	ldr	r3, [pc, #108]	@ (800a008 <_dtoa_r+0x2e0>)
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009fa2:	e6d8      	b.n	8009d56 <_dtoa_r+0x2e>
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	e7e0      	b.n	8009f6a <_dtoa_r+0x242>
 8009fa8:	2401      	movs	r4, #1
 8009faa:	2300      	movs	r3, #0
 8009fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fae:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8009fb4:	9300      	str	r3, [sp, #0]
 8009fb6:	9307      	str	r3, [sp, #28]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	2312      	movs	r3, #18
 8009fbc:	e7d0      	b.n	8009f60 <_dtoa_r+0x238>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fc2:	e7f5      	b.n	8009fb0 <_dtoa_r+0x288>
 8009fc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	9307      	str	r3, [sp, #28]
 8009fca:	e7d7      	b.n	8009f7c <_dtoa_r+0x254>
 8009fcc:	3101      	adds	r1, #1
 8009fce:	0052      	lsls	r2, r2, #1
 8009fd0:	e7d8      	b.n	8009f84 <_dtoa_r+0x25c>
 8009fd2:	bf00      	nop
 8009fd4:	f3af 8000 	nop.w
 8009fd8:	636f4361 	.word	0x636f4361
 8009fdc:	3fd287a7 	.word	0x3fd287a7
 8009fe0:	8b60c8b3 	.word	0x8b60c8b3
 8009fe4:	3fc68a28 	.word	0x3fc68a28
 8009fe8:	509f79fb 	.word	0x509f79fb
 8009fec:	3fd34413 	.word	0x3fd34413
 8009ff0:	0800d332 	.word	0x0800d332
 8009ff4:	0800d349 	.word	0x0800d349
 8009ff8:	7ff00000 	.word	0x7ff00000
 8009ffc:	0800d2fd 	.word	0x0800d2fd
 800a000:	3ff80000 	.word	0x3ff80000
 800a004:	0800d440 	.word	0x0800d440
 800a008:	0800d3a1 	.word	0x0800d3a1
 800a00c:	0800d32e 	.word	0x0800d32e
 800a010:	0800d2fc 	.word	0x0800d2fc
 800a014:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a018:	6018      	str	r0, [r3, #0]
 800a01a:	9b07      	ldr	r3, [sp, #28]
 800a01c:	2b0e      	cmp	r3, #14
 800a01e:	f200 80a4 	bhi.w	800a16a <_dtoa_r+0x442>
 800a022:	2c00      	cmp	r4, #0
 800a024:	f000 80a1 	beq.w	800a16a <_dtoa_r+0x442>
 800a028:	2f00      	cmp	r7, #0
 800a02a:	dd33      	ble.n	800a094 <_dtoa_r+0x36c>
 800a02c:	4bad      	ldr	r3, [pc, #692]	@ (800a2e4 <_dtoa_r+0x5bc>)
 800a02e:	f007 020f 	and.w	r2, r7, #15
 800a032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a036:	ed93 7b00 	vldr	d7, [r3]
 800a03a:	05f8      	lsls	r0, r7, #23
 800a03c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a040:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a044:	d516      	bpl.n	800a074 <_dtoa_r+0x34c>
 800a046:	4ba8      	ldr	r3, [pc, #672]	@ (800a2e8 <_dtoa_r+0x5c0>)
 800a048:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a04c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a050:	f7f6 fc24 	bl	800089c <__aeabi_ddiv>
 800a054:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a058:	f004 040f 	and.w	r4, r4, #15
 800a05c:	2603      	movs	r6, #3
 800a05e:	4da2      	ldr	r5, [pc, #648]	@ (800a2e8 <_dtoa_r+0x5c0>)
 800a060:	b954      	cbnz	r4, 800a078 <_dtoa_r+0x350>
 800a062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a06a:	f7f6 fc17 	bl	800089c <__aeabi_ddiv>
 800a06e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a072:	e028      	b.n	800a0c6 <_dtoa_r+0x39e>
 800a074:	2602      	movs	r6, #2
 800a076:	e7f2      	b.n	800a05e <_dtoa_r+0x336>
 800a078:	07e1      	lsls	r1, r4, #31
 800a07a:	d508      	bpl.n	800a08e <_dtoa_r+0x366>
 800a07c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a080:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a084:	f7f6 fae0 	bl	8000648 <__aeabi_dmul>
 800a088:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a08c:	3601      	adds	r6, #1
 800a08e:	1064      	asrs	r4, r4, #1
 800a090:	3508      	adds	r5, #8
 800a092:	e7e5      	b.n	800a060 <_dtoa_r+0x338>
 800a094:	f000 80d2 	beq.w	800a23c <_dtoa_r+0x514>
 800a098:	427c      	negs	r4, r7
 800a09a:	4b92      	ldr	r3, [pc, #584]	@ (800a2e4 <_dtoa_r+0x5bc>)
 800a09c:	4d92      	ldr	r5, [pc, #584]	@ (800a2e8 <_dtoa_r+0x5c0>)
 800a09e:	f004 020f 	and.w	r2, r4, #15
 800a0a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0ae:	f7f6 facb 	bl	8000648 <__aeabi_dmul>
 800a0b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0b6:	1124      	asrs	r4, r4, #4
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	2602      	movs	r6, #2
 800a0bc:	2c00      	cmp	r4, #0
 800a0be:	f040 80b2 	bne.w	800a226 <_dtoa_r+0x4fe>
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d1d3      	bne.n	800a06e <_dtoa_r+0x346>
 800a0c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a0c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f000 80b7 	beq.w	800a240 <_dtoa_r+0x518>
 800a0d2:	4b86      	ldr	r3, [pc, #536]	@ (800a2ec <_dtoa_r+0x5c4>)
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	4629      	mov	r1, r5
 800a0da:	f7f6 fd27 	bl	8000b2c <__aeabi_dcmplt>
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	f000 80ae 	beq.w	800a240 <_dtoa_r+0x518>
 800a0e4:	9b07      	ldr	r3, [sp, #28]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f000 80aa 	beq.w	800a240 <_dtoa_r+0x518>
 800a0ec:	9b00      	ldr	r3, [sp, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	dd37      	ble.n	800a162 <_dtoa_r+0x43a>
 800a0f2:	1e7b      	subs	r3, r7, #1
 800a0f4:	9304      	str	r3, [sp, #16]
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	4b7d      	ldr	r3, [pc, #500]	@ (800a2f0 <_dtoa_r+0x5c8>)
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	4629      	mov	r1, r5
 800a0fe:	f7f6 faa3 	bl	8000648 <__aeabi_dmul>
 800a102:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a106:	9c00      	ldr	r4, [sp, #0]
 800a108:	3601      	adds	r6, #1
 800a10a:	4630      	mov	r0, r6
 800a10c:	f7f6 fa32 	bl	8000574 <__aeabi_i2d>
 800a110:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a114:	f7f6 fa98 	bl	8000648 <__aeabi_dmul>
 800a118:	4b76      	ldr	r3, [pc, #472]	@ (800a2f4 <_dtoa_r+0x5cc>)
 800a11a:	2200      	movs	r2, #0
 800a11c:	f7f6 f8de 	bl	80002dc <__adddf3>
 800a120:	4605      	mov	r5, r0
 800a122:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a126:	2c00      	cmp	r4, #0
 800a128:	f040 808d 	bne.w	800a246 <_dtoa_r+0x51e>
 800a12c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a130:	4b71      	ldr	r3, [pc, #452]	@ (800a2f8 <_dtoa_r+0x5d0>)
 800a132:	2200      	movs	r2, #0
 800a134:	f7f6 f8d0 	bl	80002d8 <__aeabi_dsub>
 800a138:	4602      	mov	r2, r0
 800a13a:	460b      	mov	r3, r1
 800a13c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a140:	462a      	mov	r2, r5
 800a142:	4633      	mov	r3, r6
 800a144:	f7f6 fd10 	bl	8000b68 <__aeabi_dcmpgt>
 800a148:	2800      	cmp	r0, #0
 800a14a:	f040 828b 	bne.w	800a664 <_dtoa_r+0x93c>
 800a14e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a152:	462a      	mov	r2, r5
 800a154:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a158:	f7f6 fce8 	bl	8000b2c <__aeabi_dcmplt>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	f040 8128 	bne.w	800a3b2 <_dtoa_r+0x68a>
 800a162:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a166:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a16a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f2c0 815a 	blt.w	800a426 <_dtoa_r+0x6fe>
 800a172:	2f0e      	cmp	r7, #14
 800a174:	f300 8157 	bgt.w	800a426 <_dtoa_r+0x6fe>
 800a178:	4b5a      	ldr	r3, [pc, #360]	@ (800a2e4 <_dtoa_r+0x5bc>)
 800a17a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a17e:	ed93 7b00 	vldr	d7, [r3]
 800a182:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a184:	2b00      	cmp	r3, #0
 800a186:	ed8d 7b00 	vstr	d7, [sp]
 800a18a:	da03      	bge.n	800a194 <_dtoa_r+0x46c>
 800a18c:	9b07      	ldr	r3, [sp, #28]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f340 8101 	ble.w	800a396 <_dtoa_r+0x66e>
 800a194:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a198:	4656      	mov	r6, sl
 800a19a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a19e:	4620      	mov	r0, r4
 800a1a0:	4629      	mov	r1, r5
 800a1a2:	f7f6 fb7b 	bl	800089c <__aeabi_ddiv>
 800a1a6:	f7f6 fcff 	bl	8000ba8 <__aeabi_d2iz>
 800a1aa:	4680      	mov	r8, r0
 800a1ac:	f7f6 f9e2 	bl	8000574 <__aeabi_i2d>
 800a1b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1b4:	f7f6 fa48 	bl	8000648 <__aeabi_dmul>
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	4620      	mov	r0, r4
 800a1be:	4629      	mov	r1, r5
 800a1c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a1c4:	f7f6 f888 	bl	80002d8 <__aeabi_dsub>
 800a1c8:	f806 4b01 	strb.w	r4, [r6], #1
 800a1cc:	9d07      	ldr	r5, [sp, #28]
 800a1ce:	eba6 040a 	sub.w	r4, r6, sl
 800a1d2:	42a5      	cmp	r5, r4
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	f040 8117 	bne.w	800a40a <_dtoa_r+0x6e2>
 800a1dc:	f7f6 f87e 	bl	80002dc <__adddf3>
 800a1e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	460d      	mov	r5, r1
 800a1e8:	f7f6 fcbe 	bl	8000b68 <__aeabi_dcmpgt>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	f040 80f9 	bne.w	800a3e4 <_dtoa_r+0x6bc>
 800a1f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	4629      	mov	r1, r5
 800a1fa:	f7f6 fc8d 	bl	8000b18 <__aeabi_dcmpeq>
 800a1fe:	b118      	cbz	r0, 800a208 <_dtoa_r+0x4e0>
 800a200:	f018 0f01 	tst.w	r8, #1
 800a204:	f040 80ee 	bne.w	800a3e4 <_dtoa_r+0x6bc>
 800a208:	4649      	mov	r1, r9
 800a20a:	4658      	mov	r0, fp
 800a20c:	f000 fc90 	bl	800ab30 <_Bfree>
 800a210:	2300      	movs	r3, #0
 800a212:	7033      	strb	r3, [r6, #0]
 800a214:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a216:	3701      	adds	r7, #1
 800a218:	601f      	str	r7, [r3, #0]
 800a21a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f000 831d 	beq.w	800a85c <_dtoa_r+0xb34>
 800a222:	601e      	str	r6, [r3, #0]
 800a224:	e31a      	b.n	800a85c <_dtoa_r+0xb34>
 800a226:	07e2      	lsls	r2, r4, #31
 800a228:	d505      	bpl.n	800a236 <_dtoa_r+0x50e>
 800a22a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a22e:	f7f6 fa0b 	bl	8000648 <__aeabi_dmul>
 800a232:	3601      	adds	r6, #1
 800a234:	2301      	movs	r3, #1
 800a236:	1064      	asrs	r4, r4, #1
 800a238:	3508      	adds	r5, #8
 800a23a:	e73f      	b.n	800a0bc <_dtoa_r+0x394>
 800a23c:	2602      	movs	r6, #2
 800a23e:	e742      	b.n	800a0c6 <_dtoa_r+0x39e>
 800a240:	9c07      	ldr	r4, [sp, #28]
 800a242:	9704      	str	r7, [sp, #16]
 800a244:	e761      	b.n	800a10a <_dtoa_r+0x3e2>
 800a246:	4b27      	ldr	r3, [pc, #156]	@ (800a2e4 <_dtoa_r+0x5bc>)
 800a248:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a24a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a24e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a252:	4454      	add	r4, sl
 800a254:	2900      	cmp	r1, #0
 800a256:	d053      	beq.n	800a300 <_dtoa_r+0x5d8>
 800a258:	4928      	ldr	r1, [pc, #160]	@ (800a2fc <_dtoa_r+0x5d4>)
 800a25a:	2000      	movs	r0, #0
 800a25c:	f7f6 fb1e 	bl	800089c <__aeabi_ddiv>
 800a260:	4633      	mov	r3, r6
 800a262:	462a      	mov	r2, r5
 800a264:	f7f6 f838 	bl	80002d8 <__aeabi_dsub>
 800a268:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a26c:	4656      	mov	r6, sl
 800a26e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a272:	f7f6 fc99 	bl	8000ba8 <__aeabi_d2iz>
 800a276:	4605      	mov	r5, r0
 800a278:	f7f6 f97c 	bl	8000574 <__aeabi_i2d>
 800a27c:	4602      	mov	r2, r0
 800a27e:	460b      	mov	r3, r1
 800a280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a284:	f7f6 f828 	bl	80002d8 <__aeabi_dsub>
 800a288:	3530      	adds	r5, #48	@ 0x30
 800a28a:	4602      	mov	r2, r0
 800a28c:	460b      	mov	r3, r1
 800a28e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a292:	f806 5b01 	strb.w	r5, [r6], #1
 800a296:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a29a:	f7f6 fc47 	bl	8000b2c <__aeabi_dcmplt>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d171      	bne.n	800a386 <_dtoa_r+0x65e>
 800a2a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2a6:	4911      	ldr	r1, [pc, #68]	@ (800a2ec <_dtoa_r+0x5c4>)
 800a2a8:	2000      	movs	r0, #0
 800a2aa:	f7f6 f815 	bl	80002d8 <__aeabi_dsub>
 800a2ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a2b2:	f7f6 fc3b 	bl	8000b2c <__aeabi_dcmplt>
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	f040 8095 	bne.w	800a3e6 <_dtoa_r+0x6be>
 800a2bc:	42a6      	cmp	r6, r4
 800a2be:	f43f af50 	beq.w	800a162 <_dtoa_r+0x43a>
 800a2c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a2c6:	4b0a      	ldr	r3, [pc, #40]	@ (800a2f0 <_dtoa_r+0x5c8>)
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f7f6 f9bd 	bl	8000648 <__aeabi_dmul>
 800a2ce:	4b08      	ldr	r3, [pc, #32]	@ (800a2f0 <_dtoa_r+0x5c8>)
 800a2d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2da:	f7f6 f9b5 	bl	8000648 <__aeabi_dmul>
 800a2de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2e2:	e7c4      	b.n	800a26e <_dtoa_r+0x546>
 800a2e4:	0800d440 	.word	0x0800d440
 800a2e8:	0800d418 	.word	0x0800d418
 800a2ec:	3ff00000 	.word	0x3ff00000
 800a2f0:	40240000 	.word	0x40240000
 800a2f4:	401c0000 	.word	0x401c0000
 800a2f8:	40140000 	.word	0x40140000
 800a2fc:	3fe00000 	.word	0x3fe00000
 800a300:	4631      	mov	r1, r6
 800a302:	4628      	mov	r0, r5
 800a304:	f7f6 f9a0 	bl	8000648 <__aeabi_dmul>
 800a308:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a30c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a30e:	4656      	mov	r6, sl
 800a310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a314:	f7f6 fc48 	bl	8000ba8 <__aeabi_d2iz>
 800a318:	4605      	mov	r5, r0
 800a31a:	f7f6 f92b 	bl	8000574 <__aeabi_i2d>
 800a31e:	4602      	mov	r2, r0
 800a320:	460b      	mov	r3, r1
 800a322:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a326:	f7f5 ffd7 	bl	80002d8 <__aeabi_dsub>
 800a32a:	3530      	adds	r5, #48	@ 0x30
 800a32c:	f806 5b01 	strb.w	r5, [r6], #1
 800a330:	4602      	mov	r2, r0
 800a332:	460b      	mov	r3, r1
 800a334:	42a6      	cmp	r6, r4
 800a336:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a33a:	f04f 0200 	mov.w	r2, #0
 800a33e:	d124      	bne.n	800a38a <_dtoa_r+0x662>
 800a340:	4bac      	ldr	r3, [pc, #688]	@ (800a5f4 <_dtoa_r+0x8cc>)
 800a342:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a346:	f7f5 ffc9 	bl	80002dc <__adddf3>
 800a34a:	4602      	mov	r2, r0
 800a34c:	460b      	mov	r3, r1
 800a34e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a352:	f7f6 fc09 	bl	8000b68 <__aeabi_dcmpgt>
 800a356:	2800      	cmp	r0, #0
 800a358:	d145      	bne.n	800a3e6 <_dtoa_r+0x6be>
 800a35a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a35e:	49a5      	ldr	r1, [pc, #660]	@ (800a5f4 <_dtoa_r+0x8cc>)
 800a360:	2000      	movs	r0, #0
 800a362:	f7f5 ffb9 	bl	80002d8 <__aeabi_dsub>
 800a366:	4602      	mov	r2, r0
 800a368:	460b      	mov	r3, r1
 800a36a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a36e:	f7f6 fbdd 	bl	8000b2c <__aeabi_dcmplt>
 800a372:	2800      	cmp	r0, #0
 800a374:	f43f aef5 	beq.w	800a162 <_dtoa_r+0x43a>
 800a378:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a37a:	1e73      	subs	r3, r6, #1
 800a37c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a37e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a382:	2b30      	cmp	r3, #48	@ 0x30
 800a384:	d0f8      	beq.n	800a378 <_dtoa_r+0x650>
 800a386:	9f04      	ldr	r7, [sp, #16]
 800a388:	e73e      	b.n	800a208 <_dtoa_r+0x4e0>
 800a38a:	4b9b      	ldr	r3, [pc, #620]	@ (800a5f8 <_dtoa_r+0x8d0>)
 800a38c:	f7f6 f95c 	bl	8000648 <__aeabi_dmul>
 800a390:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a394:	e7bc      	b.n	800a310 <_dtoa_r+0x5e8>
 800a396:	d10c      	bne.n	800a3b2 <_dtoa_r+0x68a>
 800a398:	4b98      	ldr	r3, [pc, #608]	@ (800a5fc <_dtoa_r+0x8d4>)
 800a39a:	2200      	movs	r2, #0
 800a39c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3a0:	f7f6 f952 	bl	8000648 <__aeabi_dmul>
 800a3a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3a8:	f7f6 fbd4 	bl	8000b54 <__aeabi_dcmpge>
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	f000 8157 	beq.w	800a660 <_dtoa_r+0x938>
 800a3b2:	2400      	movs	r4, #0
 800a3b4:	4625      	mov	r5, r4
 800a3b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3b8:	43db      	mvns	r3, r3
 800a3ba:	9304      	str	r3, [sp, #16]
 800a3bc:	4656      	mov	r6, sl
 800a3be:	2700      	movs	r7, #0
 800a3c0:	4621      	mov	r1, r4
 800a3c2:	4658      	mov	r0, fp
 800a3c4:	f000 fbb4 	bl	800ab30 <_Bfree>
 800a3c8:	2d00      	cmp	r5, #0
 800a3ca:	d0dc      	beq.n	800a386 <_dtoa_r+0x65e>
 800a3cc:	b12f      	cbz	r7, 800a3da <_dtoa_r+0x6b2>
 800a3ce:	42af      	cmp	r7, r5
 800a3d0:	d003      	beq.n	800a3da <_dtoa_r+0x6b2>
 800a3d2:	4639      	mov	r1, r7
 800a3d4:	4658      	mov	r0, fp
 800a3d6:	f000 fbab 	bl	800ab30 <_Bfree>
 800a3da:	4629      	mov	r1, r5
 800a3dc:	4658      	mov	r0, fp
 800a3de:	f000 fba7 	bl	800ab30 <_Bfree>
 800a3e2:	e7d0      	b.n	800a386 <_dtoa_r+0x65e>
 800a3e4:	9704      	str	r7, [sp, #16]
 800a3e6:	4633      	mov	r3, r6
 800a3e8:	461e      	mov	r6, r3
 800a3ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3ee:	2a39      	cmp	r2, #57	@ 0x39
 800a3f0:	d107      	bne.n	800a402 <_dtoa_r+0x6da>
 800a3f2:	459a      	cmp	sl, r3
 800a3f4:	d1f8      	bne.n	800a3e8 <_dtoa_r+0x6c0>
 800a3f6:	9a04      	ldr	r2, [sp, #16]
 800a3f8:	3201      	adds	r2, #1
 800a3fa:	9204      	str	r2, [sp, #16]
 800a3fc:	2230      	movs	r2, #48	@ 0x30
 800a3fe:	f88a 2000 	strb.w	r2, [sl]
 800a402:	781a      	ldrb	r2, [r3, #0]
 800a404:	3201      	adds	r2, #1
 800a406:	701a      	strb	r2, [r3, #0]
 800a408:	e7bd      	b.n	800a386 <_dtoa_r+0x65e>
 800a40a:	4b7b      	ldr	r3, [pc, #492]	@ (800a5f8 <_dtoa_r+0x8d0>)
 800a40c:	2200      	movs	r2, #0
 800a40e:	f7f6 f91b 	bl	8000648 <__aeabi_dmul>
 800a412:	2200      	movs	r2, #0
 800a414:	2300      	movs	r3, #0
 800a416:	4604      	mov	r4, r0
 800a418:	460d      	mov	r5, r1
 800a41a:	f7f6 fb7d 	bl	8000b18 <__aeabi_dcmpeq>
 800a41e:	2800      	cmp	r0, #0
 800a420:	f43f aebb 	beq.w	800a19a <_dtoa_r+0x472>
 800a424:	e6f0      	b.n	800a208 <_dtoa_r+0x4e0>
 800a426:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a428:	2a00      	cmp	r2, #0
 800a42a:	f000 80db 	beq.w	800a5e4 <_dtoa_r+0x8bc>
 800a42e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a430:	2a01      	cmp	r2, #1
 800a432:	f300 80bf 	bgt.w	800a5b4 <_dtoa_r+0x88c>
 800a436:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a438:	2a00      	cmp	r2, #0
 800a43a:	f000 80b7 	beq.w	800a5ac <_dtoa_r+0x884>
 800a43e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a442:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a444:	4646      	mov	r6, r8
 800a446:	9a08      	ldr	r2, [sp, #32]
 800a448:	2101      	movs	r1, #1
 800a44a:	441a      	add	r2, r3
 800a44c:	4658      	mov	r0, fp
 800a44e:	4498      	add	r8, r3
 800a450:	9208      	str	r2, [sp, #32]
 800a452:	f000 fc6b 	bl	800ad2c <__i2b>
 800a456:	4605      	mov	r5, r0
 800a458:	b15e      	cbz	r6, 800a472 <_dtoa_r+0x74a>
 800a45a:	9b08      	ldr	r3, [sp, #32]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	dd08      	ble.n	800a472 <_dtoa_r+0x74a>
 800a460:	42b3      	cmp	r3, r6
 800a462:	9a08      	ldr	r2, [sp, #32]
 800a464:	bfa8      	it	ge
 800a466:	4633      	movge	r3, r6
 800a468:	eba8 0803 	sub.w	r8, r8, r3
 800a46c:	1af6      	subs	r6, r6, r3
 800a46e:	1ad3      	subs	r3, r2, r3
 800a470:	9308      	str	r3, [sp, #32]
 800a472:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a474:	b1f3      	cbz	r3, 800a4b4 <_dtoa_r+0x78c>
 800a476:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f000 80b7 	beq.w	800a5ec <_dtoa_r+0x8c4>
 800a47e:	b18c      	cbz	r4, 800a4a4 <_dtoa_r+0x77c>
 800a480:	4629      	mov	r1, r5
 800a482:	4622      	mov	r2, r4
 800a484:	4658      	mov	r0, fp
 800a486:	f000 fd11 	bl	800aeac <__pow5mult>
 800a48a:	464a      	mov	r2, r9
 800a48c:	4601      	mov	r1, r0
 800a48e:	4605      	mov	r5, r0
 800a490:	4658      	mov	r0, fp
 800a492:	f000 fc61 	bl	800ad58 <__multiply>
 800a496:	4649      	mov	r1, r9
 800a498:	9004      	str	r0, [sp, #16]
 800a49a:	4658      	mov	r0, fp
 800a49c:	f000 fb48 	bl	800ab30 <_Bfree>
 800a4a0:	9b04      	ldr	r3, [sp, #16]
 800a4a2:	4699      	mov	r9, r3
 800a4a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4a6:	1b1a      	subs	r2, r3, r4
 800a4a8:	d004      	beq.n	800a4b4 <_dtoa_r+0x78c>
 800a4aa:	4649      	mov	r1, r9
 800a4ac:	4658      	mov	r0, fp
 800a4ae:	f000 fcfd 	bl	800aeac <__pow5mult>
 800a4b2:	4681      	mov	r9, r0
 800a4b4:	2101      	movs	r1, #1
 800a4b6:	4658      	mov	r0, fp
 800a4b8:	f000 fc38 	bl	800ad2c <__i2b>
 800a4bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4be:	4604      	mov	r4, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f000 81cf 	beq.w	800a864 <_dtoa_r+0xb3c>
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	4601      	mov	r1, r0
 800a4ca:	4658      	mov	r0, fp
 800a4cc:	f000 fcee 	bl	800aeac <__pow5mult>
 800a4d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	f300 8095 	bgt.w	800a604 <_dtoa_r+0x8dc>
 800a4da:	9b02      	ldr	r3, [sp, #8]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f040 8087 	bne.w	800a5f0 <_dtoa_r+0x8c8>
 800a4e2:	9b03      	ldr	r3, [sp, #12]
 800a4e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	f040 8089 	bne.w	800a600 <_dtoa_r+0x8d8>
 800a4ee:	9b03      	ldr	r3, [sp, #12]
 800a4f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a4f4:	0d1b      	lsrs	r3, r3, #20
 800a4f6:	051b      	lsls	r3, r3, #20
 800a4f8:	b12b      	cbz	r3, 800a506 <_dtoa_r+0x7de>
 800a4fa:	9b08      	ldr	r3, [sp, #32]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	9308      	str	r3, [sp, #32]
 800a500:	f108 0801 	add.w	r8, r8, #1
 800a504:	2301      	movs	r3, #1
 800a506:	930a      	str	r3, [sp, #40]	@ 0x28
 800a508:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	f000 81b0 	beq.w	800a870 <_dtoa_r+0xb48>
 800a510:	6923      	ldr	r3, [r4, #16]
 800a512:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a516:	6918      	ldr	r0, [r3, #16]
 800a518:	f000 fbbc 	bl	800ac94 <__hi0bits>
 800a51c:	f1c0 0020 	rsb	r0, r0, #32
 800a520:	9b08      	ldr	r3, [sp, #32]
 800a522:	4418      	add	r0, r3
 800a524:	f010 001f 	ands.w	r0, r0, #31
 800a528:	d077      	beq.n	800a61a <_dtoa_r+0x8f2>
 800a52a:	f1c0 0320 	rsb	r3, r0, #32
 800a52e:	2b04      	cmp	r3, #4
 800a530:	dd6b      	ble.n	800a60a <_dtoa_r+0x8e2>
 800a532:	9b08      	ldr	r3, [sp, #32]
 800a534:	f1c0 001c 	rsb	r0, r0, #28
 800a538:	4403      	add	r3, r0
 800a53a:	4480      	add	r8, r0
 800a53c:	4406      	add	r6, r0
 800a53e:	9308      	str	r3, [sp, #32]
 800a540:	f1b8 0f00 	cmp.w	r8, #0
 800a544:	dd05      	ble.n	800a552 <_dtoa_r+0x82a>
 800a546:	4649      	mov	r1, r9
 800a548:	4642      	mov	r2, r8
 800a54a:	4658      	mov	r0, fp
 800a54c:	f000 fd08 	bl	800af60 <__lshift>
 800a550:	4681      	mov	r9, r0
 800a552:	9b08      	ldr	r3, [sp, #32]
 800a554:	2b00      	cmp	r3, #0
 800a556:	dd05      	ble.n	800a564 <_dtoa_r+0x83c>
 800a558:	4621      	mov	r1, r4
 800a55a:	461a      	mov	r2, r3
 800a55c:	4658      	mov	r0, fp
 800a55e:	f000 fcff 	bl	800af60 <__lshift>
 800a562:	4604      	mov	r4, r0
 800a564:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a566:	2b00      	cmp	r3, #0
 800a568:	d059      	beq.n	800a61e <_dtoa_r+0x8f6>
 800a56a:	4621      	mov	r1, r4
 800a56c:	4648      	mov	r0, r9
 800a56e:	f000 fd63 	bl	800b038 <__mcmp>
 800a572:	2800      	cmp	r0, #0
 800a574:	da53      	bge.n	800a61e <_dtoa_r+0x8f6>
 800a576:	1e7b      	subs	r3, r7, #1
 800a578:	9304      	str	r3, [sp, #16]
 800a57a:	4649      	mov	r1, r9
 800a57c:	2300      	movs	r3, #0
 800a57e:	220a      	movs	r2, #10
 800a580:	4658      	mov	r0, fp
 800a582:	f000 faf7 	bl	800ab74 <__multadd>
 800a586:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a588:	4681      	mov	r9, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f000 8172 	beq.w	800a874 <_dtoa_r+0xb4c>
 800a590:	2300      	movs	r3, #0
 800a592:	4629      	mov	r1, r5
 800a594:	220a      	movs	r2, #10
 800a596:	4658      	mov	r0, fp
 800a598:	f000 faec 	bl	800ab74 <__multadd>
 800a59c:	9b00      	ldr	r3, [sp, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	4605      	mov	r5, r0
 800a5a2:	dc67      	bgt.n	800a674 <_dtoa_r+0x94c>
 800a5a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	dc41      	bgt.n	800a62e <_dtoa_r+0x906>
 800a5aa:	e063      	b.n	800a674 <_dtoa_r+0x94c>
 800a5ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a5ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a5b2:	e746      	b.n	800a442 <_dtoa_r+0x71a>
 800a5b4:	9b07      	ldr	r3, [sp, #28]
 800a5b6:	1e5c      	subs	r4, r3, #1
 800a5b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5ba:	42a3      	cmp	r3, r4
 800a5bc:	bfbf      	itttt	lt
 800a5be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a5c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a5c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a5c4:	1ae3      	sublt	r3, r4, r3
 800a5c6:	bfb4      	ite	lt
 800a5c8:	18d2      	addlt	r2, r2, r3
 800a5ca:	1b1c      	subge	r4, r3, r4
 800a5cc:	9b07      	ldr	r3, [sp, #28]
 800a5ce:	bfbc      	itt	lt
 800a5d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a5d2:	2400      	movlt	r4, #0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	bfb5      	itete	lt
 800a5d8:	eba8 0603 	sublt.w	r6, r8, r3
 800a5dc:	9b07      	ldrge	r3, [sp, #28]
 800a5de:	2300      	movlt	r3, #0
 800a5e0:	4646      	movge	r6, r8
 800a5e2:	e730      	b.n	800a446 <_dtoa_r+0x71e>
 800a5e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a5e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a5e8:	4646      	mov	r6, r8
 800a5ea:	e735      	b.n	800a458 <_dtoa_r+0x730>
 800a5ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a5ee:	e75c      	b.n	800a4aa <_dtoa_r+0x782>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	e788      	b.n	800a506 <_dtoa_r+0x7de>
 800a5f4:	3fe00000 	.word	0x3fe00000
 800a5f8:	40240000 	.word	0x40240000
 800a5fc:	40140000 	.word	0x40140000
 800a600:	9b02      	ldr	r3, [sp, #8]
 800a602:	e780      	b.n	800a506 <_dtoa_r+0x7de>
 800a604:	2300      	movs	r3, #0
 800a606:	930a      	str	r3, [sp, #40]	@ 0x28
 800a608:	e782      	b.n	800a510 <_dtoa_r+0x7e8>
 800a60a:	d099      	beq.n	800a540 <_dtoa_r+0x818>
 800a60c:	9a08      	ldr	r2, [sp, #32]
 800a60e:	331c      	adds	r3, #28
 800a610:	441a      	add	r2, r3
 800a612:	4498      	add	r8, r3
 800a614:	441e      	add	r6, r3
 800a616:	9208      	str	r2, [sp, #32]
 800a618:	e792      	b.n	800a540 <_dtoa_r+0x818>
 800a61a:	4603      	mov	r3, r0
 800a61c:	e7f6      	b.n	800a60c <_dtoa_r+0x8e4>
 800a61e:	9b07      	ldr	r3, [sp, #28]
 800a620:	9704      	str	r7, [sp, #16]
 800a622:	2b00      	cmp	r3, #0
 800a624:	dc20      	bgt.n	800a668 <_dtoa_r+0x940>
 800a626:	9300      	str	r3, [sp, #0]
 800a628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	dd1e      	ble.n	800a66c <_dtoa_r+0x944>
 800a62e:	9b00      	ldr	r3, [sp, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	f47f aec0 	bne.w	800a3b6 <_dtoa_r+0x68e>
 800a636:	4621      	mov	r1, r4
 800a638:	2205      	movs	r2, #5
 800a63a:	4658      	mov	r0, fp
 800a63c:	f000 fa9a 	bl	800ab74 <__multadd>
 800a640:	4601      	mov	r1, r0
 800a642:	4604      	mov	r4, r0
 800a644:	4648      	mov	r0, r9
 800a646:	f000 fcf7 	bl	800b038 <__mcmp>
 800a64a:	2800      	cmp	r0, #0
 800a64c:	f77f aeb3 	ble.w	800a3b6 <_dtoa_r+0x68e>
 800a650:	4656      	mov	r6, sl
 800a652:	2331      	movs	r3, #49	@ 0x31
 800a654:	f806 3b01 	strb.w	r3, [r6], #1
 800a658:	9b04      	ldr	r3, [sp, #16]
 800a65a:	3301      	adds	r3, #1
 800a65c:	9304      	str	r3, [sp, #16]
 800a65e:	e6ae      	b.n	800a3be <_dtoa_r+0x696>
 800a660:	9c07      	ldr	r4, [sp, #28]
 800a662:	9704      	str	r7, [sp, #16]
 800a664:	4625      	mov	r5, r4
 800a666:	e7f3      	b.n	800a650 <_dtoa_r+0x928>
 800a668:	9b07      	ldr	r3, [sp, #28]
 800a66a:	9300      	str	r3, [sp, #0]
 800a66c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f000 8104 	beq.w	800a87c <_dtoa_r+0xb54>
 800a674:	2e00      	cmp	r6, #0
 800a676:	dd05      	ble.n	800a684 <_dtoa_r+0x95c>
 800a678:	4629      	mov	r1, r5
 800a67a:	4632      	mov	r2, r6
 800a67c:	4658      	mov	r0, fp
 800a67e:	f000 fc6f 	bl	800af60 <__lshift>
 800a682:	4605      	mov	r5, r0
 800a684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a686:	2b00      	cmp	r3, #0
 800a688:	d05a      	beq.n	800a740 <_dtoa_r+0xa18>
 800a68a:	6869      	ldr	r1, [r5, #4]
 800a68c:	4658      	mov	r0, fp
 800a68e:	f000 fa0f 	bl	800aab0 <_Balloc>
 800a692:	4606      	mov	r6, r0
 800a694:	b928      	cbnz	r0, 800a6a2 <_dtoa_r+0x97a>
 800a696:	4b84      	ldr	r3, [pc, #528]	@ (800a8a8 <_dtoa_r+0xb80>)
 800a698:	4602      	mov	r2, r0
 800a69a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a69e:	f7ff bb5a 	b.w	8009d56 <_dtoa_r+0x2e>
 800a6a2:	692a      	ldr	r2, [r5, #16]
 800a6a4:	3202      	adds	r2, #2
 800a6a6:	0092      	lsls	r2, r2, #2
 800a6a8:	f105 010c 	add.w	r1, r5, #12
 800a6ac:	300c      	adds	r0, #12
 800a6ae:	f7ff fa9c 	bl	8009bea <memcpy>
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	4631      	mov	r1, r6
 800a6b6:	4658      	mov	r0, fp
 800a6b8:	f000 fc52 	bl	800af60 <__lshift>
 800a6bc:	f10a 0301 	add.w	r3, sl, #1
 800a6c0:	9307      	str	r3, [sp, #28]
 800a6c2:	9b00      	ldr	r3, [sp, #0]
 800a6c4:	4453      	add	r3, sl
 800a6c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6c8:	9b02      	ldr	r3, [sp, #8]
 800a6ca:	f003 0301 	and.w	r3, r3, #1
 800a6ce:	462f      	mov	r7, r5
 800a6d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6d2:	4605      	mov	r5, r0
 800a6d4:	9b07      	ldr	r3, [sp, #28]
 800a6d6:	4621      	mov	r1, r4
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	4648      	mov	r0, r9
 800a6dc:	9300      	str	r3, [sp, #0]
 800a6de:	f7ff fa99 	bl	8009c14 <quorem>
 800a6e2:	4639      	mov	r1, r7
 800a6e4:	9002      	str	r0, [sp, #8]
 800a6e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a6ea:	4648      	mov	r0, r9
 800a6ec:	f000 fca4 	bl	800b038 <__mcmp>
 800a6f0:	462a      	mov	r2, r5
 800a6f2:	9008      	str	r0, [sp, #32]
 800a6f4:	4621      	mov	r1, r4
 800a6f6:	4658      	mov	r0, fp
 800a6f8:	f000 fcba 	bl	800b070 <__mdiff>
 800a6fc:	68c2      	ldr	r2, [r0, #12]
 800a6fe:	4606      	mov	r6, r0
 800a700:	bb02      	cbnz	r2, 800a744 <_dtoa_r+0xa1c>
 800a702:	4601      	mov	r1, r0
 800a704:	4648      	mov	r0, r9
 800a706:	f000 fc97 	bl	800b038 <__mcmp>
 800a70a:	4602      	mov	r2, r0
 800a70c:	4631      	mov	r1, r6
 800a70e:	4658      	mov	r0, fp
 800a710:	920e      	str	r2, [sp, #56]	@ 0x38
 800a712:	f000 fa0d 	bl	800ab30 <_Bfree>
 800a716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a718:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a71a:	9e07      	ldr	r6, [sp, #28]
 800a71c:	ea43 0102 	orr.w	r1, r3, r2
 800a720:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a722:	4319      	orrs	r1, r3
 800a724:	d110      	bne.n	800a748 <_dtoa_r+0xa20>
 800a726:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a72a:	d029      	beq.n	800a780 <_dtoa_r+0xa58>
 800a72c:	9b08      	ldr	r3, [sp, #32]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	dd02      	ble.n	800a738 <_dtoa_r+0xa10>
 800a732:	9b02      	ldr	r3, [sp, #8]
 800a734:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a738:	9b00      	ldr	r3, [sp, #0]
 800a73a:	f883 8000 	strb.w	r8, [r3]
 800a73e:	e63f      	b.n	800a3c0 <_dtoa_r+0x698>
 800a740:	4628      	mov	r0, r5
 800a742:	e7bb      	b.n	800a6bc <_dtoa_r+0x994>
 800a744:	2201      	movs	r2, #1
 800a746:	e7e1      	b.n	800a70c <_dtoa_r+0x9e4>
 800a748:	9b08      	ldr	r3, [sp, #32]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	db04      	blt.n	800a758 <_dtoa_r+0xa30>
 800a74e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a750:	430b      	orrs	r3, r1
 800a752:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a754:	430b      	orrs	r3, r1
 800a756:	d120      	bne.n	800a79a <_dtoa_r+0xa72>
 800a758:	2a00      	cmp	r2, #0
 800a75a:	dded      	ble.n	800a738 <_dtoa_r+0xa10>
 800a75c:	4649      	mov	r1, r9
 800a75e:	2201      	movs	r2, #1
 800a760:	4658      	mov	r0, fp
 800a762:	f000 fbfd 	bl	800af60 <__lshift>
 800a766:	4621      	mov	r1, r4
 800a768:	4681      	mov	r9, r0
 800a76a:	f000 fc65 	bl	800b038 <__mcmp>
 800a76e:	2800      	cmp	r0, #0
 800a770:	dc03      	bgt.n	800a77a <_dtoa_r+0xa52>
 800a772:	d1e1      	bne.n	800a738 <_dtoa_r+0xa10>
 800a774:	f018 0f01 	tst.w	r8, #1
 800a778:	d0de      	beq.n	800a738 <_dtoa_r+0xa10>
 800a77a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a77e:	d1d8      	bne.n	800a732 <_dtoa_r+0xa0a>
 800a780:	9a00      	ldr	r2, [sp, #0]
 800a782:	2339      	movs	r3, #57	@ 0x39
 800a784:	7013      	strb	r3, [r2, #0]
 800a786:	4633      	mov	r3, r6
 800a788:	461e      	mov	r6, r3
 800a78a:	3b01      	subs	r3, #1
 800a78c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a790:	2a39      	cmp	r2, #57	@ 0x39
 800a792:	d052      	beq.n	800a83a <_dtoa_r+0xb12>
 800a794:	3201      	adds	r2, #1
 800a796:	701a      	strb	r2, [r3, #0]
 800a798:	e612      	b.n	800a3c0 <_dtoa_r+0x698>
 800a79a:	2a00      	cmp	r2, #0
 800a79c:	dd07      	ble.n	800a7ae <_dtoa_r+0xa86>
 800a79e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a7a2:	d0ed      	beq.n	800a780 <_dtoa_r+0xa58>
 800a7a4:	9a00      	ldr	r2, [sp, #0]
 800a7a6:	f108 0301 	add.w	r3, r8, #1
 800a7aa:	7013      	strb	r3, [r2, #0]
 800a7ac:	e608      	b.n	800a3c0 <_dtoa_r+0x698>
 800a7ae:	9b07      	ldr	r3, [sp, #28]
 800a7b0:	9a07      	ldr	r2, [sp, #28]
 800a7b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a7b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d028      	beq.n	800a80e <_dtoa_r+0xae6>
 800a7bc:	4649      	mov	r1, r9
 800a7be:	2300      	movs	r3, #0
 800a7c0:	220a      	movs	r2, #10
 800a7c2:	4658      	mov	r0, fp
 800a7c4:	f000 f9d6 	bl	800ab74 <__multadd>
 800a7c8:	42af      	cmp	r7, r5
 800a7ca:	4681      	mov	r9, r0
 800a7cc:	f04f 0300 	mov.w	r3, #0
 800a7d0:	f04f 020a 	mov.w	r2, #10
 800a7d4:	4639      	mov	r1, r7
 800a7d6:	4658      	mov	r0, fp
 800a7d8:	d107      	bne.n	800a7ea <_dtoa_r+0xac2>
 800a7da:	f000 f9cb 	bl	800ab74 <__multadd>
 800a7de:	4607      	mov	r7, r0
 800a7e0:	4605      	mov	r5, r0
 800a7e2:	9b07      	ldr	r3, [sp, #28]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	9307      	str	r3, [sp, #28]
 800a7e8:	e774      	b.n	800a6d4 <_dtoa_r+0x9ac>
 800a7ea:	f000 f9c3 	bl	800ab74 <__multadd>
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	4607      	mov	r7, r0
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	220a      	movs	r2, #10
 800a7f6:	4658      	mov	r0, fp
 800a7f8:	f000 f9bc 	bl	800ab74 <__multadd>
 800a7fc:	4605      	mov	r5, r0
 800a7fe:	e7f0      	b.n	800a7e2 <_dtoa_r+0xaba>
 800a800:	9b00      	ldr	r3, [sp, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	bfcc      	ite	gt
 800a806:	461e      	movgt	r6, r3
 800a808:	2601      	movle	r6, #1
 800a80a:	4456      	add	r6, sl
 800a80c:	2700      	movs	r7, #0
 800a80e:	4649      	mov	r1, r9
 800a810:	2201      	movs	r2, #1
 800a812:	4658      	mov	r0, fp
 800a814:	f000 fba4 	bl	800af60 <__lshift>
 800a818:	4621      	mov	r1, r4
 800a81a:	4681      	mov	r9, r0
 800a81c:	f000 fc0c 	bl	800b038 <__mcmp>
 800a820:	2800      	cmp	r0, #0
 800a822:	dcb0      	bgt.n	800a786 <_dtoa_r+0xa5e>
 800a824:	d102      	bne.n	800a82c <_dtoa_r+0xb04>
 800a826:	f018 0f01 	tst.w	r8, #1
 800a82a:	d1ac      	bne.n	800a786 <_dtoa_r+0xa5e>
 800a82c:	4633      	mov	r3, r6
 800a82e:	461e      	mov	r6, r3
 800a830:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a834:	2a30      	cmp	r2, #48	@ 0x30
 800a836:	d0fa      	beq.n	800a82e <_dtoa_r+0xb06>
 800a838:	e5c2      	b.n	800a3c0 <_dtoa_r+0x698>
 800a83a:	459a      	cmp	sl, r3
 800a83c:	d1a4      	bne.n	800a788 <_dtoa_r+0xa60>
 800a83e:	9b04      	ldr	r3, [sp, #16]
 800a840:	3301      	adds	r3, #1
 800a842:	9304      	str	r3, [sp, #16]
 800a844:	2331      	movs	r3, #49	@ 0x31
 800a846:	f88a 3000 	strb.w	r3, [sl]
 800a84a:	e5b9      	b.n	800a3c0 <_dtoa_r+0x698>
 800a84c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a84e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a8ac <_dtoa_r+0xb84>
 800a852:	b11b      	cbz	r3, 800a85c <_dtoa_r+0xb34>
 800a854:	f10a 0308 	add.w	r3, sl, #8
 800a858:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a85a:	6013      	str	r3, [r2, #0]
 800a85c:	4650      	mov	r0, sl
 800a85e:	b019      	add	sp, #100	@ 0x64
 800a860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a866:	2b01      	cmp	r3, #1
 800a868:	f77f ae37 	ble.w	800a4da <_dtoa_r+0x7b2>
 800a86c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a86e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a870:	2001      	movs	r0, #1
 800a872:	e655      	b.n	800a520 <_dtoa_r+0x7f8>
 800a874:	9b00      	ldr	r3, [sp, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	f77f aed6 	ble.w	800a628 <_dtoa_r+0x900>
 800a87c:	4656      	mov	r6, sl
 800a87e:	4621      	mov	r1, r4
 800a880:	4648      	mov	r0, r9
 800a882:	f7ff f9c7 	bl	8009c14 <quorem>
 800a886:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a88a:	f806 8b01 	strb.w	r8, [r6], #1
 800a88e:	9b00      	ldr	r3, [sp, #0]
 800a890:	eba6 020a 	sub.w	r2, r6, sl
 800a894:	4293      	cmp	r3, r2
 800a896:	ddb3      	ble.n	800a800 <_dtoa_r+0xad8>
 800a898:	4649      	mov	r1, r9
 800a89a:	2300      	movs	r3, #0
 800a89c:	220a      	movs	r2, #10
 800a89e:	4658      	mov	r0, fp
 800a8a0:	f000 f968 	bl	800ab74 <__multadd>
 800a8a4:	4681      	mov	r9, r0
 800a8a6:	e7ea      	b.n	800a87e <_dtoa_r+0xb56>
 800a8a8:	0800d3a1 	.word	0x0800d3a1
 800a8ac:	0800d325 	.word	0x0800d325

0800a8b0 <_free_r>:
 800a8b0:	b538      	push	{r3, r4, r5, lr}
 800a8b2:	4605      	mov	r5, r0
 800a8b4:	2900      	cmp	r1, #0
 800a8b6:	d041      	beq.n	800a93c <_free_r+0x8c>
 800a8b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8bc:	1f0c      	subs	r4, r1, #4
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	bfb8      	it	lt
 800a8c2:	18e4      	addlt	r4, r4, r3
 800a8c4:	f000 f8e8 	bl	800aa98 <__malloc_lock>
 800a8c8:	4a1d      	ldr	r2, [pc, #116]	@ (800a940 <_free_r+0x90>)
 800a8ca:	6813      	ldr	r3, [r2, #0]
 800a8cc:	b933      	cbnz	r3, 800a8dc <_free_r+0x2c>
 800a8ce:	6063      	str	r3, [r4, #4]
 800a8d0:	6014      	str	r4, [r2, #0]
 800a8d2:	4628      	mov	r0, r5
 800a8d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8d8:	f000 b8e4 	b.w	800aaa4 <__malloc_unlock>
 800a8dc:	42a3      	cmp	r3, r4
 800a8de:	d908      	bls.n	800a8f2 <_free_r+0x42>
 800a8e0:	6820      	ldr	r0, [r4, #0]
 800a8e2:	1821      	adds	r1, r4, r0
 800a8e4:	428b      	cmp	r3, r1
 800a8e6:	bf01      	itttt	eq
 800a8e8:	6819      	ldreq	r1, [r3, #0]
 800a8ea:	685b      	ldreq	r3, [r3, #4]
 800a8ec:	1809      	addeq	r1, r1, r0
 800a8ee:	6021      	streq	r1, [r4, #0]
 800a8f0:	e7ed      	b.n	800a8ce <_free_r+0x1e>
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	b10b      	cbz	r3, 800a8fc <_free_r+0x4c>
 800a8f8:	42a3      	cmp	r3, r4
 800a8fa:	d9fa      	bls.n	800a8f2 <_free_r+0x42>
 800a8fc:	6811      	ldr	r1, [r2, #0]
 800a8fe:	1850      	adds	r0, r2, r1
 800a900:	42a0      	cmp	r0, r4
 800a902:	d10b      	bne.n	800a91c <_free_r+0x6c>
 800a904:	6820      	ldr	r0, [r4, #0]
 800a906:	4401      	add	r1, r0
 800a908:	1850      	adds	r0, r2, r1
 800a90a:	4283      	cmp	r3, r0
 800a90c:	6011      	str	r1, [r2, #0]
 800a90e:	d1e0      	bne.n	800a8d2 <_free_r+0x22>
 800a910:	6818      	ldr	r0, [r3, #0]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	6053      	str	r3, [r2, #4]
 800a916:	4408      	add	r0, r1
 800a918:	6010      	str	r0, [r2, #0]
 800a91a:	e7da      	b.n	800a8d2 <_free_r+0x22>
 800a91c:	d902      	bls.n	800a924 <_free_r+0x74>
 800a91e:	230c      	movs	r3, #12
 800a920:	602b      	str	r3, [r5, #0]
 800a922:	e7d6      	b.n	800a8d2 <_free_r+0x22>
 800a924:	6820      	ldr	r0, [r4, #0]
 800a926:	1821      	adds	r1, r4, r0
 800a928:	428b      	cmp	r3, r1
 800a92a:	bf04      	itt	eq
 800a92c:	6819      	ldreq	r1, [r3, #0]
 800a92e:	685b      	ldreq	r3, [r3, #4]
 800a930:	6063      	str	r3, [r4, #4]
 800a932:	bf04      	itt	eq
 800a934:	1809      	addeq	r1, r1, r0
 800a936:	6021      	streq	r1, [r4, #0]
 800a938:	6054      	str	r4, [r2, #4]
 800a93a:	e7ca      	b.n	800a8d2 <_free_r+0x22>
 800a93c:	bd38      	pop	{r3, r4, r5, pc}
 800a93e:	bf00      	nop
 800a940:	200041a8 	.word	0x200041a8

0800a944 <malloc>:
 800a944:	4b02      	ldr	r3, [pc, #8]	@ (800a950 <malloc+0xc>)
 800a946:	4601      	mov	r1, r0
 800a948:	6818      	ldr	r0, [r3, #0]
 800a94a:	f000 b825 	b.w	800a998 <_malloc_r>
 800a94e:	bf00      	nop
 800a950:	2000001c 	.word	0x2000001c

0800a954 <sbrk_aligned>:
 800a954:	b570      	push	{r4, r5, r6, lr}
 800a956:	4e0f      	ldr	r6, [pc, #60]	@ (800a994 <sbrk_aligned+0x40>)
 800a958:	460c      	mov	r4, r1
 800a95a:	6831      	ldr	r1, [r6, #0]
 800a95c:	4605      	mov	r5, r0
 800a95e:	b911      	cbnz	r1, 800a966 <sbrk_aligned+0x12>
 800a960:	f001 ffd2 	bl	800c908 <_sbrk_r>
 800a964:	6030      	str	r0, [r6, #0]
 800a966:	4621      	mov	r1, r4
 800a968:	4628      	mov	r0, r5
 800a96a:	f001 ffcd 	bl	800c908 <_sbrk_r>
 800a96e:	1c43      	adds	r3, r0, #1
 800a970:	d103      	bne.n	800a97a <sbrk_aligned+0x26>
 800a972:	f04f 34ff 	mov.w	r4, #4294967295
 800a976:	4620      	mov	r0, r4
 800a978:	bd70      	pop	{r4, r5, r6, pc}
 800a97a:	1cc4      	adds	r4, r0, #3
 800a97c:	f024 0403 	bic.w	r4, r4, #3
 800a980:	42a0      	cmp	r0, r4
 800a982:	d0f8      	beq.n	800a976 <sbrk_aligned+0x22>
 800a984:	1a21      	subs	r1, r4, r0
 800a986:	4628      	mov	r0, r5
 800a988:	f001 ffbe 	bl	800c908 <_sbrk_r>
 800a98c:	3001      	adds	r0, #1
 800a98e:	d1f2      	bne.n	800a976 <sbrk_aligned+0x22>
 800a990:	e7ef      	b.n	800a972 <sbrk_aligned+0x1e>
 800a992:	bf00      	nop
 800a994:	200041a4 	.word	0x200041a4

0800a998 <_malloc_r>:
 800a998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a99c:	1ccd      	adds	r5, r1, #3
 800a99e:	f025 0503 	bic.w	r5, r5, #3
 800a9a2:	3508      	adds	r5, #8
 800a9a4:	2d0c      	cmp	r5, #12
 800a9a6:	bf38      	it	cc
 800a9a8:	250c      	movcc	r5, #12
 800a9aa:	2d00      	cmp	r5, #0
 800a9ac:	4606      	mov	r6, r0
 800a9ae:	db01      	blt.n	800a9b4 <_malloc_r+0x1c>
 800a9b0:	42a9      	cmp	r1, r5
 800a9b2:	d904      	bls.n	800a9be <_malloc_r+0x26>
 800a9b4:	230c      	movs	r3, #12
 800a9b6:	6033      	str	r3, [r6, #0]
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa94 <_malloc_r+0xfc>
 800a9c2:	f000 f869 	bl	800aa98 <__malloc_lock>
 800a9c6:	f8d8 3000 	ldr.w	r3, [r8]
 800a9ca:	461c      	mov	r4, r3
 800a9cc:	bb44      	cbnz	r4, 800aa20 <_malloc_r+0x88>
 800a9ce:	4629      	mov	r1, r5
 800a9d0:	4630      	mov	r0, r6
 800a9d2:	f7ff ffbf 	bl	800a954 <sbrk_aligned>
 800a9d6:	1c43      	adds	r3, r0, #1
 800a9d8:	4604      	mov	r4, r0
 800a9da:	d158      	bne.n	800aa8e <_malloc_r+0xf6>
 800a9dc:	f8d8 4000 	ldr.w	r4, [r8]
 800a9e0:	4627      	mov	r7, r4
 800a9e2:	2f00      	cmp	r7, #0
 800a9e4:	d143      	bne.n	800aa6e <_malloc_r+0xd6>
 800a9e6:	2c00      	cmp	r4, #0
 800a9e8:	d04b      	beq.n	800aa82 <_malloc_r+0xea>
 800a9ea:	6823      	ldr	r3, [r4, #0]
 800a9ec:	4639      	mov	r1, r7
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	eb04 0903 	add.w	r9, r4, r3
 800a9f4:	f001 ff88 	bl	800c908 <_sbrk_r>
 800a9f8:	4581      	cmp	r9, r0
 800a9fa:	d142      	bne.n	800aa82 <_malloc_r+0xea>
 800a9fc:	6821      	ldr	r1, [r4, #0]
 800a9fe:	1a6d      	subs	r5, r5, r1
 800aa00:	4629      	mov	r1, r5
 800aa02:	4630      	mov	r0, r6
 800aa04:	f7ff ffa6 	bl	800a954 <sbrk_aligned>
 800aa08:	3001      	adds	r0, #1
 800aa0a:	d03a      	beq.n	800aa82 <_malloc_r+0xea>
 800aa0c:	6823      	ldr	r3, [r4, #0]
 800aa0e:	442b      	add	r3, r5
 800aa10:	6023      	str	r3, [r4, #0]
 800aa12:	f8d8 3000 	ldr.w	r3, [r8]
 800aa16:	685a      	ldr	r2, [r3, #4]
 800aa18:	bb62      	cbnz	r2, 800aa74 <_malloc_r+0xdc>
 800aa1a:	f8c8 7000 	str.w	r7, [r8]
 800aa1e:	e00f      	b.n	800aa40 <_malloc_r+0xa8>
 800aa20:	6822      	ldr	r2, [r4, #0]
 800aa22:	1b52      	subs	r2, r2, r5
 800aa24:	d420      	bmi.n	800aa68 <_malloc_r+0xd0>
 800aa26:	2a0b      	cmp	r2, #11
 800aa28:	d917      	bls.n	800aa5a <_malloc_r+0xc2>
 800aa2a:	1961      	adds	r1, r4, r5
 800aa2c:	42a3      	cmp	r3, r4
 800aa2e:	6025      	str	r5, [r4, #0]
 800aa30:	bf18      	it	ne
 800aa32:	6059      	strne	r1, [r3, #4]
 800aa34:	6863      	ldr	r3, [r4, #4]
 800aa36:	bf08      	it	eq
 800aa38:	f8c8 1000 	streq.w	r1, [r8]
 800aa3c:	5162      	str	r2, [r4, r5]
 800aa3e:	604b      	str	r3, [r1, #4]
 800aa40:	4630      	mov	r0, r6
 800aa42:	f000 f82f 	bl	800aaa4 <__malloc_unlock>
 800aa46:	f104 000b 	add.w	r0, r4, #11
 800aa4a:	1d23      	adds	r3, r4, #4
 800aa4c:	f020 0007 	bic.w	r0, r0, #7
 800aa50:	1ac2      	subs	r2, r0, r3
 800aa52:	bf1c      	itt	ne
 800aa54:	1a1b      	subne	r3, r3, r0
 800aa56:	50a3      	strne	r3, [r4, r2]
 800aa58:	e7af      	b.n	800a9ba <_malloc_r+0x22>
 800aa5a:	6862      	ldr	r2, [r4, #4]
 800aa5c:	42a3      	cmp	r3, r4
 800aa5e:	bf0c      	ite	eq
 800aa60:	f8c8 2000 	streq.w	r2, [r8]
 800aa64:	605a      	strne	r2, [r3, #4]
 800aa66:	e7eb      	b.n	800aa40 <_malloc_r+0xa8>
 800aa68:	4623      	mov	r3, r4
 800aa6a:	6864      	ldr	r4, [r4, #4]
 800aa6c:	e7ae      	b.n	800a9cc <_malloc_r+0x34>
 800aa6e:	463c      	mov	r4, r7
 800aa70:	687f      	ldr	r7, [r7, #4]
 800aa72:	e7b6      	b.n	800a9e2 <_malloc_r+0x4a>
 800aa74:	461a      	mov	r2, r3
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	42a3      	cmp	r3, r4
 800aa7a:	d1fb      	bne.n	800aa74 <_malloc_r+0xdc>
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	6053      	str	r3, [r2, #4]
 800aa80:	e7de      	b.n	800aa40 <_malloc_r+0xa8>
 800aa82:	230c      	movs	r3, #12
 800aa84:	6033      	str	r3, [r6, #0]
 800aa86:	4630      	mov	r0, r6
 800aa88:	f000 f80c 	bl	800aaa4 <__malloc_unlock>
 800aa8c:	e794      	b.n	800a9b8 <_malloc_r+0x20>
 800aa8e:	6005      	str	r5, [r0, #0]
 800aa90:	e7d6      	b.n	800aa40 <_malloc_r+0xa8>
 800aa92:	bf00      	nop
 800aa94:	200041a8 	.word	0x200041a8

0800aa98 <__malloc_lock>:
 800aa98:	4801      	ldr	r0, [pc, #4]	@ (800aaa0 <__malloc_lock+0x8>)
 800aa9a:	f7ff b8a4 	b.w	8009be6 <__retarget_lock_acquire_recursive>
 800aa9e:	bf00      	nop
 800aaa0:	200041a0 	.word	0x200041a0

0800aaa4 <__malloc_unlock>:
 800aaa4:	4801      	ldr	r0, [pc, #4]	@ (800aaac <__malloc_unlock+0x8>)
 800aaa6:	f7ff b89f 	b.w	8009be8 <__retarget_lock_release_recursive>
 800aaaa:	bf00      	nop
 800aaac:	200041a0 	.word	0x200041a0

0800aab0 <_Balloc>:
 800aab0:	b570      	push	{r4, r5, r6, lr}
 800aab2:	69c6      	ldr	r6, [r0, #28]
 800aab4:	4604      	mov	r4, r0
 800aab6:	460d      	mov	r5, r1
 800aab8:	b976      	cbnz	r6, 800aad8 <_Balloc+0x28>
 800aaba:	2010      	movs	r0, #16
 800aabc:	f7ff ff42 	bl	800a944 <malloc>
 800aac0:	4602      	mov	r2, r0
 800aac2:	61e0      	str	r0, [r4, #28]
 800aac4:	b920      	cbnz	r0, 800aad0 <_Balloc+0x20>
 800aac6:	4b18      	ldr	r3, [pc, #96]	@ (800ab28 <_Balloc+0x78>)
 800aac8:	4818      	ldr	r0, [pc, #96]	@ (800ab2c <_Balloc+0x7c>)
 800aaca:	216b      	movs	r1, #107	@ 0x6b
 800aacc:	f001 ff34 	bl	800c938 <__assert_func>
 800aad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aad4:	6006      	str	r6, [r0, #0]
 800aad6:	60c6      	str	r6, [r0, #12]
 800aad8:	69e6      	ldr	r6, [r4, #28]
 800aada:	68f3      	ldr	r3, [r6, #12]
 800aadc:	b183      	cbz	r3, 800ab00 <_Balloc+0x50>
 800aade:	69e3      	ldr	r3, [r4, #28]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aae6:	b9b8      	cbnz	r0, 800ab18 <_Balloc+0x68>
 800aae8:	2101      	movs	r1, #1
 800aaea:	fa01 f605 	lsl.w	r6, r1, r5
 800aaee:	1d72      	adds	r2, r6, #5
 800aaf0:	0092      	lsls	r2, r2, #2
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	f001 ff3e 	bl	800c974 <_calloc_r>
 800aaf8:	b160      	cbz	r0, 800ab14 <_Balloc+0x64>
 800aafa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aafe:	e00e      	b.n	800ab1e <_Balloc+0x6e>
 800ab00:	2221      	movs	r2, #33	@ 0x21
 800ab02:	2104      	movs	r1, #4
 800ab04:	4620      	mov	r0, r4
 800ab06:	f001 ff35 	bl	800c974 <_calloc_r>
 800ab0a:	69e3      	ldr	r3, [r4, #28]
 800ab0c:	60f0      	str	r0, [r6, #12]
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d1e4      	bne.n	800aade <_Balloc+0x2e>
 800ab14:	2000      	movs	r0, #0
 800ab16:	bd70      	pop	{r4, r5, r6, pc}
 800ab18:	6802      	ldr	r2, [r0, #0]
 800ab1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab1e:	2300      	movs	r3, #0
 800ab20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab24:	e7f7      	b.n	800ab16 <_Balloc+0x66>
 800ab26:	bf00      	nop
 800ab28:	0800d332 	.word	0x0800d332
 800ab2c:	0800d3b2 	.word	0x0800d3b2

0800ab30 <_Bfree>:
 800ab30:	b570      	push	{r4, r5, r6, lr}
 800ab32:	69c6      	ldr	r6, [r0, #28]
 800ab34:	4605      	mov	r5, r0
 800ab36:	460c      	mov	r4, r1
 800ab38:	b976      	cbnz	r6, 800ab58 <_Bfree+0x28>
 800ab3a:	2010      	movs	r0, #16
 800ab3c:	f7ff ff02 	bl	800a944 <malloc>
 800ab40:	4602      	mov	r2, r0
 800ab42:	61e8      	str	r0, [r5, #28]
 800ab44:	b920      	cbnz	r0, 800ab50 <_Bfree+0x20>
 800ab46:	4b09      	ldr	r3, [pc, #36]	@ (800ab6c <_Bfree+0x3c>)
 800ab48:	4809      	ldr	r0, [pc, #36]	@ (800ab70 <_Bfree+0x40>)
 800ab4a:	218f      	movs	r1, #143	@ 0x8f
 800ab4c:	f001 fef4 	bl	800c938 <__assert_func>
 800ab50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab54:	6006      	str	r6, [r0, #0]
 800ab56:	60c6      	str	r6, [r0, #12]
 800ab58:	b13c      	cbz	r4, 800ab6a <_Bfree+0x3a>
 800ab5a:	69eb      	ldr	r3, [r5, #28]
 800ab5c:	6862      	ldr	r2, [r4, #4]
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab64:	6021      	str	r1, [r4, #0]
 800ab66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab6a:	bd70      	pop	{r4, r5, r6, pc}
 800ab6c:	0800d332 	.word	0x0800d332
 800ab70:	0800d3b2 	.word	0x0800d3b2

0800ab74 <__multadd>:
 800ab74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab78:	690d      	ldr	r5, [r1, #16]
 800ab7a:	4607      	mov	r7, r0
 800ab7c:	460c      	mov	r4, r1
 800ab7e:	461e      	mov	r6, r3
 800ab80:	f101 0c14 	add.w	ip, r1, #20
 800ab84:	2000      	movs	r0, #0
 800ab86:	f8dc 3000 	ldr.w	r3, [ip]
 800ab8a:	b299      	uxth	r1, r3
 800ab8c:	fb02 6101 	mla	r1, r2, r1, r6
 800ab90:	0c1e      	lsrs	r6, r3, #16
 800ab92:	0c0b      	lsrs	r3, r1, #16
 800ab94:	fb02 3306 	mla	r3, r2, r6, r3
 800ab98:	b289      	uxth	r1, r1
 800ab9a:	3001      	adds	r0, #1
 800ab9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aba0:	4285      	cmp	r5, r0
 800aba2:	f84c 1b04 	str.w	r1, [ip], #4
 800aba6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800abaa:	dcec      	bgt.n	800ab86 <__multadd+0x12>
 800abac:	b30e      	cbz	r6, 800abf2 <__multadd+0x7e>
 800abae:	68a3      	ldr	r3, [r4, #8]
 800abb0:	42ab      	cmp	r3, r5
 800abb2:	dc19      	bgt.n	800abe8 <__multadd+0x74>
 800abb4:	6861      	ldr	r1, [r4, #4]
 800abb6:	4638      	mov	r0, r7
 800abb8:	3101      	adds	r1, #1
 800abba:	f7ff ff79 	bl	800aab0 <_Balloc>
 800abbe:	4680      	mov	r8, r0
 800abc0:	b928      	cbnz	r0, 800abce <__multadd+0x5a>
 800abc2:	4602      	mov	r2, r0
 800abc4:	4b0c      	ldr	r3, [pc, #48]	@ (800abf8 <__multadd+0x84>)
 800abc6:	480d      	ldr	r0, [pc, #52]	@ (800abfc <__multadd+0x88>)
 800abc8:	21ba      	movs	r1, #186	@ 0xba
 800abca:	f001 feb5 	bl	800c938 <__assert_func>
 800abce:	6922      	ldr	r2, [r4, #16]
 800abd0:	3202      	adds	r2, #2
 800abd2:	f104 010c 	add.w	r1, r4, #12
 800abd6:	0092      	lsls	r2, r2, #2
 800abd8:	300c      	adds	r0, #12
 800abda:	f7ff f806 	bl	8009bea <memcpy>
 800abde:	4621      	mov	r1, r4
 800abe0:	4638      	mov	r0, r7
 800abe2:	f7ff ffa5 	bl	800ab30 <_Bfree>
 800abe6:	4644      	mov	r4, r8
 800abe8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800abec:	3501      	adds	r5, #1
 800abee:	615e      	str	r6, [r3, #20]
 800abf0:	6125      	str	r5, [r4, #16]
 800abf2:	4620      	mov	r0, r4
 800abf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abf8:	0800d3a1 	.word	0x0800d3a1
 800abfc:	0800d3b2 	.word	0x0800d3b2

0800ac00 <__s2b>:
 800ac00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac04:	460c      	mov	r4, r1
 800ac06:	4615      	mov	r5, r2
 800ac08:	461f      	mov	r7, r3
 800ac0a:	2209      	movs	r2, #9
 800ac0c:	3308      	adds	r3, #8
 800ac0e:	4606      	mov	r6, r0
 800ac10:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac14:	2100      	movs	r1, #0
 800ac16:	2201      	movs	r2, #1
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	db09      	blt.n	800ac30 <__s2b+0x30>
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	f7ff ff47 	bl	800aab0 <_Balloc>
 800ac22:	b940      	cbnz	r0, 800ac36 <__s2b+0x36>
 800ac24:	4602      	mov	r2, r0
 800ac26:	4b19      	ldr	r3, [pc, #100]	@ (800ac8c <__s2b+0x8c>)
 800ac28:	4819      	ldr	r0, [pc, #100]	@ (800ac90 <__s2b+0x90>)
 800ac2a:	21d3      	movs	r1, #211	@ 0xd3
 800ac2c:	f001 fe84 	bl	800c938 <__assert_func>
 800ac30:	0052      	lsls	r2, r2, #1
 800ac32:	3101      	adds	r1, #1
 800ac34:	e7f0      	b.n	800ac18 <__s2b+0x18>
 800ac36:	9b08      	ldr	r3, [sp, #32]
 800ac38:	6143      	str	r3, [r0, #20]
 800ac3a:	2d09      	cmp	r5, #9
 800ac3c:	f04f 0301 	mov.w	r3, #1
 800ac40:	6103      	str	r3, [r0, #16]
 800ac42:	dd16      	ble.n	800ac72 <__s2b+0x72>
 800ac44:	f104 0909 	add.w	r9, r4, #9
 800ac48:	46c8      	mov	r8, r9
 800ac4a:	442c      	add	r4, r5
 800ac4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ac50:	4601      	mov	r1, r0
 800ac52:	3b30      	subs	r3, #48	@ 0x30
 800ac54:	220a      	movs	r2, #10
 800ac56:	4630      	mov	r0, r6
 800ac58:	f7ff ff8c 	bl	800ab74 <__multadd>
 800ac5c:	45a0      	cmp	r8, r4
 800ac5e:	d1f5      	bne.n	800ac4c <__s2b+0x4c>
 800ac60:	f1a5 0408 	sub.w	r4, r5, #8
 800ac64:	444c      	add	r4, r9
 800ac66:	1b2d      	subs	r5, r5, r4
 800ac68:	1963      	adds	r3, r4, r5
 800ac6a:	42bb      	cmp	r3, r7
 800ac6c:	db04      	blt.n	800ac78 <__s2b+0x78>
 800ac6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac72:	340a      	adds	r4, #10
 800ac74:	2509      	movs	r5, #9
 800ac76:	e7f6      	b.n	800ac66 <__s2b+0x66>
 800ac78:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac7c:	4601      	mov	r1, r0
 800ac7e:	3b30      	subs	r3, #48	@ 0x30
 800ac80:	220a      	movs	r2, #10
 800ac82:	4630      	mov	r0, r6
 800ac84:	f7ff ff76 	bl	800ab74 <__multadd>
 800ac88:	e7ee      	b.n	800ac68 <__s2b+0x68>
 800ac8a:	bf00      	nop
 800ac8c:	0800d3a1 	.word	0x0800d3a1
 800ac90:	0800d3b2 	.word	0x0800d3b2

0800ac94 <__hi0bits>:
 800ac94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ac98:	4603      	mov	r3, r0
 800ac9a:	bf36      	itet	cc
 800ac9c:	0403      	lslcc	r3, r0, #16
 800ac9e:	2000      	movcs	r0, #0
 800aca0:	2010      	movcc	r0, #16
 800aca2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aca6:	bf3c      	itt	cc
 800aca8:	021b      	lslcc	r3, r3, #8
 800acaa:	3008      	addcc	r0, #8
 800acac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acb0:	bf3c      	itt	cc
 800acb2:	011b      	lslcc	r3, r3, #4
 800acb4:	3004      	addcc	r0, #4
 800acb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acba:	bf3c      	itt	cc
 800acbc:	009b      	lslcc	r3, r3, #2
 800acbe:	3002      	addcc	r0, #2
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	db05      	blt.n	800acd0 <__hi0bits+0x3c>
 800acc4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800acc8:	f100 0001 	add.w	r0, r0, #1
 800accc:	bf08      	it	eq
 800acce:	2020      	moveq	r0, #32
 800acd0:	4770      	bx	lr

0800acd2 <__lo0bits>:
 800acd2:	6803      	ldr	r3, [r0, #0]
 800acd4:	4602      	mov	r2, r0
 800acd6:	f013 0007 	ands.w	r0, r3, #7
 800acda:	d00b      	beq.n	800acf4 <__lo0bits+0x22>
 800acdc:	07d9      	lsls	r1, r3, #31
 800acde:	d421      	bmi.n	800ad24 <__lo0bits+0x52>
 800ace0:	0798      	lsls	r0, r3, #30
 800ace2:	bf49      	itett	mi
 800ace4:	085b      	lsrmi	r3, r3, #1
 800ace6:	089b      	lsrpl	r3, r3, #2
 800ace8:	2001      	movmi	r0, #1
 800acea:	6013      	strmi	r3, [r2, #0]
 800acec:	bf5c      	itt	pl
 800acee:	6013      	strpl	r3, [r2, #0]
 800acf0:	2002      	movpl	r0, #2
 800acf2:	4770      	bx	lr
 800acf4:	b299      	uxth	r1, r3
 800acf6:	b909      	cbnz	r1, 800acfc <__lo0bits+0x2a>
 800acf8:	0c1b      	lsrs	r3, r3, #16
 800acfa:	2010      	movs	r0, #16
 800acfc:	b2d9      	uxtb	r1, r3
 800acfe:	b909      	cbnz	r1, 800ad04 <__lo0bits+0x32>
 800ad00:	3008      	adds	r0, #8
 800ad02:	0a1b      	lsrs	r3, r3, #8
 800ad04:	0719      	lsls	r1, r3, #28
 800ad06:	bf04      	itt	eq
 800ad08:	091b      	lsreq	r3, r3, #4
 800ad0a:	3004      	addeq	r0, #4
 800ad0c:	0799      	lsls	r1, r3, #30
 800ad0e:	bf04      	itt	eq
 800ad10:	089b      	lsreq	r3, r3, #2
 800ad12:	3002      	addeq	r0, #2
 800ad14:	07d9      	lsls	r1, r3, #31
 800ad16:	d403      	bmi.n	800ad20 <__lo0bits+0x4e>
 800ad18:	085b      	lsrs	r3, r3, #1
 800ad1a:	f100 0001 	add.w	r0, r0, #1
 800ad1e:	d003      	beq.n	800ad28 <__lo0bits+0x56>
 800ad20:	6013      	str	r3, [r2, #0]
 800ad22:	4770      	bx	lr
 800ad24:	2000      	movs	r0, #0
 800ad26:	4770      	bx	lr
 800ad28:	2020      	movs	r0, #32
 800ad2a:	4770      	bx	lr

0800ad2c <__i2b>:
 800ad2c:	b510      	push	{r4, lr}
 800ad2e:	460c      	mov	r4, r1
 800ad30:	2101      	movs	r1, #1
 800ad32:	f7ff febd 	bl	800aab0 <_Balloc>
 800ad36:	4602      	mov	r2, r0
 800ad38:	b928      	cbnz	r0, 800ad46 <__i2b+0x1a>
 800ad3a:	4b05      	ldr	r3, [pc, #20]	@ (800ad50 <__i2b+0x24>)
 800ad3c:	4805      	ldr	r0, [pc, #20]	@ (800ad54 <__i2b+0x28>)
 800ad3e:	f240 1145 	movw	r1, #325	@ 0x145
 800ad42:	f001 fdf9 	bl	800c938 <__assert_func>
 800ad46:	2301      	movs	r3, #1
 800ad48:	6144      	str	r4, [r0, #20]
 800ad4a:	6103      	str	r3, [r0, #16]
 800ad4c:	bd10      	pop	{r4, pc}
 800ad4e:	bf00      	nop
 800ad50:	0800d3a1 	.word	0x0800d3a1
 800ad54:	0800d3b2 	.word	0x0800d3b2

0800ad58 <__multiply>:
 800ad58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5c:	4614      	mov	r4, r2
 800ad5e:	690a      	ldr	r2, [r1, #16]
 800ad60:	6923      	ldr	r3, [r4, #16]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	bfa8      	it	ge
 800ad66:	4623      	movge	r3, r4
 800ad68:	460f      	mov	r7, r1
 800ad6a:	bfa4      	itt	ge
 800ad6c:	460c      	movge	r4, r1
 800ad6e:	461f      	movge	r7, r3
 800ad70:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ad74:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ad78:	68a3      	ldr	r3, [r4, #8]
 800ad7a:	6861      	ldr	r1, [r4, #4]
 800ad7c:	eb0a 0609 	add.w	r6, sl, r9
 800ad80:	42b3      	cmp	r3, r6
 800ad82:	b085      	sub	sp, #20
 800ad84:	bfb8      	it	lt
 800ad86:	3101      	addlt	r1, #1
 800ad88:	f7ff fe92 	bl	800aab0 <_Balloc>
 800ad8c:	b930      	cbnz	r0, 800ad9c <__multiply+0x44>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	4b44      	ldr	r3, [pc, #272]	@ (800aea4 <__multiply+0x14c>)
 800ad92:	4845      	ldr	r0, [pc, #276]	@ (800aea8 <__multiply+0x150>)
 800ad94:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ad98:	f001 fdce 	bl	800c938 <__assert_func>
 800ad9c:	f100 0514 	add.w	r5, r0, #20
 800ada0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ada4:	462b      	mov	r3, r5
 800ada6:	2200      	movs	r2, #0
 800ada8:	4543      	cmp	r3, r8
 800adaa:	d321      	bcc.n	800adf0 <__multiply+0x98>
 800adac:	f107 0114 	add.w	r1, r7, #20
 800adb0:	f104 0214 	add.w	r2, r4, #20
 800adb4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800adb8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800adbc:	9302      	str	r3, [sp, #8]
 800adbe:	1b13      	subs	r3, r2, r4
 800adc0:	3b15      	subs	r3, #21
 800adc2:	f023 0303 	bic.w	r3, r3, #3
 800adc6:	3304      	adds	r3, #4
 800adc8:	f104 0715 	add.w	r7, r4, #21
 800adcc:	42ba      	cmp	r2, r7
 800adce:	bf38      	it	cc
 800add0:	2304      	movcc	r3, #4
 800add2:	9301      	str	r3, [sp, #4]
 800add4:	9b02      	ldr	r3, [sp, #8]
 800add6:	9103      	str	r1, [sp, #12]
 800add8:	428b      	cmp	r3, r1
 800adda:	d80c      	bhi.n	800adf6 <__multiply+0x9e>
 800addc:	2e00      	cmp	r6, #0
 800adde:	dd03      	ble.n	800ade8 <__multiply+0x90>
 800ade0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d05b      	beq.n	800aea0 <__multiply+0x148>
 800ade8:	6106      	str	r6, [r0, #16]
 800adea:	b005      	add	sp, #20
 800adec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf0:	f843 2b04 	str.w	r2, [r3], #4
 800adf4:	e7d8      	b.n	800ada8 <__multiply+0x50>
 800adf6:	f8b1 a000 	ldrh.w	sl, [r1]
 800adfa:	f1ba 0f00 	cmp.w	sl, #0
 800adfe:	d024      	beq.n	800ae4a <__multiply+0xf2>
 800ae00:	f104 0e14 	add.w	lr, r4, #20
 800ae04:	46a9      	mov	r9, r5
 800ae06:	f04f 0c00 	mov.w	ip, #0
 800ae0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ae0e:	f8d9 3000 	ldr.w	r3, [r9]
 800ae12:	fa1f fb87 	uxth.w	fp, r7
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	fb0a 330b 	mla	r3, sl, fp, r3
 800ae1c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ae20:	f8d9 7000 	ldr.w	r7, [r9]
 800ae24:	4463      	add	r3, ip
 800ae26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ae2a:	fb0a c70b 	mla	r7, sl, fp, ip
 800ae2e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ae38:	4572      	cmp	r2, lr
 800ae3a:	f849 3b04 	str.w	r3, [r9], #4
 800ae3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ae42:	d8e2      	bhi.n	800ae0a <__multiply+0xb2>
 800ae44:	9b01      	ldr	r3, [sp, #4]
 800ae46:	f845 c003 	str.w	ip, [r5, r3]
 800ae4a:	9b03      	ldr	r3, [sp, #12]
 800ae4c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ae50:	3104      	adds	r1, #4
 800ae52:	f1b9 0f00 	cmp.w	r9, #0
 800ae56:	d021      	beq.n	800ae9c <__multiply+0x144>
 800ae58:	682b      	ldr	r3, [r5, #0]
 800ae5a:	f104 0c14 	add.w	ip, r4, #20
 800ae5e:	46ae      	mov	lr, r5
 800ae60:	f04f 0a00 	mov.w	sl, #0
 800ae64:	f8bc b000 	ldrh.w	fp, [ip]
 800ae68:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ae6c:	fb09 770b 	mla	r7, r9, fp, r7
 800ae70:	4457      	add	r7, sl
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ae78:	f84e 3b04 	str.w	r3, [lr], #4
 800ae7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ae80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae84:	f8be 3000 	ldrh.w	r3, [lr]
 800ae88:	fb09 330a 	mla	r3, r9, sl, r3
 800ae8c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ae90:	4562      	cmp	r2, ip
 800ae92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae96:	d8e5      	bhi.n	800ae64 <__multiply+0x10c>
 800ae98:	9f01      	ldr	r7, [sp, #4]
 800ae9a:	51eb      	str	r3, [r5, r7]
 800ae9c:	3504      	adds	r5, #4
 800ae9e:	e799      	b.n	800add4 <__multiply+0x7c>
 800aea0:	3e01      	subs	r6, #1
 800aea2:	e79b      	b.n	800addc <__multiply+0x84>
 800aea4:	0800d3a1 	.word	0x0800d3a1
 800aea8:	0800d3b2 	.word	0x0800d3b2

0800aeac <__pow5mult>:
 800aeac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aeb0:	4615      	mov	r5, r2
 800aeb2:	f012 0203 	ands.w	r2, r2, #3
 800aeb6:	4607      	mov	r7, r0
 800aeb8:	460e      	mov	r6, r1
 800aeba:	d007      	beq.n	800aecc <__pow5mult+0x20>
 800aebc:	4c25      	ldr	r4, [pc, #148]	@ (800af54 <__pow5mult+0xa8>)
 800aebe:	3a01      	subs	r2, #1
 800aec0:	2300      	movs	r3, #0
 800aec2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aec6:	f7ff fe55 	bl	800ab74 <__multadd>
 800aeca:	4606      	mov	r6, r0
 800aecc:	10ad      	asrs	r5, r5, #2
 800aece:	d03d      	beq.n	800af4c <__pow5mult+0xa0>
 800aed0:	69fc      	ldr	r4, [r7, #28]
 800aed2:	b97c      	cbnz	r4, 800aef4 <__pow5mult+0x48>
 800aed4:	2010      	movs	r0, #16
 800aed6:	f7ff fd35 	bl	800a944 <malloc>
 800aeda:	4602      	mov	r2, r0
 800aedc:	61f8      	str	r0, [r7, #28]
 800aede:	b928      	cbnz	r0, 800aeec <__pow5mult+0x40>
 800aee0:	4b1d      	ldr	r3, [pc, #116]	@ (800af58 <__pow5mult+0xac>)
 800aee2:	481e      	ldr	r0, [pc, #120]	@ (800af5c <__pow5mult+0xb0>)
 800aee4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aee8:	f001 fd26 	bl	800c938 <__assert_func>
 800aeec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aef0:	6004      	str	r4, [r0, #0]
 800aef2:	60c4      	str	r4, [r0, #12]
 800aef4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aef8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aefc:	b94c      	cbnz	r4, 800af12 <__pow5mult+0x66>
 800aefe:	f240 2171 	movw	r1, #625	@ 0x271
 800af02:	4638      	mov	r0, r7
 800af04:	f7ff ff12 	bl	800ad2c <__i2b>
 800af08:	2300      	movs	r3, #0
 800af0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800af0e:	4604      	mov	r4, r0
 800af10:	6003      	str	r3, [r0, #0]
 800af12:	f04f 0900 	mov.w	r9, #0
 800af16:	07eb      	lsls	r3, r5, #31
 800af18:	d50a      	bpl.n	800af30 <__pow5mult+0x84>
 800af1a:	4631      	mov	r1, r6
 800af1c:	4622      	mov	r2, r4
 800af1e:	4638      	mov	r0, r7
 800af20:	f7ff ff1a 	bl	800ad58 <__multiply>
 800af24:	4631      	mov	r1, r6
 800af26:	4680      	mov	r8, r0
 800af28:	4638      	mov	r0, r7
 800af2a:	f7ff fe01 	bl	800ab30 <_Bfree>
 800af2e:	4646      	mov	r6, r8
 800af30:	106d      	asrs	r5, r5, #1
 800af32:	d00b      	beq.n	800af4c <__pow5mult+0xa0>
 800af34:	6820      	ldr	r0, [r4, #0]
 800af36:	b938      	cbnz	r0, 800af48 <__pow5mult+0x9c>
 800af38:	4622      	mov	r2, r4
 800af3a:	4621      	mov	r1, r4
 800af3c:	4638      	mov	r0, r7
 800af3e:	f7ff ff0b 	bl	800ad58 <__multiply>
 800af42:	6020      	str	r0, [r4, #0]
 800af44:	f8c0 9000 	str.w	r9, [r0]
 800af48:	4604      	mov	r4, r0
 800af4a:	e7e4      	b.n	800af16 <__pow5mult+0x6a>
 800af4c:	4630      	mov	r0, r6
 800af4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af52:	bf00      	nop
 800af54:	0800d40c 	.word	0x0800d40c
 800af58:	0800d332 	.word	0x0800d332
 800af5c:	0800d3b2 	.word	0x0800d3b2

0800af60 <__lshift>:
 800af60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af64:	460c      	mov	r4, r1
 800af66:	6849      	ldr	r1, [r1, #4]
 800af68:	6923      	ldr	r3, [r4, #16]
 800af6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af6e:	68a3      	ldr	r3, [r4, #8]
 800af70:	4607      	mov	r7, r0
 800af72:	4691      	mov	r9, r2
 800af74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af78:	f108 0601 	add.w	r6, r8, #1
 800af7c:	42b3      	cmp	r3, r6
 800af7e:	db0b      	blt.n	800af98 <__lshift+0x38>
 800af80:	4638      	mov	r0, r7
 800af82:	f7ff fd95 	bl	800aab0 <_Balloc>
 800af86:	4605      	mov	r5, r0
 800af88:	b948      	cbnz	r0, 800af9e <__lshift+0x3e>
 800af8a:	4602      	mov	r2, r0
 800af8c:	4b28      	ldr	r3, [pc, #160]	@ (800b030 <__lshift+0xd0>)
 800af8e:	4829      	ldr	r0, [pc, #164]	@ (800b034 <__lshift+0xd4>)
 800af90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800af94:	f001 fcd0 	bl	800c938 <__assert_func>
 800af98:	3101      	adds	r1, #1
 800af9a:	005b      	lsls	r3, r3, #1
 800af9c:	e7ee      	b.n	800af7c <__lshift+0x1c>
 800af9e:	2300      	movs	r3, #0
 800afa0:	f100 0114 	add.w	r1, r0, #20
 800afa4:	f100 0210 	add.w	r2, r0, #16
 800afa8:	4618      	mov	r0, r3
 800afaa:	4553      	cmp	r3, sl
 800afac:	db33      	blt.n	800b016 <__lshift+0xb6>
 800afae:	6920      	ldr	r0, [r4, #16]
 800afb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afb4:	f104 0314 	add.w	r3, r4, #20
 800afb8:	f019 091f 	ands.w	r9, r9, #31
 800afbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800afc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800afc4:	d02b      	beq.n	800b01e <__lshift+0xbe>
 800afc6:	f1c9 0e20 	rsb	lr, r9, #32
 800afca:	468a      	mov	sl, r1
 800afcc:	2200      	movs	r2, #0
 800afce:	6818      	ldr	r0, [r3, #0]
 800afd0:	fa00 f009 	lsl.w	r0, r0, r9
 800afd4:	4310      	orrs	r0, r2
 800afd6:	f84a 0b04 	str.w	r0, [sl], #4
 800afda:	f853 2b04 	ldr.w	r2, [r3], #4
 800afde:	459c      	cmp	ip, r3
 800afe0:	fa22 f20e 	lsr.w	r2, r2, lr
 800afe4:	d8f3      	bhi.n	800afce <__lshift+0x6e>
 800afe6:	ebac 0304 	sub.w	r3, ip, r4
 800afea:	3b15      	subs	r3, #21
 800afec:	f023 0303 	bic.w	r3, r3, #3
 800aff0:	3304      	adds	r3, #4
 800aff2:	f104 0015 	add.w	r0, r4, #21
 800aff6:	4584      	cmp	ip, r0
 800aff8:	bf38      	it	cc
 800affa:	2304      	movcc	r3, #4
 800affc:	50ca      	str	r2, [r1, r3]
 800affe:	b10a      	cbz	r2, 800b004 <__lshift+0xa4>
 800b000:	f108 0602 	add.w	r6, r8, #2
 800b004:	3e01      	subs	r6, #1
 800b006:	4638      	mov	r0, r7
 800b008:	612e      	str	r6, [r5, #16]
 800b00a:	4621      	mov	r1, r4
 800b00c:	f7ff fd90 	bl	800ab30 <_Bfree>
 800b010:	4628      	mov	r0, r5
 800b012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b016:	f842 0f04 	str.w	r0, [r2, #4]!
 800b01a:	3301      	adds	r3, #1
 800b01c:	e7c5      	b.n	800afaa <__lshift+0x4a>
 800b01e:	3904      	subs	r1, #4
 800b020:	f853 2b04 	ldr.w	r2, [r3], #4
 800b024:	f841 2f04 	str.w	r2, [r1, #4]!
 800b028:	459c      	cmp	ip, r3
 800b02a:	d8f9      	bhi.n	800b020 <__lshift+0xc0>
 800b02c:	e7ea      	b.n	800b004 <__lshift+0xa4>
 800b02e:	bf00      	nop
 800b030:	0800d3a1 	.word	0x0800d3a1
 800b034:	0800d3b2 	.word	0x0800d3b2

0800b038 <__mcmp>:
 800b038:	690a      	ldr	r2, [r1, #16]
 800b03a:	4603      	mov	r3, r0
 800b03c:	6900      	ldr	r0, [r0, #16]
 800b03e:	1a80      	subs	r0, r0, r2
 800b040:	b530      	push	{r4, r5, lr}
 800b042:	d10e      	bne.n	800b062 <__mcmp+0x2a>
 800b044:	3314      	adds	r3, #20
 800b046:	3114      	adds	r1, #20
 800b048:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b04c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b050:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b054:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b058:	4295      	cmp	r5, r2
 800b05a:	d003      	beq.n	800b064 <__mcmp+0x2c>
 800b05c:	d205      	bcs.n	800b06a <__mcmp+0x32>
 800b05e:	f04f 30ff 	mov.w	r0, #4294967295
 800b062:	bd30      	pop	{r4, r5, pc}
 800b064:	42a3      	cmp	r3, r4
 800b066:	d3f3      	bcc.n	800b050 <__mcmp+0x18>
 800b068:	e7fb      	b.n	800b062 <__mcmp+0x2a>
 800b06a:	2001      	movs	r0, #1
 800b06c:	e7f9      	b.n	800b062 <__mcmp+0x2a>
	...

0800b070 <__mdiff>:
 800b070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b074:	4689      	mov	r9, r1
 800b076:	4606      	mov	r6, r0
 800b078:	4611      	mov	r1, r2
 800b07a:	4648      	mov	r0, r9
 800b07c:	4614      	mov	r4, r2
 800b07e:	f7ff ffdb 	bl	800b038 <__mcmp>
 800b082:	1e05      	subs	r5, r0, #0
 800b084:	d112      	bne.n	800b0ac <__mdiff+0x3c>
 800b086:	4629      	mov	r1, r5
 800b088:	4630      	mov	r0, r6
 800b08a:	f7ff fd11 	bl	800aab0 <_Balloc>
 800b08e:	4602      	mov	r2, r0
 800b090:	b928      	cbnz	r0, 800b09e <__mdiff+0x2e>
 800b092:	4b3f      	ldr	r3, [pc, #252]	@ (800b190 <__mdiff+0x120>)
 800b094:	f240 2137 	movw	r1, #567	@ 0x237
 800b098:	483e      	ldr	r0, [pc, #248]	@ (800b194 <__mdiff+0x124>)
 800b09a:	f001 fc4d 	bl	800c938 <__assert_func>
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b0a4:	4610      	mov	r0, r2
 800b0a6:	b003      	add	sp, #12
 800b0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ac:	bfbc      	itt	lt
 800b0ae:	464b      	movlt	r3, r9
 800b0b0:	46a1      	movlt	r9, r4
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b0b8:	bfba      	itte	lt
 800b0ba:	461c      	movlt	r4, r3
 800b0bc:	2501      	movlt	r5, #1
 800b0be:	2500      	movge	r5, #0
 800b0c0:	f7ff fcf6 	bl	800aab0 <_Balloc>
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	b918      	cbnz	r0, 800b0d0 <__mdiff+0x60>
 800b0c8:	4b31      	ldr	r3, [pc, #196]	@ (800b190 <__mdiff+0x120>)
 800b0ca:	f240 2145 	movw	r1, #581	@ 0x245
 800b0ce:	e7e3      	b.n	800b098 <__mdiff+0x28>
 800b0d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b0d4:	6926      	ldr	r6, [r4, #16]
 800b0d6:	60c5      	str	r5, [r0, #12]
 800b0d8:	f109 0310 	add.w	r3, r9, #16
 800b0dc:	f109 0514 	add.w	r5, r9, #20
 800b0e0:	f104 0e14 	add.w	lr, r4, #20
 800b0e4:	f100 0b14 	add.w	fp, r0, #20
 800b0e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b0ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b0f0:	9301      	str	r3, [sp, #4]
 800b0f2:	46d9      	mov	r9, fp
 800b0f4:	f04f 0c00 	mov.w	ip, #0
 800b0f8:	9b01      	ldr	r3, [sp, #4]
 800b0fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b0fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b102:	9301      	str	r3, [sp, #4]
 800b104:	fa1f f38a 	uxth.w	r3, sl
 800b108:	4619      	mov	r1, r3
 800b10a:	b283      	uxth	r3, r0
 800b10c:	1acb      	subs	r3, r1, r3
 800b10e:	0c00      	lsrs	r0, r0, #16
 800b110:	4463      	add	r3, ip
 800b112:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b116:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b11a:	b29b      	uxth	r3, r3
 800b11c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b120:	4576      	cmp	r6, lr
 800b122:	f849 3b04 	str.w	r3, [r9], #4
 800b126:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b12a:	d8e5      	bhi.n	800b0f8 <__mdiff+0x88>
 800b12c:	1b33      	subs	r3, r6, r4
 800b12e:	3b15      	subs	r3, #21
 800b130:	f023 0303 	bic.w	r3, r3, #3
 800b134:	3415      	adds	r4, #21
 800b136:	3304      	adds	r3, #4
 800b138:	42a6      	cmp	r6, r4
 800b13a:	bf38      	it	cc
 800b13c:	2304      	movcc	r3, #4
 800b13e:	441d      	add	r5, r3
 800b140:	445b      	add	r3, fp
 800b142:	461e      	mov	r6, r3
 800b144:	462c      	mov	r4, r5
 800b146:	4544      	cmp	r4, r8
 800b148:	d30e      	bcc.n	800b168 <__mdiff+0xf8>
 800b14a:	f108 0103 	add.w	r1, r8, #3
 800b14e:	1b49      	subs	r1, r1, r5
 800b150:	f021 0103 	bic.w	r1, r1, #3
 800b154:	3d03      	subs	r5, #3
 800b156:	45a8      	cmp	r8, r5
 800b158:	bf38      	it	cc
 800b15a:	2100      	movcc	r1, #0
 800b15c:	440b      	add	r3, r1
 800b15e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b162:	b191      	cbz	r1, 800b18a <__mdiff+0x11a>
 800b164:	6117      	str	r7, [r2, #16]
 800b166:	e79d      	b.n	800b0a4 <__mdiff+0x34>
 800b168:	f854 1b04 	ldr.w	r1, [r4], #4
 800b16c:	46e6      	mov	lr, ip
 800b16e:	0c08      	lsrs	r0, r1, #16
 800b170:	fa1c fc81 	uxtah	ip, ip, r1
 800b174:	4471      	add	r1, lr
 800b176:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b17a:	b289      	uxth	r1, r1
 800b17c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b180:	f846 1b04 	str.w	r1, [r6], #4
 800b184:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b188:	e7dd      	b.n	800b146 <__mdiff+0xd6>
 800b18a:	3f01      	subs	r7, #1
 800b18c:	e7e7      	b.n	800b15e <__mdiff+0xee>
 800b18e:	bf00      	nop
 800b190:	0800d3a1 	.word	0x0800d3a1
 800b194:	0800d3b2 	.word	0x0800d3b2

0800b198 <__ulp>:
 800b198:	b082      	sub	sp, #8
 800b19a:	ed8d 0b00 	vstr	d0, [sp]
 800b19e:	9a01      	ldr	r2, [sp, #4]
 800b1a0:	4b0f      	ldr	r3, [pc, #60]	@ (800b1e0 <__ulp+0x48>)
 800b1a2:	4013      	ands	r3, r2
 800b1a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	dc08      	bgt.n	800b1be <__ulp+0x26>
 800b1ac:	425b      	negs	r3, r3
 800b1ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b1b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b1b6:	da04      	bge.n	800b1c2 <__ulp+0x2a>
 800b1b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b1bc:	4113      	asrs	r3, r2
 800b1be:	2200      	movs	r2, #0
 800b1c0:	e008      	b.n	800b1d4 <__ulp+0x3c>
 800b1c2:	f1a2 0314 	sub.w	r3, r2, #20
 800b1c6:	2b1e      	cmp	r3, #30
 800b1c8:	bfda      	itte	le
 800b1ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b1ce:	40da      	lsrle	r2, r3
 800b1d0:	2201      	movgt	r2, #1
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	4610      	mov	r0, r2
 800b1d8:	ec41 0b10 	vmov	d0, r0, r1
 800b1dc:	b002      	add	sp, #8
 800b1de:	4770      	bx	lr
 800b1e0:	7ff00000 	.word	0x7ff00000

0800b1e4 <__b2d>:
 800b1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1e8:	6906      	ldr	r6, [r0, #16]
 800b1ea:	f100 0814 	add.w	r8, r0, #20
 800b1ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b1f2:	1f37      	subs	r7, r6, #4
 800b1f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b1f8:	4610      	mov	r0, r2
 800b1fa:	f7ff fd4b 	bl	800ac94 <__hi0bits>
 800b1fe:	f1c0 0320 	rsb	r3, r0, #32
 800b202:	280a      	cmp	r0, #10
 800b204:	600b      	str	r3, [r1, #0]
 800b206:	491b      	ldr	r1, [pc, #108]	@ (800b274 <__b2d+0x90>)
 800b208:	dc15      	bgt.n	800b236 <__b2d+0x52>
 800b20a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b20e:	fa22 f30c 	lsr.w	r3, r2, ip
 800b212:	45b8      	cmp	r8, r7
 800b214:	ea43 0501 	orr.w	r5, r3, r1
 800b218:	bf34      	ite	cc
 800b21a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b21e:	2300      	movcs	r3, #0
 800b220:	3015      	adds	r0, #21
 800b222:	fa02 f000 	lsl.w	r0, r2, r0
 800b226:	fa23 f30c 	lsr.w	r3, r3, ip
 800b22a:	4303      	orrs	r3, r0
 800b22c:	461c      	mov	r4, r3
 800b22e:	ec45 4b10 	vmov	d0, r4, r5
 800b232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b236:	45b8      	cmp	r8, r7
 800b238:	bf3a      	itte	cc
 800b23a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b23e:	f1a6 0708 	subcc.w	r7, r6, #8
 800b242:	2300      	movcs	r3, #0
 800b244:	380b      	subs	r0, #11
 800b246:	d012      	beq.n	800b26e <__b2d+0x8a>
 800b248:	f1c0 0120 	rsb	r1, r0, #32
 800b24c:	fa23 f401 	lsr.w	r4, r3, r1
 800b250:	4082      	lsls	r2, r0
 800b252:	4322      	orrs	r2, r4
 800b254:	4547      	cmp	r7, r8
 800b256:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b25a:	bf8c      	ite	hi
 800b25c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b260:	2200      	movls	r2, #0
 800b262:	4083      	lsls	r3, r0
 800b264:	40ca      	lsrs	r2, r1
 800b266:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b26a:	4313      	orrs	r3, r2
 800b26c:	e7de      	b.n	800b22c <__b2d+0x48>
 800b26e:	ea42 0501 	orr.w	r5, r2, r1
 800b272:	e7db      	b.n	800b22c <__b2d+0x48>
 800b274:	3ff00000 	.word	0x3ff00000

0800b278 <__d2b>:
 800b278:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b27c:	460f      	mov	r7, r1
 800b27e:	2101      	movs	r1, #1
 800b280:	ec59 8b10 	vmov	r8, r9, d0
 800b284:	4616      	mov	r6, r2
 800b286:	f7ff fc13 	bl	800aab0 <_Balloc>
 800b28a:	4604      	mov	r4, r0
 800b28c:	b930      	cbnz	r0, 800b29c <__d2b+0x24>
 800b28e:	4602      	mov	r2, r0
 800b290:	4b23      	ldr	r3, [pc, #140]	@ (800b320 <__d2b+0xa8>)
 800b292:	4824      	ldr	r0, [pc, #144]	@ (800b324 <__d2b+0xac>)
 800b294:	f240 310f 	movw	r1, #783	@ 0x30f
 800b298:	f001 fb4e 	bl	800c938 <__assert_func>
 800b29c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b2a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2a4:	b10d      	cbz	r5, 800b2aa <__d2b+0x32>
 800b2a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b2aa:	9301      	str	r3, [sp, #4]
 800b2ac:	f1b8 0300 	subs.w	r3, r8, #0
 800b2b0:	d023      	beq.n	800b2fa <__d2b+0x82>
 800b2b2:	4668      	mov	r0, sp
 800b2b4:	9300      	str	r3, [sp, #0]
 800b2b6:	f7ff fd0c 	bl	800acd2 <__lo0bits>
 800b2ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b2be:	b1d0      	cbz	r0, 800b2f6 <__d2b+0x7e>
 800b2c0:	f1c0 0320 	rsb	r3, r0, #32
 800b2c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b2c8:	430b      	orrs	r3, r1
 800b2ca:	40c2      	lsrs	r2, r0
 800b2cc:	6163      	str	r3, [r4, #20]
 800b2ce:	9201      	str	r2, [sp, #4]
 800b2d0:	9b01      	ldr	r3, [sp, #4]
 800b2d2:	61a3      	str	r3, [r4, #24]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	bf0c      	ite	eq
 800b2d8:	2201      	moveq	r2, #1
 800b2da:	2202      	movne	r2, #2
 800b2dc:	6122      	str	r2, [r4, #16]
 800b2de:	b1a5      	cbz	r5, 800b30a <__d2b+0x92>
 800b2e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b2e4:	4405      	add	r5, r0
 800b2e6:	603d      	str	r5, [r7, #0]
 800b2e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b2ec:	6030      	str	r0, [r6, #0]
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	b003      	add	sp, #12
 800b2f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2f6:	6161      	str	r1, [r4, #20]
 800b2f8:	e7ea      	b.n	800b2d0 <__d2b+0x58>
 800b2fa:	a801      	add	r0, sp, #4
 800b2fc:	f7ff fce9 	bl	800acd2 <__lo0bits>
 800b300:	9b01      	ldr	r3, [sp, #4]
 800b302:	6163      	str	r3, [r4, #20]
 800b304:	3020      	adds	r0, #32
 800b306:	2201      	movs	r2, #1
 800b308:	e7e8      	b.n	800b2dc <__d2b+0x64>
 800b30a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b30e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b312:	6038      	str	r0, [r7, #0]
 800b314:	6918      	ldr	r0, [r3, #16]
 800b316:	f7ff fcbd 	bl	800ac94 <__hi0bits>
 800b31a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b31e:	e7e5      	b.n	800b2ec <__d2b+0x74>
 800b320:	0800d3a1 	.word	0x0800d3a1
 800b324:	0800d3b2 	.word	0x0800d3b2

0800b328 <__ratio>:
 800b328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32c:	b085      	sub	sp, #20
 800b32e:	e9cd 1000 	strd	r1, r0, [sp]
 800b332:	a902      	add	r1, sp, #8
 800b334:	f7ff ff56 	bl	800b1e4 <__b2d>
 800b338:	9800      	ldr	r0, [sp, #0]
 800b33a:	a903      	add	r1, sp, #12
 800b33c:	ec55 4b10 	vmov	r4, r5, d0
 800b340:	f7ff ff50 	bl	800b1e4 <__b2d>
 800b344:	9b01      	ldr	r3, [sp, #4]
 800b346:	6919      	ldr	r1, [r3, #16]
 800b348:	9b00      	ldr	r3, [sp, #0]
 800b34a:	691b      	ldr	r3, [r3, #16]
 800b34c:	1ac9      	subs	r1, r1, r3
 800b34e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b352:	1a9b      	subs	r3, r3, r2
 800b354:	ec5b ab10 	vmov	sl, fp, d0
 800b358:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	bfce      	itee	gt
 800b360:	462a      	movgt	r2, r5
 800b362:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b366:	465a      	movle	r2, fp
 800b368:	462f      	mov	r7, r5
 800b36a:	46d9      	mov	r9, fp
 800b36c:	bfcc      	ite	gt
 800b36e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b372:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b376:	464b      	mov	r3, r9
 800b378:	4652      	mov	r2, sl
 800b37a:	4620      	mov	r0, r4
 800b37c:	4639      	mov	r1, r7
 800b37e:	f7f5 fa8d 	bl	800089c <__aeabi_ddiv>
 800b382:	ec41 0b10 	vmov	d0, r0, r1
 800b386:	b005      	add	sp, #20
 800b388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b38c <__copybits>:
 800b38c:	3901      	subs	r1, #1
 800b38e:	b570      	push	{r4, r5, r6, lr}
 800b390:	1149      	asrs	r1, r1, #5
 800b392:	6914      	ldr	r4, [r2, #16]
 800b394:	3101      	adds	r1, #1
 800b396:	f102 0314 	add.w	r3, r2, #20
 800b39a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b39e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b3a2:	1f05      	subs	r5, r0, #4
 800b3a4:	42a3      	cmp	r3, r4
 800b3a6:	d30c      	bcc.n	800b3c2 <__copybits+0x36>
 800b3a8:	1aa3      	subs	r3, r4, r2
 800b3aa:	3b11      	subs	r3, #17
 800b3ac:	f023 0303 	bic.w	r3, r3, #3
 800b3b0:	3211      	adds	r2, #17
 800b3b2:	42a2      	cmp	r2, r4
 800b3b4:	bf88      	it	hi
 800b3b6:	2300      	movhi	r3, #0
 800b3b8:	4418      	add	r0, r3
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	4288      	cmp	r0, r1
 800b3be:	d305      	bcc.n	800b3cc <__copybits+0x40>
 800b3c0:	bd70      	pop	{r4, r5, r6, pc}
 800b3c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800b3c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800b3ca:	e7eb      	b.n	800b3a4 <__copybits+0x18>
 800b3cc:	f840 3b04 	str.w	r3, [r0], #4
 800b3d0:	e7f4      	b.n	800b3bc <__copybits+0x30>

0800b3d2 <__any_on>:
 800b3d2:	f100 0214 	add.w	r2, r0, #20
 800b3d6:	6900      	ldr	r0, [r0, #16]
 800b3d8:	114b      	asrs	r3, r1, #5
 800b3da:	4298      	cmp	r0, r3
 800b3dc:	b510      	push	{r4, lr}
 800b3de:	db11      	blt.n	800b404 <__any_on+0x32>
 800b3e0:	dd0a      	ble.n	800b3f8 <__any_on+0x26>
 800b3e2:	f011 011f 	ands.w	r1, r1, #31
 800b3e6:	d007      	beq.n	800b3f8 <__any_on+0x26>
 800b3e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b3ec:	fa24 f001 	lsr.w	r0, r4, r1
 800b3f0:	fa00 f101 	lsl.w	r1, r0, r1
 800b3f4:	428c      	cmp	r4, r1
 800b3f6:	d10b      	bne.n	800b410 <__any_on+0x3e>
 800b3f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d803      	bhi.n	800b408 <__any_on+0x36>
 800b400:	2000      	movs	r0, #0
 800b402:	bd10      	pop	{r4, pc}
 800b404:	4603      	mov	r3, r0
 800b406:	e7f7      	b.n	800b3f8 <__any_on+0x26>
 800b408:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b40c:	2900      	cmp	r1, #0
 800b40e:	d0f5      	beq.n	800b3fc <__any_on+0x2a>
 800b410:	2001      	movs	r0, #1
 800b412:	e7f6      	b.n	800b402 <__any_on+0x30>

0800b414 <sulp>:
 800b414:	b570      	push	{r4, r5, r6, lr}
 800b416:	4604      	mov	r4, r0
 800b418:	460d      	mov	r5, r1
 800b41a:	ec45 4b10 	vmov	d0, r4, r5
 800b41e:	4616      	mov	r6, r2
 800b420:	f7ff feba 	bl	800b198 <__ulp>
 800b424:	ec51 0b10 	vmov	r0, r1, d0
 800b428:	b17e      	cbz	r6, 800b44a <sulp+0x36>
 800b42a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b42e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b432:	2b00      	cmp	r3, #0
 800b434:	dd09      	ble.n	800b44a <sulp+0x36>
 800b436:	051b      	lsls	r3, r3, #20
 800b438:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b43c:	2400      	movs	r4, #0
 800b43e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b442:	4622      	mov	r2, r4
 800b444:	462b      	mov	r3, r5
 800b446:	f7f5 f8ff 	bl	8000648 <__aeabi_dmul>
 800b44a:	ec41 0b10 	vmov	d0, r0, r1
 800b44e:	bd70      	pop	{r4, r5, r6, pc}

0800b450 <_strtod_l>:
 800b450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b454:	b09f      	sub	sp, #124	@ 0x7c
 800b456:	460c      	mov	r4, r1
 800b458:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b45a:	2200      	movs	r2, #0
 800b45c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b45e:	9005      	str	r0, [sp, #20]
 800b460:	f04f 0a00 	mov.w	sl, #0
 800b464:	f04f 0b00 	mov.w	fp, #0
 800b468:	460a      	mov	r2, r1
 800b46a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b46c:	7811      	ldrb	r1, [r2, #0]
 800b46e:	292b      	cmp	r1, #43	@ 0x2b
 800b470:	d04a      	beq.n	800b508 <_strtod_l+0xb8>
 800b472:	d838      	bhi.n	800b4e6 <_strtod_l+0x96>
 800b474:	290d      	cmp	r1, #13
 800b476:	d832      	bhi.n	800b4de <_strtod_l+0x8e>
 800b478:	2908      	cmp	r1, #8
 800b47a:	d832      	bhi.n	800b4e2 <_strtod_l+0x92>
 800b47c:	2900      	cmp	r1, #0
 800b47e:	d03b      	beq.n	800b4f8 <_strtod_l+0xa8>
 800b480:	2200      	movs	r2, #0
 800b482:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b484:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b486:	782a      	ldrb	r2, [r5, #0]
 800b488:	2a30      	cmp	r2, #48	@ 0x30
 800b48a:	f040 80b3 	bne.w	800b5f4 <_strtod_l+0x1a4>
 800b48e:	786a      	ldrb	r2, [r5, #1]
 800b490:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b494:	2a58      	cmp	r2, #88	@ 0x58
 800b496:	d16e      	bne.n	800b576 <_strtod_l+0x126>
 800b498:	9302      	str	r3, [sp, #8]
 800b49a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b49c:	9301      	str	r3, [sp, #4]
 800b49e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b4a0:	9300      	str	r3, [sp, #0]
 800b4a2:	4a8e      	ldr	r2, [pc, #568]	@ (800b6dc <_strtod_l+0x28c>)
 800b4a4:	9805      	ldr	r0, [sp, #20]
 800b4a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b4a8:	a919      	add	r1, sp, #100	@ 0x64
 800b4aa:	f001 fadf 	bl	800ca6c <__gethex>
 800b4ae:	f010 060f 	ands.w	r6, r0, #15
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	d005      	beq.n	800b4c2 <_strtod_l+0x72>
 800b4b6:	2e06      	cmp	r6, #6
 800b4b8:	d128      	bne.n	800b50c <_strtod_l+0xbc>
 800b4ba:	3501      	adds	r5, #1
 800b4bc:	2300      	movs	r3, #0
 800b4be:	9519      	str	r5, [sp, #100]	@ 0x64
 800b4c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f040 858e 	bne.w	800bfe6 <_strtod_l+0xb96>
 800b4ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4cc:	b1cb      	cbz	r3, 800b502 <_strtod_l+0xb2>
 800b4ce:	4652      	mov	r2, sl
 800b4d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b4d4:	ec43 2b10 	vmov	d0, r2, r3
 800b4d8:	b01f      	add	sp, #124	@ 0x7c
 800b4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4de:	2920      	cmp	r1, #32
 800b4e0:	d1ce      	bne.n	800b480 <_strtod_l+0x30>
 800b4e2:	3201      	adds	r2, #1
 800b4e4:	e7c1      	b.n	800b46a <_strtod_l+0x1a>
 800b4e6:	292d      	cmp	r1, #45	@ 0x2d
 800b4e8:	d1ca      	bne.n	800b480 <_strtod_l+0x30>
 800b4ea:	2101      	movs	r1, #1
 800b4ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b4ee:	1c51      	adds	r1, r2, #1
 800b4f0:	9119      	str	r1, [sp, #100]	@ 0x64
 800b4f2:	7852      	ldrb	r2, [r2, #1]
 800b4f4:	2a00      	cmp	r2, #0
 800b4f6:	d1c5      	bne.n	800b484 <_strtod_l+0x34>
 800b4f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b4fa:	9419      	str	r4, [sp, #100]	@ 0x64
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	f040 8570 	bne.w	800bfe2 <_strtod_l+0xb92>
 800b502:	4652      	mov	r2, sl
 800b504:	465b      	mov	r3, fp
 800b506:	e7e5      	b.n	800b4d4 <_strtod_l+0x84>
 800b508:	2100      	movs	r1, #0
 800b50a:	e7ef      	b.n	800b4ec <_strtod_l+0x9c>
 800b50c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b50e:	b13a      	cbz	r2, 800b520 <_strtod_l+0xd0>
 800b510:	2135      	movs	r1, #53	@ 0x35
 800b512:	a81c      	add	r0, sp, #112	@ 0x70
 800b514:	f7ff ff3a 	bl	800b38c <__copybits>
 800b518:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b51a:	9805      	ldr	r0, [sp, #20]
 800b51c:	f7ff fb08 	bl	800ab30 <_Bfree>
 800b520:	3e01      	subs	r6, #1
 800b522:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b524:	2e04      	cmp	r6, #4
 800b526:	d806      	bhi.n	800b536 <_strtod_l+0xe6>
 800b528:	e8df f006 	tbb	[pc, r6]
 800b52c:	201d0314 	.word	0x201d0314
 800b530:	14          	.byte	0x14
 800b531:	00          	.byte	0x00
 800b532:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b536:	05e1      	lsls	r1, r4, #23
 800b538:	bf48      	it	mi
 800b53a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b53e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b542:	0d1b      	lsrs	r3, r3, #20
 800b544:	051b      	lsls	r3, r3, #20
 800b546:	2b00      	cmp	r3, #0
 800b548:	d1bb      	bne.n	800b4c2 <_strtod_l+0x72>
 800b54a:	f7fe fb21 	bl	8009b90 <__errno>
 800b54e:	2322      	movs	r3, #34	@ 0x22
 800b550:	6003      	str	r3, [r0, #0]
 800b552:	e7b6      	b.n	800b4c2 <_strtod_l+0x72>
 800b554:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b558:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b55c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b560:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b564:	e7e7      	b.n	800b536 <_strtod_l+0xe6>
 800b566:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b6e4 <_strtod_l+0x294>
 800b56a:	e7e4      	b.n	800b536 <_strtod_l+0xe6>
 800b56c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b570:	f04f 3aff 	mov.w	sl, #4294967295
 800b574:	e7df      	b.n	800b536 <_strtod_l+0xe6>
 800b576:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b578:	1c5a      	adds	r2, r3, #1
 800b57a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b57c:	785b      	ldrb	r3, [r3, #1]
 800b57e:	2b30      	cmp	r3, #48	@ 0x30
 800b580:	d0f9      	beq.n	800b576 <_strtod_l+0x126>
 800b582:	2b00      	cmp	r3, #0
 800b584:	d09d      	beq.n	800b4c2 <_strtod_l+0x72>
 800b586:	2301      	movs	r3, #1
 800b588:	9309      	str	r3, [sp, #36]	@ 0x24
 800b58a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b58c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b58e:	2300      	movs	r3, #0
 800b590:	9308      	str	r3, [sp, #32]
 800b592:	930a      	str	r3, [sp, #40]	@ 0x28
 800b594:	461f      	mov	r7, r3
 800b596:	220a      	movs	r2, #10
 800b598:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b59a:	7805      	ldrb	r5, [r0, #0]
 800b59c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b5a0:	b2d9      	uxtb	r1, r3
 800b5a2:	2909      	cmp	r1, #9
 800b5a4:	d928      	bls.n	800b5f8 <_strtod_l+0x1a8>
 800b5a6:	494e      	ldr	r1, [pc, #312]	@ (800b6e0 <_strtod_l+0x290>)
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	f001 f979 	bl	800c8a0 <strncmp>
 800b5ae:	2800      	cmp	r0, #0
 800b5b0:	d032      	beq.n	800b618 <_strtod_l+0x1c8>
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	462a      	mov	r2, r5
 800b5b6:	4681      	mov	r9, r0
 800b5b8:	463d      	mov	r5, r7
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2a65      	cmp	r2, #101	@ 0x65
 800b5be:	d001      	beq.n	800b5c4 <_strtod_l+0x174>
 800b5c0:	2a45      	cmp	r2, #69	@ 0x45
 800b5c2:	d114      	bne.n	800b5ee <_strtod_l+0x19e>
 800b5c4:	b91d      	cbnz	r5, 800b5ce <_strtod_l+0x17e>
 800b5c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5c8:	4302      	orrs	r2, r0
 800b5ca:	d095      	beq.n	800b4f8 <_strtod_l+0xa8>
 800b5cc:	2500      	movs	r5, #0
 800b5ce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b5d0:	1c62      	adds	r2, r4, #1
 800b5d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5d4:	7862      	ldrb	r2, [r4, #1]
 800b5d6:	2a2b      	cmp	r2, #43	@ 0x2b
 800b5d8:	d077      	beq.n	800b6ca <_strtod_l+0x27a>
 800b5da:	2a2d      	cmp	r2, #45	@ 0x2d
 800b5dc:	d07b      	beq.n	800b6d6 <_strtod_l+0x286>
 800b5de:	f04f 0c00 	mov.w	ip, #0
 800b5e2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b5e6:	2909      	cmp	r1, #9
 800b5e8:	f240 8082 	bls.w	800b6f0 <_strtod_l+0x2a0>
 800b5ec:	9419      	str	r4, [sp, #100]	@ 0x64
 800b5ee:	f04f 0800 	mov.w	r8, #0
 800b5f2:	e0a2      	b.n	800b73a <_strtod_l+0x2ea>
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	e7c7      	b.n	800b588 <_strtod_l+0x138>
 800b5f8:	2f08      	cmp	r7, #8
 800b5fa:	bfd5      	itete	le
 800b5fc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b5fe:	9908      	ldrgt	r1, [sp, #32]
 800b600:	fb02 3301 	mlale	r3, r2, r1, r3
 800b604:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b608:	f100 0001 	add.w	r0, r0, #1
 800b60c:	bfd4      	ite	le
 800b60e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b610:	9308      	strgt	r3, [sp, #32]
 800b612:	3701      	adds	r7, #1
 800b614:	9019      	str	r0, [sp, #100]	@ 0x64
 800b616:	e7bf      	b.n	800b598 <_strtod_l+0x148>
 800b618:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b61a:	1c5a      	adds	r2, r3, #1
 800b61c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b61e:	785a      	ldrb	r2, [r3, #1]
 800b620:	b37f      	cbz	r7, 800b682 <_strtod_l+0x232>
 800b622:	4681      	mov	r9, r0
 800b624:	463d      	mov	r5, r7
 800b626:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b62a:	2b09      	cmp	r3, #9
 800b62c:	d912      	bls.n	800b654 <_strtod_l+0x204>
 800b62e:	2301      	movs	r3, #1
 800b630:	e7c4      	b.n	800b5bc <_strtod_l+0x16c>
 800b632:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b634:	1c5a      	adds	r2, r3, #1
 800b636:	9219      	str	r2, [sp, #100]	@ 0x64
 800b638:	785a      	ldrb	r2, [r3, #1]
 800b63a:	3001      	adds	r0, #1
 800b63c:	2a30      	cmp	r2, #48	@ 0x30
 800b63e:	d0f8      	beq.n	800b632 <_strtod_l+0x1e2>
 800b640:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b644:	2b08      	cmp	r3, #8
 800b646:	f200 84d3 	bhi.w	800bff0 <_strtod_l+0xba0>
 800b64a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b64c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b64e:	4681      	mov	r9, r0
 800b650:	2000      	movs	r0, #0
 800b652:	4605      	mov	r5, r0
 800b654:	3a30      	subs	r2, #48	@ 0x30
 800b656:	f100 0301 	add.w	r3, r0, #1
 800b65a:	d02a      	beq.n	800b6b2 <_strtod_l+0x262>
 800b65c:	4499      	add	r9, r3
 800b65e:	eb00 0c05 	add.w	ip, r0, r5
 800b662:	462b      	mov	r3, r5
 800b664:	210a      	movs	r1, #10
 800b666:	4563      	cmp	r3, ip
 800b668:	d10d      	bne.n	800b686 <_strtod_l+0x236>
 800b66a:	1c69      	adds	r1, r5, #1
 800b66c:	4401      	add	r1, r0
 800b66e:	4428      	add	r0, r5
 800b670:	2808      	cmp	r0, #8
 800b672:	dc16      	bgt.n	800b6a2 <_strtod_l+0x252>
 800b674:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b676:	230a      	movs	r3, #10
 800b678:	fb03 2300 	mla	r3, r3, r0, r2
 800b67c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b67e:	2300      	movs	r3, #0
 800b680:	e018      	b.n	800b6b4 <_strtod_l+0x264>
 800b682:	4638      	mov	r0, r7
 800b684:	e7da      	b.n	800b63c <_strtod_l+0x1ec>
 800b686:	2b08      	cmp	r3, #8
 800b688:	f103 0301 	add.w	r3, r3, #1
 800b68c:	dc03      	bgt.n	800b696 <_strtod_l+0x246>
 800b68e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b690:	434e      	muls	r6, r1
 800b692:	960a      	str	r6, [sp, #40]	@ 0x28
 800b694:	e7e7      	b.n	800b666 <_strtod_l+0x216>
 800b696:	2b10      	cmp	r3, #16
 800b698:	bfde      	ittt	le
 800b69a:	9e08      	ldrle	r6, [sp, #32]
 800b69c:	434e      	mulle	r6, r1
 800b69e:	9608      	strle	r6, [sp, #32]
 800b6a0:	e7e1      	b.n	800b666 <_strtod_l+0x216>
 800b6a2:	280f      	cmp	r0, #15
 800b6a4:	dceb      	bgt.n	800b67e <_strtod_l+0x22e>
 800b6a6:	9808      	ldr	r0, [sp, #32]
 800b6a8:	230a      	movs	r3, #10
 800b6aa:	fb03 2300 	mla	r3, r3, r0, r2
 800b6ae:	9308      	str	r3, [sp, #32]
 800b6b0:	e7e5      	b.n	800b67e <_strtod_l+0x22e>
 800b6b2:	4629      	mov	r1, r5
 800b6b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b6b6:	1c50      	adds	r0, r2, #1
 800b6b8:	9019      	str	r0, [sp, #100]	@ 0x64
 800b6ba:	7852      	ldrb	r2, [r2, #1]
 800b6bc:	4618      	mov	r0, r3
 800b6be:	460d      	mov	r5, r1
 800b6c0:	e7b1      	b.n	800b626 <_strtod_l+0x1d6>
 800b6c2:	f04f 0900 	mov.w	r9, #0
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	e77d      	b.n	800b5c6 <_strtod_l+0x176>
 800b6ca:	f04f 0c00 	mov.w	ip, #0
 800b6ce:	1ca2      	adds	r2, r4, #2
 800b6d0:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6d2:	78a2      	ldrb	r2, [r4, #2]
 800b6d4:	e785      	b.n	800b5e2 <_strtod_l+0x192>
 800b6d6:	f04f 0c01 	mov.w	ip, #1
 800b6da:	e7f8      	b.n	800b6ce <_strtod_l+0x27e>
 800b6dc:	0800d520 	.word	0x0800d520
 800b6e0:	0800d508 	.word	0x0800d508
 800b6e4:	7ff00000 	.word	0x7ff00000
 800b6e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b6ea:	1c51      	adds	r1, r2, #1
 800b6ec:	9119      	str	r1, [sp, #100]	@ 0x64
 800b6ee:	7852      	ldrb	r2, [r2, #1]
 800b6f0:	2a30      	cmp	r2, #48	@ 0x30
 800b6f2:	d0f9      	beq.n	800b6e8 <_strtod_l+0x298>
 800b6f4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b6f8:	2908      	cmp	r1, #8
 800b6fa:	f63f af78 	bhi.w	800b5ee <_strtod_l+0x19e>
 800b6fe:	3a30      	subs	r2, #48	@ 0x30
 800b700:	920e      	str	r2, [sp, #56]	@ 0x38
 800b702:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b704:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b706:	f04f 080a 	mov.w	r8, #10
 800b70a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b70c:	1c56      	adds	r6, r2, #1
 800b70e:	9619      	str	r6, [sp, #100]	@ 0x64
 800b710:	7852      	ldrb	r2, [r2, #1]
 800b712:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b716:	f1be 0f09 	cmp.w	lr, #9
 800b71a:	d939      	bls.n	800b790 <_strtod_l+0x340>
 800b71c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b71e:	1a76      	subs	r6, r6, r1
 800b720:	2e08      	cmp	r6, #8
 800b722:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b726:	dc03      	bgt.n	800b730 <_strtod_l+0x2e0>
 800b728:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b72a:	4588      	cmp	r8, r1
 800b72c:	bfa8      	it	ge
 800b72e:	4688      	movge	r8, r1
 800b730:	f1bc 0f00 	cmp.w	ip, #0
 800b734:	d001      	beq.n	800b73a <_strtod_l+0x2ea>
 800b736:	f1c8 0800 	rsb	r8, r8, #0
 800b73a:	2d00      	cmp	r5, #0
 800b73c:	d14e      	bne.n	800b7dc <_strtod_l+0x38c>
 800b73e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b740:	4308      	orrs	r0, r1
 800b742:	f47f aebe 	bne.w	800b4c2 <_strtod_l+0x72>
 800b746:	2b00      	cmp	r3, #0
 800b748:	f47f aed6 	bne.w	800b4f8 <_strtod_l+0xa8>
 800b74c:	2a69      	cmp	r2, #105	@ 0x69
 800b74e:	d028      	beq.n	800b7a2 <_strtod_l+0x352>
 800b750:	dc25      	bgt.n	800b79e <_strtod_l+0x34e>
 800b752:	2a49      	cmp	r2, #73	@ 0x49
 800b754:	d025      	beq.n	800b7a2 <_strtod_l+0x352>
 800b756:	2a4e      	cmp	r2, #78	@ 0x4e
 800b758:	f47f aece 	bne.w	800b4f8 <_strtod_l+0xa8>
 800b75c:	499b      	ldr	r1, [pc, #620]	@ (800b9cc <_strtod_l+0x57c>)
 800b75e:	a819      	add	r0, sp, #100	@ 0x64
 800b760:	f001 fba6 	bl	800ceb0 <__match>
 800b764:	2800      	cmp	r0, #0
 800b766:	f43f aec7 	beq.w	800b4f8 <_strtod_l+0xa8>
 800b76a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	2b28      	cmp	r3, #40	@ 0x28
 800b770:	d12e      	bne.n	800b7d0 <_strtod_l+0x380>
 800b772:	4997      	ldr	r1, [pc, #604]	@ (800b9d0 <_strtod_l+0x580>)
 800b774:	aa1c      	add	r2, sp, #112	@ 0x70
 800b776:	a819      	add	r0, sp, #100	@ 0x64
 800b778:	f001 fbae 	bl	800ced8 <__hexnan>
 800b77c:	2805      	cmp	r0, #5
 800b77e:	d127      	bne.n	800b7d0 <_strtod_l+0x380>
 800b780:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b782:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b786:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b78a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b78e:	e698      	b.n	800b4c2 <_strtod_l+0x72>
 800b790:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b792:	fb08 2101 	mla	r1, r8, r1, r2
 800b796:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b79a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b79c:	e7b5      	b.n	800b70a <_strtod_l+0x2ba>
 800b79e:	2a6e      	cmp	r2, #110	@ 0x6e
 800b7a0:	e7da      	b.n	800b758 <_strtod_l+0x308>
 800b7a2:	498c      	ldr	r1, [pc, #560]	@ (800b9d4 <_strtod_l+0x584>)
 800b7a4:	a819      	add	r0, sp, #100	@ 0x64
 800b7a6:	f001 fb83 	bl	800ceb0 <__match>
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	f43f aea4 	beq.w	800b4f8 <_strtod_l+0xa8>
 800b7b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7b2:	4989      	ldr	r1, [pc, #548]	@ (800b9d8 <_strtod_l+0x588>)
 800b7b4:	3b01      	subs	r3, #1
 800b7b6:	a819      	add	r0, sp, #100	@ 0x64
 800b7b8:	9319      	str	r3, [sp, #100]	@ 0x64
 800b7ba:	f001 fb79 	bl	800ceb0 <__match>
 800b7be:	b910      	cbnz	r0, 800b7c6 <_strtod_l+0x376>
 800b7c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	9319      	str	r3, [sp, #100]	@ 0x64
 800b7c6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b9e8 <_strtod_l+0x598>
 800b7ca:	f04f 0a00 	mov.w	sl, #0
 800b7ce:	e678      	b.n	800b4c2 <_strtod_l+0x72>
 800b7d0:	4882      	ldr	r0, [pc, #520]	@ (800b9dc <_strtod_l+0x58c>)
 800b7d2:	f001 f8a9 	bl	800c928 <nan>
 800b7d6:	ec5b ab10 	vmov	sl, fp, d0
 800b7da:	e672      	b.n	800b4c2 <_strtod_l+0x72>
 800b7dc:	eba8 0309 	sub.w	r3, r8, r9
 800b7e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b7e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7e4:	2f00      	cmp	r7, #0
 800b7e6:	bf08      	it	eq
 800b7e8:	462f      	moveq	r7, r5
 800b7ea:	2d10      	cmp	r5, #16
 800b7ec:	462c      	mov	r4, r5
 800b7ee:	bfa8      	it	ge
 800b7f0:	2410      	movge	r4, #16
 800b7f2:	f7f4 feaf 	bl	8000554 <__aeabi_ui2d>
 800b7f6:	2d09      	cmp	r5, #9
 800b7f8:	4682      	mov	sl, r0
 800b7fa:	468b      	mov	fp, r1
 800b7fc:	dc13      	bgt.n	800b826 <_strtod_l+0x3d6>
 800b7fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b800:	2b00      	cmp	r3, #0
 800b802:	f43f ae5e 	beq.w	800b4c2 <_strtod_l+0x72>
 800b806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b808:	dd78      	ble.n	800b8fc <_strtod_l+0x4ac>
 800b80a:	2b16      	cmp	r3, #22
 800b80c:	dc5f      	bgt.n	800b8ce <_strtod_l+0x47e>
 800b80e:	4974      	ldr	r1, [pc, #464]	@ (800b9e0 <_strtod_l+0x590>)
 800b810:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b814:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b818:	4652      	mov	r2, sl
 800b81a:	465b      	mov	r3, fp
 800b81c:	f7f4 ff14 	bl	8000648 <__aeabi_dmul>
 800b820:	4682      	mov	sl, r0
 800b822:	468b      	mov	fp, r1
 800b824:	e64d      	b.n	800b4c2 <_strtod_l+0x72>
 800b826:	4b6e      	ldr	r3, [pc, #440]	@ (800b9e0 <_strtod_l+0x590>)
 800b828:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b82c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b830:	f7f4 ff0a 	bl	8000648 <__aeabi_dmul>
 800b834:	4682      	mov	sl, r0
 800b836:	9808      	ldr	r0, [sp, #32]
 800b838:	468b      	mov	fp, r1
 800b83a:	f7f4 fe8b 	bl	8000554 <__aeabi_ui2d>
 800b83e:	4602      	mov	r2, r0
 800b840:	460b      	mov	r3, r1
 800b842:	4650      	mov	r0, sl
 800b844:	4659      	mov	r1, fp
 800b846:	f7f4 fd49 	bl	80002dc <__adddf3>
 800b84a:	2d0f      	cmp	r5, #15
 800b84c:	4682      	mov	sl, r0
 800b84e:	468b      	mov	fp, r1
 800b850:	ddd5      	ble.n	800b7fe <_strtod_l+0x3ae>
 800b852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b854:	1b2c      	subs	r4, r5, r4
 800b856:	441c      	add	r4, r3
 800b858:	2c00      	cmp	r4, #0
 800b85a:	f340 8096 	ble.w	800b98a <_strtod_l+0x53a>
 800b85e:	f014 030f 	ands.w	r3, r4, #15
 800b862:	d00a      	beq.n	800b87a <_strtod_l+0x42a>
 800b864:	495e      	ldr	r1, [pc, #376]	@ (800b9e0 <_strtod_l+0x590>)
 800b866:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b86a:	4652      	mov	r2, sl
 800b86c:	465b      	mov	r3, fp
 800b86e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b872:	f7f4 fee9 	bl	8000648 <__aeabi_dmul>
 800b876:	4682      	mov	sl, r0
 800b878:	468b      	mov	fp, r1
 800b87a:	f034 040f 	bics.w	r4, r4, #15
 800b87e:	d073      	beq.n	800b968 <_strtod_l+0x518>
 800b880:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b884:	dd48      	ble.n	800b918 <_strtod_l+0x4c8>
 800b886:	2400      	movs	r4, #0
 800b888:	46a0      	mov	r8, r4
 800b88a:	940a      	str	r4, [sp, #40]	@ 0x28
 800b88c:	46a1      	mov	r9, r4
 800b88e:	9a05      	ldr	r2, [sp, #20]
 800b890:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b9e8 <_strtod_l+0x598>
 800b894:	2322      	movs	r3, #34	@ 0x22
 800b896:	6013      	str	r3, [r2, #0]
 800b898:	f04f 0a00 	mov.w	sl, #0
 800b89c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	f43f ae0f 	beq.w	800b4c2 <_strtod_l+0x72>
 800b8a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b8a6:	9805      	ldr	r0, [sp, #20]
 800b8a8:	f7ff f942 	bl	800ab30 <_Bfree>
 800b8ac:	9805      	ldr	r0, [sp, #20]
 800b8ae:	4649      	mov	r1, r9
 800b8b0:	f7ff f93e 	bl	800ab30 <_Bfree>
 800b8b4:	9805      	ldr	r0, [sp, #20]
 800b8b6:	4641      	mov	r1, r8
 800b8b8:	f7ff f93a 	bl	800ab30 <_Bfree>
 800b8bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b8be:	9805      	ldr	r0, [sp, #20]
 800b8c0:	f7ff f936 	bl	800ab30 <_Bfree>
 800b8c4:	9805      	ldr	r0, [sp, #20]
 800b8c6:	4621      	mov	r1, r4
 800b8c8:	f7ff f932 	bl	800ab30 <_Bfree>
 800b8cc:	e5f9      	b.n	800b4c2 <_strtod_l+0x72>
 800b8ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	dbbc      	blt.n	800b852 <_strtod_l+0x402>
 800b8d8:	4c41      	ldr	r4, [pc, #260]	@ (800b9e0 <_strtod_l+0x590>)
 800b8da:	f1c5 050f 	rsb	r5, r5, #15
 800b8de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b8e2:	4652      	mov	r2, sl
 800b8e4:	465b      	mov	r3, fp
 800b8e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8ea:	f7f4 fead 	bl	8000648 <__aeabi_dmul>
 800b8ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8f0:	1b5d      	subs	r5, r3, r5
 800b8f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b8f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b8fa:	e78f      	b.n	800b81c <_strtod_l+0x3cc>
 800b8fc:	3316      	adds	r3, #22
 800b8fe:	dba8      	blt.n	800b852 <_strtod_l+0x402>
 800b900:	4b37      	ldr	r3, [pc, #220]	@ (800b9e0 <_strtod_l+0x590>)
 800b902:	eba9 0808 	sub.w	r8, r9, r8
 800b906:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b90a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b90e:	4650      	mov	r0, sl
 800b910:	4659      	mov	r1, fp
 800b912:	f7f4 ffc3 	bl	800089c <__aeabi_ddiv>
 800b916:	e783      	b.n	800b820 <_strtod_l+0x3d0>
 800b918:	4b32      	ldr	r3, [pc, #200]	@ (800b9e4 <_strtod_l+0x594>)
 800b91a:	9308      	str	r3, [sp, #32]
 800b91c:	2300      	movs	r3, #0
 800b91e:	1124      	asrs	r4, r4, #4
 800b920:	4650      	mov	r0, sl
 800b922:	4659      	mov	r1, fp
 800b924:	461e      	mov	r6, r3
 800b926:	2c01      	cmp	r4, #1
 800b928:	dc21      	bgt.n	800b96e <_strtod_l+0x51e>
 800b92a:	b10b      	cbz	r3, 800b930 <_strtod_l+0x4e0>
 800b92c:	4682      	mov	sl, r0
 800b92e:	468b      	mov	fp, r1
 800b930:	492c      	ldr	r1, [pc, #176]	@ (800b9e4 <_strtod_l+0x594>)
 800b932:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b936:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b93a:	4652      	mov	r2, sl
 800b93c:	465b      	mov	r3, fp
 800b93e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b942:	f7f4 fe81 	bl	8000648 <__aeabi_dmul>
 800b946:	4b28      	ldr	r3, [pc, #160]	@ (800b9e8 <_strtod_l+0x598>)
 800b948:	460a      	mov	r2, r1
 800b94a:	400b      	ands	r3, r1
 800b94c:	4927      	ldr	r1, [pc, #156]	@ (800b9ec <_strtod_l+0x59c>)
 800b94e:	428b      	cmp	r3, r1
 800b950:	4682      	mov	sl, r0
 800b952:	d898      	bhi.n	800b886 <_strtod_l+0x436>
 800b954:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b958:	428b      	cmp	r3, r1
 800b95a:	bf86      	itte	hi
 800b95c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b9f0 <_strtod_l+0x5a0>
 800b960:	f04f 3aff 	movhi.w	sl, #4294967295
 800b964:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b968:	2300      	movs	r3, #0
 800b96a:	9308      	str	r3, [sp, #32]
 800b96c:	e07a      	b.n	800ba64 <_strtod_l+0x614>
 800b96e:	07e2      	lsls	r2, r4, #31
 800b970:	d505      	bpl.n	800b97e <_strtod_l+0x52e>
 800b972:	9b08      	ldr	r3, [sp, #32]
 800b974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b978:	f7f4 fe66 	bl	8000648 <__aeabi_dmul>
 800b97c:	2301      	movs	r3, #1
 800b97e:	9a08      	ldr	r2, [sp, #32]
 800b980:	3208      	adds	r2, #8
 800b982:	3601      	adds	r6, #1
 800b984:	1064      	asrs	r4, r4, #1
 800b986:	9208      	str	r2, [sp, #32]
 800b988:	e7cd      	b.n	800b926 <_strtod_l+0x4d6>
 800b98a:	d0ed      	beq.n	800b968 <_strtod_l+0x518>
 800b98c:	4264      	negs	r4, r4
 800b98e:	f014 020f 	ands.w	r2, r4, #15
 800b992:	d00a      	beq.n	800b9aa <_strtod_l+0x55a>
 800b994:	4b12      	ldr	r3, [pc, #72]	@ (800b9e0 <_strtod_l+0x590>)
 800b996:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b99a:	4650      	mov	r0, sl
 800b99c:	4659      	mov	r1, fp
 800b99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a2:	f7f4 ff7b 	bl	800089c <__aeabi_ddiv>
 800b9a6:	4682      	mov	sl, r0
 800b9a8:	468b      	mov	fp, r1
 800b9aa:	1124      	asrs	r4, r4, #4
 800b9ac:	d0dc      	beq.n	800b968 <_strtod_l+0x518>
 800b9ae:	2c1f      	cmp	r4, #31
 800b9b0:	dd20      	ble.n	800b9f4 <_strtod_l+0x5a4>
 800b9b2:	2400      	movs	r4, #0
 800b9b4:	46a0      	mov	r8, r4
 800b9b6:	940a      	str	r4, [sp, #40]	@ 0x28
 800b9b8:	46a1      	mov	r9, r4
 800b9ba:	9a05      	ldr	r2, [sp, #20]
 800b9bc:	2322      	movs	r3, #34	@ 0x22
 800b9be:	f04f 0a00 	mov.w	sl, #0
 800b9c2:	f04f 0b00 	mov.w	fp, #0
 800b9c6:	6013      	str	r3, [r2, #0]
 800b9c8:	e768      	b.n	800b89c <_strtod_l+0x44c>
 800b9ca:	bf00      	nop
 800b9cc:	0800d2f9 	.word	0x0800d2f9
 800b9d0:	0800d50c 	.word	0x0800d50c
 800b9d4:	0800d2f1 	.word	0x0800d2f1
 800b9d8:	0800d328 	.word	0x0800d328
 800b9dc:	0800d6b5 	.word	0x0800d6b5
 800b9e0:	0800d440 	.word	0x0800d440
 800b9e4:	0800d418 	.word	0x0800d418
 800b9e8:	7ff00000 	.word	0x7ff00000
 800b9ec:	7ca00000 	.word	0x7ca00000
 800b9f0:	7fefffff 	.word	0x7fefffff
 800b9f4:	f014 0310 	ands.w	r3, r4, #16
 800b9f8:	bf18      	it	ne
 800b9fa:	236a      	movne	r3, #106	@ 0x6a
 800b9fc:	4ea9      	ldr	r6, [pc, #676]	@ (800bca4 <_strtod_l+0x854>)
 800b9fe:	9308      	str	r3, [sp, #32]
 800ba00:	4650      	mov	r0, sl
 800ba02:	4659      	mov	r1, fp
 800ba04:	2300      	movs	r3, #0
 800ba06:	07e2      	lsls	r2, r4, #31
 800ba08:	d504      	bpl.n	800ba14 <_strtod_l+0x5c4>
 800ba0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba0e:	f7f4 fe1b 	bl	8000648 <__aeabi_dmul>
 800ba12:	2301      	movs	r3, #1
 800ba14:	1064      	asrs	r4, r4, #1
 800ba16:	f106 0608 	add.w	r6, r6, #8
 800ba1a:	d1f4      	bne.n	800ba06 <_strtod_l+0x5b6>
 800ba1c:	b10b      	cbz	r3, 800ba22 <_strtod_l+0x5d2>
 800ba1e:	4682      	mov	sl, r0
 800ba20:	468b      	mov	fp, r1
 800ba22:	9b08      	ldr	r3, [sp, #32]
 800ba24:	b1b3      	cbz	r3, 800ba54 <_strtod_l+0x604>
 800ba26:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ba2a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	4659      	mov	r1, fp
 800ba32:	dd0f      	ble.n	800ba54 <_strtod_l+0x604>
 800ba34:	2b1f      	cmp	r3, #31
 800ba36:	dd55      	ble.n	800bae4 <_strtod_l+0x694>
 800ba38:	2b34      	cmp	r3, #52	@ 0x34
 800ba3a:	bfde      	ittt	le
 800ba3c:	f04f 33ff 	movle.w	r3, #4294967295
 800ba40:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ba44:	4093      	lslle	r3, r2
 800ba46:	f04f 0a00 	mov.w	sl, #0
 800ba4a:	bfcc      	ite	gt
 800ba4c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ba50:	ea03 0b01 	andle.w	fp, r3, r1
 800ba54:	2200      	movs	r2, #0
 800ba56:	2300      	movs	r3, #0
 800ba58:	4650      	mov	r0, sl
 800ba5a:	4659      	mov	r1, fp
 800ba5c:	f7f5 f85c 	bl	8000b18 <__aeabi_dcmpeq>
 800ba60:	2800      	cmp	r0, #0
 800ba62:	d1a6      	bne.n	800b9b2 <_strtod_l+0x562>
 800ba64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba66:	9300      	str	r3, [sp, #0]
 800ba68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ba6a:	9805      	ldr	r0, [sp, #20]
 800ba6c:	462b      	mov	r3, r5
 800ba6e:	463a      	mov	r2, r7
 800ba70:	f7ff f8c6 	bl	800ac00 <__s2b>
 800ba74:	900a      	str	r0, [sp, #40]	@ 0x28
 800ba76:	2800      	cmp	r0, #0
 800ba78:	f43f af05 	beq.w	800b886 <_strtod_l+0x436>
 800ba7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba7e:	2a00      	cmp	r2, #0
 800ba80:	eba9 0308 	sub.w	r3, r9, r8
 800ba84:	bfa8      	it	ge
 800ba86:	2300      	movge	r3, #0
 800ba88:	9312      	str	r3, [sp, #72]	@ 0x48
 800ba8a:	2400      	movs	r4, #0
 800ba8c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ba90:	9316      	str	r3, [sp, #88]	@ 0x58
 800ba92:	46a0      	mov	r8, r4
 800ba94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba96:	9805      	ldr	r0, [sp, #20]
 800ba98:	6859      	ldr	r1, [r3, #4]
 800ba9a:	f7ff f809 	bl	800aab0 <_Balloc>
 800ba9e:	4681      	mov	r9, r0
 800baa0:	2800      	cmp	r0, #0
 800baa2:	f43f aef4 	beq.w	800b88e <_strtod_l+0x43e>
 800baa6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800baa8:	691a      	ldr	r2, [r3, #16]
 800baaa:	3202      	adds	r2, #2
 800baac:	f103 010c 	add.w	r1, r3, #12
 800bab0:	0092      	lsls	r2, r2, #2
 800bab2:	300c      	adds	r0, #12
 800bab4:	f7fe f899 	bl	8009bea <memcpy>
 800bab8:	ec4b ab10 	vmov	d0, sl, fp
 800babc:	9805      	ldr	r0, [sp, #20]
 800babe:	aa1c      	add	r2, sp, #112	@ 0x70
 800bac0:	a91b      	add	r1, sp, #108	@ 0x6c
 800bac2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bac6:	f7ff fbd7 	bl	800b278 <__d2b>
 800baca:	901a      	str	r0, [sp, #104]	@ 0x68
 800bacc:	2800      	cmp	r0, #0
 800bace:	f43f aede 	beq.w	800b88e <_strtod_l+0x43e>
 800bad2:	9805      	ldr	r0, [sp, #20]
 800bad4:	2101      	movs	r1, #1
 800bad6:	f7ff f929 	bl	800ad2c <__i2b>
 800bada:	4680      	mov	r8, r0
 800badc:	b948      	cbnz	r0, 800baf2 <_strtod_l+0x6a2>
 800bade:	f04f 0800 	mov.w	r8, #0
 800bae2:	e6d4      	b.n	800b88e <_strtod_l+0x43e>
 800bae4:	f04f 32ff 	mov.w	r2, #4294967295
 800bae8:	fa02 f303 	lsl.w	r3, r2, r3
 800baec:	ea03 0a0a 	and.w	sl, r3, sl
 800baf0:	e7b0      	b.n	800ba54 <_strtod_l+0x604>
 800baf2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800baf4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800baf6:	2d00      	cmp	r5, #0
 800baf8:	bfab      	itete	ge
 800bafa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bafc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bafe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bb00:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bb02:	bfac      	ite	ge
 800bb04:	18ef      	addge	r7, r5, r3
 800bb06:	1b5e      	sublt	r6, r3, r5
 800bb08:	9b08      	ldr	r3, [sp, #32]
 800bb0a:	1aed      	subs	r5, r5, r3
 800bb0c:	4415      	add	r5, r2
 800bb0e:	4b66      	ldr	r3, [pc, #408]	@ (800bca8 <_strtod_l+0x858>)
 800bb10:	3d01      	subs	r5, #1
 800bb12:	429d      	cmp	r5, r3
 800bb14:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bb18:	da50      	bge.n	800bbbc <_strtod_l+0x76c>
 800bb1a:	1b5b      	subs	r3, r3, r5
 800bb1c:	2b1f      	cmp	r3, #31
 800bb1e:	eba2 0203 	sub.w	r2, r2, r3
 800bb22:	f04f 0101 	mov.w	r1, #1
 800bb26:	dc3d      	bgt.n	800bba4 <_strtod_l+0x754>
 800bb28:	fa01 f303 	lsl.w	r3, r1, r3
 800bb2c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bb2e:	2300      	movs	r3, #0
 800bb30:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb32:	18bd      	adds	r5, r7, r2
 800bb34:	9b08      	ldr	r3, [sp, #32]
 800bb36:	42af      	cmp	r7, r5
 800bb38:	4416      	add	r6, r2
 800bb3a:	441e      	add	r6, r3
 800bb3c:	463b      	mov	r3, r7
 800bb3e:	bfa8      	it	ge
 800bb40:	462b      	movge	r3, r5
 800bb42:	42b3      	cmp	r3, r6
 800bb44:	bfa8      	it	ge
 800bb46:	4633      	movge	r3, r6
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	bfc2      	ittt	gt
 800bb4c:	1aed      	subgt	r5, r5, r3
 800bb4e:	1af6      	subgt	r6, r6, r3
 800bb50:	1aff      	subgt	r7, r7, r3
 800bb52:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	dd16      	ble.n	800bb86 <_strtod_l+0x736>
 800bb58:	4641      	mov	r1, r8
 800bb5a:	9805      	ldr	r0, [sp, #20]
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	f7ff f9a5 	bl	800aeac <__pow5mult>
 800bb62:	4680      	mov	r8, r0
 800bb64:	2800      	cmp	r0, #0
 800bb66:	d0ba      	beq.n	800bade <_strtod_l+0x68e>
 800bb68:	4601      	mov	r1, r0
 800bb6a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bb6c:	9805      	ldr	r0, [sp, #20]
 800bb6e:	f7ff f8f3 	bl	800ad58 <__multiply>
 800bb72:	900e      	str	r0, [sp, #56]	@ 0x38
 800bb74:	2800      	cmp	r0, #0
 800bb76:	f43f ae8a 	beq.w	800b88e <_strtod_l+0x43e>
 800bb7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb7c:	9805      	ldr	r0, [sp, #20]
 800bb7e:	f7fe ffd7 	bl	800ab30 <_Bfree>
 800bb82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb84:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb86:	2d00      	cmp	r5, #0
 800bb88:	dc1d      	bgt.n	800bbc6 <_strtod_l+0x776>
 800bb8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	dd23      	ble.n	800bbd8 <_strtod_l+0x788>
 800bb90:	4649      	mov	r1, r9
 800bb92:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bb94:	9805      	ldr	r0, [sp, #20]
 800bb96:	f7ff f989 	bl	800aeac <__pow5mult>
 800bb9a:	4681      	mov	r9, r0
 800bb9c:	b9e0      	cbnz	r0, 800bbd8 <_strtod_l+0x788>
 800bb9e:	f04f 0900 	mov.w	r9, #0
 800bba2:	e674      	b.n	800b88e <_strtod_l+0x43e>
 800bba4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bba8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bbac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bbb0:	35e2      	adds	r5, #226	@ 0xe2
 800bbb2:	fa01 f305 	lsl.w	r3, r1, r5
 800bbb6:	9310      	str	r3, [sp, #64]	@ 0x40
 800bbb8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bbba:	e7ba      	b.n	800bb32 <_strtod_l+0x6e2>
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	9310      	str	r3, [sp, #64]	@ 0x40
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bbc4:	e7b5      	b.n	800bb32 <_strtod_l+0x6e2>
 800bbc6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bbc8:	9805      	ldr	r0, [sp, #20]
 800bbca:	462a      	mov	r2, r5
 800bbcc:	f7ff f9c8 	bl	800af60 <__lshift>
 800bbd0:	901a      	str	r0, [sp, #104]	@ 0x68
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	d1d9      	bne.n	800bb8a <_strtod_l+0x73a>
 800bbd6:	e65a      	b.n	800b88e <_strtod_l+0x43e>
 800bbd8:	2e00      	cmp	r6, #0
 800bbda:	dd07      	ble.n	800bbec <_strtod_l+0x79c>
 800bbdc:	4649      	mov	r1, r9
 800bbde:	9805      	ldr	r0, [sp, #20]
 800bbe0:	4632      	mov	r2, r6
 800bbe2:	f7ff f9bd 	bl	800af60 <__lshift>
 800bbe6:	4681      	mov	r9, r0
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	d0d8      	beq.n	800bb9e <_strtod_l+0x74e>
 800bbec:	2f00      	cmp	r7, #0
 800bbee:	dd08      	ble.n	800bc02 <_strtod_l+0x7b2>
 800bbf0:	4641      	mov	r1, r8
 800bbf2:	9805      	ldr	r0, [sp, #20]
 800bbf4:	463a      	mov	r2, r7
 800bbf6:	f7ff f9b3 	bl	800af60 <__lshift>
 800bbfa:	4680      	mov	r8, r0
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	f43f ae46 	beq.w	800b88e <_strtod_l+0x43e>
 800bc02:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc04:	9805      	ldr	r0, [sp, #20]
 800bc06:	464a      	mov	r2, r9
 800bc08:	f7ff fa32 	bl	800b070 <__mdiff>
 800bc0c:	4604      	mov	r4, r0
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	f43f ae3d 	beq.w	800b88e <_strtod_l+0x43e>
 800bc14:	68c3      	ldr	r3, [r0, #12]
 800bc16:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bc18:	2300      	movs	r3, #0
 800bc1a:	60c3      	str	r3, [r0, #12]
 800bc1c:	4641      	mov	r1, r8
 800bc1e:	f7ff fa0b 	bl	800b038 <__mcmp>
 800bc22:	2800      	cmp	r0, #0
 800bc24:	da46      	bge.n	800bcb4 <_strtod_l+0x864>
 800bc26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc28:	ea53 030a 	orrs.w	r3, r3, sl
 800bc2c:	d16c      	bne.n	800bd08 <_strtod_l+0x8b8>
 800bc2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d168      	bne.n	800bd08 <_strtod_l+0x8b8>
 800bc36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bc3a:	0d1b      	lsrs	r3, r3, #20
 800bc3c:	051b      	lsls	r3, r3, #20
 800bc3e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bc42:	d961      	bls.n	800bd08 <_strtod_l+0x8b8>
 800bc44:	6963      	ldr	r3, [r4, #20]
 800bc46:	b913      	cbnz	r3, 800bc4e <_strtod_l+0x7fe>
 800bc48:	6923      	ldr	r3, [r4, #16]
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	dd5c      	ble.n	800bd08 <_strtod_l+0x8b8>
 800bc4e:	4621      	mov	r1, r4
 800bc50:	2201      	movs	r2, #1
 800bc52:	9805      	ldr	r0, [sp, #20]
 800bc54:	f7ff f984 	bl	800af60 <__lshift>
 800bc58:	4641      	mov	r1, r8
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	f7ff f9ec 	bl	800b038 <__mcmp>
 800bc60:	2800      	cmp	r0, #0
 800bc62:	dd51      	ble.n	800bd08 <_strtod_l+0x8b8>
 800bc64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bc68:	9a08      	ldr	r2, [sp, #32]
 800bc6a:	0d1b      	lsrs	r3, r3, #20
 800bc6c:	051b      	lsls	r3, r3, #20
 800bc6e:	2a00      	cmp	r2, #0
 800bc70:	d06b      	beq.n	800bd4a <_strtod_l+0x8fa>
 800bc72:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bc76:	d868      	bhi.n	800bd4a <_strtod_l+0x8fa>
 800bc78:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bc7c:	f67f ae9d 	bls.w	800b9ba <_strtod_l+0x56a>
 800bc80:	4b0a      	ldr	r3, [pc, #40]	@ (800bcac <_strtod_l+0x85c>)
 800bc82:	4650      	mov	r0, sl
 800bc84:	4659      	mov	r1, fp
 800bc86:	2200      	movs	r2, #0
 800bc88:	f7f4 fcde 	bl	8000648 <__aeabi_dmul>
 800bc8c:	4b08      	ldr	r3, [pc, #32]	@ (800bcb0 <_strtod_l+0x860>)
 800bc8e:	400b      	ands	r3, r1
 800bc90:	4682      	mov	sl, r0
 800bc92:	468b      	mov	fp, r1
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	f47f ae05 	bne.w	800b8a4 <_strtod_l+0x454>
 800bc9a:	9a05      	ldr	r2, [sp, #20]
 800bc9c:	2322      	movs	r3, #34	@ 0x22
 800bc9e:	6013      	str	r3, [r2, #0]
 800bca0:	e600      	b.n	800b8a4 <_strtod_l+0x454>
 800bca2:	bf00      	nop
 800bca4:	0800d538 	.word	0x0800d538
 800bca8:	fffffc02 	.word	0xfffffc02
 800bcac:	39500000 	.word	0x39500000
 800bcb0:	7ff00000 	.word	0x7ff00000
 800bcb4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bcb8:	d165      	bne.n	800bd86 <_strtod_l+0x936>
 800bcba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bcbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bcc0:	b35a      	cbz	r2, 800bd1a <_strtod_l+0x8ca>
 800bcc2:	4a9f      	ldr	r2, [pc, #636]	@ (800bf40 <_strtod_l+0xaf0>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d12b      	bne.n	800bd20 <_strtod_l+0x8d0>
 800bcc8:	9b08      	ldr	r3, [sp, #32]
 800bcca:	4651      	mov	r1, sl
 800bccc:	b303      	cbz	r3, 800bd10 <_strtod_l+0x8c0>
 800bcce:	4b9d      	ldr	r3, [pc, #628]	@ (800bf44 <_strtod_l+0xaf4>)
 800bcd0:	465a      	mov	r2, fp
 800bcd2:	4013      	ands	r3, r2
 800bcd4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bcd8:	f04f 32ff 	mov.w	r2, #4294967295
 800bcdc:	d81b      	bhi.n	800bd16 <_strtod_l+0x8c6>
 800bcde:	0d1b      	lsrs	r3, r3, #20
 800bce0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bce4:	fa02 f303 	lsl.w	r3, r2, r3
 800bce8:	4299      	cmp	r1, r3
 800bcea:	d119      	bne.n	800bd20 <_strtod_l+0x8d0>
 800bcec:	4b96      	ldr	r3, [pc, #600]	@ (800bf48 <_strtod_l+0xaf8>)
 800bcee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d102      	bne.n	800bcfa <_strtod_l+0x8aa>
 800bcf4:	3101      	adds	r1, #1
 800bcf6:	f43f adca 	beq.w	800b88e <_strtod_l+0x43e>
 800bcfa:	4b92      	ldr	r3, [pc, #584]	@ (800bf44 <_strtod_l+0xaf4>)
 800bcfc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bcfe:	401a      	ands	r2, r3
 800bd00:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bd04:	f04f 0a00 	mov.w	sl, #0
 800bd08:	9b08      	ldr	r3, [sp, #32]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d1b8      	bne.n	800bc80 <_strtod_l+0x830>
 800bd0e:	e5c9      	b.n	800b8a4 <_strtod_l+0x454>
 800bd10:	f04f 33ff 	mov.w	r3, #4294967295
 800bd14:	e7e8      	b.n	800bce8 <_strtod_l+0x898>
 800bd16:	4613      	mov	r3, r2
 800bd18:	e7e6      	b.n	800bce8 <_strtod_l+0x898>
 800bd1a:	ea53 030a 	orrs.w	r3, r3, sl
 800bd1e:	d0a1      	beq.n	800bc64 <_strtod_l+0x814>
 800bd20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bd22:	b1db      	cbz	r3, 800bd5c <_strtod_l+0x90c>
 800bd24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd26:	4213      	tst	r3, r2
 800bd28:	d0ee      	beq.n	800bd08 <_strtod_l+0x8b8>
 800bd2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd2c:	9a08      	ldr	r2, [sp, #32]
 800bd2e:	4650      	mov	r0, sl
 800bd30:	4659      	mov	r1, fp
 800bd32:	b1bb      	cbz	r3, 800bd64 <_strtod_l+0x914>
 800bd34:	f7ff fb6e 	bl	800b414 <sulp>
 800bd38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd3c:	ec53 2b10 	vmov	r2, r3, d0
 800bd40:	f7f4 facc 	bl	80002dc <__adddf3>
 800bd44:	4682      	mov	sl, r0
 800bd46:	468b      	mov	fp, r1
 800bd48:	e7de      	b.n	800bd08 <_strtod_l+0x8b8>
 800bd4a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bd4e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bd52:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bd56:	f04f 3aff 	mov.w	sl, #4294967295
 800bd5a:	e7d5      	b.n	800bd08 <_strtod_l+0x8b8>
 800bd5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd5e:	ea13 0f0a 	tst.w	r3, sl
 800bd62:	e7e1      	b.n	800bd28 <_strtod_l+0x8d8>
 800bd64:	f7ff fb56 	bl	800b414 <sulp>
 800bd68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd6c:	ec53 2b10 	vmov	r2, r3, d0
 800bd70:	f7f4 fab2 	bl	80002d8 <__aeabi_dsub>
 800bd74:	2200      	movs	r2, #0
 800bd76:	2300      	movs	r3, #0
 800bd78:	4682      	mov	sl, r0
 800bd7a:	468b      	mov	fp, r1
 800bd7c:	f7f4 fecc 	bl	8000b18 <__aeabi_dcmpeq>
 800bd80:	2800      	cmp	r0, #0
 800bd82:	d0c1      	beq.n	800bd08 <_strtod_l+0x8b8>
 800bd84:	e619      	b.n	800b9ba <_strtod_l+0x56a>
 800bd86:	4641      	mov	r1, r8
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f7ff facd 	bl	800b328 <__ratio>
 800bd8e:	ec57 6b10 	vmov	r6, r7, d0
 800bd92:	2200      	movs	r2, #0
 800bd94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bd98:	4630      	mov	r0, r6
 800bd9a:	4639      	mov	r1, r7
 800bd9c:	f7f4 fed0 	bl	8000b40 <__aeabi_dcmple>
 800bda0:	2800      	cmp	r0, #0
 800bda2:	d06f      	beq.n	800be84 <_strtod_l+0xa34>
 800bda4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d17a      	bne.n	800bea0 <_strtod_l+0xa50>
 800bdaa:	f1ba 0f00 	cmp.w	sl, #0
 800bdae:	d158      	bne.n	800be62 <_strtod_l+0xa12>
 800bdb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d15a      	bne.n	800be70 <_strtod_l+0xa20>
 800bdba:	4b64      	ldr	r3, [pc, #400]	@ (800bf4c <_strtod_l+0xafc>)
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	4630      	mov	r0, r6
 800bdc0:	4639      	mov	r1, r7
 800bdc2:	f7f4 feb3 	bl	8000b2c <__aeabi_dcmplt>
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	d159      	bne.n	800be7e <_strtod_l+0xa2e>
 800bdca:	4630      	mov	r0, r6
 800bdcc:	4639      	mov	r1, r7
 800bdce:	4b60      	ldr	r3, [pc, #384]	@ (800bf50 <_strtod_l+0xb00>)
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	f7f4 fc39 	bl	8000648 <__aeabi_dmul>
 800bdd6:	4606      	mov	r6, r0
 800bdd8:	460f      	mov	r7, r1
 800bdda:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bdde:	9606      	str	r6, [sp, #24]
 800bde0:	9307      	str	r3, [sp, #28]
 800bde2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bde6:	4d57      	ldr	r5, [pc, #348]	@ (800bf44 <_strtod_l+0xaf4>)
 800bde8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bdec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdee:	401d      	ands	r5, r3
 800bdf0:	4b58      	ldr	r3, [pc, #352]	@ (800bf54 <_strtod_l+0xb04>)
 800bdf2:	429d      	cmp	r5, r3
 800bdf4:	f040 80b2 	bne.w	800bf5c <_strtod_l+0xb0c>
 800bdf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdfa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bdfe:	ec4b ab10 	vmov	d0, sl, fp
 800be02:	f7ff f9c9 	bl	800b198 <__ulp>
 800be06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be0a:	ec51 0b10 	vmov	r0, r1, d0
 800be0e:	f7f4 fc1b 	bl	8000648 <__aeabi_dmul>
 800be12:	4652      	mov	r2, sl
 800be14:	465b      	mov	r3, fp
 800be16:	f7f4 fa61 	bl	80002dc <__adddf3>
 800be1a:	460b      	mov	r3, r1
 800be1c:	4949      	ldr	r1, [pc, #292]	@ (800bf44 <_strtod_l+0xaf4>)
 800be1e:	4a4e      	ldr	r2, [pc, #312]	@ (800bf58 <_strtod_l+0xb08>)
 800be20:	4019      	ands	r1, r3
 800be22:	4291      	cmp	r1, r2
 800be24:	4682      	mov	sl, r0
 800be26:	d942      	bls.n	800beae <_strtod_l+0xa5e>
 800be28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800be2a:	4b47      	ldr	r3, [pc, #284]	@ (800bf48 <_strtod_l+0xaf8>)
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d103      	bne.n	800be38 <_strtod_l+0x9e8>
 800be30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be32:	3301      	adds	r3, #1
 800be34:	f43f ad2b 	beq.w	800b88e <_strtod_l+0x43e>
 800be38:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bf48 <_strtod_l+0xaf8>
 800be3c:	f04f 3aff 	mov.w	sl, #4294967295
 800be40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800be42:	9805      	ldr	r0, [sp, #20]
 800be44:	f7fe fe74 	bl	800ab30 <_Bfree>
 800be48:	9805      	ldr	r0, [sp, #20]
 800be4a:	4649      	mov	r1, r9
 800be4c:	f7fe fe70 	bl	800ab30 <_Bfree>
 800be50:	9805      	ldr	r0, [sp, #20]
 800be52:	4641      	mov	r1, r8
 800be54:	f7fe fe6c 	bl	800ab30 <_Bfree>
 800be58:	9805      	ldr	r0, [sp, #20]
 800be5a:	4621      	mov	r1, r4
 800be5c:	f7fe fe68 	bl	800ab30 <_Bfree>
 800be60:	e618      	b.n	800ba94 <_strtod_l+0x644>
 800be62:	f1ba 0f01 	cmp.w	sl, #1
 800be66:	d103      	bne.n	800be70 <_strtod_l+0xa20>
 800be68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	f43f ada5 	beq.w	800b9ba <_strtod_l+0x56a>
 800be70:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bf20 <_strtod_l+0xad0>
 800be74:	4f35      	ldr	r7, [pc, #212]	@ (800bf4c <_strtod_l+0xafc>)
 800be76:	ed8d 7b06 	vstr	d7, [sp, #24]
 800be7a:	2600      	movs	r6, #0
 800be7c:	e7b1      	b.n	800bde2 <_strtod_l+0x992>
 800be7e:	4f34      	ldr	r7, [pc, #208]	@ (800bf50 <_strtod_l+0xb00>)
 800be80:	2600      	movs	r6, #0
 800be82:	e7aa      	b.n	800bdda <_strtod_l+0x98a>
 800be84:	4b32      	ldr	r3, [pc, #200]	@ (800bf50 <_strtod_l+0xb00>)
 800be86:	4630      	mov	r0, r6
 800be88:	4639      	mov	r1, r7
 800be8a:	2200      	movs	r2, #0
 800be8c:	f7f4 fbdc 	bl	8000648 <__aeabi_dmul>
 800be90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be92:	4606      	mov	r6, r0
 800be94:	460f      	mov	r7, r1
 800be96:	2b00      	cmp	r3, #0
 800be98:	d09f      	beq.n	800bdda <_strtod_l+0x98a>
 800be9a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800be9e:	e7a0      	b.n	800bde2 <_strtod_l+0x992>
 800bea0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bf28 <_strtod_l+0xad8>
 800bea4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bea8:	ec57 6b17 	vmov	r6, r7, d7
 800beac:	e799      	b.n	800bde2 <_strtod_l+0x992>
 800beae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800beb2:	9b08      	ldr	r3, [sp, #32]
 800beb4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d1c1      	bne.n	800be40 <_strtod_l+0x9f0>
 800bebc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bec0:	0d1b      	lsrs	r3, r3, #20
 800bec2:	051b      	lsls	r3, r3, #20
 800bec4:	429d      	cmp	r5, r3
 800bec6:	d1bb      	bne.n	800be40 <_strtod_l+0x9f0>
 800bec8:	4630      	mov	r0, r6
 800beca:	4639      	mov	r1, r7
 800becc:	f7f4 ff1c 	bl	8000d08 <__aeabi_d2lz>
 800bed0:	f7f4 fb8c 	bl	80005ec <__aeabi_l2d>
 800bed4:	4602      	mov	r2, r0
 800bed6:	460b      	mov	r3, r1
 800bed8:	4630      	mov	r0, r6
 800beda:	4639      	mov	r1, r7
 800bedc:	f7f4 f9fc 	bl	80002d8 <__aeabi_dsub>
 800bee0:	460b      	mov	r3, r1
 800bee2:	4602      	mov	r2, r0
 800bee4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bee8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800beec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800beee:	ea46 060a 	orr.w	r6, r6, sl
 800bef2:	431e      	orrs	r6, r3
 800bef4:	d06f      	beq.n	800bfd6 <_strtod_l+0xb86>
 800bef6:	a30e      	add	r3, pc, #56	@ (adr r3, 800bf30 <_strtod_l+0xae0>)
 800bef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befc:	f7f4 fe16 	bl	8000b2c <__aeabi_dcmplt>
 800bf00:	2800      	cmp	r0, #0
 800bf02:	f47f accf 	bne.w	800b8a4 <_strtod_l+0x454>
 800bf06:	a30c      	add	r3, pc, #48	@ (adr r3, 800bf38 <_strtod_l+0xae8>)
 800bf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf10:	f7f4 fe2a 	bl	8000b68 <__aeabi_dcmpgt>
 800bf14:	2800      	cmp	r0, #0
 800bf16:	d093      	beq.n	800be40 <_strtod_l+0x9f0>
 800bf18:	e4c4      	b.n	800b8a4 <_strtod_l+0x454>
 800bf1a:	bf00      	nop
 800bf1c:	f3af 8000 	nop.w
 800bf20:	00000000 	.word	0x00000000
 800bf24:	bff00000 	.word	0xbff00000
 800bf28:	00000000 	.word	0x00000000
 800bf2c:	3ff00000 	.word	0x3ff00000
 800bf30:	94a03595 	.word	0x94a03595
 800bf34:	3fdfffff 	.word	0x3fdfffff
 800bf38:	35afe535 	.word	0x35afe535
 800bf3c:	3fe00000 	.word	0x3fe00000
 800bf40:	000fffff 	.word	0x000fffff
 800bf44:	7ff00000 	.word	0x7ff00000
 800bf48:	7fefffff 	.word	0x7fefffff
 800bf4c:	3ff00000 	.word	0x3ff00000
 800bf50:	3fe00000 	.word	0x3fe00000
 800bf54:	7fe00000 	.word	0x7fe00000
 800bf58:	7c9fffff 	.word	0x7c9fffff
 800bf5c:	9b08      	ldr	r3, [sp, #32]
 800bf5e:	b323      	cbz	r3, 800bfaa <_strtod_l+0xb5a>
 800bf60:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bf64:	d821      	bhi.n	800bfaa <_strtod_l+0xb5a>
 800bf66:	a328      	add	r3, pc, #160	@ (adr r3, 800c008 <_strtod_l+0xbb8>)
 800bf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6c:	4630      	mov	r0, r6
 800bf6e:	4639      	mov	r1, r7
 800bf70:	f7f4 fde6 	bl	8000b40 <__aeabi_dcmple>
 800bf74:	b1a0      	cbz	r0, 800bfa0 <_strtod_l+0xb50>
 800bf76:	4639      	mov	r1, r7
 800bf78:	4630      	mov	r0, r6
 800bf7a:	f7f4 fe3d 	bl	8000bf8 <__aeabi_d2uiz>
 800bf7e:	2801      	cmp	r0, #1
 800bf80:	bf38      	it	cc
 800bf82:	2001      	movcc	r0, #1
 800bf84:	f7f4 fae6 	bl	8000554 <__aeabi_ui2d>
 800bf88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf8a:	4606      	mov	r6, r0
 800bf8c:	460f      	mov	r7, r1
 800bf8e:	b9fb      	cbnz	r3, 800bfd0 <_strtod_l+0xb80>
 800bf90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bf94:	9014      	str	r0, [sp, #80]	@ 0x50
 800bf96:	9315      	str	r3, [sp, #84]	@ 0x54
 800bf98:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bf9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bfa0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bfa2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bfa6:	1b5b      	subs	r3, r3, r5
 800bfa8:	9311      	str	r3, [sp, #68]	@ 0x44
 800bfaa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bfae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bfb2:	f7ff f8f1 	bl	800b198 <__ulp>
 800bfb6:	4650      	mov	r0, sl
 800bfb8:	ec53 2b10 	vmov	r2, r3, d0
 800bfbc:	4659      	mov	r1, fp
 800bfbe:	f7f4 fb43 	bl	8000648 <__aeabi_dmul>
 800bfc2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bfc6:	f7f4 f989 	bl	80002dc <__adddf3>
 800bfca:	4682      	mov	sl, r0
 800bfcc:	468b      	mov	fp, r1
 800bfce:	e770      	b.n	800beb2 <_strtod_l+0xa62>
 800bfd0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bfd4:	e7e0      	b.n	800bf98 <_strtod_l+0xb48>
 800bfd6:	a30e      	add	r3, pc, #56	@ (adr r3, 800c010 <_strtod_l+0xbc0>)
 800bfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfdc:	f7f4 fda6 	bl	8000b2c <__aeabi_dcmplt>
 800bfe0:	e798      	b.n	800bf14 <_strtod_l+0xac4>
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bfe6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bfe8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bfea:	6013      	str	r3, [r2, #0]
 800bfec:	f7ff ba6d 	b.w	800b4ca <_strtod_l+0x7a>
 800bff0:	2a65      	cmp	r2, #101	@ 0x65
 800bff2:	f43f ab66 	beq.w	800b6c2 <_strtod_l+0x272>
 800bff6:	2a45      	cmp	r2, #69	@ 0x45
 800bff8:	f43f ab63 	beq.w	800b6c2 <_strtod_l+0x272>
 800bffc:	2301      	movs	r3, #1
 800bffe:	f7ff bb9e 	b.w	800b73e <_strtod_l+0x2ee>
 800c002:	bf00      	nop
 800c004:	f3af 8000 	nop.w
 800c008:	ffc00000 	.word	0xffc00000
 800c00c:	41dfffff 	.word	0x41dfffff
 800c010:	94a03595 	.word	0x94a03595
 800c014:	3fcfffff 	.word	0x3fcfffff

0800c018 <_strtod_r>:
 800c018:	4b01      	ldr	r3, [pc, #4]	@ (800c020 <_strtod_r+0x8>)
 800c01a:	f7ff ba19 	b.w	800b450 <_strtod_l>
 800c01e:	bf00      	nop
 800c020:	2000006c 	.word	0x2000006c

0800c024 <_strtol_l.constprop.0>:
 800c024:	2b24      	cmp	r3, #36	@ 0x24
 800c026:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c02a:	4686      	mov	lr, r0
 800c02c:	4690      	mov	r8, r2
 800c02e:	d801      	bhi.n	800c034 <_strtol_l.constprop.0+0x10>
 800c030:	2b01      	cmp	r3, #1
 800c032:	d106      	bne.n	800c042 <_strtol_l.constprop.0+0x1e>
 800c034:	f7fd fdac 	bl	8009b90 <__errno>
 800c038:	2316      	movs	r3, #22
 800c03a:	6003      	str	r3, [r0, #0]
 800c03c:	2000      	movs	r0, #0
 800c03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c042:	4834      	ldr	r0, [pc, #208]	@ (800c114 <_strtol_l.constprop.0+0xf0>)
 800c044:	460d      	mov	r5, r1
 800c046:	462a      	mov	r2, r5
 800c048:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c04c:	5d06      	ldrb	r6, [r0, r4]
 800c04e:	f016 0608 	ands.w	r6, r6, #8
 800c052:	d1f8      	bne.n	800c046 <_strtol_l.constprop.0+0x22>
 800c054:	2c2d      	cmp	r4, #45	@ 0x2d
 800c056:	d12d      	bne.n	800c0b4 <_strtol_l.constprop.0+0x90>
 800c058:	782c      	ldrb	r4, [r5, #0]
 800c05a:	2601      	movs	r6, #1
 800c05c:	1c95      	adds	r5, r2, #2
 800c05e:	f033 0210 	bics.w	r2, r3, #16
 800c062:	d109      	bne.n	800c078 <_strtol_l.constprop.0+0x54>
 800c064:	2c30      	cmp	r4, #48	@ 0x30
 800c066:	d12a      	bne.n	800c0be <_strtol_l.constprop.0+0x9a>
 800c068:	782a      	ldrb	r2, [r5, #0]
 800c06a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c06e:	2a58      	cmp	r2, #88	@ 0x58
 800c070:	d125      	bne.n	800c0be <_strtol_l.constprop.0+0x9a>
 800c072:	786c      	ldrb	r4, [r5, #1]
 800c074:	2310      	movs	r3, #16
 800c076:	3502      	adds	r5, #2
 800c078:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c07c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c080:	2200      	movs	r2, #0
 800c082:	fbbc f9f3 	udiv	r9, ip, r3
 800c086:	4610      	mov	r0, r2
 800c088:	fb03 ca19 	mls	sl, r3, r9, ip
 800c08c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c090:	2f09      	cmp	r7, #9
 800c092:	d81b      	bhi.n	800c0cc <_strtol_l.constprop.0+0xa8>
 800c094:	463c      	mov	r4, r7
 800c096:	42a3      	cmp	r3, r4
 800c098:	dd27      	ble.n	800c0ea <_strtol_l.constprop.0+0xc6>
 800c09a:	1c57      	adds	r7, r2, #1
 800c09c:	d007      	beq.n	800c0ae <_strtol_l.constprop.0+0x8a>
 800c09e:	4581      	cmp	r9, r0
 800c0a0:	d320      	bcc.n	800c0e4 <_strtol_l.constprop.0+0xc0>
 800c0a2:	d101      	bne.n	800c0a8 <_strtol_l.constprop.0+0x84>
 800c0a4:	45a2      	cmp	sl, r4
 800c0a6:	db1d      	blt.n	800c0e4 <_strtol_l.constprop.0+0xc0>
 800c0a8:	fb00 4003 	mla	r0, r0, r3, r4
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c0b2:	e7eb      	b.n	800c08c <_strtol_l.constprop.0+0x68>
 800c0b4:	2c2b      	cmp	r4, #43	@ 0x2b
 800c0b6:	bf04      	itt	eq
 800c0b8:	782c      	ldrbeq	r4, [r5, #0]
 800c0ba:	1c95      	addeq	r5, r2, #2
 800c0bc:	e7cf      	b.n	800c05e <_strtol_l.constprop.0+0x3a>
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d1da      	bne.n	800c078 <_strtol_l.constprop.0+0x54>
 800c0c2:	2c30      	cmp	r4, #48	@ 0x30
 800c0c4:	bf0c      	ite	eq
 800c0c6:	2308      	moveq	r3, #8
 800c0c8:	230a      	movne	r3, #10
 800c0ca:	e7d5      	b.n	800c078 <_strtol_l.constprop.0+0x54>
 800c0cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c0d0:	2f19      	cmp	r7, #25
 800c0d2:	d801      	bhi.n	800c0d8 <_strtol_l.constprop.0+0xb4>
 800c0d4:	3c37      	subs	r4, #55	@ 0x37
 800c0d6:	e7de      	b.n	800c096 <_strtol_l.constprop.0+0x72>
 800c0d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c0dc:	2f19      	cmp	r7, #25
 800c0de:	d804      	bhi.n	800c0ea <_strtol_l.constprop.0+0xc6>
 800c0e0:	3c57      	subs	r4, #87	@ 0x57
 800c0e2:	e7d8      	b.n	800c096 <_strtol_l.constprop.0+0x72>
 800c0e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0e8:	e7e1      	b.n	800c0ae <_strtol_l.constprop.0+0x8a>
 800c0ea:	1c53      	adds	r3, r2, #1
 800c0ec:	d108      	bne.n	800c100 <_strtol_l.constprop.0+0xdc>
 800c0ee:	2322      	movs	r3, #34	@ 0x22
 800c0f0:	f8ce 3000 	str.w	r3, [lr]
 800c0f4:	4660      	mov	r0, ip
 800c0f6:	f1b8 0f00 	cmp.w	r8, #0
 800c0fa:	d0a0      	beq.n	800c03e <_strtol_l.constprop.0+0x1a>
 800c0fc:	1e69      	subs	r1, r5, #1
 800c0fe:	e006      	b.n	800c10e <_strtol_l.constprop.0+0xea>
 800c100:	b106      	cbz	r6, 800c104 <_strtol_l.constprop.0+0xe0>
 800c102:	4240      	negs	r0, r0
 800c104:	f1b8 0f00 	cmp.w	r8, #0
 800c108:	d099      	beq.n	800c03e <_strtol_l.constprop.0+0x1a>
 800c10a:	2a00      	cmp	r2, #0
 800c10c:	d1f6      	bne.n	800c0fc <_strtol_l.constprop.0+0xd8>
 800c10e:	f8c8 1000 	str.w	r1, [r8]
 800c112:	e794      	b.n	800c03e <_strtol_l.constprop.0+0x1a>
 800c114:	0800d561 	.word	0x0800d561

0800c118 <_strtol_r>:
 800c118:	f7ff bf84 	b.w	800c024 <_strtol_l.constprop.0>

0800c11c <__ssputs_r>:
 800c11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c120:	688e      	ldr	r6, [r1, #8]
 800c122:	461f      	mov	r7, r3
 800c124:	42be      	cmp	r6, r7
 800c126:	680b      	ldr	r3, [r1, #0]
 800c128:	4682      	mov	sl, r0
 800c12a:	460c      	mov	r4, r1
 800c12c:	4690      	mov	r8, r2
 800c12e:	d82d      	bhi.n	800c18c <__ssputs_r+0x70>
 800c130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c134:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c138:	d026      	beq.n	800c188 <__ssputs_r+0x6c>
 800c13a:	6965      	ldr	r5, [r4, #20]
 800c13c:	6909      	ldr	r1, [r1, #16]
 800c13e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c142:	eba3 0901 	sub.w	r9, r3, r1
 800c146:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c14a:	1c7b      	adds	r3, r7, #1
 800c14c:	444b      	add	r3, r9
 800c14e:	106d      	asrs	r5, r5, #1
 800c150:	429d      	cmp	r5, r3
 800c152:	bf38      	it	cc
 800c154:	461d      	movcc	r5, r3
 800c156:	0553      	lsls	r3, r2, #21
 800c158:	d527      	bpl.n	800c1aa <__ssputs_r+0x8e>
 800c15a:	4629      	mov	r1, r5
 800c15c:	f7fe fc1c 	bl	800a998 <_malloc_r>
 800c160:	4606      	mov	r6, r0
 800c162:	b360      	cbz	r0, 800c1be <__ssputs_r+0xa2>
 800c164:	6921      	ldr	r1, [r4, #16]
 800c166:	464a      	mov	r2, r9
 800c168:	f7fd fd3f 	bl	8009bea <memcpy>
 800c16c:	89a3      	ldrh	r3, [r4, #12]
 800c16e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c176:	81a3      	strh	r3, [r4, #12]
 800c178:	6126      	str	r6, [r4, #16]
 800c17a:	6165      	str	r5, [r4, #20]
 800c17c:	444e      	add	r6, r9
 800c17e:	eba5 0509 	sub.w	r5, r5, r9
 800c182:	6026      	str	r6, [r4, #0]
 800c184:	60a5      	str	r5, [r4, #8]
 800c186:	463e      	mov	r6, r7
 800c188:	42be      	cmp	r6, r7
 800c18a:	d900      	bls.n	800c18e <__ssputs_r+0x72>
 800c18c:	463e      	mov	r6, r7
 800c18e:	6820      	ldr	r0, [r4, #0]
 800c190:	4632      	mov	r2, r6
 800c192:	4641      	mov	r1, r8
 800c194:	f000 fb6a 	bl	800c86c <memmove>
 800c198:	68a3      	ldr	r3, [r4, #8]
 800c19a:	1b9b      	subs	r3, r3, r6
 800c19c:	60a3      	str	r3, [r4, #8]
 800c19e:	6823      	ldr	r3, [r4, #0]
 800c1a0:	4433      	add	r3, r6
 800c1a2:	6023      	str	r3, [r4, #0]
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1aa:	462a      	mov	r2, r5
 800c1ac:	f000 ff41 	bl	800d032 <_realloc_r>
 800c1b0:	4606      	mov	r6, r0
 800c1b2:	2800      	cmp	r0, #0
 800c1b4:	d1e0      	bne.n	800c178 <__ssputs_r+0x5c>
 800c1b6:	6921      	ldr	r1, [r4, #16]
 800c1b8:	4650      	mov	r0, sl
 800c1ba:	f7fe fb79 	bl	800a8b0 <_free_r>
 800c1be:	230c      	movs	r3, #12
 800c1c0:	f8ca 3000 	str.w	r3, [sl]
 800c1c4:	89a3      	ldrh	r3, [r4, #12]
 800c1c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1ca:	81a3      	strh	r3, [r4, #12]
 800c1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d0:	e7e9      	b.n	800c1a6 <__ssputs_r+0x8a>
	...

0800c1d4 <_svfiprintf_r>:
 800c1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d8:	4698      	mov	r8, r3
 800c1da:	898b      	ldrh	r3, [r1, #12]
 800c1dc:	061b      	lsls	r3, r3, #24
 800c1de:	b09d      	sub	sp, #116	@ 0x74
 800c1e0:	4607      	mov	r7, r0
 800c1e2:	460d      	mov	r5, r1
 800c1e4:	4614      	mov	r4, r2
 800c1e6:	d510      	bpl.n	800c20a <_svfiprintf_r+0x36>
 800c1e8:	690b      	ldr	r3, [r1, #16]
 800c1ea:	b973      	cbnz	r3, 800c20a <_svfiprintf_r+0x36>
 800c1ec:	2140      	movs	r1, #64	@ 0x40
 800c1ee:	f7fe fbd3 	bl	800a998 <_malloc_r>
 800c1f2:	6028      	str	r0, [r5, #0]
 800c1f4:	6128      	str	r0, [r5, #16]
 800c1f6:	b930      	cbnz	r0, 800c206 <_svfiprintf_r+0x32>
 800c1f8:	230c      	movs	r3, #12
 800c1fa:	603b      	str	r3, [r7, #0]
 800c1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c200:	b01d      	add	sp, #116	@ 0x74
 800c202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c206:	2340      	movs	r3, #64	@ 0x40
 800c208:	616b      	str	r3, [r5, #20]
 800c20a:	2300      	movs	r3, #0
 800c20c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c20e:	2320      	movs	r3, #32
 800c210:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c214:	f8cd 800c 	str.w	r8, [sp, #12]
 800c218:	2330      	movs	r3, #48	@ 0x30
 800c21a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c3b8 <_svfiprintf_r+0x1e4>
 800c21e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c222:	f04f 0901 	mov.w	r9, #1
 800c226:	4623      	mov	r3, r4
 800c228:	469a      	mov	sl, r3
 800c22a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c22e:	b10a      	cbz	r2, 800c234 <_svfiprintf_r+0x60>
 800c230:	2a25      	cmp	r2, #37	@ 0x25
 800c232:	d1f9      	bne.n	800c228 <_svfiprintf_r+0x54>
 800c234:	ebba 0b04 	subs.w	fp, sl, r4
 800c238:	d00b      	beq.n	800c252 <_svfiprintf_r+0x7e>
 800c23a:	465b      	mov	r3, fp
 800c23c:	4622      	mov	r2, r4
 800c23e:	4629      	mov	r1, r5
 800c240:	4638      	mov	r0, r7
 800c242:	f7ff ff6b 	bl	800c11c <__ssputs_r>
 800c246:	3001      	adds	r0, #1
 800c248:	f000 80a7 	beq.w	800c39a <_svfiprintf_r+0x1c6>
 800c24c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c24e:	445a      	add	r2, fp
 800c250:	9209      	str	r2, [sp, #36]	@ 0x24
 800c252:	f89a 3000 	ldrb.w	r3, [sl]
 800c256:	2b00      	cmp	r3, #0
 800c258:	f000 809f 	beq.w	800c39a <_svfiprintf_r+0x1c6>
 800c25c:	2300      	movs	r3, #0
 800c25e:	f04f 32ff 	mov.w	r2, #4294967295
 800c262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c266:	f10a 0a01 	add.w	sl, sl, #1
 800c26a:	9304      	str	r3, [sp, #16]
 800c26c:	9307      	str	r3, [sp, #28]
 800c26e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c272:	931a      	str	r3, [sp, #104]	@ 0x68
 800c274:	4654      	mov	r4, sl
 800c276:	2205      	movs	r2, #5
 800c278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c27c:	484e      	ldr	r0, [pc, #312]	@ (800c3b8 <_svfiprintf_r+0x1e4>)
 800c27e:	f7f3 ffcf 	bl	8000220 <memchr>
 800c282:	9a04      	ldr	r2, [sp, #16]
 800c284:	b9d8      	cbnz	r0, 800c2be <_svfiprintf_r+0xea>
 800c286:	06d0      	lsls	r0, r2, #27
 800c288:	bf44      	itt	mi
 800c28a:	2320      	movmi	r3, #32
 800c28c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c290:	0711      	lsls	r1, r2, #28
 800c292:	bf44      	itt	mi
 800c294:	232b      	movmi	r3, #43	@ 0x2b
 800c296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c29a:	f89a 3000 	ldrb.w	r3, [sl]
 800c29e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2a0:	d015      	beq.n	800c2ce <_svfiprintf_r+0xfa>
 800c2a2:	9a07      	ldr	r2, [sp, #28]
 800c2a4:	4654      	mov	r4, sl
 800c2a6:	2000      	movs	r0, #0
 800c2a8:	f04f 0c0a 	mov.w	ip, #10
 800c2ac:	4621      	mov	r1, r4
 800c2ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2b2:	3b30      	subs	r3, #48	@ 0x30
 800c2b4:	2b09      	cmp	r3, #9
 800c2b6:	d94b      	bls.n	800c350 <_svfiprintf_r+0x17c>
 800c2b8:	b1b0      	cbz	r0, 800c2e8 <_svfiprintf_r+0x114>
 800c2ba:	9207      	str	r2, [sp, #28]
 800c2bc:	e014      	b.n	800c2e8 <_svfiprintf_r+0x114>
 800c2be:	eba0 0308 	sub.w	r3, r0, r8
 800c2c2:	fa09 f303 	lsl.w	r3, r9, r3
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	9304      	str	r3, [sp, #16]
 800c2ca:	46a2      	mov	sl, r4
 800c2cc:	e7d2      	b.n	800c274 <_svfiprintf_r+0xa0>
 800c2ce:	9b03      	ldr	r3, [sp, #12]
 800c2d0:	1d19      	adds	r1, r3, #4
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	9103      	str	r1, [sp, #12]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	bfbb      	ittet	lt
 800c2da:	425b      	neglt	r3, r3
 800c2dc:	f042 0202 	orrlt.w	r2, r2, #2
 800c2e0:	9307      	strge	r3, [sp, #28]
 800c2e2:	9307      	strlt	r3, [sp, #28]
 800c2e4:	bfb8      	it	lt
 800c2e6:	9204      	strlt	r2, [sp, #16]
 800c2e8:	7823      	ldrb	r3, [r4, #0]
 800c2ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2ec:	d10a      	bne.n	800c304 <_svfiprintf_r+0x130>
 800c2ee:	7863      	ldrb	r3, [r4, #1]
 800c2f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2f2:	d132      	bne.n	800c35a <_svfiprintf_r+0x186>
 800c2f4:	9b03      	ldr	r3, [sp, #12]
 800c2f6:	1d1a      	adds	r2, r3, #4
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	9203      	str	r2, [sp, #12]
 800c2fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c300:	3402      	adds	r4, #2
 800c302:	9305      	str	r3, [sp, #20]
 800c304:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c3c8 <_svfiprintf_r+0x1f4>
 800c308:	7821      	ldrb	r1, [r4, #0]
 800c30a:	2203      	movs	r2, #3
 800c30c:	4650      	mov	r0, sl
 800c30e:	f7f3 ff87 	bl	8000220 <memchr>
 800c312:	b138      	cbz	r0, 800c324 <_svfiprintf_r+0x150>
 800c314:	9b04      	ldr	r3, [sp, #16]
 800c316:	eba0 000a 	sub.w	r0, r0, sl
 800c31a:	2240      	movs	r2, #64	@ 0x40
 800c31c:	4082      	lsls	r2, r0
 800c31e:	4313      	orrs	r3, r2
 800c320:	3401      	adds	r4, #1
 800c322:	9304      	str	r3, [sp, #16]
 800c324:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c328:	4824      	ldr	r0, [pc, #144]	@ (800c3bc <_svfiprintf_r+0x1e8>)
 800c32a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c32e:	2206      	movs	r2, #6
 800c330:	f7f3 ff76 	bl	8000220 <memchr>
 800c334:	2800      	cmp	r0, #0
 800c336:	d036      	beq.n	800c3a6 <_svfiprintf_r+0x1d2>
 800c338:	4b21      	ldr	r3, [pc, #132]	@ (800c3c0 <_svfiprintf_r+0x1ec>)
 800c33a:	bb1b      	cbnz	r3, 800c384 <_svfiprintf_r+0x1b0>
 800c33c:	9b03      	ldr	r3, [sp, #12]
 800c33e:	3307      	adds	r3, #7
 800c340:	f023 0307 	bic.w	r3, r3, #7
 800c344:	3308      	adds	r3, #8
 800c346:	9303      	str	r3, [sp, #12]
 800c348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c34a:	4433      	add	r3, r6
 800c34c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c34e:	e76a      	b.n	800c226 <_svfiprintf_r+0x52>
 800c350:	fb0c 3202 	mla	r2, ip, r2, r3
 800c354:	460c      	mov	r4, r1
 800c356:	2001      	movs	r0, #1
 800c358:	e7a8      	b.n	800c2ac <_svfiprintf_r+0xd8>
 800c35a:	2300      	movs	r3, #0
 800c35c:	3401      	adds	r4, #1
 800c35e:	9305      	str	r3, [sp, #20]
 800c360:	4619      	mov	r1, r3
 800c362:	f04f 0c0a 	mov.w	ip, #10
 800c366:	4620      	mov	r0, r4
 800c368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c36c:	3a30      	subs	r2, #48	@ 0x30
 800c36e:	2a09      	cmp	r2, #9
 800c370:	d903      	bls.n	800c37a <_svfiprintf_r+0x1a6>
 800c372:	2b00      	cmp	r3, #0
 800c374:	d0c6      	beq.n	800c304 <_svfiprintf_r+0x130>
 800c376:	9105      	str	r1, [sp, #20]
 800c378:	e7c4      	b.n	800c304 <_svfiprintf_r+0x130>
 800c37a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c37e:	4604      	mov	r4, r0
 800c380:	2301      	movs	r3, #1
 800c382:	e7f0      	b.n	800c366 <_svfiprintf_r+0x192>
 800c384:	ab03      	add	r3, sp, #12
 800c386:	9300      	str	r3, [sp, #0]
 800c388:	462a      	mov	r2, r5
 800c38a:	4b0e      	ldr	r3, [pc, #56]	@ (800c3c4 <_svfiprintf_r+0x1f0>)
 800c38c:	a904      	add	r1, sp, #16
 800c38e:	4638      	mov	r0, r7
 800c390:	f7fc fbc8 	bl	8008b24 <_printf_float>
 800c394:	1c42      	adds	r2, r0, #1
 800c396:	4606      	mov	r6, r0
 800c398:	d1d6      	bne.n	800c348 <_svfiprintf_r+0x174>
 800c39a:	89ab      	ldrh	r3, [r5, #12]
 800c39c:	065b      	lsls	r3, r3, #25
 800c39e:	f53f af2d 	bmi.w	800c1fc <_svfiprintf_r+0x28>
 800c3a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3a4:	e72c      	b.n	800c200 <_svfiprintf_r+0x2c>
 800c3a6:	ab03      	add	r3, sp, #12
 800c3a8:	9300      	str	r3, [sp, #0]
 800c3aa:	462a      	mov	r2, r5
 800c3ac:	4b05      	ldr	r3, [pc, #20]	@ (800c3c4 <_svfiprintf_r+0x1f0>)
 800c3ae:	a904      	add	r1, sp, #16
 800c3b0:	4638      	mov	r0, r7
 800c3b2:	f7fc fe4f 	bl	8009054 <_printf_i>
 800c3b6:	e7ed      	b.n	800c394 <_svfiprintf_r+0x1c0>
 800c3b8:	0800d661 	.word	0x0800d661
 800c3bc:	0800d66b 	.word	0x0800d66b
 800c3c0:	08008b25 	.word	0x08008b25
 800c3c4:	0800c11d 	.word	0x0800c11d
 800c3c8:	0800d667 	.word	0x0800d667

0800c3cc <__sfputc_r>:
 800c3cc:	6893      	ldr	r3, [r2, #8]
 800c3ce:	3b01      	subs	r3, #1
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	b410      	push	{r4}
 800c3d4:	6093      	str	r3, [r2, #8]
 800c3d6:	da08      	bge.n	800c3ea <__sfputc_r+0x1e>
 800c3d8:	6994      	ldr	r4, [r2, #24]
 800c3da:	42a3      	cmp	r3, r4
 800c3dc:	db01      	blt.n	800c3e2 <__sfputc_r+0x16>
 800c3de:	290a      	cmp	r1, #10
 800c3e0:	d103      	bne.n	800c3ea <__sfputc_r+0x1e>
 800c3e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3e6:	f7fd baec 	b.w	80099c2 <__swbuf_r>
 800c3ea:	6813      	ldr	r3, [r2, #0]
 800c3ec:	1c58      	adds	r0, r3, #1
 800c3ee:	6010      	str	r0, [r2, #0]
 800c3f0:	7019      	strb	r1, [r3, #0]
 800c3f2:	4608      	mov	r0, r1
 800c3f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3f8:	4770      	bx	lr

0800c3fa <__sfputs_r>:
 800c3fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3fc:	4606      	mov	r6, r0
 800c3fe:	460f      	mov	r7, r1
 800c400:	4614      	mov	r4, r2
 800c402:	18d5      	adds	r5, r2, r3
 800c404:	42ac      	cmp	r4, r5
 800c406:	d101      	bne.n	800c40c <__sfputs_r+0x12>
 800c408:	2000      	movs	r0, #0
 800c40a:	e007      	b.n	800c41c <__sfputs_r+0x22>
 800c40c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c410:	463a      	mov	r2, r7
 800c412:	4630      	mov	r0, r6
 800c414:	f7ff ffda 	bl	800c3cc <__sfputc_r>
 800c418:	1c43      	adds	r3, r0, #1
 800c41a:	d1f3      	bne.n	800c404 <__sfputs_r+0xa>
 800c41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c420 <_vfiprintf_r>:
 800c420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c424:	460d      	mov	r5, r1
 800c426:	b09d      	sub	sp, #116	@ 0x74
 800c428:	4614      	mov	r4, r2
 800c42a:	4698      	mov	r8, r3
 800c42c:	4606      	mov	r6, r0
 800c42e:	b118      	cbz	r0, 800c438 <_vfiprintf_r+0x18>
 800c430:	6a03      	ldr	r3, [r0, #32]
 800c432:	b90b      	cbnz	r3, 800c438 <_vfiprintf_r+0x18>
 800c434:	f7fd f9ce 	bl	80097d4 <__sinit>
 800c438:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c43a:	07d9      	lsls	r1, r3, #31
 800c43c:	d405      	bmi.n	800c44a <_vfiprintf_r+0x2a>
 800c43e:	89ab      	ldrh	r3, [r5, #12]
 800c440:	059a      	lsls	r2, r3, #22
 800c442:	d402      	bmi.n	800c44a <_vfiprintf_r+0x2a>
 800c444:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c446:	f7fd fbce 	bl	8009be6 <__retarget_lock_acquire_recursive>
 800c44a:	89ab      	ldrh	r3, [r5, #12]
 800c44c:	071b      	lsls	r3, r3, #28
 800c44e:	d501      	bpl.n	800c454 <_vfiprintf_r+0x34>
 800c450:	692b      	ldr	r3, [r5, #16]
 800c452:	b99b      	cbnz	r3, 800c47c <_vfiprintf_r+0x5c>
 800c454:	4629      	mov	r1, r5
 800c456:	4630      	mov	r0, r6
 800c458:	f7fd faf2 	bl	8009a40 <__swsetup_r>
 800c45c:	b170      	cbz	r0, 800c47c <_vfiprintf_r+0x5c>
 800c45e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c460:	07dc      	lsls	r4, r3, #31
 800c462:	d504      	bpl.n	800c46e <_vfiprintf_r+0x4e>
 800c464:	f04f 30ff 	mov.w	r0, #4294967295
 800c468:	b01d      	add	sp, #116	@ 0x74
 800c46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c46e:	89ab      	ldrh	r3, [r5, #12]
 800c470:	0598      	lsls	r0, r3, #22
 800c472:	d4f7      	bmi.n	800c464 <_vfiprintf_r+0x44>
 800c474:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c476:	f7fd fbb7 	bl	8009be8 <__retarget_lock_release_recursive>
 800c47a:	e7f3      	b.n	800c464 <_vfiprintf_r+0x44>
 800c47c:	2300      	movs	r3, #0
 800c47e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c480:	2320      	movs	r3, #32
 800c482:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c486:	f8cd 800c 	str.w	r8, [sp, #12]
 800c48a:	2330      	movs	r3, #48	@ 0x30
 800c48c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c63c <_vfiprintf_r+0x21c>
 800c490:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c494:	f04f 0901 	mov.w	r9, #1
 800c498:	4623      	mov	r3, r4
 800c49a:	469a      	mov	sl, r3
 800c49c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4a0:	b10a      	cbz	r2, 800c4a6 <_vfiprintf_r+0x86>
 800c4a2:	2a25      	cmp	r2, #37	@ 0x25
 800c4a4:	d1f9      	bne.n	800c49a <_vfiprintf_r+0x7a>
 800c4a6:	ebba 0b04 	subs.w	fp, sl, r4
 800c4aa:	d00b      	beq.n	800c4c4 <_vfiprintf_r+0xa4>
 800c4ac:	465b      	mov	r3, fp
 800c4ae:	4622      	mov	r2, r4
 800c4b0:	4629      	mov	r1, r5
 800c4b2:	4630      	mov	r0, r6
 800c4b4:	f7ff ffa1 	bl	800c3fa <__sfputs_r>
 800c4b8:	3001      	adds	r0, #1
 800c4ba:	f000 80a7 	beq.w	800c60c <_vfiprintf_r+0x1ec>
 800c4be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4c0:	445a      	add	r2, fp
 800c4c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4c4:	f89a 3000 	ldrb.w	r3, [sl]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	f000 809f 	beq.w	800c60c <_vfiprintf_r+0x1ec>
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c4d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4d8:	f10a 0a01 	add.w	sl, sl, #1
 800c4dc:	9304      	str	r3, [sp, #16]
 800c4de:	9307      	str	r3, [sp, #28]
 800c4e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c4e4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c4e6:	4654      	mov	r4, sl
 800c4e8:	2205      	movs	r2, #5
 800c4ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4ee:	4853      	ldr	r0, [pc, #332]	@ (800c63c <_vfiprintf_r+0x21c>)
 800c4f0:	f7f3 fe96 	bl	8000220 <memchr>
 800c4f4:	9a04      	ldr	r2, [sp, #16]
 800c4f6:	b9d8      	cbnz	r0, 800c530 <_vfiprintf_r+0x110>
 800c4f8:	06d1      	lsls	r1, r2, #27
 800c4fa:	bf44      	itt	mi
 800c4fc:	2320      	movmi	r3, #32
 800c4fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c502:	0713      	lsls	r3, r2, #28
 800c504:	bf44      	itt	mi
 800c506:	232b      	movmi	r3, #43	@ 0x2b
 800c508:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c50c:	f89a 3000 	ldrb.w	r3, [sl]
 800c510:	2b2a      	cmp	r3, #42	@ 0x2a
 800c512:	d015      	beq.n	800c540 <_vfiprintf_r+0x120>
 800c514:	9a07      	ldr	r2, [sp, #28]
 800c516:	4654      	mov	r4, sl
 800c518:	2000      	movs	r0, #0
 800c51a:	f04f 0c0a 	mov.w	ip, #10
 800c51e:	4621      	mov	r1, r4
 800c520:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c524:	3b30      	subs	r3, #48	@ 0x30
 800c526:	2b09      	cmp	r3, #9
 800c528:	d94b      	bls.n	800c5c2 <_vfiprintf_r+0x1a2>
 800c52a:	b1b0      	cbz	r0, 800c55a <_vfiprintf_r+0x13a>
 800c52c:	9207      	str	r2, [sp, #28]
 800c52e:	e014      	b.n	800c55a <_vfiprintf_r+0x13a>
 800c530:	eba0 0308 	sub.w	r3, r0, r8
 800c534:	fa09 f303 	lsl.w	r3, r9, r3
 800c538:	4313      	orrs	r3, r2
 800c53a:	9304      	str	r3, [sp, #16]
 800c53c:	46a2      	mov	sl, r4
 800c53e:	e7d2      	b.n	800c4e6 <_vfiprintf_r+0xc6>
 800c540:	9b03      	ldr	r3, [sp, #12]
 800c542:	1d19      	adds	r1, r3, #4
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	9103      	str	r1, [sp, #12]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	bfbb      	ittet	lt
 800c54c:	425b      	neglt	r3, r3
 800c54e:	f042 0202 	orrlt.w	r2, r2, #2
 800c552:	9307      	strge	r3, [sp, #28]
 800c554:	9307      	strlt	r3, [sp, #28]
 800c556:	bfb8      	it	lt
 800c558:	9204      	strlt	r2, [sp, #16]
 800c55a:	7823      	ldrb	r3, [r4, #0]
 800c55c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c55e:	d10a      	bne.n	800c576 <_vfiprintf_r+0x156>
 800c560:	7863      	ldrb	r3, [r4, #1]
 800c562:	2b2a      	cmp	r3, #42	@ 0x2a
 800c564:	d132      	bne.n	800c5cc <_vfiprintf_r+0x1ac>
 800c566:	9b03      	ldr	r3, [sp, #12]
 800c568:	1d1a      	adds	r2, r3, #4
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	9203      	str	r2, [sp, #12]
 800c56e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c572:	3402      	adds	r4, #2
 800c574:	9305      	str	r3, [sp, #20]
 800c576:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c64c <_vfiprintf_r+0x22c>
 800c57a:	7821      	ldrb	r1, [r4, #0]
 800c57c:	2203      	movs	r2, #3
 800c57e:	4650      	mov	r0, sl
 800c580:	f7f3 fe4e 	bl	8000220 <memchr>
 800c584:	b138      	cbz	r0, 800c596 <_vfiprintf_r+0x176>
 800c586:	9b04      	ldr	r3, [sp, #16]
 800c588:	eba0 000a 	sub.w	r0, r0, sl
 800c58c:	2240      	movs	r2, #64	@ 0x40
 800c58e:	4082      	lsls	r2, r0
 800c590:	4313      	orrs	r3, r2
 800c592:	3401      	adds	r4, #1
 800c594:	9304      	str	r3, [sp, #16]
 800c596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c59a:	4829      	ldr	r0, [pc, #164]	@ (800c640 <_vfiprintf_r+0x220>)
 800c59c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c5a0:	2206      	movs	r2, #6
 800c5a2:	f7f3 fe3d 	bl	8000220 <memchr>
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	d03f      	beq.n	800c62a <_vfiprintf_r+0x20a>
 800c5aa:	4b26      	ldr	r3, [pc, #152]	@ (800c644 <_vfiprintf_r+0x224>)
 800c5ac:	bb1b      	cbnz	r3, 800c5f6 <_vfiprintf_r+0x1d6>
 800c5ae:	9b03      	ldr	r3, [sp, #12]
 800c5b0:	3307      	adds	r3, #7
 800c5b2:	f023 0307 	bic.w	r3, r3, #7
 800c5b6:	3308      	adds	r3, #8
 800c5b8:	9303      	str	r3, [sp, #12]
 800c5ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5bc:	443b      	add	r3, r7
 800c5be:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5c0:	e76a      	b.n	800c498 <_vfiprintf_r+0x78>
 800c5c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5c6:	460c      	mov	r4, r1
 800c5c8:	2001      	movs	r0, #1
 800c5ca:	e7a8      	b.n	800c51e <_vfiprintf_r+0xfe>
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	3401      	adds	r4, #1
 800c5d0:	9305      	str	r3, [sp, #20]
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	f04f 0c0a 	mov.w	ip, #10
 800c5d8:	4620      	mov	r0, r4
 800c5da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5de:	3a30      	subs	r2, #48	@ 0x30
 800c5e0:	2a09      	cmp	r2, #9
 800c5e2:	d903      	bls.n	800c5ec <_vfiprintf_r+0x1cc>
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d0c6      	beq.n	800c576 <_vfiprintf_r+0x156>
 800c5e8:	9105      	str	r1, [sp, #20]
 800c5ea:	e7c4      	b.n	800c576 <_vfiprintf_r+0x156>
 800c5ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5f0:	4604      	mov	r4, r0
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	e7f0      	b.n	800c5d8 <_vfiprintf_r+0x1b8>
 800c5f6:	ab03      	add	r3, sp, #12
 800c5f8:	9300      	str	r3, [sp, #0]
 800c5fa:	462a      	mov	r2, r5
 800c5fc:	4b12      	ldr	r3, [pc, #72]	@ (800c648 <_vfiprintf_r+0x228>)
 800c5fe:	a904      	add	r1, sp, #16
 800c600:	4630      	mov	r0, r6
 800c602:	f7fc fa8f 	bl	8008b24 <_printf_float>
 800c606:	4607      	mov	r7, r0
 800c608:	1c78      	adds	r0, r7, #1
 800c60a:	d1d6      	bne.n	800c5ba <_vfiprintf_r+0x19a>
 800c60c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c60e:	07d9      	lsls	r1, r3, #31
 800c610:	d405      	bmi.n	800c61e <_vfiprintf_r+0x1fe>
 800c612:	89ab      	ldrh	r3, [r5, #12]
 800c614:	059a      	lsls	r2, r3, #22
 800c616:	d402      	bmi.n	800c61e <_vfiprintf_r+0x1fe>
 800c618:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c61a:	f7fd fae5 	bl	8009be8 <__retarget_lock_release_recursive>
 800c61e:	89ab      	ldrh	r3, [r5, #12]
 800c620:	065b      	lsls	r3, r3, #25
 800c622:	f53f af1f 	bmi.w	800c464 <_vfiprintf_r+0x44>
 800c626:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c628:	e71e      	b.n	800c468 <_vfiprintf_r+0x48>
 800c62a:	ab03      	add	r3, sp, #12
 800c62c:	9300      	str	r3, [sp, #0]
 800c62e:	462a      	mov	r2, r5
 800c630:	4b05      	ldr	r3, [pc, #20]	@ (800c648 <_vfiprintf_r+0x228>)
 800c632:	a904      	add	r1, sp, #16
 800c634:	4630      	mov	r0, r6
 800c636:	f7fc fd0d 	bl	8009054 <_printf_i>
 800c63a:	e7e4      	b.n	800c606 <_vfiprintf_r+0x1e6>
 800c63c:	0800d661 	.word	0x0800d661
 800c640:	0800d66b 	.word	0x0800d66b
 800c644:	08008b25 	.word	0x08008b25
 800c648:	0800c3fb 	.word	0x0800c3fb
 800c64c:	0800d667 	.word	0x0800d667

0800c650 <__sflush_r>:
 800c650:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c658:	0716      	lsls	r6, r2, #28
 800c65a:	4605      	mov	r5, r0
 800c65c:	460c      	mov	r4, r1
 800c65e:	d454      	bmi.n	800c70a <__sflush_r+0xba>
 800c660:	684b      	ldr	r3, [r1, #4]
 800c662:	2b00      	cmp	r3, #0
 800c664:	dc02      	bgt.n	800c66c <__sflush_r+0x1c>
 800c666:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c668:	2b00      	cmp	r3, #0
 800c66a:	dd48      	ble.n	800c6fe <__sflush_r+0xae>
 800c66c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c66e:	2e00      	cmp	r6, #0
 800c670:	d045      	beq.n	800c6fe <__sflush_r+0xae>
 800c672:	2300      	movs	r3, #0
 800c674:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c678:	682f      	ldr	r7, [r5, #0]
 800c67a:	6a21      	ldr	r1, [r4, #32]
 800c67c:	602b      	str	r3, [r5, #0]
 800c67e:	d030      	beq.n	800c6e2 <__sflush_r+0x92>
 800c680:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c682:	89a3      	ldrh	r3, [r4, #12]
 800c684:	0759      	lsls	r1, r3, #29
 800c686:	d505      	bpl.n	800c694 <__sflush_r+0x44>
 800c688:	6863      	ldr	r3, [r4, #4]
 800c68a:	1ad2      	subs	r2, r2, r3
 800c68c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c68e:	b10b      	cbz	r3, 800c694 <__sflush_r+0x44>
 800c690:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c692:	1ad2      	subs	r2, r2, r3
 800c694:	2300      	movs	r3, #0
 800c696:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c698:	6a21      	ldr	r1, [r4, #32]
 800c69a:	4628      	mov	r0, r5
 800c69c:	47b0      	blx	r6
 800c69e:	1c43      	adds	r3, r0, #1
 800c6a0:	89a3      	ldrh	r3, [r4, #12]
 800c6a2:	d106      	bne.n	800c6b2 <__sflush_r+0x62>
 800c6a4:	6829      	ldr	r1, [r5, #0]
 800c6a6:	291d      	cmp	r1, #29
 800c6a8:	d82b      	bhi.n	800c702 <__sflush_r+0xb2>
 800c6aa:	4a2a      	ldr	r2, [pc, #168]	@ (800c754 <__sflush_r+0x104>)
 800c6ac:	410a      	asrs	r2, r1
 800c6ae:	07d6      	lsls	r6, r2, #31
 800c6b0:	d427      	bmi.n	800c702 <__sflush_r+0xb2>
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	6062      	str	r2, [r4, #4]
 800c6b6:	04d9      	lsls	r1, r3, #19
 800c6b8:	6922      	ldr	r2, [r4, #16]
 800c6ba:	6022      	str	r2, [r4, #0]
 800c6bc:	d504      	bpl.n	800c6c8 <__sflush_r+0x78>
 800c6be:	1c42      	adds	r2, r0, #1
 800c6c0:	d101      	bne.n	800c6c6 <__sflush_r+0x76>
 800c6c2:	682b      	ldr	r3, [r5, #0]
 800c6c4:	b903      	cbnz	r3, 800c6c8 <__sflush_r+0x78>
 800c6c6:	6560      	str	r0, [r4, #84]	@ 0x54
 800c6c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c6ca:	602f      	str	r7, [r5, #0]
 800c6cc:	b1b9      	cbz	r1, 800c6fe <__sflush_r+0xae>
 800c6ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c6d2:	4299      	cmp	r1, r3
 800c6d4:	d002      	beq.n	800c6dc <__sflush_r+0x8c>
 800c6d6:	4628      	mov	r0, r5
 800c6d8:	f7fe f8ea 	bl	800a8b0 <_free_r>
 800c6dc:	2300      	movs	r3, #0
 800c6de:	6363      	str	r3, [r4, #52]	@ 0x34
 800c6e0:	e00d      	b.n	800c6fe <__sflush_r+0xae>
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	4628      	mov	r0, r5
 800c6e6:	47b0      	blx	r6
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	1c50      	adds	r0, r2, #1
 800c6ec:	d1c9      	bne.n	800c682 <__sflush_r+0x32>
 800c6ee:	682b      	ldr	r3, [r5, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d0c6      	beq.n	800c682 <__sflush_r+0x32>
 800c6f4:	2b1d      	cmp	r3, #29
 800c6f6:	d001      	beq.n	800c6fc <__sflush_r+0xac>
 800c6f8:	2b16      	cmp	r3, #22
 800c6fa:	d11e      	bne.n	800c73a <__sflush_r+0xea>
 800c6fc:	602f      	str	r7, [r5, #0]
 800c6fe:	2000      	movs	r0, #0
 800c700:	e022      	b.n	800c748 <__sflush_r+0xf8>
 800c702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c706:	b21b      	sxth	r3, r3
 800c708:	e01b      	b.n	800c742 <__sflush_r+0xf2>
 800c70a:	690f      	ldr	r7, [r1, #16]
 800c70c:	2f00      	cmp	r7, #0
 800c70e:	d0f6      	beq.n	800c6fe <__sflush_r+0xae>
 800c710:	0793      	lsls	r3, r2, #30
 800c712:	680e      	ldr	r6, [r1, #0]
 800c714:	bf08      	it	eq
 800c716:	694b      	ldreq	r3, [r1, #20]
 800c718:	600f      	str	r7, [r1, #0]
 800c71a:	bf18      	it	ne
 800c71c:	2300      	movne	r3, #0
 800c71e:	eba6 0807 	sub.w	r8, r6, r7
 800c722:	608b      	str	r3, [r1, #8]
 800c724:	f1b8 0f00 	cmp.w	r8, #0
 800c728:	dde9      	ble.n	800c6fe <__sflush_r+0xae>
 800c72a:	6a21      	ldr	r1, [r4, #32]
 800c72c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c72e:	4643      	mov	r3, r8
 800c730:	463a      	mov	r2, r7
 800c732:	4628      	mov	r0, r5
 800c734:	47b0      	blx	r6
 800c736:	2800      	cmp	r0, #0
 800c738:	dc08      	bgt.n	800c74c <__sflush_r+0xfc>
 800c73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c73e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c742:	81a3      	strh	r3, [r4, #12]
 800c744:	f04f 30ff 	mov.w	r0, #4294967295
 800c748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c74c:	4407      	add	r7, r0
 800c74e:	eba8 0800 	sub.w	r8, r8, r0
 800c752:	e7e7      	b.n	800c724 <__sflush_r+0xd4>
 800c754:	dfbffffe 	.word	0xdfbffffe

0800c758 <_fflush_r>:
 800c758:	b538      	push	{r3, r4, r5, lr}
 800c75a:	690b      	ldr	r3, [r1, #16]
 800c75c:	4605      	mov	r5, r0
 800c75e:	460c      	mov	r4, r1
 800c760:	b913      	cbnz	r3, 800c768 <_fflush_r+0x10>
 800c762:	2500      	movs	r5, #0
 800c764:	4628      	mov	r0, r5
 800c766:	bd38      	pop	{r3, r4, r5, pc}
 800c768:	b118      	cbz	r0, 800c772 <_fflush_r+0x1a>
 800c76a:	6a03      	ldr	r3, [r0, #32]
 800c76c:	b90b      	cbnz	r3, 800c772 <_fflush_r+0x1a>
 800c76e:	f7fd f831 	bl	80097d4 <__sinit>
 800c772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d0f3      	beq.n	800c762 <_fflush_r+0xa>
 800c77a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c77c:	07d0      	lsls	r0, r2, #31
 800c77e:	d404      	bmi.n	800c78a <_fflush_r+0x32>
 800c780:	0599      	lsls	r1, r3, #22
 800c782:	d402      	bmi.n	800c78a <_fflush_r+0x32>
 800c784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c786:	f7fd fa2e 	bl	8009be6 <__retarget_lock_acquire_recursive>
 800c78a:	4628      	mov	r0, r5
 800c78c:	4621      	mov	r1, r4
 800c78e:	f7ff ff5f 	bl	800c650 <__sflush_r>
 800c792:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c794:	07da      	lsls	r2, r3, #31
 800c796:	4605      	mov	r5, r0
 800c798:	d4e4      	bmi.n	800c764 <_fflush_r+0xc>
 800c79a:	89a3      	ldrh	r3, [r4, #12]
 800c79c:	059b      	lsls	r3, r3, #22
 800c79e:	d4e1      	bmi.n	800c764 <_fflush_r+0xc>
 800c7a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7a2:	f7fd fa21 	bl	8009be8 <__retarget_lock_release_recursive>
 800c7a6:	e7dd      	b.n	800c764 <_fflush_r+0xc>

0800c7a8 <__swhatbuf_r>:
 800c7a8:	b570      	push	{r4, r5, r6, lr}
 800c7aa:	460c      	mov	r4, r1
 800c7ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7b0:	2900      	cmp	r1, #0
 800c7b2:	b096      	sub	sp, #88	@ 0x58
 800c7b4:	4615      	mov	r5, r2
 800c7b6:	461e      	mov	r6, r3
 800c7b8:	da0d      	bge.n	800c7d6 <__swhatbuf_r+0x2e>
 800c7ba:	89a3      	ldrh	r3, [r4, #12]
 800c7bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c7c0:	f04f 0100 	mov.w	r1, #0
 800c7c4:	bf14      	ite	ne
 800c7c6:	2340      	movne	r3, #64	@ 0x40
 800c7c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c7cc:	2000      	movs	r0, #0
 800c7ce:	6031      	str	r1, [r6, #0]
 800c7d0:	602b      	str	r3, [r5, #0]
 800c7d2:	b016      	add	sp, #88	@ 0x58
 800c7d4:	bd70      	pop	{r4, r5, r6, pc}
 800c7d6:	466a      	mov	r2, sp
 800c7d8:	f000 f874 	bl	800c8c4 <_fstat_r>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	dbec      	blt.n	800c7ba <__swhatbuf_r+0x12>
 800c7e0:	9901      	ldr	r1, [sp, #4]
 800c7e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c7e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c7ea:	4259      	negs	r1, r3
 800c7ec:	4159      	adcs	r1, r3
 800c7ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c7f2:	e7eb      	b.n	800c7cc <__swhatbuf_r+0x24>

0800c7f4 <__smakebuf_r>:
 800c7f4:	898b      	ldrh	r3, [r1, #12]
 800c7f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7f8:	079d      	lsls	r5, r3, #30
 800c7fa:	4606      	mov	r6, r0
 800c7fc:	460c      	mov	r4, r1
 800c7fe:	d507      	bpl.n	800c810 <__smakebuf_r+0x1c>
 800c800:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c804:	6023      	str	r3, [r4, #0]
 800c806:	6123      	str	r3, [r4, #16]
 800c808:	2301      	movs	r3, #1
 800c80a:	6163      	str	r3, [r4, #20]
 800c80c:	b003      	add	sp, #12
 800c80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c810:	ab01      	add	r3, sp, #4
 800c812:	466a      	mov	r2, sp
 800c814:	f7ff ffc8 	bl	800c7a8 <__swhatbuf_r>
 800c818:	9f00      	ldr	r7, [sp, #0]
 800c81a:	4605      	mov	r5, r0
 800c81c:	4639      	mov	r1, r7
 800c81e:	4630      	mov	r0, r6
 800c820:	f7fe f8ba 	bl	800a998 <_malloc_r>
 800c824:	b948      	cbnz	r0, 800c83a <__smakebuf_r+0x46>
 800c826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c82a:	059a      	lsls	r2, r3, #22
 800c82c:	d4ee      	bmi.n	800c80c <__smakebuf_r+0x18>
 800c82e:	f023 0303 	bic.w	r3, r3, #3
 800c832:	f043 0302 	orr.w	r3, r3, #2
 800c836:	81a3      	strh	r3, [r4, #12]
 800c838:	e7e2      	b.n	800c800 <__smakebuf_r+0xc>
 800c83a:	89a3      	ldrh	r3, [r4, #12]
 800c83c:	6020      	str	r0, [r4, #0]
 800c83e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c842:	81a3      	strh	r3, [r4, #12]
 800c844:	9b01      	ldr	r3, [sp, #4]
 800c846:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c84a:	b15b      	cbz	r3, 800c864 <__smakebuf_r+0x70>
 800c84c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c850:	4630      	mov	r0, r6
 800c852:	f000 f849 	bl	800c8e8 <_isatty_r>
 800c856:	b128      	cbz	r0, 800c864 <__smakebuf_r+0x70>
 800c858:	89a3      	ldrh	r3, [r4, #12]
 800c85a:	f023 0303 	bic.w	r3, r3, #3
 800c85e:	f043 0301 	orr.w	r3, r3, #1
 800c862:	81a3      	strh	r3, [r4, #12]
 800c864:	89a3      	ldrh	r3, [r4, #12]
 800c866:	431d      	orrs	r5, r3
 800c868:	81a5      	strh	r5, [r4, #12]
 800c86a:	e7cf      	b.n	800c80c <__smakebuf_r+0x18>

0800c86c <memmove>:
 800c86c:	4288      	cmp	r0, r1
 800c86e:	b510      	push	{r4, lr}
 800c870:	eb01 0402 	add.w	r4, r1, r2
 800c874:	d902      	bls.n	800c87c <memmove+0x10>
 800c876:	4284      	cmp	r4, r0
 800c878:	4623      	mov	r3, r4
 800c87a:	d807      	bhi.n	800c88c <memmove+0x20>
 800c87c:	1e43      	subs	r3, r0, #1
 800c87e:	42a1      	cmp	r1, r4
 800c880:	d008      	beq.n	800c894 <memmove+0x28>
 800c882:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c886:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c88a:	e7f8      	b.n	800c87e <memmove+0x12>
 800c88c:	4402      	add	r2, r0
 800c88e:	4601      	mov	r1, r0
 800c890:	428a      	cmp	r2, r1
 800c892:	d100      	bne.n	800c896 <memmove+0x2a>
 800c894:	bd10      	pop	{r4, pc}
 800c896:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c89a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c89e:	e7f7      	b.n	800c890 <memmove+0x24>

0800c8a0 <strncmp>:
 800c8a0:	b510      	push	{r4, lr}
 800c8a2:	b16a      	cbz	r2, 800c8c0 <strncmp+0x20>
 800c8a4:	3901      	subs	r1, #1
 800c8a6:	1884      	adds	r4, r0, r2
 800c8a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d103      	bne.n	800c8bc <strncmp+0x1c>
 800c8b4:	42a0      	cmp	r0, r4
 800c8b6:	d001      	beq.n	800c8bc <strncmp+0x1c>
 800c8b8:	2a00      	cmp	r2, #0
 800c8ba:	d1f5      	bne.n	800c8a8 <strncmp+0x8>
 800c8bc:	1ad0      	subs	r0, r2, r3
 800c8be:	bd10      	pop	{r4, pc}
 800c8c0:	4610      	mov	r0, r2
 800c8c2:	e7fc      	b.n	800c8be <strncmp+0x1e>

0800c8c4 <_fstat_r>:
 800c8c4:	b538      	push	{r3, r4, r5, lr}
 800c8c6:	4d07      	ldr	r5, [pc, #28]	@ (800c8e4 <_fstat_r+0x20>)
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	4608      	mov	r0, r1
 800c8ce:	4611      	mov	r1, r2
 800c8d0:	602b      	str	r3, [r5, #0]
 800c8d2:	f7f4 ffe7 	bl	80018a4 <_fstat>
 800c8d6:	1c43      	adds	r3, r0, #1
 800c8d8:	d102      	bne.n	800c8e0 <_fstat_r+0x1c>
 800c8da:	682b      	ldr	r3, [r5, #0]
 800c8dc:	b103      	cbz	r3, 800c8e0 <_fstat_r+0x1c>
 800c8de:	6023      	str	r3, [r4, #0]
 800c8e0:	bd38      	pop	{r3, r4, r5, pc}
 800c8e2:	bf00      	nop
 800c8e4:	2000419c 	.word	0x2000419c

0800c8e8 <_isatty_r>:
 800c8e8:	b538      	push	{r3, r4, r5, lr}
 800c8ea:	4d06      	ldr	r5, [pc, #24]	@ (800c904 <_isatty_r+0x1c>)
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	4604      	mov	r4, r0
 800c8f0:	4608      	mov	r0, r1
 800c8f2:	602b      	str	r3, [r5, #0]
 800c8f4:	f7f4 ffe6 	bl	80018c4 <_isatty>
 800c8f8:	1c43      	adds	r3, r0, #1
 800c8fa:	d102      	bne.n	800c902 <_isatty_r+0x1a>
 800c8fc:	682b      	ldr	r3, [r5, #0]
 800c8fe:	b103      	cbz	r3, 800c902 <_isatty_r+0x1a>
 800c900:	6023      	str	r3, [r4, #0]
 800c902:	bd38      	pop	{r3, r4, r5, pc}
 800c904:	2000419c 	.word	0x2000419c

0800c908 <_sbrk_r>:
 800c908:	b538      	push	{r3, r4, r5, lr}
 800c90a:	4d06      	ldr	r5, [pc, #24]	@ (800c924 <_sbrk_r+0x1c>)
 800c90c:	2300      	movs	r3, #0
 800c90e:	4604      	mov	r4, r0
 800c910:	4608      	mov	r0, r1
 800c912:	602b      	str	r3, [r5, #0]
 800c914:	f7f4 ffee 	bl	80018f4 <_sbrk>
 800c918:	1c43      	adds	r3, r0, #1
 800c91a:	d102      	bne.n	800c922 <_sbrk_r+0x1a>
 800c91c:	682b      	ldr	r3, [r5, #0]
 800c91e:	b103      	cbz	r3, 800c922 <_sbrk_r+0x1a>
 800c920:	6023      	str	r3, [r4, #0]
 800c922:	bd38      	pop	{r3, r4, r5, pc}
 800c924:	2000419c 	.word	0x2000419c

0800c928 <nan>:
 800c928:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c930 <nan+0x8>
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	00000000 	.word	0x00000000
 800c934:	7ff80000 	.word	0x7ff80000

0800c938 <__assert_func>:
 800c938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c93a:	4614      	mov	r4, r2
 800c93c:	461a      	mov	r2, r3
 800c93e:	4b09      	ldr	r3, [pc, #36]	@ (800c964 <__assert_func+0x2c>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4605      	mov	r5, r0
 800c944:	68d8      	ldr	r0, [r3, #12]
 800c946:	b954      	cbnz	r4, 800c95e <__assert_func+0x26>
 800c948:	4b07      	ldr	r3, [pc, #28]	@ (800c968 <__assert_func+0x30>)
 800c94a:	461c      	mov	r4, r3
 800c94c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c950:	9100      	str	r1, [sp, #0]
 800c952:	462b      	mov	r3, r5
 800c954:	4905      	ldr	r1, [pc, #20]	@ (800c96c <__assert_func+0x34>)
 800c956:	f000 fba7 	bl	800d0a8 <fiprintf>
 800c95a:	f000 fbb7 	bl	800d0cc <abort>
 800c95e:	4b04      	ldr	r3, [pc, #16]	@ (800c970 <__assert_func+0x38>)
 800c960:	e7f4      	b.n	800c94c <__assert_func+0x14>
 800c962:	bf00      	nop
 800c964:	2000001c 	.word	0x2000001c
 800c968:	0800d6b5 	.word	0x0800d6b5
 800c96c:	0800d687 	.word	0x0800d687
 800c970:	0800d67a 	.word	0x0800d67a

0800c974 <_calloc_r>:
 800c974:	b570      	push	{r4, r5, r6, lr}
 800c976:	fba1 5402 	umull	r5, r4, r1, r2
 800c97a:	b93c      	cbnz	r4, 800c98c <_calloc_r+0x18>
 800c97c:	4629      	mov	r1, r5
 800c97e:	f7fe f80b 	bl	800a998 <_malloc_r>
 800c982:	4606      	mov	r6, r0
 800c984:	b928      	cbnz	r0, 800c992 <_calloc_r+0x1e>
 800c986:	2600      	movs	r6, #0
 800c988:	4630      	mov	r0, r6
 800c98a:	bd70      	pop	{r4, r5, r6, pc}
 800c98c:	220c      	movs	r2, #12
 800c98e:	6002      	str	r2, [r0, #0]
 800c990:	e7f9      	b.n	800c986 <_calloc_r+0x12>
 800c992:	462a      	mov	r2, r5
 800c994:	4621      	mov	r1, r4
 800c996:	f7fd f8a9 	bl	8009aec <memset>
 800c99a:	e7f5      	b.n	800c988 <_calloc_r+0x14>

0800c99c <rshift>:
 800c99c:	6903      	ldr	r3, [r0, #16]
 800c99e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c9a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c9aa:	f100 0414 	add.w	r4, r0, #20
 800c9ae:	dd45      	ble.n	800ca3c <rshift+0xa0>
 800c9b0:	f011 011f 	ands.w	r1, r1, #31
 800c9b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c9b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c9bc:	d10c      	bne.n	800c9d8 <rshift+0x3c>
 800c9be:	f100 0710 	add.w	r7, r0, #16
 800c9c2:	4629      	mov	r1, r5
 800c9c4:	42b1      	cmp	r1, r6
 800c9c6:	d334      	bcc.n	800ca32 <rshift+0x96>
 800c9c8:	1a9b      	subs	r3, r3, r2
 800c9ca:	009b      	lsls	r3, r3, #2
 800c9cc:	1eea      	subs	r2, r5, #3
 800c9ce:	4296      	cmp	r6, r2
 800c9d0:	bf38      	it	cc
 800c9d2:	2300      	movcc	r3, #0
 800c9d4:	4423      	add	r3, r4
 800c9d6:	e015      	b.n	800ca04 <rshift+0x68>
 800c9d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c9dc:	f1c1 0820 	rsb	r8, r1, #32
 800c9e0:	40cf      	lsrs	r7, r1
 800c9e2:	f105 0e04 	add.w	lr, r5, #4
 800c9e6:	46a1      	mov	r9, r4
 800c9e8:	4576      	cmp	r6, lr
 800c9ea:	46f4      	mov	ip, lr
 800c9ec:	d815      	bhi.n	800ca1a <rshift+0x7e>
 800c9ee:	1a9a      	subs	r2, r3, r2
 800c9f0:	0092      	lsls	r2, r2, #2
 800c9f2:	3a04      	subs	r2, #4
 800c9f4:	3501      	adds	r5, #1
 800c9f6:	42ae      	cmp	r6, r5
 800c9f8:	bf38      	it	cc
 800c9fa:	2200      	movcc	r2, #0
 800c9fc:	18a3      	adds	r3, r4, r2
 800c9fe:	50a7      	str	r7, [r4, r2]
 800ca00:	b107      	cbz	r7, 800ca04 <rshift+0x68>
 800ca02:	3304      	adds	r3, #4
 800ca04:	1b1a      	subs	r2, r3, r4
 800ca06:	42a3      	cmp	r3, r4
 800ca08:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ca0c:	bf08      	it	eq
 800ca0e:	2300      	moveq	r3, #0
 800ca10:	6102      	str	r2, [r0, #16]
 800ca12:	bf08      	it	eq
 800ca14:	6143      	streq	r3, [r0, #20]
 800ca16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca1a:	f8dc c000 	ldr.w	ip, [ip]
 800ca1e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ca22:	ea4c 0707 	orr.w	r7, ip, r7
 800ca26:	f849 7b04 	str.w	r7, [r9], #4
 800ca2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ca2e:	40cf      	lsrs	r7, r1
 800ca30:	e7da      	b.n	800c9e8 <rshift+0x4c>
 800ca32:	f851 cb04 	ldr.w	ip, [r1], #4
 800ca36:	f847 cf04 	str.w	ip, [r7, #4]!
 800ca3a:	e7c3      	b.n	800c9c4 <rshift+0x28>
 800ca3c:	4623      	mov	r3, r4
 800ca3e:	e7e1      	b.n	800ca04 <rshift+0x68>

0800ca40 <__hexdig_fun>:
 800ca40:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ca44:	2b09      	cmp	r3, #9
 800ca46:	d802      	bhi.n	800ca4e <__hexdig_fun+0xe>
 800ca48:	3820      	subs	r0, #32
 800ca4a:	b2c0      	uxtb	r0, r0
 800ca4c:	4770      	bx	lr
 800ca4e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ca52:	2b05      	cmp	r3, #5
 800ca54:	d801      	bhi.n	800ca5a <__hexdig_fun+0x1a>
 800ca56:	3847      	subs	r0, #71	@ 0x47
 800ca58:	e7f7      	b.n	800ca4a <__hexdig_fun+0xa>
 800ca5a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ca5e:	2b05      	cmp	r3, #5
 800ca60:	d801      	bhi.n	800ca66 <__hexdig_fun+0x26>
 800ca62:	3827      	subs	r0, #39	@ 0x27
 800ca64:	e7f1      	b.n	800ca4a <__hexdig_fun+0xa>
 800ca66:	2000      	movs	r0, #0
 800ca68:	4770      	bx	lr
	...

0800ca6c <__gethex>:
 800ca6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca70:	b085      	sub	sp, #20
 800ca72:	468a      	mov	sl, r1
 800ca74:	9302      	str	r3, [sp, #8]
 800ca76:	680b      	ldr	r3, [r1, #0]
 800ca78:	9001      	str	r0, [sp, #4]
 800ca7a:	4690      	mov	r8, r2
 800ca7c:	1c9c      	adds	r4, r3, #2
 800ca7e:	46a1      	mov	r9, r4
 800ca80:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ca84:	2830      	cmp	r0, #48	@ 0x30
 800ca86:	d0fa      	beq.n	800ca7e <__gethex+0x12>
 800ca88:	eba9 0303 	sub.w	r3, r9, r3
 800ca8c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ca90:	f7ff ffd6 	bl	800ca40 <__hexdig_fun>
 800ca94:	4605      	mov	r5, r0
 800ca96:	2800      	cmp	r0, #0
 800ca98:	d168      	bne.n	800cb6c <__gethex+0x100>
 800ca9a:	49a0      	ldr	r1, [pc, #640]	@ (800cd1c <__gethex+0x2b0>)
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	4648      	mov	r0, r9
 800caa0:	f7ff fefe 	bl	800c8a0 <strncmp>
 800caa4:	4607      	mov	r7, r0
 800caa6:	2800      	cmp	r0, #0
 800caa8:	d167      	bne.n	800cb7a <__gethex+0x10e>
 800caaa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800caae:	4626      	mov	r6, r4
 800cab0:	f7ff ffc6 	bl	800ca40 <__hexdig_fun>
 800cab4:	2800      	cmp	r0, #0
 800cab6:	d062      	beq.n	800cb7e <__gethex+0x112>
 800cab8:	4623      	mov	r3, r4
 800caba:	7818      	ldrb	r0, [r3, #0]
 800cabc:	2830      	cmp	r0, #48	@ 0x30
 800cabe:	4699      	mov	r9, r3
 800cac0:	f103 0301 	add.w	r3, r3, #1
 800cac4:	d0f9      	beq.n	800caba <__gethex+0x4e>
 800cac6:	f7ff ffbb 	bl	800ca40 <__hexdig_fun>
 800caca:	fab0 f580 	clz	r5, r0
 800cace:	096d      	lsrs	r5, r5, #5
 800cad0:	f04f 0b01 	mov.w	fp, #1
 800cad4:	464a      	mov	r2, r9
 800cad6:	4616      	mov	r6, r2
 800cad8:	3201      	adds	r2, #1
 800cada:	7830      	ldrb	r0, [r6, #0]
 800cadc:	f7ff ffb0 	bl	800ca40 <__hexdig_fun>
 800cae0:	2800      	cmp	r0, #0
 800cae2:	d1f8      	bne.n	800cad6 <__gethex+0x6a>
 800cae4:	498d      	ldr	r1, [pc, #564]	@ (800cd1c <__gethex+0x2b0>)
 800cae6:	2201      	movs	r2, #1
 800cae8:	4630      	mov	r0, r6
 800caea:	f7ff fed9 	bl	800c8a0 <strncmp>
 800caee:	2800      	cmp	r0, #0
 800caf0:	d13f      	bne.n	800cb72 <__gethex+0x106>
 800caf2:	b944      	cbnz	r4, 800cb06 <__gethex+0x9a>
 800caf4:	1c74      	adds	r4, r6, #1
 800caf6:	4622      	mov	r2, r4
 800caf8:	4616      	mov	r6, r2
 800cafa:	3201      	adds	r2, #1
 800cafc:	7830      	ldrb	r0, [r6, #0]
 800cafe:	f7ff ff9f 	bl	800ca40 <__hexdig_fun>
 800cb02:	2800      	cmp	r0, #0
 800cb04:	d1f8      	bne.n	800caf8 <__gethex+0x8c>
 800cb06:	1ba4      	subs	r4, r4, r6
 800cb08:	00a7      	lsls	r7, r4, #2
 800cb0a:	7833      	ldrb	r3, [r6, #0]
 800cb0c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cb10:	2b50      	cmp	r3, #80	@ 0x50
 800cb12:	d13e      	bne.n	800cb92 <__gethex+0x126>
 800cb14:	7873      	ldrb	r3, [r6, #1]
 800cb16:	2b2b      	cmp	r3, #43	@ 0x2b
 800cb18:	d033      	beq.n	800cb82 <__gethex+0x116>
 800cb1a:	2b2d      	cmp	r3, #45	@ 0x2d
 800cb1c:	d034      	beq.n	800cb88 <__gethex+0x11c>
 800cb1e:	1c71      	adds	r1, r6, #1
 800cb20:	2400      	movs	r4, #0
 800cb22:	7808      	ldrb	r0, [r1, #0]
 800cb24:	f7ff ff8c 	bl	800ca40 <__hexdig_fun>
 800cb28:	1e43      	subs	r3, r0, #1
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	2b18      	cmp	r3, #24
 800cb2e:	d830      	bhi.n	800cb92 <__gethex+0x126>
 800cb30:	f1a0 0210 	sub.w	r2, r0, #16
 800cb34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cb38:	f7ff ff82 	bl	800ca40 <__hexdig_fun>
 800cb3c:	f100 3cff 	add.w	ip, r0, #4294967295
 800cb40:	fa5f fc8c 	uxtb.w	ip, ip
 800cb44:	f1bc 0f18 	cmp.w	ip, #24
 800cb48:	f04f 030a 	mov.w	r3, #10
 800cb4c:	d91e      	bls.n	800cb8c <__gethex+0x120>
 800cb4e:	b104      	cbz	r4, 800cb52 <__gethex+0xe6>
 800cb50:	4252      	negs	r2, r2
 800cb52:	4417      	add	r7, r2
 800cb54:	f8ca 1000 	str.w	r1, [sl]
 800cb58:	b1ed      	cbz	r5, 800cb96 <__gethex+0x12a>
 800cb5a:	f1bb 0f00 	cmp.w	fp, #0
 800cb5e:	bf0c      	ite	eq
 800cb60:	2506      	moveq	r5, #6
 800cb62:	2500      	movne	r5, #0
 800cb64:	4628      	mov	r0, r5
 800cb66:	b005      	add	sp, #20
 800cb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb6c:	2500      	movs	r5, #0
 800cb6e:	462c      	mov	r4, r5
 800cb70:	e7b0      	b.n	800cad4 <__gethex+0x68>
 800cb72:	2c00      	cmp	r4, #0
 800cb74:	d1c7      	bne.n	800cb06 <__gethex+0x9a>
 800cb76:	4627      	mov	r7, r4
 800cb78:	e7c7      	b.n	800cb0a <__gethex+0x9e>
 800cb7a:	464e      	mov	r6, r9
 800cb7c:	462f      	mov	r7, r5
 800cb7e:	2501      	movs	r5, #1
 800cb80:	e7c3      	b.n	800cb0a <__gethex+0x9e>
 800cb82:	2400      	movs	r4, #0
 800cb84:	1cb1      	adds	r1, r6, #2
 800cb86:	e7cc      	b.n	800cb22 <__gethex+0xb6>
 800cb88:	2401      	movs	r4, #1
 800cb8a:	e7fb      	b.n	800cb84 <__gethex+0x118>
 800cb8c:	fb03 0002 	mla	r0, r3, r2, r0
 800cb90:	e7ce      	b.n	800cb30 <__gethex+0xc4>
 800cb92:	4631      	mov	r1, r6
 800cb94:	e7de      	b.n	800cb54 <__gethex+0xe8>
 800cb96:	eba6 0309 	sub.w	r3, r6, r9
 800cb9a:	3b01      	subs	r3, #1
 800cb9c:	4629      	mov	r1, r5
 800cb9e:	2b07      	cmp	r3, #7
 800cba0:	dc0a      	bgt.n	800cbb8 <__gethex+0x14c>
 800cba2:	9801      	ldr	r0, [sp, #4]
 800cba4:	f7fd ff84 	bl	800aab0 <_Balloc>
 800cba8:	4604      	mov	r4, r0
 800cbaa:	b940      	cbnz	r0, 800cbbe <__gethex+0x152>
 800cbac:	4b5c      	ldr	r3, [pc, #368]	@ (800cd20 <__gethex+0x2b4>)
 800cbae:	4602      	mov	r2, r0
 800cbb0:	21e4      	movs	r1, #228	@ 0xe4
 800cbb2:	485c      	ldr	r0, [pc, #368]	@ (800cd24 <__gethex+0x2b8>)
 800cbb4:	f7ff fec0 	bl	800c938 <__assert_func>
 800cbb8:	3101      	adds	r1, #1
 800cbba:	105b      	asrs	r3, r3, #1
 800cbbc:	e7ef      	b.n	800cb9e <__gethex+0x132>
 800cbbe:	f100 0a14 	add.w	sl, r0, #20
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	4655      	mov	r5, sl
 800cbc6:	469b      	mov	fp, r3
 800cbc8:	45b1      	cmp	r9, r6
 800cbca:	d337      	bcc.n	800cc3c <__gethex+0x1d0>
 800cbcc:	f845 bb04 	str.w	fp, [r5], #4
 800cbd0:	eba5 050a 	sub.w	r5, r5, sl
 800cbd4:	10ad      	asrs	r5, r5, #2
 800cbd6:	6125      	str	r5, [r4, #16]
 800cbd8:	4658      	mov	r0, fp
 800cbda:	f7fe f85b 	bl	800ac94 <__hi0bits>
 800cbde:	016d      	lsls	r5, r5, #5
 800cbe0:	f8d8 6000 	ldr.w	r6, [r8]
 800cbe4:	1a2d      	subs	r5, r5, r0
 800cbe6:	42b5      	cmp	r5, r6
 800cbe8:	dd54      	ble.n	800cc94 <__gethex+0x228>
 800cbea:	1bad      	subs	r5, r5, r6
 800cbec:	4629      	mov	r1, r5
 800cbee:	4620      	mov	r0, r4
 800cbf0:	f7fe fbef 	bl	800b3d2 <__any_on>
 800cbf4:	4681      	mov	r9, r0
 800cbf6:	b178      	cbz	r0, 800cc18 <__gethex+0x1ac>
 800cbf8:	1e6b      	subs	r3, r5, #1
 800cbfa:	1159      	asrs	r1, r3, #5
 800cbfc:	f003 021f 	and.w	r2, r3, #31
 800cc00:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cc04:	f04f 0901 	mov.w	r9, #1
 800cc08:	fa09 f202 	lsl.w	r2, r9, r2
 800cc0c:	420a      	tst	r2, r1
 800cc0e:	d003      	beq.n	800cc18 <__gethex+0x1ac>
 800cc10:	454b      	cmp	r3, r9
 800cc12:	dc36      	bgt.n	800cc82 <__gethex+0x216>
 800cc14:	f04f 0902 	mov.w	r9, #2
 800cc18:	4629      	mov	r1, r5
 800cc1a:	4620      	mov	r0, r4
 800cc1c:	f7ff febe 	bl	800c99c <rshift>
 800cc20:	442f      	add	r7, r5
 800cc22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cc26:	42bb      	cmp	r3, r7
 800cc28:	da42      	bge.n	800ccb0 <__gethex+0x244>
 800cc2a:	9801      	ldr	r0, [sp, #4]
 800cc2c:	4621      	mov	r1, r4
 800cc2e:	f7fd ff7f 	bl	800ab30 <_Bfree>
 800cc32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc34:	2300      	movs	r3, #0
 800cc36:	6013      	str	r3, [r2, #0]
 800cc38:	25a3      	movs	r5, #163	@ 0xa3
 800cc3a:	e793      	b.n	800cb64 <__gethex+0xf8>
 800cc3c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cc40:	2a2e      	cmp	r2, #46	@ 0x2e
 800cc42:	d012      	beq.n	800cc6a <__gethex+0x1fe>
 800cc44:	2b20      	cmp	r3, #32
 800cc46:	d104      	bne.n	800cc52 <__gethex+0x1e6>
 800cc48:	f845 bb04 	str.w	fp, [r5], #4
 800cc4c:	f04f 0b00 	mov.w	fp, #0
 800cc50:	465b      	mov	r3, fp
 800cc52:	7830      	ldrb	r0, [r6, #0]
 800cc54:	9303      	str	r3, [sp, #12]
 800cc56:	f7ff fef3 	bl	800ca40 <__hexdig_fun>
 800cc5a:	9b03      	ldr	r3, [sp, #12]
 800cc5c:	f000 000f 	and.w	r0, r0, #15
 800cc60:	4098      	lsls	r0, r3
 800cc62:	ea4b 0b00 	orr.w	fp, fp, r0
 800cc66:	3304      	adds	r3, #4
 800cc68:	e7ae      	b.n	800cbc8 <__gethex+0x15c>
 800cc6a:	45b1      	cmp	r9, r6
 800cc6c:	d8ea      	bhi.n	800cc44 <__gethex+0x1d8>
 800cc6e:	492b      	ldr	r1, [pc, #172]	@ (800cd1c <__gethex+0x2b0>)
 800cc70:	9303      	str	r3, [sp, #12]
 800cc72:	2201      	movs	r2, #1
 800cc74:	4630      	mov	r0, r6
 800cc76:	f7ff fe13 	bl	800c8a0 <strncmp>
 800cc7a:	9b03      	ldr	r3, [sp, #12]
 800cc7c:	2800      	cmp	r0, #0
 800cc7e:	d1e1      	bne.n	800cc44 <__gethex+0x1d8>
 800cc80:	e7a2      	b.n	800cbc8 <__gethex+0x15c>
 800cc82:	1ea9      	subs	r1, r5, #2
 800cc84:	4620      	mov	r0, r4
 800cc86:	f7fe fba4 	bl	800b3d2 <__any_on>
 800cc8a:	2800      	cmp	r0, #0
 800cc8c:	d0c2      	beq.n	800cc14 <__gethex+0x1a8>
 800cc8e:	f04f 0903 	mov.w	r9, #3
 800cc92:	e7c1      	b.n	800cc18 <__gethex+0x1ac>
 800cc94:	da09      	bge.n	800ccaa <__gethex+0x23e>
 800cc96:	1b75      	subs	r5, r6, r5
 800cc98:	4621      	mov	r1, r4
 800cc9a:	9801      	ldr	r0, [sp, #4]
 800cc9c:	462a      	mov	r2, r5
 800cc9e:	f7fe f95f 	bl	800af60 <__lshift>
 800cca2:	1b7f      	subs	r7, r7, r5
 800cca4:	4604      	mov	r4, r0
 800cca6:	f100 0a14 	add.w	sl, r0, #20
 800ccaa:	f04f 0900 	mov.w	r9, #0
 800ccae:	e7b8      	b.n	800cc22 <__gethex+0x1b6>
 800ccb0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ccb4:	42bd      	cmp	r5, r7
 800ccb6:	dd6f      	ble.n	800cd98 <__gethex+0x32c>
 800ccb8:	1bed      	subs	r5, r5, r7
 800ccba:	42ae      	cmp	r6, r5
 800ccbc:	dc34      	bgt.n	800cd28 <__gethex+0x2bc>
 800ccbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ccc2:	2b02      	cmp	r3, #2
 800ccc4:	d022      	beq.n	800cd0c <__gethex+0x2a0>
 800ccc6:	2b03      	cmp	r3, #3
 800ccc8:	d024      	beq.n	800cd14 <__gethex+0x2a8>
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d115      	bne.n	800ccfa <__gethex+0x28e>
 800ccce:	42ae      	cmp	r6, r5
 800ccd0:	d113      	bne.n	800ccfa <__gethex+0x28e>
 800ccd2:	2e01      	cmp	r6, #1
 800ccd4:	d10b      	bne.n	800ccee <__gethex+0x282>
 800ccd6:	9a02      	ldr	r2, [sp, #8]
 800ccd8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ccdc:	6013      	str	r3, [r2, #0]
 800ccde:	2301      	movs	r3, #1
 800cce0:	6123      	str	r3, [r4, #16]
 800cce2:	f8ca 3000 	str.w	r3, [sl]
 800cce6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cce8:	2562      	movs	r5, #98	@ 0x62
 800ccea:	601c      	str	r4, [r3, #0]
 800ccec:	e73a      	b.n	800cb64 <__gethex+0xf8>
 800ccee:	1e71      	subs	r1, r6, #1
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	f7fe fb6e 	bl	800b3d2 <__any_on>
 800ccf6:	2800      	cmp	r0, #0
 800ccf8:	d1ed      	bne.n	800ccd6 <__gethex+0x26a>
 800ccfa:	9801      	ldr	r0, [sp, #4]
 800ccfc:	4621      	mov	r1, r4
 800ccfe:	f7fd ff17 	bl	800ab30 <_Bfree>
 800cd02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd04:	2300      	movs	r3, #0
 800cd06:	6013      	str	r3, [r2, #0]
 800cd08:	2550      	movs	r5, #80	@ 0x50
 800cd0a:	e72b      	b.n	800cb64 <__gethex+0xf8>
 800cd0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d1f3      	bne.n	800ccfa <__gethex+0x28e>
 800cd12:	e7e0      	b.n	800ccd6 <__gethex+0x26a>
 800cd14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d1dd      	bne.n	800ccd6 <__gethex+0x26a>
 800cd1a:	e7ee      	b.n	800ccfa <__gethex+0x28e>
 800cd1c:	0800d508 	.word	0x0800d508
 800cd20:	0800d3a1 	.word	0x0800d3a1
 800cd24:	0800d6b6 	.word	0x0800d6b6
 800cd28:	1e6f      	subs	r7, r5, #1
 800cd2a:	f1b9 0f00 	cmp.w	r9, #0
 800cd2e:	d130      	bne.n	800cd92 <__gethex+0x326>
 800cd30:	b127      	cbz	r7, 800cd3c <__gethex+0x2d0>
 800cd32:	4639      	mov	r1, r7
 800cd34:	4620      	mov	r0, r4
 800cd36:	f7fe fb4c 	bl	800b3d2 <__any_on>
 800cd3a:	4681      	mov	r9, r0
 800cd3c:	117a      	asrs	r2, r7, #5
 800cd3e:	2301      	movs	r3, #1
 800cd40:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cd44:	f007 071f 	and.w	r7, r7, #31
 800cd48:	40bb      	lsls	r3, r7
 800cd4a:	4213      	tst	r3, r2
 800cd4c:	4629      	mov	r1, r5
 800cd4e:	4620      	mov	r0, r4
 800cd50:	bf18      	it	ne
 800cd52:	f049 0902 	orrne.w	r9, r9, #2
 800cd56:	f7ff fe21 	bl	800c99c <rshift>
 800cd5a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cd5e:	1b76      	subs	r6, r6, r5
 800cd60:	2502      	movs	r5, #2
 800cd62:	f1b9 0f00 	cmp.w	r9, #0
 800cd66:	d047      	beq.n	800cdf8 <__gethex+0x38c>
 800cd68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd6c:	2b02      	cmp	r3, #2
 800cd6e:	d015      	beq.n	800cd9c <__gethex+0x330>
 800cd70:	2b03      	cmp	r3, #3
 800cd72:	d017      	beq.n	800cda4 <__gethex+0x338>
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	d109      	bne.n	800cd8c <__gethex+0x320>
 800cd78:	f019 0f02 	tst.w	r9, #2
 800cd7c:	d006      	beq.n	800cd8c <__gethex+0x320>
 800cd7e:	f8da 3000 	ldr.w	r3, [sl]
 800cd82:	ea49 0903 	orr.w	r9, r9, r3
 800cd86:	f019 0f01 	tst.w	r9, #1
 800cd8a:	d10e      	bne.n	800cdaa <__gethex+0x33e>
 800cd8c:	f045 0510 	orr.w	r5, r5, #16
 800cd90:	e032      	b.n	800cdf8 <__gethex+0x38c>
 800cd92:	f04f 0901 	mov.w	r9, #1
 800cd96:	e7d1      	b.n	800cd3c <__gethex+0x2d0>
 800cd98:	2501      	movs	r5, #1
 800cd9a:	e7e2      	b.n	800cd62 <__gethex+0x2f6>
 800cd9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd9e:	f1c3 0301 	rsb	r3, r3, #1
 800cda2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cda4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d0f0      	beq.n	800cd8c <__gethex+0x320>
 800cdaa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cdae:	f104 0314 	add.w	r3, r4, #20
 800cdb2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cdb6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cdba:	f04f 0c00 	mov.w	ip, #0
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdc4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cdc8:	d01b      	beq.n	800ce02 <__gethex+0x396>
 800cdca:	3201      	adds	r2, #1
 800cdcc:	6002      	str	r2, [r0, #0]
 800cdce:	2d02      	cmp	r5, #2
 800cdd0:	f104 0314 	add.w	r3, r4, #20
 800cdd4:	d13c      	bne.n	800ce50 <__gethex+0x3e4>
 800cdd6:	f8d8 2000 	ldr.w	r2, [r8]
 800cdda:	3a01      	subs	r2, #1
 800cddc:	42b2      	cmp	r2, r6
 800cdde:	d109      	bne.n	800cdf4 <__gethex+0x388>
 800cde0:	1171      	asrs	r1, r6, #5
 800cde2:	2201      	movs	r2, #1
 800cde4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cde8:	f006 061f 	and.w	r6, r6, #31
 800cdec:	fa02 f606 	lsl.w	r6, r2, r6
 800cdf0:	421e      	tst	r6, r3
 800cdf2:	d13a      	bne.n	800ce6a <__gethex+0x3fe>
 800cdf4:	f045 0520 	orr.w	r5, r5, #32
 800cdf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cdfa:	601c      	str	r4, [r3, #0]
 800cdfc:	9b02      	ldr	r3, [sp, #8]
 800cdfe:	601f      	str	r7, [r3, #0]
 800ce00:	e6b0      	b.n	800cb64 <__gethex+0xf8>
 800ce02:	4299      	cmp	r1, r3
 800ce04:	f843 cc04 	str.w	ip, [r3, #-4]
 800ce08:	d8d9      	bhi.n	800cdbe <__gethex+0x352>
 800ce0a:	68a3      	ldr	r3, [r4, #8]
 800ce0c:	459b      	cmp	fp, r3
 800ce0e:	db17      	blt.n	800ce40 <__gethex+0x3d4>
 800ce10:	6861      	ldr	r1, [r4, #4]
 800ce12:	9801      	ldr	r0, [sp, #4]
 800ce14:	3101      	adds	r1, #1
 800ce16:	f7fd fe4b 	bl	800aab0 <_Balloc>
 800ce1a:	4681      	mov	r9, r0
 800ce1c:	b918      	cbnz	r0, 800ce26 <__gethex+0x3ba>
 800ce1e:	4b1a      	ldr	r3, [pc, #104]	@ (800ce88 <__gethex+0x41c>)
 800ce20:	4602      	mov	r2, r0
 800ce22:	2184      	movs	r1, #132	@ 0x84
 800ce24:	e6c5      	b.n	800cbb2 <__gethex+0x146>
 800ce26:	6922      	ldr	r2, [r4, #16]
 800ce28:	3202      	adds	r2, #2
 800ce2a:	f104 010c 	add.w	r1, r4, #12
 800ce2e:	0092      	lsls	r2, r2, #2
 800ce30:	300c      	adds	r0, #12
 800ce32:	f7fc feda 	bl	8009bea <memcpy>
 800ce36:	4621      	mov	r1, r4
 800ce38:	9801      	ldr	r0, [sp, #4]
 800ce3a:	f7fd fe79 	bl	800ab30 <_Bfree>
 800ce3e:	464c      	mov	r4, r9
 800ce40:	6923      	ldr	r3, [r4, #16]
 800ce42:	1c5a      	adds	r2, r3, #1
 800ce44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ce48:	6122      	str	r2, [r4, #16]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	615a      	str	r2, [r3, #20]
 800ce4e:	e7be      	b.n	800cdce <__gethex+0x362>
 800ce50:	6922      	ldr	r2, [r4, #16]
 800ce52:	455a      	cmp	r2, fp
 800ce54:	dd0b      	ble.n	800ce6e <__gethex+0x402>
 800ce56:	2101      	movs	r1, #1
 800ce58:	4620      	mov	r0, r4
 800ce5a:	f7ff fd9f 	bl	800c99c <rshift>
 800ce5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ce62:	3701      	adds	r7, #1
 800ce64:	42bb      	cmp	r3, r7
 800ce66:	f6ff aee0 	blt.w	800cc2a <__gethex+0x1be>
 800ce6a:	2501      	movs	r5, #1
 800ce6c:	e7c2      	b.n	800cdf4 <__gethex+0x388>
 800ce6e:	f016 061f 	ands.w	r6, r6, #31
 800ce72:	d0fa      	beq.n	800ce6a <__gethex+0x3fe>
 800ce74:	4453      	add	r3, sl
 800ce76:	f1c6 0620 	rsb	r6, r6, #32
 800ce7a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ce7e:	f7fd ff09 	bl	800ac94 <__hi0bits>
 800ce82:	42b0      	cmp	r0, r6
 800ce84:	dbe7      	blt.n	800ce56 <__gethex+0x3ea>
 800ce86:	e7f0      	b.n	800ce6a <__gethex+0x3fe>
 800ce88:	0800d3a1 	.word	0x0800d3a1

0800ce8c <L_shift>:
 800ce8c:	f1c2 0208 	rsb	r2, r2, #8
 800ce90:	0092      	lsls	r2, r2, #2
 800ce92:	b570      	push	{r4, r5, r6, lr}
 800ce94:	f1c2 0620 	rsb	r6, r2, #32
 800ce98:	6843      	ldr	r3, [r0, #4]
 800ce9a:	6804      	ldr	r4, [r0, #0]
 800ce9c:	fa03 f506 	lsl.w	r5, r3, r6
 800cea0:	432c      	orrs	r4, r5
 800cea2:	40d3      	lsrs	r3, r2
 800cea4:	6004      	str	r4, [r0, #0]
 800cea6:	f840 3f04 	str.w	r3, [r0, #4]!
 800ceaa:	4288      	cmp	r0, r1
 800ceac:	d3f4      	bcc.n	800ce98 <L_shift+0xc>
 800ceae:	bd70      	pop	{r4, r5, r6, pc}

0800ceb0 <__match>:
 800ceb0:	b530      	push	{r4, r5, lr}
 800ceb2:	6803      	ldr	r3, [r0, #0]
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ceba:	b914      	cbnz	r4, 800cec2 <__match+0x12>
 800cebc:	6003      	str	r3, [r0, #0]
 800cebe:	2001      	movs	r0, #1
 800cec0:	bd30      	pop	{r4, r5, pc}
 800cec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cec6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ceca:	2d19      	cmp	r5, #25
 800cecc:	bf98      	it	ls
 800cece:	3220      	addls	r2, #32
 800ced0:	42a2      	cmp	r2, r4
 800ced2:	d0f0      	beq.n	800ceb6 <__match+0x6>
 800ced4:	2000      	movs	r0, #0
 800ced6:	e7f3      	b.n	800cec0 <__match+0x10>

0800ced8 <__hexnan>:
 800ced8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cedc:	680b      	ldr	r3, [r1, #0]
 800cede:	6801      	ldr	r1, [r0, #0]
 800cee0:	115e      	asrs	r6, r3, #5
 800cee2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cee6:	f013 031f 	ands.w	r3, r3, #31
 800ceea:	b087      	sub	sp, #28
 800ceec:	bf18      	it	ne
 800ceee:	3604      	addne	r6, #4
 800cef0:	2500      	movs	r5, #0
 800cef2:	1f37      	subs	r7, r6, #4
 800cef4:	4682      	mov	sl, r0
 800cef6:	4690      	mov	r8, r2
 800cef8:	9301      	str	r3, [sp, #4]
 800cefa:	f846 5c04 	str.w	r5, [r6, #-4]
 800cefe:	46b9      	mov	r9, r7
 800cf00:	463c      	mov	r4, r7
 800cf02:	9502      	str	r5, [sp, #8]
 800cf04:	46ab      	mov	fp, r5
 800cf06:	784a      	ldrb	r2, [r1, #1]
 800cf08:	1c4b      	adds	r3, r1, #1
 800cf0a:	9303      	str	r3, [sp, #12]
 800cf0c:	b342      	cbz	r2, 800cf60 <__hexnan+0x88>
 800cf0e:	4610      	mov	r0, r2
 800cf10:	9105      	str	r1, [sp, #20]
 800cf12:	9204      	str	r2, [sp, #16]
 800cf14:	f7ff fd94 	bl	800ca40 <__hexdig_fun>
 800cf18:	2800      	cmp	r0, #0
 800cf1a:	d151      	bne.n	800cfc0 <__hexnan+0xe8>
 800cf1c:	9a04      	ldr	r2, [sp, #16]
 800cf1e:	9905      	ldr	r1, [sp, #20]
 800cf20:	2a20      	cmp	r2, #32
 800cf22:	d818      	bhi.n	800cf56 <__hexnan+0x7e>
 800cf24:	9b02      	ldr	r3, [sp, #8]
 800cf26:	459b      	cmp	fp, r3
 800cf28:	dd13      	ble.n	800cf52 <__hexnan+0x7a>
 800cf2a:	454c      	cmp	r4, r9
 800cf2c:	d206      	bcs.n	800cf3c <__hexnan+0x64>
 800cf2e:	2d07      	cmp	r5, #7
 800cf30:	dc04      	bgt.n	800cf3c <__hexnan+0x64>
 800cf32:	462a      	mov	r2, r5
 800cf34:	4649      	mov	r1, r9
 800cf36:	4620      	mov	r0, r4
 800cf38:	f7ff ffa8 	bl	800ce8c <L_shift>
 800cf3c:	4544      	cmp	r4, r8
 800cf3e:	d952      	bls.n	800cfe6 <__hexnan+0x10e>
 800cf40:	2300      	movs	r3, #0
 800cf42:	f1a4 0904 	sub.w	r9, r4, #4
 800cf46:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf4a:	f8cd b008 	str.w	fp, [sp, #8]
 800cf4e:	464c      	mov	r4, r9
 800cf50:	461d      	mov	r5, r3
 800cf52:	9903      	ldr	r1, [sp, #12]
 800cf54:	e7d7      	b.n	800cf06 <__hexnan+0x2e>
 800cf56:	2a29      	cmp	r2, #41	@ 0x29
 800cf58:	d157      	bne.n	800d00a <__hexnan+0x132>
 800cf5a:	3102      	adds	r1, #2
 800cf5c:	f8ca 1000 	str.w	r1, [sl]
 800cf60:	f1bb 0f00 	cmp.w	fp, #0
 800cf64:	d051      	beq.n	800d00a <__hexnan+0x132>
 800cf66:	454c      	cmp	r4, r9
 800cf68:	d206      	bcs.n	800cf78 <__hexnan+0xa0>
 800cf6a:	2d07      	cmp	r5, #7
 800cf6c:	dc04      	bgt.n	800cf78 <__hexnan+0xa0>
 800cf6e:	462a      	mov	r2, r5
 800cf70:	4649      	mov	r1, r9
 800cf72:	4620      	mov	r0, r4
 800cf74:	f7ff ff8a 	bl	800ce8c <L_shift>
 800cf78:	4544      	cmp	r4, r8
 800cf7a:	d936      	bls.n	800cfea <__hexnan+0x112>
 800cf7c:	f1a8 0204 	sub.w	r2, r8, #4
 800cf80:	4623      	mov	r3, r4
 800cf82:	f853 1b04 	ldr.w	r1, [r3], #4
 800cf86:	f842 1f04 	str.w	r1, [r2, #4]!
 800cf8a:	429f      	cmp	r7, r3
 800cf8c:	d2f9      	bcs.n	800cf82 <__hexnan+0xaa>
 800cf8e:	1b3b      	subs	r3, r7, r4
 800cf90:	f023 0303 	bic.w	r3, r3, #3
 800cf94:	3304      	adds	r3, #4
 800cf96:	3401      	adds	r4, #1
 800cf98:	3e03      	subs	r6, #3
 800cf9a:	42b4      	cmp	r4, r6
 800cf9c:	bf88      	it	hi
 800cf9e:	2304      	movhi	r3, #4
 800cfa0:	4443      	add	r3, r8
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f843 2b04 	str.w	r2, [r3], #4
 800cfa8:	429f      	cmp	r7, r3
 800cfaa:	d2fb      	bcs.n	800cfa4 <__hexnan+0xcc>
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	b91b      	cbnz	r3, 800cfb8 <__hexnan+0xe0>
 800cfb0:	4547      	cmp	r7, r8
 800cfb2:	d128      	bne.n	800d006 <__hexnan+0x12e>
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	603b      	str	r3, [r7, #0]
 800cfb8:	2005      	movs	r0, #5
 800cfba:	b007      	add	sp, #28
 800cfbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfc0:	3501      	adds	r5, #1
 800cfc2:	2d08      	cmp	r5, #8
 800cfc4:	f10b 0b01 	add.w	fp, fp, #1
 800cfc8:	dd06      	ble.n	800cfd8 <__hexnan+0x100>
 800cfca:	4544      	cmp	r4, r8
 800cfcc:	d9c1      	bls.n	800cf52 <__hexnan+0x7a>
 800cfce:	2300      	movs	r3, #0
 800cfd0:	f844 3c04 	str.w	r3, [r4, #-4]
 800cfd4:	2501      	movs	r5, #1
 800cfd6:	3c04      	subs	r4, #4
 800cfd8:	6822      	ldr	r2, [r4, #0]
 800cfda:	f000 000f 	and.w	r0, r0, #15
 800cfde:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cfe2:	6020      	str	r0, [r4, #0]
 800cfe4:	e7b5      	b.n	800cf52 <__hexnan+0x7a>
 800cfe6:	2508      	movs	r5, #8
 800cfe8:	e7b3      	b.n	800cf52 <__hexnan+0x7a>
 800cfea:	9b01      	ldr	r3, [sp, #4]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d0dd      	beq.n	800cfac <__hexnan+0xd4>
 800cff0:	f1c3 0320 	rsb	r3, r3, #32
 800cff4:	f04f 32ff 	mov.w	r2, #4294967295
 800cff8:	40da      	lsrs	r2, r3
 800cffa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cffe:	4013      	ands	r3, r2
 800d000:	f846 3c04 	str.w	r3, [r6, #-4]
 800d004:	e7d2      	b.n	800cfac <__hexnan+0xd4>
 800d006:	3f04      	subs	r7, #4
 800d008:	e7d0      	b.n	800cfac <__hexnan+0xd4>
 800d00a:	2004      	movs	r0, #4
 800d00c:	e7d5      	b.n	800cfba <__hexnan+0xe2>

0800d00e <__ascii_mbtowc>:
 800d00e:	b082      	sub	sp, #8
 800d010:	b901      	cbnz	r1, 800d014 <__ascii_mbtowc+0x6>
 800d012:	a901      	add	r1, sp, #4
 800d014:	b142      	cbz	r2, 800d028 <__ascii_mbtowc+0x1a>
 800d016:	b14b      	cbz	r3, 800d02c <__ascii_mbtowc+0x1e>
 800d018:	7813      	ldrb	r3, [r2, #0]
 800d01a:	600b      	str	r3, [r1, #0]
 800d01c:	7812      	ldrb	r2, [r2, #0]
 800d01e:	1e10      	subs	r0, r2, #0
 800d020:	bf18      	it	ne
 800d022:	2001      	movne	r0, #1
 800d024:	b002      	add	sp, #8
 800d026:	4770      	bx	lr
 800d028:	4610      	mov	r0, r2
 800d02a:	e7fb      	b.n	800d024 <__ascii_mbtowc+0x16>
 800d02c:	f06f 0001 	mvn.w	r0, #1
 800d030:	e7f8      	b.n	800d024 <__ascii_mbtowc+0x16>

0800d032 <_realloc_r>:
 800d032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d036:	4680      	mov	r8, r0
 800d038:	4615      	mov	r5, r2
 800d03a:	460c      	mov	r4, r1
 800d03c:	b921      	cbnz	r1, 800d048 <_realloc_r+0x16>
 800d03e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d042:	4611      	mov	r1, r2
 800d044:	f7fd bca8 	b.w	800a998 <_malloc_r>
 800d048:	b92a      	cbnz	r2, 800d056 <_realloc_r+0x24>
 800d04a:	f7fd fc31 	bl	800a8b0 <_free_r>
 800d04e:	2400      	movs	r4, #0
 800d050:	4620      	mov	r0, r4
 800d052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d056:	f000 f840 	bl	800d0da <_malloc_usable_size_r>
 800d05a:	4285      	cmp	r5, r0
 800d05c:	4606      	mov	r6, r0
 800d05e:	d802      	bhi.n	800d066 <_realloc_r+0x34>
 800d060:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d064:	d8f4      	bhi.n	800d050 <_realloc_r+0x1e>
 800d066:	4629      	mov	r1, r5
 800d068:	4640      	mov	r0, r8
 800d06a:	f7fd fc95 	bl	800a998 <_malloc_r>
 800d06e:	4607      	mov	r7, r0
 800d070:	2800      	cmp	r0, #0
 800d072:	d0ec      	beq.n	800d04e <_realloc_r+0x1c>
 800d074:	42b5      	cmp	r5, r6
 800d076:	462a      	mov	r2, r5
 800d078:	4621      	mov	r1, r4
 800d07a:	bf28      	it	cs
 800d07c:	4632      	movcs	r2, r6
 800d07e:	f7fc fdb4 	bl	8009bea <memcpy>
 800d082:	4621      	mov	r1, r4
 800d084:	4640      	mov	r0, r8
 800d086:	f7fd fc13 	bl	800a8b0 <_free_r>
 800d08a:	463c      	mov	r4, r7
 800d08c:	e7e0      	b.n	800d050 <_realloc_r+0x1e>

0800d08e <__ascii_wctomb>:
 800d08e:	4603      	mov	r3, r0
 800d090:	4608      	mov	r0, r1
 800d092:	b141      	cbz	r1, 800d0a6 <__ascii_wctomb+0x18>
 800d094:	2aff      	cmp	r2, #255	@ 0xff
 800d096:	d904      	bls.n	800d0a2 <__ascii_wctomb+0x14>
 800d098:	228a      	movs	r2, #138	@ 0x8a
 800d09a:	601a      	str	r2, [r3, #0]
 800d09c:	f04f 30ff 	mov.w	r0, #4294967295
 800d0a0:	4770      	bx	lr
 800d0a2:	700a      	strb	r2, [r1, #0]
 800d0a4:	2001      	movs	r0, #1
 800d0a6:	4770      	bx	lr

0800d0a8 <fiprintf>:
 800d0a8:	b40e      	push	{r1, r2, r3}
 800d0aa:	b503      	push	{r0, r1, lr}
 800d0ac:	4601      	mov	r1, r0
 800d0ae:	ab03      	add	r3, sp, #12
 800d0b0:	4805      	ldr	r0, [pc, #20]	@ (800d0c8 <fiprintf+0x20>)
 800d0b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0b6:	6800      	ldr	r0, [r0, #0]
 800d0b8:	9301      	str	r3, [sp, #4]
 800d0ba:	f7ff f9b1 	bl	800c420 <_vfiprintf_r>
 800d0be:	b002      	add	sp, #8
 800d0c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0c4:	b003      	add	sp, #12
 800d0c6:	4770      	bx	lr
 800d0c8:	2000001c 	.word	0x2000001c

0800d0cc <abort>:
 800d0cc:	b508      	push	{r3, lr}
 800d0ce:	2006      	movs	r0, #6
 800d0d0:	f000 f834 	bl	800d13c <raise>
 800d0d4:	2001      	movs	r0, #1
 800d0d6:	f7f4 fb95 	bl	8001804 <_exit>

0800d0da <_malloc_usable_size_r>:
 800d0da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0de:	1f18      	subs	r0, r3, #4
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	bfbc      	itt	lt
 800d0e4:	580b      	ldrlt	r3, [r1, r0]
 800d0e6:	18c0      	addlt	r0, r0, r3
 800d0e8:	4770      	bx	lr

0800d0ea <_raise_r>:
 800d0ea:	291f      	cmp	r1, #31
 800d0ec:	b538      	push	{r3, r4, r5, lr}
 800d0ee:	4605      	mov	r5, r0
 800d0f0:	460c      	mov	r4, r1
 800d0f2:	d904      	bls.n	800d0fe <_raise_r+0x14>
 800d0f4:	2316      	movs	r3, #22
 800d0f6:	6003      	str	r3, [r0, #0]
 800d0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0fc:	bd38      	pop	{r3, r4, r5, pc}
 800d0fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d100:	b112      	cbz	r2, 800d108 <_raise_r+0x1e>
 800d102:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d106:	b94b      	cbnz	r3, 800d11c <_raise_r+0x32>
 800d108:	4628      	mov	r0, r5
 800d10a:	f000 f831 	bl	800d170 <_getpid_r>
 800d10e:	4622      	mov	r2, r4
 800d110:	4601      	mov	r1, r0
 800d112:	4628      	mov	r0, r5
 800d114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d118:	f000 b818 	b.w	800d14c <_kill_r>
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d00a      	beq.n	800d136 <_raise_r+0x4c>
 800d120:	1c59      	adds	r1, r3, #1
 800d122:	d103      	bne.n	800d12c <_raise_r+0x42>
 800d124:	2316      	movs	r3, #22
 800d126:	6003      	str	r3, [r0, #0]
 800d128:	2001      	movs	r0, #1
 800d12a:	e7e7      	b.n	800d0fc <_raise_r+0x12>
 800d12c:	2100      	movs	r1, #0
 800d12e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d132:	4620      	mov	r0, r4
 800d134:	4798      	blx	r3
 800d136:	2000      	movs	r0, #0
 800d138:	e7e0      	b.n	800d0fc <_raise_r+0x12>
	...

0800d13c <raise>:
 800d13c:	4b02      	ldr	r3, [pc, #8]	@ (800d148 <raise+0xc>)
 800d13e:	4601      	mov	r1, r0
 800d140:	6818      	ldr	r0, [r3, #0]
 800d142:	f7ff bfd2 	b.w	800d0ea <_raise_r>
 800d146:	bf00      	nop
 800d148:	2000001c 	.word	0x2000001c

0800d14c <_kill_r>:
 800d14c:	b538      	push	{r3, r4, r5, lr}
 800d14e:	4d07      	ldr	r5, [pc, #28]	@ (800d16c <_kill_r+0x20>)
 800d150:	2300      	movs	r3, #0
 800d152:	4604      	mov	r4, r0
 800d154:	4608      	mov	r0, r1
 800d156:	4611      	mov	r1, r2
 800d158:	602b      	str	r3, [r5, #0]
 800d15a:	f7f4 fb43 	bl	80017e4 <_kill>
 800d15e:	1c43      	adds	r3, r0, #1
 800d160:	d102      	bne.n	800d168 <_kill_r+0x1c>
 800d162:	682b      	ldr	r3, [r5, #0]
 800d164:	b103      	cbz	r3, 800d168 <_kill_r+0x1c>
 800d166:	6023      	str	r3, [r4, #0]
 800d168:	bd38      	pop	{r3, r4, r5, pc}
 800d16a:	bf00      	nop
 800d16c:	2000419c 	.word	0x2000419c

0800d170 <_getpid_r>:
 800d170:	f7f4 bb30 	b.w	80017d4 <_getpid>

0800d174 <_init>:
 800d174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d176:	bf00      	nop
 800d178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d17a:	bc08      	pop	{r3}
 800d17c:	469e      	mov	lr, r3
 800d17e:	4770      	bx	lr

0800d180 <_fini>:
 800d180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d182:	bf00      	nop
 800d184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d186:	bc08      	pop	{r3}
 800d188:	469e      	mov	lr, r3
 800d18a:	4770      	bx	lr
