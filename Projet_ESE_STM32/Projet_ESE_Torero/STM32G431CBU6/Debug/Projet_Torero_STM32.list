
Projet_Torero_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd3c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800cf20  0800cf20  0000df20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d428  0800d428  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d428  0800d428  0000e428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d430  0800d430  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d430  0800d430  0000e430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d434  0800d434  0000e434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d438  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f0  200001d8  0800d610  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013c8  0800d610  0000f3c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dce9  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000424e  00000000  00000000  0002cef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c40  00000000  00000000  00031140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015d9  00000000  00000000  00032d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024274  00000000  00000000  00034359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020ef7  00000000  00000000  000585cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e839a  00000000  00000000  000794c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016185e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008cd8  00000000  00000000  001618a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009f  00000000  00000000  0016a57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cf04 	.word	0x0800cf04

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800cf04 	.word	0x0800cf04

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	@ 0x30
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f008 fb82 	bl	8009756 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001052:	4b32      	ldr	r3, [pc, #200]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001054:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001058:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800105a:	4b30      	ldr	r3, [pc, #192]	@ (800111c <MX_ADC1_Init+0xe8>)
 800105c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001060:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001062:	4b2e      	ldr	r3, [pc, #184]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b2c      	ldr	r3, [pc, #176]	@ (800111c <MX_ADC1_Init+0xe8>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800106e:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001074:	4b29      	ldr	r3, [pc, #164]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b28      	ldr	r3, [pc, #160]	@ (800111c <MX_ADC1_Init+0xe8>)
 800107c:	2204      	movs	r2, #4
 800107e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001080:	4b26      	ldr	r3, [pc, #152]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001082:	2200      	movs	r2, #0
 8001084:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001086:	4b25      	ldr	r3, [pc, #148]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001088:	2200      	movs	r2, #0
 800108a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <MX_ADC1_Init+0xe8>)
 800108e:	2201      	movs	r2, #1
 8001090:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010bc:	4817      	ldr	r0, [pc, #92]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010be:	f001 fb99 	bl	80027f4 <HAL_ADC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010c8:	f000 f9ce 	bl	8001468 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d4:	4619      	mov	r1, r3
 80010d6:	4811      	ldr	r0, [pc, #68]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010d8:	f002 f926 	bl	8003328 <HAL_ADCEx_MultiModeConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010e2:	f000 f9c1 	bl	8001468 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_ADC1_Init+0xec>)
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ea:	2306      	movs	r3, #6
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f2:	237f      	movs	r3, #127	@ 0x7f
 80010f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f6:	2304      	movs	r3, #4
 80010f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001104:	f001 fcfa 	bl	8002afc <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800110e:	f000 f9ab 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3730      	adds	r7, #48	@ 0x30
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200001f4 	.word	0x200001f4
 8001120:	32601000 	.word	0x32601000

08001124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b09a      	sub	sp, #104	@ 0x68
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	2244      	movs	r2, #68	@ 0x44
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f008 fb06 	bl	8009756 <memset>
  if(adcHandle->Instance==ADC1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001152:	d133      	bne.n	80011bc <HAL_ADC_MspInit+0x98>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001154:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001158:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800115a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800115e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4618      	mov	r0, r3
 8001166:	f003 f9df 	bl	8004528 <HAL_RCCEx_PeriphCLKConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001170:	f000 f97a 	bl	8001468 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 800117a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800117e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001180:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118c:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001190:	4a0c      	ldr	r2, [pc, #48]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 8001192:	f043 0302 	orr.w	r3, r3, #2
 8001196:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001198:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC1_IN15_AN_CB_G_Pin|ADC1_IN12_AN_CB_D_Pin;
 80011a4:	2303      	movs	r3, #3
 80011a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a8:	2303      	movs	r3, #3
 80011aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011b4:	4619      	mov	r1, r3
 80011b6:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 80011b8:	f002 fa3e 	bl	8003638 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011bc:	bf00      	nop
 80011be:	3768      	adds	r7, #104	@ 0x68
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40021000 	.word	0x40021000
 80011c8:	48000400 	.word	0x48000400

080011cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80011cc:	b5b0      	push	{r4, r5, r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80011d2:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <MX_FREERTOS_Init+0x2c>)
 80011d4:	1d3c      	adds	r4, r7, #4
 80011d6:	461d      	mov	r5, r3
 80011d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011dc:	682b      	ldr	r3, [r5, #0]
 80011de:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f006 f988 	bl	80074fa <osThreadCreate>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4a03      	ldr	r2, [pc, #12]	@ (80011fc <MX_FREERTOS_Init+0x30>)
 80011ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80011f0:	bf00      	nop
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bdb0      	pop	{r4, r5, r7, pc}
 80011f8:	0800cf2c 	.word	0x0800cf2c
 80011fc:	20000260 	.word	0x20000260

08001200 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001208:	2001      	movs	r0, #1
 800120a:	f006 f99d 	bl	8007548 <osDelay>
 800120e:	e7fb      	b.n	8001208 <StartDefaultTask+0x8>

08001210 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	@ 0x28
 8001214:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	4b50      	ldr	r3, [pc, #320]	@ (8001368 <MX_GPIO_Init+0x158>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122a:	4a4f      	ldr	r2, [pc, #316]	@ (8001368 <MX_GPIO_Init+0x158>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001232:	4b4d      	ldr	r3, [pc, #308]	@ (8001368 <MX_GPIO_Init+0x158>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800123e:	4b4a      	ldr	r3, [pc, #296]	@ (8001368 <MX_GPIO_Init+0x158>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001242:	4a49      	ldr	r2, [pc, #292]	@ (8001368 <MX_GPIO_Init+0x158>)
 8001244:	f043 0320 	orr.w	r3, r3, #32
 8001248:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124a:	4b47      	ldr	r3, [pc, #284]	@ (8001368 <MX_GPIO_Init+0x158>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124e:	f003 0320 	and.w	r3, r3, #32
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001256:	4b44      	ldr	r3, [pc, #272]	@ (8001368 <MX_GPIO_Init+0x158>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	4a43      	ldr	r2, [pc, #268]	@ (8001368 <MX_GPIO_Init+0x158>)
 800125c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001262:	4b41      	ldr	r3, [pc, #260]	@ (8001368 <MX_GPIO_Init+0x158>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	4b3e      	ldr	r3, [pc, #248]	@ (8001368 <MX_GPIO_Init+0x158>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001272:	4a3d      	ldr	r2, [pc, #244]	@ (8001368 <MX_GPIO_Init+0x158>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127a:	4b3b      	ldr	r3, [pc, #236]	@ (8001368 <MX_GPIO_Init+0x158>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001286:	4b38      	ldr	r3, [pc, #224]	@ (8001368 <MX_GPIO_Init+0x158>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128a:	4a37      	ldr	r2, [pc, #220]	@ (8001368 <MX_GPIO_Init+0x158>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001292:	4b35      	ldr	r3, [pc, #212]	@ (8001368 <MX_GPIO_Init+0x158>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INT2_ACC_Pin|LED_SE_Pin|LED_SW_Pin|Status_LED_Pin
 800129e:	2200      	movs	r2, #0
 80012a0:	f642 4150 	movw	r1, #11344	@ 0x2c50
 80012a4:	4831      	ldr	r0, [pc, #196]	@ (800136c <MX_GPIO_Init+0x15c>)
 80012a6:	f002 fb49 	bl	800393c <HAL_GPIO_WritePin>
                          |Status_LED_debbug_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	2120      	movs	r1, #32
 80012ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012b2:	f002 fb43 	bl	800393c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_NE_Pin|INT1_ACC_Pin|DEV_EN_LIDAR_Pin, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	f248 4180 	movw	r1, #33920	@ 0x8480
 80012bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012c0:	f002 fb3c 	bl	800393c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M_EN_LIDAR_Pin|LED_NW_Pin|LED_W_Pin|LED_N_Pin
 80012c4:	2200      	movs	r2, #0
 80012c6:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 80012ca:	4829      	ldr	r0, [pc, #164]	@ (8001370 <MX_GPIO_Init+0x160>)
 80012cc:	f002 fb36 	bl	800393c <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_S_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = INT2_ACC_Pin|LED_SE_Pin|LED_SW_Pin|Status_LED_Pin
 80012d0:	f642 4350 	movw	r3, #11344	@ 0x2c50
 80012d4:	617b      	str	r3, [r7, #20]
                          |Status_LED_debbug_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	4820      	ldr	r0, [pc, #128]	@ (800136c <MX_GPIO_Init+0x15c>)
 80012ea:	f002 f9a5 	bl	8003638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 80012ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	481c      	ldr	r0, [pc, #112]	@ (8001374 <MX_GPIO_Init+0x164>)
 8001304:	f002 f998 	bl	8003638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS_ACC_Pin|LED_NE_Pin|INT1_ACC_Pin|DEV_EN_LIDAR_Pin;
 8001308:	f248 43a0 	movw	r3, #33952	@ 0x84a0
 800130c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130e:	2301      	movs	r3, #1
 8001310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001324:	f002 f988 	bl	8003638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = M_EN_LIDAR_Pin|LED_NW_Pin|LED_W_Pin|LED_N_Pin
 8001328:	f241 03f4 	movw	r3, #4340	@ 0x10f4
 800132c:	617b      	str	r3, [r7, #20]
                          |LED_E_Pin|LED_S_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	480b      	ldr	r0, [pc, #44]	@ (8001370 <MX_GPIO_Init+0x160>)
 8001342:	f002 f979 	bl	8003638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT_Flash_Pin;
 8001346:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800134a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT_Flash_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	4805      	ldr	r0, [pc, #20]	@ (8001370 <MX_GPIO_Init+0x160>)
 800135c:	f002 f96c 	bl	8003638 <HAL_GPIO_Init>

}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	@ 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40021000 	.word	0x40021000
 800136c:	48000800 	.word	0x48000800
 8001370:	48000400 	.word	0x48000400
 8001374:	48001800 	.word	0x48001800

08001378 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr){
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8001380:	1d39      	adds	r1, r7, #4
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	2201      	movs	r2, #1
 8001388:	4803      	ldr	r0, [pc, #12]	@ (8001398 <__io_putchar+0x20>)
 800138a:	f005 fa1b 	bl	80067c4 <HAL_UART_Transmit>
	return chr;
 800138e:	687b      	ldr	r3, [r7, #4]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	200003fc 	.word	0x200003fc

0800139c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a0:	f000 ffbf 	bl	8002322 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a4:	f000 f822 	bl	80013ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a8:	f7ff ff32 	bl	8001210 <MX_GPIO_Init>
  MX_ADC1_Init();
 80013ac:	f7ff fe42 	bl	8001034 <MX_ADC1_Init>
  MX_SPI2_Init();
 80013b0:	f000 f860 	bl	8001474 <MX_SPI2_Init>
  MX_TIM1_Init();
 80013b4:	f000 fb40 	bl	8001a38 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013b8:	f000 fbde 	bl	8001b78 <MX_TIM2_Init>
  MX_TIM3_Init();
 80013bc:	f000 fc40 	bl	8001c40 <MX_TIM3_Init>
  MX_TIM4_Init();
 80013c0:	f000 fc94 	bl	8001cec <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80013c4:	f000 fe54 	bl	8002070 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80013c8:	f000 fe9e 	bl	8002108 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Start_Motors();
 80013cc:	f000 fe3a 	bl	8002044 <Start_Motors>
  ADXL343_Init();
 80013d0:	f000 f9c6 	bl	8001760 <ADXL343_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80013d4:	f7ff fefa 	bl	80011cc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80013d8:	f006 f888 	bl	80074ec <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Read_Acceleration();
 80013dc:	f000 f926 	bl	800162c <Read_Acceleration>
	  HAL_Delay(1000);
 80013e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013e4:	f001 f80e 	bl	8002404 <HAL_Delay>
  {
 80013e8:	bf00      	nop
 80013ea:	e7f7      	b.n	80013dc <main+0x40>

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b094      	sub	sp, #80	@ 0x50
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0318 	add.w	r3, r7, #24
 80013f6:	2238      	movs	r2, #56	@ 0x38
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f008 f9ab 	bl	8009756 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800140e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001412:	f002 faab 	bl	800396c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001416:	2301      	movs	r3, #1
 8001418:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800141a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800141e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001420:	2300      	movs	r3, #0
 8001422:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001424:	f107 0318 	add.w	r3, r7, #24
 8001428:	4618      	mov	r0, r3
 800142a:	f002 fb53 	bl	8003ad4 <HAL_RCC_OscConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <SystemClock_Config+0x4c>
  {
    Error_Handler();
 8001434:	f000 f818 	bl	8001468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001438:	230f      	movs	r3, #15
 800143a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800143c:	2302      	movs	r3, #2
 800143e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f002 fe51 	bl	80040f8 <HAL_RCC_ClockConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800145c:	f000 f804 	bl	8001468 <Error_Handler>
  }
}
 8001460:	bf00      	nop
 8001462:	3750      	adds	r7, #80	@ 0x50
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800146c:	b672      	cpsid	i
}
 800146e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <Error_Handler+0x8>

08001474 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001478:	4b1b      	ldr	r3, [pc, #108]	@ (80014e8 <MX_SPI2_Init+0x74>)
 800147a:	4a1c      	ldr	r2, [pc, #112]	@ (80014ec <MX_SPI2_Init+0x78>)
 800147c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800147e:	4b1a      	ldr	r3, [pc, #104]	@ (80014e8 <MX_SPI2_Init+0x74>)
 8001480:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001484:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001486:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <MX_SPI2_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800148c:	4b16      	ldr	r3, [pc, #88]	@ (80014e8 <MX_SPI2_Init+0x74>)
 800148e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001492:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001494:	4b14      	ldr	r3, [pc, #80]	@ (80014e8 <MX_SPI2_Init+0x74>)
 8001496:	2202      	movs	r2, #2
 8001498:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800149a:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <MX_SPI2_Init+0x74>)
 800149c:	2201      	movs	r2, #1
 800149e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014a0:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <MX_SPI2_Init+0x74>)
 80014a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014a6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <MX_SPI2_Init+0x74>)
 80014aa:	2218      	movs	r2, #24
 80014ac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <MX_SPI2_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <MX_SPI2_Init+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <MX_SPI2_Init+0x74>)
 80014bc:	2200      	movs	r2, #0
 80014be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80014c0:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <MX_SPI2_Init+0x74>)
 80014c2:	2207      	movs	r2, #7
 80014c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <MX_SPI2_Init+0x74>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <MX_SPI2_Init+0x74>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <MX_SPI2_Init+0x74>)
 80014d4:	f003 fa18 	bl	8004908 <HAL_SPI_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80014de:	f7ff ffc3 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000264 	.word	0x20000264
 80014ec:	40003800 	.word	0x40003800

080014f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	@ 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a17      	ldr	r2, [pc, #92]	@ (800156c <HAL_SPI_MspInit+0x7c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d128      	bne.n	8001564 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001512:	4b17      	ldr	r3, [pc, #92]	@ (8001570 <HAL_SPI_MspInit+0x80>)
 8001514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001516:	4a16      	ldr	r2, [pc, #88]	@ (8001570 <HAL_SPI_MspInit+0x80>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800151c:	6593      	str	r3, [r2, #88]	@ 0x58
 800151e:	4b14      	ldr	r3, [pc, #80]	@ (8001570 <HAL_SPI_MspInit+0x80>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <HAL_SPI_MspInit+0x80>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152e:	4a10      	ldr	r2, [pc, #64]	@ (8001570 <HAL_SPI_MspInit+0x80>)
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <HAL_SPI_MspInit+0x80>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_TO_SCLK_ACC_Pin|SPI2_MISO_TO_SDO_ACC_Pin|SPI2_MOSI_TO_SDI_ACC_Pin;
 8001542:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001554:	2305      	movs	r3, #5
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	4805      	ldr	r0, [pc, #20]	@ (8001574 <HAL_SPI_MspInit+0x84>)
 8001560:	f002 f86a 	bl	8003638 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001564:	bf00      	nop
 8001566:	3728      	adds	r7, #40	@ 0x28
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40003800 	.word	0x40003800
 8001570:	40021000 	.word	0x40021000
 8001574:	48000400 	.word	0x48000400

08001578 <SPI_Write>:
  /* USER CODE END SPI2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void SPI_Write(uint8_t reg, uint8_t value) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	460a      	mov	r2, r1
 8001582:	71fb      	strb	r3, [r7, #7]
 8001584:	4613      	mov	r3, r2
 8001586:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg | 0x40;
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800158e:	b2db      	uxtb	r3, r3
 8001590:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8001592:	79bb      	ldrb	r3, [r7, #6]
 8001594:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	2120      	movs	r1, #32
 800159a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800159e:	f002 f9cd 	bl	800393c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, data, 2, HAL_MAX_DELAY);
 80015a2:	f107 010c 	add.w	r1, r7, #12
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	2202      	movs	r2, #2
 80015ac:	4806      	ldr	r0, [pc, #24]	@ (80015c8 <SPI_Write+0x50>)
 80015ae:	f003 fa56 	bl	8004a5e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_SET);
 80015b2:	2201      	movs	r2, #1
 80015b4:	2120      	movs	r1, #32
 80015b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ba:	f002 f9bf 	bl	800393c <HAL_GPIO_WritePin>
}
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000264 	.word	0x20000264

080015cc <SPI_Read>:

uint8_t SPI_Read(uint8_t reg) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data = reg | 0x80;
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	73fb      	strb	r3, [r7, #15]
    uint8_t rx_data = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_RESET);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2120      	movs	r1, #32
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ec:	f002 f9a6 	bl	800393c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &tx_data, 1, HAL_MAX_DELAY);
 80015f0:	f107 010f 	add.w	r1, r7, #15
 80015f4:	f04f 33ff 	mov.w	r3, #4294967295
 80015f8:	2201      	movs	r2, #1
 80015fa:	480b      	ldr	r0, [pc, #44]	@ (8001628 <SPI_Read+0x5c>)
 80015fc:	f003 fa2f 	bl	8004a5e <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, &rx_data, 1, HAL_MAX_DELAY);
 8001600:	f107 010e 	add.w	r1, r7, #14
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
 8001608:	2201      	movs	r2, #1
 800160a:	4807      	ldr	r0, [pc, #28]	@ (8001628 <SPI_Read+0x5c>)
 800160c:	f003 fb9c 	bl	8004d48 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_SET);
 8001610:	2201      	movs	r2, #1
 8001612:	2120      	movs	r1, #32
 8001614:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001618:	f002 f990 	bl	800393c <HAL_GPIO_WritePin>

    return rx_data;
 800161c:	7bbb      	ldrb	r3, [r7, #14]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000264 	.word	0x20000264

0800162c <Read_Acceleration>:

void Read_Acceleration(void) {
 800162c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001630:	b0a6      	sub	sp, #152	@ 0x98
 8001632:	af04      	add	r7, sp, #16
    uint8_t buffer[6];
    uint8_t reg = 0x32 | 0xC0;  // Commande de lecture multiple à partir de DATAX0
 8001634:	23f2      	movs	r3, #242	@ 0xf2
 8001636:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

    HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	2120      	movs	r1, #32
 800163e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001642:	f002 f97b 	bl	800393c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &reg, 1, HAL_MAX_DELAY);
 8001646:	f107 0167 	add.w	r1, r7, #103	@ 0x67
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	2201      	movs	r2, #1
 8001650:	483f      	ldr	r0, [pc, #252]	@ (8001750 <Read_Acceleration+0x124>)
 8001652:	f003 fa04 	bl	8004a5e <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, buffer, 6, HAL_MAX_DELAY);
 8001656:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 800165a:	f04f 33ff 	mov.w	r3, #4294967295
 800165e:	2206      	movs	r2, #6
 8001660:	483b      	ldr	r0, [pc, #236]	@ (8001750 <Read_Acceleration+0x124>)
 8001662:	f003 fb71 	bl	8004d48 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_SET);
 8001666:	2201      	movs	r2, #1
 8001668:	2120      	movs	r1, #32
 800166a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800166e:	f002 f965 	bl	800393c <HAL_GPIO_WritePin>

    // Combinaison des octets pour obtenir des valeurs 16 bits signées
    int16_t x = (int16_t)((buffer[1] << 8) | buffer[0]);
 8001672:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	b21a      	sxth	r2, r3
 800167a:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 800167e:	b21b      	sxth	r3, r3
 8001680:	4313      	orrs	r3, r2
 8001682:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    int16_t y = (int16_t)((buffer[3] << 8) | buffer[2]);
 8001686:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	b21a      	sxth	r2, r3
 800168e:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001692:	b21b      	sxth	r3, r3
 8001694:	4313      	orrs	r3, r2
 8001696:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
    int16_t z = (int16_t)((buffer[5] << 8) | buffer[4]);
 800169a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	4313      	orrs	r3, r2
 80016aa:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82

    // Conversion en g (±2g, Full Resolution ou Fixed 10-bit)
    float scale = 3.9 / 1000.0;  // Sensibilité pour ±2g en g/LSB
 80016ae:	4b29      	ldr	r3, [pc, #164]	@ (8001754 <Read_Acceleration+0x128>)
 80016b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    float ax = x * scale;
 80016b2:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 80016b6:	ee07 3a90 	vmov	s15, r3
 80016ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016be:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80016c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c6:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
    float ay = y * scale;
 80016ca:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	@ 0x84
 80016ce:	ee07 3a90 	vmov	s15, r3
 80016d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d6:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80016da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016de:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    float az = z * scale;
 80016e2:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 80016e6:	ee07 3a90 	vmov	s15, r3
 80016ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ee:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80016f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f6:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70

    // Transmission des résultats via UART
    char msg[100];
    sprintf(msg, "Ax: %.3f g, Ay: %.3f g, Az: %.3f g\r\n", ax, ay, az);
 80016fa:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80016fc:	f7fe ff4c 	bl	8000598 <__aeabi_f2d>
 8001700:	4680      	mov	r8, r0
 8001702:	4689      	mov	r9, r1
 8001704:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001706:	f7fe ff47 	bl	8000598 <__aeabi_f2d>
 800170a:	4604      	mov	r4, r0
 800170c:	460d      	mov	r5, r1
 800170e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001710:	f7fe ff42 	bl	8000598 <__aeabi_f2d>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4638      	mov	r0, r7
 800171a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800171e:	e9cd 4500 	strd	r4, r5, [sp]
 8001722:	4642      	mov	r2, r8
 8001724:	464b      	mov	r3, r9
 8001726:	490c      	ldr	r1, [pc, #48]	@ (8001758 <Read_Acceleration+0x12c>)
 8001728:	f007 ffb2 	bl	8009690 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800172c:	463b      	mov	r3, r7
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe fdc6 	bl	80002c0 <strlen>
 8001734:	4603      	mov	r3, r0
 8001736:	b29a      	uxth	r2, r3
 8001738:	4639      	mov	r1, r7
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
 800173e:	4807      	ldr	r0, [pc, #28]	@ (800175c <Read_Acceleration+0x130>)
 8001740:	f005 f840 	bl	80067c4 <HAL_UART_Transmit>
}
 8001744:	bf00      	nop
 8001746:	3788      	adds	r7, #136	@ 0x88
 8001748:	46bd      	mov	sp, r7
 800174a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800174e:	bf00      	nop
 8001750:	20000264 	.word	0x20000264
 8001754:	3b7f9724 	.word	0x3b7f9724
 8001758:	0800cf40 	.word	0x0800cf40
 800175c:	200003fc 	.word	0x200003fc

08001760 <ADXL343_Init>:

void ADXL343_Init(void) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
    uint8_t devid = SPI_Read(0x00);  // Lire le registre DEVID (0x00)
 8001766:	2000      	movs	r0, #0
 8001768:	f7ff ff30 	bl	80015cc <SPI_Read>
 800176c:	4603      	mov	r3, r0
 800176e:	73fb      	strb	r3, [r7, #15]

    if (devid == 0xE5) {
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	2be5      	cmp	r3, #229	@ 0xe5
 8001774:	d11f      	bne.n	80017b6 <ADXL343_Init+0x56>
        // Le composant est détecté, procéder à l'initialisation
        SPI_Write(0x2C, 0x04);  // Configurer la bande passante à 1.56 Hz
 8001776:	2104      	movs	r1, #4
 8001778:	202c      	movs	r0, #44	@ 0x2c
 800177a:	f7ff fefd 	bl	8001578 <SPI_Write>
        SPI_Write(0x2E, 0x80);  // Activer DATA_READY
 800177e:	2180      	movs	r1, #128	@ 0x80
 8001780:	202e      	movs	r0, #46	@ 0x2e
 8001782:	f7ff fef9 	bl	8001578 <SPI_Write>
        SPI_Write(0x31, 0x08);  // DATA_FORMAT : FULL_RES = 1, RANGE = ±2g
 8001786:	2108      	movs	r1, #8
 8001788:	2031      	movs	r0, #49	@ 0x31
 800178a:	f7ff fef5 	bl	8001578 <SPI_Write>
        SPI_Write(0x2D, 0x08);  // Activer le mode mesure
 800178e:	2108      	movs	r1, #8
 8001790:	202d      	movs	r0, #45	@ 0x2d
 8001792:	f7ff fef1 	bl	8001578 <SPI_Write>
        Read_Acceleration();    // Lire les données pour effacer l'interruption
 8001796:	f7ff ff49 	bl	800162c <Read_Acceleration>

        char *msg = "ADXL343 detecte et initialise !\r\n";
 800179a:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <ADXL343_Init+0x78>)
 800179c:	607b      	str	r3, [r7, #4]
        HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7fe fd8e 	bl	80002c0 <strlen>
 80017a4:	4603      	mov	r3, r0
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	480b      	ldr	r0, [pc, #44]	@ (80017dc <ADXL343_Init+0x7c>)
 80017b0:	f005 f808 	bl	80067c4 <HAL_UART_Transmit>
    } else {
        char *error_msg = "Erreur : ADXL343 non detecte !\r\n";
        HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
    }
}
 80017b4:	e00c      	b.n	80017d0 <ADXL343_Init+0x70>
        char *error_msg = "Erreur : ADXL343 non detecte !\r\n";
 80017b6:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <ADXL343_Init+0x80>)
 80017b8:	60bb      	str	r3, [r7, #8]
        HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 80017ba:	68b8      	ldr	r0, [r7, #8]
 80017bc:	f7fe fd80 	bl	80002c0 <strlen>
 80017c0:	4603      	mov	r3, r0
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	f04f 33ff 	mov.w	r3, #4294967295
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	4804      	ldr	r0, [pc, #16]	@ (80017dc <ADXL343_Init+0x7c>)
 80017cc:	f004 fffa 	bl	80067c4 <HAL_UART_Transmit>
}
 80017d0:	bf00      	nop
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	0800cf68 	.word	0x0800cf68
 80017dc:	200003fc 	.word	0x200003fc
 80017e0:	0800cf8c 	.word	0x0800cf8c

080017e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ea:	4b12      	ldr	r3, [pc, #72]	@ (8001834 <HAL_MspInit+0x50>)
 80017ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ee:	4a11      	ldr	r2, [pc, #68]	@ (8001834 <HAL_MspInit+0x50>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80017f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001834 <HAL_MspInit+0x50>)
 80017f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <HAL_MspInit+0x50>)
 8001804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001806:	4a0b      	ldr	r2, [pc, #44]	@ (8001834 <HAL_MspInit+0x50>)
 8001808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800180c:	6593      	str	r3, [r2, #88]	@ 0x58
 800180e:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <HAL_MspInit+0x50>)
 8001810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	210f      	movs	r1, #15
 800181e:	f06f 0001 	mvn.w	r0, #1
 8001822:	f001 fee2 	bl	80035ea <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001826:	f002 f945 	bl	8003ab4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000

08001838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <NMI_Handler+0x4>

08001840 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <HardFault_Handler+0x4>

08001848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <MemManage_Handler+0x4>

08001850 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <BusFault_Handler+0x4>

08001858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <UsageFault_Handler+0x4>

08001860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001872:	f000 fda9 	bl	80023c8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001876:	f006 fb59 	bl	8007f2c <xTaskGetSchedulerState>
 800187a:	4603      	mov	r3, r0
 800187c:	2b01      	cmp	r3, #1
 800187e:	d001      	beq.n	8001884 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001880:	f006 fd9a 	bl	80083b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}

08001888 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return 1;
 800188c:	2301      	movs	r3, #1
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_kill>:

int _kill(int pid, int sig)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018a2:	f007 ffab 	bl	80097fc <__errno>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2216      	movs	r2, #22
 80018aa:	601a      	str	r2, [r3, #0]
  return -1;
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_exit>:

void _exit (int status)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ffe7 	bl	8001898 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018ca:	bf00      	nop
 80018cc:	e7fd      	b.n	80018ca <_exit+0x12>

080018ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	e00a      	b.n	80018f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018e0:	f3af 8000 	nop.w
 80018e4:	4601      	mov	r1, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	60ba      	str	r2, [r7, #8]
 80018ec:	b2ca      	uxtb	r2, r1
 80018ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	3301      	adds	r3, #1
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	dbf0      	blt.n	80018e0 <_read+0x12>
  }

  return len;
 80018fe:	687b      	ldr	r3, [r7, #4]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	e009      	b.n	800192e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	1c5a      	adds	r2, r3, #1
 800191e:	60ba      	str	r2, [r7, #8]
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fd28 	bl	8001378 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3301      	adds	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	429a      	cmp	r2, r3
 8001934:	dbf1      	blt.n	800191a <_write+0x12>
  }
  return len;
 8001936:	687b      	ldr	r3, [r7, #4]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <_close>:

int _close(int file)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001948:	f04f 33ff 	mov.w	r3, #4294967295
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001968:	605a      	str	r2, [r3, #4]
  return 0;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <_isatty>:

int _isatty(int file)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001980:	2301      	movs	r3, #1
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800198e:	b480      	push	{r7}
 8001990:	b085      	sub	sp, #20
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b0:	4a14      	ldr	r2, [pc, #80]	@ (8001a04 <_sbrk+0x5c>)
 80019b2:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <_sbrk+0x60>)
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019bc:	4b13      	ldr	r3, [pc, #76]	@ (8001a0c <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d102      	bne.n	80019ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c4:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <_sbrk+0x64>)
 80019c6:	4a12      	ldr	r2, [pc, #72]	@ (8001a10 <_sbrk+0x68>)
 80019c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ca:	4b10      	ldr	r3, [pc, #64]	@ (8001a0c <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d207      	bcs.n	80019e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d8:	f007 ff10 	bl	80097fc <__errno>
 80019dc:	4603      	mov	r3, r0
 80019de:	220c      	movs	r2, #12
 80019e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	e009      	b.n	80019fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e8:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ee:	4b07      	ldr	r3, [pc, #28]	@ (8001a0c <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	4a05      	ldr	r2, [pc, #20]	@ (8001a0c <_sbrk+0x64>)
 80019f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20008000 	.word	0x20008000
 8001a08:	00000400 	.word	0x00000400
 8001a0c:	200002c8 	.word	0x200002c8
 8001a10:	200013c8 	.word	0x200013c8

08001a14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a18:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <SystemInit+0x20>)
 8001a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a1e:	4a05      	ldr	r2, [pc, #20]	@ (8001a34 <SystemInit+0x20>)
 8001a20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b098      	sub	sp, #96	@ 0x60
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a3e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a4a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
 8001a58:	611a      	str	r2, [r3, #16]
 8001a5a:	615a      	str	r2, [r3, #20]
 8001a5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	2234      	movs	r2, #52	@ 0x34
 8001a62:	2100      	movs	r1, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f007 fe76 	bl	8009756 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a6a:	4b41      	ldr	r3, [pc, #260]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001a6c:	4a41      	ldr	r2, [pc, #260]	@ (8001b74 <MX_TIM1_Init+0x13c>)
 8001a6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a70:	4b3f      	ldr	r3, [pc, #252]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a76:	4b3e      	ldr	r3, [pc, #248]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a7c:	4b3c      	ldr	r3, [pc, #240]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001a7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a84:	4b3a      	ldr	r3, [pc, #232]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a8a:	4b39      	ldr	r3, [pc, #228]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a90:	4b37      	ldr	r3, [pc, #220]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a96:	4836      	ldr	r0, [pc, #216]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001a98:	f003 fe6c 	bl	8005774 <HAL_TIM_PWM_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001aa2:	f7ff fce1 	bl	8001468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ab2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	482d      	ldr	r0, [pc, #180]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001aba:	f004 fd25 	bl	8006508 <HAL_TIMEx_MasterConfigSynchronization>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ac4:	f7ff fcd0 	bl	8001468 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ac8:	2360      	movs	r3, #96	@ 0x60
 8001aca:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001adc:	2300      	movs	r3, #0
 8001ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ae4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ae8:	2200      	movs	r2, #0
 8001aea:	4619      	mov	r1, r3
 8001aec:	4820      	ldr	r0, [pc, #128]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001aee:	f004 f83f 	bl	8005b70 <HAL_TIM_PWM_ConfigChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001af8:	f7ff fcb6 	bl	8001468 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001afc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b00:	2204      	movs	r2, #4
 8001b02:	4619      	mov	r1, r3
 8001b04:	481a      	ldr	r0, [pc, #104]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001b06:	f004 f833 	bl	8005b70 <HAL_TIM_PWM_ConfigChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001b10:	f7ff fcaa 	bl	8001468 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b2c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001b44:	2300      	movs	r3, #0
 8001b46:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4807      	ldr	r0, [pc, #28]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001b52:	f004 fd5b 	bl	800660c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001b5c:	f7ff fc84 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b60:	4803      	ldr	r0, [pc, #12]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001b62:	f000 f9ed 	bl	8001f40 <HAL_TIM_MspPostInit>

}
 8001b66:	bf00      	nop
 8001b68:	3760      	adds	r7, #96	@ 0x60
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200002cc 	.word	0x200002cc
 8001b74:	40012c00 	.word	0x40012c00

08001b78 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	@ 0x28
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b7e:	f107 031c 	add.w	r3, r7, #28
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
 8001b98:	615a      	str	r2, [r3, #20]
 8001b9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b9c:	4b27      	ldr	r3, [pc, #156]	@ (8001c3c <MX_TIM2_Init+0xc4>)
 8001b9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ba2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ba4:	4b25      	ldr	r3, [pc, #148]	@ (8001c3c <MX_TIM2_Init+0xc4>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001baa:	4b24      	ldr	r3, [pc, #144]	@ (8001c3c <MX_TIM2_Init+0xc4>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001bb0:	4b22      	ldr	r3, [pc, #136]	@ (8001c3c <MX_TIM2_Init+0xc4>)
 8001bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb8:	4b20      	ldr	r3, [pc, #128]	@ (8001c3c <MX_TIM2_Init+0xc4>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001c3c <MX_TIM2_Init+0xc4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bc4:	481d      	ldr	r0, [pc, #116]	@ (8001c3c <MX_TIM2_Init+0xc4>)
 8001bc6:	f003 fdd5 	bl	8005774 <HAL_TIM_PWM_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001bd0:	f7ff fc4a 	bl	8001468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	4619      	mov	r1, r3
 8001be2:	4816      	ldr	r0, [pc, #88]	@ (8001c3c <MX_TIM2_Init+0xc4>)
 8001be4:	f004 fc90 	bl	8006508 <HAL_TIMEx_MasterConfigSynchronization>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001bee:	f7ff fc3b 	bl	8001468 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bf2:	2360      	movs	r3, #96	@ 0x60
 8001bf4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c02:	463b      	mov	r3, r7
 8001c04:	2200      	movs	r2, #0
 8001c06:	4619      	mov	r1, r3
 8001c08:	480c      	ldr	r0, [pc, #48]	@ (8001c3c <MX_TIM2_Init+0xc4>)
 8001c0a:	f003 ffb1 	bl	8005b70 <HAL_TIM_PWM_ConfigChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001c14:	f7ff fc28 	bl	8001468 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c18:	463b      	mov	r3, r7
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4807      	ldr	r0, [pc, #28]	@ (8001c3c <MX_TIM2_Init+0xc4>)
 8001c20:	f003 ffa6 	bl	8005b70 <HAL_TIM_PWM_ConfigChannel>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001c2a:	f7ff fc1d 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c2e:	4803      	ldr	r0, [pc, #12]	@ (8001c3c <MX_TIM2_Init+0xc4>)
 8001c30:	f000 f986 	bl	8001f40 <HAL_TIM_MspPostInit>

}
 8001c34:	bf00      	nop
 8001c36:	3728      	adds	r7, #40	@ 0x28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000318 	.word	0x20000318

08001c40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08c      	sub	sp, #48	@ 0x30
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c46:	f107 030c 	add.w	r3, r7, #12
 8001c4a:	2224      	movs	r2, #36	@ 0x24
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f007 fd81 	bl	8009756 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c54:	463b      	mov	r3, r7
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c5e:	4b21      	ldr	r3, [pc, #132]	@ (8001ce4 <MX_TIM3_Init+0xa4>)
 8001c60:	4a21      	ldr	r2, [pc, #132]	@ (8001ce8 <MX_TIM3_Init+0xa8>)
 8001c62:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce4 <MX_TIM3_Init+0xa4>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce4 <MX_TIM3_Init+0xa4>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c70:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce4 <MX_TIM3_Init+0xa4>)
 8001c72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce4 <MX_TIM3_Init+0xa4>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7e:	4b19      	ldr	r3, [pc, #100]	@ (8001ce4 <MX_TIM3_Init+0xa4>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c84:	2301      	movs	r3, #1
 8001c86:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001ca8:	f107 030c 	add.w	r3, r7, #12
 8001cac:	4619      	mov	r1, r3
 8001cae:	480d      	ldr	r0, [pc, #52]	@ (8001ce4 <MX_TIM3_Init+0xa4>)
 8001cb0:	f003 feb8 	bl	8005a24 <HAL_TIM_Encoder_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001cba:	f7ff fbd5 	bl	8001468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cc6:	463b      	mov	r3, r7
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4806      	ldr	r0, [pc, #24]	@ (8001ce4 <MX_TIM3_Init+0xa4>)
 8001ccc:	f004 fc1c 	bl	8006508 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001cd6:	f7ff fbc7 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	3730      	adds	r7, #48	@ 0x30
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000364 	.word	0x20000364
 8001ce8:	40000400 	.word	0x40000400

08001cec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b094      	sub	sp, #80	@ 0x50
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cf2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cf6:	2224      	movs	r2, #36	@ 0x24
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f007 fd2b 	bl	8009756 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d00:	f107 0320 	add.w	r3, r7, #32
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
 8001d18:	611a      	str	r2, [r3, #16]
 8001d1a:	615a      	str	r2, [r3, #20]
 8001d1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d1e:	4b30      	ldr	r3, [pc, #192]	@ (8001de0 <MX_TIM4_Init+0xf4>)
 8001d20:	4a30      	ldr	r2, [pc, #192]	@ (8001de4 <MX_TIM4_Init+0xf8>)
 8001d22:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d24:	4b2e      	ldr	r3, [pc, #184]	@ (8001de0 <MX_TIM4_Init+0xf4>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001de0 <MX_TIM4_Init+0xf4>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d30:	4b2b      	ldr	r3, [pc, #172]	@ (8001de0 <MX_TIM4_Init+0xf4>)
 8001d32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d36:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d38:	4b29      	ldr	r3, [pc, #164]	@ (8001de0 <MX_TIM4_Init+0xf4>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d3e:	4b28      	ldr	r3, [pc, #160]	@ (8001de0 <MX_TIM4_Init+0xf4>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d44:	4826      	ldr	r0, [pc, #152]	@ (8001de0 <MX_TIM4_Init+0xf4>)
 8001d46:	f003 fd15 	bl	8005774 <HAL_TIM_PWM_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001d50:	f7ff fb8a 	bl	8001468 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d54:	2301      	movs	r3, #1
 8001d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d60:	2300      	movs	r3, #0
 8001d62:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC1Filter = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d70:	2300      	movs	r3, #0
 8001d72:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.IC2Filter = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4818      	ldr	r0, [pc, #96]	@ (8001de0 <MX_TIM4_Init+0xf4>)
 8001d80:	f003 fe50 	bl	8005a24 <HAL_TIM_Encoder_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8001d8a:	f7ff fb6d 	bl	8001468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d96:	f107 0320 	add.w	r3, r7, #32
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4810      	ldr	r0, [pc, #64]	@ (8001de0 <MX_TIM4_Init+0xf4>)
 8001d9e:	f004 fbb3 	bl	8006508 <HAL_TIMEx_MasterConfigSynchronization>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8001da8:	f7ff fb5e 	bl	8001468 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dac:	2360      	movs	r3, #96	@ 0x60
 8001dae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001dbc:	1d3b      	adds	r3, r7, #4
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4807      	ldr	r0, [pc, #28]	@ (8001de0 <MX_TIM4_Init+0xf4>)
 8001dc4:	f003 fed4 	bl	8005b70 <HAL_TIM_PWM_ConfigChannel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8001dce:	f7ff fb4b 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001dd2:	4803      	ldr	r0, [pc, #12]	@ (8001de0 <MX_TIM4_Init+0xf4>)
 8001dd4:	f000 f8b4 	bl	8001f40 <HAL_TIM_MspPostInit>

}
 8001dd8:	bf00      	nop
 8001dda:	3750      	adds	r7, #80	@ 0x50
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	200003b0 	.word	0x200003b0
 8001de4:	40000800 	.word	0x40000800

08001de8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08c      	sub	sp, #48	@ 0x30
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 031c 	add.w	r3, r7, #28
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a2a      	ldr	r2, [pc, #168]	@ (8001eb0 <HAL_TIM_PWM_MspInit+0xc8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d10c      	bne.n	8001e24 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e0e:	4a29      	ldr	r2, [pc, #164]	@ (8001eb4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001e10:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e14:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e16:	4b27      	ldr	r3, [pc, #156]	@ (8001eb4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e1e:	61bb      	str	r3, [r7, #24]
 8001e20:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001e22:	e040      	b.n	8001ea6 <HAL_TIM_PWM_MspInit+0xbe>
  else if(tim_pwmHandle->Instance==TIM2)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e2c:	d10c      	bne.n	8001e48 <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e2e:	4b21      	ldr	r3, [pc, #132]	@ (8001eb4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e32:	4a20      	ldr	r2, [pc, #128]	@ (8001eb4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697b      	ldr	r3, [r7, #20]
}
 8001e46:	e02e      	b.n	8001ea6 <HAL_TIM_PWM_MspInit+0xbe>
  else if(tim_pwmHandle->Instance==TIM4)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8001eb8 <HAL_TIM_PWM_MspInit+0xd0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d129      	bne.n	8001ea6 <HAL_TIM_PWM_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e52:	4b18      	ldr	r3, [pc, #96]	@ (8001eb4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e56:	4a17      	ldr	r2, [pc, #92]	@ (8001eb4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001e58:	f043 0304 	orr.w	r3, r3, #4
 8001e5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e5e:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6a:	4b12      	ldr	r3, [pc, #72]	@ (8001eb4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6e:	4a11      	ldr	r2, [pc, #68]	@ (8001eb4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e76:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e82:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001e94:	230a      	movs	r3, #10
 8001e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e98:	f107 031c 	add.w	r3, r7, #28
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ea2:	f001 fbc9 	bl	8003638 <HAL_GPIO_Init>
}
 8001ea6:	bf00      	nop
 8001ea8:	3730      	adds	r7, #48	@ 0x30
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40012c00 	.word	0x40012c00
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40000800 	.word	0x40000800

08001ebc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	@ 0x28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a17      	ldr	r2, [pc, #92]	@ (8001f38 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d128      	bne.n	8001f30 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ede:	4b17      	ldr	r3, [pc, #92]	@ (8001f3c <HAL_TIM_Encoder_MspInit+0x80>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee2:	4a16      	ldr	r2, [pc, #88]	@ (8001f3c <HAL_TIM_Encoder_MspInit+0x80>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eea:	4b14      	ldr	r3, [pc, #80]	@ (8001f3c <HAL_TIM_Encoder_MspInit+0x80>)
 8001eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef6:	4b11      	ldr	r3, [pc, #68]	@ (8001f3c <HAL_TIM_Encoder_MspInit+0x80>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001efa:	4a10      	ldr	r2, [pc, #64]	@ (8001f3c <HAL_TIM_Encoder_MspInit+0x80>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f02:	4b0e      	ldr	r3, [pc, #56]	@ (8001f3c <HAL_TIM_Encoder_MspInit+0x80>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001f0e:	2350      	movs	r3, #80	@ 0x50
 8001f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f22:	f107 0314 	add.w	r3, r7, #20
 8001f26:	4619      	mov	r1, r3
 8001f28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f2c:	f001 fb84 	bl	8003638 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f30:	bf00      	nop
 8001f32:	3728      	adds	r7, #40	@ 0x28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40000400 	.word	0x40000400
 8001f3c:	40021000 	.word	0x40021000

08001f40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	@ 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a35      	ldr	r2, [pc, #212]	@ (8002034 <HAL_TIM_MspPostInit+0xf4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d11e      	bne.n	8001fa0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f62:	4b35      	ldr	r3, [pc, #212]	@ (8002038 <HAL_TIM_MspPostInit+0xf8>)
 8001f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f66:	4a34      	ldr	r2, [pc, #208]	@ (8002038 <HAL_TIM_MspPostInit+0xf8>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f6e:	4b32      	ldr	r3, [pc, #200]	@ (8002038 <HAL_TIM_MspPostInit+0xf8>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f80:	2302      	movs	r3, #2
 8001f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001f8c:	2306      	movs	r3, #6
 8001f8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	4619      	mov	r1, r3
 8001f96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f9a:	f001 fb4d 	bl	8003638 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f9e:	e044      	b.n	800202a <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM2)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fa8:	d11d      	bne.n	8001fe6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	4b23      	ldr	r3, [pc, #140]	@ (8002038 <HAL_TIM_MspPostInit+0xf8>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fae:	4a22      	ldr	r2, [pc, #136]	@ (8002038 <HAL_TIM_MspPostInit+0xf8>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fb6:	4b20      	ldr	r3, [pc, #128]	@ (8002038 <HAL_TIM_MspPostInit+0xf8>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd6:	f107 0314 	add.w	r3, r7, #20
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fe0:	f001 fb2a 	bl	8003638 <HAL_GPIO_Init>
}
 8001fe4:	e021      	b.n	800202a <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM4)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a14      	ldr	r2, [pc, #80]	@ (800203c <HAL_TIM_MspPostInit+0xfc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d11c      	bne.n	800202a <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff0:	4b11      	ldr	r3, [pc, #68]	@ (8002038 <HAL_TIM_MspPostInit+0xf8>)
 8001ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff4:	4a10      	ldr	r2, [pc, #64]	@ (8002038 <HAL_TIM_MspPostInit+0xf8>)
 8001ff6:	f043 0302 	orr.w	r3, r3, #2
 8001ffa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <HAL_TIM_MspPostInit+0xf8>)
 8001ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM4_CH4_M_SCTR_LIDAR_Pin;
 8002008:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800200c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2302      	movs	r3, #2
 8002010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800201a:	2302      	movs	r3, #2
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM4_CH4_M_SCTR_LIDAR_GPIO_Port, &GPIO_InitStruct);
 800201e:	f107 0314 	add.w	r3, r7, #20
 8002022:	4619      	mov	r1, r3
 8002024:	4806      	ldr	r0, [pc, #24]	@ (8002040 <HAL_TIM_MspPostInit+0x100>)
 8002026:	f001 fb07 	bl	8003638 <HAL_GPIO_Init>
}
 800202a:	bf00      	nop
 800202c:	3728      	adds	r7, #40	@ 0x28
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40012c00 	.word	0x40012c00
 8002038:	40021000 	.word	0x40021000
 800203c:	40000800 	.word	0x40000800
 8002040:	48000400 	.word	0x48000400

08002044 <Start_Motors>:
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
    TIM1->CCR1 = 0;
    TIM1->CCR2 = 0;
}

void Start_Motors(void) {
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002048:	2100      	movs	r1, #0
 800204a:	4807      	ldr	r0, [pc, #28]	@ (8002068 <Start_Motors+0x24>)
 800204c:	f003 fbea 	bl	8005824 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002050:	2104      	movs	r1, #4
 8002052:	4805      	ldr	r0, [pc, #20]	@ (8002068 <Start_Motors+0x24>)
 8002054:	f003 fbe6 	bl	8005824 <HAL_TIM_PWM_Start>
    TIM1->CCR1 = 0;
 8002058:	4b04      	ldr	r3, [pc, #16]	@ (800206c <Start_Motors+0x28>)
 800205a:	2200      	movs	r2, #0
 800205c:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 = 0;
 800205e:	4b03      	ldr	r3, [pc, #12]	@ (800206c <Start_Motors+0x28>)
 8002060:	2200      	movs	r2, #0
 8002062:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}
 8002068:	200002cc 	.word	0x200002cc
 800206c:	40012c00 	.word	0x40012c00

08002070 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002074:	4b22      	ldr	r3, [pc, #136]	@ (8002100 <MX_USART2_UART_Init+0x90>)
 8002076:	4a23      	ldr	r2, [pc, #140]	@ (8002104 <MX_USART2_UART_Init+0x94>)
 8002078:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800207a:	4b21      	ldr	r3, [pc, #132]	@ (8002100 <MX_USART2_UART_Init+0x90>)
 800207c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002080:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002082:	4b1f      	ldr	r3, [pc, #124]	@ (8002100 <MX_USART2_UART_Init+0x90>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002088:	4b1d      	ldr	r3, [pc, #116]	@ (8002100 <MX_USART2_UART_Init+0x90>)
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800208e:	4b1c      	ldr	r3, [pc, #112]	@ (8002100 <MX_USART2_UART_Init+0x90>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002094:	4b1a      	ldr	r3, [pc, #104]	@ (8002100 <MX_USART2_UART_Init+0x90>)
 8002096:	220c      	movs	r2, #12
 8002098:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209a:	4b19      	ldr	r3, [pc, #100]	@ (8002100 <MX_USART2_UART_Init+0x90>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a0:	4b17      	ldr	r3, [pc, #92]	@ (8002100 <MX_USART2_UART_Init+0x90>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020a6:	4b16      	ldr	r3, [pc, #88]	@ (8002100 <MX_USART2_UART_Init+0x90>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020ac:	4b14      	ldr	r3, [pc, #80]	@ (8002100 <MX_USART2_UART_Init+0x90>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020b2:	4b13      	ldr	r3, [pc, #76]	@ (8002100 <MX_USART2_UART_Init+0x90>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020b8:	4811      	ldr	r0, [pc, #68]	@ (8002100 <MX_USART2_UART_Init+0x90>)
 80020ba:	f004 fb33 	bl	8006724 <HAL_UART_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80020c4:	f7ff f9d0 	bl	8001468 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020c8:	2100      	movs	r1, #0
 80020ca:	480d      	ldr	r0, [pc, #52]	@ (8002100 <MX_USART2_UART_Init+0x90>)
 80020cc:	f005 f92c 	bl	8007328 <HAL_UARTEx_SetTxFifoThreshold>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80020d6:	f7ff f9c7 	bl	8001468 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020da:	2100      	movs	r1, #0
 80020dc:	4808      	ldr	r0, [pc, #32]	@ (8002100 <MX_USART2_UART_Init+0x90>)
 80020de:	f005 f961 	bl	80073a4 <HAL_UARTEx_SetRxFifoThreshold>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80020e8:	f7ff f9be 	bl	8001468 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80020ec:	4804      	ldr	r0, [pc, #16]	@ (8002100 <MX_USART2_UART_Init+0x90>)
 80020ee:	f005 f8e2 	bl	80072b6 <HAL_UARTEx_DisableFifoMode>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80020f8:	f7ff f9b6 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	200003fc 	.word	0x200003fc
 8002104:	40004400 	.word	0x40004400

08002108 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800210c:	4b22      	ldr	r3, [pc, #136]	@ (8002198 <MX_USART3_UART_Init+0x90>)
 800210e:	4a23      	ldr	r2, [pc, #140]	@ (800219c <MX_USART3_UART_Init+0x94>)
 8002110:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002112:	4b21      	ldr	r3, [pc, #132]	@ (8002198 <MX_USART3_UART_Init+0x90>)
 8002114:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002118:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800211a:	4b1f      	ldr	r3, [pc, #124]	@ (8002198 <MX_USART3_UART_Init+0x90>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002120:	4b1d      	ldr	r3, [pc, #116]	@ (8002198 <MX_USART3_UART_Init+0x90>)
 8002122:	2200      	movs	r2, #0
 8002124:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002126:	4b1c      	ldr	r3, [pc, #112]	@ (8002198 <MX_USART3_UART_Init+0x90>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800212c:	4b1a      	ldr	r3, [pc, #104]	@ (8002198 <MX_USART3_UART_Init+0x90>)
 800212e:	220c      	movs	r2, #12
 8002130:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002132:	4b19      	ldr	r3, [pc, #100]	@ (8002198 <MX_USART3_UART_Init+0x90>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002138:	4b17      	ldr	r3, [pc, #92]	@ (8002198 <MX_USART3_UART_Init+0x90>)
 800213a:	2200      	movs	r2, #0
 800213c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800213e:	4b16      	ldr	r3, [pc, #88]	@ (8002198 <MX_USART3_UART_Init+0x90>)
 8002140:	2200      	movs	r2, #0
 8002142:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002144:	4b14      	ldr	r3, [pc, #80]	@ (8002198 <MX_USART3_UART_Init+0x90>)
 8002146:	2200      	movs	r2, #0
 8002148:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800214a:	4b13      	ldr	r3, [pc, #76]	@ (8002198 <MX_USART3_UART_Init+0x90>)
 800214c:	2200      	movs	r2, #0
 800214e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002150:	4811      	ldr	r0, [pc, #68]	@ (8002198 <MX_USART3_UART_Init+0x90>)
 8002152:	f004 fae7 	bl	8006724 <HAL_UART_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800215c:	f7ff f984 	bl	8001468 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002160:	2100      	movs	r1, #0
 8002162:	480d      	ldr	r0, [pc, #52]	@ (8002198 <MX_USART3_UART_Init+0x90>)
 8002164:	f005 f8e0 	bl	8007328 <HAL_UARTEx_SetTxFifoThreshold>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800216e:	f7ff f97b 	bl	8001468 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002172:	2100      	movs	r1, #0
 8002174:	4808      	ldr	r0, [pc, #32]	@ (8002198 <MX_USART3_UART_Init+0x90>)
 8002176:	f005 f915 	bl	80073a4 <HAL_UARTEx_SetRxFifoThreshold>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002180:	f7ff f972 	bl	8001468 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002184:	4804      	ldr	r0, [pc, #16]	@ (8002198 <MX_USART3_UART_Init+0x90>)
 8002186:	f005 f896 	bl	80072b6 <HAL_UARTEx_DisableFifoMode>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002190:	f7ff f96a 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000490 	.word	0x20000490
 800219c:	40004800 	.word	0x40004800

080021a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b09c      	sub	sp, #112	@ 0x70
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021b8:	f107 0318 	add.w	r3, r7, #24
 80021bc:	2244      	movs	r2, #68	@ 0x44
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f007 fac8 	bl	8009756 <memset>
  if(uartHandle->Instance==USART2)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a3d      	ldr	r2, [pc, #244]	@ (80022c0 <HAL_UART_MspInit+0x120>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d137      	bne.n	8002240 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021d0:	2302      	movs	r3, #2
 80021d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021d4:	2300      	movs	r3, #0
 80021d6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021d8:	f107 0318 	add.w	r3, r7, #24
 80021dc:	4618      	mov	r0, r3
 80021de:	f002 f9a3 	bl	8004528 <HAL_RCCEx_PeriphCLKConfig>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021e8:	f7ff f93e 	bl	8001468 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021ec:	4b35      	ldr	r3, [pc, #212]	@ (80022c4 <HAL_UART_MspInit+0x124>)
 80021ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f0:	4a34      	ldr	r2, [pc, #208]	@ (80022c4 <HAL_UART_MspInit+0x124>)
 80021f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80021f8:	4b32      	ldr	r3, [pc, #200]	@ (80022c4 <HAL_UART_MspInit+0x124>)
 80021fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002204:	4b2f      	ldr	r3, [pc, #188]	@ (80022c4 <HAL_UART_MspInit+0x124>)
 8002206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002208:	4a2e      	ldr	r2, [pc, #184]	@ (80022c4 <HAL_UART_MspInit+0x124>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002210:	4b2c      	ldr	r3, [pc, #176]	@ (80022c4 <HAL_UART_MspInit+0x124>)
 8002212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800221c:	230c      	movs	r3, #12
 800221e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800222c:	2307      	movs	r3, #7
 800222e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002230:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002234:	4619      	mov	r1, r3
 8002236:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800223a:	f001 f9fd 	bl	8003638 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800223e:	e03b      	b.n	80022b8 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a20      	ldr	r2, [pc, #128]	@ (80022c8 <HAL_UART_MspInit+0x128>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d136      	bne.n	80022b8 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800224a:	2304      	movs	r3, #4
 800224c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800224e:	2300      	movs	r3, #0
 8002250:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002252:	f107 0318 	add.w	r3, r7, #24
 8002256:	4618      	mov	r0, r3
 8002258:	f002 f966 	bl	8004528 <HAL_RCCEx_PeriphCLKConfig>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8002262:	f7ff f901 	bl	8001468 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002266:	4b17      	ldr	r3, [pc, #92]	@ (80022c4 <HAL_UART_MspInit+0x124>)
 8002268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226a:	4a16      	ldr	r2, [pc, #88]	@ (80022c4 <HAL_UART_MspInit+0x124>)
 800226c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002270:	6593      	str	r3, [r2, #88]	@ 0x58
 8002272:	4b14      	ldr	r3, [pc, #80]	@ (80022c4 <HAL_UART_MspInit+0x124>)
 8002274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002276:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800227e:	4b11      	ldr	r3, [pc, #68]	@ (80022c4 <HAL_UART_MspInit+0x124>)
 8002280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002282:	4a10      	ldr	r2, [pc, #64]	@ (80022c4 <HAL_UART_MspInit+0x124>)
 8002284:	f043 0302 	orr.w	r3, r3, #2
 8002288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800228a:	4b0e      	ldr	r3, [pc, #56]	@ (80022c4 <HAL_UART_MspInit+0x124>)
 800228c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_TX_LIDAR_Pin|USART3_RX_LIDAR_Pin;
 8002296:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800229a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229c:	2302      	movs	r3, #2
 800229e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a4:	2300      	movs	r3, #0
 80022a6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022a8:	2307      	movs	r3, #7
 80022aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80022b0:	4619      	mov	r1, r3
 80022b2:	4806      	ldr	r0, [pc, #24]	@ (80022cc <HAL_UART_MspInit+0x12c>)
 80022b4:	f001 f9c0 	bl	8003638 <HAL_GPIO_Init>
}
 80022b8:	bf00      	nop
 80022ba:	3770      	adds	r7, #112	@ 0x70
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40004400 	.word	0x40004400
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40004800 	.word	0x40004800
 80022cc:	48000400 	.word	0x48000400

080022d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022d0:	480d      	ldr	r0, [pc, #52]	@ (8002308 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022d2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80022d4:	f7ff fb9e 	bl	8001a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022d8:	480c      	ldr	r0, [pc, #48]	@ (800230c <LoopForever+0x6>)
  ldr r1, =_edata
 80022da:	490d      	ldr	r1, [pc, #52]	@ (8002310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002314 <LoopForever+0xe>)
  movs r3, #0
 80022de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022e0:	e002      	b.n	80022e8 <LoopCopyDataInit>

080022e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022e6:	3304      	adds	r3, #4

080022e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ec:	d3f9      	bcc.n	80022e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022f0:	4c0a      	ldr	r4, [pc, #40]	@ (800231c <LoopForever+0x16>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f4:	e001      	b.n	80022fa <LoopFillZerobss>

080022f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f8:	3204      	adds	r2, #4

080022fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022fc:	d3fb      	bcc.n	80022f6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80022fe:	f007 fa83 	bl	8009808 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002302:	f7ff f84b 	bl	800139c <main>

08002306 <LoopForever>:

LoopForever:
    b LoopForever
 8002306:	e7fe      	b.n	8002306 <LoopForever>
  ldr   r0, =_estack
 8002308:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800230c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002310:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002314:	0800d438 	.word	0x0800d438
  ldr r2, =_sbss
 8002318:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800231c:	200013c8 	.word	0x200013c8

08002320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002320:	e7fe      	b.n	8002320 <ADC1_2_IRQHandler>

08002322 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800232c:	2003      	movs	r0, #3
 800232e:	f001 f951 	bl	80035d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002332:	200f      	movs	r0, #15
 8002334:	f000 f80e 	bl	8002354 <HAL_InitTick>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	71fb      	strb	r3, [r7, #7]
 8002342:	e001      	b.n	8002348 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002344:	f7ff fa4e 	bl	80017e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002348:	79fb      	ldrb	r3, [r7, #7]

}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002360:	4b16      	ldr	r3, [pc, #88]	@ (80023bc <HAL_InitTick+0x68>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d022      	beq.n	80023ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002368:	4b15      	ldr	r3, [pc, #84]	@ (80023c0 <HAL_InitTick+0x6c>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b13      	ldr	r3, [pc, #76]	@ (80023bc <HAL_InitTick+0x68>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002374:	fbb1 f3f3 	udiv	r3, r1, r3
 8002378:	fbb2 f3f3 	udiv	r3, r2, r3
 800237c:	4618      	mov	r0, r3
 800237e:	f001 f94e 	bl	800361e <HAL_SYSTICK_Config>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10f      	bne.n	80023a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b0f      	cmp	r3, #15
 800238c:	d809      	bhi.n	80023a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800238e:	2200      	movs	r2, #0
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	f04f 30ff 	mov.w	r0, #4294967295
 8002396:	f001 f928 	bl	80035ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800239a:	4a0a      	ldr	r2, [pc, #40]	@ (80023c4 <HAL_InitTick+0x70>)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	e007      	b.n	80023b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
 80023a6:	e004      	b.n	80023b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	73fb      	strb	r3, [r7, #15]
 80023ac:	e001      	b.n	80023b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000008 	.word	0x20000008
 80023c0:	20000000 	.word	0x20000000
 80023c4:	20000004 	.word	0x20000004

080023c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023cc:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <HAL_IncTick+0x1c>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b05      	ldr	r3, [pc, #20]	@ (80023e8 <HAL_IncTick+0x20>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4413      	add	r3, r2
 80023d6:	4a03      	ldr	r2, [pc, #12]	@ (80023e4 <HAL_IncTick+0x1c>)
 80023d8:	6013      	str	r3, [r2, #0]
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	20000524 	.word	0x20000524
 80023e8:	20000008 	.word	0x20000008

080023ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return uwTick;
 80023f0:	4b03      	ldr	r3, [pc, #12]	@ (8002400 <HAL_GetTick+0x14>)
 80023f2:	681b      	ldr	r3, [r3, #0]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20000524 	.word	0x20000524

08002404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800240c:	f7ff ffee 	bl	80023ec <HAL_GetTick>
 8002410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241c:	d004      	beq.n	8002428 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800241e:	4b09      	ldr	r3, [pc, #36]	@ (8002444 <HAL_Delay+0x40>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4413      	add	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002428:	bf00      	nop
 800242a:	f7ff ffdf 	bl	80023ec <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	429a      	cmp	r2, r3
 8002438:	d8f7      	bhi.n	800242a <HAL_Delay+0x26>
  {
  }
}
 800243a:	bf00      	nop
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20000008 	.word	0x20000008

08002448 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	609a      	str	r2, [r3, #8]
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	609a      	str	r2, [r3, #8]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b087      	sub	sp, #28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	3360      	adds	r3, #96	@ 0x60
 80024c2:	461a      	mov	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4b08      	ldr	r3, [pc, #32]	@ (80024f4 <LL_ADC_SetOffset+0x44>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	4313      	orrs	r3, r2
 80024e0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024e8:	bf00      	nop
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	03fff000 	.word	0x03fff000

080024f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3360      	adds	r3, #96	@ 0x60
 8002506:	461a      	mov	r2, r3
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002518:	4618      	mov	r0, r3
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	3360      	adds	r3, #96	@ 0x60
 8002534:	461a      	mov	r2, r3
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	431a      	orrs	r2, r3
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800254e:	bf00      	nop
 8002550:	371c      	adds	r7, #28
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800255a:	b480      	push	{r7}
 800255c:	b087      	sub	sp, #28
 800255e:	af00      	add	r7, sp, #0
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	3360      	adds	r3, #96	@ 0x60
 800256a:	461a      	mov	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	431a      	orrs	r2, r3
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002584:	bf00      	nop
 8002586:	371c      	adds	r7, #28
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	3360      	adds	r3, #96	@ 0x60
 80025a0:	461a      	mov	r2, r3
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	431a      	orrs	r2, r3
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80025ba:	bf00      	nop
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	615a      	str	r2, [r3, #20]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	3330      	adds	r3, #48	@ 0x30
 80025fc:	461a      	mov	r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	0a1b      	lsrs	r3, r3, #8
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	f003 030c 	and.w	r3, r3, #12
 8002608:	4413      	add	r3, r2
 800260a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	211f      	movs	r1, #31
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	401a      	ands	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	0e9b      	lsrs	r3, r3, #26
 8002624:	f003 011f 	and.w	r1, r3, #31
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	431a      	orrs	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002638:	bf00      	nop
 800263a:	371c      	adds	r7, #28
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	3314      	adds	r3, #20
 8002654:	461a      	mov	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	0e5b      	lsrs	r3, r3, #25
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	4413      	add	r3, r2
 8002662:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	0d1b      	lsrs	r3, r3, #20
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	2107      	movs	r1, #7
 8002672:	fa01 f303 	lsl.w	r3, r1, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	401a      	ands	r2, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	0d1b      	lsrs	r3, r3, #20
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	fa01 f303 	lsl.w	r3, r1, r3
 8002688:	431a      	orrs	r2, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800268e:	bf00      	nop
 8002690:	371c      	adds	r7, #28
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
	...

0800269c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b4:	43db      	mvns	r3, r3
 80026b6:	401a      	ands	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f003 0318 	and.w	r3, r3, #24
 80026be:	4908      	ldr	r1, [pc, #32]	@ (80026e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80026c0:	40d9      	lsrs	r1, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	400b      	ands	r3, r1
 80026c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ca:	431a      	orrs	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80026d2:	bf00      	nop
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	0007ffff 	.word	0x0007ffff

080026e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80026f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6093      	str	r3, [r2, #8]
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002718:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800271c:	d101      	bne.n	8002722 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002740:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002744:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002768:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800276c:	d101      	bne.n	8002772 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <LL_ADC_IsEnabled+0x18>
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <LL_ADC_IsEnabled+0x1a>
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d101      	bne.n	80027be <LL_ADC_REG_IsConversionOngoing+0x18>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d101      	bne.n	80027e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
	...

080027f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027f4:	b590      	push	{r4, r7, lr}
 80027f6:	b089      	sub	sp, #36	@ 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e167      	b.n	8002ade <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d109      	bne.n	8002830 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7fe fc81 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff67 	bl	8002708 <LL_ADC_IsDeepPowerDownEnabled>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d004      	beq.n	800284a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff4d 	bl	80026e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff ff82 	bl	8002758 <LL_ADC_IsInternalRegulatorEnabled>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d115      	bne.n	8002886 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff ff66 	bl	8002730 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002864:	4ba0      	ldr	r3, [pc, #640]	@ (8002ae8 <HAL_ADC_Init+0x2f4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	099b      	lsrs	r3, r3, #6
 800286a:	4aa0      	ldr	r2, [pc, #640]	@ (8002aec <HAL_ADC_Init+0x2f8>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	099b      	lsrs	r3, r3, #6
 8002872:	3301      	adds	r3, #1
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002878:	e002      	b.n	8002880 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	3b01      	subs	r3, #1
 800287e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f9      	bne.n	800287a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff ff64 	bl	8002758 <LL_ADC_IsInternalRegulatorEnabled>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10d      	bne.n	80028b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289a:	f043 0210 	orr.w	r2, r3, #16
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a6:	f043 0201 	orr.w	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff ff75 	bl	80027a6 <LL_ADC_REG_IsConversionOngoing>
 80028bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f040 8100 	bne.w	8002acc <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f040 80fc 	bne.w	8002acc <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80028dc:	f043 0202 	orr.w	r2, r3, #2
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff49 	bl	8002780 <LL_ADC_IsEnabled>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d111      	bne.n	8002918 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028f4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80028f8:	f7ff ff42 	bl	8002780 <LL_ADC_IsEnabled>
 80028fc:	4604      	mov	r4, r0
 80028fe:	487c      	ldr	r0, [pc, #496]	@ (8002af0 <HAL_ADC_Init+0x2fc>)
 8002900:	f7ff ff3e 	bl	8002780 <LL_ADC_IsEnabled>
 8002904:	4603      	mov	r3, r0
 8002906:	4323      	orrs	r3, r4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d105      	bne.n	8002918 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	4619      	mov	r1, r3
 8002912:	4878      	ldr	r0, [pc, #480]	@ (8002af4 <HAL_ADC_Init+0x300>)
 8002914:	f7ff fd98 	bl	8002448 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	7f5b      	ldrb	r3, [r3, #29]
 800291c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002922:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002928:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800292e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002936:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002942:	2b01      	cmp	r3, #1
 8002944:	d106      	bne.n	8002954 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294a:	3b01      	subs	r3, #1
 800294c:	045b      	lsls	r3, r3, #17
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002958:	2b00      	cmp	r3, #0
 800295a:	d009      	beq.n	8002970 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002960:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002968:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	4b60      	ldr	r3, [pc, #384]	@ (8002af8 <HAL_ADC_Init+0x304>)
 8002978:	4013      	ands	r3, r2
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	69b9      	ldr	r1, [r7, #24]
 8002980:	430b      	orrs	r3, r1
 8002982:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff ff14 	bl	80027cc <LL_ADC_INJ_IsConversionOngoing>
 80029a4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d16d      	bne.n	8002a88 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d16a      	bne.n	8002a88 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029b6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029be:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029ce:	f023 0302 	bic.w	r3, r3, #2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	69b9      	ldr	r1, [r7, #24]
 80029d8:	430b      	orrs	r3, r1
 80029da:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d017      	beq.n	8002a14 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80029f2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80029fc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6911      	ldr	r1, [r2, #16]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002a12:	e013      	b.n	8002a3c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002a22:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a38:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d118      	bne.n	8002a78 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002a50:	f023 0304 	bic.w	r3, r3, #4
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a5c:	4311      	orrs	r1, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a62:	4311      	orrs	r1, r2
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0201 	orr.w	r2, r2, #1
 8002a74:	611a      	str	r2, [r3, #16]
 8002a76:	e007      	b.n	8002a88 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d10c      	bne.n	8002aaa <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	f023 010f 	bic.w	r1, r3, #15
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	1e5a      	subs	r2, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002aa8:	e007      	b.n	8002aba <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 020f 	bic.w	r2, r2, #15
 8002ab8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002abe:	f023 0303 	bic.w	r3, r3, #3
 8002ac2:	f043 0201 	orr.w	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002aca:	e007      	b.n	8002adc <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad0:	f043 0210 	orr.w	r2, r3, #16
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002adc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3724      	adds	r7, #36	@ 0x24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd90      	pop	{r4, r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000000 	.word	0x20000000
 8002aec:	053e2d63 	.word	0x053e2d63
 8002af0:	50000100 	.word	0x50000100
 8002af4:	50000300 	.word	0x50000300
 8002af8:	fff04007 	.word	0xfff04007

08002afc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b0b6      	sub	sp, #216	@ 0xd8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x22>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e3c8      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x7b4>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff fe3b 	bl	80027a6 <LL_ADC_REG_IsConversionOngoing>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f040 83ad 	bne.w	8003292 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	6859      	ldr	r1, [r3, #4]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	f7ff fd51 	bl	80025ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fe29 	bl	80027a6 <LL_ADC_REG_IsConversionOngoing>
 8002b54:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fe35 	bl	80027cc <LL_ADC_INJ_IsConversionOngoing>
 8002b62:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f040 81d9 	bne.w	8002f22 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f040 81d4 	bne.w	8002f22 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b82:	d10f      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f7ff fd58 	bl	8002644 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fd12 	bl	80025c6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002ba2:	e00e      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	6819      	ldr	r1, [r3, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	f7ff fd47 	bl	8002644 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2100      	movs	r1, #0
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff fd02 	bl	80025c6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	695a      	ldr	r2, [r3, #20]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	08db      	lsrs	r3, r3, #3
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d022      	beq.n	8002c2a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	6919      	ldr	r1, [r3, #16]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002bf4:	f7ff fc5c 	bl	80024b0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	6919      	ldr	r1, [r3, #16]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	461a      	mov	r2, r3
 8002c06:	f7ff fca8 	bl	800255a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d102      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x124>
 8002c1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c1e:	e000      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x126>
 8002c20:	2300      	movs	r3, #0
 8002c22:	461a      	mov	r2, r3
 8002c24:	f7ff fcb4 	bl	8002590 <LL_ADC_SetOffsetSaturation>
 8002c28:	e17b      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff fc61 	bl	80024f8 <LL_ADC_GetOffsetChannel>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10a      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x15a>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2100      	movs	r1, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff fc56 	bl	80024f8 <LL_ADC_GetOffsetChannel>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	0e9b      	lsrs	r3, r3, #26
 8002c50:	f003 021f 	and.w	r2, r3, #31
 8002c54:	e01e      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x198>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fc4b 	bl	80024f8 <LL_ADC_GetOffsetChannel>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c6c:	fa93 f3a3 	rbit	r3, r3
 8002c70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002c84:	2320      	movs	r3, #32
 8002c86:	e004      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002c88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c8c:	fab3 f383 	clz	r3, r3
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d105      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x1b0>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	0e9b      	lsrs	r3, r3, #26
 8002ca6:	f003 031f 	and.w	r3, r3, #31
 8002caa:	e018      	b.n	8002cde <HAL_ADC_ConfigChannel+0x1e2>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002cb8:	fa93 f3a3 	rbit	r3, r3
 8002cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002cc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002cc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002cd0:	2320      	movs	r3, #32
 8002cd2:	e004      	b.n	8002cde <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002cd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002cd8:	fab3 f383 	clz	r3, r3
 8002cdc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d106      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff fc1a 	bl	8002524 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fbfe 	bl	80024f8 <LL_ADC_GetOffsetChannel>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10a      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x220>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fbf3 	bl	80024f8 <LL_ADC_GetOffsetChannel>
 8002d12:	4603      	mov	r3, r0
 8002d14:	0e9b      	lsrs	r3, r3, #26
 8002d16:	f003 021f 	and.w	r2, r3, #31
 8002d1a:	e01e      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x25e>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2101      	movs	r1, #1
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff fbe8 	bl	80024f8 <LL_ADC_GetOffsetChannel>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d32:	fa93 f3a3 	rbit	r3, r3
 8002d36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002d3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002d42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002d4a:	2320      	movs	r3, #32
 8002d4c:	e004      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002d4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d52:	fab3 f383 	clz	r3, r3
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d105      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x276>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	0e9b      	lsrs	r3, r3, #26
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	e018      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x2a8>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d7e:	fa93 f3a3 	rbit	r3, r3
 8002d82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002d86:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002d8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002d96:	2320      	movs	r3, #32
 8002d98:	e004      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002d9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d9e:	fab3 f383 	clz	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d106      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2200      	movs	r2, #0
 8002dae:	2101      	movs	r1, #1
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fbb7 	bl	8002524 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2102      	movs	r1, #2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fb9b 	bl	80024f8 <LL_ADC_GetOffsetChannel>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10a      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x2e6>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2102      	movs	r1, #2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fb90 	bl	80024f8 <LL_ADC_GetOffsetChannel>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	0e9b      	lsrs	r3, r3, #26
 8002ddc:	f003 021f 	and.w	r2, r3, #31
 8002de0:	e01e      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x324>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2102      	movs	r1, #2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff fb85 	bl	80024f8 <LL_ADC_GetOffsetChannel>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002df8:	fa93 f3a3 	rbit	r3, r3
 8002dfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002e08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002e10:	2320      	movs	r3, #32
 8002e12:	e004      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002e14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e18:	fab3 f383 	clz	r3, r3
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d105      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x33c>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	0e9b      	lsrs	r3, r3, #26
 8002e32:	f003 031f 	and.w	r3, r3, #31
 8002e36:	e016      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x36a>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e44:	fa93 f3a3 	rbit	r3, r3
 8002e48:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002e4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002e50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002e58:	2320      	movs	r3, #32
 8002e5a:	e004      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002e5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d106      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2102      	movs	r1, #2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fb56 	bl	8002524 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2103      	movs	r1, #3
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fb3a 	bl	80024f8 <LL_ADC_GetOffsetChannel>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10a      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x3a8>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2103      	movs	r1, #3
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fb2f 	bl	80024f8 <LL_ADC_GetOffsetChannel>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	0e9b      	lsrs	r3, r3, #26
 8002e9e:	f003 021f 	and.w	r2, r3, #31
 8002ea2:	e017      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x3d8>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2103      	movs	r1, #3
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fb24 	bl	80024f8 <LL_ADC_GetOffsetChannel>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002eb6:	fa93 f3a3 	rbit	r3, r3
 8002eba:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002ebc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ebe:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002ec0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002ec6:	2320      	movs	r3, #32
 8002ec8:	e003      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002eca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ecc:	fab3 f383 	clz	r3, r3
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d105      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x3f0>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	0e9b      	lsrs	r3, r3, #26
 8002ee6:	f003 031f 	and.w	r3, r3, #31
 8002eea:	e011      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x414>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002efa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002efc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002efe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002f04:	2320      	movs	r3, #32
 8002f06:	e003      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002f08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f0a:	fab3 f383 	clz	r3, r3
 8002f0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d106      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	2103      	movs	r1, #3
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff fb01 	bl	8002524 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fc2a 	bl	8002780 <LL_ADC_IsEnabled>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f040 8140 	bne.w	80031b4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	6819      	ldr	r1, [r3, #0]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	461a      	mov	r2, r3
 8002f42:	f7ff fbab 	bl	800269c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	4a8f      	ldr	r2, [pc, #572]	@ (8003188 <HAL_ADC_ConfigChannel+0x68c>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	f040 8131 	bne.w	80031b4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10b      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x47e>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	0e9b      	lsrs	r3, r3, #26
 8002f68:	3301      	adds	r3, #1
 8002f6a:	f003 031f 	and.w	r3, r3, #31
 8002f6e:	2b09      	cmp	r3, #9
 8002f70:	bf94      	ite	ls
 8002f72:	2301      	movls	r3, #1
 8002f74:	2300      	movhi	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	e019      	b.n	8002fae <HAL_ADC_ConfigChannel+0x4b2>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002f88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f8a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002f8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002f92:	2320      	movs	r3, #32
 8002f94:	e003      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002f96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f98:	fab3 f383 	clz	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	2b09      	cmp	r3, #9
 8002fa6:	bf94      	ite	ls
 8002fa8:	2301      	movls	r3, #1
 8002faa:	2300      	movhi	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d079      	beq.n	80030a6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d107      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x4d2>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	0e9b      	lsrs	r3, r3, #26
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	069b      	lsls	r3, r3, #26
 8002fc8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fcc:	e015      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x4fe>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fd6:	fa93 f3a3 	rbit	r3, r3
 8002fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002fdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fde:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002fe6:	2320      	movs	r3, #32
 8002fe8:	e003      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	069b      	lsls	r3, r3, #26
 8002ff6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <HAL_ADC_ConfigChannel+0x51e>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	0e9b      	lsrs	r3, r3, #26
 800300c:	3301      	adds	r3, #1
 800300e:	f003 031f 	and.w	r3, r3, #31
 8003012:	2101      	movs	r1, #1
 8003014:	fa01 f303 	lsl.w	r3, r1, r3
 8003018:	e017      	b.n	800304a <HAL_ADC_ConfigChannel+0x54e>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003020:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003022:	fa93 f3a3 	rbit	r3, r3
 8003026:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003028:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800302a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800302c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003032:	2320      	movs	r3, #32
 8003034:	e003      	b.n	800303e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003038:	fab3 f383 	clz	r3, r3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	3301      	adds	r3, #1
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	2101      	movs	r1, #1
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	ea42 0103 	orr.w	r1, r2, r3
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10a      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x574>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	0e9b      	lsrs	r3, r3, #26
 8003060:	3301      	adds	r3, #1
 8003062:	f003 021f 	and.w	r2, r3, #31
 8003066:	4613      	mov	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4413      	add	r3, r2
 800306c:	051b      	lsls	r3, r3, #20
 800306e:	e018      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x5a6>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003078:	fa93 f3a3 	rbit	r3, r3
 800307c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800307e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003080:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003088:	2320      	movs	r3, #32
 800308a:	e003      	b.n	8003094 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800308c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800308e:	fab3 f383 	clz	r3, r3
 8003092:	b2db      	uxtb	r3, r3
 8003094:	3301      	adds	r3, #1
 8003096:	f003 021f 	and.w	r2, r3, #31
 800309a:	4613      	mov	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	4413      	add	r3, r2
 80030a0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030a2:	430b      	orrs	r3, r1
 80030a4:	e081      	b.n	80031aa <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d107      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x5c6>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	0e9b      	lsrs	r3, r3, #26
 80030b8:	3301      	adds	r3, #1
 80030ba:	069b      	lsls	r3, r3, #26
 80030bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030c0:	e015      	b.n	80030ee <HAL_ADC_ConfigChannel+0x5f2>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ca:	fa93 f3a3 	rbit	r3, r3
 80030ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80030d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80030d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80030da:	2320      	movs	r3, #32
 80030dc:	e003      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80030de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e0:	fab3 f383 	clz	r3, r3
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	3301      	adds	r3, #1
 80030e8:	069b      	lsls	r3, r3, #26
 80030ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d109      	bne.n	800310e <HAL_ADC_ConfigChannel+0x612>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	0e9b      	lsrs	r3, r3, #26
 8003100:	3301      	adds	r3, #1
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	2101      	movs	r1, #1
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	e017      	b.n	800313e <HAL_ADC_ConfigChannel+0x642>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	fa93 f3a3 	rbit	r3, r3
 800311a:	61fb      	str	r3, [r7, #28]
  return result;
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003126:	2320      	movs	r3, #32
 8003128:	e003      	b.n	8003132 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800312a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312c:	fab3 f383 	clz	r3, r3
 8003130:	b2db      	uxtb	r3, r3
 8003132:	3301      	adds	r3, #1
 8003134:	f003 031f 	and.w	r3, r3, #31
 8003138:	2101      	movs	r1, #1
 800313a:	fa01 f303 	lsl.w	r3, r1, r3
 800313e:	ea42 0103 	orr.w	r1, r2, r3
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10d      	bne.n	800316a <HAL_ADC_ConfigChannel+0x66e>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	0e9b      	lsrs	r3, r3, #26
 8003154:	3301      	adds	r3, #1
 8003156:	f003 021f 	and.w	r2, r3, #31
 800315a:	4613      	mov	r3, r2
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	4413      	add	r3, r2
 8003160:	3b1e      	subs	r3, #30
 8003162:	051b      	lsls	r3, r3, #20
 8003164:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003168:	e01e      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x6ac>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	fa93 f3a3 	rbit	r3, r3
 8003176:	613b      	str	r3, [r7, #16]
  return result;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d104      	bne.n	800318c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003182:	2320      	movs	r3, #32
 8003184:	e006      	b.n	8003194 <HAL_ADC_ConfigChannel+0x698>
 8003186:	bf00      	nop
 8003188:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	fab3 f383 	clz	r3, r3
 8003192:	b2db      	uxtb	r3, r3
 8003194:	3301      	adds	r3, #1
 8003196:	f003 021f 	and.w	r2, r3, #31
 800319a:	4613      	mov	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	4413      	add	r3, r2
 80031a0:	3b1e      	subs	r3, #30
 80031a2:	051b      	lsls	r3, r3, #20
 80031a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031a8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031ae:	4619      	mov	r1, r3
 80031b0:	f7ff fa48 	bl	8002644 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	4b3f      	ldr	r3, [pc, #252]	@ (80032b8 <HAL_ADC_ConfigChannel+0x7bc>)
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d071      	beq.n	80032a4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031c0:	483e      	ldr	r0, [pc, #248]	@ (80032bc <HAL_ADC_ConfigChannel+0x7c0>)
 80031c2:	f7ff f967 	bl	8002494 <LL_ADC_GetCommonPathInternalCh>
 80031c6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a3c      	ldr	r2, [pc, #240]	@ (80032c0 <HAL_ADC_ConfigChannel+0x7c4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d004      	beq.n	80031de <HAL_ADC_ConfigChannel+0x6e2>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a3a      	ldr	r2, [pc, #232]	@ (80032c4 <HAL_ADC_ConfigChannel+0x7c8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d127      	bne.n	800322e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d121      	bne.n	800322e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031f2:	d157      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031fc:	4619      	mov	r1, r3
 80031fe:	482f      	ldr	r0, [pc, #188]	@ (80032bc <HAL_ADC_ConfigChannel+0x7c0>)
 8003200:	f7ff f935 	bl	800246e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003204:	4b30      	ldr	r3, [pc, #192]	@ (80032c8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	099b      	lsrs	r3, r3, #6
 800320a:	4a30      	ldr	r2, [pc, #192]	@ (80032cc <HAL_ADC_ConfigChannel+0x7d0>)
 800320c:	fba2 2303 	umull	r2, r3, r2, r3
 8003210:	099b      	lsrs	r3, r3, #6
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	4613      	mov	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800321e:	e002      	b.n	8003226 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3b01      	subs	r3, #1
 8003224:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f9      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800322c:	e03a      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a27      	ldr	r2, [pc, #156]	@ (80032d0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d113      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003238:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800323c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10d      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a22      	ldr	r2, [pc, #136]	@ (80032d4 <HAL_ADC_ConfigChannel+0x7d8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d02a      	beq.n	80032a4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800324e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003252:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003256:	4619      	mov	r1, r3
 8003258:	4818      	ldr	r0, [pc, #96]	@ (80032bc <HAL_ADC_ConfigChannel+0x7c0>)
 800325a:	f7ff f908 	bl	800246e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800325e:	e021      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a1c      	ldr	r2, [pc, #112]	@ (80032d8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d11c      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800326a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800326e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d116      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a16      	ldr	r2, [pc, #88]	@ (80032d4 <HAL_ADC_ConfigChannel+0x7d8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d011      	beq.n	80032a4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003280:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003284:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003288:	4619      	mov	r1, r3
 800328a:	480c      	ldr	r0, [pc, #48]	@ (80032bc <HAL_ADC_ConfigChannel+0x7c0>)
 800328c:	f7ff f8ef 	bl	800246e <LL_ADC_SetCommonPathInternalCh>
 8003290:	e008      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003296:	f043 0220 	orr.w	r2, r3, #32
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80032ac:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	37d8      	adds	r7, #216	@ 0xd8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	80080000 	.word	0x80080000
 80032bc:	50000300 	.word	0x50000300
 80032c0:	c3210000 	.word	0xc3210000
 80032c4:	90c00010 	.word	0x90c00010
 80032c8:	20000000 	.word	0x20000000
 80032cc:	053e2d63 	.word	0x053e2d63
 80032d0:	c7520000 	.word	0xc7520000
 80032d4:	50000100 	.word	0x50000100
 80032d8:	cb840000 	.word	0xcb840000

080032dc <LL_ADC_IsEnabled>:
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <LL_ADC_IsEnabled+0x18>
 80032f0:	2301      	movs	r3, #1
 80032f2:	e000      	b.n	80032f6 <LL_ADC_IsEnabled+0x1a>
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <LL_ADC_REG_IsConversionOngoing>:
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	2b04      	cmp	r3, #4
 8003314:	d101      	bne.n	800331a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	b0a1      	sub	sp, #132	@ 0x84
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003342:	2302      	movs	r3, #2
 8003344:	e08b      	b.n	800345e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800334e:	2300      	movs	r3, #0
 8003350:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003352:	2300      	movs	r3, #0
 8003354:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800335e:	d102      	bne.n	8003366 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003360:	4b41      	ldr	r3, [pc, #260]	@ (8003468 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	e001      	b.n	800336a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003366:	2300      	movs	r3, #0
 8003368:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10b      	bne.n	8003388 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003374:	f043 0220 	orr.w	r2, r3, #32
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e06a      	b.n	800345e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff ffb9 	bl	8003302 <LL_ADC_REG_IsConversionOngoing>
 8003390:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff ffb3 	bl	8003302 <LL_ADC_REG_IsConversionOngoing>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d14c      	bne.n	800343c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80033a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d149      	bne.n	800343c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033a8:	4b30      	ldr	r3, [pc, #192]	@ (800346c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80033aa:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d028      	beq.n	8003406 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80033b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	6859      	ldr	r1, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80033c6:	035b      	lsls	r3, r3, #13
 80033c8:	430b      	orrs	r3, r1
 80033ca:	431a      	orrs	r2, r3
 80033cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033ce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033d0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80033d4:	f7ff ff82 	bl	80032dc <LL_ADC_IsEnabled>
 80033d8:	4604      	mov	r4, r0
 80033da:	4823      	ldr	r0, [pc, #140]	@ (8003468 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80033dc:	f7ff ff7e 	bl	80032dc <LL_ADC_IsEnabled>
 80033e0:	4603      	mov	r3, r0
 80033e2:	4323      	orrs	r3, r4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d133      	bne.n	8003450 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80033f0:	f023 030f 	bic.w	r3, r3, #15
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	6811      	ldr	r1, [r2, #0]
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	6892      	ldr	r2, [r2, #8]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	431a      	orrs	r2, r3
 8003400:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003402:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003404:	e024      	b.n	8003450 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003406:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800340e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003410:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003412:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003416:	f7ff ff61 	bl	80032dc <LL_ADC_IsEnabled>
 800341a:	4604      	mov	r4, r0
 800341c:	4812      	ldr	r0, [pc, #72]	@ (8003468 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800341e:	f7ff ff5d 	bl	80032dc <LL_ADC_IsEnabled>
 8003422:	4603      	mov	r3, r0
 8003424:	4323      	orrs	r3, r4
 8003426:	2b00      	cmp	r3, #0
 8003428:	d112      	bne.n	8003450 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800342a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003432:	f023 030f 	bic.w	r3, r3, #15
 8003436:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003438:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800343a:	e009      	b.n	8003450 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003440:	f043 0220 	orr.w	r2, r3, #32
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800344e:	e000      	b.n	8003452 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003450:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800345a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800345e:	4618      	mov	r0, r3
 8003460:	3784      	adds	r7, #132	@ 0x84
 8003462:	46bd      	mov	sp, r7
 8003464:	bd90      	pop	{r4, r7, pc}
 8003466:	bf00      	nop
 8003468:	50000100 	.word	0x50000100
 800346c:	50000300 	.word	0x50000300

08003470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003480:	4b0c      	ldr	r3, [pc, #48]	@ (80034b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800348c:	4013      	ands	r3, r2
 800348e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003498:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800349c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034a2:	4a04      	ldr	r2, [pc, #16]	@ (80034b4 <__NVIC_SetPriorityGrouping+0x44>)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	60d3      	str	r3, [r2, #12]
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034bc:	4b04      	ldr	r3, [pc, #16]	@ (80034d0 <__NVIC_GetPriorityGrouping+0x18>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	0a1b      	lsrs	r3, r3, #8
 80034c2:	f003 0307 	and.w	r3, r3, #7
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	6039      	str	r1, [r7, #0]
 80034de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	db0a      	blt.n	80034fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	490c      	ldr	r1, [pc, #48]	@ (8003520 <__NVIC_SetPriority+0x4c>)
 80034ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f2:	0112      	lsls	r2, r2, #4
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	440b      	add	r3, r1
 80034f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034fc:	e00a      	b.n	8003514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	b2da      	uxtb	r2, r3
 8003502:	4908      	ldr	r1, [pc, #32]	@ (8003524 <__NVIC_SetPriority+0x50>)
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	3b04      	subs	r3, #4
 800350c:	0112      	lsls	r2, r2, #4
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	440b      	add	r3, r1
 8003512:	761a      	strb	r2, [r3, #24]
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	e000e100 	.word	0xe000e100
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003528:	b480      	push	{r7}
 800352a:	b089      	sub	sp, #36	@ 0x24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f1c3 0307 	rsb	r3, r3, #7
 8003542:	2b04      	cmp	r3, #4
 8003544:	bf28      	it	cs
 8003546:	2304      	movcs	r3, #4
 8003548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	3304      	adds	r3, #4
 800354e:	2b06      	cmp	r3, #6
 8003550:	d902      	bls.n	8003558 <NVIC_EncodePriority+0x30>
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	3b03      	subs	r3, #3
 8003556:	e000      	b.n	800355a <NVIC_EncodePriority+0x32>
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800355c:	f04f 32ff 	mov.w	r2, #4294967295
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43da      	mvns	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	401a      	ands	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003570:	f04f 31ff 	mov.w	r1, #4294967295
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	fa01 f303 	lsl.w	r3, r1, r3
 800357a:	43d9      	mvns	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003580:	4313      	orrs	r3, r2
         );
}
 8003582:	4618      	mov	r0, r3
 8003584:	3724      	adds	r7, #36	@ 0x24
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
	...

08003590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3b01      	subs	r3, #1
 800359c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035a0:	d301      	bcc.n	80035a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035a2:	2301      	movs	r3, #1
 80035a4:	e00f      	b.n	80035c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035a6:	4a0a      	ldr	r2, [pc, #40]	@ (80035d0 <SysTick_Config+0x40>)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ae:	210f      	movs	r1, #15
 80035b0:	f04f 30ff 	mov.w	r0, #4294967295
 80035b4:	f7ff ff8e 	bl	80034d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035b8:	4b05      	ldr	r3, [pc, #20]	@ (80035d0 <SysTick_Config+0x40>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035be:	4b04      	ldr	r3, [pc, #16]	@ (80035d0 <SysTick_Config+0x40>)
 80035c0:	2207      	movs	r2, #7
 80035c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	e000e010 	.word	0xe000e010

080035d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff ff47 	bl	8003470 <__NVIC_SetPriorityGrouping>
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b086      	sub	sp, #24
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	4603      	mov	r3, r0
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	607a      	str	r2, [r7, #4]
 80035f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035f8:	f7ff ff5e 	bl	80034b8 <__NVIC_GetPriorityGrouping>
 80035fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	6978      	ldr	r0, [r7, #20]
 8003604:	f7ff ff90 	bl	8003528 <NVIC_EncodePriority>
 8003608:	4602      	mov	r2, r0
 800360a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800360e:	4611      	mov	r1, r2
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff ff5f 	bl	80034d4 <__NVIC_SetPriority>
}
 8003616:	bf00      	nop
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff ffb2 	bl	8003590 <SysTick_Config>
 800362c:	4603      	mov	r3, r0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003646:	e15a      	b.n	80038fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	2101      	movs	r1, #1
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	fa01 f303 	lsl.w	r3, r1, r3
 8003654:	4013      	ands	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 814c 	beq.w	80038f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 0303 	and.w	r3, r3, #3
 8003668:	2b01      	cmp	r3, #1
 800366a:	d005      	beq.n	8003678 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003674:	2b02      	cmp	r3, #2
 8003676:	d130      	bne.n	80036da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	2203      	movs	r2, #3
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4013      	ands	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036ae:	2201      	movs	r2, #1
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43db      	mvns	r3, r3
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4013      	ands	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	091b      	lsrs	r3, r3, #4
 80036c4:	f003 0201 	and.w	r2, r3, #1
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	d017      	beq.n	8003716 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	2203      	movs	r2, #3
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4013      	ands	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d123      	bne.n	800376a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	08da      	lsrs	r2, r3, #3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3208      	adds	r2, #8
 800372a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800372e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	220f      	movs	r2, #15
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43db      	mvns	r3, r3
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4013      	ands	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	08da      	lsrs	r2, r3, #3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3208      	adds	r2, #8
 8003764:	6939      	ldr	r1, [r7, #16]
 8003766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	2203      	movs	r2, #3
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43db      	mvns	r3, r3
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4013      	ands	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 0203 	and.w	r2, r3, #3
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4313      	orrs	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 80a6 	beq.w	80038f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ac:	4b5b      	ldr	r3, [pc, #364]	@ (800391c <HAL_GPIO_Init+0x2e4>)
 80037ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b0:	4a5a      	ldr	r2, [pc, #360]	@ (800391c <HAL_GPIO_Init+0x2e4>)
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80037b8:	4b58      	ldr	r3, [pc, #352]	@ (800391c <HAL_GPIO_Init+0x2e4>)
 80037ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037c4:	4a56      	ldr	r2, [pc, #344]	@ (8003920 <HAL_GPIO_Init+0x2e8>)
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	089b      	lsrs	r3, r3, #2
 80037ca:	3302      	adds	r3, #2
 80037cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	220f      	movs	r2, #15
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	43db      	mvns	r3, r3
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4013      	ands	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80037ee:	d01f      	beq.n	8003830 <HAL_GPIO_Init+0x1f8>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a4c      	ldr	r2, [pc, #304]	@ (8003924 <HAL_GPIO_Init+0x2ec>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d019      	beq.n	800382c <HAL_GPIO_Init+0x1f4>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a4b      	ldr	r2, [pc, #300]	@ (8003928 <HAL_GPIO_Init+0x2f0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d013      	beq.n	8003828 <HAL_GPIO_Init+0x1f0>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a4a      	ldr	r2, [pc, #296]	@ (800392c <HAL_GPIO_Init+0x2f4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00d      	beq.n	8003824 <HAL_GPIO_Init+0x1ec>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a49      	ldr	r2, [pc, #292]	@ (8003930 <HAL_GPIO_Init+0x2f8>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d007      	beq.n	8003820 <HAL_GPIO_Init+0x1e8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a48      	ldr	r2, [pc, #288]	@ (8003934 <HAL_GPIO_Init+0x2fc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d101      	bne.n	800381c <HAL_GPIO_Init+0x1e4>
 8003818:	2305      	movs	r3, #5
 800381a:	e00a      	b.n	8003832 <HAL_GPIO_Init+0x1fa>
 800381c:	2306      	movs	r3, #6
 800381e:	e008      	b.n	8003832 <HAL_GPIO_Init+0x1fa>
 8003820:	2304      	movs	r3, #4
 8003822:	e006      	b.n	8003832 <HAL_GPIO_Init+0x1fa>
 8003824:	2303      	movs	r3, #3
 8003826:	e004      	b.n	8003832 <HAL_GPIO_Init+0x1fa>
 8003828:	2302      	movs	r3, #2
 800382a:	e002      	b.n	8003832 <HAL_GPIO_Init+0x1fa>
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <HAL_GPIO_Init+0x1fa>
 8003830:	2300      	movs	r3, #0
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	f002 0203 	and.w	r2, r2, #3
 8003838:	0092      	lsls	r2, r2, #2
 800383a:	4093      	lsls	r3, r2
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003842:	4937      	ldr	r1, [pc, #220]	@ (8003920 <HAL_GPIO_Init+0x2e8>)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	089b      	lsrs	r3, r3, #2
 8003848:	3302      	adds	r3, #2
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003850:	4b39      	ldr	r3, [pc, #228]	@ (8003938 <HAL_GPIO_Init+0x300>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	43db      	mvns	r3, r3
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4013      	ands	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003874:	4a30      	ldr	r2, [pc, #192]	@ (8003938 <HAL_GPIO_Init+0x300>)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800387a:	4b2f      	ldr	r3, [pc, #188]	@ (8003938 <HAL_GPIO_Init+0x300>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	43db      	mvns	r3, r3
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4013      	ands	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800389e:	4a26      	ldr	r2, [pc, #152]	@ (8003938 <HAL_GPIO_Init+0x300>)
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80038a4:	4b24      	ldr	r3, [pc, #144]	@ (8003938 <HAL_GPIO_Init+0x300>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	43db      	mvns	r3, r3
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003938 <HAL_GPIO_Init+0x300>)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80038ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003938 <HAL_GPIO_Init+0x300>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	43db      	mvns	r3, r3
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038f2:	4a11      	ldr	r2, [pc, #68]	@ (8003938 <HAL_GPIO_Init+0x300>)
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	3301      	adds	r3, #1
 80038fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	fa22 f303 	lsr.w	r3, r2, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	f47f ae9d 	bne.w	8003648 <HAL_GPIO_Init+0x10>
  }
}
 800390e:	bf00      	nop
 8003910:	bf00      	nop
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	40021000 	.word	0x40021000
 8003920:	40010000 	.word	0x40010000
 8003924:	48000400 	.word	0x48000400
 8003928:	48000800 	.word	0x48000800
 800392c:	48000c00 	.word	0x48000c00
 8003930:	48001000 	.word	0x48001000
 8003934:	48001400 	.word	0x48001400
 8003938:	40010400 	.word	0x40010400

0800393c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	807b      	strh	r3, [r7, #2]
 8003948:	4613      	mov	r3, r2
 800394a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800394c:	787b      	ldrb	r3, [r7, #1]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003952:	887a      	ldrh	r2, [r7, #2]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003958:	e002      	b.n	8003960 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800395a:	887a      	ldrh	r2, [r7, #2]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d141      	bne.n	80039fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800397a:	4b4b      	ldr	r3, [pc, #300]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003982:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003986:	d131      	bne.n	80039ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003988:	4b47      	ldr	r3, [pc, #284]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800398a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800398e:	4a46      	ldr	r2, [pc, #280]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003990:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003994:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003998:	4b43      	ldr	r3, [pc, #268]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039a0:	4a41      	ldr	r2, [pc, #260]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039a8:	4b40      	ldr	r3, [pc, #256]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2232      	movs	r2, #50	@ 0x32
 80039ae:	fb02 f303 	mul.w	r3, r2, r3
 80039b2:	4a3f      	ldr	r2, [pc, #252]	@ (8003ab0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039b4:	fba2 2303 	umull	r2, r3, r2, r3
 80039b8:	0c9b      	lsrs	r3, r3, #18
 80039ba:	3301      	adds	r3, #1
 80039bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039be:	e002      	b.n	80039c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039c6:	4b38      	ldr	r3, [pc, #224]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039d2:	d102      	bne.n	80039da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f2      	bne.n	80039c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039da:	4b33      	ldr	r3, [pc, #204]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039e6:	d158      	bne.n	8003a9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e057      	b.n	8003a9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039ec:	4b2e      	ldr	r3, [pc, #184]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039f2:	4a2d      	ldr	r2, [pc, #180]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80039fc:	e04d      	b.n	8003a9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a04:	d141      	bne.n	8003a8a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a06:	4b28      	ldr	r3, [pc, #160]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a12:	d131      	bne.n	8003a78 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a14:	4b24      	ldr	r3, [pc, #144]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a1a:	4a23      	ldr	r2, [pc, #140]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a24:	4b20      	ldr	r3, [pc, #128]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a34:	4b1d      	ldr	r3, [pc, #116]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2232      	movs	r2, #50	@ 0x32
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ab0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	0c9b      	lsrs	r3, r3, #18
 8003a46:	3301      	adds	r3, #1
 8003a48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a4a:	e002      	b.n	8003a52 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a52:	4b15      	ldr	r3, [pc, #84]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a5e:	d102      	bne.n	8003a66 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f2      	bne.n	8003a4c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a66:	4b10      	ldr	r3, [pc, #64]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a72:	d112      	bne.n	8003a9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e011      	b.n	8003a9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a78:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003a88:	e007      	b.n	8003a9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a8a:	4b07      	ldr	r3, [pc, #28]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a92:	4a05      	ldr	r2, [pc, #20]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a94:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a98:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	40007000 	.word	0x40007000
 8003aac:	20000000 	.word	0x20000000
 8003ab0:	431bde83 	.word	0x431bde83

08003ab4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003ab8:	4b05      	ldr	r3, [pc, #20]	@ (8003ad0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4a04      	ldr	r2, [pc, #16]	@ (8003ad0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003abe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ac2:	6093      	str	r3, [r2, #8]
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40007000 	.word	0x40007000

08003ad4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e2fe      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d075      	beq.n	8003bde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003af2:	4b97      	ldr	r3, [pc, #604]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 030c 	and.w	r3, r3, #12
 8003afa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003afc:	4b94      	ldr	r3, [pc, #592]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	2b0c      	cmp	r3, #12
 8003b0a:	d102      	bne.n	8003b12 <HAL_RCC_OscConfig+0x3e>
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d002      	beq.n	8003b18 <HAL_RCC_OscConfig+0x44>
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d10b      	bne.n	8003b30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b18:	4b8d      	ldr	r3, [pc, #564]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d05b      	beq.n	8003bdc <HAL_RCC_OscConfig+0x108>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d157      	bne.n	8003bdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e2d9      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b38:	d106      	bne.n	8003b48 <HAL_RCC_OscConfig+0x74>
 8003b3a:	4b85      	ldr	r3, [pc, #532]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a84      	ldr	r2, [pc, #528]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	e01d      	b.n	8003b84 <HAL_RCC_OscConfig+0xb0>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b50:	d10c      	bne.n	8003b6c <HAL_RCC_OscConfig+0x98>
 8003b52:	4b7f      	ldr	r3, [pc, #508]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a7e      	ldr	r2, [pc, #504]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003b58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	4b7c      	ldr	r3, [pc, #496]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a7b      	ldr	r2, [pc, #492]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	e00b      	b.n	8003b84 <HAL_RCC_OscConfig+0xb0>
 8003b6c:	4b78      	ldr	r3, [pc, #480]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a77      	ldr	r2, [pc, #476]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003b72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	4b75      	ldr	r3, [pc, #468]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a74      	ldr	r2, [pc, #464]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003b7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d013      	beq.n	8003bb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7fe fc2e 	bl	80023ec <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b94:	f7fe fc2a 	bl	80023ec <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b64      	cmp	r3, #100	@ 0x64
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e29e      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ba6:	4b6a      	ldr	r3, [pc, #424]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0xc0>
 8003bb2:	e014      	b.n	8003bde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb4:	f7fe fc1a 	bl	80023ec <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bbc:	f7fe fc16 	bl	80023ec <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	@ 0x64
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e28a      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bce:	4b60      	ldr	r3, [pc, #384]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0xe8>
 8003bda:	e000      	b.n	8003bde <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d075      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bea:	4b59      	ldr	r3, [pc, #356]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 030c 	and.w	r3, r3, #12
 8003bf2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bf4:	4b56      	ldr	r3, [pc, #344]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0303 	and.w	r3, r3, #3
 8003bfc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	2b0c      	cmp	r3, #12
 8003c02:	d102      	bne.n	8003c0a <HAL_RCC_OscConfig+0x136>
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d002      	beq.n	8003c10 <HAL_RCC_OscConfig+0x13c>
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d11f      	bne.n	8003c50 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c10:	4b4f      	ldr	r3, [pc, #316]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_RCC_OscConfig+0x154>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e25d      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c28:	4b49      	ldr	r3, [pc, #292]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	061b      	lsls	r3, r3, #24
 8003c36:	4946      	ldr	r1, [pc, #280]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c3c:	4b45      	ldr	r3, [pc, #276]	@ (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fe fb87 	bl	8002354 <HAL_InitTick>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d043      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e249      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d023      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c58:	4b3d      	ldr	r3, [pc, #244]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a3c      	ldr	r2, [pc, #240]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003c5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c64:	f7fe fbc2 	bl	80023ec <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c6c:	f7fe fbbe 	bl	80023ec <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e232      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c7e:	4b34      	ldr	r3, [pc, #208]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f0      	beq.n	8003c6c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8a:	4b31      	ldr	r3, [pc, #196]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	061b      	lsls	r3, r3, #24
 8003c98:	492d      	ldr	r1, [pc, #180]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	604b      	str	r3, [r1, #4]
 8003c9e:	e01a      	b.n	8003cd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ca0:	4b2b      	ldr	r3, [pc, #172]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a2a      	ldr	r2, [pc, #168]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003ca6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cac:	f7fe fb9e 	bl	80023ec <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb4:	f7fe fb9a 	bl	80023ec <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e20e      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cc6:	4b22      	ldr	r3, [pc, #136]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x1e0>
 8003cd2:	e000      	b.n	8003cd6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d041      	beq.n	8003d66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d01c      	beq.n	8003d24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cea:	4b19      	ldr	r3, [pc, #100]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cf0:	4a17      	ldr	r2, [pc, #92]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfa:	f7fe fb77 	bl	80023ec <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d02:	f7fe fb73 	bl	80023ec <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e1e7      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d14:	4b0e      	ldr	r3, [pc, #56]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0ef      	beq.n	8003d02 <HAL_RCC_OscConfig+0x22e>
 8003d22:	e020      	b.n	8003d66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d24:	4b0a      	ldr	r3, [pc, #40]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d2a:	4a09      	ldr	r2, [pc, #36]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003d2c:	f023 0301 	bic.w	r3, r3, #1
 8003d30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d34:	f7fe fb5a 	bl	80023ec <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d3a:	e00d      	b.n	8003d58 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d3c:	f7fe fb56 	bl	80023ec <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d906      	bls.n	8003d58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e1ca      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000
 8003d54:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d58:	4b8c      	ldr	r3, [pc, #560]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1ea      	bne.n	8003d3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 80a6 	beq.w	8003ec0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d74:	2300      	movs	r3, #0
 8003d76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d78:	4b84      	ldr	r3, [pc, #528]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_RCC_OscConfig+0x2b4>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <HAL_RCC_OscConfig+0x2b6>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00d      	beq.n	8003daa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d8e:	4b7f      	ldr	r3, [pc, #508]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d92:	4a7e      	ldr	r2, [pc, #504]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d98:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d9a:	4b7c      	ldr	r3, [pc, #496]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003da6:	2301      	movs	r3, #1
 8003da8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003daa:	4b79      	ldr	r3, [pc, #484]	@ (8003f90 <HAL_RCC_OscConfig+0x4bc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d118      	bne.n	8003de8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003db6:	4b76      	ldr	r3, [pc, #472]	@ (8003f90 <HAL_RCC_OscConfig+0x4bc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a75      	ldr	r2, [pc, #468]	@ (8003f90 <HAL_RCC_OscConfig+0x4bc>)
 8003dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dc2:	f7fe fb13 	bl	80023ec <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dca:	f7fe fb0f 	bl	80023ec <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e183      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ddc:	4b6c      	ldr	r3, [pc, #432]	@ (8003f90 <HAL_RCC_OscConfig+0x4bc>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0f0      	beq.n	8003dca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d108      	bne.n	8003e02 <HAL_RCC_OscConfig+0x32e>
 8003df0:	4b66      	ldr	r3, [pc, #408]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df6:	4a65      	ldr	r2, [pc, #404]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e00:	e024      	b.n	8003e4c <HAL_RCC_OscConfig+0x378>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b05      	cmp	r3, #5
 8003e08:	d110      	bne.n	8003e2c <HAL_RCC_OscConfig+0x358>
 8003e0a:	4b60      	ldr	r3, [pc, #384]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e10:	4a5e      	ldr	r2, [pc, #376]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003e12:	f043 0304 	orr.w	r3, r3, #4
 8003e16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e1a:	4b5c      	ldr	r3, [pc, #368]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e20:	4a5a      	ldr	r2, [pc, #360]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003e22:	f043 0301 	orr.w	r3, r3, #1
 8003e26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e2a:	e00f      	b.n	8003e4c <HAL_RCC_OscConfig+0x378>
 8003e2c:	4b57      	ldr	r3, [pc, #348]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e32:	4a56      	ldr	r2, [pc, #344]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003e34:	f023 0301 	bic.w	r3, r3, #1
 8003e38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e3c:	4b53      	ldr	r3, [pc, #332]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e42:	4a52      	ldr	r2, [pc, #328]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003e44:	f023 0304 	bic.w	r3, r3, #4
 8003e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d016      	beq.n	8003e82 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e54:	f7fe faca 	bl	80023ec <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e5a:	e00a      	b.n	8003e72 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5c:	f7fe fac6 	bl	80023ec <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e138      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e72:	4b46      	ldr	r3, [pc, #280]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0ed      	beq.n	8003e5c <HAL_RCC_OscConfig+0x388>
 8003e80:	e015      	b.n	8003eae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e82:	f7fe fab3 	bl	80023ec <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e88:	e00a      	b.n	8003ea0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8a:	f7fe faaf 	bl	80023ec <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e121      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ea0:	4b3a      	ldr	r3, [pc, #232]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1ed      	bne.n	8003e8a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003eae:	7ffb      	ldrb	r3, [r7, #31]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d105      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb4:	4b35      	ldr	r3, [pc, #212]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb8:	4a34      	ldr	r2, [pc, #208]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003eba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ebe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0320 	and.w	r3, r3, #32
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d03c      	beq.n	8003f46 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d01c      	beq.n	8003f0e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eda:	4a2c      	ldr	r2, [pc, #176]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003edc:	f043 0301 	orr.w	r3, r3, #1
 8003ee0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee4:	f7fe fa82 	bl	80023ec <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eec:	f7fe fa7e 	bl	80023ec <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e0f2      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003efe:	4b23      	ldr	r3, [pc, #140]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003f00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0ef      	beq.n	8003eec <HAL_RCC_OscConfig+0x418>
 8003f0c:	e01b      	b.n	8003f46 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003f10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f14:	4a1d      	ldr	r2, [pc, #116]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003f16:	f023 0301 	bic.w	r3, r3, #1
 8003f1a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1e:	f7fe fa65 	bl	80023ec <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f26:	f7fe fa61 	bl	80023ec <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e0d5      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f38:	4b14      	ldr	r3, [pc, #80]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003f3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1ef      	bne.n	8003f26 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 80c9 	beq.w	80040e2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f50:	4b0e      	ldr	r3, [pc, #56]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f003 030c 	and.w	r3, r3, #12
 8003f58:	2b0c      	cmp	r3, #12
 8003f5a:	f000 8083 	beq.w	8004064 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d15e      	bne.n	8004024 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f66:	4b09      	ldr	r3, [pc, #36]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a08      	ldr	r2, [pc, #32]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003f6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f72:	f7fe fa3b 	bl	80023ec <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f78:	e00c      	b.n	8003f94 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7a:	f7fe fa37 	bl	80023ec <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d905      	bls.n	8003f94 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e0ab      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f94:	4b55      	ldr	r3, [pc, #340]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1ec      	bne.n	8003f7a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fa0:	4b52      	ldr	r3, [pc, #328]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	4b52      	ldr	r3, [pc, #328]	@ (80040f0 <HAL_RCC_OscConfig+0x61c>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6a11      	ldr	r1, [r2, #32]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fb0:	3a01      	subs	r2, #1
 8003fb2:	0112      	lsls	r2, r2, #4
 8003fb4:	4311      	orrs	r1, r2
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003fba:	0212      	lsls	r2, r2, #8
 8003fbc:	4311      	orrs	r1, r2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003fc2:	0852      	lsrs	r2, r2, #1
 8003fc4:	3a01      	subs	r2, #1
 8003fc6:	0552      	lsls	r2, r2, #21
 8003fc8:	4311      	orrs	r1, r2
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003fce:	0852      	lsrs	r2, r2, #1
 8003fd0:	3a01      	subs	r2, #1
 8003fd2:	0652      	lsls	r2, r2, #25
 8003fd4:	4311      	orrs	r1, r2
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003fda:	06d2      	lsls	r2, r2, #27
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	4943      	ldr	r1, [pc, #268]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe4:	4b41      	ldr	r3, [pc, #260]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a40      	ldr	r2, [pc, #256]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 8003fea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ff0:	4b3e      	ldr	r3, [pc, #248]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	4a3d      	ldr	r2, [pc, #244]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 8003ff6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ffa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7fe f9f6 	bl	80023ec <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004004:	f7fe f9f2 	bl	80023ec <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e066      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004016:	4b35      	ldr	r3, [pc, #212]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCC_OscConfig+0x530>
 8004022:	e05e      	b.n	80040e2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004024:	4b31      	ldr	r3, [pc, #196]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a30      	ldr	r2, [pc, #192]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 800402a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800402e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7fe f9dc 	bl	80023ec <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004038:	f7fe f9d8 	bl	80023ec <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e04c      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800404a:	4b28      	ldr	r3, [pc, #160]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004056:	4b25      	ldr	r3, [pc, #148]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	4924      	ldr	r1, [pc, #144]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 800405c:	4b25      	ldr	r3, [pc, #148]	@ (80040f4 <HAL_RCC_OscConfig+0x620>)
 800405e:	4013      	ands	r3, r2
 8004060:	60cb      	str	r3, [r1, #12]
 8004062:	e03e      	b.n	80040e2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e039      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004070:	4b1e      	ldr	r3, [pc, #120]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f003 0203 	and.w	r2, r3, #3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	429a      	cmp	r2, r3
 8004082:	d12c      	bne.n	80040de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408e:	3b01      	subs	r3, #1
 8004090:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004092:	429a      	cmp	r2, r3
 8004094:	d123      	bne.n	80040de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d11b      	bne.n	80040de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d113      	bne.n	80040de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c0:	085b      	lsrs	r3, r3, #1
 80040c2:	3b01      	subs	r3, #1
 80040c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d109      	bne.n	80040de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d4:	085b      	lsrs	r3, r3, #1
 80040d6:	3b01      	subs	r3, #1
 80040d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040da:	429a      	cmp	r2, r3
 80040dc:	d001      	beq.n	80040e2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3720      	adds	r7, #32
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40021000 	.word	0x40021000
 80040f0:	019f800c 	.word	0x019f800c
 80040f4:	feeefffc 	.word	0xfeeefffc

080040f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e11e      	b.n	800434e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004110:	4b91      	ldr	r3, [pc, #580]	@ (8004358 <HAL_RCC_ClockConfig+0x260>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d910      	bls.n	8004140 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411e:	4b8e      	ldr	r3, [pc, #568]	@ (8004358 <HAL_RCC_ClockConfig+0x260>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f023 020f 	bic.w	r2, r3, #15
 8004126:	498c      	ldr	r1, [pc, #560]	@ (8004358 <HAL_RCC_ClockConfig+0x260>)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	4313      	orrs	r3, r2
 800412c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800412e:	4b8a      	ldr	r3, [pc, #552]	@ (8004358 <HAL_RCC_ClockConfig+0x260>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	429a      	cmp	r2, r3
 800413a:	d001      	beq.n	8004140 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e106      	b.n	800434e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d073      	beq.n	8004234 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b03      	cmp	r3, #3
 8004152:	d129      	bne.n	80041a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004154:	4b81      	ldr	r3, [pc, #516]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0f4      	b.n	800434e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004164:	f000 f99c 	bl	80044a0 <RCC_GetSysClockFreqFromPLLSource>
 8004168:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4a7c      	ldr	r2, [pc, #496]	@ (8004360 <HAL_RCC_ClockConfig+0x268>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d93f      	bls.n	80041f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004172:	4b7a      	ldr	r3, [pc, #488]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d009      	beq.n	8004192 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004186:	2b00      	cmp	r3, #0
 8004188:	d033      	beq.n	80041f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800418e:	2b00      	cmp	r3, #0
 8004190:	d12f      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004192:	4b72      	ldr	r3, [pc, #456]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800419a:	4a70      	ldr	r2, [pc, #448]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 800419c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80041a2:	2380      	movs	r3, #128	@ 0x80
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	e024      	b.n	80041f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d107      	bne.n	80041c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041b0:	4b6a      	ldr	r3, [pc, #424]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d109      	bne.n	80041d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0c6      	b.n	800434e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041c0:	4b66      	ldr	r3, [pc, #408]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0be      	b.n	800434e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80041d0:	f000 f8ce 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 80041d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	4a61      	ldr	r2, [pc, #388]	@ (8004360 <HAL_RCC_ClockConfig+0x268>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d909      	bls.n	80041f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041de:	4b5f      	ldr	r3, [pc, #380]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041e6:	4a5d      	ldr	r2, [pc, #372]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 80041e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80041ee:	2380      	movs	r3, #128	@ 0x80
 80041f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041f2:	4b5a      	ldr	r3, [pc, #360]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f023 0203 	bic.w	r2, r3, #3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	4957      	ldr	r1, [pc, #348]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 8004200:	4313      	orrs	r3, r2
 8004202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004204:	f7fe f8f2 	bl	80023ec <HAL_GetTick>
 8004208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420a:	e00a      	b.n	8004222 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800420c:	f7fe f8ee 	bl	80023ec <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800421a:	4293      	cmp	r3, r2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e095      	b.n	800434e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004222:	4b4e      	ldr	r3, [pc, #312]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 020c 	and.w	r2, r3, #12
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	429a      	cmp	r2, r3
 8004232:	d1eb      	bne.n	800420c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d023      	beq.n	8004288 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800424c:	4b43      	ldr	r3, [pc, #268]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	4a42      	ldr	r2, [pc, #264]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 8004252:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004256:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d007      	beq.n	8004274 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004264:	4b3d      	ldr	r3, [pc, #244]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800426c:	4a3b      	ldr	r2, [pc, #236]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 800426e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004272:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004274:	4b39      	ldr	r3, [pc, #228]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	4936      	ldr	r1, [pc, #216]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 8004282:	4313      	orrs	r3, r2
 8004284:	608b      	str	r3, [r1, #8]
 8004286:	e008      	b.n	800429a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2b80      	cmp	r3, #128	@ 0x80
 800428c:	d105      	bne.n	800429a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800428e:	4b33      	ldr	r3, [pc, #204]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	4a32      	ldr	r2, [pc, #200]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 8004294:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004298:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800429a:	4b2f      	ldr	r3, [pc, #188]	@ (8004358 <HAL_RCC_ClockConfig+0x260>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d21d      	bcs.n	80042e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004358 <HAL_RCC_ClockConfig+0x260>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f023 020f 	bic.w	r2, r3, #15
 80042b0:	4929      	ldr	r1, [pc, #164]	@ (8004358 <HAL_RCC_ClockConfig+0x260>)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80042b8:	f7fe f898 	bl	80023ec <HAL_GetTick>
 80042bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042be:	e00a      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c0:	f7fe f894 	bl	80023ec <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e03b      	b.n	800434e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d6:	4b20      	ldr	r3, [pc, #128]	@ (8004358 <HAL_RCC_ClockConfig+0x260>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d1ed      	bne.n	80042c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d008      	beq.n	8004302 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042f0:	4b1a      	ldr	r3, [pc, #104]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4917      	ldr	r1, [pc, #92]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b00      	cmp	r3, #0
 800430c:	d009      	beq.n	8004322 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800430e:	4b13      	ldr	r3, [pc, #76]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	490f      	ldr	r1, [pc, #60]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 800431e:	4313      	orrs	r3, r2
 8004320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004322:	f000 f825 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 8004326:	4602      	mov	r2, r0
 8004328:	4b0c      	ldr	r3, [pc, #48]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	091b      	lsrs	r3, r3, #4
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	490c      	ldr	r1, [pc, #48]	@ (8004364 <HAL_RCC_ClockConfig+0x26c>)
 8004334:	5ccb      	ldrb	r3, [r1, r3]
 8004336:	f003 031f 	and.w	r3, r3, #31
 800433a:	fa22 f303 	lsr.w	r3, r2, r3
 800433e:	4a0a      	ldr	r2, [pc, #40]	@ (8004368 <HAL_RCC_ClockConfig+0x270>)
 8004340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004342:	4b0a      	ldr	r3, [pc, #40]	@ (800436c <HAL_RCC_ClockConfig+0x274>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f7fe f804 	bl	8002354 <HAL_InitTick>
 800434c:	4603      	mov	r3, r0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40022000 	.word	0x40022000
 800435c:	40021000 	.word	0x40021000
 8004360:	04c4b400 	.word	0x04c4b400
 8004364:	0800cfb8 	.word	0x0800cfb8
 8004368:	20000000 	.word	0x20000000
 800436c:	20000004 	.word	0x20000004

08004370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004370:	b480      	push	{r7}
 8004372:	b087      	sub	sp, #28
 8004374:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004376:	4b2c      	ldr	r3, [pc, #176]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b04      	cmp	r3, #4
 8004380:	d102      	bne.n	8004388 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004382:	4b2a      	ldr	r3, [pc, #168]	@ (800442c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	e047      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004388:	4b27      	ldr	r3, [pc, #156]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xb8>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 030c 	and.w	r3, r3, #12
 8004390:	2b08      	cmp	r3, #8
 8004392:	d102      	bne.n	800439a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004394:	4b25      	ldr	r3, [pc, #148]	@ (800442c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	e03e      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800439a:	4b23      	ldr	r3, [pc, #140]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xb8>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 030c 	and.w	r3, r3, #12
 80043a2:	2b0c      	cmp	r3, #12
 80043a4:	d136      	bne.n	8004414 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043a6:	4b20      	ldr	r3, [pc, #128]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	091b      	lsrs	r3, r3, #4
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	3301      	adds	r3, #1
 80043bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d10c      	bne.n	80043de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043c4:	4a19      	ldr	r2, [pc, #100]	@ (800442c <HAL_RCC_GetSysClockFreq+0xbc>)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043cc:	4a16      	ldr	r2, [pc, #88]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ce:	68d2      	ldr	r2, [r2, #12]
 80043d0:	0a12      	lsrs	r2, r2, #8
 80043d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043d6:	fb02 f303 	mul.w	r3, r2, r3
 80043da:	617b      	str	r3, [r7, #20]
      break;
 80043dc:	e00c      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043de:	4a13      	ldr	r2, [pc, #76]	@ (800442c <HAL_RCC_GetSysClockFreq+0xbc>)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e6:	4a10      	ldr	r2, [pc, #64]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043e8:	68d2      	ldr	r2, [r2, #12]
 80043ea:	0a12      	lsrs	r2, r2, #8
 80043ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043f0:	fb02 f303 	mul.w	r3, r2, r3
 80043f4:	617b      	str	r3, [r7, #20]
      break;
 80043f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	0e5b      	lsrs	r3, r3, #25
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	3301      	adds	r3, #1
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	e001      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004418:	693b      	ldr	r3, [r7, #16]
}
 800441a:	4618      	mov	r0, r3
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000
 800442c:	00f42400 	.word	0x00f42400

08004430 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004434:	4b03      	ldr	r3, [pc, #12]	@ (8004444 <HAL_RCC_GetHCLKFreq+0x14>)
 8004436:	681b      	ldr	r3, [r3, #0]
}
 8004438:	4618      	mov	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	20000000 	.word	0x20000000

08004448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800444c:	f7ff fff0 	bl	8004430 <HAL_RCC_GetHCLKFreq>
 8004450:	4602      	mov	r2, r0
 8004452:	4b06      	ldr	r3, [pc, #24]	@ (800446c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	0a1b      	lsrs	r3, r3, #8
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	4904      	ldr	r1, [pc, #16]	@ (8004470 <HAL_RCC_GetPCLK1Freq+0x28>)
 800445e:	5ccb      	ldrb	r3, [r1, r3]
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004468:	4618      	mov	r0, r3
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40021000 	.word	0x40021000
 8004470:	0800cfc8 	.word	0x0800cfc8

08004474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004478:	f7ff ffda 	bl	8004430 <HAL_RCC_GetHCLKFreq>
 800447c:	4602      	mov	r2, r0
 800447e:	4b06      	ldr	r3, [pc, #24]	@ (8004498 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	0adb      	lsrs	r3, r3, #11
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	4904      	ldr	r1, [pc, #16]	@ (800449c <HAL_RCC_GetPCLK2Freq+0x28>)
 800448a:	5ccb      	ldrb	r3, [r1, r3]
 800448c:	f003 031f 	and.w	r3, r3, #31
 8004490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004494:	4618      	mov	r0, r3
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40021000 	.word	0x40021000
 800449c:	0800cfc8 	.word	0x0800cfc8

080044a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	091b      	lsrs	r3, r3, #4
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	3301      	adds	r3, #1
 80044bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d10c      	bne.n	80044de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044c4:	4a17      	ldr	r2, [pc, #92]	@ (8004524 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044cc:	4a14      	ldr	r2, [pc, #80]	@ (8004520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044ce:	68d2      	ldr	r2, [r2, #12]
 80044d0:	0a12      	lsrs	r2, r2, #8
 80044d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80044d6:	fb02 f303 	mul.w	r3, r2, r3
 80044da:	617b      	str	r3, [r7, #20]
    break;
 80044dc:	e00c      	b.n	80044f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044de:	4a11      	ldr	r2, [pc, #68]	@ (8004524 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e6:	4a0e      	ldr	r2, [pc, #56]	@ (8004520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044e8:	68d2      	ldr	r2, [r2, #12]
 80044ea:	0a12      	lsrs	r2, r2, #8
 80044ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80044f0:	fb02 f303 	mul.w	r3, r2, r3
 80044f4:	617b      	str	r3, [r7, #20]
    break;
 80044f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044f8:	4b09      	ldr	r3, [pc, #36]	@ (8004520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	0e5b      	lsrs	r3, r3, #25
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	3301      	adds	r3, #1
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004512:	687b      	ldr	r3, [r7, #4]
}
 8004514:	4618      	mov	r0, r3
 8004516:	371c      	adds	r7, #28
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	40021000 	.word	0x40021000
 8004524:	00f42400 	.word	0x00f42400

08004528 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004530:	2300      	movs	r3, #0
 8004532:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004534:	2300      	movs	r3, #0
 8004536:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 8098 	beq.w	8004676 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004546:	2300      	movs	r3, #0
 8004548:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800454a:	4b43      	ldr	r3, [pc, #268]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800454c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800454e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10d      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004556:	4b40      	ldr	r3, [pc, #256]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800455a:	4a3f      	ldr	r2, [pc, #252]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800455c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004560:	6593      	str	r3, [r2, #88]	@ 0x58
 8004562:	4b3d      	ldr	r3, [pc, #244]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800456a:	60bb      	str	r3, [r7, #8]
 800456c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800456e:	2301      	movs	r3, #1
 8004570:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004572:	4b3a      	ldr	r3, [pc, #232]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a39      	ldr	r2, [pc, #228]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800457c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800457e:	f7fd ff35 	bl	80023ec <HAL_GetTick>
 8004582:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004584:	e009      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004586:	f7fd ff31 	bl	80023ec <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d902      	bls.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	74fb      	strb	r3, [r7, #19]
        break;
 8004598:	e005      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800459a:	4b30      	ldr	r3, [pc, #192]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0ef      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80045a6:	7cfb      	ldrb	r3, [r7, #19]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d159      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d01e      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d019      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045c8:	4b23      	ldr	r3, [pc, #140]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045d4:	4b20      	ldr	r3, [pc, #128]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045da:	4a1f      	ldr	r2, [pc, #124]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045f4:	4a18      	ldr	r2, [pc, #96]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d016      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004606:	f7fd fef1 	bl	80023ec <HAL_GetTick>
 800460a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800460c:	e00b      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800460e:	f7fd feed 	bl	80023ec <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	f241 3288 	movw	r2, #5000	@ 0x1388
 800461c:	4293      	cmp	r3, r2
 800461e:	d902      	bls.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	74fb      	strb	r3, [r7, #19]
            break;
 8004624:	e006      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004626:	4b0c      	ldr	r3, [pc, #48]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0ec      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004634:	7cfb      	ldrb	r3, [r7, #19]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10b      	bne.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800463a:	4b07      	ldr	r3, [pc, #28]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800463c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004640:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004648:	4903      	ldr	r1, [pc, #12]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004650:	e008      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004652:	7cfb      	ldrb	r3, [r7, #19]
 8004654:	74bb      	strb	r3, [r7, #18]
 8004656:	e005      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004658:	40021000 	.word	0x40021000
 800465c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004660:	7cfb      	ldrb	r3, [r7, #19]
 8004662:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004664:	7c7b      	ldrb	r3, [r7, #17]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d105      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800466a:	4ba6      	ldr	r3, [pc, #664]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800466c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800466e:	4aa5      	ldr	r2, [pc, #660]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004670:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004674:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004682:	4ba0      	ldr	r3, [pc, #640]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004688:	f023 0203 	bic.w	r2, r3, #3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	499c      	ldr	r1, [pc, #624]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046a4:	4b97      	ldr	r3, [pc, #604]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046aa:	f023 020c 	bic.w	r2, r3, #12
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	4994      	ldr	r1, [pc, #592]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0304 	and.w	r3, r3, #4
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046c6:	4b8f      	ldr	r3, [pc, #572]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	498b      	ldr	r1, [pc, #556]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0308 	and.w	r3, r3, #8
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046e8:	4b86      	ldr	r3, [pc, #536]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	4983      	ldr	r1, [pc, #524]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800470a:	4b7e      	ldr	r3, [pc, #504]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004710:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	497a      	ldr	r1, [pc, #488]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800472c:	4b75      	ldr	r3, [pc, #468]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800472e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004732:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	4972      	ldr	r1, [pc, #456]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800474e:	4b6d      	ldr	r3, [pc, #436]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004754:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	4969      	ldr	r1, [pc, #420]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004770:	4b64      	ldr	r3, [pc, #400]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004776:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	4961      	ldr	r1, [pc, #388]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004792:	4b5c      	ldr	r3, [pc, #368]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004798:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a0:	4958      	ldr	r1, [pc, #352]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d015      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047b4:	4b53      	ldr	r3, [pc, #332]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c2:	4950      	ldr	r1, [pc, #320]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047d2:	d105      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047d4:	4b4b      	ldr	r3, [pc, #300]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	4a4a      	ldr	r2, [pc, #296]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047de:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d015      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047ec:	4b45      	ldr	r3, [pc, #276]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fa:	4942      	ldr	r1, [pc, #264]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004806:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800480a:	d105      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800480c:	4b3d      	ldr	r3, [pc, #244]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4a3c      	ldr	r2, [pc, #240]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004812:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004816:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d015      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004824:	4b37      	ldr	r3, [pc, #220]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004832:	4934      	ldr	r1, [pc, #208]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004842:	d105      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004844:	4b2f      	ldr	r3, [pc, #188]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	4a2e      	ldr	r2, [pc, #184]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800484a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800484e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d015      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800485c:	4b29      	ldr	r3, [pc, #164]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800485e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004862:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800486a:	4926      	ldr	r1, [pc, #152]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004876:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800487a:	d105      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800487c:	4b21      	ldr	r3, [pc, #132]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4a20      	ldr	r2, [pc, #128]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004882:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004886:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d015      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004894:	4b1b      	ldr	r3, [pc, #108]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a2:	4918      	ldr	r1, [pc, #96]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048b2:	d105      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048b4:	4b13      	ldr	r3, [pc, #76]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	4a12      	ldr	r2, [pc, #72]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d015      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048da:	490a      	ldr	r1, [pc, #40]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048ea:	d105      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80048ec:	4b05      	ldr	r3, [pc, #20]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	4a04      	ldr	r2, [pc, #16]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80048f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40021000 	.word	0x40021000

08004908 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e09d      	b.n	8004a56 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491e:	2b00      	cmp	r3, #0
 8004920:	d108      	bne.n	8004934 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800492a:	d009      	beq.n	8004940 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	61da      	str	r2, [r3, #28]
 8004932:	e005      	b.n	8004940 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d106      	bne.n	8004960 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7fc fdc8 	bl	80014f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004976:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004980:	d902      	bls.n	8004988 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004982:	2300      	movs	r3, #0
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	e002      	b.n	800498e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004988:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800498c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004996:	d007      	beq.n	80049a8 <HAL_SPI_Init+0xa0>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80049a0:	d002      	beq.n	80049a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049e0:	431a      	orrs	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ea:	ea42 0103 	orr.w	r1, r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	0c1b      	lsrs	r3, r3, #16
 8004a04:	f003 0204 	and.w	r2, r3, #4
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	431a      	orrs	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a16:	f003 0308 	and.w	r3, r3, #8
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004a24:	ea42 0103 	orr.w	r1, r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69da      	ldr	r2, [r3, #28]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b088      	sub	sp, #32
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	603b      	str	r3, [r7, #0]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d101      	bne.n	8004a80 <HAL_SPI_Transmit+0x22>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	e15f      	b.n	8004d40 <HAL_SPI_Transmit+0x2e2>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a88:	f7fd fcb0 	bl	80023ec <HAL_GetTick>
 8004a8c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a8e:	88fb      	ldrh	r3, [r7, #6]
 8004a90:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d002      	beq.n	8004aa4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004aa2:	e148      	b.n	8004d36 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d002      	beq.n	8004ab0 <HAL_SPI_Transmit+0x52>
 8004aaa:	88fb      	ldrh	r3, [r7, #6]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d102      	bne.n	8004ab6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ab4:	e13f      	b.n	8004d36 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2203      	movs	r2, #3
 8004aba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	88fa      	ldrh	r2, [r7, #6]
 8004ace:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	88fa      	ldrh	r2, [r7, #6]
 8004ad4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b00:	d10f      	bne.n	8004b22 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b2c:	2b40      	cmp	r3, #64	@ 0x40
 8004b2e:	d007      	beq.n	8004b40 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b48:	d94f      	bls.n	8004bea <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <HAL_SPI_Transmit+0xfa>
 8004b52:	8afb      	ldrh	r3, [r7, #22]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d142      	bne.n	8004bde <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5c:	881a      	ldrh	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b68:	1c9a      	adds	r2, r3, #2
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b7c:	e02f      	b.n	8004bde <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d112      	bne.n	8004bb2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b90:	881a      	ldrh	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9c:	1c9a      	adds	r2, r3, #2
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004bb0:	e015      	b.n	8004bde <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bb2:	f7fd fc1b 	bl	80023ec <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d803      	bhi.n	8004bca <HAL_SPI_Transmit+0x16c>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc8:	d102      	bne.n	8004bd0 <HAL_SPI_Transmit+0x172>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d106      	bne.n	8004bde <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004bdc:	e0ab      	b.n	8004d36 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1ca      	bne.n	8004b7e <HAL_SPI_Transmit+0x120>
 8004be8:	e080      	b.n	8004cec <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <HAL_SPI_Transmit+0x19a>
 8004bf2:	8afb      	ldrh	r3, [r7, #22]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d174      	bne.n	8004ce2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d912      	bls.n	8004c28 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c06:	881a      	ldrh	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c12:	1c9a      	adds	r2, r3, #2
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	3b02      	subs	r3, #2
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c26:	e05c      	b.n	8004ce2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	330c      	adds	r3, #12
 8004c32:	7812      	ldrb	r2, [r2, #0]
 8004c34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	3b01      	subs	r3, #1
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004c4e:	e048      	b.n	8004ce2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d12b      	bne.n	8004cb6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d912      	bls.n	8004c8e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c6c:	881a      	ldrh	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c78:	1c9a      	adds	r2, r3, #2
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	3b02      	subs	r3, #2
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c8c:	e029      	b.n	8004ce2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	330c      	adds	r3, #12
 8004c98:	7812      	ldrb	r2, [r2, #0]
 8004c9a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004cb4:	e015      	b.n	8004ce2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cb6:	f7fd fb99 	bl	80023ec <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d803      	bhi.n	8004cce <HAL_SPI_Transmit+0x270>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ccc:	d102      	bne.n	8004cd4 <HAL_SPI_Transmit+0x276>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d106      	bne.n	8004ce2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004ce0:	e029      	b.n	8004d36 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1b1      	bne.n	8004c50 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	6839      	ldr	r1, [r7, #0]
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 fcf9 	bl	80056e8 <SPI_EndRxTxTransaction>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10a      	bne.n	8004d20 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	613b      	str	r3, [r7, #16]
 8004d1e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	77fb      	strb	r3, [r7, #31]
 8004d2c:	e003      	b.n	8004d36 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004d3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3720      	adds	r7, #32
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af02      	add	r7, sp, #8
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	4613      	mov	r3, r2
 8004d56:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d002      	beq.n	8004d6e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d6c:	e11a      	b.n	8004fa4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d76:	d112      	bne.n	8004d9e <HAL_SPI_Receive+0x56>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10e      	bne.n	8004d9e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2204      	movs	r2, #4
 8004d84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d88:	88fa      	ldrh	r2, [r7, #6]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	68b9      	ldr	r1, [r7, #8]
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 f90e 	bl	8004fb6 <HAL_SPI_TransmitReceive>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	e107      	b.n	8004fae <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d101      	bne.n	8004dac <HAL_SPI_Receive+0x64>
 8004da8:	2302      	movs	r3, #2
 8004daa:	e100      	b.n	8004fae <HAL_SPI_Receive+0x266>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004db4:	f7fd fb1a 	bl	80023ec <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <HAL_SPI_Receive+0x7e>
 8004dc0:	88fb      	ldrh	r3, [r7, #6]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d102      	bne.n	8004dcc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dca:	e0eb      	b.n	8004fa4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2204      	movs	r2, #4
 8004dd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	88fa      	ldrh	r2, [r7, #6]
 8004de4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	88fa      	ldrh	r2, [r7, #6]
 8004dec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e16:	d908      	bls.n	8004e2a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e26:	605a      	str	r2, [r3, #4]
 8004e28:	e007      	b.n	8004e3a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004e38:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e42:	d10f      	bne.n	8004e64 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004e62:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e6e:	2b40      	cmp	r3, #64	@ 0x40
 8004e70:	d007      	beq.n	8004e82 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e80:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e8a:	d86f      	bhi.n	8004f6c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e8c:	e034      	b.n	8004ef8 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d117      	bne.n	8004ecc <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f103 020c 	add.w	r2, r3, #12
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea8:	7812      	ldrb	r2, [r2, #0]
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004eca:	e015      	b.n	8004ef8 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ecc:	f7fd fa8e 	bl	80023ec <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d803      	bhi.n	8004ee4 <HAL_SPI_Receive+0x19c>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee2:	d102      	bne.n	8004eea <HAL_SPI_Receive+0x1a2>
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d106      	bne.n	8004ef8 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004ef6:	e055      	b.n	8004fa4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1c4      	bne.n	8004e8e <HAL_SPI_Receive+0x146>
 8004f04:	e038      	b.n	8004f78 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d115      	bne.n	8004f40 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1e:	b292      	uxth	r2, r2
 8004f20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f26:	1c9a      	adds	r2, r3, #2
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004f3e:	e015      	b.n	8004f6c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f40:	f7fd fa54 	bl	80023ec <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d803      	bhi.n	8004f58 <HAL_SPI_Receive+0x210>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f56:	d102      	bne.n	8004f5e <HAL_SPI_Receive+0x216>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004f6a:	e01b      	b.n	8004fa4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1c6      	bne.n	8004f06 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	6839      	ldr	r1, [r7, #0]
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 fb5b 	bl	8005638 <SPI_EndRxTransaction>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d002      	beq.n	8004f8e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	75fb      	strb	r3, [r7, #23]
 8004f9a:	e003      	b.n	8004fa4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b08a      	sub	sp, #40	@ 0x28
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
 8004fc2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_SPI_TransmitReceive+0x26>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e20a      	b.n	80053f2 <HAL_SPI_TransmitReceive+0x43c>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fe4:	f7fd fa02 	bl	80023ec <HAL_GetTick>
 8004fe8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004ff0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004ff8:	887b      	ldrh	r3, [r7, #2]
 8004ffa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004ffc:	887b      	ldrh	r3, [r7, #2]
 8004ffe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005000:	7efb      	ldrb	r3, [r7, #27]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d00e      	beq.n	8005024 <HAL_SPI_TransmitReceive+0x6e>
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800500c:	d106      	bne.n	800501c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d102      	bne.n	800501c <HAL_SPI_TransmitReceive+0x66>
 8005016:	7efb      	ldrb	r3, [r7, #27]
 8005018:	2b04      	cmp	r3, #4
 800501a:	d003      	beq.n	8005024 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800501c:	2302      	movs	r3, #2
 800501e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005022:	e1e0      	b.n	80053e6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d005      	beq.n	8005036 <HAL_SPI_TransmitReceive+0x80>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <HAL_SPI_TransmitReceive+0x80>
 8005030:	887b      	ldrh	r3, [r7, #2]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d103      	bne.n	800503e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800503c:	e1d3      	b.n	80053e6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b04      	cmp	r3, #4
 8005048:	d003      	beq.n	8005052 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2205      	movs	r2, #5
 800504e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	887a      	ldrh	r2, [r7, #2]
 8005062:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	887a      	ldrh	r2, [r7, #2]
 800506a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	887a      	ldrh	r2, [r7, #2]
 8005078:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	887a      	ldrh	r2, [r7, #2]
 800507e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005094:	d802      	bhi.n	800509c <HAL_SPI_TransmitReceive+0xe6>
 8005096:	8a3b      	ldrh	r3, [r7, #16]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d908      	bls.n	80050ae <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80050aa:	605a      	str	r2, [r3, #4]
 80050ac:	e007      	b.n	80050be <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80050bc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c8:	2b40      	cmp	r3, #64	@ 0x40
 80050ca:	d007      	beq.n	80050dc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80050e4:	f240 8081 	bls.w	80051ea <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <HAL_SPI_TransmitReceive+0x140>
 80050f0:	8a7b      	ldrh	r3, [r7, #18]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d16d      	bne.n	80051d2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fa:	881a      	ldrh	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005106:	1c9a      	adds	r2, r3, #2
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800511a:	e05a      	b.n	80051d2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b02      	cmp	r3, #2
 8005128:	d11b      	bne.n	8005162 <HAL_SPI_TransmitReceive+0x1ac>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800512e:	b29b      	uxth	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d016      	beq.n	8005162 <HAL_SPI_TransmitReceive+0x1ac>
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	2b01      	cmp	r3, #1
 8005138:	d113      	bne.n	8005162 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513e:	881a      	ldrh	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514a:	1c9a      	adds	r2, r3, #2
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b01      	cmp	r3, #1
 800516e:	d11c      	bne.n	80051aa <HAL_SPI_TransmitReceive+0x1f4>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d016      	beq.n	80051aa <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005186:	b292      	uxth	r2, r2
 8005188:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518e:	1c9a      	adds	r2, r3, #2
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800519a:	b29b      	uxth	r3, r3
 800519c:	3b01      	subs	r3, #1
 800519e:	b29a      	uxth	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051a6:	2301      	movs	r3, #1
 80051a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051aa:	f7fd f91f 	bl	80023ec <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d80b      	bhi.n	80051d2 <HAL_SPI_TransmitReceive+0x21c>
 80051ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c0:	d007      	beq.n	80051d2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80051d0:	e109      	b.n	80053e6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d19f      	bne.n	800511c <HAL_SPI_TransmitReceive+0x166>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d199      	bne.n	800511c <HAL_SPI_TransmitReceive+0x166>
 80051e8:	e0e3      	b.n	80053b2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_SPI_TransmitReceive+0x244>
 80051f2:	8a7b      	ldrh	r3, [r7, #18]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	f040 80cf 	bne.w	8005398 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051fe:	b29b      	uxth	r3, r3
 8005200:	2b01      	cmp	r3, #1
 8005202:	d912      	bls.n	800522a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005208:	881a      	ldrh	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005214:	1c9a      	adds	r2, r3, #2
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800521e:	b29b      	uxth	r3, r3
 8005220:	3b02      	subs	r3, #2
 8005222:	b29a      	uxth	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005228:	e0b6      	b.n	8005398 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	330c      	adds	r3, #12
 8005234:	7812      	ldrb	r2, [r2, #0]
 8005236:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005246:	b29b      	uxth	r3, r3
 8005248:	3b01      	subs	r3, #1
 800524a:	b29a      	uxth	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005250:	e0a2      	b.n	8005398 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b02      	cmp	r3, #2
 800525e:	d134      	bne.n	80052ca <HAL_SPI_TransmitReceive+0x314>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d02f      	beq.n	80052ca <HAL_SPI_TransmitReceive+0x314>
 800526a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526c:	2b01      	cmp	r3, #1
 800526e:	d12c      	bne.n	80052ca <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005274:	b29b      	uxth	r3, r3
 8005276:	2b01      	cmp	r3, #1
 8005278:	d912      	bls.n	80052a0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800527e:	881a      	ldrh	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528a:	1c9a      	adds	r2, r3, #2
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005294:	b29b      	uxth	r3, r3
 8005296:	3b02      	subs	r3, #2
 8005298:	b29a      	uxth	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800529e:	e012      	b.n	80052c6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	330c      	adds	r3, #12
 80052aa:	7812      	ldrb	r2, [r2, #0]
 80052ac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052bc:	b29b      	uxth	r3, r3
 80052be:	3b01      	subs	r3, #1
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d148      	bne.n	800536a <HAL_SPI_TransmitReceive+0x3b4>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d042      	beq.n	800536a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d923      	bls.n	8005338 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fa:	b292      	uxth	r2, r2
 80052fc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005302:	1c9a      	adds	r2, r3, #2
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800530e:	b29b      	uxth	r3, r3
 8005310:	3b02      	subs	r3, #2
 8005312:	b29a      	uxth	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005320:	b29b      	uxth	r3, r3
 8005322:	2b01      	cmp	r3, #1
 8005324:	d81f      	bhi.n	8005366 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005334:	605a      	str	r2, [r3, #4]
 8005336:	e016      	b.n	8005366 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f103 020c 	add.w	r2, r3, #12
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005344:	7812      	ldrb	r2, [r2, #0]
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800535a:	b29b      	uxth	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005366:	2301      	movs	r3, #1
 8005368:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800536a:	f7fd f83f 	bl	80023ec <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005376:	429a      	cmp	r2, r3
 8005378:	d803      	bhi.n	8005382 <HAL_SPI_TransmitReceive+0x3cc>
 800537a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005380:	d102      	bne.n	8005388 <HAL_SPI_TransmitReceive+0x3d2>
 8005382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005384:	2b00      	cmp	r3, #0
 8005386:	d107      	bne.n	8005398 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005396:	e026      	b.n	80053e6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f47f af57 	bne.w	8005252 <HAL_SPI_TransmitReceive+0x29c>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f47f af50 	bne.w	8005252 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053b2:	69fa      	ldr	r2, [r7, #28]
 80053b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 f996 	bl	80056e8 <SPI_EndRxTxTransaction>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d005      	beq.n	80053ce <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2220      	movs	r2, #32
 80053cc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053dc:	e003      	b.n	80053e6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80053ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3728      	adds	r7, #40	@ 0x28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
	...

080053fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	4613      	mov	r3, r2
 800540a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800540c:	f7fc ffee 	bl	80023ec <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005414:	1a9b      	subs	r3, r3, r2
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	4413      	add	r3, r2
 800541a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800541c:	f7fc ffe6 	bl	80023ec <HAL_GetTick>
 8005420:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005422:	4b39      	ldr	r3, [pc, #228]	@ (8005508 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	015b      	lsls	r3, r3, #5
 8005428:	0d1b      	lsrs	r3, r3, #20
 800542a:	69fa      	ldr	r2, [r7, #28]
 800542c:	fb02 f303 	mul.w	r3, r2, r3
 8005430:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005432:	e054      	b.n	80054de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543a:	d050      	beq.n	80054de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800543c:	f7fc ffd6 	bl	80023ec <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	429a      	cmp	r2, r3
 800544a:	d902      	bls.n	8005452 <SPI_WaitFlagStateUntilTimeout+0x56>
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d13d      	bne.n	80054ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005460:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800546a:	d111      	bne.n	8005490 <SPI_WaitFlagStateUntilTimeout+0x94>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005474:	d004      	beq.n	8005480 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800547e:	d107      	bne.n	8005490 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800548e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005494:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005498:	d10f      	bne.n	80054ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e017      	b.n	80054fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	3b01      	subs	r3, #1
 80054dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	4013      	ands	r3, r2
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	bf0c      	ite	eq
 80054ee:	2301      	moveq	r3, #1
 80054f0:	2300      	movne	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	461a      	mov	r2, r3
 80054f6:	79fb      	ldrb	r3, [r7, #7]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d19b      	bne.n	8005434 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3720      	adds	r7, #32
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20000000 	.word	0x20000000

0800550c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08a      	sub	sp, #40	@ 0x28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800551a:	2300      	movs	r3, #0
 800551c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800551e:	f7fc ff65 	bl	80023ec <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005526:	1a9b      	subs	r3, r3, r2
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	4413      	add	r3, r2
 800552c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800552e:	f7fc ff5d 	bl	80023ec <HAL_GetTick>
 8005532:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	330c      	adds	r3, #12
 800553a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800553c:	4b3d      	ldr	r3, [pc, #244]	@ (8005634 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	00da      	lsls	r2, r3, #3
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	0d1b      	lsrs	r3, r3, #20
 800554c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800554e:	fb02 f303 	mul.w	r3, r2, r3
 8005552:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005554:	e060      	b.n	8005618 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800555c:	d107      	bne.n	800556e <SPI_WaitFifoStateUntilTimeout+0x62>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d104      	bne.n	800556e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	b2db      	uxtb	r3, r3
 800556a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800556c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005574:	d050      	beq.n	8005618 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005576:	f7fc ff39 	bl	80023ec <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005582:	429a      	cmp	r2, r3
 8005584:	d902      	bls.n	800558c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005588:	2b00      	cmp	r3, #0
 800558a:	d13d      	bne.n	8005608 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800559a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055a4:	d111      	bne.n	80055ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ae:	d004      	beq.n	80055ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055b8:	d107      	bne.n	80055ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055d2:	d10f      	bne.n	80055f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e010      	b.n	800562a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	3b01      	subs	r3, #1
 8005616:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689a      	ldr	r2, [r3, #8]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	4013      	ands	r3, r2
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	429a      	cmp	r2, r3
 8005626:	d196      	bne.n	8005556 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3728      	adds	r7, #40	@ 0x28
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	20000000 	.word	0x20000000

08005638 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af02      	add	r7, sp, #8
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800564c:	d111      	bne.n	8005672 <SPI_EndRxTransaction+0x3a>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005656:	d004      	beq.n	8005662 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005660:	d107      	bne.n	8005672 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005670:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2200      	movs	r2, #0
 800567a:	2180      	movs	r1, #128	@ 0x80
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f7ff febd 	bl	80053fc <SPI_WaitFlagStateUntilTimeout>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d007      	beq.n	8005698 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800568c:	f043 0220 	orr.w	r2, r3, #32
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e023      	b.n	80056e0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056a0:	d11d      	bne.n	80056de <SPI_EndRxTransaction+0xa6>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056aa:	d004      	beq.n	80056b6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056b4:	d113      	bne.n	80056de <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2200      	movs	r2, #0
 80056be:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f7ff ff22 	bl	800550c <SPI_WaitFifoStateUntilTimeout>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d007      	beq.n	80056de <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056d2:	f043 0220 	orr.w	r2, r3, #32
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e000      	b.n	80056e0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af02      	add	r7, sp, #8
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f7ff ff03 	bl	800550c <SPI_WaitFifoStateUntilTimeout>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d007      	beq.n	800571c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005710:	f043 0220 	orr.w	r2, r3, #32
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e027      	b.n	800576c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2200      	movs	r2, #0
 8005724:	2180      	movs	r1, #128	@ 0x80
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f7ff fe68 	bl	80053fc <SPI_WaitFlagStateUntilTimeout>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d007      	beq.n	8005742 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005736:	f043 0220 	orr.w	r2, r3, #32
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e014      	b.n	800576c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	2200      	movs	r2, #0
 800574a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f7ff fedc 	bl	800550c <SPI_WaitFifoStateUntilTimeout>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d007      	beq.n	800576a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800575e:	f043 0220 	orr.w	r2, r3, #32
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e000      	b.n	800576c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e049      	b.n	800581a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fc fb24 	bl	8001de8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3304      	adds	r3, #4
 80057b0:	4619      	mov	r1, r3
 80057b2:	4610      	mov	r0, r2
 80057b4:	f000 faf0 	bl	8005d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
	...

08005824 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d109      	bne.n	8005848 <HAL_TIM_PWM_Start+0x24>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b01      	cmp	r3, #1
 800583e:	bf14      	ite	ne
 8005840:	2301      	movne	r3, #1
 8005842:	2300      	moveq	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	e03c      	b.n	80058c2 <HAL_TIM_PWM_Start+0x9e>
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	2b04      	cmp	r3, #4
 800584c:	d109      	bne.n	8005862 <HAL_TIM_PWM_Start+0x3e>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b01      	cmp	r3, #1
 8005858:	bf14      	ite	ne
 800585a:	2301      	movne	r3, #1
 800585c:	2300      	moveq	r3, #0
 800585e:	b2db      	uxtb	r3, r3
 8005860:	e02f      	b.n	80058c2 <HAL_TIM_PWM_Start+0x9e>
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b08      	cmp	r3, #8
 8005866:	d109      	bne.n	800587c <HAL_TIM_PWM_Start+0x58>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b01      	cmp	r3, #1
 8005872:	bf14      	ite	ne
 8005874:	2301      	movne	r3, #1
 8005876:	2300      	moveq	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	e022      	b.n	80058c2 <HAL_TIM_PWM_Start+0x9e>
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b0c      	cmp	r3, #12
 8005880:	d109      	bne.n	8005896 <HAL_TIM_PWM_Start+0x72>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b01      	cmp	r3, #1
 800588c:	bf14      	ite	ne
 800588e:	2301      	movne	r3, #1
 8005890:	2300      	moveq	r3, #0
 8005892:	b2db      	uxtb	r3, r3
 8005894:	e015      	b.n	80058c2 <HAL_TIM_PWM_Start+0x9e>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b10      	cmp	r3, #16
 800589a:	d109      	bne.n	80058b0 <HAL_TIM_PWM_Start+0x8c>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	bf14      	ite	ne
 80058a8:	2301      	movne	r3, #1
 80058aa:	2300      	moveq	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	e008      	b.n	80058c2 <HAL_TIM_PWM_Start+0x9e>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	bf14      	ite	ne
 80058bc:	2301      	movne	r3, #1
 80058be:	2300      	moveq	r3, #0
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e097      	b.n	80059fa <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d104      	bne.n	80058da <HAL_TIM_PWM_Start+0xb6>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058d8:	e023      	b.n	8005922 <HAL_TIM_PWM_Start+0xfe>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d104      	bne.n	80058ea <HAL_TIM_PWM_Start+0xc6>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058e8:	e01b      	b.n	8005922 <HAL_TIM_PWM_Start+0xfe>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d104      	bne.n	80058fa <HAL_TIM_PWM_Start+0xd6>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058f8:	e013      	b.n	8005922 <HAL_TIM_PWM_Start+0xfe>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b0c      	cmp	r3, #12
 80058fe:	d104      	bne.n	800590a <HAL_TIM_PWM_Start+0xe6>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005908:	e00b      	b.n	8005922 <HAL_TIM_PWM_Start+0xfe>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b10      	cmp	r3, #16
 800590e:	d104      	bne.n	800591a <HAL_TIM_PWM_Start+0xf6>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005918:	e003      	b.n	8005922 <HAL_TIM_PWM_Start+0xfe>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2202      	movs	r2, #2
 800591e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2201      	movs	r2, #1
 8005928:	6839      	ldr	r1, [r7, #0]
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fdc6 	bl	80064bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a33      	ldr	r2, [pc, #204]	@ (8005a04 <HAL_TIM_PWM_Start+0x1e0>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d013      	beq.n	8005962 <HAL_TIM_PWM_Start+0x13e>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a32      	ldr	r2, [pc, #200]	@ (8005a08 <HAL_TIM_PWM_Start+0x1e4>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d00e      	beq.n	8005962 <HAL_TIM_PWM_Start+0x13e>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a30      	ldr	r2, [pc, #192]	@ (8005a0c <HAL_TIM_PWM_Start+0x1e8>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d009      	beq.n	8005962 <HAL_TIM_PWM_Start+0x13e>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a2f      	ldr	r2, [pc, #188]	@ (8005a10 <HAL_TIM_PWM_Start+0x1ec>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d004      	beq.n	8005962 <HAL_TIM_PWM_Start+0x13e>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a2d      	ldr	r2, [pc, #180]	@ (8005a14 <HAL_TIM_PWM_Start+0x1f0>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d101      	bne.n	8005966 <HAL_TIM_PWM_Start+0x142>
 8005962:	2301      	movs	r3, #1
 8005964:	e000      	b.n	8005968 <HAL_TIM_PWM_Start+0x144>
 8005966:	2300      	movs	r3, #0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d007      	beq.n	800597c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800597a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a20      	ldr	r2, [pc, #128]	@ (8005a04 <HAL_TIM_PWM_Start+0x1e0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d018      	beq.n	80059b8 <HAL_TIM_PWM_Start+0x194>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800598e:	d013      	beq.n	80059b8 <HAL_TIM_PWM_Start+0x194>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a20      	ldr	r2, [pc, #128]	@ (8005a18 <HAL_TIM_PWM_Start+0x1f4>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d00e      	beq.n	80059b8 <HAL_TIM_PWM_Start+0x194>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a1f      	ldr	r2, [pc, #124]	@ (8005a1c <HAL_TIM_PWM_Start+0x1f8>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d009      	beq.n	80059b8 <HAL_TIM_PWM_Start+0x194>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a17      	ldr	r2, [pc, #92]	@ (8005a08 <HAL_TIM_PWM_Start+0x1e4>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d004      	beq.n	80059b8 <HAL_TIM_PWM_Start+0x194>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a16      	ldr	r2, [pc, #88]	@ (8005a0c <HAL_TIM_PWM_Start+0x1e8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d115      	bne.n	80059e4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	4b18      	ldr	r3, [pc, #96]	@ (8005a20 <HAL_TIM_PWM_Start+0x1fc>)
 80059c0:	4013      	ands	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b06      	cmp	r3, #6
 80059c8:	d015      	beq.n	80059f6 <HAL_TIM_PWM_Start+0x1d2>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059d0:	d011      	beq.n	80059f6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f042 0201 	orr.w	r2, r2, #1
 80059e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e2:	e008      	b.n	80059f6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0201 	orr.w	r2, r2, #1
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	e000      	b.n	80059f8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	40012c00 	.word	0x40012c00
 8005a08:	40013400 	.word	0x40013400
 8005a0c:	40014000 	.word	0x40014000
 8005a10:	40014400 	.word	0x40014400
 8005a14:	40014800 	.word	0x40014800
 8005a18:	40000400 	.word	0x40000400
 8005a1c:	40000800 	.word	0x40000800
 8005a20:	00010007 	.word	0x00010007

08005a24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e097      	b.n	8005b68 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d106      	bne.n	8005a52 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7fc fa35 	bl	8001ebc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2202      	movs	r2, #2
 8005a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6812      	ldr	r2, [r2, #0]
 8005a64:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005a68:	f023 0307 	bic.w	r3, r3, #7
 8005a6c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	3304      	adds	r3, #4
 8005a76:	4619      	mov	r1, r3
 8005a78:	4610      	mov	r0, r2
 8005a7a:	f000 f98d 	bl	8005d98 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aa6:	f023 0303 	bic.w	r3, r3, #3
 8005aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	021b      	lsls	r3, r3, #8
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005ac4:	f023 030c 	bic.w	r3, r3, #12
 8005ac8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ad0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ad4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	021b      	lsls	r3, r3, #8
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	011a      	lsls	r2, r3, #4
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	031b      	lsls	r3, r3, #12
 8005af4:	4313      	orrs	r3, r2
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005b02:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005b0a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	4313      	orrs	r3, r2
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3718      	adds	r7, #24
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d101      	bne.n	8005b8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	e0ff      	b.n	8005d8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b14      	cmp	r3, #20
 8005b9a:	f200 80f0 	bhi.w	8005d7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005ba4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba4:	08005bf9 	.word	0x08005bf9
 8005ba8:	08005d7f 	.word	0x08005d7f
 8005bac:	08005d7f 	.word	0x08005d7f
 8005bb0:	08005d7f 	.word	0x08005d7f
 8005bb4:	08005c39 	.word	0x08005c39
 8005bb8:	08005d7f 	.word	0x08005d7f
 8005bbc:	08005d7f 	.word	0x08005d7f
 8005bc0:	08005d7f 	.word	0x08005d7f
 8005bc4:	08005c7b 	.word	0x08005c7b
 8005bc8:	08005d7f 	.word	0x08005d7f
 8005bcc:	08005d7f 	.word	0x08005d7f
 8005bd0:	08005d7f 	.word	0x08005d7f
 8005bd4:	08005cbb 	.word	0x08005cbb
 8005bd8:	08005d7f 	.word	0x08005d7f
 8005bdc:	08005d7f 	.word	0x08005d7f
 8005be0:	08005d7f 	.word	0x08005d7f
 8005be4:	08005cfd 	.word	0x08005cfd
 8005be8:	08005d7f 	.word	0x08005d7f
 8005bec:	08005d7f 	.word	0x08005d7f
 8005bf0:	08005d7f 	.word	0x08005d7f
 8005bf4:	08005d3d 	.word	0x08005d3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68b9      	ldr	r1, [r7, #8]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 f966 	bl	8005ed0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0208 	orr.w	r2, r2, #8
 8005c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 0204 	bic.w	r2, r2, #4
 8005c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6999      	ldr	r1, [r3, #24]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	691a      	ldr	r2, [r3, #16]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	619a      	str	r2, [r3, #24]
      break;
 8005c36:	e0a5      	b.n	8005d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68b9      	ldr	r1, [r7, #8]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 f9d6 	bl	8005ff0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	699a      	ldr	r2, [r3, #24]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699a      	ldr	r2, [r3, #24]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6999      	ldr	r1, [r3, #24]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	021a      	lsls	r2, r3, #8
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	619a      	str	r2, [r3, #24]
      break;
 8005c78:	e084      	b.n	8005d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68b9      	ldr	r1, [r7, #8]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f000 fa3f 	bl	8006104 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69da      	ldr	r2, [r3, #28]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f042 0208 	orr.w	r2, r2, #8
 8005c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69da      	ldr	r2, [r3, #28]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0204 	bic.w	r2, r2, #4
 8005ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69d9      	ldr	r1, [r3, #28]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	691a      	ldr	r2, [r3, #16]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	61da      	str	r2, [r3, #28]
      break;
 8005cb8:	e064      	b.n	8005d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68b9      	ldr	r1, [r7, #8]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f000 faa7 	bl	8006214 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69da      	ldr	r2, [r3, #28]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69da      	ldr	r2, [r3, #28]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69d9      	ldr	r1, [r3, #28]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	021a      	lsls	r2, r3, #8
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	61da      	str	r2, [r3, #28]
      break;
 8005cfa:	e043      	b.n	8005d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68b9      	ldr	r1, [r7, #8]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fb10 	bl	8006328 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0208 	orr.w	r2, r2, #8
 8005d16:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0204 	bic.w	r2, r2, #4
 8005d26:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	691a      	ldr	r2, [r3, #16]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005d3a:	e023      	b.n	8005d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68b9      	ldr	r1, [r7, #8]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 fb54 	bl	80063f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d56:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d66:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	021a      	lsls	r2, r3, #8
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005d7c:	e002      	b.n	8005d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	75fb      	strb	r3, [r7, #23]
      break;
 8005d82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3718      	adds	r7, #24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop

08005d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a42      	ldr	r2, [pc, #264]	@ (8005eb4 <TIM_Base_SetConfig+0x11c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00f      	beq.n	8005dd0 <TIM_Base_SetConfig+0x38>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005db6:	d00b      	beq.n	8005dd0 <TIM_Base_SetConfig+0x38>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a3f      	ldr	r2, [pc, #252]	@ (8005eb8 <TIM_Base_SetConfig+0x120>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d007      	beq.n	8005dd0 <TIM_Base_SetConfig+0x38>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a3e      	ldr	r2, [pc, #248]	@ (8005ebc <TIM_Base_SetConfig+0x124>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d003      	beq.n	8005dd0 <TIM_Base_SetConfig+0x38>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a3d      	ldr	r2, [pc, #244]	@ (8005ec0 <TIM_Base_SetConfig+0x128>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d108      	bne.n	8005de2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a33      	ldr	r2, [pc, #204]	@ (8005eb4 <TIM_Base_SetConfig+0x11c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d01b      	beq.n	8005e22 <TIM_Base_SetConfig+0x8a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005df0:	d017      	beq.n	8005e22 <TIM_Base_SetConfig+0x8a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a30      	ldr	r2, [pc, #192]	@ (8005eb8 <TIM_Base_SetConfig+0x120>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d013      	beq.n	8005e22 <TIM_Base_SetConfig+0x8a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a2f      	ldr	r2, [pc, #188]	@ (8005ebc <TIM_Base_SetConfig+0x124>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00f      	beq.n	8005e22 <TIM_Base_SetConfig+0x8a>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a2e      	ldr	r2, [pc, #184]	@ (8005ec0 <TIM_Base_SetConfig+0x128>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00b      	beq.n	8005e22 <TIM_Base_SetConfig+0x8a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a2d      	ldr	r2, [pc, #180]	@ (8005ec4 <TIM_Base_SetConfig+0x12c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d007      	beq.n	8005e22 <TIM_Base_SetConfig+0x8a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a2c      	ldr	r2, [pc, #176]	@ (8005ec8 <TIM_Base_SetConfig+0x130>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d003      	beq.n	8005e22 <TIM_Base_SetConfig+0x8a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a2b      	ldr	r2, [pc, #172]	@ (8005ecc <TIM_Base_SetConfig+0x134>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d108      	bne.n	8005e34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a16      	ldr	r2, [pc, #88]	@ (8005eb4 <TIM_Base_SetConfig+0x11c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d00f      	beq.n	8005e80 <TIM_Base_SetConfig+0xe8>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a17      	ldr	r2, [pc, #92]	@ (8005ec0 <TIM_Base_SetConfig+0x128>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d00b      	beq.n	8005e80 <TIM_Base_SetConfig+0xe8>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a16      	ldr	r2, [pc, #88]	@ (8005ec4 <TIM_Base_SetConfig+0x12c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d007      	beq.n	8005e80 <TIM_Base_SetConfig+0xe8>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a15      	ldr	r2, [pc, #84]	@ (8005ec8 <TIM_Base_SetConfig+0x130>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d003      	beq.n	8005e80 <TIM_Base_SetConfig+0xe8>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a14      	ldr	r2, [pc, #80]	@ (8005ecc <TIM_Base_SetConfig+0x134>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d103      	bne.n	8005e88 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	691a      	ldr	r2, [r3, #16]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d105      	bne.n	8005ea6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	f023 0201 	bic.w	r2, r3, #1
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	611a      	str	r2, [r3, #16]
  }
}
 8005ea6:	bf00      	nop
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	40012c00 	.word	0x40012c00
 8005eb8:	40000400 	.word	0x40000400
 8005ebc:	40000800 	.word	0x40000800
 8005ec0:	40013400 	.word	0x40013400
 8005ec4:	40014000 	.word	0x40014000
 8005ec8:	40014400 	.word	0x40014400
 8005ecc:	40014800 	.word	0x40014800

08005ed0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	f023 0201 	bic.w	r2, r3, #1
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0303 	bic.w	r3, r3, #3
 8005f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f023 0302 	bic.w	r3, r3, #2
 8005f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a2c      	ldr	r2, [pc, #176]	@ (8005fdc <TIM_OC1_SetConfig+0x10c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d00f      	beq.n	8005f50 <TIM_OC1_SetConfig+0x80>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a2b      	ldr	r2, [pc, #172]	@ (8005fe0 <TIM_OC1_SetConfig+0x110>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d00b      	beq.n	8005f50 <TIM_OC1_SetConfig+0x80>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a2a      	ldr	r2, [pc, #168]	@ (8005fe4 <TIM_OC1_SetConfig+0x114>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d007      	beq.n	8005f50 <TIM_OC1_SetConfig+0x80>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a29      	ldr	r2, [pc, #164]	@ (8005fe8 <TIM_OC1_SetConfig+0x118>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d003      	beq.n	8005f50 <TIM_OC1_SetConfig+0x80>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a28      	ldr	r2, [pc, #160]	@ (8005fec <TIM_OC1_SetConfig+0x11c>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d10c      	bne.n	8005f6a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f023 0308 	bic.w	r3, r3, #8
 8005f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f023 0304 	bic.w	r3, r3, #4
 8005f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8005fdc <TIM_OC1_SetConfig+0x10c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d00f      	beq.n	8005f92 <TIM_OC1_SetConfig+0xc2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a1a      	ldr	r2, [pc, #104]	@ (8005fe0 <TIM_OC1_SetConfig+0x110>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d00b      	beq.n	8005f92 <TIM_OC1_SetConfig+0xc2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a19      	ldr	r2, [pc, #100]	@ (8005fe4 <TIM_OC1_SetConfig+0x114>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d007      	beq.n	8005f92 <TIM_OC1_SetConfig+0xc2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a18      	ldr	r2, [pc, #96]	@ (8005fe8 <TIM_OC1_SetConfig+0x118>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d003      	beq.n	8005f92 <TIM_OC1_SetConfig+0xc2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a17      	ldr	r2, [pc, #92]	@ (8005fec <TIM_OC1_SetConfig+0x11c>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d111      	bne.n	8005fb6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	621a      	str	r2, [r3, #32]
}
 8005fd0:	bf00      	nop
 8005fd2:	371c      	adds	r7, #28
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	40012c00 	.word	0x40012c00
 8005fe0:	40013400 	.word	0x40013400
 8005fe4:	40014000 	.word	0x40014000
 8005fe8:	40014400 	.word	0x40014400
 8005fec:	40014800 	.word	0x40014800

08005ff0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	f023 0210 	bic.w	r2, r3, #16
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800601e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800602a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	021b      	lsls	r3, r3, #8
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	4313      	orrs	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f023 0320 	bic.w	r3, r3, #32
 800603e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	011b      	lsls	r3, r3, #4
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	4313      	orrs	r3, r2
 800604a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a28      	ldr	r2, [pc, #160]	@ (80060f0 <TIM_OC2_SetConfig+0x100>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d003      	beq.n	800605c <TIM_OC2_SetConfig+0x6c>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a27      	ldr	r2, [pc, #156]	@ (80060f4 <TIM_OC2_SetConfig+0x104>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d10d      	bne.n	8006078 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	4313      	orrs	r3, r2
 800606e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006076:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a1d      	ldr	r2, [pc, #116]	@ (80060f0 <TIM_OC2_SetConfig+0x100>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d00f      	beq.n	80060a0 <TIM_OC2_SetConfig+0xb0>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a1c      	ldr	r2, [pc, #112]	@ (80060f4 <TIM_OC2_SetConfig+0x104>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00b      	beq.n	80060a0 <TIM_OC2_SetConfig+0xb0>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a1b      	ldr	r2, [pc, #108]	@ (80060f8 <TIM_OC2_SetConfig+0x108>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d007      	beq.n	80060a0 <TIM_OC2_SetConfig+0xb0>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a1a      	ldr	r2, [pc, #104]	@ (80060fc <TIM_OC2_SetConfig+0x10c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d003      	beq.n	80060a0 <TIM_OC2_SetConfig+0xb0>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a19      	ldr	r2, [pc, #100]	@ (8006100 <TIM_OC2_SetConfig+0x110>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d113      	bne.n	80060c8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80060a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80060ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	621a      	str	r2, [r3, #32]
}
 80060e2:	bf00      	nop
 80060e4:	371c      	adds	r7, #28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	40012c00 	.word	0x40012c00
 80060f4:	40013400 	.word	0x40013400
 80060f8:	40014000 	.word	0x40014000
 80060fc:	40014400 	.word	0x40014400
 8006100:	40014800 	.word	0x40014800

08006104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0303 	bic.w	r3, r3, #3
 800613e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	021b      	lsls	r3, r3, #8
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	4313      	orrs	r3, r2
 800615c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a27      	ldr	r2, [pc, #156]	@ (8006200 <TIM_OC3_SetConfig+0xfc>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d003      	beq.n	800616e <TIM_OC3_SetConfig+0x6a>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a26      	ldr	r2, [pc, #152]	@ (8006204 <TIM_OC3_SetConfig+0x100>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d10d      	bne.n	800618a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006174:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	021b      	lsls	r3, r3, #8
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	4313      	orrs	r3, r2
 8006180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a1c      	ldr	r2, [pc, #112]	@ (8006200 <TIM_OC3_SetConfig+0xfc>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d00f      	beq.n	80061b2 <TIM_OC3_SetConfig+0xae>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a1b      	ldr	r2, [pc, #108]	@ (8006204 <TIM_OC3_SetConfig+0x100>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d00b      	beq.n	80061b2 <TIM_OC3_SetConfig+0xae>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a1a      	ldr	r2, [pc, #104]	@ (8006208 <TIM_OC3_SetConfig+0x104>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d007      	beq.n	80061b2 <TIM_OC3_SetConfig+0xae>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a19      	ldr	r2, [pc, #100]	@ (800620c <TIM_OC3_SetConfig+0x108>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d003      	beq.n	80061b2 <TIM_OC3_SetConfig+0xae>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a18      	ldr	r2, [pc, #96]	@ (8006210 <TIM_OC3_SetConfig+0x10c>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d113      	bne.n	80061da <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	011b      	lsls	r3, r3, #4
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	685a      	ldr	r2, [r3, #4]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	621a      	str	r2, [r3, #32]
}
 80061f4:	bf00      	nop
 80061f6:	371c      	adds	r7, #28
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	40012c00 	.word	0x40012c00
 8006204:	40013400 	.word	0x40013400
 8006208:	40014000 	.word	0x40014000
 800620c:	40014400 	.word	0x40014400
 8006210:	40014800 	.word	0x40014800

08006214 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006242:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800624e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	021b      	lsls	r3, r3, #8
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	4313      	orrs	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006262:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	031b      	lsls	r3, r3, #12
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4313      	orrs	r3, r2
 800626e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a28      	ldr	r2, [pc, #160]	@ (8006314 <TIM_OC4_SetConfig+0x100>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d003      	beq.n	8006280 <TIM_OC4_SetConfig+0x6c>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a27      	ldr	r2, [pc, #156]	@ (8006318 <TIM_OC4_SetConfig+0x104>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d10d      	bne.n	800629c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	031b      	lsls	r3, r3, #12
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800629a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a1d      	ldr	r2, [pc, #116]	@ (8006314 <TIM_OC4_SetConfig+0x100>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00f      	beq.n	80062c4 <TIM_OC4_SetConfig+0xb0>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a1c      	ldr	r2, [pc, #112]	@ (8006318 <TIM_OC4_SetConfig+0x104>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d00b      	beq.n	80062c4 <TIM_OC4_SetConfig+0xb0>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a1b      	ldr	r2, [pc, #108]	@ (800631c <TIM_OC4_SetConfig+0x108>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d007      	beq.n	80062c4 <TIM_OC4_SetConfig+0xb0>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a1a      	ldr	r2, [pc, #104]	@ (8006320 <TIM_OC4_SetConfig+0x10c>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d003      	beq.n	80062c4 <TIM_OC4_SetConfig+0xb0>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a19      	ldr	r2, [pc, #100]	@ (8006324 <TIM_OC4_SetConfig+0x110>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d113      	bne.n	80062ec <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062ca:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80062d2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	019b      	lsls	r3, r3, #6
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4313      	orrs	r3, r2
 80062de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	019b      	lsls	r3, r3, #6
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	621a      	str	r2, [r3, #32]
}
 8006306:	bf00      	nop
 8006308:	371c      	adds	r7, #28
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	40012c00 	.word	0x40012c00
 8006318:	40013400 	.word	0x40013400
 800631c:	40014000 	.word	0x40014000
 8006320:	40014400 	.word	0x40014400
 8006324:	40014800 	.word	0x40014800

08006328 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006328:	b480      	push	{r7}
 800632a:	b087      	sub	sp, #28
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800634e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800635a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800636c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	041b      	lsls	r3, r3, #16
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	4313      	orrs	r3, r2
 8006378:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a17      	ldr	r2, [pc, #92]	@ (80063dc <TIM_OC5_SetConfig+0xb4>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d00f      	beq.n	80063a2 <TIM_OC5_SetConfig+0x7a>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a16      	ldr	r2, [pc, #88]	@ (80063e0 <TIM_OC5_SetConfig+0xb8>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00b      	beq.n	80063a2 <TIM_OC5_SetConfig+0x7a>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a15      	ldr	r2, [pc, #84]	@ (80063e4 <TIM_OC5_SetConfig+0xbc>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d007      	beq.n	80063a2 <TIM_OC5_SetConfig+0x7a>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a14      	ldr	r2, [pc, #80]	@ (80063e8 <TIM_OC5_SetConfig+0xc0>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d003      	beq.n	80063a2 <TIM_OC5_SetConfig+0x7a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a13      	ldr	r2, [pc, #76]	@ (80063ec <TIM_OC5_SetConfig+0xc4>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d109      	bne.n	80063b6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	021b      	lsls	r3, r3, #8
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	621a      	str	r2, [r3, #32]
}
 80063d0:	bf00      	nop
 80063d2:	371c      	adds	r7, #28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	40012c00 	.word	0x40012c00
 80063e0:	40013400 	.word	0x40013400
 80063e4:	40014000 	.word	0x40014000
 80063e8:	40014400 	.word	0x40014400
 80063ec:	40014800 	.word	0x40014800

080063f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800641e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	021b      	lsls	r3, r3, #8
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	4313      	orrs	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006436:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	051b      	lsls	r3, r3, #20
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	4313      	orrs	r3, r2
 8006442:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a18      	ldr	r2, [pc, #96]	@ (80064a8 <TIM_OC6_SetConfig+0xb8>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d00f      	beq.n	800646c <TIM_OC6_SetConfig+0x7c>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a17      	ldr	r2, [pc, #92]	@ (80064ac <TIM_OC6_SetConfig+0xbc>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d00b      	beq.n	800646c <TIM_OC6_SetConfig+0x7c>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a16      	ldr	r2, [pc, #88]	@ (80064b0 <TIM_OC6_SetConfig+0xc0>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d007      	beq.n	800646c <TIM_OC6_SetConfig+0x7c>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a15      	ldr	r2, [pc, #84]	@ (80064b4 <TIM_OC6_SetConfig+0xc4>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d003      	beq.n	800646c <TIM_OC6_SetConfig+0x7c>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a14      	ldr	r2, [pc, #80]	@ (80064b8 <TIM_OC6_SetConfig+0xc8>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d109      	bne.n	8006480 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006472:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	029b      	lsls	r3, r3, #10
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	4313      	orrs	r3, r2
 800647e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	621a      	str	r2, [r3, #32]
}
 800649a:	bf00      	nop
 800649c:	371c      	adds	r7, #28
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	40012c00 	.word	0x40012c00
 80064ac:	40013400 	.word	0x40013400
 80064b0:	40014000 	.word	0x40014000
 80064b4:	40014400 	.word	0x40014400
 80064b8:	40014800 	.word	0x40014800

080064bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f003 031f 	and.w	r3, r3, #31
 80064ce:	2201      	movs	r2, #1
 80064d0:	fa02 f303 	lsl.w	r3, r2, r3
 80064d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6a1a      	ldr	r2, [r3, #32]
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	43db      	mvns	r3, r3
 80064de:	401a      	ands	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a1a      	ldr	r2, [r3, #32]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f003 031f 	and.w	r3, r3, #31
 80064ee:	6879      	ldr	r1, [r7, #4]
 80064f0:	fa01 f303 	lsl.w	r3, r1, r3
 80064f4:	431a      	orrs	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	621a      	str	r2, [r3, #32]
}
 80064fa:	bf00      	nop
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
	...

08006508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006518:	2b01      	cmp	r3, #1
 800651a:	d101      	bne.n	8006520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800651c:	2302      	movs	r3, #2
 800651e:	e065      	b.n	80065ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a2c      	ldr	r2, [pc, #176]	@ (80065f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d004      	beq.n	8006554 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a2b      	ldr	r2, [pc, #172]	@ (80065fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d108      	bne.n	8006566 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800655a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800656c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006570:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	4313      	orrs	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a1b      	ldr	r2, [pc, #108]	@ (80065f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d018      	beq.n	80065c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006596:	d013      	beq.n	80065c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a18      	ldr	r2, [pc, #96]	@ (8006600 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d00e      	beq.n	80065c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a17      	ldr	r2, [pc, #92]	@ (8006604 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d009      	beq.n	80065c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a12      	ldr	r2, [pc, #72]	@ (80065fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d004      	beq.n	80065c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a13      	ldr	r2, [pc, #76]	@ (8006608 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d10c      	bne.n	80065da <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	40012c00 	.word	0x40012c00
 80065fc:	40013400 	.word	0x40013400
 8006600:	40000400 	.word	0x40000400
 8006604:	40000800 	.word	0x40000800
 8006608:	40014000 	.word	0x40014000

0800660c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006616:	2300      	movs	r3, #0
 8006618:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006620:	2b01      	cmp	r3, #1
 8006622:	d101      	bne.n	8006628 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006624:	2302      	movs	r3, #2
 8006626:	e073      	b.n	8006710 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	4313      	orrs	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4313      	orrs	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	4313      	orrs	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	4313      	orrs	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800668e:	4313      	orrs	r3, r2
 8006690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	041b      	lsls	r3, r3, #16
 800669e:	4313      	orrs	r3, r2
 80066a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a19      	ldr	r2, [pc, #100]	@ (800671c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d004      	beq.n	80066c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a18      	ldr	r2, [pc, #96]	@ (8006720 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d11c      	bne.n	80066fe <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ce:	051b      	lsls	r3, r3, #20
 80066d0:	4313      	orrs	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ec:	4313      	orrs	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fa:	4313      	orrs	r3, r2
 80066fc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	40012c00 	.word	0x40012c00
 8006720:	40013400 	.word	0x40013400

08006724 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e042      	b.n	80067bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800673c:	2b00      	cmp	r3, #0
 800673e:	d106      	bne.n	800674e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7fb fd29 	bl	80021a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2224      	movs	r2, #36	@ 0x24
 8006752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 0201 	bic.w	r2, r2, #1
 8006764:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800676a:	2b00      	cmp	r3, #0
 800676c:	d002      	beq.n	8006774 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fb82 	bl	8006e78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f8b3 	bl	80068e0 <UART_SetConfig>
 800677a:	4603      	mov	r3, r0
 800677c:	2b01      	cmp	r3, #1
 800677e:	d101      	bne.n	8006784 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e01b      	b.n	80067bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006792:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689a      	ldr	r2, [r3, #8]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80067a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0201 	orr.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 fc01 	bl	8006fbc <UART_CheckIdleState>
 80067ba:	4603      	mov	r3, r0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08a      	sub	sp, #40	@ 0x28
 80067c8:	af02      	add	r7, sp, #8
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	603b      	str	r3, [r7, #0]
 80067d0:	4613      	mov	r3, r2
 80067d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067da:	2b20      	cmp	r3, #32
 80067dc:	d17b      	bne.n	80068d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <HAL_UART_Transmit+0x26>
 80067e4:	88fb      	ldrh	r3, [r7, #6]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e074      	b.n	80068d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2221      	movs	r2, #33	@ 0x21
 80067fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067fe:	f7fb fdf5 	bl	80023ec <HAL_GetTick>
 8006802:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	88fa      	ldrh	r2, [r7, #6]
 8006808:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	88fa      	ldrh	r2, [r7, #6]
 8006810:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800681c:	d108      	bne.n	8006830 <HAL_UART_Transmit+0x6c>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d104      	bne.n	8006830 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006826:	2300      	movs	r3, #0
 8006828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	61bb      	str	r3, [r7, #24]
 800682e:	e003      	b.n	8006838 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006834:	2300      	movs	r3, #0
 8006836:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006838:	e030      	b.n	800689c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2200      	movs	r2, #0
 8006842:	2180      	movs	r1, #128	@ 0x80
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 fc63 	bl	8007110 <UART_WaitOnFlagUntilTimeout>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d005      	beq.n	800685c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2220      	movs	r2, #32
 8006854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e03d      	b.n	80068d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10b      	bne.n	800687a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006870:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	3302      	adds	r3, #2
 8006876:	61bb      	str	r3, [r7, #24]
 8006878:	e007      	b.n	800688a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	781a      	ldrb	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	3301      	adds	r3, #1
 8006888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006890:	b29b      	uxth	r3, r3
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1c8      	bne.n	800683a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	2200      	movs	r2, #0
 80068b0:	2140      	movs	r1, #64	@ 0x40
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f000 fc2c 	bl	8007110 <UART_WaitOnFlagUntilTimeout>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d005      	beq.n	80068ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2220      	movs	r2, #32
 80068c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e006      	b.n	80068d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2220      	movs	r2, #32
 80068ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	e000      	b.n	80068d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80068d6:	2302      	movs	r3, #2
  }
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3720      	adds	r7, #32
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068e4:	b08c      	sub	sp, #48	@ 0x30
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	431a      	orrs	r2, r3
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	431a      	orrs	r2, r3
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	69db      	ldr	r3, [r3, #28]
 8006904:	4313      	orrs	r3, r2
 8006906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	4bab      	ldr	r3, [pc, #684]	@ (8006bbc <UART_SetConfig+0x2dc>)
 8006910:	4013      	ands	r3, r2
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	6812      	ldr	r2, [r2, #0]
 8006916:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006918:	430b      	orrs	r3, r1
 800691a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	68da      	ldr	r2, [r3, #12]
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4aa0      	ldr	r2, [pc, #640]	@ (8006bc0 <UART_SetConfig+0x2e0>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d004      	beq.n	800694c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006948:	4313      	orrs	r3, r2
 800694a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006956:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	6812      	ldr	r2, [r2, #0]
 800695e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006960:	430b      	orrs	r3, r1
 8006962:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696a:	f023 010f 	bic.w	r1, r3, #15
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a91      	ldr	r2, [pc, #580]	@ (8006bc4 <UART_SetConfig+0x2e4>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d125      	bne.n	80069d0 <UART_SetConfig+0xf0>
 8006984:	4b90      	ldr	r3, [pc, #576]	@ (8006bc8 <UART_SetConfig+0x2e8>)
 8006986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800698a:	f003 0303 	and.w	r3, r3, #3
 800698e:	2b03      	cmp	r3, #3
 8006990:	d81a      	bhi.n	80069c8 <UART_SetConfig+0xe8>
 8006992:	a201      	add	r2, pc, #4	@ (adr r2, 8006998 <UART_SetConfig+0xb8>)
 8006994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006998:	080069a9 	.word	0x080069a9
 800699c:	080069b9 	.word	0x080069b9
 80069a0:	080069b1 	.word	0x080069b1
 80069a4:	080069c1 	.word	0x080069c1
 80069a8:	2301      	movs	r3, #1
 80069aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ae:	e0d6      	b.n	8006b5e <UART_SetConfig+0x27e>
 80069b0:	2302      	movs	r3, #2
 80069b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069b6:	e0d2      	b.n	8006b5e <UART_SetConfig+0x27e>
 80069b8:	2304      	movs	r3, #4
 80069ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069be:	e0ce      	b.n	8006b5e <UART_SetConfig+0x27e>
 80069c0:	2308      	movs	r3, #8
 80069c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069c6:	e0ca      	b.n	8006b5e <UART_SetConfig+0x27e>
 80069c8:	2310      	movs	r3, #16
 80069ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ce:	e0c6      	b.n	8006b5e <UART_SetConfig+0x27e>
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a7d      	ldr	r2, [pc, #500]	@ (8006bcc <UART_SetConfig+0x2ec>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d138      	bne.n	8006a4c <UART_SetConfig+0x16c>
 80069da:	4b7b      	ldr	r3, [pc, #492]	@ (8006bc8 <UART_SetConfig+0x2e8>)
 80069dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069e0:	f003 030c 	and.w	r3, r3, #12
 80069e4:	2b0c      	cmp	r3, #12
 80069e6:	d82d      	bhi.n	8006a44 <UART_SetConfig+0x164>
 80069e8:	a201      	add	r2, pc, #4	@ (adr r2, 80069f0 <UART_SetConfig+0x110>)
 80069ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ee:	bf00      	nop
 80069f0:	08006a25 	.word	0x08006a25
 80069f4:	08006a45 	.word	0x08006a45
 80069f8:	08006a45 	.word	0x08006a45
 80069fc:	08006a45 	.word	0x08006a45
 8006a00:	08006a35 	.word	0x08006a35
 8006a04:	08006a45 	.word	0x08006a45
 8006a08:	08006a45 	.word	0x08006a45
 8006a0c:	08006a45 	.word	0x08006a45
 8006a10:	08006a2d 	.word	0x08006a2d
 8006a14:	08006a45 	.word	0x08006a45
 8006a18:	08006a45 	.word	0x08006a45
 8006a1c:	08006a45 	.word	0x08006a45
 8006a20:	08006a3d 	.word	0x08006a3d
 8006a24:	2300      	movs	r3, #0
 8006a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a2a:	e098      	b.n	8006b5e <UART_SetConfig+0x27e>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a32:	e094      	b.n	8006b5e <UART_SetConfig+0x27e>
 8006a34:	2304      	movs	r3, #4
 8006a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a3a:	e090      	b.n	8006b5e <UART_SetConfig+0x27e>
 8006a3c:	2308      	movs	r3, #8
 8006a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a42:	e08c      	b.n	8006b5e <UART_SetConfig+0x27e>
 8006a44:	2310      	movs	r3, #16
 8006a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a4a:	e088      	b.n	8006b5e <UART_SetConfig+0x27e>
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a5f      	ldr	r2, [pc, #380]	@ (8006bd0 <UART_SetConfig+0x2f0>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d125      	bne.n	8006aa2 <UART_SetConfig+0x1c2>
 8006a56:	4b5c      	ldr	r3, [pc, #368]	@ (8006bc8 <UART_SetConfig+0x2e8>)
 8006a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a5c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a60:	2b30      	cmp	r3, #48	@ 0x30
 8006a62:	d016      	beq.n	8006a92 <UART_SetConfig+0x1b2>
 8006a64:	2b30      	cmp	r3, #48	@ 0x30
 8006a66:	d818      	bhi.n	8006a9a <UART_SetConfig+0x1ba>
 8006a68:	2b20      	cmp	r3, #32
 8006a6a:	d00a      	beq.n	8006a82 <UART_SetConfig+0x1a2>
 8006a6c:	2b20      	cmp	r3, #32
 8006a6e:	d814      	bhi.n	8006a9a <UART_SetConfig+0x1ba>
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d002      	beq.n	8006a7a <UART_SetConfig+0x19a>
 8006a74:	2b10      	cmp	r3, #16
 8006a76:	d008      	beq.n	8006a8a <UART_SetConfig+0x1aa>
 8006a78:	e00f      	b.n	8006a9a <UART_SetConfig+0x1ba>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a80:	e06d      	b.n	8006b5e <UART_SetConfig+0x27e>
 8006a82:	2302      	movs	r3, #2
 8006a84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a88:	e069      	b.n	8006b5e <UART_SetConfig+0x27e>
 8006a8a:	2304      	movs	r3, #4
 8006a8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a90:	e065      	b.n	8006b5e <UART_SetConfig+0x27e>
 8006a92:	2308      	movs	r3, #8
 8006a94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a98:	e061      	b.n	8006b5e <UART_SetConfig+0x27e>
 8006a9a:	2310      	movs	r3, #16
 8006a9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aa0:	e05d      	b.n	8006b5e <UART_SetConfig+0x27e>
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a4b      	ldr	r2, [pc, #300]	@ (8006bd4 <UART_SetConfig+0x2f4>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d125      	bne.n	8006af8 <UART_SetConfig+0x218>
 8006aac:	4b46      	ldr	r3, [pc, #280]	@ (8006bc8 <UART_SetConfig+0x2e8>)
 8006aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ab2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006ab6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ab8:	d016      	beq.n	8006ae8 <UART_SetConfig+0x208>
 8006aba:	2bc0      	cmp	r3, #192	@ 0xc0
 8006abc:	d818      	bhi.n	8006af0 <UART_SetConfig+0x210>
 8006abe:	2b80      	cmp	r3, #128	@ 0x80
 8006ac0:	d00a      	beq.n	8006ad8 <UART_SetConfig+0x1f8>
 8006ac2:	2b80      	cmp	r3, #128	@ 0x80
 8006ac4:	d814      	bhi.n	8006af0 <UART_SetConfig+0x210>
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d002      	beq.n	8006ad0 <UART_SetConfig+0x1f0>
 8006aca:	2b40      	cmp	r3, #64	@ 0x40
 8006acc:	d008      	beq.n	8006ae0 <UART_SetConfig+0x200>
 8006ace:	e00f      	b.n	8006af0 <UART_SetConfig+0x210>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ad6:	e042      	b.n	8006b5e <UART_SetConfig+0x27e>
 8006ad8:	2302      	movs	r3, #2
 8006ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ade:	e03e      	b.n	8006b5e <UART_SetConfig+0x27e>
 8006ae0:	2304      	movs	r3, #4
 8006ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ae6:	e03a      	b.n	8006b5e <UART_SetConfig+0x27e>
 8006ae8:	2308      	movs	r3, #8
 8006aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aee:	e036      	b.n	8006b5e <UART_SetConfig+0x27e>
 8006af0:	2310      	movs	r3, #16
 8006af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006af6:	e032      	b.n	8006b5e <UART_SetConfig+0x27e>
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a30      	ldr	r2, [pc, #192]	@ (8006bc0 <UART_SetConfig+0x2e0>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d12a      	bne.n	8006b58 <UART_SetConfig+0x278>
 8006b02:	4b31      	ldr	r3, [pc, #196]	@ (8006bc8 <UART_SetConfig+0x2e8>)
 8006b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b10:	d01a      	beq.n	8006b48 <UART_SetConfig+0x268>
 8006b12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b16:	d81b      	bhi.n	8006b50 <UART_SetConfig+0x270>
 8006b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b1c:	d00c      	beq.n	8006b38 <UART_SetConfig+0x258>
 8006b1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b22:	d815      	bhi.n	8006b50 <UART_SetConfig+0x270>
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d003      	beq.n	8006b30 <UART_SetConfig+0x250>
 8006b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b2c:	d008      	beq.n	8006b40 <UART_SetConfig+0x260>
 8006b2e:	e00f      	b.n	8006b50 <UART_SetConfig+0x270>
 8006b30:	2300      	movs	r3, #0
 8006b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b36:	e012      	b.n	8006b5e <UART_SetConfig+0x27e>
 8006b38:	2302      	movs	r3, #2
 8006b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b3e:	e00e      	b.n	8006b5e <UART_SetConfig+0x27e>
 8006b40:	2304      	movs	r3, #4
 8006b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b46:	e00a      	b.n	8006b5e <UART_SetConfig+0x27e>
 8006b48:	2308      	movs	r3, #8
 8006b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b4e:	e006      	b.n	8006b5e <UART_SetConfig+0x27e>
 8006b50:	2310      	movs	r3, #16
 8006b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b56:	e002      	b.n	8006b5e <UART_SetConfig+0x27e>
 8006b58:	2310      	movs	r3, #16
 8006b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a17      	ldr	r2, [pc, #92]	@ (8006bc0 <UART_SetConfig+0x2e0>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	f040 80a8 	bne.w	8006cba <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b6e:	2b08      	cmp	r3, #8
 8006b70:	d834      	bhi.n	8006bdc <UART_SetConfig+0x2fc>
 8006b72:	a201      	add	r2, pc, #4	@ (adr r2, 8006b78 <UART_SetConfig+0x298>)
 8006b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b78:	08006b9d 	.word	0x08006b9d
 8006b7c:	08006bdd 	.word	0x08006bdd
 8006b80:	08006ba5 	.word	0x08006ba5
 8006b84:	08006bdd 	.word	0x08006bdd
 8006b88:	08006bab 	.word	0x08006bab
 8006b8c:	08006bdd 	.word	0x08006bdd
 8006b90:	08006bdd 	.word	0x08006bdd
 8006b94:	08006bdd 	.word	0x08006bdd
 8006b98:	08006bb3 	.word	0x08006bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b9c:	f7fd fc54 	bl	8004448 <HAL_RCC_GetPCLK1Freq>
 8006ba0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ba2:	e021      	b.n	8006be8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8006bd8 <UART_SetConfig+0x2f8>)
 8006ba6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ba8:	e01e      	b.n	8006be8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006baa:	f7fd fbe1 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 8006bae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bb0:	e01a      	b.n	8006be8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006bb8:	e016      	b.n	8006be8 <UART_SetConfig+0x308>
 8006bba:	bf00      	nop
 8006bbc:	cfff69f3 	.word	0xcfff69f3
 8006bc0:	40008000 	.word	0x40008000
 8006bc4:	40013800 	.word	0x40013800
 8006bc8:	40021000 	.word	0x40021000
 8006bcc:	40004400 	.word	0x40004400
 8006bd0:	40004800 	.word	0x40004800
 8006bd4:	40004c00 	.word	0x40004c00
 8006bd8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006be6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 812a 	beq.w	8006e44 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf4:	4a9e      	ldr	r2, [pc, #632]	@ (8006e70 <UART_SetConfig+0x590>)
 8006bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c02:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	4613      	mov	r3, r2
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	4413      	add	r3, r2
 8006c0e:	69ba      	ldr	r2, [r7, #24]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d305      	bcc.n	8006c20 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d903      	bls.n	8006c28 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c26:	e10d      	b.n	8006e44 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	60bb      	str	r3, [r7, #8]
 8006c2e:	60fa      	str	r2, [r7, #12]
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c34:	4a8e      	ldr	r2, [pc, #568]	@ (8006e70 <UART_SetConfig+0x590>)
 8006c36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	603b      	str	r3, [r7, #0]
 8006c40:	607a      	str	r2, [r7, #4]
 8006c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c4a:	f7fa f845 	bl	8000cd8 <__aeabi_uldivmod>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	4610      	mov	r0, r2
 8006c54:	4619      	mov	r1, r3
 8006c56:	f04f 0200 	mov.w	r2, #0
 8006c5a:	f04f 0300 	mov.w	r3, #0
 8006c5e:	020b      	lsls	r3, r1, #8
 8006c60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c64:	0202      	lsls	r2, r0, #8
 8006c66:	6979      	ldr	r1, [r7, #20]
 8006c68:	6849      	ldr	r1, [r1, #4]
 8006c6a:	0849      	lsrs	r1, r1, #1
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	460c      	mov	r4, r1
 8006c70:	4605      	mov	r5, r0
 8006c72:	eb12 0804 	adds.w	r8, r2, r4
 8006c76:	eb43 0905 	adc.w	r9, r3, r5
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	469a      	mov	sl, r3
 8006c82:	4693      	mov	fp, r2
 8006c84:	4652      	mov	r2, sl
 8006c86:	465b      	mov	r3, fp
 8006c88:	4640      	mov	r0, r8
 8006c8a:	4649      	mov	r1, r9
 8006c8c:	f7fa f824 	bl	8000cd8 <__aeabi_uldivmod>
 8006c90:	4602      	mov	r2, r0
 8006c92:	460b      	mov	r3, r1
 8006c94:	4613      	mov	r3, r2
 8006c96:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c9e:	d308      	bcc.n	8006cb2 <UART_SetConfig+0x3d2>
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ca6:	d204      	bcs.n	8006cb2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6a3a      	ldr	r2, [r7, #32]
 8006cae:	60da      	str	r2, [r3, #12]
 8006cb0:	e0c8      	b.n	8006e44 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006cb8:	e0c4      	b.n	8006e44 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cc2:	d167      	bne.n	8006d94 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006cc4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006cc8:	2b08      	cmp	r3, #8
 8006cca:	d828      	bhi.n	8006d1e <UART_SetConfig+0x43e>
 8006ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8006cd4 <UART_SetConfig+0x3f4>)
 8006cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd2:	bf00      	nop
 8006cd4:	08006cf9 	.word	0x08006cf9
 8006cd8:	08006d01 	.word	0x08006d01
 8006cdc:	08006d09 	.word	0x08006d09
 8006ce0:	08006d1f 	.word	0x08006d1f
 8006ce4:	08006d0f 	.word	0x08006d0f
 8006ce8:	08006d1f 	.word	0x08006d1f
 8006cec:	08006d1f 	.word	0x08006d1f
 8006cf0:	08006d1f 	.word	0x08006d1f
 8006cf4:	08006d17 	.word	0x08006d17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cf8:	f7fd fba6 	bl	8004448 <HAL_RCC_GetPCLK1Freq>
 8006cfc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cfe:	e014      	b.n	8006d2a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d00:	f7fd fbb8 	bl	8004474 <HAL_RCC_GetPCLK2Freq>
 8006d04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d06:	e010      	b.n	8006d2a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d08:	4b5a      	ldr	r3, [pc, #360]	@ (8006e74 <UART_SetConfig+0x594>)
 8006d0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d0c:	e00d      	b.n	8006d2a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d0e:	f7fd fb2f 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 8006d12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d14:	e009      	b.n	8006d2a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d1c:	e005      	b.n	8006d2a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 8089 	beq.w	8006e44 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d36:	4a4e      	ldr	r2, [pc, #312]	@ (8006e70 <UART_SetConfig+0x590>)
 8006d38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d40:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d44:	005a      	lsls	r2, r3, #1
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	085b      	lsrs	r3, r3, #1
 8006d4c:	441a      	add	r2, r3
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	2b0f      	cmp	r3, #15
 8006d5c:	d916      	bls.n	8006d8c <UART_SetConfig+0x4ac>
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d64:	d212      	bcs.n	8006d8c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	f023 030f 	bic.w	r3, r3, #15
 8006d6e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d70:	6a3b      	ldr	r3, [r7, #32]
 8006d72:	085b      	lsrs	r3, r3, #1
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	f003 0307 	and.w	r3, r3, #7
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	8bfb      	ldrh	r3, [r7, #30]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	8bfa      	ldrh	r2, [r7, #30]
 8006d88:	60da      	str	r2, [r3, #12]
 8006d8a:	e05b      	b.n	8006e44 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d92:	e057      	b.n	8006e44 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d94:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d98:	2b08      	cmp	r3, #8
 8006d9a:	d828      	bhi.n	8006dee <UART_SetConfig+0x50e>
 8006d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8006da4 <UART_SetConfig+0x4c4>)
 8006d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da2:	bf00      	nop
 8006da4:	08006dc9 	.word	0x08006dc9
 8006da8:	08006dd1 	.word	0x08006dd1
 8006dac:	08006dd9 	.word	0x08006dd9
 8006db0:	08006def 	.word	0x08006def
 8006db4:	08006ddf 	.word	0x08006ddf
 8006db8:	08006def 	.word	0x08006def
 8006dbc:	08006def 	.word	0x08006def
 8006dc0:	08006def 	.word	0x08006def
 8006dc4:	08006de7 	.word	0x08006de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dc8:	f7fd fb3e 	bl	8004448 <HAL_RCC_GetPCLK1Freq>
 8006dcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dce:	e014      	b.n	8006dfa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dd0:	f7fd fb50 	bl	8004474 <HAL_RCC_GetPCLK2Freq>
 8006dd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dd6:	e010      	b.n	8006dfa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dd8:	4b26      	ldr	r3, [pc, #152]	@ (8006e74 <UART_SetConfig+0x594>)
 8006dda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ddc:	e00d      	b.n	8006dfa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dde:	f7fd fac7 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 8006de2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006de4:	e009      	b.n	8006dfa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006dec:	e005      	b.n	8006dfa <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006df8:	bf00      	nop
    }

    if (pclk != 0U)
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d021      	beq.n	8006e44 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e04:	4a1a      	ldr	r2, [pc, #104]	@ (8006e70 <UART_SetConfig+0x590>)
 8006e06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	085b      	lsrs	r3, r3, #1
 8006e18:	441a      	add	r2, r3
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	2b0f      	cmp	r3, #15
 8006e28:	d909      	bls.n	8006e3e <UART_SetConfig+0x55e>
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e30:	d205      	bcs.n	8006e3e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	60da      	str	r2, [r3, #12]
 8006e3c:	e002      	b.n	8006e44 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	2200      	movs	r2, #0
 8006e58:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006e60:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3730      	adds	r7, #48	@ 0x30
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e6e:	bf00      	nop
 8006e70:	0800cfd0 	.word	0x0800cfd0
 8006e74:	00f42400 	.word	0x00f42400

08006e78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e84:	f003 0308 	and.w	r3, r3, #8
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00a      	beq.n	8006ea2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00a      	beq.n	8006ee6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eea:	f003 0304 	and.w	r3, r3, #4
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00a      	beq.n	8006f08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	430a      	orrs	r2, r1
 8006f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f0c:	f003 0310 	and.w	r3, r3, #16
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00a      	beq.n	8006f2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f2e:	f003 0320 	and.w	r3, r3, #32
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00a      	beq.n	8006f4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d01a      	beq.n	8006f8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f76:	d10a      	bne.n	8006f8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00a      	beq.n	8006fb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	430a      	orrs	r2, r1
 8006fae:	605a      	str	r2, [r3, #4]
  }
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b098      	sub	sp, #96	@ 0x60
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fcc:	f7fb fa0e 	bl	80023ec <HAL_GetTick>
 8006fd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0308 	and.w	r3, r3, #8
 8006fdc:	2b08      	cmp	r3, #8
 8006fde:	d12f      	bne.n	8007040 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fe0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f88e 	bl	8007110 <UART_WaitOnFlagUntilTimeout>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d022      	beq.n	8007040 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007002:	e853 3f00 	ldrex	r3, [r3]
 8007006:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800700a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800700e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	461a      	mov	r2, r3
 8007016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007018:	647b      	str	r3, [r7, #68]	@ 0x44
 800701a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800701e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007020:	e841 2300 	strex	r3, r2, [r1]
 8007024:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1e6      	bne.n	8006ffa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2220      	movs	r2, #32
 8007030:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e063      	b.n	8007108 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0304 	and.w	r3, r3, #4
 800704a:	2b04      	cmp	r3, #4
 800704c:	d149      	bne.n	80070e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800704e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007056:	2200      	movs	r2, #0
 8007058:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f857 	bl	8007110 <UART_WaitOnFlagUntilTimeout>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d03c      	beq.n	80070e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007070:	e853 3f00 	ldrex	r3, [r3]
 8007074:	623b      	str	r3, [r7, #32]
   return(result);
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800707c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	461a      	mov	r2, r3
 8007084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007086:	633b      	str	r3, [r7, #48]	@ 0x30
 8007088:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800708c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800708e:	e841 2300 	strex	r3, r2, [r1]
 8007092:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1e6      	bne.n	8007068 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	3308      	adds	r3, #8
 80070a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	e853 3f00 	ldrex	r3, [r3]
 80070a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f023 0301 	bic.w	r3, r3, #1
 80070b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	3308      	adds	r3, #8
 80070b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070ba:	61fa      	str	r2, [r7, #28]
 80070bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070be:	69b9      	ldr	r1, [r7, #24]
 80070c0:	69fa      	ldr	r2, [r7, #28]
 80070c2:	e841 2300 	strex	r3, r2, [r1]
 80070c6:	617b      	str	r3, [r7, #20]
   return(result);
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1e5      	bne.n	800709a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2220      	movs	r2, #32
 80070d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e012      	b.n	8007108 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2220      	movs	r2, #32
 80070e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2220      	movs	r2, #32
 80070ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3758      	adds	r7, #88	@ 0x58
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	603b      	str	r3, [r7, #0]
 800711c:	4613      	mov	r3, r2
 800711e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007120:	e04f      	b.n	80071c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007128:	d04b      	beq.n	80071c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800712a:	f7fb f95f 	bl	80023ec <HAL_GetTick>
 800712e:	4602      	mov	r2, r0
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	429a      	cmp	r2, r3
 8007138:	d302      	bcc.n	8007140 <UART_WaitOnFlagUntilTimeout+0x30>
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d101      	bne.n	8007144 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e04e      	b.n	80071e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0304 	and.w	r3, r3, #4
 800714e:	2b00      	cmp	r3, #0
 8007150:	d037      	beq.n	80071c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	2b80      	cmp	r3, #128	@ 0x80
 8007156:	d034      	beq.n	80071c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	2b40      	cmp	r3, #64	@ 0x40
 800715c:	d031      	beq.n	80071c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	69db      	ldr	r3, [r3, #28]
 8007164:	f003 0308 	and.w	r3, r3, #8
 8007168:	2b08      	cmp	r3, #8
 800716a:	d110      	bne.n	800718e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2208      	movs	r2, #8
 8007172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 f838 	bl	80071ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2208      	movs	r2, #8
 800717e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e029      	b.n	80071e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800719c:	d111      	bne.n	80071c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f000 f81e 	bl	80071ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2220      	movs	r2, #32
 80071b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e00f      	b.n	80071e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	69da      	ldr	r2, [r3, #28]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	4013      	ands	r3, r2
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	bf0c      	ite	eq
 80071d2:	2301      	moveq	r3, #1
 80071d4:	2300      	movne	r3, #0
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	461a      	mov	r2, r3
 80071da:	79fb      	ldrb	r3, [r7, #7]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d0a0      	beq.n	8007122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b095      	sub	sp, #84	@ 0x54
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071fa:	e853 3f00 	ldrex	r3, [r3]
 80071fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007202:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	461a      	mov	r2, r3
 800720e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007210:	643b      	str	r3, [r7, #64]	@ 0x40
 8007212:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007214:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007216:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007218:	e841 2300 	strex	r3, r2, [r1]
 800721c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800721e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1e6      	bne.n	80071f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3308      	adds	r3, #8
 800722a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	e853 3f00 	ldrex	r3, [r3]
 8007232:	61fb      	str	r3, [r7, #28]
   return(result);
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800723a:	f023 0301 	bic.w	r3, r3, #1
 800723e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3308      	adds	r3, #8
 8007246:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007248:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800724a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800724e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007250:	e841 2300 	strex	r3, r2, [r1]
 8007254:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1e3      	bne.n	8007224 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007260:	2b01      	cmp	r3, #1
 8007262:	d118      	bne.n	8007296 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	e853 3f00 	ldrex	r3, [r3]
 8007270:	60bb      	str	r3, [r7, #8]
   return(result);
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	f023 0310 	bic.w	r3, r3, #16
 8007278:	647b      	str	r3, [r7, #68]	@ 0x44
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007282:	61bb      	str	r3, [r7, #24]
 8007284:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007286:	6979      	ldr	r1, [r7, #20]
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	e841 2300 	strex	r3, r2, [r1]
 800728e:	613b      	str	r3, [r7, #16]
   return(result);
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1e6      	bne.n	8007264 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2220      	movs	r2, #32
 800729a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80072aa:	bf00      	nop
 80072ac:	3754      	adds	r7, #84	@ 0x54
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b085      	sub	sp, #20
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d101      	bne.n	80072cc <HAL_UARTEx_DisableFifoMode+0x16>
 80072c8:	2302      	movs	r3, #2
 80072ca:	e027      	b.n	800731c <HAL_UARTEx_DisableFifoMode+0x66>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2224      	movs	r2, #36	@ 0x24
 80072d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f022 0201 	bic.w	r2, r2, #1
 80072f2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80072fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2220      	movs	r2, #32
 800730e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3714      	adds	r7, #20
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007338:	2b01      	cmp	r3, #1
 800733a:	d101      	bne.n	8007340 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800733c:	2302      	movs	r3, #2
 800733e:	e02d      	b.n	800739c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2224      	movs	r2, #36	@ 0x24
 800734c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f022 0201 	bic.w	r2, r2, #1
 8007366:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	683a      	ldr	r2, [r7, #0]
 8007378:	430a      	orrs	r2, r1
 800737a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f84f 	bl	8007420 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2220      	movs	r2, #32
 800738e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d101      	bne.n	80073bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80073b8:	2302      	movs	r3, #2
 80073ba:	e02d      	b.n	8007418 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2224      	movs	r2, #36	@ 0x24
 80073c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 0201 	bic.w	r2, r2, #1
 80073e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	430a      	orrs	r2, r1
 80073f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f811 	bl	8007420 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2220      	movs	r2, #32
 800740a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800742c:	2b00      	cmp	r3, #0
 800742e:	d108      	bne.n	8007442 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007440:	e031      	b.n	80074a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007442:	2308      	movs	r3, #8
 8007444:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007446:	2308      	movs	r3, #8
 8007448:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	0e5b      	lsrs	r3, r3, #25
 8007452:	b2db      	uxtb	r3, r3
 8007454:	f003 0307 	and.w	r3, r3, #7
 8007458:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	0f5b      	lsrs	r3, r3, #29
 8007462:	b2db      	uxtb	r3, r3
 8007464:	f003 0307 	and.w	r3, r3, #7
 8007468:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800746a:	7bbb      	ldrb	r3, [r7, #14]
 800746c:	7b3a      	ldrb	r2, [r7, #12]
 800746e:	4911      	ldr	r1, [pc, #68]	@ (80074b4 <UARTEx_SetNbDataToProcess+0x94>)
 8007470:	5c8a      	ldrb	r2, [r1, r2]
 8007472:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007476:	7b3a      	ldrb	r2, [r7, #12]
 8007478:	490f      	ldr	r1, [pc, #60]	@ (80074b8 <UARTEx_SetNbDataToProcess+0x98>)
 800747a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800747c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007480:	b29a      	uxth	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007488:	7bfb      	ldrb	r3, [r7, #15]
 800748a:	7b7a      	ldrb	r2, [r7, #13]
 800748c:	4909      	ldr	r1, [pc, #36]	@ (80074b4 <UARTEx_SetNbDataToProcess+0x94>)
 800748e:	5c8a      	ldrb	r2, [r1, r2]
 8007490:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007494:	7b7a      	ldrb	r2, [r7, #13]
 8007496:	4908      	ldr	r1, [pc, #32]	@ (80074b8 <UARTEx_SetNbDataToProcess+0x98>)
 8007498:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800749a:	fb93 f3f2 	sdiv	r3, r3, r2
 800749e:	b29a      	uxth	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80074a6:	bf00      	nop
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	0800cfe8 	.word	0x0800cfe8
 80074b8:	0800cff0 	.word	0x0800cff0

080074bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	4603      	mov	r3, r0
 80074c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80074c6:	2300      	movs	r3, #0
 80074c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80074ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074ce:	2b84      	cmp	r3, #132	@ 0x84
 80074d0:	d005      	beq.n	80074de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80074d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	4413      	add	r3, r2
 80074da:	3303      	adds	r3, #3
 80074dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80074de:	68fb      	ldr	r3, [r7, #12]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80074f0:	f000 fa5c 	bl	80079ac <vTaskStartScheduler>
  
  return osOK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	bd80      	pop	{r7, pc}

080074fa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80074fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074fc:	b087      	sub	sp, #28
 80074fe:	af02      	add	r7, sp, #8
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685c      	ldr	r4, [r3, #4]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007510:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007518:	4618      	mov	r0, r3
 800751a:	f7ff ffcf 	bl	80074bc <makeFreeRtosPriority>
 800751e:	4602      	mov	r2, r0
 8007520:	f107 030c 	add.w	r3, r7, #12
 8007524:	9301      	str	r3, [sp, #4]
 8007526:	9200      	str	r2, [sp, #0]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	4632      	mov	r2, r6
 800752c:	4629      	mov	r1, r5
 800752e:	4620      	mov	r0, r4
 8007530:	f000 f8d2 	bl	80076d8 <xTaskCreate>
 8007534:	4603      	mov	r3, r0
 8007536:	2b01      	cmp	r3, #1
 8007538:	d001      	beq.n	800753e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800753a:	2300      	movs	r3, #0
 800753c:	e000      	b.n	8007540 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800753e:	68fb      	ldr	r3, [r7, #12]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007548 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <osDelay+0x16>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	e000      	b.n	8007560 <osDelay+0x18>
 800755e:	2301      	movs	r3, #1
 8007560:	4618      	mov	r0, r3
 8007562:	f000 f9ed 	bl	8007940 <vTaskDelay>
  
  return osOK;
 8007566:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007568:	4618      	mov	r0, r3
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f103 0208 	add.w	r2, r3, #8
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f04f 32ff 	mov.w	r2, #4294967295
 8007588:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f103 0208 	add.w	r2, r3, #8
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f103 0208 	add.w	r2, r3, #8
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80075be:	bf00      	nop
 80075c0:	370c      	adds	r7, #12
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075ca:	b480      	push	{r7}
 80075cc:	b085      	sub	sp, #20
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	689a      	ldr	r2, [r3, #8]
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	1c5a      	adds	r2, r3, #1
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	601a      	str	r2, [r3, #0]
}
 8007606:	bf00      	nop
 8007608:	3714      	adds	r7, #20
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007612:	b480      	push	{r7}
 8007614:	b085      	sub	sp, #20
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007628:	d103      	bne.n	8007632 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	60fb      	str	r3, [r7, #12]
 8007630:	e00c      	b.n	800764c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	3308      	adds	r3, #8
 8007636:	60fb      	str	r3, [r7, #12]
 8007638:	e002      	b.n	8007640 <vListInsert+0x2e>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	60fb      	str	r3, [r7, #12]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	429a      	cmp	r2, r3
 800764a:	d2f6      	bcs.n	800763a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	685a      	ldr	r2, [r3, #4]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	683a      	ldr	r2, [r7, #0]
 800765a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	683a      	ldr	r2, [r7, #0]
 8007666:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	1c5a      	adds	r2, r3, #1
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	601a      	str	r2, [r3, #0]
}
 8007678:	bf00      	nop
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	6892      	ldr	r2, [r2, #8]
 800769a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	6852      	ldr	r2, [r2, #4]
 80076a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d103      	bne.n	80076b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	1e5a      	subs	r2, r3, #1
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b08c      	sub	sp, #48	@ 0x30
 80076dc:	af04      	add	r7, sp, #16
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	603b      	str	r3, [r7, #0]
 80076e4:	4613      	mov	r3, r2
 80076e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80076e8:	88fb      	ldrh	r3, [r7, #6]
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 feb3 	bl	8008458 <pvPortMalloc>
 80076f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00e      	beq.n	8007718 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80076fa:	2054      	movs	r0, #84	@ 0x54
 80076fc:	f000 feac 	bl	8008458 <pvPortMalloc>
 8007700:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d003      	beq.n	8007710 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	631a      	str	r2, [r3, #48]	@ 0x30
 800770e:	e005      	b.n	800771c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007710:	6978      	ldr	r0, [r7, #20]
 8007712:	f000 ff6f 	bl	80085f4 <vPortFree>
 8007716:	e001      	b.n	800771c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007718:	2300      	movs	r3, #0
 800771a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d013      	beq.n	800774a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007722:	88fa      	ldrh	r2, [r7, #6]
 8007724:	2300      	movs	r3, #0
 8007726:	9303      	str	r3, [sp, #12]
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	9302      	str	r3, [sp, #8]
 800772c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800772e:	9301      	str	r3, [sp, #4]
 8007730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	68b9      	ldr	r1, [r7, #8]
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f000 f80e 	bl	800775a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800773e:	69f8      	ldr	r0, [r7, #28]
 8007740:	f000 f894 	bl	800786c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007744:	2301      	movs	r3, #1
 8007746:	61bb      	str	r3, [r7, #24]
 8007748:	e002      	b.n	8007750 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800774a:	f04f 33ff 	mov.w	r3, #4294967295
 800774e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007750:	69bb      	ldr	r3, [r7, #24]
	}
 8007752:	4618      	mov	r0, r3
 8007754:	3720      	adds	r7, #32
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b088      	sub	sp, #32
 800775e:	af00      	add	r7, sp, #0
 8007760:	60f8      	str	r0, [r7, #12]
 8007762:	60b9      	str	r1, [r7, #8]
 8007764:	607a      	str	r2, [r7, #4]
 8007766:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007772:	3b01      	subs	r3, #1
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4413      	add	r3, r2
 8007778:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	f023 0307 	bic.w	r3, r3, #7
 8007780:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	f003 0307 	and.w	r3, r3, #7
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00b      	beq.n	80077a4 <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800778c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800779e:	bf00      	nop
 80077a0:	bf00      	nop
 80077a2:	e7fd      	b.n	80077a0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d01f      	beq.n	80077ea <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077aa:	2300      	movs	r3, #0
 80077ac:	61fb      	str	r3, [r7, #28]
 80077ae:	e012      	b.n	80077d6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	4413      	add	r3, r2
 80077b6:	7819      	ldrb	r1, [r3, #0]
 80077b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	4413      	add	r3, r2
 80077be:	3334      	adds	r3, #52	@ 0x34
 80077c0:	460a      	mov	r2, r1
 80077c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	4413      	add	r3, r2
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d006      	beq.n	80077de <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	3301      	adds	r3, #1
 80077d4:	61fb      	str	r3, [r7, #28]
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	2b0f      	cmp	r3, #15
 80077da:	d9e9      	bls.n	80077b0 <prvInitialiseNewTask+0x56>
 80077dc:	e000      	b.n	80077e0 <prvInitialiseNewTask+0x86>
			{
				break;
 80077de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80077e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80077e8:	e003      	b.n	80077f2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80077ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f4:	2b06      	cmp	r3, #6
 80077f6:	d901      	bls.n	80077fc <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80077f8:	2306      	movs	r3, #6
 80077fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80077fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007800:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007804:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007806:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780a:	2200      	movs	r2, #0
 800780c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800780e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007810:	3304      	adds	r3, #4
 8007812:	4618      	mov	r0, r3
 8007814:	f7ff fecc 	bl	80075b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781a:	3318      	adds	r3, #24
 800781c:	4618      	mov	r0, r3
 800781e:	f7ff fec7 	bl	80075b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007824:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007826:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800782a:	f1c3 0207 	rsb	r2, r3, #7
 800782e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007830:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007834:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007836:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783a:	2200      	movs	r2, #0
 800783c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800783e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007840:	2200      	movs	r2, #0
 8007842:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	68f9      	ldr	r1, [r7, #12]
 800784a:	69b8      	ldr	r0, [r7, #24]
 800784c:	f000 fbf2 	bl	8008034 <pxPortInitialiseStack>
 8007850:	4602      	mov	r2, r0
 8007852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007854:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007858:	2b00      	cmp	r3, #0
 800785a:	d002      	beq.n	8007862 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800785c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800785e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007860:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007862:	bf00      	nop
 8007864:	3720      	adds	r7, #32
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
	...

0800786c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007874:	f000 fd10 	bl	8008298 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007878:	4b2a      	ldr	r3, [pc, #168]	@ (8007924 <prvAddNewTaskToReadyList+0xb8>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	3301      	adds	r3, #1
 800787e:	4a29      	ldr	r2, [pc, #164]	@ (8007924 <prvAddNewTaskToReadyList+0xb8>)
 8007880:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007882:	4b29      	ldr	r3, [pc, #164]	@ (8007928 <prvAddNewTaskToReadyList+0xbc>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d109      	bne.n	800789e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800788a:	4a27      	ldr	r2, [pc, #156]	@ (8007928 <prvAddNewTaskToReadyList+0xbc>)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007890:	4b24      	ldr	r3, [pc, #144]	@ (8007924 <prvAddNewTaskToReadyList+0xb8>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d110      	bne.n	80078ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007898:	f000 faaa 	bl	8007df0 <prvInitialiseTaskLists>
 800789c:	e00d      	b.n	80078ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800789e:	4b23      	ldr	r3, [pc, #140]	@ (800792c <prvAddNewTaskToReadyList+0xc0>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d109      	bne.n	80078ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078a6:	4b20      	ldr	r3, [pc, #128]	@ (8007928 <prvAddNewTaskToReadyList+0xbc>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d802      	bhi.n	80078ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80078b4:	4a1c      	ldr	r2, [pc, #112]	@ (8007928 <prvAddNewTaskToReadyList+0xbc>)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078ba:	4b1d      	ldr	r3, [pc, #116]	@ (8007930 <prvAddNewTaskToReadyList+0xc4>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3301      	adds	r3, #1
 80078c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007930 <prvAddNewTaskToReadyList+0xc4>)
 80078c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c8:	2201      	movs	r2, #1
 80078ca:	409a      	lsls	r2, r3
 80078cc:	4b19      	ldr	r3, [pc, #100]	@ (8007934 <prvAddNewTaskToReadyList+0xc8>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	4a18      	ldr	r2, [pc, #96]	@ (8007934 <prvAddNewTaskToReadyList+0xc8>)
 80078d4:	6013      	str	r3, [r2, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078da:	4613      	mov	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4a15      	ldr	r2, [pc, #84]	@ (8007938 <prvAddNewTaskToReadyList+0xcc>)
 80078e4:	441a      	add	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	3304      	adds	r3, #4
 80078ea:	4619      	mov	r1, r3
 80078ec:	4610      	mov	r0, r2
 80078ee:	f7ff fe6c 	bl	80075ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80078f2:	f000 fd03 	bl	80082fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80078f6:	4b0d      	ldr	r3, [pc, #52]	@ (800792c <prvAddNewTaskToReadyList+0xc0>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00e      	beq.n	800791c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80078fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007928 <prvAddNewTaskToReadyList+0xbc>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007908:	429a      	cmp	r2, r3
 800790a:	d207      	bcs.n	800791c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800790c:	4b0b      	ldr	r3, [pc, #44]	@ (800793c <prvAddNewTaskToReadyList+0xd0>)
 800790e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007912:	601a      	str	r2, [r3, #0]
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800791c:	bf00      	nop
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	20000628 	.word	0x20000628
 8007928:	20000528 	.word	0x20000528
 800792c:	20000634 	.word	0x20000634
 8007930:	20000644 	.word	0x20000644
 8007934:	20000630 	.word	0x20000630
 8007938:	2000052c 	.word	0x2000052c
 800793c:	e000ed04 	.word	0xe000ed04

08007940 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007948:	2300      	movs	r3, #0
 800794a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d018      	beq.n	8007984 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007952:	4b14      	ldr	r3, [pc, #80]	@ (80079a4 <vTaskDelay+0x64>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00b      	beq.n	8007972 <vTaskDelay+0x32>
	__asm volatile
 800795a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	60bb      	str	r3, [r7, #8]
}
 800796c:	bf00      	nop
 800796e:	bf00      	nop
 8007970:	e7fd      	b.n	800796e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007972:	f000 f863 	bl	8007a3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007976:	2100      	movs	r1, #0
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 faf5 	bl	8007f68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800797e:	f000 f86b 	bl	8007a58 <xTaskResumeAll>
 8007982:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d107      	bne.n	800799a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800798a:	4b07      	ldr	r3, [pc, #28]	@ (80079a8 <vTaskDelay+0x68>)
 800798c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007990:	601a      	str	r2, [r3, #0]
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800799a:	bf00      	nop
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	20000650 	.word	0x20000650
 80079a8:	e000ed04 	.word	0xe000ed04

080079ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80079b2:	4b1c      	ldr	r3, [pc, #112]	@ (8007a24 <vTaskStartScheduler+0x78>)
 80079b4:	9301      	str	r3, [sp, #4]
 80079b6:	2300      	movs	r3, #0
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	2300      	movs	r3, #0
 80079bc:	2280      	movs	r2, #128	@ 0x80
 80079be:	491a      	ldr	r1, [pc, #104]	@ (8007a28 <vTaskStartScheduler+0x7c>)
 80079c0:	481a      	ldr	r0, [pc, #104]	@ (8007a2c <vTaskStartScheduler+0x80>)
 80079c2:	f7ff fe89 	bl	80076d8 <xTaskCreate>
 80079c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d116      	bne.n	80079fc <vTaskStartScheduler+0x50>
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	60bb      	str	r3, [r7, #8]
}
 80079e0:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80079e2:	4b13      	ldr	r3, [pc, #76]	@ (8007a30 <vTaskStartScheduler+0x84>)
 80079e4:	f04f 32ff 	mov.w	r2, #4294967295
 80079e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80079ea:	4b12      	ldr	r3, [pc, #72]	@ (8007a34 <vTaskStartScheduler+0x88>)
 80079ec:	2201      	movs	r2, #1
 80079ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80079f0:	4b11      	ldr	r3, [pc, #68]	@ (8007a38 <vTaskStartScheduler+0x8c>)
 80079f2:	2200      	movs	r2, #0
 80079f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80079f6:	f000 fbab 	bl	8008150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80079fa:	e00f      	b.n	8007a1c <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a02:	d10b      	bne.n	8007a1c <vTaskStartScheduler+0x70>
	__asm volatile
 8007a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	607b      	str	r3, [r7, #4]
}
 8007a16:	bf00      	nop
 8007a18:	bf00      	nop
 8007a1a:	e7fd      	b.n	8007a18 <vTaskStartScheduler+0x6c>
}
 8007a1c:	bf00      	nop
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	2000064c 	.word	0x2000064c
 8007a28:	0800cfb0 	.word	0x0800cfb0
 8007a2c:	08007dc1 	.word	0x08007dc1
 8007a30:	20000648 	.word	0x20000648
 8007a34:	20000634 	.word	0x20000634
 8007a38:	2000062c 	.word	0x2000062c

08007a3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007a40:	4b04      	ldr	r3, [pc, #16]	@ (8007a54 <vTaskSuspendAll+0x18>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3301      	adds	r3, #1
 8007a46:	4a03      	ldr	r2, [pc, #12]	@ (8007a54 <vTaskSuspendAll+0x18>)
 8007a48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007a4a:	bf00      	nop
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	20000650 	.word	0x20000650

08007a58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007a62:	2300      	movs	r3, #0
 8007a64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007a66:	4b42      	ldr	r3, [pc, #264]	@ (8007b70 <xTaskResumeAll+0x118>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10b      	bne.n	8007a86 <xTaskResumeAll+0x2e>
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	603b      	str	r3, [r7, #0]
}
 8007a80:	bf00      	nop
 8007a82:	bf00      	nop
 8007a84:	e7fd      	b.n	8007a82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a86:	f000 fc07 	bl	8008298 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a8a:	4b39      	ldr	r3, [pc, #228]	@ (8007b70 <xTaskResumeAll+0x118>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	4a37      	ldr	r2, [pc, #220]	@ (8007b70 <xTaskResumeAll+0x118>)
 8007a92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a94:	4b36      	ldr	r3, [pc, #216]	@ (8007b70 <xTaskResumeAll+0x118>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d161      	bne.n	8007b60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a9c:	4b35      	ldr	r3, [pc, #212]	@ (8007b74 <xTaskResumeAll+0x11c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d05d      	beq.n	8007b60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007aa4:	e02e      	b.n	8007b04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aa6:	4b34      	ldr	r3, [pc, #208]	@ (8007b78 <xTaskResumeAll+0x120>)
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	3318      	adds	r3, #24
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7ff fde6 	bl	8007684 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	3304      	adds	r3, #4
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7ff fde1 	bl	8007684 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	409a      	lsls	r2, r3
 8007aca:	4b2c      	ldr	r3, [pc, #176]	@ (8007b7c <xTaskResumeAll+0x124>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	4a2a      	ldr	r2, [pc, #168]	@ (8007b7c <xTaskResumeAll+0x124>)
 8007ad2:	6013      	str	r3, [r2, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ad8:	4613      	mov	r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	4413      	add	r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4a27      	ldr	r2, [pc, #156]	@ (8007b80 <xTaskResumeAll+0x128>)
 8007ae2:	441a      	add	r2, r3
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	3304      	adds	r3, #4
 8007ae8:	4619      	mov	r1, r3
 8007aea:	4610      	mov	r0, r2
 8007aec:	f7ff fd6d 	bl	80075ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007af4:	4b23      	ldr	r3, [pc, #140]	@ (8007b84 <xTaskResumeAll+0x12c>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d302      	bcc.n	8007b04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007afe:	4b22      	ldr	r3, [pc, #136]	@ (8007b88 <xTaskResumeAll+0x130>)
 8007b00:	2201      	movs	r2, #1
 8007b02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b04:	4b1c      	ldr	r3, [pc, #112]	@ (8007b78 <xTaskResumeAll+0x120>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1cc      	bne.n	8007aa6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d001      	beq.n	8007b16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b12:	f000 f9eb 	bl	8007eec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b16:	4b1d      	ldr	r3, [pc, #116]	@ (8007b8c <xTaskResumeAll+0x134>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d010      	beq.n	8007b44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b22:	f000 f837 	bl	8007b94 <xTaskIncrementTick>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007b2c:	4b16      	ldr	r3, [pc, #88]	@ (8007b88 <xTaskResumeAll+0x130>)
 8007b2e:	2201      	movs	r2, #1
 8007b30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	3b01      	subs	r3, #1
 8007b36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1f1      	bne.n	8007b22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007b3e:	4b13      	ldr	r3, [pc, #76]	@ (8007b8c <xTaskResumeAll+0x134>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b44:	4b10      	ldr	r3, [pc, #64]	@ (8007b88 <xTaskResumeAll+0x130>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d009      	beq.n	8007b60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007b50:	4b0f      	ldr	r3, [pc, #60]	@ (8007b90 <xTaskResumeAll+0x138>)
 8007b52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b56:	601a      	str	r2, [r3, #0]
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b60:	f000 fbcc 	bl	80082fc <vPortExitCritical>

	return xAlreadyYielded;
 8007b64:	68bb      	ldr	r3, [r7, #8]
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	20000650 	.word	0x20000650
 8007b74:	20000628 	.word	0x20000628
 8007b78:	200005e8 	.word	0x200005e8
 8007b7c:	20000630 	.word	0x20000630
 8007b80:	2000052c 	.word	0x2000052c
 8007b84:	20000528 	.word	0x20000528
 8007b88:	2000063c 	.word	0x2000063c
 8007b8c:	20000638 	.word	0x20000638
 8007b90:	e000ed04 	.word	0xe000ed04

08007b94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b9e:	4b4f      	ldr	r3, [pc, #316]	@ (8007cdc <xTaskIncrementTick+0x148>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f040 808f 	bne.w	8007cc6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ba8:	4b4d      	ldr	r3, [pc, #308]	@ (8007ce0 <xTaskIncrementTick+0x14c>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3301      	adds	r3, #1
 8007bae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007bb0:	4a4b      	ldr	r2, [pc, #300]	@ (8007ce0 <xTaskIncrementTick+0x14c>)
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d121      	bne.n	8007c00 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007bbc:	4b49      	ldr	r3, [pc, #292]	@ (8007ce4 <xTaskIncrementTick+0x150>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00b      	beq.n	8007bde <xTaskIncrementTick+0x4a>
	__asm volatile
 8007bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	603b      	str	r3, [r7, #0]
}
 8007bd8:	bf00      	nop
 8007bda:	bf00      	nop
 8007bdc:	e7fd      	b.n	8007bda <xTaskIncrementTick+0x46>
 8007bde:	4b41      	ldr	r3, [pc, #260]	@ (8007ce4 <xTaskIncrementTick+0x150>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	4b40      	ldr	r3, [pc, #256]	@ (8007ce8 <xTaskIncrementTick+0x154>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a3e      	ldr	r2, [pc, #248]	@ (8007ce4 <xTaskIncrementTick+0x150>)
 8007bea:	6013      	str	r3, [r2, #0]
 8007bec:	4a3e      	ldr	r2, [pc, #248]	@ (8007ce8 <xTaskIncrementTick+0x154>)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6013      	str	r3, [r2, #0]
 8007bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8007cec <xTaskIncrementTick+0x158>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	4a3c      	ldr	r2, [pc, #240]	@ (8007cec <xTaskIncrementTick+0x158>)
 8007bfa:	6013      	str	r3, [r2, #0]
 8007bfc:	f000 f976 	bl	8007eec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c00:	4b3b      	ldr	r3, [pc, #236]	@ (8007cf0 <xTaskIncrementTick+0x15c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d348      	bcc.n	8007c9c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c0a:	4b36      	ldr	r3, [pc, #216]	@ (8007ce4 <xTaskIncrementTick+0x150>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d104      	bne.n	8007c1e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c14:	4b36      	ldr	r3, [pc, #216]	@ (8007cf0 <xTaskIncrementTick+0x15c>)
 8007c16:	f04f 32ff 	mov.w	r2, #4294967295
 8007c1a:	601a      	str	r2, [r3, #0]
					break;
 8007c1c:	e03e      	b.n	8007c9c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c1e:	4b31      	ldr	r3, [pc, #196]	@ (8007ce4 <xTaskIncrementTick+0x150>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d203      	bcs.n	8007c3e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c36:	4a2e      	ldr	r2, [pc, #184]	@ (8007cf0 <xTaskIncrementTick+0x15c>)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007c3c:	e02e      	b.n	8007c9c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	3304      	adds	r3, #4
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7ff fd1e 	bl	8007684 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d004      	beq.n	8007c5a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	3318      	adds	r3, #24
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7ff fd15 	bl	8007684 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5e:	2201      	movs	r2, #1
 8007c60:	409a      	lsls	r2, r3
 8007c62:	4b24      	ldr	r3, [pc, #144]	@ (8007cf4 <xTaskIncrementTick+0x160>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	4a22      	ldr	r2, [pc, #136]	@ (8007cf4 <xTaskIncrementTick+0x160>)
 8007c6a:	6013      	str	r3, [r2, #0]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c70:	4613      	mov	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	4413      	add	r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4a1f      	ldr	r2, [pc, #124]	@ (8007cf8 <xTaskIncrementTick+0x164>)
 8007c7a:	441a      	add	r2, r3
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	3304      	adds	r3, #4
 8007c80:	4619      	mov	r1, r3
 8007c82:	4610      	mov	r0, r2
 8007c84:	f7ff fca1 	bl	80075ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8007cfc <xTaskIncrementTick+0x168>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d3b9      	bcc.n	8007c0a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007c96:	2301      	movs	r3, #1
 8007c98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c9a:	e7b6      	b.n	8007c0a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c9c:	4b17      	ldr	r3, [pc, #92]	@ (8007cfc <xTaskIncrementTick+0x168>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ca2:	4915      	ldr	r1, [pc, #84]	@ (8007cf8 <xTaskIncrementTick+0x164>)
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	440b      	add	r3, r1
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d901      	bls.n	8007cb8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007cb8:	4b11      	ldr	r3, [pc, #68]	@ (8007d00 <xTaskIncrementTick+0x16c>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d007      	beq.n	8007cd0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	617b      	str	r3, [r7, #20]
 8007cc4:	e004      	b.n	8007cd0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8007d04 <xTaskIncrementTick+0x170>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8007d04 <xTaskIncrementTick+0x170>)
 8007cce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007cd0:	697b      	ldr	r3, [r7, #20]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3718      	adds	r7, #24
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	20000650 	.word	0x20000650
 8007ce0:	2000062c 	.word	0x2000062c
 8007ce4:	200005e0 	.word	0x200005e0
 8007ce8:	200005e4 	.word	0x200005e4
 8007cec:	20000640 	.word	0x20000640
 8007cf0:	20000648 	.word	0x20000648
 8007cf4:	20000630 	.word	0x20000630
 8007cf8:	2000052c 	.word	0x2000052c
 8007cfc:	20000528 	.word	0x20000528
 8007d00:	2000063c 	.word	0x2000063c
 8007d04:	20000638 	.word	0x20000638

08007d08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b087      	sub	sp, #28
 8007d0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d0e:	4b27      	ldr	r3, [pc, #156]	@ (8007dac <vTaskSwitchContext+0xa4>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d16:	4b26      	ldr	r3, [pc, #152]	@ (8007db0 <vTaskSwitchContext+0xa8>)
 8007d18:	2201      	movs	r2, #1
 8007d1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d1c:	e040      	b.n	8007da0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007d1e:	4b24      	ldr	r3, [pc, #144]	@ (8007db0 <vTaskSwitchContext+0xa8>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d24:	4b23      	ldr	r3, [pc, #140]	@ (8007db4 <vTaskSwitchContext+0xac>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	fab3 f383 	clz	r3, r3
 8007d30:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007d32:	7afb      	ldrb	r3, [r7, #11]
 8007d34:	f1c3 031f 	rsb	r3, r3, #31
 8007d38:	617b      	str	r3, [r7, #20]
 8007d3a:	491f      	ldr	r1, [pc, #124]	@ (8007db8 <vTaskSwitchContext+0xb0>)
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4413      	add	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	440b      	add	r3, r1
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10b      	bne.n	8007d66 <vTaskSwitchContext+0x5e>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	607b      	str	r3, [r7, #4]
}
 8007d60:	bf00      	nop
 8007d62:	bf00      	nop
 8007d64:	e7fd      	b.n	8007d62 <vTaskSwitchContext+0x5a>
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	4413      	add	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4a11      	ldr	r2, [pc, #68]	@ (8007db8 <vTaskSwitchContext+0xb0>)
 8007d72:	4413      	add	r3, r2
 8007d74:	613b      	str	r3, [r7, #16]
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	605a      	str	r2, [r3, #4]
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	3308      	adds	r3, #8
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d104      	bne.n	8007d96 <vTaskSwitchContext+0x8e>
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	685a      	ldr	r2, [r3, #4]
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	605a      	str	r2, [r3, #4]
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	4a07      	ldr	r2, [pc, #28]	@ (8007dbc <vTaskSwitchContext+0xb4>)
 8007d9e:	6013      	str	r3, [r2, #0]
}
 8007da0:	bf00      	nop
 8007da2:	371c      	adds	r7, #28
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	20000650 	.word	0x20000650
 8007db0:	2000063c 	.word	0x2000063c
 8007db4:	20000630 	.word	0x20000630
 8007db8:	2000052c 	.word	0x2000052c
 8007dbc:	20000528 	.word	0x20000528

08007dc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007dc8:	f000 f852 	bl	8007e70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007dcc:	4b06      	ldr	r3, [pc, #24]	@ (8007de8 <prvIdleTask+0x28>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d9f9      	bls.n	8007dc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007dd4:	4b05      	ldr	r3, [pc, #20]	@ (8007dec <prvIdleTask+0x2c>)
 8007dd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dda:	601a      	str	r2, [r3, #0]
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007de4:	e7f0      	b.n	8007dc8 <prvIdleTask+0x8>
 8007de6:	bf00      	nop
 8007de8:	2000052c 	.word	0x2000052c
 8007dec:	e000ed04 	.word	0xe000ed04

08007df0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007df6:	2300      	movs	r3, #0
 8007df8:	607b      	str	r3, [r7, #4]
 8007dfa:	e00c      	b.n	8007e16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4413      	add	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4a12      	ldr	r2, [pc, #72]	@ (8007e50 <prvInitialiseTaskLists+0x60>)
 8007e08:	4413      	add	r3, r2
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7ff fbb0 	bl	8007570 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	3301      	adds	r3, #1
 8007e14:	607b      	str	r3, [r7, #4]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b06      	cmp	r3, #6
 8007e1a:	d9ef      	bls.n	8007dfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e1c:	480d      	ldr	r0, [pc, #52]	@ (8007e54 <prvInitialiseTaskLists+0x64>)
 8007e1e:	f7ff fba7 	bl	8007570 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e22:	480d      	ldr	r0, [pc, #52]	@ (8007e58 <prvInitialiseTaskLists+0x68>)
 8007e24:	f7ff fba4 	bl	8007570 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e28:	480c      	ldr	r0, [pc, #48]	@ (8007e5c <prvInitialiseTaskLists+0x6c>)
 8007e2a:	f7ff fba1 	bl	8007570 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e2e:	480c      	ldr	r0, [pc, #48]	@ (8007e60 <prvInitialiseTaskLists+0x70>)
 8007e30:	f7ff fb9e 	bl	8007570 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e34:	480b      	ldr	r0, [pc, #44]	@ (8007e64 <prvInitialiseTaskLists+0x74>)
 8007e36:	f7ff fb9b 	bl	8007570 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8007e68 <prvInitialiseTaskLists+0x78>)
 8007e3c:	4a05      	ldr	r2, [pc, #20]	@ (8007e54 <prvInitialiseTaskLists+0x64>)
 8007e3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e40:	4b0a      	ldr	r3, [pc, #40]	@ (8007e6c <prvInitialiseTaskLists+0x7c>)
 8007e42:	4a05      	ldr	r2, [pc, #20]	@ (8007e58 <prvInitialiseTaskLists+0x68>)
 8007e44:	601a      	str	r2, [r3, #0]
}
 8007e46:	bf00      	nop
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	2000052c 	.word	0x2000052c
 8007e54:	200005b8 	.word	0x200005b8
 8007e58:	200005cc 	.word	0x200005cc
 8007e5c:	200005e8 	.word	0x200005e8
 8007e60:	200005fc 	.word	0x200005fc
 8007e64:	20000614 	.word	0x20000614
 8007e68:	200005e0 	.word	0x200005e0
 8007e6c:	200005e4 	.word	0x200005e4

08007e70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e76:	e019      	b.n	8007eac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e78:	f000 fa0e 	bl	8008298 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e7c:	4b10      	ldr	r3, [pc, #64]	@ (8007ec0 <prvCheckTasksWaitingTermination+0x50>)
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	3304      	adds	r3, #4
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7ff fbfb 	bl	8007684 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ec4 <prvCheckTasksWaitingTermination+0x54>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3b01      	subs	r3, #1
 8007e94:	4a0b      	ldr	r2, [pc, #44]	@ (8007ec4 <prvCheckTasksWaitingTermination+0x54>)
 8007e96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e98:	4b0b      	ldr	r3, [pc, #44]	@ (8007ec8 <prvCheckTasksWaitingTermination+0x58>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8007ec8 <prvCheckTasksWaitingTermination+0x58>)
 8007ea0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ea2:	f000 fa2b 	bl	80082fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f810 	bl	8007ecc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007eac:	4b06      	ldr	r3, [pc, #24]	@ (8007ec8 <prvCheckTasksWaitingTermination+0x58>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1e1      	bne.n	8007e78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007eb4:	bf00      	nop
 8007eb6:	bf00      	nop
 8007eb8:	3708      	adds	r7, #8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	200005fc 	.word	0x200005fc
 8007ec4:	20000628 	.word	0x20000628
 8007ec8:	20000610 	.word	0x20000610

08007ecc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f000 fb8b 	bl	80085f4 <vPortFree>
			vPortFree( pxTCB );
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fb88 	bl	80085f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ee4:	bf00      	nop
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8007f24 <prvResetNextTaskUnblockTime+0x38>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d104      	bne.n	8007f06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007efc:	4b0a      	ldr	r3, [pc, #40]	@ (8007f28 <prvResetNextTaskUnblockTime+0x3c>)
 8007efe:	f04f 32ff 	mov.w	r2, #4294967295
 8007f02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f04:	e008      	b.n	8007f18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f06:	4b07      	ldr	r3, [pc, #28]	@ (8007f24 <prvResetNextTaskUnblockTime+0x38>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	4a04      	ldr	r2, [pc, #16]	@ (8007f28 <prvResetNextTaskUnblockTime+0x3c>)
 8007f16:	6013      	str	r3, [r2, #0]
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr
 8007f24:	200005e0 	.word	0x200005e0
 8007f28:	20000648 	.word	0x20000648

08007f2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f32:	4b0b      	ldr	r3, [pc, #44]	@ (8007f60 <xTaskGetSchedulerState+0x34>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d102      	bne.n	8007f40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	607b      	str	r3, [r7, #4]
 8007f3e:	e008      	b.n	8007f52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f40:	4b08      	ldr	r3, [pc, #32]	@ (8007f64 <xTaskGetSchedulerState+0x38>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d102      	bne.n	8007f4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f48:	2302      	movs	r3, #2
 8007f4a:	607b      	str	r3, [r7, #4]
 8007f4c:	e001      	b.n	8007f52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f52:	687b      	ldr	r3, [r7, #4]
	}
 8007f54:	4618      	mov	r0, r3
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	20000634 	.word	0x20000634
 8007f64:	20000650 	.word	0x20000650

08007f68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f72:	4b29      	ldr	r3, [pc, #164]	@ (8008018 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f78:	4b28      	ldr	r3, [pc, #160]	@ (800801c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	3304      	adds	r3, #4
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7ff fb80 	bl	8007684 <uxListRemove>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10b      	bne.n	8007fa2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007f8a:	4b24      	ldr	r3, [pc, #144]	@ (800801c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f90:	2201      	movs	r2, #1
 8007f92:	fa02 f303 	lsl.w	r3, r2, r3
 8007f96:	43da      	mvns	r2, r3
 8007f98:	4b21      	ldr	r3, [pc, #132]	@ (8008020 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	4a20      	ldr	r2, [pc, #128]	@ (8008020 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007fa0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa8:	d10a      	bne.n	8007fc0 <prvAddCurrentTaskToDelayedList+0x58>
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d007      	beq.n	8007fc0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800801c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	3304      	adds	r3, #4
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	481a      	ldr	r0, [pc, #104]	@ (8008024 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007fba:	f7ff fb06 	bl	80075ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007fbe:	e026      	b.n	800800e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007fc8:	4b14      	ldr	r3, [pc, #80]	@ (800801c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d209      	bcs.n	8007fec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fd8:	4b13      	ldr	r3, [pc, #76]	@ (8008028 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800801c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	3304      	adds	r3, #4
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	4610      	mov	r0, r2
 8007fe6:	f7ff fb14 	bl	8007612 <vListInsert>
}
 8007fea:	e010      	b.n	800800e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fec:	4b0f      	ldr	r3, [pc, #60]	@ (800802c <prvAddCurrentTaskToDelayedList+0xc4>)
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800801c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3304      	adds	r3, #4
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	4610      	mov	r0, r2
 8007ffa:	f7ff fb0a 	bl	8007612 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8008030 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	429a      	cmp	r2, r3
 8008006:	d202      	bcs.n	800800e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008008:	4a09      	ldr	r2, [pc, #36]	@ (8008030 <prvAddCurrentTaskToDelayedList+0xc8>)
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	6013      	str	r3, [r2, #0]
}
 800800e:	bf00      	nop
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	2000062c 	.word	0x2000062c
 800801c:	20000528 	.word	0x20000528
 8008020:	20000630 	.word	0x20000630
 8008024:	20000614 	.word	0x20000614
 8008028:	200005e4 	.word	0x200005e4
 800802c:	200005e0 	.word	0x200005e0
 8008030:	20000648 	.word	0x20000648

08008034 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	3b04      	subs	r3, #4
 8008044:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800804c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	3b04      	subs	r3, #4
 8008052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	f023 0201 	bic.w	r2, r3, #1
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	3b04      	subs	r3, #4
 8008062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008064:	4a0c      	ldr	r2, [pc, #48]	@ (8008098 <pxPortInitialiseStack+0x64>)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3b14      	subs	r3, #20
 800806e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	3b04      	subs	r3, #4
 800807a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f06f 0202 	mvn.w	r2, #2
 8008082:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	3b20      	subs	r3, #32
 8008088:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800808a:	68fb      	ldr	r3, [r7, #12]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr
 8008098:	0800809d 	.word	0x0800809d

0800809c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80080a2:	2300      	movs	r3, #0
 80080a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80080a6:	4b13      	ldr	r3, [pc, #76]	@ (80080f4 <prvTaskExitError+0x58>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ae:	d00b      	beq.n	80080c8 <prvTaskExitError+0x2c>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	60fb      	str	r3, [r7, #12]
}
 80080c2:	bf00      	nop
 80080c4:	bf00      	nop
 80080c6:	e7fd      	b.n	80080c4 <prvTaskExitError+0x28>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	60bb      	str	r3, [r7, #8]
}
 80080da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80080dc:	bf00      	nop
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d0fc      	beq.n	80080de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80080e4:	bf00      	nop
 80080e6:	bf00      	nop
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	2000000c 	.word	0x2000000c
	...

08008100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008100:	4b07      	ldr	r3, [pc, #28]	@ (8008120 <pxCurrentTCBConst2>)
 8008102:	6819      	ldr	r1, [r3, #0]
 8008104:	6808      	ldr	r0, [r1, #0]
 8008106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800810a:	f380 8809 	msr	PSP, r0
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f04f 0000 	mov.w	r0, #0
 8008116:	f380 8811 	msr	BASEPRI, r0
 800811a:	4770      	bx	lr
 800811c:	f3af 8000 	nop.w

08008120 <pxCurrentTCBConst2>:
 8008120:	20000528 	.word	0x20000528
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008124:	bf00      	nop
 8008126:	bf00      	nop

08008128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008128:	4808      	ldr	r0, [pc, #32]	@ (800814c <prvPortStartFirstTask+0x24>)
 800812a:	6800      	ldr	r0, [r0, #0]
 800812c:	6800      	ldr	r0, [r0, #0]
 800812e:	f380 8808 	msr	MSP, r0
 8008132:	f04f 0000 	mov.w	r0, #0
 8008136:	f380 8814 	msr	CONTROL, r0
 800813a:	b662      	cpsie	i
 800813c:	b661      	cpsie	f
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	df00      	svc	0
 8008148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800814a:	bf00      	nop
 800814c:	e000ed08 	.word	0xe000ed08

08008150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008156:	4b47      	ldr	r3, [pc, #284]	@ (8008274 <xPortStartScheduler+0x124>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a47      	ldr	r2, [pc, #284]	@ (8008278 <xPortStartScheduler+0x128>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d10b      	bne.n	8008178 <xPortStartScheduler+0x28>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	613b      	str	r3, [r7, #16]
}
 8008172:	bf00      	nop
 8008174:	bf00      	nop
 8008176:	e7fd      	b.n	8008174 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008178:	4b3e      	ldr	r3, [pc, #248]	@ (8008274 <xPortStartScheduler+0x124>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a3f      	ldr	r2, [pc, #252]	@ (800827c <xPortStartScheduler+0x12c>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d10b      	bne.n	800819a <xPortStartScheduler+0x4a>
	__asm volatile
 8008182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008186:	f383 8811 	msr	BASEPRI, r3
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	60fb      	str	r3, [r7, #12]
}
 8008194:	bf00      	nop
 8008196:	bf00      	nop
 8008198:	e7fd      	b.n	8008196 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800819a:	4b39      	ldr	r3, [pc, #228]	@ (8008280 <xPortStartScheduler+0x130>)
 800819c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	22ff      	movs	r2, #255	@ 0xff
 80081aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	4b31      	ldr	r3, [pc, #196]	@ (8008284 <xPortStartScheduler+0x134>)
 80081c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80081c2:	4b31      	ldr	r3, [pc, #196]	@ (8008288 <xPortStartScheduler+0x138>)
 80081c4:	2207      	movs	r2, #7
 80081c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081c8:	e009      	b.n	80081de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80081ca:	4b2f      	ldr	r3, [pc, #188]	@ (8008288 <xPortStartScheduler+0x138>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	3b01      	subs	r3, #1
 80081d0:	4a2d      	ldr	r2, [pc, #180]	@ (8008288 <xPortStartScheduler+0x138>)
 80081d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80081d4:	78fb      	ldrb	r3, [r7, #3]
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	005b      	lsls	r3, r3, #1
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081de:	78fb      	ldrb	r3, [r7, #3]
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081e6:	2b80      	cmp	r3, #128	@ 0x80
 80081e8:	d0ef      	beq.n	80081ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80081ea:	4b27      	ldr	r3, [pc, #156]	@ (8008288 <xPortStartScheduler+0x138>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f1c3 0307 	rsb	r3, r3, #7
 80081f2:	2b04      	cmp	r3, #4
 80081f4:	d00b      	beq.n	800820e <xPortStartScheduler+0xbe>
	__asm volatile
 80081f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	60bb      	str	r3, [r7, #8]
}
 8008208:	bf00      	nop
 800820a:	bf00      	nop
 800820c:	e7fd      	b.n	800820a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800820e:	4b1e      	ldr	r3, [pc, #120]	@ (8008288 <xPortStartScheduler+0x138>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	021b      	lsls	r3, r3, #8
 8008214:	4a1c      	ldr	r2, [pc, #112]	@ (8008288 <xPortStartScheduler+0x138>)
 8008216:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008218:	4b1b      	ldr	r3, [pc, #108]	@ (8008288 <xPortStartScheduler+0x138>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008220:	4a19      	ldr	r2, [pc, #100]	@ (8008288 <xPortStartScheduler+0x138>)
 8008222:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	b2da      	uxtb	r2, r3
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800822c:	4b17      	ldr	r3, [pc, #92]	@ (800828c <xPortStartScheduler+0x13c>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a16      	ldr	r2, [pc, #88]	@ (800828c <xPortStartScheduler+0x13c>)
 8008232:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008236:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008238:	4b14      	ldr	r3, [pc, #80]	@ (800828c <xPortStartScheduler+0x13c>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a13      	ldr	r2, [pc, #76]	@ (800828c <xPortStartScheduler+0x13c>)
 800823e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008242:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008244:	f000 f8da 	bl	80083fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008248:	4b11      	ldr	r3, [pc, #68]	@ (8008290 <xPortStartScheduler+0x140>)
 800824a:	2200      	movs	r2, #0
 800824c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800824e:	f000 f8f9 	bl	8008444 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008252:	4b10      	ldr	r3, [pc, #64]	@ (8008294 <xPortStartScheduler+0x144>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a0f      	ldr	r2, [pc, #60]	@ (8008294 <xPortStartScheduler+0x144>)
 8008258:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800825c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800825e:	f7ff ff63 	bl	8008128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008262:	f7ff fd51 	bl	8007d08 <vTaskSwitchContext>
	prvTaskExitError();
 8008266:	f7ff ff19 	bl	800809c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3718      	adds	r7, #24
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	e000ed00 	.word	0xe000ed00
 8008278:	410fc271 	.word	0x410fc271
 800827c:	410fc270 	.word	0x410fc270
 8008280:	e000e400 	.word	0xe000e400
 8008284:	20000654 	.word	0x20000654
 8008288:	20000658 	.word	0x20000658
 800828c:	e000ed20 	.word	0xe000ed20
 8008290:	2000000c 	.word	0x2000000c
 8008294:	e000ef34 	.word	0xe000ef34

08008298 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
	__asm volatile
 800829e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	607b      	str	r3, [r7, #4]
}
 80082b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80082b2:	4b10      	ldr	r3, [pc, #64]	@ (80082f4 <vPortEnterCritical+0x5c>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3301      	adds	r3, #1
 80082b8:	4a0e      	ldr	r2, [pc, #56]	@ (80082f4 <vPortEnterCritical+0x5c>)
 80082ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80082bc:	4b0d      	ldr	r3, [pc, #52]	@ (80082f4 <vPortEnterCritical+0x5c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d110      	bne.n	80082e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082c4:	4b0c      	ldr	r3, [pc, #48]	@ (80082f8 <vPortEnterCritical+0x60>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00b      	beq.n	80082e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	603b      	str	r3, [r7, #0]
}
 80082e0:	bf00      	nop
 80082e2:	bf00      	nop
 80082e4:	e7fd      	b.n	80082e2 <vPortEnterCritical+0x4a>
	}
}
 80082e6:	bf00      	nop
 80082e8:	370c      	adds	r7, #12
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	2000000c 	.word	0x2000000c
 80082f8:	e000ed04 	.word	0xe000ed04

080082fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008302:	4b12      	ldr	r3, [pc, #72]	@ (800834c <vPortExitCritical+0x50>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10b      	bne.n	8008322 <vPortExitCritical+0x26>
	__asm volatile
 800830a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800830e:	f383 8811 	msr	BASEPRI, r3
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	607b      	str	r3, [r7, #4]
}
 800831c:	bf00      	nop
 800831e:	bf00      	nop
 8008320:	e7fd      	b.n	800831e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008322:	4b0a      	ldr	r3, [pc, #40]	@ (800834c <vPortExitCritical+0x50>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3b01      	subs	r3, #1
 8008328:	4a08      	ldr	r2, [pc, #32]	@ (800834c <vPortExitCritical+0x50>)
 800832a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800832c:	4b07      	ldr	r3, [pc, #28]	@ (800834c <vPortExitCritical+0x50>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d105      	bne.n	8008340 <vPortExitCritical+0x44>
 8008334:	2300      	movs	r3, #0
 8008336:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800833e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	2000000c 	.word	0x2000000c

08008350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008350:	f3ef 8009 	mrs	r0, PSP
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	4b15      	ldr	r3, [pc, #84]	@ (80083b0 <pxCurrentTCBConst>)
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	f01e 0f10 	tst.w	lr, #16
 8008360:	bf08      	it	eq
 8008362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800836a:	6010      	str	r0, [r2, #0]
 800836c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008370:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008374:	f380 8811 	msr	BASEPRI, r0
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f7ff fcc2 	bl	8007d08 <vTaskSwitchContext>
 8008384:	f04f 0000 	mov.w	r0, #0
 8008388:	f380 8811 	msr	BASEPRI, r0
 800838c:	bc09      	pop	{r0, r3}
 800838e:	6819      	ldr	r1, [r3, #0]
 8008390:	6808      	ldr	r0, [r1, #0]
 8008392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008396:	f01e 0f10 	tst.w	lr, #16
 800839a:	bf08      	it	eq
 800839c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80083a0:	f380 8809 	msr	PSP, r0
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	f3af 8000 	nop.w

080083b0 <pxCurrentTCBConst>:
 80083b0:	20000528 	.word	0x20000528
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80083b4:	bf00      	nop
 80083b6:	bf00      	nop

080083b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
	__asm volatile
 80083be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	607b      	str	r3, [r7, #4]
}
 80083d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083d2:	f7ff fbdf 	bl	8007b94 <xTaskIncrementTick>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d003      	beq.n	80083e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083dc:	4b06      	ldr	r3, [pc, #24]	@ (80083f8 <xPortSysTickHandler+0x40>)
 80083de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083e2:	601a      	str	r2, [r3, #0]
 80083e4:	2300      	movs	r3, #0
 80083e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	f383 8811 	msr	BASEPRI, r3
}
 80083ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80083f0:	bf00      	nop
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	e000ed04 	.word	0xe000ed04

080083fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80083fc:	b480      	push	{r7}
 80083fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008400:	4b0b      	ldr	r3, [pc, #44]	@ (8008430 <vPortSetupTimerInterrupt+0x34>)
 8008402:	2200      	movs	r2, #0
 8008404:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008406:	4b0b      	ldr	r3, [pc, #44]	@ (8008434 <vPortSetupTimerInterrupt+0x38>)
 8008408:	2200      	movs	r2, #0
 800840a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800840c:	4b0a      	ldr	r3, [pc, #40]	@ (8008438 <vPortSetupTimerInterrupt+0x3c>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a0a      	ldr	r2, [pc, #40]	@ (800843c <vPortSetupTimerInterrupt+0x40>)
 8008412:	fba2 2303 	umull	r2, r3, r2, r3
 8008416:	099b      	lsrs	r3, r3, #6
 8008418:	4a09      	ldr	r2, [pc, #36]	@ (8008440 <vPortSetupTimerInterrupt+0x44>)
 800841a:	3b01      	subs	r3, #1
 800841c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800841e:	4b04      	ldr	r3, [pc, #16]	@ (8008430 <vPortSetupTimerInterrupt+0x34>)
 8008420:	2207      	movs	r2, #7
 8008422:	601a      	str	r2, [r3, #0]
}
 8008424:	bf00      	nop
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	e000e010 	.word	0xe000e010
 8008434:	e000e018 	.word	0xe000e018
 8008438:	20000000 	.word	0x20000000
 800843c:	10624dd3 	.word	0x10624dd3
 8008440:	e000e014 	.word	0xe000e014

08008444 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008444:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008454 <vPortEnableVFP+0x10>
 8008448:	6801      	ldr	r1, [r0, #0]
 800844a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800844e:	6001      	str	r1, [r0, #0]
 8008450:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008452:	bf00      	nop
 8008454:	e000ed88 	.word	0xe000ed88

08008458 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b08a      	sub	sp, #40	@ 0x28
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008460:	2300      	movs	r3, #0
 8008462:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008464:	f7ff faea 	bl	8007a3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008468:	4b5c      	ldr	r3, [pc, #368]	@ (80085dc <pvPortMalloc+0x184>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d101      	bne.n	8008474 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008470:	f000 f924 	bl	80086bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008474:	4b5a      	ldr	r3, [pc, #360]	@ (80085e0 <pvPortMalloc+0x188>)
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4013      	ands	r3, r2
 800847c:	2b00      	cmp	r3, #0
 800847e:	f040 8095 	bne.w	80085ac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d01e      	beq.n	80084c6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008488:	2208      	movs	r2, #8
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4413      	add	r3, r2
 800848e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f003 0307 	and.w	r3, r3, #7
 8008496:	2b00      	cmp	r3, #0
 8008498:	d015      	beq.n	80084c6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f023 0307 	bic.w	r3, r3, #7
 80084a0:	3308      	adds	r3, #8
 80084a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f003 0307 	and.w	r3, r3, #7
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00b      	beq.n	80084c6 <pvPortMalloc+0x6e>
	__asm volatile
 80084ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	617b      	str	r3, [r7, #20]
}
 80084c0:	bf00      	nop
 80084c2:	bf00      	nop
 80084c4:	e7fd      	b.n	80084c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d06f      	beq.n	80085ac <pvPortMalloc+0x154>
 80084cc:	4b45      	ldr	r3, [pc, #276]	@ (80085e4 <pvPortMalloc+0x18c>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d86a      	bhi.n	80085ac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084d6:	4b44      	ldr	r3, [pc, #272]	@ (80085e8 <pvPortMalloc+0x190>)
 80084d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80084da:	4b43      	ldr	r3, [pc, #268]	@ (80085e8 <pvPortMalloc+0x190>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084e0:	e004      	b.n	80084ec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80084e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80084e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d903      	bls.n	80084fe <pvPortMalloc+0xa6>
 80084f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1f1      	bne.n	80084e2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80084fe:	4b37      	ldr	r3, [pc, #220]	@ (80085dc <pvPortMalloc+0x184>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008504:	429a      	cmp	r2, r3
 8008506:	d051      	beq.n	80085ac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008508:	6a3b      	ldr	r3, [r7, #32]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2208      	movs	r2, #8
 800850e:	4413      	add	r3, r2
 8008510:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800851a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851c:	685a      	ldr	r2, [r3, #4]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	1ad2      	subs	r2, r2, r3
 8008522:	2308      	movs	r3, #8
 8008524:	005b      	lsls	r3, r3, #1
 8008526:	429a      	cmp	r2, r3
 8008528:	d920      	bls.n	800856c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800852a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4413      	add	r3, r2
 8008530:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	f003 0307 	and.w	r3, r3, #7
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00b      	beq.n	8008554 <pvPortMalloc+0xfc>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	613b      	str	r3, [r7, #16]
}
 800854e:	bf00      	nop
 8008550:	bf00      	nop
 8008552:	e7fd      	b.n	8008550 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008556:	685a      	ldr	r2, [r3, #4]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	1ad2      	subs	r2, r2, r3
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008566:	69b8      	ldr	r0, [r7, #24]
 8008568:	f000 f90a 	bl	8008780 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800856c:	4b1d      	ldr	r3, [pc, #116]	@ (80085e4 <pvPortMalloc+0x18c>)
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	4a1b      	ldr	r2, [pc, #108]	@ (80085e4 <pvPortMalloc+0x18c>)
 8008578:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800857a:	4b1a      	ldr	r3, [pc, #104]	@ (80085e4 <pvPortMalloc+0x18c>)
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	4b1b      	ldr	r3, [pc, #108]	@ (80085ec <pvPortMalloc+0x194>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	429a      	cmp	r2, r3
 8008584:	d203      	bcs.n	800858e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008586:	4b17      	ldr	r3, [pc, #92]	@ (80085e4 <pvPortMalloc+0x18c>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a18      	ldr	r2, [pc, #96]	@ (80085ec <pvPortMalloc+0x194>)
 800858c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800858e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008590:	685a      	ldr	r2, [r3, #4]
 8008592:	4b13      	ldr	r3, [pc, #76]	@ (80085e0 <pvPortMalloc+0x188>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	431a      	orrs	r2, r3
 8008598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800859c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859e:	2200      	movs	r2, #0
 80085a0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80085a2:	4b13      	ldr	r3, [pc, #76]	@ (80085f0 <pvPortMalloc+0x198>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	3301      	adds	r3, #1
 80085a8:	4a11      	ldr	r2, [pc, #68]	@ (80085f0 <pvPortMalloc+0x198>)
 80085aa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085ac:	f7ff fa54 	bl	8007a58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	f003 0307 	and.w	r3, r3, #7
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00b      	beq.n	80085d2 <pvPortMalloc+0x17a>
	__asm volatile
 80085ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	60fb      	str	r3, [r7, #12]
}
 80085cc:	bf00      	nop
 80085ce:	bf00      	nop
 80085d0:	e7fd      	b.n	80085ce <pvPortMalloc+0x176>
	return pvReturn;
 80085d2:	69fb      	ldr	r3, [r7, #28]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3728      	adds	r7, #40	@ 0x28
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	20001264 	.word	0x20001264
 80085e0:	20001278 	.word	0x20001278
 80085e4:	20001268 	.word	0x20001268
 80085e8:	2000125c 	.word	0x2000125c
 80085ec:	2000126c 	.word	0x2000126c
 80085f0:	20001270 	.word	0x20001270

080085f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b086      	sub	sp, #24
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d04f      	beq.n	80086a6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008606:	2308      	movs	r3, #8
 8008608:	425b      	negs	r3, r3
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	4413      	add	r3, r2
 800860e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	685a      	ldr	r2, [r3, #4]
 8008618:	4b25      	ldr	r3, [pc, #148]	@ (80086b0 <vPortFree+0xbc>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4013      	ands	r3, r2
 800861e:	2b00      	cmp	r3, #0
 8008620:	d10b      	bne.n	800863a <vPortFree+0x46>
	__asm volatile
 8008622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008626:	f383 8811 	msr	BASEPRI, r3
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	60fb      	str	r3, [r7, #12]
}
 8008634:	bf00      	nop
 8008636:	bf00      	nop
 8008638:	e7fd      	b.n	8008636 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00b      	beq.n	800865a <vPortFree+0x66>
	__asm volatile
 8008642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	60bb      	str	r3, [r7, #8]
}
 8008654:	bf00      	nop
 8008656:	bf00      	nop
 8008658:	e7fd      	b.n	8008656 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	685a      	ldr	r2, [r3, #4]
 800865e:	4b14      	ldr	r3, [pc, #80]	@ (80086b0 <vPortFree+0xbc>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4013      	ands	r3, r2
 8008664:	2b00      	cmp	r3, #0
 8008666:	d01e      	beq.n	80086a6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d11a      	bne.n	80086a6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	685a      	ldr	r2, [r3, #4]
 8008674:	4b0e      	ldr	r3, [pc, #56]	@ (80086b0 <vPortFree+0xbc>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	43db      	mvns	r3, r3
 800867a:	401a      	ands	r2, r3
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008680:	f7ff f9dc 	bl	8007a3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	4b0a      	ldr	r3, [pc, #40]	@ (80086b4 <vPortFree+0xc0>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4413      	add	r3, r2
 800868e:	4a09      	ldr	r2, [pc, #36]	@ (80086b4 <vPortFree+0xc0>)
 8008690:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008692:	6938      	ldr	r0, [r7, #16]
 8008694:	f000 f874 	bl	8008780 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008698:	4b07      	ldr	r3, [pc, #28]	@ (80086b8 <vPortFree+0xc4>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	3301      	adds	r3, #1
 800869e:	4a06      	ldr	r2, [pc, #24]	@ (80086b8 <vPortFree+0xc4>)
 80086a0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80086a2:	f7ff f9d9 	bl	8007a58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086a6:	bf00      	nop
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	20001278 	.word	0x20001278
 80086b4:	20001268 	.word	0x20001268
 80086b8:	20001274 	.word	0x20001274

080086bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086c2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80086c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80086c8:	4b27      	ldr	r3, [pc, #156]	@ (8008768 <prvHeapInit+0xac>)
 80086ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f003 0307 	and.w	r3, r3, #7
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00c      	beq.n	80086f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	3307      	adds	r3, #7
 80086da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f023 0307 	bic.w	r3, r3, #7
 80086e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	4a1f      	ldr	r2, [pc, #124]	@ (8008768 <prvHeapInit+0xac>)
 80086ec:	4413      	add	r3, r2
 80086ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80086f4:	4a1d      	ldr	r2, [pc, #116]	@ (800876c <prvHeapInit+0xb0>)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80086fa:	4b1c      	ldr	r3, [pc, #112]	@ (800876c <prvHeapInit+0xb0>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	68ba      	ldr	r2, [r7, #8]
 8008704:	4413      	add	r3, r2
 8008706:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008708:	2208      	movs	r2, #8
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	1a9b      	subs	r3, r3, r2
 800870e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f023 0307 	bic.w	r3, r3, #7
 8008716:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	4a15      	ldr	r2, [pc, #84]	@ (8008770 <prvHeapInit+0xb4>)
 800871c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800871e:	4b14      	ldr	r3, [pc, #80]	@ (8008770 <prvHeapInit+0xb4>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2200      	movs	r2, #0
 8008724:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008726:	4b12      	ldr	r3, [pc, #72]	@ (8008770 <prvHeapInit+0xb4>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2200      	movs	r2, #0
 800872c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	1ad2      	subs	r2, r2, r3
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800873c:	4b0c      	ldr	r3, [pc, #48]	@ (8008770 <prvHeapInit+0xb4>)
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	4a0a      	ldr	r2, [pc, #40]	@ (8008774 <prvHeapInit+0xb8>)
 800874a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	4a09      	ldr	r2, [pc, #36]	@ (8008778 <prvHeapInit+0xbc>)
 8008752:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008754:	4b09      	ldr	r3, [pc, #36]	@ (800877c <prvHeapInit+0xc0>)
 8008756:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800875a:	601a      	str	r2, [r3, #0]
}
 800875c:	bf00      	nop
 800875e:	3714      	adds	r7, #20
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr
 8008768:	2000065c 	.word	0x2000065c
 800876c:	2000125c 	.word	0x2000125c
 8008770:	20001264 	.word	0x20001264
 8008774:	2000126c 	.word	0x2000126c
 8008778:	20001268 	.word	0x20001268
 800877c:	20001278 	.word	0x20001278

08008780 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008788:	4b28      	ldr	r3, [pc, #160]	@ (800882c <prvInsertBlockIntoFreeList+0xac>)
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	e002      	b.n	8008794 <prvInsertBlockIntoFreeList+0x14>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	429a      	cmp	r2, r3
 800879c:	d8f7      	bhi.n	800878e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	4413      	add	r3, r2
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d108      	bne.n	80087c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	685a      	ldr	r2, [r3, #4]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	441a      	add	r2, r3
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	441a      	add	r2, r3
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d118      	bne.n	8008808 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	4b15      	ldr	r3, [pc, #84]	@ (8008830 <prvInsertBlockIntoFreeList+0xb0>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d00d      	beq.n	80087fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	441a      	add	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	e008      	b.n	8008810 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80087fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008830 <prvInsertBlockIntoFreeList+0xb0>)
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	601a      	str	r2, [r3, #0]
 8008806:	e003      	b.n	8008810 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	429a      	cmp	r2, r3
 8008816:	d002      	beq.n	800881e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800881e:	bf00      	nop
 8008820:	3714      	adds	r7, #20
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	2000125c 	.word	0x2000125c
 8008830:	20001264 	.word	0x20001264

08008834 <__cvt>:
 8008834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008838:	ec57 6b10 	vmov	r6, r7, d0
 800883c:	2f00      	cmp	r7, #0
 800883e:	460c      	mov	r4, r1
 8008840:	4619      	mov	r1, r3
 8008842:	463b      	mov	r3, r7
 8008844:	bfbb      	ittet	lt
 8008846:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800884a:	461f      	movlt	r7, r3
 800884c:	2300      	movge	r3, #0
 800884e:	232d      	movlt	r3, #45	@ 0x2d
 8008850:	700b      	strb	r3, [r1, #0]
 8008852:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008854:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008858:	4691      	mov	r9, r2
 800885a:	f023 0820 	bic.w	r8, r3, #32
 800885e:	bfbc      	itt	lt
 8008860:	4632      	movlt	r2, r6
 8008862:	4616      	movlt	r6, r2
 8008864:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008868:	d005      	beq.n	8008876 <__cvt+0x42>
 800886a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800886e:	d100      	bne.n	8008872 <__cvt+0x3e>
 8008870:	3401      	adds	r4, #1
 8008872:	2102      	movs	r1, #2
 8008874:	e000      	b.n	8008878 <__cvt+0x44>
 8008876:	2103      	movs	r1, #3
 8008878:	ab03      	add	r3, sp, #12
 800887a:	9301      	str	r3, [sp, #4]
 800887c:	ab02      	add	r3, sp, #8
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	ec47 6b10 	vmov	d0, r6, r7
 8008884:	4653      	mov	r3, sl
 8008886:	4622      	mov	r2, r4
 8008888:	f001 f882 	bl	8009990 <_dtoa_r>
 800888c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008890:	4605      	mov	r5, r0
 8008892:	d119      	bne.n	80088c8 <__cvt+0x94>
 8008894:	f019 0f01 	tst.w	r9, #1
 8008898:	d00e      	beq.n	80088b8 <__cvt+0x84>
 800889a:	eb00 0904 	add.w	r9, r0, r4
 800889e:	2200      	movs	r2, #0
 80088a0:	2300      	movs	r3, #0
 80088a2:	4630      	mov	r0, r6
 80088a4:	4639      	mov	r1, r7
 80088a6:	f7f8 f937 	bl	8000b18 <__aeabi_dcmpeq>
 80088aa:	b108      	cbz	r0, 80088b0 <__cvt+0x7c>
 80088ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80088b0:	2230      	movs	r2, #48	@ 0x30
 80088b2:	9b03      	ldr	r3, [sp, #12]
 80088b4:	454b      	cmp	r3, r9
 80088b6:	d31e      	bcc.n	80088f6 <__cvt+0xc2>
 80088b8:	9b03      	ldr	r3, [sp, #12]
 80088ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088bc:	1b5b      	subs	r3, r3, r5
 80088be:	4628      	mov	r0, r5
 80088c0:	6013      	str	r3, [r2, #0]
 80088c2:	b004      	add	sp, #16
 80088c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80088cc:	eb00 0904 	add.w	r9, r0, r4
 80088d0:	d1e5      	bne.n	800889e <__cvt+0x6a>
 80088d2:	7803      	ldrb	r3, [r0, #0]
 80088d4:	2b30      	cmp	r3, #48	@ 0x30
 80088d6:	d10a      	bne.n	80088ee <__cvt+0xba>
 80088d8:	2200      	movs	r2, #0
 80088da:	2300      	movs	r3, #0
 80088dc:	4630      	mov	r0, r6
 80088de:	4639      	mov	r1, r7
 80088e0:	f7f8 f91a 	bl	8000b18 <__aeabi_dcmpeq>
 80088e4:	b918      	cbnz	r0, 80088ee <__cvt+0xba>
 80088e6:	f1c4 0401 	rsb	r4, r4, #1
 80088ea:	f8ca 4000 	str.w	r4, [sl]
 80088ee:	f8da 3000 	ldr.w	r3, [sl]
 80088f2:	4499      	add	r9, r3
 80088f4:	e7d3      	b.n	800889e <__cvt+0x6a>
 80088f6:	1c59      	adds	r1, r3, #1
 80088f8:	9103      	str	r1, [sp, #12]
 80088fa:	701a      	strb	r2, [r3, #0]
 80088fc:	e7d9      	b.n	80088b2 <__cvt+0x7e>

080088fe <__exponent>:
 80088fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008900:	2900      	cmp	r1, #0
 8008902:	bfba      	itte	lt
 8008904:	4249      	neglt	r1, r1
 8008906:	232d      	movlt	r3, #45	@ 0x2d
 8008908:	232b      	movge	r3, #43	@ 0x2b
 800890a:	2909      	cmp	r1, #9
 800890c:	7002      	strb	r2, [r0, #0]
 800890e:	7043      	strb	r3, [r0, #1]
 8008910:	dd29      	ble.n	8008966 <__exponent+0x68>
 8008912:	f10d 0307 	add.w	r3, sp, #7
 8008916:	461d      	mov	r5, r3
 8008918:	270a      	movs	r7, #10
 800891a:	461a      	mov	r2, r3
 800891c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008920:	fb07 1416 	mls	r4, r7, r6, r1
 8008924:	3430      	adds	r4, #48	@ 0x30
 8008926:	f802 4c01 	strb.w	r4, [r2, #-1]
 800892a:	460c      	mov	r4, r1
 800892c:	2c63      	cmp	r4, #99	@ 0x63
 800892e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008932:	4631      	mov	r1, r6
 8008934:	dcf1      	bgt.n	800891a <__exponent+0x1c>
 8008936:	3130      	adds	r1, #48	@ 0x30
 8008938:	1e94      	subs	r4, r2, #2
 800893a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800893e:	1c41      	adds	r1, r0, #1
 8008940:	4623      	mov	r3, r4
 8008942:	42ab      	cmp	r3, r5
 8008944:	d30a      	bcc.n	800895c <__exponent+0x5e>
 8008946:	f10d 0309 	add.w	r3, sp, #9
 800894a:	1a9b      	subs	r3, r3, r2
 800894c:	42ac      	cmp	r4, r5
 800894e:	bf88      	it	hi
 8008950:	2300      	movhi	r3, #0
 8008952:	3302      	adds	r3, #2
 8008954:	4403      	add	r3, r0
 8008956:	1a18      	subs	r0, r3, r0
 8008958:	b003      	add	sp, #12
 800895a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800895c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008960:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008964:	e7ed      	b.n	8008942 <__exponent+0x44>
 8008966:	2330      	movs	r3, #48	@ 0x30
 8008968:	3130      	adds	r1, #48	@ 0x30
 800896a:	7083      	strb	r3, [r0, #2]
 800896c:	70c1      	strb	r1, [r0, #3]
 800896e:	1d03      	adds	r3, r0, #4
 8008970:	e7f1      	b.n	8008956 <__exponent+0x58>
	...

08008974 <_printf_float>:
 8008974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008978:	b08d      	sub	sp, #52	@ 0x34
 800897a:	460c      	mov	r4, r1
 800897c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008980:	4616      	mov	r6, r2
 8008982:	461f      	mov	r7, r3
 8008984:	4605      	mov	r5, r0
 8008986:	f000 feef 	bl	8009768 <_localeconv_r>
 800898a:	6803      	ldr	r3, [r0, #0]
 800898c:	9304      	str	r3, [sp, #16]
 800898e:	4618      	mov	r0, r3
 8008990:	f7f7 fc96 	bl	80002c0 <strlen>
 8008994:	2300      	movs	r3, #0
 8008996:	930a      	str	r3, [sp, #40]	@ 0x28
 8008998:	f8d8 3000 	ldr.w	r3, [r8]
 800899c:	9005      	str	r0, [sp, #20]
 800899e:	3307      	adds	r3, #7
 80089a0:	f023 0307 	bic.w	r3, r3, #7
 80089a4:	f103 0208 	add.w	r2, r3, #8
 80089a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80089ac:	f8d4 b000 	ldr.w	fp, [r4]
 80089b0:	f8c8 2000 	str.w	r2, [r8]
 80089b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80089bc:	9307      	str	r3, [sp, #28]
 80089be:	f8cd 8018 	str.w	r8, [sp, #24]
 80089c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80089c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089ca:	4b9c      	ldr	r3, [pc, #624]	@ (8008c3c <_printf_float+0x2c8>)
 80089cc:	f04f 32ff 	mov.w	r2, #4294967295
 80089d0:	f7f8 f8d4 	bl	8000b7c <__aeabi_dcmpun>
 80089d4:	bb70      	cbnz	r0, 8008a34 <_printf_float+0xc0>
 80089d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089da:	4b98      	ldr	r3, [pc, #608]	@ (8008c3c <_printf_float+0x2c8>)
 80089dc:	f04f 32ff 	mov.w	r2, #4294967295
 80089e0:	f7f8 f8ae 	bl	8000b40 <__aeabi_dcmple>
 80089e4:	bb30      	cbnz	r0, 8008a34 <_printf_float+0xc0>
 80089e6:	2200      	movs	r2, #0
 80089e8:	2300      	movs	r3, #0
 80089ea:	4640      	mov	r0, r8
 80089ec:	4649      	mov	r1, r9
 80089ee:	f7f8 f89d 	bl	8000b2c <__aeabi_dcmplt>
 80089f2:	b110      	cbz	r0, 80089fa <_printf_float+0x86>
 80089f4:	232d      	movs	r3, #45	@ 0x2d
 80089f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089fa:	4a91      	ldr	r2, [pc, #580]	@ (8008c40 <_printf_float+0x2cc>)
 80089fc:	4b91      	ldr	r3, [pc, #580]	@ (8008c44 <_printf_float+0x2d0>)
 80089fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008a02:	bf94      	ite	ls
 8008a04:	4690      	movls	r8, r2
 8008a06:	4698      	movhi	r8, r3
 8008a08:	2303      	movs	r3, #3
 8008a0a:	6123      	str	r3, [r4, #16]
 8008a0c:	f02b 0304 	bic.w	r3, fp, #4
 8008a10:	6023      	str	r3, [r4, #0]
 8008a12:	f04f 0900 	mov.w	r9, #0
 8008a16:	9700      	str	r7, [sp, #0]
 8008a18:	4633      	mov	r3, r6
 8008a1a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	4628      	mov	r0, r5
 8008a20:	f000 f9d2 	bl	8008dc8 <_printf_common>
 8008a24:	3001      	adds	r0, #1
 8008a26:	f040 808d 	bne.w	8008b44 <_printf_float+0x1d0>
 8008a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a2e:	b00d      	add	sp, #52	@ 0x34
 8008a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a34:	4642      	mov	r2, r8
 8008a36:	464b      	mov	r3, r9
 8008a38:	4640      	mov	r0, r8
 8008a3a:	4649      	mov	r1, r9
 8008a3c:	f7f8 f89e 	bl	8000b7c <__aeabi_dcmpun>
 8008a40:	b140      	cbz	r0, 8008a54 <_printf_float+0xe0>
 8008a42:	464b      	mov	r3, r9
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	bfbc      	itt	lt
 8008a48:	232d      	movlt	r3, #45	@ 0x2d
 8008a4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008a4e:	4a7e      	ldr	r2, [pc, #504]	@ (8008c48 <_printf_float+0x2d4>)
 8008a50:	4b7e      	ldr	r3, [pc, #504]	@ (8008c4c <_printf_float+0x2d8>)
 8008a52:	e7d4      	b.n	80089fe <_printf_float+0x8a>
 8008a54:	6863      	ldr	r3, [r4, #4]
 8008a56:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008a5a:	9206      	str	r2, [sp, #24]
 8008a5c:	1c5a      	adds	r2, r3, #1
 8008a5e:	d13b      	bne.n	8008ad8 <_printf_float+0x164>
 8008a60:	2306      	movs	r3, #6
 8008a62:	6063      	str	r3, [r4, #4]
 8008a64:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008a68:	2300      	movs	r3, #0
 8008a6a:	6022      	str	r2, [r4, #0]
 8008a6c:	9303      	str	r3, [sp, #12]
 8008a6e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008a70:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008a74:	ab09      	add	r3, sp, #36	@ 0x24
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	6861      	ldr	r1, [r4, #4]
 8008a7a:	ec49 8b10 	vmov	d0, r8, r9
 8008a7e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008a82:	4628      	mov	r0, r5
 8008a84:	f7ff fed6 	bl	8008834 <__cvt>
 8008a88:	9b06      	ldr	r3, [sp, #24]
 8008a8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a8c:	2b47      	cmp	r3, #71	@ 0x47
 8008a8e:	4680      	mov	r8, r0
 8008a90:	d129      	bne.n	8008ae6 <_printf_float+0x172>
 8008a92:	1cc8      	adds	r0, r1, #3
 8008a94:	db02      	blt.n	8008a9c <_printf_float+0x128>
 8008a96:	6863      	ldr	r3, [r4, #4]
 8008a98:	4299      	cmp	r1, r3
 8008a9a:	dd41      	ble.n	8008b20 <_printf_float+0x1ac>
 8008a9c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008aa0:	fa5f fa8a 	uxtb.w	sl, sl
 8008aa4:	3901      	subs	r1, #1
 8008aa6:	4652      	mov	r2, sl
 8008aa8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008aac:	9109      	str	r1, [sp, #36]	@ 0x24
 8008aae:	f7ff ff26 	bl	80088fe <__exponent>
 8008ab2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ab4:	1813      	adds	r3, r2, r0
 8008ab6:	2a01      	cmp	r2, #1
 8008ab8:	4681      	mov	r9, r0
 8008aba:	6123      	str	r3, [r4, #16]
 8008abc:	dc02      	bgt.n	8008ac4 <_printf_float+0x150>
 8008abe:	6822      	ldr	r2, [r4, #0]
 8008ac0:	07d2      	lsls	r2, r2, #31
 8008ac2:	d501      	bpl.n	8008ac8 <_printf_float+0x154>
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	6123      	str	r3, [r4, #16]
 8008ac8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d0a2      	beq.n	8008a16 <_printf_float+0xa2>
 8008ad0:	232d      	movs	r3, #45	@ 0x2d
 8008ad2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ad6:	e79e      	b.n	8008a16 <_printf_float+0xa2>
 8008ad8:	9a06      	ldr	r2, [sp, #24]
 8008ada:	2a47      	cmp	r2, #71	@ 0x47
 8008adc:	d1c2      	bne.n	8008a64 <_printf_float+0xf0>
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1c0      	bne.n	8008a64 <_printf_float+0xf0>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e7bd      	b.n	8008a62 <_printf_float+0xee>
 8008ae6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008aea:	d9db      	bls.n	8008aa4 <_printf_float+0x130>
 8008aec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008af0:	d118      	bne.n	8008b24 <_printf_float+0x1b0>
 8008af2:	2900      	cmp	r1, #0
 8008af4:	6863      	ldr	r3, [r4, #4]
 8008af6:	dd0b      	ble.n	8008b10 <_printf_float+0x19c>
 8008af8:	6121      	str	r1, [r4, #16]
 8008afa:	b913      	cbnz	r3, 8008b02 <_printf_float+0x18e>
 8008afc:	6822      	ldr	r2, [r4, #0]
 8008afe:	07d0      	lsls	r0, r2, #31
 8008b00:	d502      	bpl.n	8008b08 <_printf_float+0x194>
 8008b02:	3301      	adds	r3, #1
 8008b04:	440b      	add	r3, r1
 8008b06:	6123      	str	r3, [r4, #16]
 8008b08:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008b0a:	f04f 0900 	mov.w	r9, #0
 8008b0e:	e7db      	b.n	8008ac8 <_printf_float+0x154>
 8008b10:	b913      	cbnz	r3, 8008b18 <_printf_float+0x1a4>
 8008b12:	6822      	ldr	r2, [r4, #0]
 8008b14:	07d2      	lsls	r2, r2, #31
 8008b16:	d501      	bpl.n	8008b1c <_printf_float+0x1a8>
 8008b18:	3302      	adds	r3, #2
 8008b1a:	e7f4      	b.n	8008b06 <_printf_float+0x192>
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e7f2      	b.n	8008b06 <_printf_float+0x192>
 8008b20:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008b24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b26:	4299      	cmp	r1, r3
 8008b28:	db05      	blt.n	8008b36 <_printf_float+0x1c2>
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	6121      	str	r1, [r4, #16]
 8008b2e:	07d8      	lsls	r0, r3, #31
 8008b30:	d5ea      	bpl.n	8008b08 <_printf_float+0x194>
 8008b32:	1c4b      	adds	r3, r1, #1
 8008b34:	e7e7      	b.n	8008b06 <_printf_float+0x192>
 8008b36:	2900      	cmp	r1, #0
 8008b38:	bfd4      	ite	le
 8008b3a:	f1c1 0202 	rsble	r2, r1, #2
 8008b3e:	2201      	movgt	r2, #1
 8008b40:	4413      	add	r3, r2
 8008b42:	e7e0      	b.n	8008b06 <_printf_float+0x192>
 8008b44:	6823      	ldr	r3, [r4, #0]
 8008b46:	055a      	lsls	r2, r3, #21
 8008b48:	d407      	bmi.n	8008b5a <_printf_float+0x1e6>
 8008b4a:	6923      	ldr	r3, [r4, #16]
 8008b4c:	4642      	mov	r2, r8
 8008b4e:	4631      	mov	r1, r6
 8008b50:	4628      	mov	r0, r5
 8008b52:	47b8      	blx	r7
 8008b54:	3001      	adds	r0, #1
 8008b56:	d12b      	bne.n	8008bb0 <_printf_float+0x23c>
 8008b58:	e767      	b.n	8008a2a <_printf_float+0xb6>
 8008b5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008b5e:	f240 80dd 	bls.w	8008d1c <_printf_float+0x3a8>
 8008b62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008b66:	2200      	movs	r2, #0
 8008b68:	2300      	movs	r3, #0
 8008b6a:	f7f7 ffd5 	bl	8000b18 <__aeabi_dcmpeq>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	d033      	beq.n	8008bda <_printf_float+0x266>
 8008b72:	4a37      	ldr	r2, [pc, #220]	@ (8008c50 <_printf_float+0x2dc>)
 8008b74:	2301      	movs	r3, #1
 8008b76:	4631      	mov	r1, r6
 8008b78:	4628      	mov	r0, r5
 8008b7a:	47b8      	blx	r7
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	f43f af54 	beq.w	8008a2a <_printf_float+0xb6>
 8008b82:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008b86:	4543      	cmp	r3, r8
 8008b88:	db02      	blt.n	8008b90 <_printf_float+0x21c>
 8008b8a:	6823      	ldr	r3, [r4, #0]
 8008b8c:	07d8      	lsls	r0, r3, #31
 8008b8e:	d50f      	bpl.n	8008bb0 <_printf_float+0x23c>
 8008b90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b94:	4631      	mov	r1, r6
 8008b96:	4628      	mov	r0, r5
 8008b98:	47b8      	blx	r7
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	f43f af45 	beq.w	8008a2a <_printf_float+0xb6>
 8008ba0:	f04f 0900 	mov.w	r9, #0
 8008ba4:	f108 38ff 	add.w	r8, r8, #4294967295
 8008ba8:	f104 0a1a 	add.w	sl, r4, #26
 8008bac:	45c8      	cmp	r8, r9
 8008bae:	dc09      	bgt.n	8008bc4 <_printf_float+0x250>
 8008bb0:	6823      	ldr	r3, [r4, #0]
 8008bb2:	079b      	lsls	r3, r3, #30
 8008bb4:	f100 8103 	bmi.w	8008dbe <_printf_float+0x44a>
 8008bb8:	68e0      	ldr	r0, [r4, #12]
 8008bba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bbc:	4298      	cmp	r0, r3
 8008bbe:	bfb8      	it	lt
 8008bc0:	4618      	movlt	r0, r3
 8008bc2:	e734      	b.n	8008a2e <_printf_float+0xba>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	4652      	mov	r2, sl
 8008bc8:	4631      	mov	r1, r6
 8008bca:	4628      	mov	r0, r5
 8008bcc:	47b8      	blx	r7
 8008bce:	3001      	adds	r0, #1
 8008bd0:	f43f af2b 	beq.w	8008a2a <_printf_float+0xb6>
 8008bd4:	f109 0901 	add.w	r9, r9, #1
 8008bd8:	e7e8      	b.n	8008bac <_printf_float+0x238>
 8008bda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	dc39      	bgt.n	8008c54 <_printf_float+0x2e0>
 8008be0:	4a1b      	ldr	r2, [pc, #108]	@ (8008c50 <_printf_float+0x2dc>)
 8008be2:	2301      	movs	r3, #1
 8008be4:	4631      	mov	r1, r6
 8008be6:	4628      	mov	r0, r5
 8008be8:	47b8      	blx	r7
 8008bea:	3001      	adds	r0, #1
 8008bec:	f43f af1d 	beq.w	8008a2a <_printf_float+0xb6>
 8008bf0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008bf4:	ea59 0303 	orrs.w	r3, r9, r3
 8008bf8:	d102      	bne.n	8008c00 <_printf_float+0x28c>
 8008bfa:	6823      	ldr	r3, [r4, #0]
 8008bfc:	07d9      	lsls	r1, r3, #31
 8008bfe:	d5d7      	bpl.n	8008bb0 <_printf_float+0x23c>
 8008c00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c04:	4631      	mov	r1, r6
 8008c06:	4628      	mov	r0, r5
 8008c08:	47b8      	blx	r7
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	f43f af0d 	beq.w	8008a2a <_printf_float+0xb6>
 8008c10:	f04f 0a00 	mov.w	sl, #0
 8008c14:	f104 0b1a 	add.w	fp, r4, #26
 8008c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c1a:	425b      	negs	r3, r3
 8008c1c:	4553      	cmp	r3, sl
 8008c1e:	dc01      	bgt.n	8008c24 <_printf_float+0x2b0>
 8008c20:	464b      	mov	r3, r9
 8008c22:	e793      	b.n	8008b4c <_printf_float+0x1d8>
 8008c24:	2301      	movs	r3, #1
 8008c26:	465a      	mov	r2, fp
 8008c28:	4631      	mov	r1, r6
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	47b8      	blx	r7
 8008c2e:	3001      	adds	r0, #1
 8008c30:	f43f aefb 	beq.w	8008a2a <_printf_float+0xb6>
 8008c34:	f10a 0a01 	add.w	sl, sl, #1
 8008c38:	e7ee      	b.n	8008c18 <_printf_float+0x2a4>
 8008c3a:	bf00      	nop
 8008c3c:	7fefffff 	.word	0x7fefffff
 8008c40:	0800cff8 	.word	0x0800cff8
 8008c44:	0800cffc 	.word	0x0800cffc
 8008c48:	0800d000 	.word	0x0800d000
 8008c4c:	0800d004 	.word	0x0800d004
 8008c50:	0800d008 	.word	0x0800d008
 8008c54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c5a:	4553      	cmp	r3, sl
 8008c5c:	bfa8      	it	ge
 8008c5e:	4653      	movge	r3, sl
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	4699      	mov	r9, r3
 8008c64:	dc36      	bgt.n	8008cd4 <_printf_float+0x360>
 8008c66:	f04f 0b00 	mov.w	fp, #0
 8008c6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c6e:	f104 021a 	add.w	r2, r4, #26
 8008c72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c74:	9306      	str	r3, [sp, #24]
 8008c76:	eba3 0309 	sub.w	r3, r3, r9
 8008c7a:	455b      	cmp	r3, fp
 8008c7c:	dc31      	bgt.n	8008ce2 <_printf_float+0x36e>
 8008c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c80:	459a      	cmp	sl, r3
 8008c82:	dc3a      	bgt.n	8008cfa <_printf_float+0x386>
 8008c84:	6823      	ldr	r3, [r4, #0]
 8008c86:	07da      	lsls	r2, r3, #31
 8008c88:	d437      	bmi.n	8008cfa <_printf_float+0x386>
 8008c8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c8c:	ebaa 0903 	sub.w	r9, sl, r3
 8008c90:	9b06      	ldr	r3, [sp, #24]
 8008c92:	ebaa 0303 	sub.w	r3, sl, r3
 8008c96:	4599      	cmp	r9, r3
 8008c98:	bfa8      	it	ge
 8008c9a:	4699      	movge	r9, r3
 8008c9c:	f1b9 0f00 	cmp.w	r9, #0
 8008ca0:	dc33      	bgt.n	8008d0a <_printf_float+0x396>
 8008ca2:	f04f 0800 	mov.w	r8, #0
 8008ca6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008caa:	f104 0b1a 	add.w	fp, r4, #26
 8008cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cb0:	ebaa 0303 	sub.w	r3, sl, r3
 8008cb4:	eba3 0309 	sub.w	r3, r3, r9
 8008cb8:	4543      	cmp	r3, r8
 8008cba:	f77f af79 	ble.w	8008bb0 <_printf_float+0x23c>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	465a      	mov	r2, fp
 8008cc2:	4631      	mov	r1, r6
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	47b8      	blx	r7
 8008cc8:	3001      	adds	r0, #1
 8008cca:	f43f aeae 	beq.w	8008a2a <_printf_float+0xb6>
 8008cce:	f108 0801 	add.w	r8, r8, #1
 8008cd2:	e7ec      	b.n	8008cae <_printf_float+0x33a>
 8008cd4:	4642      	mov	r2, r8
 8008cd6:	4631      	mov	r1, r6
 8008cd8:	4628      	mov	r0, r5
 8008cda:	47b8      	blx	r7
 8008cdc:	3001      	adds	r0, #1
 8008cde:	d1c2      	bne.n	8008c66 <_printf_float+0x2f2>
 8008ce0:	e6a3      	b.n	8008a2a <_printf_float+0xb6>
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	4631      	mov	r1, r6
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	9206      	str	r2, [sp, #24]
 8008cea:	47b8      	blx	r7
 8008cec:	3001      	adds	r0, #1
 8008cee:	f43f ae9c 	beq.w	8008a2a <_printf_float+0xb6>
 8008cf2:	9a06      	ldr	r2, [sp, #24]
 8008cf4:	f10b 0b01 	add.w	fp, fp, #1
 8008cf8:	e7bb      	b.n	8008c72 <_printf_float+0x2fe>
 8008cfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cfe:	4631      	mov	r1, r6
 8008d00:	4628      	mov	r0, r5
 8008d02:	47b8      	blx	r7
 8008d04:	3001      	adds	r0, #1
 8008d06:	d1c0      	bne.n	8008c8a <_printf_float+0x316>
 8008d08:	e68f      	b.n	8008a2a <_printf_float+0xb6>
 8008d0a:	9a06      	ldr	r2, [sp, #24]
 8008d0c:	464b      	mov	r3, r9
 8008d0e:	4442      	add	r2, r8
 8008d10:	4631      	mov	r1, r6
 8008d12:	4628      	mov	r0, r5
 8008d14:	47b8      	blx	r7
 8008d16:	3001      	adds	r0, #1
 8008d18:	d1c3      	bne.n	8008ca2 <_printf_float+0x32e>
 8008d1a:	e686      	b.n	8008a2a <_printf_float+0xb6>
 8008d1c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008d20:	f1ba 0f01 	cmp.w	sl, #1
 8008d24:	dc01      	bgt.n	8008d2a <_printf_float+0x3b6>
 8008d26:	07db      	lsls	r3, r3, #31
 8008d28:	d536      	bpl.n	8008d98 <_printf_float+0x424>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	4642      	mov	r2, r8
 8008d2e:	4631      	mov	r1, r6
 8008d30:	4628      	mov	r0, r5
 8008d32:	47b8      	blx	r7
 8008d34:	3001      	adds	r0, #1
 8008d36:	f43f ae78 	beq.w	8008a2a <_printf_float+0xb6>
 8008d3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d3e:	4631      	mov	r1, r6
 8008d40:	4628      	mov	r0, r5
 8008d42:	47b8      	blx	r7
 8008d44:	3001      	adds	r0, #1
 8008d46:	f43f ae70 	beq.w	8008a2a <_printf_float+0xb6>
 8008d4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008d4e:	2200      	movs	r2, #0
 8008d50:	2300      	movs	r3, #0
 8008d52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d56:	f7f7 fedf 	bl	8000b18 <__aeabi_dcmpeq>
 8008d5a:	b9c0      	cbnz	r0, 8008d8e <_printf_float+0x41a>
 8008d5c:	4653      	mov	r3, sl
 8008d5e:	f108 0201 	add.w	r2, r8, #1
 8008d62:	4631      	mov	r1, r6
 8008d64:	4628      	mov	r0, r5
 8008d66:	47b8      	blx	r7
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d10c      	bne.n	8008d86 <_printf_float+0x412>
 8008d6c:	e65d      	b.n	8008a2a <_printf_float+0xb6>
 8008d6e:	2301      	movs	r3, #1
 8008d70:	465a      	mov	r2, fp
 8008d72:	4631      	mov	r1, r6
 8008d74:	4628      	mov	r0, r5
 8008d76:	47b8      	blx	r7
 8008d78:	3001      	adds	r0, #1
 8008d7a:	f43f ae56 	beq.w	8008a2a <_printf_float+0xb6>
 8008d7e:	f108 0801 	add.w	r8, r8, #1
 8008d82:	45d0      	cmp	r8, sl
 8008d84:	dbf3      	blt.n	8008d6e <_printf_float+0x3fa>
 8008d86:	464b      	mov	r3, r9
 8008d88:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008d8c:	e6df      	b.n	8008b4e <_printf_float+0x1da>
 8008d8e:	f04f 0800 	mov.w	r8, #0
 8008d92:	f104 0b1a 	add.w	fp, r4, #26
 8008d96:	e7f4      	b.n	8008d82 <_printf_float+0x40e>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	4642      	mov	r2, r8
 8008d9c:	e7e1      	b.n	8008d62 <_printf_float+0x3ee>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	464a      	mov	r2, r9
 8008da2:	4631      	mov	r1, r6
 8008da4:	4628      	mov	r0, r5
 8008da6:	47b8      	blx	r7
 8008da8:	3001      	adds	r0, #1
 8008daa:	f43f ae3e 	beq.w	8008a2a <_printf_float+0xb6>
 8008dae:	f108 0801 	add.w	r8, r8, #1
 8008db2:	68e3      	ldr	r3, [r4, #12]
 8008db4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008db6:	1a5b      	subs	r3, r3, r1
 8008db8:	4543      	cmp	r3, r8
 8008dba:	dcf0      	bgt.n	8008d9e <_printf_float+0x42a>
 8008dbc:	e6fc      	b.n	8008bb8 <_printf_float+0x244>
 8008dbe:	f04f 0800 	mov.w	r8, #0
 8008dc2:	f104 0919 	add.w	r9, r4, #25
 8008dc6:	e7f4      	b.n	8008db2 <_printf_float+0x43e>

08008dc8 <_printf_common>:
 8008dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dcc:	4616      	mov	r6, r2
 8008dce:	4698      	mov	r8, r3
 8008dd0:	688a      	ldr	r2, [r1, #8]
 8008dd2:	690b      	ldr	r3, [r1, #16]
 8008dd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	bfb8      	it	lt
 8008ddc:	4613      	movlt	r3, r2
 8008dde:	6033      	str	r3, [r6, #0]
 8008de0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008de4:	4607      	mov	r7, r0
 8008de6:	460c      	mov	r4, r1
 8008de8:	b10a      	cbz	r2, 8008dee <_printf_common+0x26>
 8008dea:	3301      	adds	r3, #1
 8008dec:	6033      	str	r3, [r6, #0]
 8008dee:	6823      	ldr	r3, [r4, #0]
 8008df0:	0699      	lsls	r1, r3, #26
 8008df2:	bf42      	ittt	mi
 8008df4:	6833      	ldrmi	r3, [r6, #0]
 8008df6:	3302      	addmi	r3, #2
 8008df8:	6033      	strmi	r3, [r6, #0]
 8008dfa:	6825      	ldr	r5, [r4, #0]
 8008dfc:	f015 0506 	ands.w	r5, r5, #6
 8008e00:	d106      	bne.n	8008e10 <_printf_common+0x48>
 8008e02:	f104 0a19 	add.w	sl, r4, #25
 8008e06:	68e3      	ldr	r3, [r4, #12]
 8008e08:	6832      	ldr	r2, [r6, #0]
 8008e0a:	1a9b      	subs	r3, r3, r2
 8008e0c:	42ab      	cmp	r3, r5
 8008e0e:	dc26      	bgt.n	8008e5e <_printf_common+0x96>
 8008e10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e14:	6822      	ldr	r2, [r4, #0]
 8008e16:	3b00      	subs	r3, #0
 8008e18:	bf18      	it	ne
 8008e1a:	2301      	movne	r3, #1
 8008e1c:	0692      	lsls	r2, r2, #26
 8008e1e:	d42b      	bmi.n	8008e78 <_printf_common+0xb0>
 8008e20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e24:	4641      	mov	r1, r8
 8008e26:	4638      	mov	r0, r7
 8008e28:	47c8      	blx	r9
 8008e2a:	3001      	adds	r0, #1
 8008e2c:	d01e      	beq.n	8008e6c <_printf_common+0xa4>
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	6922      	ldr	r2, [r4, #16]
 8008e32:	f003 0306 	and.w	r3, r3, #6
 8008e36:	2b04      	cmp	r3, #4
 8008e38:	bf02      	ittt	eq
 8008e3a:	68e5      	ldreq	r5, [r4, #12]
 8008e3c:	6833      	ldreq	r3, [r6, #0]
 8008e3e:	1aed      	subeq	r5, r5, r3
 8008e40:	68a3      	ldr	r3, [r4, #8]
 8008e42:	bf0c      	ite	eq
 8008e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e48:	2500      	movne	r5, #0
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	bfc4      	itt	gt
 8008e4e:	1a9b      	subgt	r3, r3, r2
 8008e50:	18ed      	addgt	r5, r5, r3
 8008e52:	2600      	movs	r6, #0
 8008e54:	341a      	adds	r4, #26
 8008e56:	42b5      	cmp	r5, r6
 8008e58:	d11a      	bne.n	8008e90 <_printf_common+0xc8>
 8008e5a:	2000      	movs	r0, #0
 8008e5c:	e008      	b.n	8008e70 <_printf_common+0xa8>
 8008e5e:	2301      	movs	r3, #1
 8008e60:	4652      	mov	r2, sl
 8008e62:	4641      	mov	r1, r8
 8008e64:	4638      	mov	r0, r7
 8008e66:	47c8      	blx	r9
 8008e68:	3001      	adds	r0, #1
 8008e6a:	d103      	bne.n	8008e74 <_printf_common+0xac>
 8008e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e74:	3501      	adds	r5, #1
 8008e76:	e7c6      	b.n	8008e06 <_printf_common+0x3e>
 8008e78:	18e1      	adds	r1, r4, r3
 8008e7a:	1c5a      	adds	r2, r3, #1
 8008e7c:	2030      	movs	r0, #48	@ 0x30
 8008e7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e82:	4422      	add	r2, r4
 8008e84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e8c:	3302      	adds	r3, #2
 8008e8e:	e7c7      	b.n	8008e20 <_printf_common+0x58>
 8008e90:	2301      	movs	r3, #1
 8008e92:	4622      	mov	r2, r4
 8008e94:	4641      	mov	r1, r8
 8008e96:	4638      	mov	r0, r7
 8008e98:	47c8      	blx	r9
 8008e9a:	3001      	adds	r0, #1
 8008e9c:	d0e6      	beq.n	8008e6c <_printf_common+0xa4>
 8008e9e:	3601      	adds	r6, #1
 8008ea0:	e7d9      	b.n	8008e56 <_printf_common+0x8e>
	...

08008ea4 <_printf_i>:
 8008ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ea8:	7e0f      	ldrb	r7, [r1, #24]
 8008eaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008eac:	2f78      	cmp	r7, #120	@ 0x78
 8008eae:	4691      	mov	r9, r2
 8008eb0:	4680      	mov	r8, r0
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	469a      	mov	sl, r3
 8008eb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008eba:	d807      	bhi.n	8008ecc <_printf_i+0x28>
 8008ebc:	2f62      	cmp	r7, #98	@ 0x62
 8008ebe:	d80a      	bhi.n	8008ed6 <_printf_i+0x32>
 8008ec0:	2f00      	cmp	r7, #0
 8008ec2:	f000 80d2 	beq.w	800906a <_printf_i+0x1c6>
 8008ec6:	2f58      	cmp	r7, #88	@ 0x58
 8008ec8:	f000 80b9 	beq.w	800903e <_printf_i+0x19a>
 8008ecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ed0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ed4:	e03a      	b.n	8008f4c <_printf_i+0xa8>
 8008ed6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008eda:	2b15      	cmp	r3, #21
 8008edc:	d8f6      	bhi.n	8008ecc <_printf_i+0x28>
 8008ede:	a101      	add	r1, pc, #4	@ (adr r1, 8008ee4 <_printf_i+0x40>)
 8008ee0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ee4:	08008f3d 	.word	0x08008f3d
 8008ee8:	08008f51 	.word	0x08008f51
 8008eec:	08008ecd 	.word	0x08008ecd
 8008ef0:	08008ecd 	.word	0x08008ecd
 8008ef4:	08008ecd 	.word	0x08008ecd
 8008ef8:	08008ecd 	.word	0x08008ecd
 8008efc:	08008f51 	.word	0x08008f51
 8008f00:	08008ecd 	.word	0x08008ecd
 8008f04:	08008ecd 	.word	0x08008ecd
 8008f08:	08008ecd 	.word	0x08008ecd
 8008f0c:	08008ecd 	.word	0x08008ecd
 8008f10:	08009051 	.word	0x08009051
 8008f14:	08008f7b 	.word	0x08008f7b
 8008f18:	0800900b 	.word	0x0800900b
 8008f1c:	08008ecd 	.word	0x08008ecd
 8008f20:	08008ecd 	.word	0x08008ecd
 8008f24:	08009073 	.word	0x08009073
 8008f28:	08008ecd 	.word	0x08008ecd
 8008f2c:	08008f7b 	.word	0x08008f7b
 8008f30:	08008ecd 	.word	0x08008ecd
 8008f34:	08008ecd 	.word	0x08008ecd
 8008f38:	08009013 	.word	0x08009013
 8008f3c:	6833      	ldr	r3, [r6, #0]
 8008f3e:	1d1a      	adds	r2, r3, #4
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	6032      	str	r2, [r6, #0]
 8008f44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e09d      	b.n	800908c <_printf_i+0x1e8>
 8008f50:	6833      	ldr	r3, [r6, #0]
 8008f52:	6820      	ldr	r0, [r4, #0]
 8008f54:	1d19      	adds	r1, r3, #4
 8008f56:	6031      	str	r1, [r6, #0]
 8008f58:	0606      	lsls	r6, r0, #24
 8008f5a:	d501      	bpl.n	8008f60 <_printf_i+0xbc>
 8008f5c:	681d      	ldr	r5, [r3, #0]
 8008f5e:	e003      	b.n	8008f68 <_printf_i+0xc4>
 8008f60:	0645      	lsls	r5, r0, #25
 8008f62:	d5fb      	bpl.n	8008f5c <_printf_i+0xb8>
 8008f64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f68:	2d00      	cmp	r5, #0
 8008f6a:	da03      	bge.n	8008f74 <_printf_i+0xd0>
 8008f6c:	232d      	movs	r3, #45	@ 0x2d
 8008f6e:	426d      	negs	r5, r5
 8008f70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f74:	4859      	ldr	r0, [pc, #356]	@ (80090dc <_printf_i+0x238>)
 8008f76:	230a      	movs	r3, #10
 8008f78:	e011      	b.n	8008f9e <_printf_i+0xfa>
 8008f7a:	6821      	ldr	r1, [r4, #0]
 8008f7c:	6833      	ldr	r3, [r6, #0]
 8008f7e:	0608      	lsls	r0, r1, #24
 8008f80:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f84:	d402      	bmi.n	8008f8c <_printf_i+0xe8>
 8008f86:	0649      	lsls	r1, r1, #25
 8008f88:	bf48      	it	mi
 8008f8a:	b2ad      	uxthmi	r5, r5
 8008f8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f8e:	4853      	ldr	r0, [pc, #332]	@ (80090dc <_printf_i+0x238>)
 8008f90:	6033      	str	r3, [r6, #0]
 8008f92:	bf14      	ite	ne
 8008f94:	230a      	movne	r3, #10
 8008f96:	2308      	moveq	r3, #8
 8008f98:	2100      	movs	r1, #0
 8008f9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f9e:	6866      	ldr	r6, [r4, #4]
 8008fa0:	60a6      	str	r6, [r4, #8]
 8008fa2:	2e00      	cmp	r6, #0
 8008fa4:	bfa2      	ittt	ge
 8008fa6:	6821      	ldrge	r1, [r4, #0]
 8008fa8:	f021 0104 	bicge.w	r1, r1, #4
 8008fac:	6021      	strge	r1, [r4, #0]
 8008fae:	b90d      	cbnz	r5, 8008fb4 <_printf_i+0x110>
 8008fb0:	2e00      	cmp	r6, #0
 8008fb2:	d04b      	beq.n	800904c <_printf_i+0x1a8>
 8008fb4:	4616      	mov	r6, r2
 8008fb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008fba:	fb03 5711 	mls	r7, r3, r1, r5
 8008fbe:	5dc7      	ldrb	r7, [r0, r7]
 8008fc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008fc4:	462f      	mov	r7, r5
 8008fc6:	42bb      	cmp	r3, r7
 8008fc8:	460d      	mov	r5, r1
 8008fca:	d9f4      	bls.n	8008fb6 <_printf_i+0x112>
 8008fcc:	2b08      	cmp	r3, #8
 8008fce:	d10b      	bne.n	8008fe8 <_printf_i+0x144>
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	07df      	lsls	r7, r3, #31
 8008fd4:	d508      	bpl.n	8008fe8 <_printf_i+0x144>
 8008fd6:	6923      	ldr	r3, [r4, #16]
 8008fd8:	6861      	ldr	r1, [r4, #4]
 8008fda:	4299      	cmp	r1, r3
 8008fdc:	bfde      	ittt	le
 8008fde:	2330      	movle	r3, #48	@ 0x30
 8008fe0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008fe4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008fe8:	1b92      	subs	r2, r2, r6
 8008fea:	6122      	str	r2, [r4, #16]
 8008fec:	f8cd a000 	str.w	sl, [sp]
 8008ff0:	464b      	mov	r3, r9
 8008ff2:	aa03      	add	r2, sp, #12
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	4640      	mov	r0, r8
 8008ff8:	f7ff fee6 	bl	8008dc8 <_printf_common>
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	d14a      	bne.n	8009096 <_printf_i+0x1f2>
 8009000:	f04f 30ff 	mov.w	r0, #4294967295
 8009004:	b004      	add	sp, #16
 8009006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	f043 0320 	orr.w	r3, r3, #32
 8009010:	6023      	str	r3, [r4, #0]
 8009012:	4833      	ldr	r0, [pc, #204]	@ (80090e0 <_printf_i+0x23c>)
 8009014:	2778      	movs	r7, #120	@ 0x78
 8009016:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	6831      	ldr	r1, [r6, #0]
 800901e:	061f      	lsls	r7, r3, #24
 8009020:	f851 5b04 	ldr.w	r5, [r1], #4
 8009024:	d402      	bmi.n	800902c <_printf_i+0x188>
 8009026:	065f      	lsls	r7, r3, #25
 8009028:	bf48      	it	mi
 800902a:	b2ad      	uxthmi	r5, r5
 800902c:	6031      	str	r1, [r6, #0]
 800902e:	07d9      	lsls	r1, r3, #31
 8009030:	bf44      	itt	mi
 8009032:	f043 0320 	orrmi.w	r3, r3, #32
 8009036:	6023      	strmi	r3, [r4, #0]
 8009038:	b11d      	cbz	r5, 8009042 <_printf_i+0x19e>
 800903a:	2310      	movs	r3, #16
 800903c:	e7ac      	b.n	8008f98 <_printf_i+0xf4>
 800903e:	4827      	ldr	r0, [pc, #156]	@ (80090dc <_printf_i+0x238>)
 8009040:	e7e9      	b.n	8009016 <_printf_i+0x172>
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	f023 0320 	bic.w	r3, r3, #32
 8009048:	6023      	str	r3, [r4, #0]
 800904a:	e7f6      	b.n	800903a <_printf_i+0x196>
 800904c:	4616      	mov	r6, r2
 800904e:	e7bd      	b.n	8008fcc <_printf_i+0x128>
 8009050:	6833      	ldr	r3, [r6, #0]
 8009052:	6825      	ldr	r5, [r4, #0]
 8009054:	6961      	ldr	r1, [r4, #20]
 8009056:	1d18      	adds	r0, r3, #4
 8009058:	6030      	str	r0, [r6, #0]
 800905a:	062e      	lsls	r6, r5, #24
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	d501      	bpl.n	8009064 <_printf_i+0x1c0>
 8009060:	6019      	str	r1, [r3, #0]
 8009062:	e002      	b.n	800906a <_printf_i+0x1c6>
 8009064:	0668      	lsls	r0, r5, #25
 8009066:	d5fb      	bpl.n	8009060 <_printf_i+0x1bc>
 8009068:	8019      	strh	r1, [r3, #0]
 800906a:	2300      	movs	r3, #0
 800906c:	6123      	str	r3, [r4, #16]
 800906e:	4616      	mov	r6, r2
 8009070:	e7bc      	b.n	8008fec <_printf_i+0x148>
 8009072:	6833      	ldr	r3, [r6, #0]
 8009074:	1d1a      	adds	r2, r3, #4
 8009076:	6032      	str	r2, [r6, #0]
 8009078:	681e      	ldr	r6, [r3, #0]
 800907a:	6862      	ldr	r2, [r4, #4]
 800907c:	2100      	movs	r1, #0
 800907e:	4630      	mov	r0, r6
 8009080:	f7f7 f8ce 	bl	8000220 <memchr>
 8009084:	b108      	cbz	r0, 800908a <_printf_i+0x1e6>
 8009086:	1b80      	subs	r0, r0, r6
 8009088:	6060      	str	r0, [r4, #4]
 800908a:	6863      	ldr	r3, [r4, #4]
 800908c:	6123      	str	r3, [r4, #16]
 800908e:	2300      	movs	r3, #0
 8009090:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009094:	e7aa      	b.n	8008fec <_printf_i+0x148>
 8009096:	6923      	ldr	r3, [r4, #16]
 8009098:	4632      	mov	r2, r6
 800909a:	4649      	mov	r1, r9
 800909c:	4640      	mov	r0, r8
 800909e:	47d0      	blx	sl
 80090a0:	3001      	adds	r0, #1
 80090a2:	d0ad      	beq.n	8009000 <_printf_i+0x15c>
 80090a4:	6823      	ldr	r3, [r4, #0]
 80090a6:	079b      	lsls	r3, r3, #30
 80090a8:	d413      	bmi.n	80090d2 <_printf_i+0x22e>
 80090aa:	68e0      	ldr	r0, [r4, #12]
 80090ac:	9b03      	ldr	r3, [sp, #12]
 80090ae:	4298      	cmp	r0, r3
 80090b0:	bfb8      	it	lt
 80090b2:	4618      	movlt	r0, r3
 80090b4:	e7a6      	b.n	8009004 <_printf_i+0x160>
 80090b6:	2301      	movs	r3, #1
 80090b8:	4632      	mov	r2, r6
 80090ba:	4649      	mov	r1, r9
 80090bc:	4640      	mov	r0, r8
 80090be:	47d0      	blx	sl
 80090c0:	3001      	adds	r0, #1
 80090c2:	d09d      	beq.n	8009000 <_printf_i+0x15c>
 80090c4:	3501      	adds	r5, #1
 80090c6:	68e3      	ldr	r3, [r4, #12]
 80090c8:	9903      	ldr	r1, [sp, #12]
 80090ca:	1a5b      	subs	r3, r3, r1
 80090cc:	42ab      	cmp	r3, r5
 80090ce:	dcf2      	bgt.n	80090b6 <_printf_i+0x212>
 80090d0:	e7eb      	b.n	80090aa <_printf_i+0x206>
 80090d2:	2500      	movs	r5, #0
 80090d4:	f104 0619 	add.w	r6, r4, #25
 80090d8:	e7f5      	b.n	80090c6 <_printf_i+0x222>
 80090da:	bf00      	nop
 80090dc:	0800d00a 	.word	0x0800d00a
 80090e0:	0800d01b 	.word	0x0800d01b

080090e4 <_scanf_float>:
 80090e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e8:	b087      	sub	sp, #28
 80090ea:	4617      	mov	r7, r2
 80090ec:	9303      	str	r3, [sp, #12]
 80090ee:	688b      	ldr	r3, [r1, #8]
 80090f0:	1e5a      	subs	r2, r3, #1
 80090f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80090f6:	bf81      	itttt	hi
 80090f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80090fc:	eb03 0b05 	addhi.w	fp, r3, r5
 8009100:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009104:	608b      	strhi	r3, [r1, #8]
 8009106:	680b      	ldr	r3, [r1, #0]
 8009108:	460a      	mov	r2, r1
 800910a:	f04f 0500 	mov.w	r5, #0
 800910e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009112:	f842 3b1c 	str.w	r3, [r2], #28
 8009116:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800911a:	4680      	mov	r8, r0
 800911c:	460c      	mov	r4, r1
 800911e:	bf98      	it	ls
 8009120:	f04f 0b00 	movls.w	fp, #0
 8009124:	9201      	str	r2, [sp, #4]
 8009126:	4616      	mov	r6, r2
 8009128:	46aa      	mov	sl, r5
 800912a:	46a9      	mov	r9, r5
 800912c:	9502      	str	r5, [sp, #8]
 800912e:	68a2      	ldr	r2, [r4, #8]
 8009130:	b152      	cbz	r2, 8009148 <_scanf_float+0x64>
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	2b4e      	cmp	r3, #78	@ 0x4e
 8009138:	d864      	bhi.n	8009204 <_scanf_float+0x120>
 800913a:	2b40      	cmp	r3, #64	@ 0x40
 800913c:	d83c      	bhi.n	80091b8 <_scanf_float+0xd4>
 800913e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009142:	b2c8      	uxtb	r0, r1
 8009144:	280e      	cmp	r0, #14
 8009146:	d93a      	bls.n	80091be <_scanf_float+0xda>
 8009148:	f1b9 0f00 	cmp.w	r9, #0
 800914c:	d003      	beq.n	8009156 <_scanf_float+0x72>
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009154:	6023      	str	r3, [r4, #0]
 8009156:	f10a 3aff 	add.w	sl, sl, #4294967295
 800915a:	f1ba 0f01 	cmp.w	sl, #1
 800915e:	f200 8117 	bhi.w	8009390 <_scanf_float+0x2ac>
 8009162:	9b01      	ldr	r3, [sp, #4]
 8009164:	429e      	cmp	r6, r3
 8009166:	f200 8108 	bhi.w	800937a <_scanf_float+0x296>
 800916a:	2001      	movs	r0, #1
 800916c:	b007      	add	sp, #28
 800916e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009172:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009176:	2a0d      	cmp	r2, #13
 8009178:	d8e6      	bhi.n	8009148 <_scanf_float+0x64>
 800917a:	a101      	add	r1, pc, #4	@ (adr r1, 8009180 <_scanf_float+0x9c>)
 800917c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009180:	080092c7 	.word	0x080092c7
 8009184:	08009149 	.word	0x08009149
 8009188:	08009149 	.word	0x08009149
 800918c:	08009149 	.word	0x08009149
 8009190:	08009327 	.word	0x08009327
 8009194:	080092ff 	.word	0x080092ff
 8009198:	08009149 	.word	0x08009149
 800919c:	08009149 	.word	0x08009149
 80091a0:	080092d5 	.word	0x080092d5
 80091a4:	08009149 	.word	0x08009149
 80091a8:	08009149 	.word	0x08009149
 80091ac:	08009149 	.word	0x08009149
 80091b0:	08009149 	.word	0x08009149
 80091b4:	0800928d 	.word	0x0800928d
 80091b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80091bc:	e7db      	b.n	8009176 <_scanf_float+0x92>
 80091be:	290e      	cmp	r1, #14
 80091c0:	d8c2      	bhi.n	8009148 <_scanf_float+0x64>
 80091c2:	a001      	add	r0, pc, #4	@ (adr r0, 80091c8 <_scanf_float+0xe4>)
 80091c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80091c8:	0800927d 	.word	0x0800927d
 80091cc:	08009149 	.word	0x08009149
 80091d0:	0800927d 	.word	0x0800927d
 80091d4:	08009313 	.word	0x08009313
 80091d8:	08009149 	.word	0x08009149
 80091dc:	08009225 	.word	0x08009225
 80091e0:	08009263 	.word	0x08009263
 80091e4:	08009263 	.word	0x08009263
 80091e8:	08009263 	.word	0x08009263
 80091ec:	08009263 	.word	0x08009263
 80091f0:	08009263 	.word	0x08009263
 80091f4:	08009263 	.word	0x08009263
 80091f8:	08009263 	.word	0x08009263
 80091fc:	08009263 	.word	0x08009263
 8009200:	08009263 	.word	0x08009263
 8009204:	2b6e      	cmp	r3, #110	@ 0x6e
 8009206:	d809      	bhi.n	800921c <_scanf_float+0x138>
 8009208:	2b60      	cmp	r3, #96	@ 0x60
 800920a:	d8b2      	bhi.n	8009172 <_scanf_float+0x8e>
 800920c:	2b54      	cmp	r3, #84	@ 0x54
 800920e:	d07b      	beq.n	8009308 <_scanf_float+0x224>
 8009210:	2b59      	cmp	r3, #89	@ 0x59
 8009212:	d199      	bne.n	8009148 <_scanf_float+0x64>
 8009214:	2d07      	cmp	r5, #7
 8009216:	d197      	bne.n	8009148 <_scanf_float+0x64>
 8009218:	2508      	movs	r5, #8
 800921a:	e02c      	b.n	8009276 <_scanf_float+0x192>
 800921c:	2b74      	cmp	r3, #116	@ 0x74
 800921e:	d073      	beq.n	8009308 <_scanf_float+0x224>
 8009220:	2b79      	cmp	r3, #121	@ 0x79
 8009222:	e7f6      	b.n	8009212 <_scanf_float+0x12e>
 8009224:	6821      	ldr	r1, [r4, #0]
 8009226:	05c8      	lsls	r0, r1, #23
 8009228:	d51b      	bpl.n	8009262 <_scanf_float+0x17e>
 800922a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800922e:	6021      	str	r1, [r4, #0]
 8009230:	f109 0901 	add.w	r9, r9, #1
 8009234:	f1bb 0f00 	cmp.w	fp, #0
 8009238:	d003      	beq.n	8009242 <_scanf_float+0x15e>
 800923a:	3201      	adds	r2, #1
 800923c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009240:	60a2      	str	r2, [r4, #8]
 8009242:	68a3      	ldr	r3, [r4, #8]
 8009244:	3b01      	subs	r3, #1
 8009246:	60a3      	str	r3, [r4, #8]
 8009248:	6923      	ldr	r3, [r4, #16]
 800924a:	3301      	adds	r3, #1
 800924c:	6123      	str	r3, [r4, #16]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	3b01      	subs	r3, #1
 8009252:	2b00      	cmp	r3, #0
 8009254:	607b      	str	r3, [r7, #4]
 8009256:	f340 8087 	ble.w	8009368 <_scanf_float+0x284>
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	3301      	adds	r3, #1
 800925e:	603b      	str	r3, [r7, #0]
 8009260:	e765      	b.n	800912e <_scanf_float+0x4a>
 8009262:	eb1a 0105 	adds.w	r1, sl, r5
 8009266:	f47f af6f 	bne.w	8009148 <_scanf_float+0x64>
 800926a:	6822      	ldr	r2, [r4, #0]
 800926c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009270:	6022      	str	r2, [r4, #0]
 8009272:	460d      	mov	r5, r1
 8009274:	468a      	mov	sl, r1
 8009276:	f806 3b01 	strb.w	r3, [r6], #1
 800927a:	e7e2      	b.n	8009242 <_scanf_float+0x15e>
 800927c:	6822      	ldr	r2, [r4, #0]
 800927e:	0610      	lsls	r0, r2, #24
 8009280:	f57f af62 	bpl.w	8009148 <_scanf_float+0x64>
 8009284:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009288:	6022      	str	r2, [r4, #0]
 800928a:	e7f4      	b.n	8009276 <_scanf_float+0x192>
 800928c:	f1ba 0f00 	cmp.w	sl, #0
 8009290:	d10e      	bne.n	80092b0 <_scanf_float+0x1cc>
 8009292:	f1b9 0f00 	cmp.w	r9, #0
 8009296:	d10e      	bne.n	80092b6 <_scanf_float+0x1d2>
 8009298:	6822      	ldr	r2, [r4, #0]
 800929a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800929e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80092a2:	d108      	bne.n	80092b6 <_scanf_float+0x1d2>
 80092a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80092a8:	6022      	str	r2, [r4, #0]
 80092aa:	f04f 0a01 	mov.w	sl, #1
 80092ae:	e7e2      	b.n	8009276 <_scanf_float+0x192>
 80092b0:	f1ba 0f02 	cmp.w	sl, #2
 80092b4:	d055      	beq.n	8009362 <_scanf_float+0x27e>
 80092b6:	2d01      	cmp	r5, #1
 80092b8:	d002      	beq.n	80092c0 <_scanf_float+0x1dc>
 80092ba:	2d04      	cmp	r5, #4
 80092bc:	f47f af44 	bne.w	8009148 <_scanf_float+0x64>
 80092c0:	3501      	adds	r5, #1
 80092c2:	b2ed      	uxtb	r5, r5
 80092c4:	e7d7      	b.n	8009276 <_scanf_float+0x192>
 80092c6:	f1ba 0f01 	cmp.w	sl, #1
 80092ca:	f47f af3d 	bne.w	8009148 <_scanf_float+0x64>
 80092ce:	f04f 0a02 	mov.w	sl, #2
 80092d2:	e7d0      	b.n	8009276 <_scanf_float+0x192>
 80092d4:	b97d      	cbnz	r5, 80092f6 <_scanf_float+0x212>
 80092d6:	f1b9 0f00 	cmp.w	r9, #0
 80092da:	f47f af38 	bne.w	800914e <_scanf_float+0x6a>
 80092de:	6822      	ldr	r2, [r4, #0]
 80092e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80092e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80092e8:	f040 8108 	bne.w	80094fc <_scanf_float+0x418>
 80092ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80092f0:	6022      	str	r2, [r4, #0]
 80092f2:	2501      	movs	r5, #1
 80092f4:	e7bf      	b.n	8009276 <_scanf_float+0x192>
 80092f6:	2d03      	cmp	r5, #3
 80092f8:	d0e2      	beq.n	80092c0 <_scanf_float+0x1dc>
 80092fa:	2d05      	cmp	r5, #5
 80092fc:	e7de      	b.n	80092bc <_scanf_float+0x1d8>
 80092fe:	2d02      	cmp	r5, #2
 8009300:	f47f af22 	bne.w	8009148 <_scanf_float+0x64>
 8009304:	2503      	movs	r5, #3
 8009306:	e7b6      	b.n	8009276 <_scanf_float+0x192>
 8009308:	2d06      	cmp	r5, #6
 800930a:	f47f af1d 	bne.w	8009148 <_scanf_float+0x64>
 800930e:	2507      	movs	r5, #7
 8009310:	e7b1      	b.n	8009276 <_scanf_float+0x192>
 8009312:	6822      	ldr	r2, [r4, #0]
 8009314:	0591      	lsls	r1, r2, #22
 8009316:	f57f af17 	bpl.w	8009148 <_scanf_float+0x64>
 800931a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800931e:	6022      	str	r2, [r4, #0]
 8009320:	f8cd 9008 	str.w	r9, [sp, #8]
 8009324:	e7a7      	b.n	8009276 <_scanf_float+0x192>
 8009326:	6822      	ldr	r2, [r4, #0]
 8009328:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800932c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009330:	d006      	beq.n	8009340 <_scanf_float+0x25c>
 8009332:	0550      	lsls	r0, r2, #21
 8009334:	f57f af08 	bpl.w	8009148 <_scanf_float+0x64>
 8009338:	f1b9 0f00 	cmp.w	r9, #0
 800933c:	f000 80de 	beq.w	80094fc <_scanf_float+0x418>
 8009340:	0591      	lsls	r1, r2, #22
 8009342:	bf58      	it	pl
 8009344:	9902      	ldrpl	r1, [sp, #8]
 8009346:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800934a:	bf58      	it	pl
 800934c:	eba9 0101 	subpl.w	r1, r9, r1
 8009350:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009354:	bf58      	it	pl
 8009356:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800935a:	6022      	str	r2, [r4, #0]
 800935c:	f04f 0900 	mov.w	r9, #0
 8009360:	e789      	b.n	8009276 <_scanf_float+0x192>
 8009362:	f04f 0a03 	mov.w	sl, #3
 8009366:	e786      	b.n	8009276 <_scanf_float+0x192>
 8009368:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800936c:	4639      	mov	r1, r7
 800936e:	4640      	mov	r0, r8
 8009370:	4798      	blx	r3
 8009372:	2800      	cmp	r0, #0
 8009374:	f43f aedb 	beq.w	800912e <_scanf_float+0x4a>
 8009378:	e6e6      	b.n	8009148 <_scanf_float+0x64>
 800937a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800937e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009382:	463a      	mov	r2, r7
 8009384:	4640      	mov	r0, r8
 8009386:	4798      	blx	r3
 8009388:	6923      	ldr	r3, [r4, #16]
 800938a:	3b01      	subs	r3, #1
 800938c:	6123      	str	r3, [r4, #16]
 800938e:	e6e8      	b.n	8009162 <_scanf_float+0x7e>
 8009390:	1e6b      	subs	r3, r5, #1
 8009392:	2b06      	cmp	r3, #6
 8009394:	d824      	bhi.n	80093e0 <_scanf_float+0x2fc>
 8009396:	2d02      	cmp	r5, #2
 8009398:	d836      	bhi.n	8009408 <_scanf_float+0x324>
 800939a:	9b01      	ldr	r3, [sp, #4]
 800939c:	429e      	cmp	r6, r3
 800939e:	f67f aee4 	bls.w	800916a <_scanf_float+0x86>
 80093a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80093a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093aa:	463a      	mov	r2, r7
 80093ac:	4640      	mov	r0, r8
 80093ae:	4798      	blx	r3
 80093b0:	6923      	ldr	r3, [r4, #16]
 80093b2:	3b01      	subs	r3, #1
 80093b4:	6123      	str	r3, [r4, #16]
 80093b6:	e7f0      	b.n	800939a <_scanf_float+0x2b6>
 80093b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80093bc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80093c0:	463a      	mov	r2, r7
 80093c2:	4640      	mov	r0, r8
 80093c4:	4798      	blx	r3
 80093c6:	6923      	ldr	r3, [r4, #16]
 80093c8:	3b01      	subs	r3, #1
 80093ca:	6123      	str	r3, [r4, #16]
 80093cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093d0:	fa5f fa8a 	uxtb.w	sl, sl
 80093d4:	f1ba 0f02 	cmp.w	sl, #2
 80093d8:	d1ee      	bne.n	80093b8 <_scanf_float+0x2d4>
 80093da:	3d03      	subs	r5, #3
 80093dc:	b2ed      	uxtb	r5, r5
 80093de:	1b76      	subs	r6, r6, r5
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	05da      	lsls	r2, r3, #23
 80093e4:	d530      	bpl.n	8009448 <_scanf_float+0x364>
 80093e6:	055b      	lsls	r3, r3, #21
 80093e8:	d511      	bpl.n	800940e <_scanf_float+0x32a>
 80093ea:	9b01      	ldr	r3, [sp, #4]
 80093ec:	429e      	cmp	r6, r3
 80093ee:	f67f aebc 	bls.w	800916a <_scanf_float+0x86>
 80093f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80093f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093fa:	463a      	mov	r2, r7
 80093fc:	4640      	mov	r0, r8
 80093fe:	4798      	blx	r3
 8009400:	6923      	ldr	r3, [r4, #16]
 8009402:	3b01      	subs	r3, #1
 8009404:	6123      	str	r3, [r4, #16]
 8009406:	e7f0      	b.n	80093ea <_scanf_float+0x306>
 8009408:	46aa      	mov	sl, r5
 800940a:	46b3      	mov	fp, r6
 800940c:	e7de      	b.n	80093cc <_scanf_float+0x2e8>
 800940e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009412:	6923      	ldr	r3, [r4, #16]
 8009414:	2965      	cmp	r1, #101	@ 0x65
 8009416:	f103 33ff 	add.w	r3, r3, #4294967295
 800941a:	f106 35ff 	add.w	r5, r6, #4294967295
 800941e:	6123      	str	r3, [r4, #16]
 8009420:	d00c      	beq.n	800943c <_scanf_float+0x358>
 8009422:	2945      	cmp	r1, #69	@ 0x45
 8009424:	d00a      	beq.n	800943c <_scanf_float+0x358>
 8009426:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800942a:	463a      	mov	r2, r7
 800942c:	4640      	mov	r0, r8
 800942e:	4798      	blx	r3
 8009430:	6923      	ldr	r3, [r4, #16]
 8009432:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009436:	3b01      	subs	r3, #1
 8009438:	1eb5      	subs	r5, r6, #2
 800943a:	6123      	str	r3, [r4, #16]
 800943c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009440:	463a      	mov	r2, r7
 8009442:	4640      	mov	r0, r8
 8009444:	4798      	blx	r3
 8009446:	462e      	mov	r6, r5
 8009448:	6822      	ldr	r2, [r4, #0]
 800944a:	f012 0210 	ands.w	r2, r2, #16
 800944e:	d001      	beq.n	8009454 <_scanf_float+0x370>
 8009450:	2000      	movs	r0, #0
 8009452:	e68b      	b.n	800916c <_scanf_float+0x88>
 8009454:	7032      	strb	r2, [r6, #0]
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800945c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009460:	d11c      	bne.n	800949c <_scanf_float+0x3b8>
 8009462:	9b02      	ldr	r3, [sp, #8]
 8009464:	454b      	cmp	r3, r9
 8009466:	eba3 0209 	sub.w	r2, r3, r9
 800946a:	d123      	bne.n	80094b4 <_scanf_float+0x3d0>
 800946c:	9901      	ldr	r1, [sp, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	4640      	mov	r0, r8
 8009472:	f002 fc05 	bl	800bc80 <_strtod_r>
 8009476:	9b03      	ldr	r3, [sp, #12]
 8009478:	6821      	ldr	r1, [r4, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f011 0f02 	tst.w	r1, #2
 8009480:	ec57 6b10 	vmov	r6, r7, d0
 8009484:	f103 0204 	add.w	r2, r3, #4
 8009488:	d01f      	beq.n	80094ca <_scanf_float+0x3e6>
 800948a:	9903      	ldr	r1, [sp, #12]
 800948c:	600a      	str	r2, [r1, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	e9c3 6700 	strd	r6, r7, [r3]
 8009494:	68e3      	ldr	r3, [r4, #12]
 8009496:	3301      	adds	r3, #1
 8009498:	60e3      	str	r3, [r4, #12]
 800949a:	e7d9      	b.n	8009450 <_scanf_float+0x36c>
 800949c:	9b04      	ldr	r3, [sp, #16]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d0e4      	beq.n	800946c <_scanf_float+0x388>
 80094a2:	9905      	ldr	r1, [sp, #20]
 80094a4:	230a      	movs	r3, #10
 80094a6:	3101      	adds	r1, #1
 80094a8:	4640      	mov	r0, r8
 80094aa:	f002 fc69 	bl	800bd80 <_strtol_r>
 80094ae:	9b04      	ldr	r3, [sp, #16]
 80094b0:	9e05      	ldr	r6, [sp, #20]
 80094b2:	1ac2      	subs	r2, r0, r3
 80094b4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80094b8:	429e      	cmp	r6, r3
 80094ba:	bf28      	it	cs
 80094bc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80094c0:	4910      	ldr	r1, [pc, #64]	@ (8009504 <_scanf_float+0x420>)
 80094c2:	4630      	mov	r0, r6
 80094c4:	f000 f8e4 	bl	8009690 <siprintf>
 80094c8:	e7d0      	b.n	800946c <_scanf_float+0x388>
 80094ca:	f011 0f04 	tst.w	r1, #4
 80094ce:	9903      	ldr	r1, [sp, #12]
 80094d0:	600a      	str	r2, [r1, #0]
 80094d2:	d1dc      	bne.n	800948e <_scanf_float+0x3aa>
 80094d4:	681d      	ldr	r5, [r3, #0]
 80094d6:	4632      	mov	r2, r6
 80094d8:	463b      	mov	r3, r7
 80094da:	4630      	mov	r0, r6
 80094dc:	4639      	mov	r1, r7
 80094de:	f7f7 fb4d 	bl	8000b7c <__aeabi_dcmpun>
 80094e2:	b128      	cbz	r0, 80094f0 <_scanf_float+0x40c>
 80094e4:	4808      	ldr	r0, [pc, #32]	@ (8009508 <_scanf_float+0x424>)
 80094e6:	f000 f9c5 	bl	8009874 <nanf>
 80094ea:	ed85 0a00 	vstr	s0, [r5]
 80094ee:	e7d1      	b.n	8009494 <_scanf_float+0x3b0>
 80094f0:	4630      	mov	r0, r6
 80094f2:	4639      	mov	r1, r7
 80094f4:	f7f7 fba0 	bl	8000c38 <__aeabi_d2f>
 80094f8:	6028      	str	r0, [r5, #0]
 80094fa:	e7cb      	b.n	8009494 <_scanf_float+0x3b0>
 80094fc:	f04f 0900 	mov.w	r9, #0
 8009500:	e629      	b.n	8009156 <_scanf_float+0x72>
 8009502:	bf00      	nop
 8009504:	0800d02c 	.word	0x0800d02c
 8009508:	0800d3c5 	.word	0x0800d3c5

0800950c <std>:
 800950c:	2300      	movs	r3, #0
 800950e:	b510      	push	{r4, lr}
 8009510:	4604      	mov	r4, r0
 8009512:	e9c0 3300 	strd	r3, r3, [r0]
 8009516:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800951a:	6083      	str	r3, [r0, #8]
 800951c:	8181      	strh	r1, [r0, #12]
 800951e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009520:	81c2      	strh	r2, [r0, #14]
 8009522:	6183      	str	r3, [r0, #24]
 8009524:	4619      	mov	r1, r3
 8009526:	2208      	movs	r2, #8
 8009528:	305c      	adds	r0, #92	@ 0x5c
 800952a:	f000 f914 	bl	8009756 <memset>
 800952e:	4b0d      	ldr	r3, [pc, #52]	@ (8009564 <std+0x58>)
 8009530:	6263      	str	r3, [r4, #36]	@ 0x24
 8009532:	4b0d      	ldr	r3, [pc, #52]	@ (8009568 <std+0x5c>)
 8009534:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009536:	4b0d      	ldr	r3, [pc, #52]	@ (800956c <std+0x60>)
 8009538:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800953a:	4b0d      	ldr	r3, [pc, #52]	@ (8009570 <std+0x64>)
 800953c:	6323      	str	r3, [r4, #48]	@ 0x30
 800953e:	4b0d      	ldr	r3, [pc, #52]	@ (8009574 <std+0x68>)
 8009540:	6224      	str	r4, [r4, #32]
 8009542:	429c      	cmp	r4, r3
 8009544:	d006      	beq.n	8009554 <std+0x48>
 8009546:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800954a:	4294      	cmp	r4, r2
 800954c:	d002      	beq.n	8009554 <std+0x48>
 800954e:	33d0      	adds	r3, #208	@ 0xd0
 8009550:	429c      	cmp	r4, r3
 8009552:	d105      	bne.n	8009560 <std+0x54>
 8009554:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800955c:	f000 b978 	b.w	8009850 <__retarget_lock_init_recursive>
 8009560:	bd10      	pop	{r4, pc}
 8009562:	bf00      	nop
 8009564:	080096d1 	.word	0x080096d1
 8009568:	080096f3 	.word	0x080096f3
 800956c:	0800972b 	.word	0x0800972b
 8009570:	0800974f 	.word	0x0800974f
 8009574:	2000127c 	.word	0x2000127c

08009578 <stdio_exit_handler>:
 8009578:	4a02      	ldr	r2, [pc, #8]	@ (8009584 <stdio_exit_handler+0xc>)
 800957a:	4903      	ldr	r1, [pc, #12]	@ (8009588 <stdio_exit_handler+0x10>)
 800957c:	4803      	ldr	r0, [pc, #12]	@ (800958c <stdio_exit_handler+0x14>)
 800957e:	f000 b869 	b.w	8009654 <_fwalk_sglue>
 8009582:	bf00      	nop
 8009584:	20000010 	.word	0x20000010
 8009588:	0800c13d 	.word	0x0800c13d
 800958c:	20000020 	.word	0x20000020

08009590 <cleanup_stdio>:
 8009590:	6841      	ldr	r1, [r0, #4]
 8009592:	4b0c      	ldr	r3, [pc, #48]	@ (80095c4 <cleanup_stdio+0x34>)
 8009594:	4299      	cmp	r1, r3
 8009596:	b510      	push	{r4, lr}
 8009598:	4604      	mov	r4, r0
 800959a:	d001      	beq.n	80095a0 <cleanup_stdio+0x10>
 800959c:	f002 fdce 	bl	800c13c <_fflush_r>
 80095a0:	68a1      	ldr	r1, [r4, #8]
 80095a2:	4b09      	ldr	r3, [pc, #36]	@ (80095c8 <cleanup_stdio+0x38>)
 80095a4:	4299      	cmp	r1, r3
 80095a6:	d002      	beq.n	80095ae <cleanup_stdio+0x1e>
 80095a8:	4620      	mov	r0, r4
 80095aa:	f002 fdc7 	bl	800c13c <_fflush_r>
 80095ae:	68e1      	ldr	r1, [r4, #12]
 80095b0:	4b06      	ldr	r3, [pc, #24]	@ (80095cc <cleanup_stdio+0x3c>)
 80095b2:	4299      	cmp	r1, r3
 80095b4:	d004      	beq.n	80095c0 <cleanup_stdio+0x30>
 80095b6:	4620      	mov	r0, r4
 80095b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095bc:	f002 bdbe 	b.w	800c13c <_fflush_r>
 80095c0:	bd10      	pop	{r4, pc}
 80095c2:	bf00      	nop
 80095c4:	2000127c 	.word	0x2000127c
 80095c8:	200012e4 	.word	0x200012e4
 80095cc:	2000134c 	.word	0x2000134c

080095d0 <global_stdio_init.part.0>:
 80095d0:	b510      	push	{r4, lr}
 80095d2:	4b0b      	ldr	r3, [pc, #44]	@ (8009600 <global_stdio_init.part.0+0x30>)
 80095d4:	4c0b      	ldr	r4, [pc, #44]	@ (8009604 <global_stdio_init.part.0+0x34>)
 80095d6:	4a0c      	ldr	r2, [pc, #48]	@ (8009608 <global_stdio_init.part.0+0x38>)
 80095d8:	601a      	str	r2, [r3, #0]
 80095da:	4620      	mov	r0, r4
 80095dc:	2200      	movs	r2, #0
 80095de:	2104      	movs	r1, #4
 80095e0:	f7ff ff94 	bl	800950c <std>
 80095e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80095e8:	2201      	movs	r2, #1
 80095ea:	2109      	movs	r1, #9
 80095ec:	f7ff ff8e 	bl	800950c <std>
 80095f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80095f4:	2202      	movs	r2, #2
 80095f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095fa:	2112      	movs	r1, #18
 80095fc:	f7ff bf86 	b.w	800950c <std>
 8009600:	200013b4 	.word	0x200013b4
 8009604:	2000127c 	.word	0x2000127c
 8009608:	08009579 	.word	0x08009579

0800960c <__sfp_lock_acquire>:
 800960c:	4801      	ldr	r0, [pc, #4]	@ (8009614 <__sfp_lock_acquire+0x8>)
 800960e:	f000 b920 	b.w	8009852 <__retarget_lock_acquire_recursive>
 8009612:	bf00      	nop
 8009614:	200013bd 	.word	0x200013bd

08009618 <__sfp_lock_release>:
 8009618:	4801      	ldr	r0, [pc, #4]	@ (8009620 <__sfp_lock_release+0x8>)
 800961a:	f000 b91b 	b.w	8009854 <__retarget_lock_release_recursive>
 800961e:	bf00      	nop
 8009620:	200013bd 	.word	0x200013bd

08009624 <__sinit>:
 8009624:	b510      	push	{r4, lr}
 8009626:	4604      	mov	r4, r0
 8009628:	f7ff fff0 	bl	800960c <__sfp_lock_acquire>
 800962c:	6a23      	ldr	r3, [r4, #32]
 800962e:	b11b      	cbz	r3, 8009638 <__sinit+0x14>
 8009630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009634:	f7ff bff0 	b.w	8009618 <__sfp_lock_release>
 8009638:	4b04      	ldr	r3, [pc, #16]	@ (800964c <__sinit+0x28>)
 800963a:	6223      	str	r3, [r4, #32]
 800963c:	4b04      	ldr	r3, [pc, #16]	@ (8009650 <__sinit+0x2c>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1f5      	bne.n	8009630 <__sinit+0xc>
 8009644:	f7ff ffc4 	bl	80095d0 <global_stdio_init.part.0>
 8009648:	e7f2      	b.n	8009630 <__sinit+0xc>
 800964a:	bf00      	nop
 800964c:	08009591 	.word	0x08009591
 8009650:	200013b4 	.word	0x200013b4

08009654 <_fwalk_sglue>:
 8009654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009658:	4607      	mov	r7, r0
 800965a:	4688      	mov	r8, r1
 800965c:	4614      	mov	r4, r2
 800965e:	2600      	movs	r6, #0
 8009660:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009664:	f1b9 0901 	subs.w	r9, r9, #1
 8009668:	d505      	bpl.n	8009676 <_fwalk_sglue+0x22>
 800966a:	6824      	ldr	r4, [r4, #0]
 800966c:	2c00      	cmp	r4, #0
 800966e:	d1f7      	bne.n	8009660 <_fwalk_sglue+0xc>
 8009670:	4630      	mov	r0, r6
 8009672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009676:	89ab      	ldrh	r3, [r5, #12]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d907      	bls.n	800968c <_fwalk_sglue+0x38>
 800967c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009680:	3301      	adds	r3, #1
 8009682:	d003      	beq.n	800968c <_fwalk_sglue+0x38>
 8009684:	4629      	mov	r1, r5
 8009686:	4638      	mov	r0, r7
 8009688:	47c0      	blx	r8
 800968a:	4306      	orrs	r6, r0
 800968c:	3568      	adds	r5, #104	@ 0x68
 800968e:	e7e9      	b.n	8009664 <_fwalk_sglue+0x10>

08009690 <siprintf>:
 8009690:	b40e      	push	{r1, r2, r3}
 8009692:	b500      	push	{lr}
 8009694:	b09c      	sub	sp, #112	@ 0x70
 8009696:	ab1d      	add	r3, sp, #116	@ 0x74
 8009698:	9002      	str	r0, [sp, #8]
 800969a:	9006      	str	r0, [sp, #24]
 800969c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80096a0:	4809      	ldr	r0, [pc, #36]	@ (80096c8 <siprintf+0x38>)
 80096a2:	9107      	str	r1, [sp, #28]
 80096a4:	9104      	str	r1, [sp, #16]
 80096a6:	4909      	ldr	r1, [pc, #36]	@ (80096cc <siprintf+0x3c>)
 80096a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80096ac:	9105      	str	r1, [sp, #20]
 80096ae:	6800      	ldr	r0, [r0, #0]
 80096b0:	9301      	str	r3, [sp, #4]
 80096b2:	a902      	add	r1, sp, #8
 80096b4:	f002 fbc2 	bl	800be3c <_svfiprintf_r>
 80096b8:	9b02      	ldr	r3, [sp, #8]
 80096ba:	2200      	movs	r2, #0
 80096bc:	701a      	strb	r2, [r3, #0]
 80096be:	b01c      	add	sp, #112	@ 0x70
 80096c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80096c4:	b003      	add	sp, #12
 80096c6:	4770      	bx	lr
 80096c8:	2000001c 	.word	0x2000001c
 80096cc:	ffff0208 	.word	0xffff0208

080096d0 <__sread>:
 80096d0:	b510      	push	{r4, lr}
 80096d2:	460c      	mov	r4, r1
 80096d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096d8:	f000 f86c 	bl	80097b4 <_read_r>
 80096dc:	2800      	cmp	r0, #0
 80096de:	bfab      	itete	ge
 80096e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80096e2:	89a3      	ldrhlt	r3, [r4, #12]
 80096e4:	181b      	addge	r3, r3, r0
 80096e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80096ea:	bfac      	ite	ge
 80096ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80096ee:	81a3      	strhlt	r3, [r4, #12]
 80096f0:	bd10      	pop	{r4, pc}

080096f2 <__swrite>:
 80096f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f6:	461f      	mov	r7, r3
 80096f8:	898b      	ldrh	r3, [r1, #12]
 80096fa:	05db      	lsls	r3, r3, #23
 80096fc:	4605      	mov	r5, r0
 80096fe:	460c      	mov	r4, r1
 8009700:	4616      	mov	r6, r2
 8009702:	d505      	bpl.n	8009710 <__swrite+0x1e>
 8009704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009708:	2302      	movs	r3, #2
 800970a:	2200      	movs	r2, #0
 800970c:	f000 f840 	bl	8009790 <_lseek_r>
 8009710:	89a3      	ldrh	r3, [r4, #12]
 8009712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009716:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800971a:	81a3      	strh	r3, [r4, #12]
 800971c:	4632      	mov	r2, r6
 800971e:	463b      	mov	r3, r7
 8009720:	4628      	mov	r0, r5
 8009722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009726:	f000 b857 	b.w	80097d8 <_write_r>

0800972a <__sseek>:
 800972a:	b510      	push	{r4, lr}
 800972c:	460c      	mov	r4, r1
 800972e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009732:	f000 f82d 	bl	8009790 <_lseek_r>
 8009736:	1c43      	adds	r3, r0, #1
 8009738:	89a3      	ldrh	r3, [r4, #12]
 800973a:	bf15      	itete	ne
 800973c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800973e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009742:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009746:	81a3      	strheq	r3, [r4, #12]
 8009748:	bf18      	it	ne
 800974a:	81a3      	strhne	r3, [r4, #12]
 800974c:	bd10      	pop	{r4, pc}

0800974e <__sclose>:
 800974e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009752:	f000 b80d 	b.w	8009770 <_close_r>

08009756 <memset>:
 8009756:	4402      	add	r2, r0
 8009758:	4603      	mov	r3, r0
 800975a:	4293      	cmp	r3, r2
 800975c:	d100      	bne.n	8009760 <memset+0xa>
 800975e:	4770      	bx	lr
 8009760:	f803 1b01 	strb.w	r1, [r3], #1
 8009764:	e7f9      	b.n	800975a <memset+0x4>
	...

08009768 <_localeconv_r>:
 8009768:	4800      	ldr	r0, [pc, #0]	@ (800976c <_localeconv_r+0x4>)
 800976a:	4770      	bx	lr
 800976c:	2000015c 	.word	0x2000015c

08009770 <_close_r>:
 8009770:	b538      	push	{r3, r4, r5, lr}
 8009772:	4d06      	ldr	r5, [pc, #24]	@ (800978c <_close_r+0x1c>)
 8009774:	2300      	movs	r3, #0
 8009776:	4604      	mov	r4, r0
 8009778:	4608      	mov	r0, r1
 800977a:	602b      	str	r3, [r5, #0]
 800977c:	f7f8 f8e0 	bl	8001940 <_close>
 8009780:	1c43      	adds	r3, r0, #1
 8009782:	d102      	bne.n	800978a <_close_r+0x1a>
 8009784:	682b      	ldr	r3, [r5, #0]
 8009786:	b103      	cbz	r3, 800978a <_close_r+0x1a>
 8009788:	6023      	str	r3, [r4, #0]
 800978a:	bd38      	pop	{r3, r4, r5, pc}
 800978c:	200013b8 	.word	0x200013b8

08009790 <_lseek_r>:
 8009790:	b538      	push	{r3, r4, r5, lr}
 8009792:	4d07      	ldr	r5, [pc, #28]	@ (80097b0 <_lseek_r+0x20>)
 8009794:	4604      	mov	r4, r0
 8009796:	4608      	mov	r0, r1
 8009798:	4611      	mov	r1, r2
 800979a:	2200      	movs	r2, #0
 800979c:	602a      	str	r2, [r5, #0]
 800979e:	461a      	mov	r2, r3
 80097a0:	f7f8 f8f5 	bl	800198e <_lseek>
 80097a4:	1c43      	adds	r3, r0, #1
 80097a6:	d102      	bne.n	80097ae <_lseek_r+0x1e>
 80097a8:	682b      	ldr	r3, [r5, #0]
 80097aa:	b103      	cbz	r3, 80097ae <_lseek_r+0x1e>
 80097ac:	6023      	str	r3, [r4, #0]
 80097ae:	bd38      	pop	{r3, r4, r5, pc}
 80097b0:	200013b8 	.word	0x200013b8

080097b4 <_read_r>:
 80097b4:	b538      	push	{r3, r4, r5, lr}
 80097b6:	4d07      	ldr	r5, [pc, #28]	@ (80097d4 <_read_r+0x20>)
 80097b8:	4604      	mov	r4, r0
 80097ba:	4608      	mov	r0, r1
 80097bc:	4611      	mov	r1, r2
 80097be:	2200      	movs	r2, #0
 80097c0:	602a      	str	r2, [r5, #0]
 80097c2:	461a      	mov	r2, r3
 80097c4:	f7f8 f883 	bl	80018ce <_read>
 80097c8:	1c43      	adds	r3, r0, #1
 80097ca:	d102      	bne.n	80097d2 <_read_r+0x1e>
 80097cc:	682b      	ldr	r3, [r5, #0]
 80097ce:	b103      	cbz	r3, 80097d2 <_read_r+0x1e>
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	bd38      	pop	{r3, r4, r5, pc}
 80097d4:	200013b8 	.word	0x200013b8

080097d8 <_write_r>:
 80097d8:	b538      	push	{r3, r4, r5, lr}
 80097da:	4d07      	ldr	r5, [pc, #28]	@ (80097f8 <_write_r+0x20>)
 80097dc:	4604      	mov	r4, r0
 80097de:	4608      	mov	r0, r1
 80097e0:	4611      	mov	r1, r2
 80097e2:	2200      	movs	r2, #0
 80097e4:	602a      	str	r2, [r5, #0]
 80097e6:	461a      	mov	r2, r3
 80097e8:	f7f8 f88e 	bl	8001908 <_write>
 80097ec:	1c43      	adds	r3, r0, #1
 80097ee:	d102      	bne.n	80097f6 <_write_r+0x1e>
 80097f0:	682b      	ldr	r3, [r5, #0]
 80097f2:	b103      	cbz	r3, 80097f6 <_write_r+0x1e>
 80097f4:	6023      	str	r3, [r4, #0]
 80097f6:	bd38      	pop	{r3, r4, r5, pc}
 80097f8:	200013b8 	.word	0x200013b8

080097fc <__errno>:
 80097fc:	4b01      	ldr	r3, [pc, #4]	@ (8009804 <__errno+0x8>)
 80097fe:	6818      	ldr	r0, [r3, #0]
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	2000001c 	.word	0x2000001c

08009808 <__libc_init_array>:
 8009808:	b570      	push	{r4, r5, r6, lr}
 800980a:	4d0d      	ldr	r5, [pc, #52]	@ (8009840 <__libc_init_array+0x38>)
 800980c:	4c0d      	ldr	r4, [pc, #52]	@ (8009844 <__libc_init_array+0x3c>)
 800980e:	1b64      	subs	r4, r4, r5
 8009810:	10a4      	asrs	r4, r4, #2
 8009812:	2600      	movs	r6, #0
 8009814:	42a6      	cmp	r6, r4
 8009816:	d109      	bne.n	800982c <__libc_init_array+0x24>
 8009818:	4d0b      	ldr	r5, [pc, #44]	@ (8009848 <__libc_init_array+0x40>)
 800981a:	4c0c      	ldr	r4, [pc, #48]	@ (800984c <__libc_init_array+0x44>)
 800981c:	f003 fb72 	bl	800cf04 <_init>
 8009820:	1b64      	subs	r4, r4, r5
 8009822:	10a4      	asrs	r4, r4, #2
 8009824:	2600      	movs	r6, #0
 8009826:	42a6      	cmp	r6, r4
 8009828:	d105      	bne.n	8009836 <__libc_init_array+0x2e>
 800982a:	bd70      	pop	{r4, r5, r6, pc}
 800982c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009830:	4798      	blx	r3
 8009832:	3601      	adds	r6, #1
 8009834:	e7ee      	b.n	8009814 <__libc_init_array+0xc>
 8009836:	f855 3b04 	ldr.w	r3, [r5], #4
 800983a:	4798      	blx	r3
 800983c:	3601      	adds	r6, #1
 800983e:	e7f2      	b.n	8009826 <__libc_init_array+0x1e>
 8009840:	0800d430 	.word	0x0800d430
 8009844:	0800d430 	.word	0x0800d430
 8009848:	0800d430 	.word	0x0800d430
 800984c:	0800d434 	.word	0x0800d434

08009850 <__retarget_lock_init_recursive>:
 8009850:	4770      	bx	lr

08009852 <__retarget_lock_acquire_recursive>:
 8009852:	4770      	bx	lr

08009854 <__retarget_lock_release_recursive>:
 8009854:	4770      	bx	lr

08009856 <memcpy>:
 8009856:	440a      	add	r2, r1
 8009858:	4291      	cmp	r1, r2
 800985a:	f100 33ff 	add.w	r3, r0, #4294967295
 800985e:	d100      	bne.n	8009862 <memcpy+0xc>
 8009860:	4770      	bx	lr
 8009862:	b510      	push	{r4, lr}
 8009864:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009868:	f803 4f01 	strb.w	r4, [r3, #1]!
 800986c:	4291      	cmp	r1, r2
 800986e:	d1f9      	bne.n	8009864 <memcpy+0xe>
 8009870:	bd10      	pop	{r4, pc}
	...

08009874 <nanf>:
 8009874:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800987c <nanf+0x8>
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	7fc00000 	.word	0x7fc00000

08009880 <quorem>:
 8009880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009884:	6903      	ldr	r3, [r0, #16]
 8009886:	690c      	ldr	r4, [r1, #16]
 8009888:	42a3      	cmp	r3, r4
 800988a:	4607      	mov	r7, r0
 800988c:	db7e      	blt.n	800998c <quorem+0x10c>
 800988e:	3c01      	subs	r4, #1
 8009890:	f101 0814 	add.w	r8, r1, #20
 8009894:	00a3      	lsls	r3, r4, #2
 8009896:	f100 0514 	add.w	r5, r0, #20
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098a0:	9301      	str	r3, [sp, #4]
 80098a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098aa:	3301      	adds	r3, #1
 80098ac:	429a      	cmp	r2, r3
 80098ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098b2:	fbb2 f6f3 	udiv	r6, r2, r3
 80098b6:	d32e      	bcc.n	8009916 <quorem+0x96>
 80098b8:	f04f 0a00 	mov.w	sl, #0
 80098bc:	46c4      	mov	ip, r8
 80098be:	46ae      	mov	lr, r5
 80098c0:	46d3      	mov	fp, sl
 80098c2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80098c6:	b298      	uxth	r0, r3
 80098c8:	fb06 a000 	mla	r0, r6, r0, sl
 80098cc:	0c02      	lsrs	r2, r0, #16
 80098ce:	0c1b      	lsrs	r3, r3, #16
 80098d0:	fb06 2303 	mla	r3, r6, r3, r2
 80098d4:	f8de 2000 	ldr.w	r2, [lr]
 80098d8:	b280      	uxth	r0, r0
 80098da:	b292      	uxth	r2, r2
 80098dc:	1a12      	subs	r2, r2, r0
 80098de:	445a      	add	r2, fp
 80098e0:	f8de 0000 	ldr.w	r0, [lr]
 80098e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80098ee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80098f2:	b292      	uxth	r2, r2
 80098f4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80098f8:	45e1      	cmp	r9, ip
 80098fa:	f84e 2b04 	str.w	r2, [lr], #4
 80098fe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009902:	d2de      	bcs.n	80098c2 <quorem+0x42>
 8009904:	9b00      	ldr	r3, [sp, #0]
 8009906:	58eb      	ldr	r3, [r5, r3]
 8009908:	b92b      	cbnz	r3, 8009916 <quorem+0x96>
 800990a:	9b01      	ldr	r3, [sp, #4]
 800990c:	3b04      	subs	r3, #4
 800990e:	429d      	cmp	r5, r3
 8009910:	461a      	mov	r2, r3
 8009912:	d32f      	bcc.n	8009974 <quorem+0xf4>
 8009914:	613c      	str	r4, [r7, #16]
 8009916:	4638      	mov	r0, r7
 8009918:	f001 f9c2 	bl	800aca0 <__mcmp>
 800991c:	2800      	cmp	r0, #0
 800991e:	db25      	blt.n	800996c <quorem+0xec>
 8009920:	4629      	mov	r1, r5
 8009922:	2000      	movs	r0, #0
 8009924:	f858 2b04 	ldr.w	r2, [r8], #4
 8009928:	f8d1 c000 	ldr.w	ip, [r1]
 800992c:	fa1f fe82 	uxth.w	lr, r2
 8009930:	fa1f f38c 	uxth.w	r3, ip
 8009934:	eba3 030e 	sub.w	r3, r3, lr
 8009938:	4403      	add	r3, r0
 800993a:	0c12      	lsrs	r2, r2, #16
 800993c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009940:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009944:	b29b      	uxth	r3, r3
 8009946:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800994a:	45c1      	cmp	r9, r8
 800994c:	f841 3b04 	str.w	r3, [r1], #4
 8009950:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009954:	d2e6      	bcs.n	8009924 <quorem+0xa4>
 8009956:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800995a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800995e:	b922      	cbnz	r2, 800996a <quorem+0xea>
 8009960:	3b04      	subs	r3, #4
 8009962:	429d      	cmp	r5, r3
 8009964:	461a      	mov	r2, r3
 8009966:	d30b      	bcc.n	8009980 <quorem+0x100>
 8009968:	613c      	str	r4, [r7, #16]
 800996a:	3601      	adds	r6, #1
 800996c:	4630      	mov	r0, r6
 800996e:	b003      	add	sp, #12
 8009970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009974:	6812      	ldr	r2, [r2, #0]
 8009976:	3b04      	subs	r3, #4
 8009978:	2a00      	cmp	r2, #0
 800997a:	d1cb      	bne.n	8009914 <quorem+0x94>
 800997c:	3c01      	subs	r4, #1
 800997e:	e7c6      	b.n	800990e <quorem+0x8e>
 8009980:	6812      	ldr	r2, [r2, #0]
 8009982:	3b04      	subs	r3, #4
 8009984:	2a00      	cmp	r2, #0
 8009986:	d1ef      	bne.n	8009968 <quorem+0xe8>
 8009988:	3c01      	subs	r4, #1
 800998a:	e7ea      	b.n	8009962 <quorem+0xe2>
 800998c:	2000      	movs	r0, #0
 800998e:	e7ee      	b.n	800996e <quorem+0xee>

08009990 <_dtoa_r>:
 8009990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009994:	69c7      	ldr	r7, [r0, #28]
 8009996:	b099      	sub	sp, #100	@ 0x64
 8009998:	ed8d 0b02 	vstr	d0, [sp, #8]
 800999c:	ec55 4b10 	vmov	r4, r5, d0
 80099a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80099a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80099a4:	4683      	mov	fp, r0
 80099a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80099a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099aa:	b97f      	cbnz	r7, 80099cc <_dtoa_r+0x3c>
 80099ac:	2010      	movs	r0, #16
 80099ae:	f000 fdfd 	bl	800a5ac <malloc>
 80099b2:	4602      	mov	r2, r0
 80099b4:	f8cb 001c 	str.w	r0, [fp, #28]
 80099b8:	b920      	cbnz	r0, 80099c4 <_dtoa_r+0x34>
 80099ba:	4ba7      	ldr	r3, [pc, #668]	@ (8009c58 <_dtoa_r+0x2c8>)
 80099bc:	21ef      	movs	r1, #239	@ 0xef
 80099be:	48a7      	ldr	r0, [pc, #668]	@ (8009c5c <_dtoa_r+0x2cc>)
 80099c0:	f002 fc2a 	bl	800c218 <__assert_func>
 80099c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80099c8:	6007      	str	r7, [r0, #0]
 80099ca:	60c7      	str	r7, [r0, #12]
 80099cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80099d0:	6819      	ldr	r1, [r3, #0]
 80099d2:	b159      	cbz	r1, 80099ec <_dtoa_r+0x5c>
 80099d4:	685a      	ldr	r2, [r3, #4]
 80099d6:	604a      	str	r2, [r1, #4]
 80099d8:	2301      	movs	r3, #1
 80099da:	4093      	lsls	r3, r2
 80099dc:	608b      	str	r3, [r1, #8]
 80099de:	4658      	mov	r0, fp
 80099e0:	f000 feda 	bl	800a798 <_Bfree>
 80099e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80099e8:	2200      	movs	r2, #0
 80099ea:	601a      	str	r2, [r3, #0]
 80099ec:	1e2b      	subs	r3, r5, #0
 80099ee:	bfb9      	ittee	lt
 80099f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80099f4:	9303      	strlt	r3, [sp, #12]
 80099f6:	2300      	movge	r3, #0
 80099f8:	6033      	strge	r3, [r6, #0]
 80099fa:	9f03      	ldr	r7, [sp, #12]
 80099fc:	4b98      	ldr	r3, [pc, #608]	@ (8009c60 <_dtoa_r+0x2d0>)
 80099fe:	bfbc      	itt	lt
 8009a00:	2201      	movlt	r2, #1
 8009a02:	6032      	strlt	r2, [r6, #0]
 8009a04:	43bb      	bics	r3, r7
 8009a06:	d112      	bne.n	8009a2e <_dtoa_r+0x9e>
 8009a08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009a0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009a0e:	6013      	str	r3, [r2, #0]
 8009a10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a14:	4323      	orrs	r3, r4
 8009a16:	f000 854d 	beq.w	800a4b4 <_dtoa_r+0xb24>
 8009a1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009c74 <_dtoa_r+0x2e4>
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	f000 854f 	beq.w	800a4c4 <_dtoa_r+0xb34>
 8009a26:	f10a 0303 	add.w	r3, sl, #3
 8009a2a:	f000 bd49 	b.w	800a4c0 <_dtoa_r+0xb30>
 8009a2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a32:	2200      	movs	r2, #0
 8009a34:	ec51 0b17 	vmov	r0, r1, d7
 8009a38:	2300      	movs	r3, #0
 8009a3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009a3e:	f7f7 f86b 	bl	8000b18 <__aeabi_dcmpeq>
 8009a42:	4680      	mov	r8, r0
 8009a44:	b158      	cbz	r0, 8009a5e <_dtoa_r+0xce>
 8009a46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009a48:	2301      	movs	r3, #1
 8009a4a:	6013      	str	r3, [r2, #0]
 8009a4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a4e:	b113      	cbz	r3, 8009a56 <_dtoa_r+0xc6>
 8009a50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009a52:	4b84      	ldr	r3, [pc, #528]	@ (8009c64 <_dtoa_r+0x2d4>)
 8009a54:	6013      	str	r3, [r2, #0]
 8009a56:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009c78 <_dtoa_r+0x2e8>
 8009a5a:	f000 bd33 	b.w	800a4c4 <_dtoa_r+0xb34>
 8009a5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009a62:	aa16      	add	r2, sp, #88	@ 0x58
 8009a64:	a917      	add	r1, sp, #92	@ 0x5c
 8009a66:	4658      	mov	r0, fp
 8009a68:	f001 fa3a 	bl	800aee0 <__d2b>
 8009a6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009a70:	4681      	mov	r9, r0
 8009a72:	2e00      	cmp	r6, #0
 8009a74:	d077      	beq.n	8009b66 <_dtoa_r+0x1d6>
 8009a76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a78:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009a7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009a88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009a8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009a90:	4619      	mov	r1, r3
 8009a92:	2200      	movs	r2, #0
 8009a94:	4b74      	ldr	r3, [pc, #464]	@ (8009c68 <_dtoa_r+0x2d8>)
 8009a96:	f7f6 fc1f 	bl	80002d8 <__aeabi_dsub>
 8009a9a:	a369      	add	r3, pc, #420	@ (adr r3, 8009c40 <_dtoa_r+0x2b0>)
 8009a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa0:	f7f6 fdd2 	bl	8000648 <__aeabi_dmul>
 8009aa4:	a368      	add	r3, pc, #416	@ (adr r3, 8009c48 <_dtoa_r+0x2b8>)
 8009aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aaa:	f7f6 fc17 	bl	80002dc <__adddf3>
 8009aae:	4604      	mov	r4, r0
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	460d      	mov	r5, r1
 8009ab4:	f7f6 fd5e 	bl	8000574 <__aeabi_i2d>
 8009ab8:	a365      	add	r3, pc, #404	@ (adr r3, 8009c50 <_dtoa_r+0x2c0>)
 8009aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abe:	f7f6 fdc3 	bl	8000648 <__aeabi_dmul>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	4629      	mov	r1, r5
 8009aca:	f7f6 fc07 	bl	80002dc <__adddf3>
 8009ace:	4604      	mov	r4, r0
 8009ad0:	460d      	mov	r5, r1
 8009ad2:	f7f7 f869 	bl	8000ba8 <__aeabi_d2iz>
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	4607      	mov	r7, r0
 8009ada:	2300      	movs	r3, #0
 8009adc:	4620      	mov	r0, r4
 8009ade:	4629      	mov	r1, r5
 8009ae0:	f7f7 f824 	bl	8000b2c <__aeabi_dcmplt>
 8009ae4:	b140      	cbz	r0, 8009af8 <_dtoa_r+0x168>
 8009ae6:	4638      	mov	r0, r7
 8009ae8:	f7f6 fd44 	bl	8000574 <__aeabi_i2d>
 8009aec:	4622      	mov	r2, r4
 8009aee:	462b      	mov	r3, r5
 8009af0:	f7f7 f812 	bl	8000b18 <__aeabi_dcmpeq>
 8009af4:	b900      	cbnz	r0, 8009af8 <_dtoa_r+0x168>
 8009af6:	3f01      	subs	r7, #1
 8009af8:	2f16      	cmp	r7, #22
 8009afa:	d851      	bhi.n	8009ba0 <_dtoa_r+0x210>
 8009afc:	4b5b      	ldr	r3, [pc, #364]	@ (8009c6c <_dtoa_r+0x2dc>)
 8009afe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b0a:	f7f7 f80f 	bl	8000b2c <__aeabi_dcmplt>
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	d048      	beq.n	8009ba4 <_dtoa_r+0x214>
 8009b12:	3f01      	subs	r7, #1
 8009b14:	2300      	movs	r3, #0
 8009b16:	9312      	str	r3, [sp, #72]	@ 0x48
 8009b18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009b1a:	1b9b      	subs	r3, r3, r6
 8009b1c:	1e5a      	subs	r2, r3, #1
 8009b1e:	bf44      	itt	mi
 8009b20:	f1c3 0801 	rsbmi	r8, r3, #1
 8009b24:	2300      	movmi	r3, #0
 8009b26:	9208      	str	r2, [sp, #32]
 8009b28:	bf54      	ite	pl
 8009b2a:	f04f 0800 	movpl.w	r8, #0
 8009b2e:	9308      	strmi	r3, [sp, #32]
 8009b30:	2f00      	cmp	r7, #0
 8009b32:	db39      	blt.n	8009ba8 <_dtoa_r+0x218>
 8009b34:	9b08      	ldr	r3, [sp, #32]
 8009b36:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009b38:	443b      	add	r3, r7
 8009b3a:	9308      	str	r3, [sp, #32]
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b42:	2b09      	cmp	r3, #9
 8009b44:	d864      	bhi.n	8009c10 <_dtoa_r+0x280>
 8009b46:	2b05      	cmp	r3, #5
 8009b48:	bfc4      	itt	gt
 8009b4a:	3b04      	subgt	r3, #4
 8009b4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b50:	f1a3 0302 	sub.w	r3, r3, #2
 8009b54:	bfcc      	ite	gt
 8009b56:	2400      	movgt	r4, #0
 8009b58:	2401      	movle	r4, #1
 8009b5a:	2b03      	cmp	r3, #3
 8009b5c:	d863      	bhi.n	8009c26 <_dtoa_r+0x296>
 8009b5e:	e8df f003 	tbb	[pc, r3]
 8009b62:	372a      	.short	0x372a
 8009b64:	5535      	.short	0x5535
 8009b66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009b6a:	441e      	add	r6, r3
 8009b6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009b70:	2b20      	cmp	r3, #32
 8009b72:	bfc1      	itttt	gt
 8009b74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009b78:	409f      	lslgt	r7, r3
 8009b7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009b7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009b82:	bfd6      	itet	le
 8009b84:	f1c3 0320 	rsble	r3, r3, #32
 8009b88:	ea47 0003 	orrgt.w	r0, r7, r3
 8009b8c:	fa04 f003 	lslle.w	r0, r4, r3
 8009b90:	f7f6 fce0 	bl	8000554 <__aeabi_ui2d>
 8009b94:	2201      	movs	r2, #1
 8009b96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009b9a:	3e01      	subs	r6, #1
 8009b9c:	9214      	str	r2, [sp, #80]	@ 0x50
 8009b9e:	e777      	b.n	8009a90 <_dtoa_r+0x100>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e7b8      	b.n	8009b16 <_dtoa_r+0x186>
 8009ba4:	9012      	str	r0, [sp, #72]	@ 0x48
 8009ba6:	e7b7      	b.n	8009b18 <_dtoa_r+0x188>
 8009ba8:	427b      	negs	r3, r7
 8009baa:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bac:	2300      	movs	r3, #0
 8009bae:	eba8 0807 	sub.w	r8, r8, r7
 8009bb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009bb4:	e7c4      	b.n	8009b40 <_dtoa_r+0x1b0>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	dc35      	bgt.n	8009c2c <_dtoa_r+0x29c>
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	9307      	str	r3, [sp, #28]
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009bca:	e00b      	b.n	8009be4 <_dtoa_r+0x254>
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e7f3      	b.n	8009bb8 <_dtoa_r+0x228>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bd6:	18fb      	adds	r3, r7, r3
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	9307      	str	r3, [sp, #28]
 8009be0:	bfb8      	it	lt
 8009be2:	2301      	movlt	r3, #1
 8009be4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009be8:	2100      	movs	r1, #0
 8009bea:	2204      	movs	r2, #4
 8009bec:	f102 0514 	add.w	r5, r2, #20
 8009bf0:	429d      	cmp	r5, r3
 8009bf2:	d91f      	bls.n	8009c34 <_dtoa_r+0x2a4>
 8009bf4:	6041      	str	r1, [r0, #4]
 8009bf6:	4658      	mov	r0, fp
 8009bf8:	f000 fd8e 	bl	800a718 <_Balloc>
 8009bfc:	4682      	mov	sl, r0
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	d13c      	bne.n	8009c7c <_dtoa_r+0x2ec>
 8009c02:	4b1b      	ldr	r3, [pc, #108]	@ (8009c70 <_dtoa_r+0x2e0>)
 8009c04:	4602      	mov	r2, r0
 8009c06:	f240 11af 	movw	r1, #431	@ 0x1af
 8009c0a:	e6d8      	b.n	80099be <_dtoa_r+0x2e>
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e7e0      	b.n	8009bd2 <_dtoa_r+0x242>
 8009c10:	2401      	movs	r4, #1
 8009c12:	2300      	movs	r3, #0
 8009c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c16:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009c18:	f04f 33ff 	mov.w	r3, #4294967295
 8009c1c:	9300      	str	r3, [sp, #0]
 8009c1e:	9307      	str	r3, [sp, #28]
 8009c20:	2200      	movs	r2, #0
 8009c22:	2312      	movs	r3, #18
 8009c24:	e7d0      	b.n	8009bc8 <_dtoa_r+0x238>
 8009c26:	2301      	movs	r3, #1
 8009c28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c2a:	e7f5      	b.n	8009c18 <_dtoa_r+0x288>
 8009c2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	9307      	str	r3, [sp, #28]
 8009c32:	e7d7      	b.n	8009be4 <_dtoa_r+0x254>
 8009c34:	3101      	adds	r1, #1
 8009c36:	0052      	lsls	r2, r2, #1
 8009c38:	e7d8      	b.n	8009bec <_dtoa_r+0x25c>
 8009c3a:	bf00      	nop
 8009c3c:	f3af 8000 	nop.w
 8009c40:	636f4361 	.word	0x636f4361
 8009c44:	3fd287a7 	.word	0x3fd287a7
 8009c48:	8b60c8b3 	.word	0x8b60c8b3
 8009c4c:	3fc68a28 	.word	0x3fc68a28
 8009c50:	509f79fb 	.word	0x509f79fb
 8009c54:	3fd34413 	.word	0x3fd34413
 8009c58:	0800d03e 	.word	0x0800d03e
 8009c5c:	0800d055 	.word	0x0800d055
 8009c60:	7ff00000 	.word	0x7ff00000
 8009c64:	0800d009 	.word	0x0800d009
 8009c68:	3ff80000 	.word	0x3ff80000
 8009c6c:	0800d150 	.word	0x0800d150
 8009c70:	0800d0ad 	.word	0x0800d0ad
 8009c74:	0800d03a 	.word	0x0800d03a
 8009c78:	0800d008 	.word	0x0800d008
 8009c7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009c80:	6018      	str	r0, [r3, #0]
 8009c82:	9b07      	ldr	r3, [sp, #28]
 8009c84:	2b0e      	cmp	r3, #14
 8009c86:	f200 80a4 	bhi.w	8009dd2 <_dtoa_r+0x442>
 8009c8a:	2c00      	cmp	r4, #0
 8009c8c:	f000 80a1 	beq.w	8009dd2 <_dtoa_r+0x442>
 8009c90:	2f00      	cmp	r7, #0
 8009c92:	dd33      	ble.n	8009cfc <_dtoa_r+0x36c>
 8009c94:	4bad      	ldr	r3, [pc, #692]	@ (8009f4c <_dtoa_r+0x5bc>)
 8009c96:	f007 020f 	and.w	r2, r7, #15
 8009c9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c9e:	ed93 7b00 	vldr	d7, [r3]
 8009ca2:	05f8      	lsls	r0, r7, #23
 8009ca4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009ca8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009cac:	d516      	bpl.n	8009cdc <_dtoa_r+0x34c>
 8009cae:	4ba8      	ldr	r3, [pc, #672]	@ (8009f50 <_dtoa_r+0x5c0>)
 8009cb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009cb8:	f7f6 fdf0 	bl	800089c <__aeabi_ddiv>
 8009cbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cc0:	f004 040f 	and.w	r4, r4, #15
 8009cc4:	2603      	movs	r6, #3
 8009cc6:	4da2      	ldr	r5, [pc, #648]	@ (8009f50 <_dtoa_r+0x5c0>)
 8009cc8:	b954      	cbnz	r4, 8009ce0 <_dtoa_r+0x350>
 8009cca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cd2:	f7f6 fde3 	bl	800089c <__aeabi_ddiv>
 8009cd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cda:	e028      	b.n	8009d2e <_dtoa_r+0x39e>
 8009cdc:	2602      	movs	r6, #2
 8009cde:	e7f2      	b.n	8009cc6 <_dtoa_r+0x336>
 8009ce0:	07e1      	lsls	r1, r4, #31
 8009ce2:	d508      	bpl.n	8009cf6 <_dtoa_r+0x366>
 8009ce4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ce8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009cec:	f7f6 fcac 	bl	8000648 <__aeabi_dmul>
 8009cf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cf4:	3601      	adds	r6, #1
 8009cf6:	1064      	asrs	r4, r4, #1
 8009cf8:	3508      	adds	r5, #8
 8009cfa:	e7e5      	b.n	8009cc8 <_dtoa_r+0x338>
 8009cfc:	f000 80d2 	beq.w	8009ea4 <_dtoa_r+0x514>
 8009d00:	427c      	negs	r4, r7
 8009d02:	4b92      	ldr	r3, [pc, #584]	@ (8009f4c <_dtoa_r+0x5bc>)
 8009d04:	4d92      	ldr	r5, [pc, #584]	@ (8009f50 <_dtoa_r+0x5c0>)
 8009d06:	f004 020f 	and.w	r2, r4, #15
 8009d0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d16:	f7f6 fc97 	bl	8000648 <__aeabi_dmul>
 8009d1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d1e:	1124      	asrs	r4, r4, #4
 8009d20:	2300      	movs	r3, #0
 8009d22:	2602      	movs	r6, #2
 8009d24:	2c00      	cmp	r4, #0
 8009d26:	f040 80b2 	bne.w	8009e8e <_dtoa_r+0x4fe>
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1d3      	bne.n	8009cd6 <_dtoa_r+0x346>
 8009d2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f000 80b7 	beq.w	8009ea8 <_dtoa_r+0x518>
 8009d3a:	4b86      	ldr	r3, [pc, #536]	@ (8009f54 <_dtoa_r+0x5c4>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	4620      	mov	r0, r4
 8009d40:	4629      	mov	r1, r5
 8009d42:	f7f6 fef3 	bl	8000b2c <__aeabi_dcmplt>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	f000 80ae 	beq.w	8009ea8 <_dtoa_r+0x518>
 8009d4c:	9b07      	ldr	r3, [sp, #28]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	f000 80aa 	beq.w	8009ea8 <_dtoa_r+0x518>
 8009d54:	9b00      	ldr	r3, [sp, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	dd37      	ble.n	8009dca <_dtoa_r+0x43a>
 8009d5a:	1e7b      	subs	r3, r7, #1
 8009d5c:	9304      	str	r3, [sp, #16]
 8009d5e:	4620      	mov	r0, r4
 8009d60:	4b7d      	ldr	r3, [pc, #500]	@ (8009f58 <_dtoa_r+0x5c8>)
 8009d62:	2200      	movs	r2, #0
 8009d64:	4629      	mov	r1, r5
 8009d66:	f7f6 fc6f 	bl	8000648 <__aeabi_dmul>
 8009d6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d6e:	9c00      	ldr	r4, [sp, #0]
 8009d70:	3601      	adds	r6, #1
 8009d72:	4630      	mov	r0, r6
 8009d74:	f7f6 fbfe 	bl	8000574 <__aeabi_i2d>
 8009d78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d7c:	f7f6 fc64 	bl	8000648 <__aeabi_dmul>
 8009d80:	4b76      	ldr	r3, [pc, #472]	@ (8009f5c <_dtoa_r+0x5cc>)
 8009d82:	2200      	movs	r2, #0
 8009d84:	f7f6 faaa 	bl	80002dc <__adddf3>
 8009d88:	4605      	mov	r5, r0
 8009d8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009d8e:	2c00      	cmp	r4, #0
 8009d90:	f040 808d 	bne.w	8009eae <_dtoa_r+0x51e>
 8009d94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d98:	4b71      	ldr	r3, [pc, #452]	@ (8009f60 <_dtoa_r+0x5d0>)
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f7f6 fa9c 	bl	80002d8 <__aeabi_dsub>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009da8:	462a      	mov	r2, r5
 8009daa:	4633      	mov	r3, r6
 8009dac:	f7f6 fedc 	bl	8000b68 <__aeabi_dcmpgt>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	f040 828b 	bne.w	800a2cc <_dtoa_r+0x93c>
 8009db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dba:	462a      	mov	r2, r5
 8009dbc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009dc0:	f7f6 feb4 	bl	8000b2c <__aeabi_dcmplt>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	f040 8128 	bne.w	800a01a <_dtoa_r+0x68a>
 8009dca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009dce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009dd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f2c0 815a 	blt.w	800a08e <_dtoa_r+0x6fe>
 8009dda:	2f0e      	cmp	r7, #14
 8009ddc:	f300 8157 	bgt.w	800a08e <_dtoa_r+0x6fe>
 8009de0:	4b5a      	ldr	r3, [pc, #360]	@ (8009f4c <_dtoa_r+0x5bc>)
 8009de2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009de6:	ed93 7b00 	vldr	d7, [r3]
 8009dea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	ed8d 7b00 	vstr	d7, [sp]
 8009df2:	da03      	bge.n	8009dfc <_dtoa_r+0x46c>
 8009df4:	9b07      	ldr	r3, [sp, #28]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f340 8101 	ble.w	8009ffe <_dtoa_r+0x66e>
 8009dfc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009e00:	4656      	mov	r6, sl
 8009e02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e06:	4620      	mov	r0, r4
 8009e08:	4629      	mov	r1, r5
 8009e0a:	f7f6 fd47 	bl	800089c <__aeabi_ddiv>
 8009e0e:	f7f6 fecb 	bl	8000ba8 <__aeabi_d2iz>
 8009e12:	4680      	mov	r8, r0
 8009e14:	f7f6 fbae 	bl	8000574 <__aeabi_i2d>
 8009e18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e1c:	f7f6 fc14 	bl	8000648 <__aeabi_dmul>
 8009e20:	4602      	mov	r2, r0
 8009e22:	460b      	mov	r3, r1
 8009e24:	4620      	mov	r0, r4
 8009e26:	4629      	mov	r1, r5
 8009e28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009e2c:	f7f6 fa54 	bl	80002d8 <__aeabi_dsub>
 8009e30:	f806 4b01 	strb.w	r4, [r6], #1
 8009e34:	9d07      	ldr	r5, [sp, #28]
 8009e36:	eba6 040a 	sub.w	r4, r6, sl
 8009e3a:	42a5      	cmp	r5, r4
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	460b      	mov	r3, r1
 8009e40:	f040 8117 	bne.w	800a072 <_dtoa_r+0x6e2>
 8009e44:	f7f6 fa4a 	bl	80002dc <__adddf3>
 8009e48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e4c:	4604      	mov	r4, r0
 8009e4e:	460d      	mov	r5, r1
 8009e50:	f7f6 fe8a 	bl	8000b68 <__aeabi_dcmpgt>
 8009e54:	2800      	cmp	r0, #0
 8009e56:	f040 80f9 	bne.w	800a04c <_dtoa_r+0x6bc>
 8009e5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e5e:	4620      	mov	r0, r4
 8009e60:	4629      	mov	r1, r5
 8009e62:	f7f6 fe59 	bl	8000b18 <__aeabi_dcmpeq>
 8009e66:	b118      	cbz	r0, 8009e70 <_dtoa_r+0x4e0>
 8009e68:	f018 0f01 	tst.w	r8, #1
 8009e6c:	f040 80ee 	bne.w	800a04c <_dtoa_r+0x6bc>
 8009e70:	4649      	mov	r1, r9
 8009e72:	4658      	mov	r0, fp
 8009e74:	f000 fc90 	bl	800a798 <_Bfree>
 8009e78:	2300      	movs	r3, #0
 8009e7a:	7033      	strb	r3, [r6, #0]
 8009e7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e7e:	3701      	adds	r7, #1
 8009e80:	601f      	str	r7, [r3, #0]
 8009e82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f000 831d 	beq.w	800a4c4 <_dtoa_r+0xb34>
 8009e8a:	601e      	str	r6, [r3, #0]
 8009e8c:	e31a      	b.n	800a4c4 <_dtoa_r+0xb34>
 8009e8e:	07e2      	lsls	r2, r4, #31
 8009e90:	d505      	bpl.n	8009e9e <_dtoa_r+0x50e>
 8009e92:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e96:	f7f6 fbd7 	bl	8000648 <__aeabi_dmul>
 8009e9a:	3601      	adds	r6, #1
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	1064      	asrs	r4, r4, #1
 8009ea0:	3508      	adds	r5, #8
 8009ea2:	e73f      	b.n	8009d24 <_dtoa_r+0x394>
 8009ea4:	2602      	movs	r6, #2
 8009ea6:	e742      	b.n	8009d2e <_dtoa_r+0x39e>
 8009ea8:	9c07      	ldr	r4, [sp, #28]
 8009eaa:	9704      	str	r7, [sp, #16]
 8009eac:	e761      	b.n	8009d72 <_dtoa_r+0x3e2>
 8009eae:	4b27      	ldr	r3, [pc, #156]	@ (8009f4c <_dtoa_r+0x5bc>)
 8009eb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009eb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009eb6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009eba:	4454      	add	r4, sl
 8009ebc:	2900      	cmp	r1, #0
 8009ebe:	d053      	beq.n	8009f68 <_dtoa_r+0x5d8>
 8009ec0:	4928      	ldr	r1, [pc, #160]	@ (8009f64 <_dtoa_r+0x5d4>)
 8009ec2:	2000      	movs	r0, #0
 8009ec4:	f7f6 fcea 	bl	800089c <__aeabi_ddiv>
 8009ec8:	4633      	mov	r3, r6
 8009eca:	462a      	mov	r2, r5
 8009ecc:	f7f6 fa04 	bl	80002d8 <__aeabi_dsub>
 8009ed0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ed4:	4656      	mov	r6, sl
 8009ed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eda:	f7f6 fe65 	bl	8000ba8 <__aeabi_d2iz>
 8009ede:	4605      	mov	r5, r0
 8009ee0:	f7f6 fb48 	bl	8000574 <__aeabi_i2d>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eec:	f7f6 f9f4 	bl	80002d8 <__aeabi_dsub>
 8009ef0:	3530      	adds	r5, #48	@ 0x30
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009efa:	f806 5b01 	strb.w	r5, [r6], #1
 8009efe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f02:	f7f6 fe13 	bl	8000b2c <__aeabi_dcmplt>
 8009f06:	2800      	cmp	r0, #0
 8009f08:	d171      	bne.n	8009fee <_dtoa_r+0x65e>
 8009f0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f0e:	4911      	ldr	r1, [pc, #68]	@ (8009f54 <_dtoa_r+0x5c4>)
 8009f10:	2000      	movs	r0, #0
 8009f12:	f7f6 f9e1 	bl	80002d8 <__aeabi_dsub>
 8009f16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f1a:	f7f6 fe07 	bl	8000b2c <__aeabi_dcmplt>
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	f040 8095 	bne.w	800a04e <_dtoa_r+0x6be>
 8009f24:	42a6      	cmp	r6, r4
 8009f26:	f43f af50 	beq.w	8009dca <_dtoa_r+0x43a>
 8009f2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8009f58 <_dtoa_r+0x5c8>)
 8009f30:	2200      	movs	r2, #0
 8009f32:	f7f6 fb89 	bl	8000648 <__aeabi_dmul>
 8009f36:	4b08      	ldr	r3, [pc, #32]	@ (8009f58 <_dtoa_r+0x5c8>)
 8009f38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f42:	f7f6 fb81 	bl	8000648 <__aeabi_dmul>
 8009f46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f4a:	e7c4      	b.n	8009ed6 <_dtoa_r+0x546>
 8009f4c:	0800d150 	.word	0x0800d150
 8009f50:	0800d128 	.word	0x0800d128
 8009f54:	3ff00000 	.word	0x3ff00000
 8009f58:	40240000 	.word	0x40240000
 8009f5c:	401c0000 	.word	0x401c0000
 8009f60:	40140000 	.word	0x40140000
 8009f64:	3fe00000 	.word	0x3fe00000
 8009f68:	4631      	mov	r1, r6
 8009f6a:	4628      	mov	r0, r5
 8009f6c:	f7f6 fb6c 	bl	8000648 <__aeabi_dmul>
 8009f70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f74:	9415      	str	r4, [sp, #84]	@ 0x54
 8009f76:	4656      	mov	r6, sl
 8009f78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f7c:	f7f6 fe14 	bl	8000ba8 <__aeabi_d2iz>
 8009f80:	4605      	mov	r5, r0
 8009f82:	f7f6 faf7 	bl	8000574 <__aeabi_i2d>
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f8e:	f7f6 f9a3 	bl	80002d8 <__aeabi_dsub>
 8009f92:	3530      	adds	r5, #48	@ 0x30
 8009f94:	f806 5b01 	strb.w	r5, [r6], #1
 8009f98:	4602      	mov	r2, r0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	42a6      	cmp	r6, r4
 8009f9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009fa2:	f04f 0200 	mov.w	r2, #0
 8009fa6:	d124      	bne.n	8009ff2 <_dtoa_r+0x662>
 8009fa8:	4bac      	ldr	r3, [pc, #688]	@ (800a25c <_dtoa_r+0x8cc>)
 8009faa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009fae:	f7f6 f995 	bl	80002dc <__adddf3>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fba:	f7f6 fdd5 	bl	8000b68 <__aeabi_dcmpgt>
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	d145      	bne.n	800a04e <_dtoa_r+0x6be>
 8009fc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009fc6:	49a5      	ldr	r1, [pc, #660]	@ (800a25c <_dtoa_r+0x8cc>)
 8009fc8:	2000      	movs	r0, #0
 8009fca:	f7f6 f985 	bl	80002d8 <__aeabi_dsub>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fd6:	f7f6 fda9 	bl	8000b2c <__aeabi_dcmplt>
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	f43f aef5 	beq.w	8009dca <_dtoa_r+0x43a>
 8009fe0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009fe2:	1e73      	subs	r3, r6, #1
 8009fe4:	9315      	str	r3, [sp, #84]	@ 0x54
 8009fe6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009fea:	2b30      	cmp	r3, #48	@ 0x30
 8009fec:	d0f8      	beq.n	8009fe0 <_dtoa_r+0x650>
 8009fee:	9f04      	ldr	r7, [sp, #16]
 8009ff0:	e73e      	b.n	8009e70 <_dtoa_r+0x4e0>
 8009ff2:	4b9b      	ldr	r3, [pc, #620]	@ (800a260 <_dtoa_r+0x8d0>)
 8009ff4:	f7f6 fb28 	bl	8000648 <__aeabi_dmul>
 8009ff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ffc:	e7bc      	b.n	8009f78 <_dtoa_r+0x5e8>
 8009ffe:	d10c      	bne.n	800a01a <_dtoa_r+0x68a>
 800a000:	4b98      	ldr	r3, [pc, #608]	@ (800a264 <_dtoa_r+0x8d4>)
 800a002:	2200      	movs	r2, #0
 800a004:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a008:	f7f6 fb1e 	bl	8000648 <__aeabi_dmul>
 800a00c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a010:	f7f6 fda0 	bl	8000b54 <__aeabi_dcmpge>
 800a014:	2800      	cmp	r0, #0
 800a016:	f000 8157 	beq.w	800a2c8 <_dtoa_r+0x938>
 800a01a:	2400      	movs	r4, #0
 800a01c:	4625      	mov	r5, r4
 800a01e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a020:	43db      	mvns	r3, r3
 800a022:	9304      	str	r3, [sp, #16]
 800a024:	4656      	mov	r6, sl
 800a026:	2700      	movs	r7, #0
 800a028:	4621      	mov	r1, r4
 800a02a:	4658      	mov	r0, fp
 800a02c:	f000 fbb4 	bl	800a798 <_Bfree>
 800a030:	2d00      	cmp	r5, #0
 800a032:	d0dc      	beq.n	8009fee <_dtoa_r+0x65e>
 800a034:	b12f      	cbz	r7, 800a042 <_dtoa_r+0x6b2>
 800a036:	42af      	cmp	r7, r5
 800a038:	d003      	beq.n	800a042 <_dtoa_r+0x6b2>
 800a03a:	4639      	mov	r1, r7
 800a03c:	4658      	mov	r0, fp
 800a03e:	f000 fbab 	bl	800a798 <_Bfree>
 800a042:	4629      	mov	r1, r5
 800a044:	4658      	mov	r0, fp
 800a046:	f000 fba7 	bl	800a798 <_Bfree>
 800a04a:	e7d0      	b.n	8009fee <_dtoa_r+0x65e>
 800a04c:	9704      	str	r7, [sp, #16]
 800a04e:	4633      	mov	r3, r6
 800a050:	461e      	mov	r6, r3
 800a052:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a056:	2a39      	cmp	r2, #57	@ 0x39
 800a058:	d107      	bne.n	800a06a <_dtoa_r+0x6da>
 800a05a:	459a      	cmp	sl, r3
 800a05c:	d1f8      	bne.n	800a050 <_dtoa_r+0x6c0>
 800a05e:	9a04      	ldr	r2, [sp, #16]
 800a060:	3201      	adds	r2, #1
 800a062:	9204      	str	r2, [sp, #16]
 800a064:	2230      	movs	r2, #48	@ 0x30
 800a066:	f88a 2000 	strb.w	r2, [sl]
 800a06a:	781a      	ldrb	r2, [r3, #0]
 800a06c:	3201      	adds	r2, #1
 800a06e:	701a      	strb	r2, [r3, #0]
 800a070:	e7bd      	b.n	8009fee <_dtoa_r+0x65e>
 800a072:	4b7b      	ldr	r3, [pc, #492]	@ (800a260 <_dtoa_r+0x8d0>)
 800a074:	2200      	movs	r2, #0
 800a076:	f7f6 fae7 	bl	8000648 <__aeabi_dmul>
 800a07a:	2200      	movs	r2, #0
 800a07c:	2300      	movs	r3, #0
 800a07e:	4604      	mov	r4, r0
 800a080:	460d      	mov	r5, r1
 800a082:	f7f6 fd49 	bl	8000b18 <__aeabi_dcmpeq>
 800a086:	2800      	cmp	r0, #0
 800a088:	f43f aebb 	beq.w	8009e02 <_dtoa_r+0x472>
 800a08c:	e6f0      	b.n	8009e70 <_dtoa_r+0x4e0>
 800a08e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a090:	2a00      	cmp	r2, #0
 800a092:	f000 80db 	beq.w	800a24c <_dtoa_r+0x8bc>
 800a096:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a098:	2a01      	cmp	r2, #1
 800a09a:	f300 80bf 	bgt.w	800a21c <_dtoa_r+0x88c>
 800a09e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a0a0:	2a00      	cmp	r2, #0
 800a0a2:	f000 80b7 	beq.w	800a214 <_dtoa_r+0x884>
 800a0a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a0aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a0ac:	4646      	mov	r6, r8
 800a0ae:	9a08      	ldr	r2, [sp, #32]
 800a0b0:	2101      	movs	r1, #1
 800a0b2:	441a      	add	r2, r3
 800a0b4:	4658      	mov	r0, fp
 800a0b6:	4498      	add	r8, r3
 800a0b8:	9208      	str	r2, [sp, #32]
 800a0ba:	f000 fc6b 	bl	800a994 <__i2b>
 800a0be:	4605      	mov	r5, r0
 800a0c0:	b15e      	cbz	r6, 800a0da <_dtoa_r+0x74a>
 800a0c2:	9b08      	ldr	r3, [sp, #32]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	dd08      	ble.n	800a0da <_dtoa_r+0x74a>
 800a0c8:	42b3      	cmp	r3, r6
 800a0ca:	9a08      	ldr	r2, [sp, #32]
 800a0cc:	bfa8      	it	ge
 800a0ce:	4633      	movge	r3, r6
 800a0d0:	eba8 0803 	sub.w	r8, r8, r3
 800a0d4:	1af6      	subs	r6, r6, r3
 800a0d6:	1ad3      	subs	r3, r2, r3
 800a0d8:	9308      	str	r3, [sp, #32]
 800a0da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0dc:	b1f3      	cbz	r3, 800a11c <_dtoa_r+0x78c>
 800a0de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f000 80b7 	beq.w	800a254 <_dtoa_r+0x8c4>
 800a0e6:	b18c      	cbz	r4, 800a10c <_dtoa_r+0x77c>
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	4622      	mov	r2, r4
 800a0ec:	4658      	mov	r0, fp
 800a0ee:	f000 fd11 	bl	800ab14 <__pow5mult>
 800a0f2:	464a      	mov	r2, r9
 800a0f4:	4601      	mov	r1, r0
 800a0f6:	4605      	mov	r5, r0
 800a0f8:	4658      	mov	r0, fp
 800a0fa:	f000 fc61 	bl	800a9c0 <__multiply>
 800a0fe:	4649      	mov	r1, r9
 800a100:	9004      	str	r0, [sp, #16]
 800a102:	4658      	mov	r0, fp
 800a104:	f000 fb48 	bl	800a798 <_Bfree>
 800a108:	9b04      	ldr	r3, [sp, #16]
 800a10a:	4699      	mov	r9, r3
 800a10c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a10e:	1b1a      	subs	r2, r3, r4
 800a110:	d004      	beq.n	800a11c <_dtoa_r+0x78c>
 800a112:	4649      	mov	r1, r9
 800a114:	4658      	mov	r0, fp
 800a116:	f000 fcfd 	bl	800ab14 <__pow5mult>
 800a11a:	4681      	mov	r9, r0
 800a11c:	2101      	movs	r1, #1
 800a11e:	4658      	mov	r0, fp
 800a120:	f000 fc38 	bl	800a994 <__i2b>
 800a124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a126:	4604      	mov	r4, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f000 81cf 	beq.w	800a4cc <_dtoa_r+0xb3c>
 800a12e:	461a      	mov	r2, r3
 800a130:	4601      	mov	r1, r0
 800a132:	4658      	mov	r0, fp
 800a134:	f000 fcee 	bl	800ab14 <__pow5mult>
 800a138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	4604      	mov	r4, r0
 800a13e:	f300 8095 	bgt.w	800a26c <_dtoa_r+0x8dc>
 800a142:	9b02      	ldr	r3, [sp, #8]
 800a144:	2b00      	cmp	r3, #0
 800a146:	f040 8087 	bne.w	800a258 <_dtoa_r+0x8c8>
 800a14a:	9b03      	ldr	r3, [sp, #12]
 800a14c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a150:	2b00      	cmp	r3, #0
 800a152:	f040 8089 	bne.w	800a268 <_dtoa_r+0x8d8>
 800a156:	9b03      	ldr	r3, [sp, #12]
 800a158:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a15c:	0d1b      	lsrs	r3, r3, #20
 800a15e:	051b      	lsls	r3, r3, #20
 800a160:	b12b      	cbz	r3, 800a16e <_dtoa_r+0x7de>
 800a162:	9b08      	ldr	r3, [sp, #32]
 800a164:	3301      	adds	r3, #1
 800a166:	9308      	str	r3, [sp, #32]
 800a168:	f108 0801 	add.w	r8, r8, #1
 800a16c:	2301      	movs	r3, #1
 800a16e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a170:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a172:	2b00      	cmp	r3, #0
 800a174:	f000 81b0 	beq.w	800a4d8 <_dtoa_r+0xb48>
 800a178:	6923      	ldr	r3, [r4, #16]
 800a17a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a17e:	6918      	ldr	r0, [r3, #16]
 800a180:	f000 fbbc 	bl	800a8fc <__hi0bits>
 800a184:	f1c0 0020 	rsb	r0, r0, #32
 800a188:	9b08      	ldr	r3, [sp, #32]
 800a18a:	4418      	add	r0, r3
 800a18c:	f010 001f 	ands.w	r0, r0, #31
 800a190:	d077      	beq.n	800a282 <_dtoa_r+0x8f2>
 800a192:	f1c0 0320 	rsb	r3, r0, #32
 800a196:	2b04      	cmp	r3, #4
 800a198:	dd6b      	ble.n	800a272 <_dtoa_r+0x8e2>
 800a19a:	9b08      	ldr	r3, [sp, #32]
 800a19c:	f1c0 001c 	rsb	r0, r0, #28
 800a1a0:	4403      	add	r3, r0
 800a1a2:	4480      	add	r8, r0
 800a1a4:	4406      	add	r6, r0
 800a1a6:	9308      	str	r3, [sp, #32]
 800a1a8:	f1b8 0f00 	cmp.w	r8, #0
 800a1ac:	dd05      	ble.n	800a1ba <_dtoa_r+0x82a>
 800a1ae:	4649      	mov	r1, r9
 800a1b0:	4642      	mov	r2, r8
 800a1b2:	4658      	mov	r0, fp
 800a1b4:	f000 fd08 	bl	800abc8 <__lshift>
 800a1b8:	4681      	mov	r9, r0
 800a1ba:	9b08      	ldr	r3, [sp, #32]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	dd05      	ble.n	800a1cc <_dtoa_r+0x83c>
 800a1c0:	4621      	mov	r1, r4
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	4658      	mov	r0, fp
 800a1c6:	f000 fcff 	bl	800abc8 <__lshift>
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d059      	beq.n	800a286 <_dtoa_r+0x8f6>
 800a1d2:	4621      	mov	r1, r4
 800a1d4:	4648      	mov	r0, r9
 800a1d6:	f000 fd63 	bl	800aca0 <__mcmp>
 800a1da:	2800      	cmp	r0, #0
 800a1dc:	da53      	bge.n	800a286 <_dtoa_r+0x8f6>
 800a1de:	1e7b      	subs	r3, r7, #1
 800a1e0:	9304      	str	r3, [sp, #16]
 800a1e2:	4649      	mov	r1, r9
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	220a      	movs	r2, #10
 800a1e8:	4658      	mov	r0, fp
 800a1ea:	f000 faf7 	bl	800a7dc <__multadd>
 800a1ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1f0:	4681      	mov	r9, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	f000 8172 	beq.w	800a4dc <_dtoa_r+0xb4c>
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	4629      	mov	r1, r5
 800a1fc:	220a      	movs	r2, #10
 800a1fe:	4658      	mov	r0, fp
 800a200:	f000 faec 	bl	800a7dc <__multadd>
 800a204:	9b00      	ldr	r3, [sp, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	4605      	mov	r5, r0
 800a20a:	dc67      	bgt.n	800a2dc <_dtoa_r+0x94c>
 800a20c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a20e:	2b02      	cmp	r3, #2
 800a210:	dc41      	bgt.n	800a296 <_dtoa_r+0x906>
 800a212:	e063      	b.n	800a2dc <_dtoa_r+0x94c>
 800a214:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a216:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a21a:	e746      	b.n	800a0aa <_dtoa_r+0x71a>
 800a21c:	9b07      	ldr	r3, [sp, #28]
 800a21e:	1e5c      	subs	r4, r3, #1
 800a220:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a222:	42a3      	cmp	r3, r4
 800a224:	bfbf      	itttt	lt
 800a226:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a228:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a22a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a22c:	1ae3      	sublt	r3, r4, r3
 800a22e:	bfb4      	ite	lt
 800a230:	18d2      	addlt	r2, r2, r3
 800a232:	1b1c      	subge	r4, r3, r4
 800a234:	9b07      	ldr	r3, [sp, #28]
 800a236:	bfbc      	itt	lt
 800a238:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a23a:	2400      	movlt	r4, #0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	bfb5      	itete	lt
 800a240:	eba8 0603 	sublt.w	r6, r8, r3
 800a244:	9b07      	ldrge	r3, [sp, #28]
 800a246:	2300      	movlt	r3, #0
 800a248:	4646      	movge	r6, r8
 800a24a:	e730      	b.n	800a0ae <_dtoa_r+0x71e>
 800a24c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a24e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a250:	4646      	mov	r6, r8
 800a252:	e735      	b.n	800a0c0 <_dtoa_r+0x730>
 800a254:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a256:	e75c      	b.n	800a112 <_dtoa_r+0x782>
 800a258:	2300      	movs	r3, #0
 800a25a:	e788      	b.n	800a16e <_dtoa_r+0x7de>
 800a25c:	3fe00000 	.word	0x3fe00000
 800a260:	40240000 	.word	0x40240000
 800a264:	40140000 	.word	0x40140000
 800a268:	9b02      	ldr	r3, [sp, #8]
 800a26a:	e780      	b.n	800a16e <_dtoa_r+0x7de>
 800a26c:	2300      	movs	r3, #0
 800a26e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a270:	e782      	b.n	800a178 <_dtoa_r+0x7e8>
 800a272:	d099      	beq.n	800a1a8 <_dtoa_r+0x818>
 800a274:	9a08      	ldr	r2, [sp, #32]
 800a276:	331c      	adds	r3, #28
 800a278:	441a      	add	r2, r3
 800a27a:	4498      	add	r8, r3
 800a27c:	441e      	add	r6, r3
 800a27e:	9208      	str	r2, [sp, #32]
 800a280:	e792      	b.n	800a1a8 <_dtoa_r+0x818>
 800a282:	4603      	mov	r3, r0
 800a284:	e7f6      	b.n	800a274 <_dtoa_r+0x8e4>
 800a286:	9b07      	ldr	r3, [sp, #28]
 800a288:	9704      	str	r7, [sp, #16]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	dc20      	bgt.n	800a2d0 <_dtoa_r+0x940>
 800a28e:	9300      	str	r3, [sp, #0]
 800a290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a292:	2b02      	cmp	r3, #2
 800a294:	dd1e      	ble.n	800a2d4 <_dtoa_r+0x944>
 800a296:	9b00      	ldr	r3, [sp, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f47f aec0 	bne.w	800a01e <_dtoa_r+0x68e>
 800a29e:	4621      	mov	r1, r4
 800a2a0:	2205      	movs	r2, #5
 800a2a2:	4658      	mov	r0, fp
 800a2a4:	f000 fa9a 	bl	800a7dc <__multadd>
 800a2a8:	4601      	mov	r1, r0
 800a2aa:	4604      	mov	r4, r0
 800a2ac:	4648      	mov	r0, r9
 800a2ae:	f000 fcf7 	bl	800aca0 <__mcmp>
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	f77f aeb3 	ble.w	800a01e <_dtoa_r+0x68e>
 800a2b8:	4656      	mov	r6, sl
 800a2ba:	2331      	movs	r3, #49	@ 0x31
 800a2bc:	f806 3b01 	strb.w	r3, [r6], #1
 800a2c0:	9b04      	ldr	r3, [sp, #16]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	9304      	str	r3, [sp, #16]
 800a2c6:	e6ae      	b.n	800a026 <_dtoa_r+0x696>
 800a2c8:	9c07      	ldr	r4, [sp, #28]
 800a2ca:	9704      	str	r7, [sp, #16]
 800a2cc:	4625      	mov	r5, r4
 800a2ce:	e7f3      	b.n	800a2b8 <_dtoa_r+0x928>
 800a2d0:	9b07      	ldr	r3, [sp, #28]
 800a2d2:	9300      	str	r3, [sp, #0]
 800a2d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	f000 8104 	beq.w	800a4e4 <_dtoa_r+0xb54>
 800a2dc:	2e00      	cmp	r6, #0
 800a2de:	dd05      	ble.n	800a2ec <_dtoa_r+0x95c>
 800a2e0:	4629      	mov	r1, r5
 800a2e2:	4632      	mov	r2, r6
 800a2e4:	4658      	mov	r0, fp
 800a2e6:	f000 fc6f 	bl	800abc8 <__lshift>
 800a2ea:	4605      	mov	r5, r0
 800a2ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d05a      	beq.n	800a3a8 <_dtoa_r+0xa18>
 800a2f2:	6869      	ldr	r1, [r5, #4]
 800a2f4:	4658      	mov	r0, fp
 800a2f6:	f000 fa0f 	bl	800a718 <_Balloc>
 800a2fa:	4606      	mov	r6, r0
 800a2fc:	b928      	cbnz	r0, 800a30a <_dtoa_r+0x97a>
 800a2fe:	4b84      	ldr	r3, [pc, #528]	@ (800a510 <_dtoa_r+0xb80>)
 800a300:	4602      	mov	r2, r0
 800a302:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a306:	f7ff bb5a 	b.w	80099be <_dtoa_r+0x2e>
 800a30a:	692a      	ldr	r2, [r5, #16]
 800a30c:	3202      	adds	r2, #2
 800a30e:	0092      	lsls	r2, r2, #2
 800a310:	f105 010c 	add.w	r1, r5, #12
 800a314:	300c      	adds	r0, #12
 800a316:	f7ff fa9e 	bl	8009856 <memcpy>
 800a31a:	2201      	movs	r2, #1
 800a31c:	4631      	mov	r1, r6
 800a31e:	4658      	mov	r0, fp
 800a320:	f000 fc52 	bl	800abc8 <__lshift>
 800a324:	f10a 0301 	add.w	r3, sl, #1
 800a328:	9307      	str	r3, [sp, #28]
 800a32a:	9b00      	ldr	r3, [sp, #0]
 800a32c:	4453      	add	r3, sl
 800a32e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a330:	9b02      	ldr	r3, [sp, #8]
 800a332:	f003 0301 	and.w	r3, r3, #1
 800a336:	462f      	mov	r7, r5
 800a338:	930a      	str	r3, [sp, #40]	@ 0x28
 800a33a:	4605      	mov	r5, r0
 800a33c:	9b07      	ldr	r3, [sp, #28]
 800a33e:	4621      	mov	r1, r4
 800a340:	3b01      	subs	r3, #1
 800a342:	4648      	mov	r0, r9
 800a344:	9300      	str	r3, [sp, #0]
 800a346:	f7ff fa9b 	bl	8009880 <quorem>
 800a34a:	4639      	mov	r1, r7
 800a34c:	9002      	str	r0, [sp, #8]
 800a34e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a352:	4648      	mov	r0, r9
 800a354:	f000 fca4 	bl	800aca0 <__mcmp>
 800a358:	462a      	mov	r2, r5
 800a35a:	9008      	str	r0, [sp, #32]
 800a35c:	4621      	mov	r1, r4
 800a35e:	4658      	mov	r0, fp
 800a360:	f000 fcba 	bl	800acd8 <__mdiff>
 800a364:	68c2      	ldr	r2, [r0, #12]
 800a366:	4606      	mov	r6, r0
 800a368:	bb02      	cbnz	r2, 800a3ac <_dtoa_r+0xa1c>
 800a36a:	4601      	mov	r1, r0
 800a36c:	4648      	mov	r0, r9
 800a36e:	f000 fc97 	bl	800aca0 <__mcmp>
 800a372:	4602      	mov	r2, r0
 800a374:	4631      	mov	r1, r6
 800a376:	4658      	mov	r0, fp
 800a378:	920e      	str	r2, [sp, #56]	@ 0x38
 800a37a:	f000 fa0d 	bl	800a798 <_Bfree>
 800a37e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a380:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a382:	9e07      	ldr	r6, [sp, #28]
 800a384:	ea43 0102 	orr.w	r1, r3, r2
 800a388:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a38a:	4319      	orrs	r1, r3
 800a38c:	d110      	bne.n	800a3b0 <_dtoa_r+0xa20>
 800a38e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a392:	d029      	beq.n	800a3e8 <_dtoa_r+0xa58>
 800a394:	9b08      	ldr	r3, [sp, #32]
 800a396:	2b00      	cmp	r3, #0
 800a398:	dd02      	ble.n	800a3a0 <_dtoa_r+0xa10>
 800a39a:	9b02      	ldr	r3, [sp, #8]
 800a39c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a3a0:	9b00      	ldr	r3, [sp, #0]
 800a3a2:	f883 8000 	strb.w	r8, [r3]
 800a3a6:	e63f      	b.n	800a028 <_dtoa_r+0x698>
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	e7bb      	b.n	800a324 <_dtoa_r+0x994>
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	e7e1      	b.n	800a374 <_dtoa_r+0x9e4>
 800a3b0:	9b08      	ldr	r3, [sp, #32]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	db04      	blt.n	800a3c0 <_dtoa_r+0xa30>
 800a3b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a3b8:	430b      	orrs	r3, r1
 800a3ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a3bc:	430b      	orrs	r3, r1
 800a3be:	d120      	bne.n	800a402 <_dtoa_r+0xa72>
 800a3c0:	2a00      	cmp	r2, #0
 800a3c2:	dded      	ble.n	800a3a0 <_dtoa_r+0xa10>
 800a3c4:	4649      	mov	r1, r9
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	4658      	mov	r0, fp
 800a3ca:	f000 fbfd 	bl	800abc8 <__lshift>
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	4681      	mov	r9, r0
 800a3d2:	f000 fc65 	bl	800aca0 <__mcmp>
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	dc03      	bgt.n	800a3e2 <_dtoa_r+0xa52>
 800a3da:	d1e1      	bne.n	800a3a0 <_dtoa_r+0xa10>
 800a3dc:	f018 0f01 	tst.w	r8, #1
 800a3e0:	d0de      	beq.n	800a3a0 <_dtoa_r+0xa10>
 800a3e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a3e6:	d1d8      	bne.n	800a39a <_dtoa_r+0xa0a>
 800a3e8:	9a00      	ldr	r2, [sp, #0]
 800a3ea:	2339      	movs	r3, #57	@ 0x39
 800a3ec:	7013      	strb	r3, [r2, #0]
 800a3ee:	4633      	mov	r3, r6
 800a3f0:	461e      	mov	r6, r3
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a3f8:	2a39      	cmp	r2, #57	@ 0x39
 800a3fa:	d052      	beq.n	800a4a2 <_dtoa_r+0xb12>
 800a3fc:	3201      	adds	r2, #1
 800a3fe:	701a      	strb	r2, [r3, #0]
 800a400:	e612      	b.n	800a028 <_dtoa_r+0x698>
 800a402:	2a00      	cmp	r2, #0
 800a404:	dd07      	ble.n	800a416 <_dtoa_r+0xa86>
 800a406:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a40a:	d0ed      	beq.n	800a3e8 <_dtoa_r+0xa58>
 800a40c:	9a00      	ldr	r2, [sp, #0]
 800a40e:	f108 0301 	add.w	r3, r8, #1
 800a412:	7013      	strb	r3, [r2, #0]
 800a414:	e608      	b.n	800a028 <_dtoa_r+0x698>
 800a416:	9b07      	ldr	r3, [sp, #28]
 800a418:	9a07      	ldr	r2, [sp, #28]
 800a41a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a41e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a420:	4293      	cmp	r3, r2
 800a422:	d028      	beq.n	800a476 <_dtoa_r+0xae6>
 800a424:	4649      	mov	r1, r9
 800a426:	2300      	movs	r3, #0
 800a428:	220a      	movs	r2, #10
 800a42a:	4658      	mov	r0, fp
 800a42c:	f000 f9d6 	bl	800a7dc <__multadd>
 800a430:	42af      	cmp	r7, r5
 800a432:	4681      	mov	r9, r0
 800a434:	f04f 0300 	mov.w	r3, #0
 800a438:	f04f 020a 	mov.w	r2, #10
 800a43c:	4639      	mov	r1, r7
 800a43e:	4658      	mov	r0, fp
 800a440:	d107      	bne.n	800a452 <_dtoa_r+0xac2>
 800a442:	f000 f9cb 	bl	800a7dc <__multadd>
 800a446:	4607      	mov	r7, r0
 800a448:	4605      	mov	r5, r0
 800a44a:	9b07      	ldr	r3, [sp, #28]
 800a44c:	3301      	adds	r3, #1
 800a44e:	9307      	str	r3, [sp, #28]
 800a450:	e774      	b.n	800a33c <_dtoa_r+0x9ac>
 800a452:	f000 f9c3 	bl	800a7dc <__multadd>
 800a456:	4629      	mov	r1, r5
 800a458:	4607      	mov	r7, r0
 800a45a:	2300      	movs	r3, #0
 800a45c:	220a      	movs	r2, #10
 800a45e:	4658      	mov	r0, fp
 800a460:	f000 f9bc 	bl	800a7dc <__multadd>
 800a464:	4605      	mov	r5, r0
 800a466:	e7f0      	b.n	800a44a <_dtoa_r+0xaba>
 800a468:	9b00      	ldr	r3, [sp, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	bfcc      	ite	gt
 800a46e:	461e      	movgt	r6, r3
 800a470:	2601      	movle	r6, #1
 800a472:	4456      	add	r6, sl
 800a474:	2700      	movs	r7, #0
 800a476:	4649      	mov	r1, r9
 800a478:	2201      	movs	r2, #1
 800a47a:	4658      	mov	r0, fp
 800a47c:	f000 fba4 	bl	800abc8 <__lshift>
 800a480:	4621      	mov	r1, r4
 800a482:	4681      	mov	r9, r0
 800a484:	f000 fc0c 	bl	800aca0 <__mcmp>
 800a488:	2800      	cmp	r0, #0
 800a48a:	dcb0      	bgt.n	800a3ee <_dtoa_r+0xa5e>
 800a48c:	d102      	bne.n	800a494 <_dtoa_r+0xb04>
 800a48e:	f018 0f01 	tst.w	r8, #1
 800a492:	d1ac      	bne.n	800a3ee <_dtoa_r+0xa5e>
 800a494:	4633      	mov	r3, r6
 800a496:	461e      	mov	r6, r3
 800a498:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a49c:	2a30      	cmp	r2, #48	@ 0x30
 800a49e:	d0fa      	beq.n	800a496 <_dtoa_r+0xb06>
 800a4a0:	e5c2      	b.n	800a028 <_dtoa_r+0x698>
 800a4a2:	459a      	cmp	sl, r3
 800a4a4:	d1a4      	bne.n	800a3f0 <_dtoa_r+0xa60>
 800a4a6:	9b04      	ldr	r3, [sp, #16]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	9304      	str	r3, [sp, #16]
 800a4ac:	2331      	movs	r3, #49	@ 0x31
 800a4ae:	f88a 3000 	strb.w	r3, [sl]
 800a4b2:	e5b9      	b.n	800a028 <_dtoa_r+0x698>
 800a4b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a4b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a514 <_dtoa_r+0xb84>
 800a4ba:	b11b      	cbz	r3, 800a4c4 <_dtoa_r+0xb34>
 800a4bc:	f10a 0308 	add.w	r3, sl, #8
 800a4c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a4c2:	6013      	str	r3, [r2, #0]
 800a4c4:	4650      	mov	r0, sl
 800a4c6:	b019      	add	sp, #100	@ 0x64
 800a4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	f77f ae37 	ble.w	800a142 <_dtoa_r+0x7b2>
 800a4d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4d8:	2001      	movs	r0, #1
 800a4da:	e655      	b.n	800a188 <_dtoa_r+0x7f8>
 800a4dc:	9b00      	ldr	r3, [sp, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	f77f aed6 	ble.w	800a290 <_dtoa_r+0x900>
 800a4e4:	4656      	mov	r6, sl
 800a4e6:	4621      	mov	r1, r4
 800a4e8:	4648      	mov	r0, r9
 800a4ea:	f7ff f9c9 	bl	8009880 <quorem>
 800a4ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a4f2:	f806 8b01 	strb.w	r8, [r6], #1
 800a4f6:	9b00      	ldr	r3, [sp, #0]
 800a4f8:	eba6 020a 	sub.w	r2, r6, sl
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	ddb3      	ble.n	800a468 <_dtoa_r+0xad8>
 800a500:	4649      	mov	r1, r9
 800a502:	2300      	movs	r3, #0
 800a504:	220a      	movs	r2, #10
 800a506:	4658      	mov	r0, fp
 800a508:	f000 f968 	bl	800a7dc <__multadd>
 800a50c:	4681      	mov	r9, r0
 800a50e:	e7ea      	b.n	800a4e6 <_dtoa_r+0xb56>
 800a510:	0800d0ad 	.word	0x0800d0ad
 800a514:	0800d031 	.word	0x0800d031

0800a518 <_free_r>:
 800a518:	b538      	push	{r3, r4, r5, lr}
 800a51a:	4605      	mov	r5, r0
 800a51c:	2900      	cmp	r1, #0
 800a51e:	d041      	beq.n	800a5a4 <_free_r+0x8c>
 800a520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a524:	1f0c      	subs	r4, r1, #4
 800a526:	2b00      	cmp	r3, #0
 800a528:	bfb8      	it	lt
 800a52a:	18e4      	addlt	r4, r4, r3
 800a52c:	f000 f8e8 	bl	800a700 <__malloc_lock>
 800a530:	4a1d      	ldr	r2, [pc, #116]	@ (800a5a8 <_free_r+0x90>)
 800a532:	6813      	ldr	r3, [r2, #0]
 800a534:	b933      	cbnz	r3, 800a544 <_free_r+0x2c>
 800a536:	6063      	str	r3, [r4, #4]
 800a538:	6014      	str	r4, [r2, #0]
 800a53a:	4628      	mov	r0, r5
 800a53c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a540:	f000 b8e4 	b.w	800a70c <__malloc_unlock>
 800a544:	42a3      	cmp	r3, r4
 800a546:	d908      	bls.n	800a55a <_free_r+0x42>
 800a548:	6820      	ldr	r0, [r4, #0]
 800a54a:	1821      	adds	r1, r4, r0
 800a54c:	428b      	cmp	r3, r1
 800a54e:	bf01      	itttt	eq
 800a550:	6819      	ldreq	r1, [r3, #0]
 800a552:	685b      	ldreq	r3, [r3, #4]
 800a554:	1809      	addeq	r1, r1, r0
 800a556:	6021      	streq	r1, [r4, #0]
 800a558:	e7ed      	b.n	800a536 <_free_r+0x1e>
 800a55a:	461a      	mov	r2, r3
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	b10b      	cbz	r3, 800a564 <_free_r+0x4c>
 800a560:	42a3      	cmp	r3, r4
 800a562:	d9fa      	bls.n	800a55a <_free_r+0x42>
 800a564:	6811      	ldr	r1, [r2, #0]
 800a566:	1850      	adds	r0, r2, r1
 800a568:	42a0      	cmp	r0, r4
 800a56a:	d10b      	bne.n	800a584 <_free_r+0x6c>
 800a56c:	6820      	ldr	r0, [r4, #0]
 800a56e:	4401      	add	r1, r0
 800a570:	1850      	adds	r0, r2, r1
 800a572:	4283      	cmp	r3, r0
 800a574:	6011      	str	r1, [r2, #0]
 800a576:	d1e0      	bne.n	800a53a <_free_r+0x22>
 800a578:	6818      	ldr	r0, [r3, #0]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	6053      	str	r3, [r2, #4]
 800a57e:	4408      	add	r0, r1
 800a580:	6010      	str	r0, [r2, #0]
 800a582:	e7da      	b.n	800a53a <_free_r+0x22>
 800a584:	d902      	bls.n	800a58c <_free_r+0x74>
 800a586:	230c      	movs	r3, #12
 800a588:	602b      	str	r3, [r5, #0]
 800a58a:	e7d6      	b.n	800a53a <_free_r+0x22>
 800a58c:	6820      	ldr	r0, [r4, #0]
 800a58e:	1821      	adds	r1, r4, r0
 800a590:	428b      	cmp	r3, r1
 800a592:	bf04      	itt	eq
 800a594:	6819      	ldreq	r1, [r3, #0]
 800a596:	685b      	ldreq	r3, [r3, #4]
 800a598:	6063      	str	r3, [r4, #4]
 800a59a:	bf04      	itt	eq
 800a59c:	1809      	addeq	r1, r1, r0
 800a59e:	6021      	streq	r1, [r4, #0]
 800a5a0:	6054      	str	r4, [r2, #4]
 800a5a2:	e7ca      	b.n	800a53a <_free_r+0x22>
 800a5a4:	bd38      	pop	{r3, r4, r5, pc}
 800a5a6:	bf00      	nop
 800a5a8:	200013c4 	.word	0x200013c4

0800a5ac <malloc>:
 800a5ac:	4b02      	ldr	r3, [pc, #8]	@ (800a5b8 <malloc+0xc>)
 800a5ae:	4601      	mov	r1, r0
 800a5b0:	6818      	ldr	r0, [r3, #0]
 800a5b2:	f000 b825 	b.w	800a600 <_malloc_r>
 800a5b6:	bf00      	nop
 800a5b8:	2000001c 	.word	0x2000001c

0800a5bc <sbrk_aligned>:
 800a5bc:	b570      	push	{r4, r5, r6, lr}
 800a5be:	4e0f      	ldr	r6, [pc, #60]	@ (800a5fc <sbrk_aligned+0x40>)
 800a5c0:	460c      	mov	r4, r1
 800a5c2:	6831      	ldr	r1, [r6, #0]
 800a5c4:	4605      	mov	r5, r0
 800a5c6:	b911      	cbnz	r1, 800a5ce <sbrk_aligned+0x12>
 800a5c8:	f001 fe0c 	bl	800c1e4 <_sbrk_r>
 800a5cc:	6030      	str	r0, [r6, #0]
 800a5ce:	4621      	mov	r1, r4
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	f001 fe07 	bl	800c1e4 <_sbrk_r>
 800a5d6:	1c43      	adds	r3, r0, #1
 800a5d8:	d103      	bne.n	800a5e2 <sbrk_aligned+0x26>
 800a5da:	f04f 34ff 	mov.w	r4, #4294967295
 800a5de:	4620      	mov	r0, r4
 800a5e0:	bd70      	pop	{r4, r5, r6, pc}
 800a5e2:	1cc4      	adds	r4, r0, #3
 800a5e4:	f024 0403 	bic.w	r4, r4, #3
 800a5e8:	42a0      	cmp	r0, r4
 800a5ea:	d0f8      	beq.n	800a5de <sbrk_aligned+0x22>
 800a5ec:	1a21      	subs	r1, r4, r0
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	f001 fdf8 	bl	800c1e4 <_sbrk_r>
 800a5f4:	3001      	adds	r0, #1
 800a5f6:	d1f2      	bne.n	800a5de <sbrk_aligned+0x22>
 800a5f8:	e7ef      	b.n	800a5da <sbrk_aligned+0x1e>
 800a5fa:	bf00      	nop
 800a5fc:	200013c0 	.word	0x200013c0

0800a600 <_malloc_r>:
 800a600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a604:	1ccd      	adds	r5, r1, #3
 800a606:	f025 0503 	bic.w	r5, r5, #3
 800a60a:	3508      	adds	r5, #8
 800a60c:	2d0c      	cmp	r5, #12
 800a60e:	bf38      	it	cc
 800a610:	250c      	movcc	r5, #12
 800a612:	2d00      	cmp	r5, #0
 800a614:	4606      	mov	r6, r0
 800a616:	db01      	blt.n	800a61c <_malloc_r+0x1c>
 800a618:	42a9      	cmp	r1, r5
 800a61a:	d904      	bls.n	800a626 <_malloc_r+0x26>
 800a61c:	230c      	movs	r3, #12
 800a61e:	6033      	str	r3, [r6, #0]
 800a620:	2000      	movs	r0, #0
 800a622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a626:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a6fc <_malloc_r+0xfc>
 800a62a:	f000 f869 	bl	800a700 <__malloc_lock>
 800a62e:	f8d8 3000 	ldr.w	r3, [r8]
 800a632:	461c      	mov	r4, r3
 800a634:	bb44      	cbnz	r4, 800a688 <_malloc_r+0x88>
 800a636:	4629      	mov	r1, r5
 800a638:	4630      	mov	r0, r6
 800a63a:	f7ff ffbf 	bl	800a5bc <sbrk_aligned>
 800a63e:	1c43      	adds	r3, r0, #1
 800a640:	4604      	mov	r4, r0
 800a642:	d158      	bne.n	800a6f6 <_malloc_r+0xf6>
 800a644:	f8d8 4000 	ldr.w	r4, [r8]
 800a648:	4627      	mov	r7, r4
 800a64a:	2f00      	cmp	r7, #0
 800a64c:	d143      	bne.n	800a6d6 <_malloc_r+0xd6>
 800a64e:	2c00      	cmp	r4, #0
 800a650:	d04b      	beq.n	800a6ea <_malloc_r+0xea>
 800a652:	6823      	ldr	r3, [r4, #0]
 800a654:	4639      	mov	r1, r7
 800a656:	4630      	mov	r0, r6
 800a658:	eb04 0903 	add.w	r9, r4, r3
 800a65c:	f001 fdc2 	bl	800c1e4 <_sbrk_r>
 800a660:	4581      	cmp	r9, r0
 800a662:	d142      	bne.n	800a6ea <_malloc_r+0xea>
 800a664:	6821      	ldr	r1, [r4, #0]
 800a666:	1a6d      	subs	r5, r5, r1
 800a668:	4629      	mov	r1, r5
 800a66a:	4630      	mov	r0, r6
 800a66c:	f7ff ffa6 	bl	800a5bc <sbrk_aligned>
 800a670:	3001      	adds	r0, #1
 800a672:	d03a      	beq.n	800a6ea <_malloc_r+0xea>
 800a674:	6823      	ldr	r3, [r4, #0]
 800a676:	442b      	add	r3, r5
 800a678:	6023      	str	r3, [r4, #0]
 800a67a:	f8d8 3000 	ldr.w	r3, [r8]
 800a67e:	685a      	ldr	r2, [r3, #4]
 800a680:	bb62      	cbnz	r2, 800a6dc <_malloc_r+0xdc>
 800a682:	f8c8 7000 	str.w	r7, [r8]
 800a686:	e00f      	b.n	800a6a8 <_malloc_r+0xa8>
 800a688:	6822      	ldr	r2, [r4, #0]
 800a68a:	1b52      	subs	r2, r2, r5
 800a68c:	d420      	bmi.n	800a6d0 <_malloc_r+0xd0>
 800a68e:	2a0b      	cmp	r2, #11
 800a690:	d917      	bls.n	800a6c2 <_malloc_r+0xc2>
 800a692:	1961      	adds	r1, r4, r5
 800a694:	42a3      	cmp	r3, r4
 800a696:	6025      	str	r5, [r4, #0]
 800a698:	bf18      	it	ne
 800a69a:	6059      	strne	r1, [r3, #4]
 800a69c:	6863      	ldr	r3, [r4, #4]
 800a69e:	bf08      	it	eq
 800a6a0:	f8c8 1000 	streq.w	r1, [r8]
 800a6a4:	5162      	str	r2, [r4, r5]
 800a6a6:	604b      	str	r3, [r1, #4]
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	f000 f82f 	bl	800a70c <__malloc_unlock>
 800a6ae:	f104 000b 	add.w	r0, r4, #11
 800a6b2:	1d23      	adds	r3, r4, #4
 800a6b4:	f020 0007 	bic.w	r0, r0, #7
 800a6b8:	1ac2      	subs	r2, r0, r3
 800a6ba:	bf1c      	itt	ne
 800a6bc:	1a1b      	subne	r3, r3, r0
 800a6be:	50a3      	strne	r3, [r4, r2]
 800a6c0:	e7af      	b.n	800a622 <_malloc_r+0x22>
 800a6c2:	6862      	ldr	r2, [r4, #4]
 800a6c4:	42a3      	cmp	r3, r4
 800a6c6:	bf0c      	ite	eq
 800a6c8:	f8c8 2000 	streq.w	r2, [r8]
 800a6cc:	605a      	strne	r2, [r3, #4]
 800a6ce:	e7eb      	b.n	800a6a8 <_malloc_r+0xa8>
 800a6d0:	4623      	mov	r3, r4
 800a6d2:	6864      	ldr	r4, [r4, #4]
 800a6d4:	e7ae      	b.n	800a634 <_malloc_r+0x34>
 800a6d6:	463c      	mov	r4, r7
 800a6d8:	687f      	ldr	r7, [r7, #4]
 800a6da:	e7b6      	b.n	800a64a <_malloc_r+0x4a>
 800a6dc:	461a      	mov	r2, r3
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	42a3      	cmp	r3, r4
 800a6e2:	d1fb      	bne.n	800a6dc <_malloc_r+0xdc>
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	6053      	str	r3, [r2, #4]
 800a6e8:	e7de      	b.n	800a6a8 <_malloc_r+0xa8>
 800a6ea:	230c      	movs	r3, #12
 800a6ec:	6033      	str	r3, [r6, #0]
 800a6ee:	4630      	mov	r0, r6
 800a6f0:	f000 f80c 	bl	800a70c <__malloc_unlock>
 800a6f4:	e794      	b.n	800a620 <_malloc_r+0x20>
 800a6f6:	6005      	str	r5, [r0, #0]
 800a6f8:	e7d6      	b.n	800a6a8 <_malloc_r+0xa8>
 800a6fa:	bf00      	nop
 800a6fc:	200013c4 	.word	0x200013c4

0800a700 <__malloc_lock>:
 800a700:	4801      	ldr	r0, [pc, #4]	@ (800a708 <__malloc_lock+0x8>)
 800a702:	f7ff b8a6 	b.w	8009852 <__retarget_lock_acquire_recursive>
 800a706:	bf00      	nop
 800a708:	200013bc 	.word	0x200013bc

0800a70c <__malloc_unlock>:
 800a70c:	4801      	ldr	r0, [pc, #4]	@ (800a714 <__malloc_unlock+0x8>)
 800a70e:	f7ff b8a1 	b.w	8009854 <__retarget_lock_release_recursive>
 800a712:	bf00      	nop
 800a714:	200013bc 	.word	0x200013bc

0800a718 <_Balloc>:
 800a718:	b570      	push	{r4, r5, r6, lr}
 800a71a:	69c6      	ldr	r6, [r0, #28]
 800a71c:	4604      	mov	r4, r0
 800a71e:	460d      	mov	r5, r1
 800a720:	b976      	cbnz	r6, 800a740 <_Balloc+0x28>
 800a722:	2010      	movs	r0, #16
 800a724:	f7ff ff42 	bl	800a5ac <malloc>
 800a728:	4602      	mov	r2, r0
 800a72a:	61e0      	str	r0, [r4, #28]
 800a72c:	b920      	cbnz	r0, 800a738 <_Balloc+0x20>
 800a72e:	4b18      	ldr	r3, [pc, #96]	@ (800a790 <_Balloc+0x78>)
 800a730:	4818      	ldr	r0, [pc, #96]	@ (800a794 <_Balloc+0x7c>)
 800a732:	216b      	movs	r1, #107	@ 0x6b
 800a734:	f001 fd70 	bl	800c218 <__assert_func>
 800a738:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a73c:	6006      	str	r6, [r0, #0]
 800a73e:	60c6      	str	r6, [r0, #12]
 800a740:	69e6      	ldr	r6, [r4, #28]
 800a742:	68f3      	ldr	r3, [r6, #12]
 800a744:	b183      	cbz	r3, 800a768 <_Balloc+0x50>
 800a746:	69e3      	ldr	r3, [r4, #28]
 800a748:	68db      	ldr	r3, [r3, #12]
 800a74a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a74e:	b9b8      	cbnz	r0, 800a780 <_Balloc+0x68>
 800a750:	2101      	movs	r1, #1
 800a752:	fa01 f605 	lsl.w	r6, r1, r5
 800a756:	1d72      	adds	r2, r6, #5
 800a758:	0092      	lsls	r2, r2, #2
 800a75a:	4620      	mov	r0, r4
 800a75c:	f001 fd7a 	bl	800c254 <_calloc_r>
 800a760:	b160      	cbz	r0, 800a77c <_Balloc+0x64>
 800a762:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a766:	e00e      	b.n	800a786 <_Balloc+0x6e>
 800a768:	2221      	movs	r2, #33	@ 0x21
 800a76a:	2104      	movs	r1, #4
 800a76c:	4620      	mov	r0, r4
 800a76e:	f001 fd71 	bl	800c254 <_calloc_r>
 800a772:	69e3      	ldr	r3, [r4, #28]
 800a774:	60f0      	str	r0, [r6, #12]
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d1e4      	bne.n	800a746 <_Balloc+0x2e>
 800a77c:	2000      	movs	r0, #0
 800a77e:	bd70      	pop	{r4, r5, r6, pc}
 800a780:	6802      	ldr	r2, [r0, #0]
 800a782:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a786:	2300      	movs	r3, #0
 800a788:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a78c:	e7f7      	b.n	800a77e <_Balloc+0x66>
 800a78e:	bf00      	nop
 800a790:	0800d03e 	.word	0x0800d03e
 800a794:	0800d0be 	.word	0x0800d0be

0800a798 <_Bfree>:
 800a798:	b570      	push	{r4, r5, r6, lr}
 800a79a:	69c6      	ldr	r6, [r0, #28]
 800a79c:	4605      	mov	r5, r0
 800a79e:	460c      	mov	r4, r1
 800a7a0:	b976      	cbnz	r6, 800a7c0 <_Bfree+0x28>
 800a7a2:	2010      	movs	r0, #16
 800a7a4:	f7ff ff02 	bl	800a5ac <malloc>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	61e8      	str	r0, [r5, #28]
 800a7ac:	b920      	cbnz	r0, 800a7b8 <_Bfree+0x20>
 800a7ae:	4b09      	ldr	r3, [pc, #36]	@ (800a7d4 <_Bfree+0x3c>)
 800a7b0:	4809      	ldr	r0, [pc, #36]	@ (800a7d8 <_Bfree+0x40>)
 800a7b2:	218f      	movs	r1, #143	@ 0x8f
 800a7b4:	f001 fd30 	bl	800c218 <__assert_func>
 800a7b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7bc:	6006      	str	r6, [r0, #0]
 800a7be:	60c6      	str	r6, [r0, #12]
 800a7c0:	b13c      	cbz	r4, 800a7d2 <_Bfree+0x3a>
 800a7c2:	69eb      	ldr	r3, [r5, #28]
 800a7c4:	6862      	ldr	r2, [r4, #4]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7cc:	6021      	str	r1, [r4, #0]
 800a7ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a7d2:	bd70      	pop	{r4, r5, r6, pc}
 800a7d4:	0800d03e 	.word	0x0800d03e
 800a7d8:	0800d0be 	.word	0x0800d0be

0800a7dc <__multadd>:
 800a7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7e0:	690d      	ldr	r5, [r1, #16]
 800a7e2:	4607      	mov	r7, r0
 800a7e4:	460c      	mov	r4, r1
 800a7e6:	461e      	mov	r6, r3
 800a7e8:	f101 0c14 	add.w	ip, r1, #20
 800a7ec:	2000      	movs	r0, #0
 800a7ee:	f8dc 3000 	ldr.w	r3, [ip]
 800a7f2:	b299      	uxth	r1, r3
 800a7f4:	fb02 6101 	mla	r1, r2, r1, r6
 800a7f8:	0c1e      	lsrs	r6, r3, #16
 800a7fa:	0c0b      	lsrs	r3, r1, #16
 800a7fc:	fb02 3306 	mla	r3, r2, r6, r3
 800a800:	b289      	uxth	r1, r1
 800a802:	3001      	adds	r0, #1
 800a804:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a808:	4285      	cmp	r5, r0
 800a80a:	f84c 1b04 	str.w	r1, [ip], #4
 800a80e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a812:	dcec      	bgt.n	800a7ee <__multadd+0x12>
 800a814:	b30e      	cbz	r6, 800a85a <__multadd+0x7e>
 800a816:	68a3      	ldr	r3, [r4, #8]
 800a818:	42ab      	cmp	r3, r5
 800a81a:	dc19      	bgt.n	800a850 <__multadd+0x74>
 800a81c:	6861      	ldr	r1, [r4, #4]
 800a81e:	4638      	mov	r0, r7
 800a820:	3101      	adds	r1, #1
 800a822:	f7ff ff79 	bl	800a718 <_Balloc>
 800a826:	4680      	mov	r8, r0
 800a828:	b928      	cbnz	r0, 800a836 <__multadd+0x5a>
 800a82a:	4602      	mov	r2, r0
 800a82c:	4b0c      	ldr	r3, [pc, #48]	@ (800a860 <__multadd+0x84>)
 800a82e:	480d      	ldr	r0, [pc, #52]	@ (800a864 <__multadd+0x88>)
 800a830:	21ba      	movs	r1, #186	@ 0xba
 800a832:	f001 fcf1 	bl	800c218 <__assert_func>
 800a836:	6922      	ldr	r2, [r4, #16]
 800a838:	3202      	adds	r2, #2
 800a83a:	f104 010c 	add.w	r1, r4, #12
 800a83e:	0092      	lsls	r2, r2, #2
 800a840:	300c      	adds	r0, #12
 800a842:	f7ff f808 	bl	8009856 <memcpy>
 800a846:	4621      	mov	r1, r4
 800a848:	4638      	mov	r0, r7
 800a84a:	f7ff ffa5 	bl	800a798 <_Bfree>
 800a84e:	4644      	mov	r4, r8
 800a850:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a854:	3501      	adds	r5, #1
 800a856:	615e      	str	r6, [r3, #20]
 800a858:	6125      	str	r5, [r4, #16]
 800a85a:	4620      	mov	r0, r4
 800a85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a860:	0800d0ad 	.word	0x0800d0ad
 800a864:	0800d0be 	.word	0x0800d0be

0800a868 <__s2b>:
 800a868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a86c:	460c      	mov	r4, r1
 800a86e:	4615      	mov	r5, r2
 800a870:	461f      	mov	r7, r3
 800a872:	2209      	movs	r2, #9
 800a874:	3308      	adds	r3, #8
 800a876:	4606      	mov	r6, r0
 800a878:	fb93 f3f2 	sdiv	r3, r3, r2
 800a87c:	2100      	movs	r1, #0
 800a87e:	2201      	movs	r2, #1
 800a880:	429a      	cmp	r2, r3
 800a882:	db09      	blt.n	800a898 <__s2b+0x30>
 800a884:	4630      	mov	r0, r6
 800a886:	f7ff ff47 	bl	800a718 <_Balloc>
 800a88a:	b940      	cbnz	r0, 800a89e <__s2b+0x36>
 800a88c:	4602      	mov	r2, r0
 800a88e:	4b19      	ldr	r3, [pc, #100]	@ (800a8f4 <__s2b+0x8c>)
 800a890:	4819      	ldr	r0, [pc, #100]	@ (800a8f8 <__s2b+0x90>)
 800a892:	21d3      	movs	r1, #211	@ 0xd3
 800a894:	f001 fcc0 	bl	800c218 <__assert_func>
 800a898:	0052      	lsls	r2, r2, #1
 800a89a:	3101      	adds	r1, #1
 800a89c:	e7f0      	b.n	800a880 <__s2b+0x18>
 800a89e:	9b08      	ldr	r3, [sp, #32]
 800a8a0:	6143      	str	r3, [r0, #20]
 800a8a2:	2d09      	cmp	r5, #9
 800a8a4:	f04f 0301 	mov.w	r3, #1
 800a8a8:	6103      	str	r3, [r0, #16]
 800a8aa:	dd16      	ble.n	800a8da <__s2b+0x72>
 800a8ac:	f104 0909 	add.w	r9, r4, #9
 800a8b0:	46c8      	mov	r8, r9
 800a8b2:	442c      	add	r4, r5
 800a8b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a8b8:	4601      	mov	r1, r0
 800a8ba:	3b30      	subs	r3, #48	@ 0x30
 800a8bc:	220a      	movs	r2, #10
 800a8be:	4630      	mov	r0, r6
 800a8c0:	f7ff ff8c 	bl	800a7dc <__multadd>
 800a8c4:	45a0      	cmp	r8, r4
 800a8c6:	d1f5      	bne.n	800a8b4 <__s2b+0x4c>
 800a8c8:	f1a5 0408 	sub.w	r4, r5, #8
 800a8cc:	444c      	add	r4, r9
 800a8ce:	1b2d      	subs	r5, r5, r4
 800a8d0:	1963      	adds	r3, r4, r5
 800a8d2:	42bb      	cmp	r3, r7
 800a8d4:	db04      	blt.n	800a8e0 <__s2b+0x78>
 800a8d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8da:	340a      	adds	r4, #10
 800a8dc:	2509      	movs	r5, #9
 800a8de:	e7f6      	b.n	800a8ce <__s2b+0x66>
 800a8e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a8e4:	4601      	mov	r1, r0
 800a8e6:	3b30      	subs	r3, #48	@ 0x30
 800a8e8:	220a      	movs	r2, #10
 800a8ea:	4630      	mov	r0, r6
 800a8ec:	f7ff ff76 	bl	800a7dc <__multadd>
 800a8f0:	e7ee      	b.n	800a8d0 <__s2b+0x68>
 800a8f2:	bf00      	nop
 800a8f4:	0800d0ad 	.word	0x0800d0ad
 800a8f8:	0800d0be 	.word	0x0800d0be

0800a8fc <__hi0bits>:
 800a8fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a900:	4603      	mov	r3, r0
 800a902:	bf36      	itet	cc
 800a904:	0403      	lslcc	r3, r0, #16
 800a906:	2000      	movcs	r0, #0
 800a908:	2010      	movcc	r0, #16
 800a90a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a90e:	bf3c      	itt	cc
 800a910:	021b      	lslcc	r3, r3, #8
 800a912:	3008      	addcc	r0, #8
 800a914:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a918:	bf3c      	itt	cc
 800a91a:	011b      	lslcc	r3, r3, #4
 800a91c:	3004      	addcc	r0, #4
 800a91e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a922:	bf3c      	itt	cc
 800a924:	009b      	lslcc	r3, r3, #2
 800a926:	3002      	addcc	r0, #2
 800a928:	2b00      	cmp	r3, #0
 800a92a:	db05      	blt.n	800a938 <__hi0bits+0x3c>
 800a92c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a930:	f100 0001 	add.w	r0, r0, #1
 800a934:	bf08      	it	eq
 800a936:	2020      	moveq	r0, #32
 800a938:	4770      	bx	lr

0800a93a <__lo0bits>:
 800a93a:	6803      	ldr	r3, [r0, #0]
 800a93c:	4602      	mov	r2, r0
 800a93e:	f013 0007 	ands.w	r0, r3, #7
 800a942:	d00b      	beq.n	800a95c <__lo0bits+0x22>
 800a944:	07d9      	lsls	r1, r3, #31
 800a946:	d421      	bmi.n	800a98c <__lo0bits+0x52>
 800a948:	0798      	lsls	r0, r3, #30
 800a94a:	bf49      	itett	mi
 800a94c:	085b      	lsrmi	r3, r3, #1
 800a94e:	089b      	lsrpl	r3, r3, #2
 800a950:	2001      	movmi	r0, #1
 800a952:	6013      	strmi	r3, [r2, #0]
 800a954:	bf5c      	itt	pl
 800a956:	6013      	strpl	r3, [r2, #0]
 800a958:	2002      	movpl	r0, #2
 800a95a:	4770      	bx	lr
 800a95c:	b299      	uxth	r1, r3
 800a95e:	b909      	cbnz	r1, 800a964 <__lo0bits+0x2a>
 800a960:	0c1b      	lsrs	r3, r3, #16
 800a962:	2010      	movs	r0, #16
 800a964:	b2d9      	uxtb	r1, r3
 800a966:	b909      	cbnz	r1, 800a96c <__lo0bits+0x32>
 800a968:	3008      	adds	r0, #8
 800a96a:	0a1b      	lsrs	r3, r3, #8
 800a96c:	0719      	lsls	r1, r3, #28
 800a96e:	bf04      	itt	eq
 800a970:	091b      	lsreq	r3, r3, #4
 800a972:	3004      	addeq	r0, #4
 800a974:	0799      	lsls	r1, r3, #30
 800a976:	bf04      	itt	eq
 800a978:	089b      	lsreq	r3, r3, #2
 800a97a:	3002      	addeq	r0, #2
 800a97c:	07d9      	lsls	r1, r3, #31
 800a97e:	d403      	bmi.n	800a988 <__lo0bits+0x4e>
 800a980:	085b      	lsrs	r3, r3, #1
 800a982:	f100 0001 	add.w	r0, r0, #1
 800a986:	d003      	beq.n	800a990 <__lo0bits+0x56>
 800a988:	6013      	str	r3, [r2, #0]
 800a98a:	4770      	bx	lr
 800a98c:	2000      	movs	r0, #0
 800a98e:	4770      	bx	lr
 800a990:	2020      	movs	r0, #32
 800a992:	4770      	bx	lr

0800a994 <__i2b>:
 800a994:	b510      	push	{r4, lr}
 800a996:	460c      	mov	r4, r1
 800a998:	2101      	movs	r1, #1
 800a99a:	f7ff febd 	bl	800a718 <_Balloc>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	b928      	cbnz	r0, 800a9ae <__i2b+0x1a>
 800a9a2:	4b05      	ldr	r3, [pc, #20]	@ (800a9b8 <__i2b+0x24>)
 800a9a4:	4805      	ldr	r0, [pc, #20]	@ (800a9bc <__i2b+0x28>)
 800a9a6:	f240 1145 	movw	r1, #325	@ 0x145
 800a9aa:	f001 fc35 	bl	800c218 <__assert_func>
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	6144      	str	r4, [r0, #20]
 800a9b2:	6103      	str	r3, [r0, #16]
 800a9b4:	bd10      	pop	{r4, pc}
 800a9b6:	bf00      	nop
 800a9b8:	0800d0ad 	.word	0x0800d0ad
 800a9bc:	0800d0be 	.word	0x0800d0be

0800a9c0 <__multiply>:
 800a9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c4:	4614      	mov	r4, r2
 800a9c6:	690a      	ldr	r2, [r1, #16]
 800a9c8:	6923      	ldr	r3, [r4, #16]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	bfa8      	it	ge
 800a9ce:	4623      	movge	r3, r4
 800a9d0:	460f      	mov	r7, r1
 800a9d2:	bfa4      	itt	ge
 800a9d4:	460c      	movge	r4, r1
 800a9d6:	461f      	movge	r7, r3
 800a9d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a9dc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a9e0:	68a3      	ldr	r3, [r4, #8]
 800a9e2:	6861      	ldr	r1, [r4, #4]
 800a9e4:	eb0a 0609 	add.w	r6, sl, r9
 800a9e8:	42b3      	cmp	r3, r6
 800a9ea:	b085      	sub	sp, #20
 800a9ec:	bfb8      	it	lt
 800a9ee:	3101      	addlt	r1, #1
 800a9f0:	f7ff fe92 	bl	800a718 <_Balloc>
 800a9f4:	b930      	cbnz	r0, 800aa04 <__multiply+0x44>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	4b44      	ldr	r3, [pc, #272]	@ (800ab0c <__multiply+0x14c>)
 800a9fa:	4845      	ldr	r0, [pc, #276]	@ (800ab10 <__multiply+0x150>)
 800a9fc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800aa00:	f001 fc0a 	bl	800c218 <__assert_func>
 800aa04:	f100 0514 	add.w	r5, r0, #20
 800aa08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa0c:	462b      	mov	r3, r5
 800aa0e:	2200      	movs	r2, #0
 800aa10:	4543      	cmp	r3, r8
 800aa12:	d321      	bcc.n	800aa58 <__multiply+0x98>
 800aa14:	f107 0114 	add.w	r1, r7, #20
 800aa18:	f104 0214 	add.w	r2, r4, #20
 800aa1c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800aa20:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800aa24:	9302      	str	r3, [sp, #8]
 800aa26:	1b13      	subs	r3, r2, r4
 800aa28:	3b15      	subs	r3, #21
 800aa2a:	f023 0303 	bic.w	r3, r3, #3
 800aa2e:	3304      	adds	r3, #4
 800aa30:	f104 0715 	add.w	r7, r4, #21
 800aa34:	42ba      	cmp	r2, r7
 800aa36:	bf38      	it	cc
 800aa38:	2304      	movcc	r3, #4
 800aa3a:	9301      	str	r3, [sp, #4]
 800aa3c:	9b02      	ldr	r3, [sp, #8]
 800aa3e:	9103      	str	r1, [sp, #12]
 800aa40:	428b      	cmp	r3, r1
 800aa42:	d80c      	bhi.n	800aa5e <__multiply+0x9e>
 800aa44:	2e00      	cmp	r6, #0
 800aa46:	dd03      	ble.n	800aa50 <__multiply+0x90>
 800aa48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d05b      	beq.n	800ab08 <__multiply+0x148>
 800aa50:	6106      	str	r6, [r0, #16]
 800aa52:	b005      	add	sp, #20
 800aa54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa58:	f843 2b04 	str.w	r2, [r3], #4
 800aa5c:	e7d8      	b.n	800aa10 <__multiply+0x50>
 800aa5e:	f8b1 a000 	ldrh.w	sl, [r1]
 800aa62:	f1ba 0f00 	cmp.w	sl, #0
 800aa66:	d024      	beq.n	800aab2 <__multiply+0xf2>
 800aa68:	f104 0e14 	add.w	lr, r4, #20
 800aa6c:	46a9      	mov	r9, r5
 800aa6e:	f04f 0c00 	mov.w	ip, #0
 800aa72:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa76:	f8d9 3000 	ldr.w	r3, [r9]
 800aa7a:	fa1f fb87 	uxth.w	fp, r7
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	fb0a 330b 	mla	r3, sl, fp, r3
 800aa84:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800aa88:	f8d9 7000 	ldr.w	r7, [r9]
 800aa8c:	4463      	add	r3, ip
 800aa8e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa92:	fb0a c70b 	mla	r7, sl, fp, ip
 800aa96:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aaa0:	4572      	cmp	r2, lr
 800aaa2:	f849 3b04 	str.w	r3, [r9], #4
 800aaa6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aaaa:	d8e2      	bhi.n	800aa72 <__multiply+0xb2>
 800aaac:	9b01      	ldr	r3, [sp, #4]
 800aaae:	f845 c003 	str.w	ip, [r5, r3]
 800aab2:	9b03      	ldr	r3, [sp, #12]
 800aab4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aab8:	3104      	adds	r1, #4
 800aaba:	f1b9 0f00 	cmp.w	r9, #0
 800aabe:	d021      	beq.n	800ab04 <__multiply+0x144>
 800aac0:	682b      	ldr	r3, [r5, #0]
 800aac2:	f104 0c14 	add.w	ip, r4, #20
 800aac6:	46ae      	mov	lr, r5
 800aac8:	f04f 0a00 	mov.w	sl, #0
 800aacc:	f8bc b000 	ldrh.w	fp, [ip]
 800aad0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aad4:	fb09 770b 	mla	r7, r9, fp, r7
 800aad8:	4457      	add	r7, sl
 800aada:	b29b      	uxth	r3, r3
 800aadc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aae0:	f84e 3b04 	str.w	r3, [lr], #4
 800aae4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aae8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aaec:	f8be 3000 	ldrh.w	r3, [lr]
 800aaf0:	fb09 330a 	mla	r3, r9, sl, r3
 800aaf4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aaf8:	4562      	cmp	r2, ip
 800aafa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aafe:	d8e5      	bhi.n	800aacc <__multiply+0x10c>
 800ab00:	9f01      	ldr	r7, [sp, #4]
 800ab02:	51eb      	str	r3, [r5, r7]
 800ab04:	3504      	adds	r5, #4
 800ab06:	e799      	b.n	800aa3c <__multiply+0x7c>
 800ab08:	3e01      	subs	r6, #1
 800ab0a:	e79b      	b.n	800aa44 <__multiply+0x84>
 800ab0c:	0800d0ad 	.word	0x0800d0ad
 800ab10:	0800d0be 	.word	0x0800d0be

0800ab14 <__pow5mult>:
 800ab14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab18:	4615      	mov	r5, r2
 800ab1a:	f012 0203 	ands.w	r2, r2, #3
 800ab1e:	4607      	mov	r7, r0
 800ab20:	460e      	mov	r6, r1
 800ab22:	d007      	beq.n	800ab34 <__pow5mult+0x20>
 800ab24:	4c25      	ldr	r4, [pc, #148]	@ (800abbc <__pow5mult+0xa8>)
 800ab26:	3a01      	subs	r2, #1
 800ab28:	2300      	movs	r3, #0
 800ab2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab2e:	f7ff fe55 	bl	800a7dc <__multadd>
 800ab32:	4606      	mov	r6, r0
 800ab34:	10ad      	asrs	r5, r5, #2
 800ab36:	d03d      	beq.n	800abb4 <__pow5mult+0xa0>
 800ab38:	69fc      	ldr	r4, [r7, #28]
 800ab3a:	b97c      	cbnz	r4, 800ab5c <__pow5mult+0x48>
 800ab3c:	2010      	movs	r0, #16
 800ab3e:	f7ff fd35 	bl	800a5ac <malloc>
 800ab42:	4602      	mov	r2, r0
 800ab44:	61f8      	str	r0, [r7, #28]
 800ab46:	b928      	cbnz	r0, 800ab54 <__pow5mult+0x40>
 800ab48:	4b1d      	ldr	r3, [pc, #116]	@ (800abc0 <__pow5mult+0xac>)
 800ab4a:	481e      	ldr	r0, [pc, #120]	@ (800abc4 <__pow5mult+0xb0>)
 800ab4c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ab50:	f001 fb62 	bl	800c218 <__assert_func>
 800ab54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab58:	6004      	str	r4, [r0, #0]
 800ab5a:	60c4      	str	r4, [r0, #12]
 800ab5c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ab60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab64:	b94c      	cbnz	r4, 800ab7a <__pow5mult+0x66>
 800ab66:	f240 2171 	movw	r1, #625	@ 0x271
 800ab6a:	4638      	mov	r0, r7
 800ab6c:	f7ff ff12 	bl	800a994 <__i2b>
 800ab70:	2300      	movs	r3, #0
 800ab72:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab76:	4604      	mov	r4, r0
 800ab78:	6003      	str	r3, [r0, #0]
 800ab7a:	f04f 0900 	mov.w	r9, #0
 800ab7e:	07eb      	lsls	r3, r5, #31
 800ab80:	d50a      	bpl.n	800ab98 <__pow5mult+0x84>
 800ab82:	4631      	mov	r1, r6
 800ab84:	4622      	mov	r2, r4
 800ab86:	4638      	mov	r0, r7
 800ab88:	f7ff ff1a 	bl	800a9c0 <__multiply>
 800ab8c:	4631      	mov	r1, r6
 800ab8e:	4680      	mov	r8, r0
 800ab90:	4638      	mov	r0, r7
 800ab92:	f7ff fe01 	bl	800a798 <_Bfree>
 800ab96:	4646      	mov	r6, r8
 800ab98:	106d      	asrs	r5, r5, #1
 800ab9a:	d00b      	beq.n	800abb4 <__pow5mult+0xa0>
 800ab9c:	6820      	ldr	r0, [r4, #0]
 800ab9e:	b938      	cbnz	r0, 800abb0 <__pow5mult+0x9c>
 800aba0:	4622      	mov	r2, r4
 800aba2:	4621      	mov	r1, r4
 800aba4:	4638      	mov	r0, r7
 800aba6:	f7ff ff0b 	bl	800a9c0 <__multiply>
 800abaa:	6020      	str	r0, [r4, #0]
 800abac:	f8c0 9000 	str.w	r9, [r0]
 800abb0:	4604      	mov	r4, r0
 800abb2:	e7e4      	b.n	800ab7e <__pow5mult+0x6a>
 800abb4:	4630      	mov	r0, r6
 800abb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abba:	bf00      	nop
 800abbc:	0800d118 	.word	0x0800d118
 800abc0:	0800d03e 	.word	0x0800d03e
 800abc4:	0800d0be 	.word	0x0800d0be

0800abc8 <__lshift>:
 800abc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abcc:	460c      	mov	r4, r1
 800abce:	6849      	ldr	r1, [r1, #4]
 800abd0:	6923      	ldr	r3, [r4, #16]
 800abd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800abd6:	68a3      	ldr	r3, [r4, #8]
 800abd8:	4607      	mov	r7, r0
 800abda:	4691      	mov	r9, r2
 800abdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800abe0:	f108 0601 	add.w	r6, r8, #1
 800abe4:	42b3      	cmp	r3, r6
 800abe6:	db0b      	blt.n	800ac00 <__lshift+0x38>
 800abe8:	4638      	mov	r0, r7
 800abea:	f7ff fd95 	bl	800a718 <_Balloc>
 800abee:	4605      	mov	r5, r0
 800abf0:	b948      	cbnz	r0, 800ac06 <__lshift+0x3e>
 800abf2:	4602      	mov	r2, r0
 800abf4:	4b28      	ldr	r3, [pc, #160]	@ (800ac98 <__lshift+0xd0>)
 800abf6:	4829      	ldr	r0, [pc, #164]	@ (800ac9c <__lshift+0xd4>)
 800abf8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800abfc:	f001 fb0c 	bl	800c218 <__assert_func>
 800ac00:	3101      	adds	r1, #1
 800ac02:	005b      	lsls	r3, r3, #1
 800ac04:	e7ee      	b.n	800abe4 <__lshift+0x1c>
 800ac06:	2300      	movs	r3, #0
 800ac08:	f100 0114 	add.w	r1, r0, #20
 800ac0c:	f100 0210 	add.w	r2, r0, #16
 800ac10:	4618      	mov	r0, r3
 800ac12:	4553      	cmp	r3, sl
 800ac14:	db33      	blt.n	800ac7e <__lshift+0xb6>
 800ac16:	6920      	ldr	r0, [r4, #16]
 800ac18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac1c:	f104 0314 	add.w	r3, r4, #20
 800ac20:	f019 091f 	ands.w	r9, r9, #31
 800ac24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac2c:	d02b      	beq.n	800ac86 <__lshift+0xbe>
 800ac2e:	f1c9 0e20 	rsb	lr, r9, #32
 800ac32:	468a      	mov	sl, r1
 800ac34:	2200      	movs	r2, #0
 800ac36:	6818      	ldr	r0, [r3, #0]
 800ac38:	fa00 f009 	lsl.w	r0, r0, r9
 800ac3c:	4310      	orrs	r0, r2
 800ac3e:	f84a 0b04 	str.w	r0, [sl], #4
 800ac42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac46:	459c      	cmp	ip, r3
 800ac48:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac4c:	d8f3      	bhi.n	800ac36 <__lshift+0x6e>
 800ac4e:	ebac 0304 	sub.w	r3, ip, r4
 800ac52:	3b15      	subs	r3, #21
 800ac54:	f023 0303 	bic.w	r3, r3, #3
 800ac58:	3304      	adds	r3, #4
 800ac5a:	f104 0015 	add.w	r0, r4, #21
 800ac5e:	4584      	cmp	ip, r0
 800ac60:	bf38      	it	cc
 800ac62:	2304      	movcc	r3, #4
 800ac64:	50ca      	str	r2, [r1, r3]
 800ac66:	b10a      	cbz	r2, 800ac6c <__lshift+0xa4>
 800ac68:	f108 0602 	add.w	r6, r8, #2
 800ac6c:	3e01      	subs	r6, #1
 800ac6e:	4638      	mov	r0, r7
 800ac70:	612e      	str	r6, [r5, #16]
 800ac72:	4621      	mov	r1, r4
 800ac74:	f7ff fd90 	bl	800a798 <_Bfree>
 800ac78:	4628      	mov	r0, r5
 800ac7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac7e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac82:	3301      	adds	r3, #1
 800ac84:	e7c5      	b.n	800ac12 <__lshift+0x4a>
 800ac86:	3904      	subs	r1, #4
 800ac88:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac8c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac90:	459c      	cmp	ip, r3
 800ac92:	d8f9      	bhi.n	800ac88 <__lshift+0xc0>
 800ac94:	e7ea      	b.n	800ac6c <__lshift+0xa4>
 800ac96:	bf00      	nop
 800ac98:	0800d0ad 	.word	0x0800d0ad
 800ac9c:	0800d0be 	.word	0x0800d0be

0800aca0 <__mcmp>:
 800aca0:	690a      	ldr	r2, [r1, #16]
 800aca2:	4603      	mov	r3, r0
 800aca4:	6900      	ldr	r0, [r0, #16]
 800aca6:	1a80      	subs	r0, r0, r2
 800aca8:	b530      	push	{r4, r5, lr}
 800acaa:	d10e      	bne.n	800acca <__mcmp+0x2a>
 800acac:	3314      	adds	r3, #20
 800acae:	3114      	adds	r1, #20
 800acb0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800acb4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800acb8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800acbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800acc0:	4295      	cmp	r5, r2
 800acc2:	d003      	beq.n	800accc <__mcmp+0x2c>
 800acc4:	d205      	bcs.n	800acd2 <__mcmp+0x32>
 800acc6:	f04f 30ff 	mov.w	r0, #4294967295
 800acca:	bd30      	pop	{r4, r5, pc}
 800accc:	42a3      	cmp	r3, r4
 800acce:	d3f3      	bcc.n	800acb8 <__mcmp+0x18>
 800acd0:	e7fb      	b.n	800acca <__mcmp+0x2a>
 800acd2:	2001      	movs	r0, #1
 800acd4:	e7f9      	b.n	800acca <__mcmp+0x2a>
	...

0800acd8 <__mdiff>:
 800acd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acdc:	4689      	mov	r9, r1
 800acde:	4606      	mov	r6, r0
 800ace0:	4611      	mov	r1, r2
 800ace2:	4648      	mov	r0, r9
 800ace4:	4614      	mov	r4, r2
 800ace6:	f7ff ffdb 	bl	800aca0 <__mcmp>
 800acea:	1e05      	subs	r5, r0, #0
 800acec:	d112      	bne.n	800ad14 <__mdiff+0x3c>
 800acee:	4629      	mov	r1, r5
 800acf0:	4630      	mov	r0, r6
 800acf2:	f7ff fd11 	bl	800a718 <_Balloc>
 800acf6:	4602      	mov	r2, r0
 800acf8:	b928      	cbnz	r0, 800ad06 <__mdiff+0x2e>
 800acfa:	4b3f      	ldr	r3, [pc, #252]	@ (800adf8 <__mdiff+0x120>)
 800acfc:	f240 2137 	movw	r1, #567	@ 0x237
 800ad00:	483e      	ldr	r0, [pc, #248]	@ (800adfc <__mdiff+0x124>)
 800ad02:	f001 fa89 	bl	800c218 <__assert_func>
 800ad06:	2301      	movs	r3, #1
 800ad08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad0c:	4610      	mov	r0, r2
 800ad0e:	b003      	add	sp, #12
 800ad10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad14:	bfbc      	itt	lt
 800ad16:	464b      	movlt	r3, r9
 800ad18:	46a1      	movlt	r9, r4
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ad20:	bfba      	itte	lt
 800ad22:	461c      	movlt	r4, r3
 800ad24:	2501      	movlt	r5, #1
 800ad26:	2500      	movge	r5, #0
 800ad28:	f7ff fcf6 	bl	800a718 <_Balloc>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	b918      	cbnz	r0, 800ad38 <__mdiff+0x60>
 800ad30:	4b31      	ldr	r3, [pc, #196]	@ (800adf8 <__mdiff+0x120>)
 800ad32:	f240 2145 	movw	r1, #581	@ 0x245
 800ad36:	e7e3      	b.n	800ad00 <__mdiff+0x28>
 800ad38:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ad3c:	6926      	ldr	r6, [r4, #16]
 800ad3e:	60c5      	str	r5, [r0, #12]
 800ad40:	f109 0310 	add.w	r3, r9, #16
 800ad44:	f109 0514 	add.w	r5, r9, #20
 800ad48:	f104 0e14 	add.w	lr, r4, #20
 800ad4c:	f100 0b14 	add.w	fp, r0, #20
 800ad50:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ad54:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ad58:	9301      	str	r3, [sp, #4]
 800ad5a:	46d9      	mov	r9, fp
 800ad5c:	f04f 0c00 	mov.w	ip, #0
 800ad60:	9b01      	ldr	r3, [sp, #4]
 800ad62:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ad66:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ad6a:	9301      	str	r3, [sp, #4]
 800ad6c:	fa1f f38a 	uxth.w	r3, sl
 800ad70:	4619      	mov	r1, r3
 800ad72:	b283      	uxth	r3, r0
 800ad74:	1acb      	subs	r3, r1, r3
 800ad76:	0c00      	lsrs	r0, r0, #16
 800ad78:	4463      	add	r3, ip
 800ad7a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ad7e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ad88:	4576      	cmp	r6, lr
 800ad8a:	f849 3b04 	str.w	r3, [r9], #4
 800ad8e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad92:	d8e5      	bhi.n	800ad60 <__mdiff+0x88>
 800ad94:	1b33      	subs	r3, r6, r4
 800ad96:	3b15      	subs	r3, #21
 800ad98:	f023 0303 	bic.w	r3, r3, #3
 800ad9c:	3415      	adds	r4, #21
 800ad9e:	3304      	adds	r3, #4
 800ada0:	42a6      	cmp	r6, r4
 800ada2:	bf38      	it	cc
 800ada4:	2304      	movcc	r3, #4
 800ada6:	441d      	add	r5, r3
 800ada8:	445b      	add	r3, fp
 800adaa:	461e      	mov	r6, r3
 800adac:	462c      	mov	r4, r5
 800adae:	4544      	cmp	r4, r8
 800adb0:	d30e      	bcc.n	800add0 <__mdiff+0xf8>
 800adb2:	f108 0103 	add.w	r1, r8, #3
 800adb6:	1b49      	subs	r1, r1, r5
 800adb8:	f021 0103 	bic.w	r1, r1, #3
 800adbc:	3d03      	subs	r5, #3
 800adbe:	45a8      	cmp	r8, r5
 800adc0:	bf38      	it	cc
 800adc2:	2100      	movcc	r1, #0
 800adc4:	440b      	add	r3, r1
 800adc6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800adca:	b191      	cbz	r1, 800adf2 <__mdiff+0x11a>
 800adcc:	6117      	str	r7, [r2, #16]
 800adce:	e79d      	b.n	800ad0c <__mdiff+0x34>
 800add0:	f854 1b04 	ldr.w	r1, [r4], #4
 800add4:	46e6      	mov	lr, ip
 800add6:	0c08      	lsrs	r0, r1, #16
 800add8:	fa1c fc81 	uxtah	ip, ip, r1
 800addc:	4471      	add	r1, lr
 800adde:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ade2:	b289      	uxth	r1, r1
 800ade4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ade8:	f846 1b04 	str.w	r1, [r6], #4
 800adec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800adf0:	e7dd      	b.n	800adae <__mdiff+0xd6>
 800adf2:	3f01      	subs	r7, #1
 800adf4:	e7e7      	b.n	800adc6 <__mdiff+0xee>
 800adf6:	bf00      	nop
 800adf8:	0800d0ad 	.word	0x0800d0ad
 800adfc:	0800d0be 	.word	0x0800d0be

0800ae00 <__ulp>:
 800ae00:	b082      	sub	sp, #8
 800ae02:	ed8d 0b00 	vstr	d0, [sp]
 800ae06:	9a01      	ldr	r2, [sp, #4]
 800ae08:	4b0f      	ldr	r3, [pc, #60]	@ (800ae48 <__ulp+0x48>)
 800ae0a:	4013      	ands	r3, r2
 800ae0c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	dc08      	bgt.n	800ae26 <__ulp+0x26>
 800ae14:	425b      	negs	r3, r3
 800ae16:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ae1a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ae1e:	da04      	bge.n	800ae2a <__ulp+0x2a>
 800ae20:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ae24:	4113      	asrs	r3, r2
 800ae26:	2200      	movs	r2, #0
 800ae28:	e008      	b.n	800ae3c <__ulp+0x3c>
 800ae2a:	f1a2 0314 	sub.w	r3, r2, #20
 800ae2e:	2b1e      	cmp	r3, #30
 800ae30:	bfda      	itte	le
 800ae32:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ae36:	40da      	lsrle	r2, r3
 800ae38:	2201      	movgt	r2, #1
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	4610      	mov	r0, r2
 800ae40:	ec41 0b10 	vmov	d0, r0, r1
 800ae44:	b002      	add	sp, #8
 800ae46:	4770      	bx	lr
 800ae48:	7ff00000 	.word	0x7ff00000

0800ae4c <__b2d>:
 800ae4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae50:	6906      	ldr	r6, [r0, #16]
 800ae52:	f100 0814 	add.w	r8, r0, #20
 800ae56:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ae5a:	1f37      	subs	r7, r6, #4
 800ae5c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ae60:	4610      	mov	r0, r2
 800ae62:	f7ff fd4b 	bl	800a8fc <__hi0bits>
 800ae66:	f1c0 0320 	rsb	r3, r0, #32
 800ae6a:	280a      	cmp	r0, #10
 800ae6c:	600b      	str	r3, [r1, #0]
 800ae6e:	491b      	ldr	r1, [pc, #108]	@ (800aedc <__b2d+0x90>)
 800ae70:	dc15      	bgt.n	800ae9e <__b2d+0x52>
 800ae72:	f1c0 0c0b 	rsb	ip, r0, #11
 800ae76:	fa22 f30c 	lsr.w	r3, r2, ip
 800ae7a:	45b8      	cmp	r8, r7
 800ae7c:	ea43 0501 	orr.w	r5, r3, r1
 800ae80:	bf34      	ite	cc
 800ae82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ae86:	2300      	movcs	r3, #0
 800ae88:	3015      	adds	r0, #21
 800ae8a:	fa02 f000 	lsl.w	r0, r2, r0
 800ae8e:	fa23 f30c 	lsr.w	r3, r3, ip
 800ae92:	4303      	orrs	r3, r0
 800ae94:	461c      	mov	r4, r3
 800ae96:	ec45 4b10 	vmov	d0, r4, r5
 800ae9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae9e:	45b8      	cmp	r8, r7
 800aea0:	bf3a      	itte	cc
 800aea2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aea6:	f1a6 0708 	subcc.w	r7, r6, #8
 800aeaa:	2300      	movcs	r3, #0
 800aeac:	380b      	subs	r0, #11
 800aeae:	d012      	beq.n	800aed6 <__b2d+0x8a>
 800aeb0:	f1c0 0120 	rsb	r1, r0, #32
 800aeb4:	fa23 f401 	lsr.w	r4, r3, r1
 800aeb8:	4082      	lsls	r2, r0
 800aeba:	4322      	orrs	r2, r4
 800aebc:	4547      	cmp	r7, r8
 800aebe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800aec2:	bf8c      	ite	hi
 800aec4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800aec8:	2200      	movls	r2, #0
 800aeca:	4083      	lsls	r3, r0
 800aecc:	40ca      	lsrs	r2, r1
 800aece:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800aed2:	4313      	orrs	r3, r2
 800aed4:	e7de      	b.n	800ae94 <__b2d+0x48>
 800aed6:	ea42 0501 	orr.w	r5, r2, r1
 800aeda:	e7db      	b.n	800ae94 <__b2d+0x48>
 800aedc:	3ff00000 	.word	0x3ff00000

0800aee0 <__d2b>:
 800aee0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aee4:	460f      	mov	r7, r1
 800aee6:	2101      	movs	r1, #1
 800aee8:	ec59 8b10 	vmov	r8, r9, d0
 800aeec:	4616      	mov	r6, r2
 800aeee:	f7ff fc13 	bl	800a718 <_Balloc>
 800aef2:	4604      	mov	r4, r0
 800aef4:	b930      	cbnz	r0, 800af04 <__d2b+0x24>
 800aef6:	4602      	mov	r2, r0
 800aef8:	4b23      	ldr	r3, [pc, #140]	@ (800af88 <__d2b+0xa8>)
 800aefa:	4824      	ldr	r0, [pc, #144]	@ (800af8c <__d2b+0xac>)
 800aefc:	f240 310f 	movw	r1, #783	@ 0x30f
 800af00:	f001 f98a 	bl	800c218 <__assert_func>
 800af04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800af08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af0c:	b10d      	cbz	r5, 800af12 <__d2b+0x32>
 800af0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800af12:	9301      	str	r3, [sp, #4]
 800af14:	f1b8 0300 	subs.w	r3, r8, #0
 800af18:	d023      	beq.n	800af62 <__d2b+0x82>
 800af1a:	4668      	mov	r0, sp
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	f7ff fd0c 	bl	800a93a <__lo0bits>
 800af22:	e9dd 1200 	ldrd	r1, r2, [sp]
 800af26:	b1d0      	cbz	r0, 800af5e <__d2b+0x7e>
 800af28:	f1c0 0320 	rsb	r3, r0, #32
 800af2c:	fa02 f303 	lsl.w	r3, r2, r3
 800af30:	430b      	orrs	r3, r1
 800af32:	40c2      	lsrs	r2, r0
 800af34:	6163      	str	r3, [r4, #20]
 800af36:	9201      	str	r2, [sp, #4]
 800af38:	9b01      	ldr	r3, [sp, #4]
 800af3a:	61a3      	str	r3, [r4, #24]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	bf0c      	ite	eq
 800af40:	2201      	moveq	r2, #1
 800af42:	2202      	movne	r2, #2
 800af44:	6122      	str	r2, [r4, #16]
 800af46:	b1a5      	cbz	r5, 800af72 <__d2b+0x92>
 800af48:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800af4c:	4405      	add	r5, r0
 800af4e:	603d      	str	r5, [r7, #0]
 800af50:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800af54:	6030      	str	r0, [r6, #0]
 800af56:	4620      	mov	r0, r4
 800af58:	b003      	add	sp, #12
 800af5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af5e:	6161      	str	r1, [r4, #20]
 800af60:	e7ea      	b.n	800af38 <__d2b+0x58>
 800af62:	a801      	add	r0, sp, #4
 800af64:	f7ff fce9 	bl	800a93a <__lo0bits>
 800af68:	9b01      	ldr	r3, [sp, #4]
 800af6a:	6163      	str	r3, [r4, #20]
 800af6c:	3020      	adds	r0, #32
 800af6e:	2201      	movs	r2, #1
 800af70:	e7e8      	b.n	800af44 <__d2b+0x64>
 800af72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800af76:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800af7a:	6038      	str	r0, [r7, #0]
 800af7c:	6918      	ldr	r0, [r3, #16]
 800af7e:	f7ff fcbd 	bl	800a8fc <__hi0bits>
 800af82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800af86:	e7e5      	b.n	800af54 <__d2b+0x74>
 800af88:	0800d0ad 	.word	0x0800d0ad
 800af8c:	0800d0be 	.word	0x0800d0be

0800af90 <__ratio>:
 800af90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af94:	b085      	sub	sp, #20
 800af96:	e9cd 1000 	strd	r1, r0, [sp]
 800af9a:	a902      	add	r1, sp, #8
 800af9c:	f7ff ff56 	bl	800ae4c <__b2d>
 800afa0:	9800      	ldr	r0, [sp, #0]
 800afa2:	a903      	add	r1, sp, #12
 800afa4:	ec55 4b10 	vmov	r4, r5, d0
 800afa8:	f7ff ff50 	bl	800ae4c <__b2d>
 800afac:	9b01      	ldr	r3, [sp, #4]
 800afae:	6919      	ldr	r1, [r3, #16]
 800afb0:	9b00      	ldr	r3, [sp, #0]
 800afb2:	691b      	ldr	r3, [r3, #16]
 800afb4:	1ac9      	subs	r1, r1, r3
 800afb6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800afba:	1a9b      	subs	r3, r3, r2
 800afbc:	ec5b ab10 	vmov	sl, fp, d0
 800afc0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	bfce      	itee	gt
 800afc8:	462a      	movgt	r2, r5
 800afca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800afce:	465a      	movle	r2, fp
 800afd0:	462f      	mov	r7, r5
 800afd2:	46d9      	mov	r9, fp
 800afd4:	bfcc      	ite	gt
 800afd6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800afda:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800afde:	464b      	mov	r3, r9
 800afe0:	4652      	mov	r2, sl
 800afe2:	4620      	mov	r0, r4
 800afe4:	4639      	mov	r1, r7
 800afe6:	f7f5 fc59 	bl	800089c <__aeabi_ddiv>
 800afea:	ec41 0b10 	vmov	d0, r0, r1
 800afee:	b005      	add	sp, #20
 800aff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aff4 <__copybits>:
 800aff4:	3901      	subs	r1, #1
 800aff6:	b570      	push	{r4, r5, r6, lr}
 800aff8:	1149      	asrs	r1, r1, #5
 800affa:	6914      	ldr	r4, [r2, #16]
 800affc:	3101      	adds	r1, #1
 800affe:	f102 0314 	add.w	r3, r2, #20
 800b002:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b006:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b00a:	1f05      	subs	r5, r0, #4
 800b00c:	42a3      	cmp	r3, r4
 800b00e:	d30c      	bcc.n	800b02a <__copybits+0x36>
 800b010:	1aa3      	subs	r3, r4, r2
 800b012:	3b11      	subs	r3, #17
 800b014:	f023 0303 	bic.w	r3, r3, #3
 800b018:	3211      	adds	r2, #17
 800b01a:	42a2      	cmp	r2, r4
 800b01c:	bf88      	it	hi
 800b01e:	2300      	movhi	r3, #0
 800b020:	4418      	add	r0, r3
 800b022:	2300      	movs	r3, #0
 800b024:	4288      	cmp	r0, r1
 800b026:	d305      	bcc.n	800b034 <__copybits+0x40>
 800b028:	bd70      	pop	{r4, r5, r6, pc}
 800b02a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b02e:	f845 6f04 	str.w	r6, [r5, #4]!
 800b032:	e7eb      	b.n	800b00c <__copybits+0x18>
 800b034:	f840 3b04 	str.w	r3, [r0], #4
 800b038:	e7f4      	b.n	800b024 <__copybits+0x30>

0800b03a <__any_on>:
 800b03a:	f100 0214 	add.w	r2, r0, #20
 800b03e:	6900      	ldr	r0, [r0, #16]
 800b040:	114b      	asrs	r3, r1, #5
 800b042:	4298      	cmp	r0, r3
 800b044:	b510      	push	{r4, lr}
 800b046:	db11      	blt.n	800b06c <__any_on+0x32>
 800b048:	dd0a      	ble.n	800b060 <__any_on+0x26>
 800b04a:	f011 011f 	ands.w	r1, r1, #31
 800b04e:	d007      	beq.n	800b060 <__any_on+0x26>
 800b050:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b054:	fa24 f001 	lsr.w	r0, r4, r1
 800b058:	fa00 f101 	lsl.w	r1, r0, r1
 800b05c:	428c      	cmp	r4, r1
 800b05e:	d10b      	bne.n	800b078 <__any_on+0x3e>
 800b060:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b064:	4293      	cmp	r3, r2
 800b066:	d803      	bhi.n	800b070 <__any_on+0x36>
 800b068:	2000      	movs	r0, #0
 800b06a:	bd10      	pop	{r4, pc}
 800b06c:	4603      	mov	r3, r0
 800b06e:	e7f7      	b.n	800b060 <__any_on+0x26>
 800b070:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b074:	2900      	cmp	r1, #0
 800b076:	d0f5      	beq.n	800b064 <__any_on+0x2a>
 800b078:	2001      	movs	r0, #1
 800b07a:	e7f6      	b.n	800b06a <__any_on+0x30>

0800b07c <sulp>:
 800b07c:	b570      	push	{r4, r5, r6, lr}
 800b07e:	4604      	mov	r4, r0
 800b080:	460d      	mov	r5, r1
 800b082:	ec45 4b10 	vmov	d0, r4, r5
 800b086:	4616      	mov	r6, r2
 800b088:	f7ff feba 	bl	800ae00 <__ulp>
 800b08c:	ec51 0b10 	vmov	r0, r1, d0
 800b090:	b17e      	cbz	r6, 800b0b2 <sulp+0x36>
 800b092:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b096:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	dd09      	ble.n	800b0b2 <sulp+0x36>
 800b09e:	051b      	lsls	r3, r3, #20
 800b0a0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b0a4:	2400      	movs	r4, #0
 800b0a6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b0aa:	4622      	mov	r2, r4
 800b0ac:	462b      	mov	r3, r5
 800b0ae:	f7f5 facb 	bl	8000648 <__aeabi_dmul>
 800b0b2:	ec41 0b10 	vmov	d0, r0, r1
 800b0b6:	bd70      	pop	{r4, r5, r6, pc}

0800b0b8 <_strtod_l>:
 800b0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0bc:	b09f      	sub	sp, #124	@ 0x7c
 800b0be:	460c      	mov	r4, r1
 800b0c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	921a      	str	r2, [sp, #104]	@ 0x68
 800b0c6:	9005      	str	r0, [sp, #20]
 800b0c8:	f04f 0a00 	mov.w	sl, #0
 800b0cc:	f04f 0b00 	mov.w	fp, #0
 800b0d0:	460a      	mov	r2, r1
 800b0d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b0d4:	7811      	ldrb	r1, [r2, #0]
 800b0d6:	292b      	cmp	r1, #43	@ 0x2b
 800b0d8:	d04a      	beq.n	800b170 <_strtod_l+0xb8>
 800b0da:	d838      	bhi.n	800b14e <_strtod_l+0x96>
 800b0dc:	290d      	cmp	r1, #13
 800b0de:	d832      	bhi.n	800b146 <_strtod_l+0x8e>
 800b0e0:	2908      	cmp	r1, #8
 800b0e2:	d832      	bhi.n	800b14a <_strtod_l+0x92>
 800b0e4:	2900      	cmp	r1, #0
 800b0e6:	d03b      	beq.n	800b160 <_strtod_l+0xa8>
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b0ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b0ee:	782a      	ldrb	r2, [r5, #0]
 800b0f0:	2a30      	cmp	r2, #48	@ 0x30
 800b0f2:	f040 80b3 	bne.w	800b25c <_strtod_l+0x1a4>
 800b0f6:	786a      	ldrb	r2, [r5, #1]
 800b0f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b0fc:	2a58      	cmp	r2, #88	@ 0x58
 800b0fe:	d16e      	bne.n	800b1de <_strtod_l+0x126>
 800b100:	9302      	str	r3, [sp, #8]
 800b102:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b104:	9301      	str	r3, [sp, #4]
 800b106:	ab1a      	add	r3, sp, #104	@ 0x68
 800b108:	9300      	str	r3, [sp, #0]
 800b10a:	4a8e      	ldr	r2, [pc, #568]	@ (800b344 <_strtod_l+0x28c>)
 800b10c:	9805      	ldr	r0, [sp, #20]
 800b10e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b110:	a919      	add	r1, sp, #100	@ 0x64
 800b112:	f001 f91b 	bl	800c34c <__gethex>
 800b116:	f010 060f 	ands.w	r6, r0, #15
 800b11a:	4604      	mov	r4, r0
 800b11c:	d005      	beq.n	800b12a <_strtod_l+0x72>
 800b11e:	2e06      	cmp	r6, #6
 800b120:	d128      	bne.n	800b174 <_strtod_l+0xbc>
 800b122:	3501      	adds	r5, #1
 800b124:	2300      	movs	r3, #0
 800b126:	9519      	str	r5, [sp, #100]	@ 0x64
 800b128:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b12a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f040 858e 	bne.w	800bc4e <_strtod_l+0xb96>
 800b132:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b134:	b1cb      	cbz	r3, 800b16a <_strtod_l+0xb2>
 800b136:	4652      	mov	r2, sl
 800b138:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b13c:	ec43 2b10 	vmov	d0, r2, r3
 800b140:	b01f      	add	sp, #124	@ 0x7c
 800b142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b146:	2920      	cmp	r1, #32
 800b148:	d1ce      	bne.n	800b0e8 <_strtod_l+0x30>
 800b14a:	3201      	adds	r2, #1
 800b14c:	e7c1      	b.n	800b0d2 <_strtod_l+0x1a>
 800b14e:	292d      	cmp	r1, #45	@ 0x2d
 800b150:	d1ca      	bne.n	800b0e8 <_strtod_l+0x30>
 800b152:	2101      	movs	r1, #1
 800b154:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b156:	1c51      	adds	r1, r2, #1
 800b158:	9119      	str	r1, [sp, #100]	@ 0x64
 800b15a:	7852      	ldrb	r2, [r2, #1]
 800b15c:	2a00      	cmp	r2, #0
 800b15e:	d1c5      	bne.n	800b0ec <_strtod_l+0x34>
 800b160:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b162:	9419      	str	r4, [sp, #100]	@ 0x64
 800b164:	2b00      	cmp	r3, #0
 800b166:	f040 8570 	bne.w	800bc4a <_strtod_l+0xb92>
 800b16a:	4652      	mov	r2, sl
 800b16c:	465b      	mov	r3, fp
 800b16e:	e7e5      	b.n	800b13c <_strtod_l+0x84>
 800b170:	2100      	movs	r1, #0
 800b172:	e7ef      	b.n	800b154 <_strtod_l+0x9c>
 800b174:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b176:	b13a      	cbz	r2, 800b188 <_strtod_l+0xd0>
 800b178:	2135      	movs	r1, #53	@ 0x35
 800b17a:	a81c      	add	r0, sp, #112	@ 0x70
 800b17c:	f7ff ff3a 	bl	800aff4 <__copybits>
 800b180:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b182:	9805      	ldr	r0, [sp, #20]
 800b184:	f7ff fb08 	bl	800a798 <_Bfree>
 800b188:	3e01      	subs	r6, #1
 800b18a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b18c:	2e04      	cmp	r6, #4
 800b18e:	d806      	bhi.n	800b19e <_strtod_l+0xe6>
 800b190:	e8df f006 	tbb	[pc, r6]
 800b194:	201d0314 	.word	0x201d0314
 800b198:	14          	.byte	0x14
 800b199:	00          	.byte	0x00
 800b19a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b19e:	05e1      	lsls	r1, r4, #23
 800b1a0:	bf48      	it	mi
 800b1a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b1a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b1aa:	0d1b      	lsrs	r3, r3, #20
 800b1ac:	051b      	lsls	r3, r3, #20
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d1bb      	bne.n	800b12a <_strtod_l+0x72>
 800b1b2:	f7fe fb23 	bl	80097fc <__errno>
 800b1b6:	2322      	movs	r3, #34	@ 0x22
 800b1b8:	6003      	str	r3, [r0, #0]
 800b1ba:	e7b6      	b.n	800b12a <_strtod_l+0x72>
 800b1bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b1c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b1c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b1c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b1cc:	e7e7      	b.n	800b19e <_strtod_l+0xe6>
 800b1ce:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b34c <_strtod_l+0x294>
 800b1d2:	e7e4      	b.n	800b19e <_strtod_l+0xe6>
 800b1d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b1d8:	f04f 3aff 	mov.w	sl, #4294967295
 800b1dc:	e7df      	b.n	800b19e <_strtod_l+0xe6>
 800b1de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b1e0:	1c5a      	adds	r2, r3, #1
 800b1e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b1e4:	785b      	ldrb	r3, [r3, #1]
 800b1e6:	2b30      	cmp	r3, #48	@ 0x30
 800b1e8:	d0f9      	beq.n	800b1de <_strtod_l+0x126>
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d09d      	beq.n	800b12a <_strtod_l+0x72>
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b1f4:	930c      	str	r3, [sp, #48]	@ 0x30
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	9308      	str	r3, [sp, #32]
 800b1fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1fc:	461f      	mov	r7, r3
 800b1fe:	220a      	movs	r2, #10
 800b200:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b202:	7805      	ldrb	r5, [r0, #0]
 800b204:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b208:	b2d9      	uxtb	r1, r3
 800b20a:	2909      	cmp	r1, #9
 800b20c:	d928      	bls.n	800b260 <_strtod_l+0x1a8>
 800b20e:	494e      	ldr	r1, [pc, #312]	@ (800b348 <_strtod_l+0x290>)
 800b210:	2201      	movs	r2, #1
 800b212:	f000 ffd5 	bl	800c1c0 <strncmp>
 800b216:	2800      	cmp	r0, #0
 800b218:	d032      	beq.n	800b280 <_strtod_l+0x1c8>
 800b21a:	2000      	movs	r0, #0
 800b21c:	462a      	mov	r2, r5
 800b21e:	4681      	mov	r9, r0
 800b220:	463d      	mov	r5, r7
 800b222:	4603      	mov	r3, r0
 800b224:	2a65      	cmp	r2, #101	@ 0x65
 800b226:	d001      	beq.n	800b22c <_strtod_l+0x174>
 800b228:	2a45      	cmp	r2, #69	@ 0x45
 800b22a:	d114      	bne.n	800b256 <_strtod_l+0x19e>
 800b22c:	b91d      	cbnz	r5, 800b236 <_strtod_l+0x17e>
 800b22e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b230:	4302      	orrs	r2, r0
 800b232:	d095      	beq.n	800b160 <_strtod_l+0xa8>
 800b234:	2500      	movs	r5, #0
 800b236:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b238:	1c62      	adds	r2, r4, #1
 800b23a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b23c:	7862      	ldrb	r2, [r4, #1]
 800b23e:	2a2b      	cmp	r2, #43	@ 0x2b
 800b240:	d077      	beq.n	800b332 <_strtod_l+0x27a>
 800b242:	2a2d      	cmp	r2, #45	@ 0x2d
 800b244:	d07b      	beq.n	800b33e <_strtod_l+0x286>
 800b246:	f04f 0c00 	mov.w	ip, #0
 800b24a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b24e:	2909      	cmp	r1, #9
 800b250:	f240 8082 	bls.w	800b358 <_strtod_l+0x2a0>
 800b254:	9419      	str	r4, [sp, #100]	@ 0x64
 800b256:	f04f 0800 	mov.w	r8, #0
 800b25a:	e0a2      	b.n	800b3a2 <_strtod_l+0x2ea>
 800b25c:	2300      	movs	r3, #0
 800b25e:	e7c7      	b.n	800b1f0 <_strtod_l+0x138>
 800b260:	2f08      	cmp	r7, #8
 800b262:	bfd5      	itete	le
 800b264:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b266:	9908      	ldrgt	r1, [sp, #32]
 800b268:	fb02 3301 	mlale	r3, r2, r1, r3
 800b26c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b270:	f100 0001 	add.w	r0, r0, #1
 800b274:	bfd4      	ite	le
 800b276:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b278:	9308      	strgt	r3, [sp, #32]
 800b27a:	3701      	adds	r7, #1
 800b27c:	9019      	str	r0, [sp, #100]	@ 0x64
 800b27e:	e7bf      	b.n	800b200 <_strtod_l+0x148>
 800b280:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b282:	1c5a      	adds	r2, r3, #1
 800b284:	9219      	str	r2, [sp, #100]	@ 0x64
 800b286:	785a      	ldrb	r2, [r3, #1]
 800b288:	b37f      	cbz	r7, 800b2ea <_strtod_l+0x232>
 800b28a:	4681      	mov	r9, r0
 800b28c:	463d      	mov	r5, r7
 800b28e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b292:	2b09      	cmp	r3, #9
 800b294:	d912      	bls.n	800b2bc <_strtod_l+0x204>
 800b296:	2301      	movs	r3, #1
 800b298:	e7c4      	b.n	800b224 <_strtod_l+0x16c>
 800b29a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b29c:	1c5a      	adds	r2, r3, #1
 800b29e:	9219      	str	r2, [sp, #100]	@ 0x64
 800b2a0:	785a      	ldrb	r2, [r3, #1]
 800b2a2:	3001      	adds	r0, #1
 800b2a4:	2a30      	cmp	r2, #48	@ 0x30
 800b2a6:	d0f8      	beq.n	800b29a <_strtod_l+0x1e2>
 800b2a8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b2ac:	2b08      	cmp	r3, #8
 800b2ae:	f200 84d3 	bhi.w	800bc58 <_strtod_l+0xba0>
 800b2b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b2b4:	930c      	str	r3, [sp, #48]	@ 0x30
 800b2b6:	4681      	mov	r9, r0
 800b2b8:	2000      	movs	r0, #0
 800b2ba:	4605      	mov	r5, r0
 800b2bc:	3a30      	subs	r2, #48	@ 0x30
 800b2be:	f100 0301 	add.w	r3, r0, #1
 800b2c2:	d02a      	beq.n	800b31a <_strtod_l+0x262>
 800b2c4:	4499      	add	r9, r3
 800b2c6:	eb00 0c05 	add.w	ip, r0, r5
 800b2ca:	462b      	mov	r3, r5
 800b2cc:	210a      	movs	r1, #10
 800b2ce:	4563      	cmp	r3, ip
 800b2d0:	d10d      	bne.n	800b2ee <_strtod_l+0x236>
 800b2d2:	1c69      	adds	r1, r5, #1
 800b2d4:	4401      	add	r1, r0
 800b2d6:	4428      	add	r0, r5
 800b2d8:	2808      	cmp	r0, #8
 800b2da:	dc16      	bgt.n	800b30a <_strtod_l+0x252>
 800b2dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b2de:	230a      	movs	r3, #10
 800b2e0:	fb03 2300 	mla	r3, r3, r0, r2
 800b2e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	e018      	b.n	800b31c <_strtod_l+0x264>
 800b2ea:	4638      	mov	r0, r7
 800b2ec:	e7da      	b.n	800b2a4 <_strtod_l+0x1ec>
 800b2ee:	2b08      	cmp	r3, #8
 800b2f0:	f103 0301 	add.w	r3, r3, #1
 800b2f4:	dc03      	bgt.n	800b2fe <_strtod_l+0x246>
 800b2f6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b2f8:	434e      	muls	r6, r1
 800b2fa:	960a      	str	r6, [sp, #40]	@ 0x28
 800b2fc:	e7e7      	b.n	800b2ce <_strtod_l+0x216>
 800b2fe:	2b10      	cmp	r3, #16
 800b300:	bfde      	ittt	le
 800b302:	9e08      	ldrle	r6, [sp, #32]
 800b304:	434e      	mulle	r6, r1
 800b306:	9608      	strle	r6, [sp, #32]
 800b308:	e7e1      	b.n	800b2ce <_strtod_l+0x216>
 800b30a:	280f      	cmp	r0, #15
 800b30c:	dceb      	bgt.n	800b2e6 <_strtod_l+0x22e>
 800b30e:	9808      	ldr	r0, [sp, #32]
 800b310:	230a      	movs	r3, #10
 800b312:	fb03 2300 	mla	r3, r3, r0, r2
 800b316:	9308      	str	r3, [sp, #32]
 800b318:	e7e5      	b.n	800b2e6 <_strtod_l+0x22e>
 800b31a:	4629      	mov	r1, r5
 800b31c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b31e:	1c50      	adds	r0, r2, #1
 800b320:	9019      	str	r0, [sp, #100]	@ 0x64
 800b322:	7852      	ldrb	r2, [r2, #1]
 800b324:	4618      	mov	r0, r3
 800b326:	460d      	mov	r5, r1
 800b328:	e7b1      	b.n	800b28e <_strtod_l+0x1d6>
 800b32a:	f04f 0900 	mov.w	r9, #0
 800b32e:	2301      	movs	r3, #1
 800b330:	e77d      	b.n	800b22e <_strtod_l+0x176>
 800b332:	f04f 0c00 	mov.w	ip, #0
 800b336:	1ca2      	adds	r2, r4, #2
 800b338:	9219      	str	r2, [sp, #100]	@ 0x64
 800b33a:	78a2      	ldrb	r2, [r4, #2]
 800b33c:	e785      	b.n	800b24a <_strtod_l+0x192>
 800b33e:	f04f 0c01 	mov.w	ip, #1
 800b342:	e7f8      	b.n	800b336 <_strtod_l+0x27e>
 800b344:	0800d230 	.word	0x0800d230
 800b348:	0800d218 	.word	0x0800d218
 800b34c:	7ff00000 	.word	0x7ff00000
 800b350:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b352:	1c51      	adds	r1, r2, #1
 800b354:	9119      	str	r1, [sp, #100]	@ 0x64
 800b356:	7852      	ldrb	r2, [r2, #1]
 800b358:	2a30      	cmp	r2, #48	@ 0x30
 800b35a:	d0f9      	beq.n	800b350 <_strtod_l+0x298>
 800b35c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b360:	2908      	cmp	r1, #8
 800b362:	f63f af78 	bhi.w	800b256 <_strtod_l+0x19e>
 800b366:	3a30      	subs	r2, #48	@ 0x30
 800b368:	920e      	str	r2, [sp, #56]	@ 0x38
 800b36a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b36c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b36e:	f04f 080a 	mov.w	r8, #10
 800b372:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b374:	1c56      	adds	r6, r2, #1
 800b376:	9619      	str	r6, [sp, #100]	@ 0x64
 800b378:	7852      	ldrb	r2, [r2, #1]
 800b37a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b37e:	f1be 0f09 	cmp.w	lr, #9
 800b382:	d939      	bls.n	800b3f8 <_strtod_l+0x340>
 800b384:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b386:	1a76      	subs	r6, r6, r1
 800b388:	2e08      	cmp	r6, #8
 800b38a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b38e:	dc03      	bgt.n	800b398 <_strtod_l+0x2e0>
 800b390:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b392:	4588      	cmp	r8, r1
 800b394:	bfa8      	it	ge
 800b396:	4688      	movge	r8, r1
 800b398:	f1bc 0f00 	cmp.w	ip, #0
 800b39c:	d001      	beq.n	800b3a2 <_strtod_l+0x2ea>
 800b39e:	f1c8 0800 	rsb	r8, r8, #0
 800b3a2:	2d00      	cmp	r5, #0
 800b3a4:	d14e      	bne.n	800b444 <_strtod_l+0x38c>
 800b3a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b3a8:	4308      	orrs	r0, r1
 800b3aa:	f47f aebe 	bne.w	800b12a <_strtod_l+0x72>
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	f47f aed6 	bne.w	800b160 <_strtod_l+0xa8>
 800b3b4:	2a69      	cmp	r2, #105	@ 0x69
 800b3b6:	d028      	beq.n	800b40a <_strtod_l+0x352>
 800b3b8:	dc25      	bgt.n	800b406 <_strtod_l+0x34e>
 800b3ba:	2a49      	cmp	r2, #73	@ 0x49
 800b3bc:	d025      	beq.n	800b40a <_strtod_l+0x352>
 800b3be:	2a4e      	cmp	r2, #78	@ 0x4e
 800b3c0:	f47f aece 	bne.w	800b160 <_strtod_l+0xa8>
 800b3c4:	499b      	ldr	r1, [pc, #620]	@ (800b634 <_strtod_l+0x57c>)
 800b3c6:	a819      	add	r0, sp, #100	@ 0x64
 800b3c8:	f001 f9e2 	bl	800c790 <__match>
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	f43f aec7 	beq.w	800b160 <_strtod_l+0xa8>
 800b3d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	2b28      	cmp	r3, #40	@ 0x28
 800b3d8:	d12e      	bne.n	800b438 <_strtod_l+0x380>
 800b3da:	4997      	ldr	r1, [pc, #604]	@ (800b638 <_strtod_l+0x580>)
 800b3dc:	aa1c      	add	r2, sp, #112	@ 0x70
 800b3de:	a819      	add	r0, sp, #100	@ 0x64
 800b3e0:	f001 f9ea 	bl	800c7b8 <__hexnan>
 800b3e4:	2805      	cmp	r0, #5
 800b3e6:	d127      	bne.n	800b438 <_strtod_l+0x380>
 800b3e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b3ea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b3ee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b3f2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b3f6:	e698      	b.n	800b12a <_strtod_l+0x72>
 800b3f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b3fa:	fb08 2101 	mla	r1, r8, r1, r2
 800b3fe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b402:	920e      	str	r2, [sp, #56]	@ 0x38
 800b404:	e7b5      	b.n	800b372 <_strtod_l+0x2ba>
 800b406:	2a6e      	cmp	r2, #110	@ 0x6e
 800b408:	e7da      	b.n	800b3c0 <_strtod_l+0x308>
 800b40a:	498c      	ldr	r1, [pc, #560]	@ (800b63c <_strtod_l+0x584>)
 800b40c:	a819      	add	r0, sp, #100	@ 0x64
 800b40e:	f001 f9bf 	bl	800c790 <__match>
 800b412:	2800      	cmp	r0, #0
 800b414:	f43f aea4 	beq.w	800b160 <_strtod_l+0xa8>
 800b418:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b41a:	4989      	ldr	r1, [pc, #548]	@ (800b640 <_strtod_l+0x588>)
 800b41c:	3b01      	subs	r3, #1
 800b41e:	a819      	add	r0, sp, #100	@ 0x64
 800b420:	9319      	str	r3, [sp, #100]	@ 0x64
 800b422:	f001 f9b5 	bl	800c790 <__match>
 800b426:	b910      	cbnz	r0, 800b42e <_strtod_l+0x376>
 800b428:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b42a:	3301      	adds	r3, #1
 800b42c:	9319      	str	r3, [sp, #100]	@ 0x64
 800b42e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b650 <_strtod_l+0x598>
 800b432:	f04f 0a00 	mov.w	sl, #0
 800b436:	e678      	b.n	800b12a <_strtod_l+0x72>
 800b438:	4882      	ldr	r0, [pc, #520]	@ (800b644 <_strtod_l+0x58c>)
 800b43a:	f000 fee5 	bl	800c208 <nan>
 800b43e:	ec5b ab10 	vmov	sl, fp, d0
 800b442:	e672      	b.n	800b12a <_strtod_l+0x72>
 800b444:	eba8 0309 	sub.w	r3, r8, r9
 800b448:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b44a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b44c:	2f00      	cmp	r7, #0
 800b44e:	bf08      	it	eq
 800b450:	462f      	moveq	r7, r5
 800b452:	2d10      	cmp	r5, #16
 800b454:	462c      	mov	r4, r5
 800b456:	bfa8      	it	ge
 800b458:	2410      	movge	r4, #16
 800b45a:	f7f5 f87b 	bl	8000554 <__aeabi_ui2d>
 800b45e:	2d09      	cmp	r5, #9
 800b460:	4682      	mov	sl, r0
 800b462:	468b      	mov	fp, r1
 800b464:	dc13      	bgt.n	800b48e <_strtod_l+0x3d6>
 800b466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b468:	2b00      	cmp	r3, #0
 800b46a:	f43f ae5e 	beq.w	800b12a <_strtod_l+0x72>
 800b46e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b470:	dd78      	ble.n	800b564 <_strtod_l+0x4ac>
 800b472:	2b16      	cmp	r3, #22
 800b474:	dc5f      	bgt.n	800b536 <_strtod_l+0x47e>
 800b476:	4974      	ldr	r1, [pc, #464]	@ (800b648 <_strtod_l+0x590>)
 800b478:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b47c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b480:	4652      	mov	r2, sl
 800b482:	465b      	mov	r3, fp
 800b484:	f7f5 f8e0 	bl	8000648 <__aeabi_dmul>
 800b488:	4682      	mov	sl, r0
 800b48a:	468b      	mov	fp, r1
 800b48c:	e64d      	b.n	800b12a <_strtod_l+0x72>
 800b48e:	4b6e      	ldr	r3, [pc, #440]	@ (800b648 <_strtod_l+0x590>)
 800b490:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b494:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b498:	f7f5 f8d6 	bl	8000648 <__aeabi_dmul>
 800b49c:	4682      	mov	sl, r0
 800b49e:	9808      	ldr	r0, [sp, #32]
 800b4a0:	468b      	mov	fp, r1
 800b4a2:	f7f5 f857 	bl	8000554 <__aeabi_ui2d>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	4650      	mov	r0, sl
 800b4ac:	4659      	mov	r1, fp
 800b4ae:	f7f4 ff15 	bl	80002dc <__adddf3>
 800b4b2:	2d0f      	cmp	r5, #15
 800b4b4:	4682      	mov	sl, r0
 800b4b6:	468b      	mov	fp, r1
 800b4b8:	ddd5      	ble.n	800b466 <_strtod_l+0x3ae>
 800b4ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4bc:	1b2c      	subs	r4, r5, r4
 800b4be:	441c      	add	r4, r3
 800b4c0:	2c00      	cmp	r4, #0
 800b4c2:	f340 8096 	ble.w	800b5f2 <_strtod_l+0x53a>
 800b4c6:	f014 030f 	ands.w	r3, r4, #15
 800b4ca:	d00a      	beq.n	800b4e2 <_strtod_l+0x42a>
 800b4cc:	495e      	ldr	r1, [pc, #376]	@ (800b648 <_strtod_l+0x590>)
 800b4ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b4d2:	4652      	mov	r2, sl
 800b4d4:	465b      	mov	r3, fp
 800b4d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4da:	f7f5 f8b5 	bl	8000648 <__aeabi_dmul>
 800b4de:	4682      	mov	sl, r0
 800b4e0:	468b      	mov	fp, r1
 800b4e2:	f034 040f 	bics.w	r4, r4, #15
 800b4e6:	d073      	beq.n	800b5d0 <_strtod_l+0x518>
 800b4e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b4ec:	dd48      	ble.n	800b580 <_strtod_l+0x4c8>
 800b4ee:	2400      	movs	r4, #0
 800b4f0:	46a0      	mov	r8, r4
 800b4f2:	940a      	str	r4, [sp, #40]	@ 0x28
 800b4f4:	46a1      	mov	r9, r4
 800b4f6:	9a05      	ldr	r2, [sp, #20]
 800b4f8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b650 <_strtod_l+0x598>
 800b4fc:	2322      	movs	r3, #34	@ 0x22
 800b4fe:	6013      	str	r3, [r2, #0]
 800b500:	f04f 0a00 	mov.w	sl, #0
 800b504:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b506:	2b00      	cmp	r3, #0
 800b508:	f43f ae0f 	beq.w	800b12a <_strtod_l+0x72>
 800b50c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b50e:	9805      	ldr	r0, [sp, #20]
 800b510:	f7ff f942 	bl	800a798 <_Bfree>
 800b514:	9805      	ldr	r0, [sp, #20]
 800b516:	4649      	mov	r1, r9
 800b518:	f7ff f93e 	bl	800a798 <_Bfree>
 800b51c:	9805      	ldr	r0, [sp, #20]
 800b51e:	4641      	mov	r1, r8
 800b520:	f7ff f93a 	bl	800a798 <_Bfree>
 800b524:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b526:	9805      	ldr	r0, [sp, #20]
 800b528:	f7ff f936 	bl	800a798 <_Bfree>
 800b52c:	9805      	ldr	r0, [sp, #20]
 800b52e:	4621      	mov	r1, r4
 800b530:	f7ff f932 	bl	800a798 <_Bfree>
 800b534:	e5f9      	b.n	800b12a <_strtod_l+0x72>
 800b536:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b538:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b53c:	4293      	cmp	r3, r2
 800b53e:	dbbc      	blt.n	800b4ba <_strtod_l+0x402>
 800b540:	4c41      	ldr	r4, [pc, #260]	@ (800b648 <_strtod_l+0x590>)
 800b542:	f1c5 050f 	rsb	r5, r5, #15
 800b546:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b54a:	4652      	mov	r2, sl
 800b54c:	465b      	mov	r3, fp
 800b54e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b552:	f7f5 f879 	bl	8000648 <__aeabi_dmul>
 800b556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b558:	1b5d      	subs	r5, r3, r5
 800b55a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b55e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b562:	e78f      	b.n	800b484 <_strtod_l+0x3cc>
 800b564:	3316      	adds	r3, #22
 800b566:	dba8      	blt.n	800b4ba <_strtod_l+0x402>
 800b568:	4b37      	ldr	r3, [pc, #220]	@ (800b648 <_strtod_l+0x590>)
 800b56a:	eba9 0808 	sub.w	r8, r9, r8
 800b56e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b572:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b576:	4650      	mov	r0, sl
 800b578:	4659      	mov	r1, fp
 800b57a:	f7f5 f98f 	bl	800089c <__aeabi_ddiv>
 800b57e:	e783      	b.n	800b488 <_strtod_l+0x3d0>
 800b580:	4b32      	ldr	r3, [pc, #200]	@ (800b64c <_strtod_l+0x594>)
 800b582:	9308      	str	r3, [sp, #32]
 800b584:	2300      	movs	r3, #0
 800b586:	1124      	asrs	r4, r4, #4
 800b588:	4650      	mov	r0, sl
 800b58a:	4659      	mov	r1, fp
 800b58c:	461e      	mov	r6, r3
 800b58e:	2c01      	cmp	r4, #1
 800b590:	dc21      	bgt.n	800b5d6 <_strtod_l+0x51e>
 800b592:	b10b      	cbz	r3, 800b598 <_strtod_l+0x4e0>
 800b594:	4682      	mov	sl, r0
 800b596:	468b      	mov	fp, r1
 800b598:	492c      	ldr	r1, [pc, #176]	@ (800b64c <_strtod_l+0x594>)
 800b59a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b59e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b5a2:	4652      	mov	r2, sl
 800b5a4:	465b      	mov	r3, fp
 800b5a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5aa:	f7f5 f84d 	bl	8000648 <__aeabi_dmul>
 800b5ae:	4b28      	ldr	r3, [pc, #160]	@ (800b650 <_strtod_l+0x598>)
 800b5b0:	460a      	mov	r2, r1
 800b5b2:	400b      	ands	r3, r1
 800b5b4:	4927      	ldr	r1, [pc, #156]	@ (800b654 <_strtod_l+0x59c>)
 800b5b6:	428b      	cmp	r3, r1
 800b5b8:	4682      	mov	sl, r0
 800b5ba:	d898      	bhi.n	800b4ee <_strtod_l+0x436>
 800b5bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b5c0:	428b      	cmp	r3, r1
 800b5c2:	bf86      	itte	hi
 800b5c4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b658 <_strtod_l+0x5a0>
 800b5c8:	f04f 3aff 	movhi.w	sl, #4294967295
 800b5cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	9308      	str	r3, [sp, #32]
 800b5d4:	e07a      	b.n	800b6cc <_strtod_l+0x614>
 800b5d6:	07e2      	lsls	r2, r4, #31
 800b5d8:	d505      	bpl.n	800b5e6 <_strtod_l+0x52e>
 800b5da:	9b08      	ldr	r3, [sp, #32]
 800b5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e0:	f7f5 f832 	bl	8000648 <__aeabi_dmul>
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	9a08      	ldr	r2, [sp, #32]
 800b5e8:	3208      	adds	r2, #8
 800b5ea:	3601      	adds	r6, #1
 800b5ec:	1064      	asrs	r4, r4, #1
 800b5ee:	9208      	str	r2, [sp, #32]
 800b5f0:	e7cd      	b.n	800b58e <_strtod_l+0x4d6>
 800b5f2:	d0ed      	beq.n	800b5d0 <_strtod_l+0x518>
 800b5f4:	4264      	negs	r4, r4
 800b5f6:	f014 020f 	ands.w	r2, r4, #15
 800b5fa:	d00a      	beq.n	800b612 <_strtod_l+0x55a>
 800b5fc:	4b12      	ldr	r3, [pc, #72]	@ (800b648 <_strtod_l+0x590>)
 800b5fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b602:	4650      	mov	r0, sl
 800b604:	4659      	mov	r1, fp
 800b606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60a:	f7f5 f947 	bl	800089c <__aeabi_ddiv>
 800b60e:	4682      	mov	sl, r0
 800b610:	468b      	mov	fp, r1
 800b612:	1124      	asrs	r4, r4, #4
 800b614:	d0dc      	beq.n	800b5d0 <_strtod_l+0x518>
 800b616:	2c1f      	cmp	r4, #31
 800b618:	dd20      	ble.n	800b65c <_strtod_l+0x5a4>
 800b61a:	2400      	movs	r4, #0
 800b61c:	46a0      	mov	r8, r4
 800b61e:	940a      	str	r4, [sp, #40]	@ 0x28
 800b620:	46a1      	mov	r9, r4
 800b622:	9a05      	ldr	r2, [sp, #20]
 800b624:	2322      	movs	r3, #34	@ 0x22
 800b626:	f04f 0a00 	mov.w	sl, #0
 800b62a:	f04f 0b00 	mov.w	fp, #0
 800b62e:	6013      	str	r3, [r2, #0]
 800b630:	e768      	b.n	800b504 <_strtod_l+0x44c>
 800b632:	bf00      	nop
 800b634:	0800d005 	.word	0x0800d005
 800b638:	0800d21c 	.word	0x0800d21c
 800b63c:	0800cffd 	.word	0x0800cffd
 800b640:	0800d034 	.word	0x0800d034
 800b644:	0800d3c5 	.word	0x0800d3c5
 800b648:	0800d150 	.word	0x0800d150
 800b64c:	0800d128 	.word	0x0800d128
 800b650:	7ff00000 	.word	0x7ff00000
 800b654:	7ca00000 	.word	0x7ca00000
 800b658:	7fefffff 	.word	0x7fefffff
 800b65c:	f014 0310 	ands.w	r3, r4, #16
 800b660:	bf18      	it	ne
 800b662:	236a      	movne	r3, #106	@ 0x6a
 800b664:	4ea9      	ldr	r6, [pc, #676]	@ (800b90c <_strtod_l+0x854>)
 800b666:	9308      	str	r3, [sp, #32]
 800b668:	4650      	mov	r0, sl
 800b66a:	4659      	mov	r1, fp
 800b66c:	2300      	movs	r3, #0
 800b66e:	07e2      	lsls	r2, r4, #31
 800b670:	d504      	bpl.n	800b67c <_strtod_l+0x5c4>
 800b672:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b676:	f7f4 ffe7 	bl	8000648 <__aeabi_dmul>
 800b67a:	2301      	movs	r3, #1
 800b67c:	1064      	asrs	r4, r4, #1
 800b67e:	f106 0608 	add.w	r6, r6, #8
 800b682:	d1f4      	bne.n	800b66e <_strtod_l+0x5b6>
 800b684:	b10b      	cbz	r3, 800b68a <_strtod_l+0x5d2>
 800b686:	4682      	mov	sl, r0
 800b688:	468b      	mov	fp, r1
 800b68a:	9b08      	ldr	r3, [sp, #32]
 800b68c:	b1b3      	cbz	r3, 800b6bc <_strtod_l+0x604>
 800b68e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b692:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b696:	2b00      	cmp	r3, #0
 800b698:	4659      	mov	r1, fp
 800b69a:	dd0f      	ble.n	800b6bc <_strtod_l+0x604>
 800b69c:	2b1f      	cmp	r3, #31
 800b69e:	dd55      	ble.n	800b74c <_strtod_l+0x694>
 800b6a0:	2b34      	cmp	r3, #52	@ 0x34
 800b6a2:	bfde      	ittt	le
 800b6a4:	f04f 33ff 	movle.w	r3, #4294967295
 800b6a8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b6ac:	4093      	lslle	r3, r2
 800b6ae:	f04f 0a00 	mov.w	sl, #0
 800b6b2:	bfcc      	ite	gt
 800b6b4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b6b8:	ea03 0b01 	andle.w	fp, r3, r1
 800b6bc:	2200      	movs	r2, #0
 800b6be:	2300      	movs	r3, #0
 800b6c0:	4650      	mov	r0, sl
 800b6c2:	4659      	mov	r1, fp
 800b6c4:	f7f5 fa28 	bl	8000b18 <__aeabi_dcmpeq>
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	d1a6      	bne.n	800b61a <_strtod_l+0x562>
 800b6cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b6d2:	9805      	ldr	r0, [sp, #20]
 800b6d4:	462b      	mov	r3, r5
 800b6d6:	463a      	mov	r2, r7
 800b6d8:	f7ff f8c6 	bl	800a868 <__s2b>
 800b6dc:	900a      	str	r0, [sp, #40]	@ 0x28
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	f43f af05 	beq.w	800b4ee <_strtod_l+0x436>
 800b6e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6e6:	2a00      	cmp	r2, #0
 800b6e8:	eba9 0308 	sub.w	r3, r9, r8
 800b6ec:	bfa8      	it	ge
 800b6ee:	2300      	movge	r3, #0
 800b6f0:	9312      	str	r3, [sp, #72]	@ 0x48
 800b6f2:	2400      	movs	r4, #0
 800b6f4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b6f8:	9316      	str	r3, [sp, #88]	@ 0x58
 800b6fa:	46a0      	mov	r8, r4
 800b6fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6fe:	9805      	ldr	r0, [sp, #20]
 800b700:	6859      	ldr	r1, [r3, #4]
 800b702:	f7ff f809 	bl	800a718 <_Balloc>
 800b706:	4681      	mov	r9, r0
 800b708:	2800      	cmp	r0, #0
 800b70a:	f43f aef4 	beq.w	800b4f6 <_strtod_l+0x43e>
 800b70e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b710:	691a      	ldr	r2, [r3, #16]
 800b712:	3202      	adds	r2, #2
 800b714:	f103 010c 	add.w	r1, r3, #12
 800b718:	0092      	lsls	r2, r2, #2
 800b71a:	300c      	adds	r0, #12
 800b71c:	f7fe f89b 	bl	8009856 <memcpy>
 800b720:	ec4b ab10 	vmov	d0, sl, fp
 800b724:	9805      	ldr	r0, [sp, #20]
 800b726:	aa1c      	add	r2, sp, #112	@ 0x70
 800b728:	a91b      	add	r1, sp, #108	@ 0x6c
 800b72a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b72e:	f7ff fbd7 	bl	800aee0 <__d2b>
 800b732:	901a      	str	r0, [sp, #104]	@ 0x68
 800b734:	2800      	cmp	r0, #0
 800b736:	f43f aede 	beq.w	800b4f6 <_strtod_l+0x43e>
 800b73a:	9805      	ldr	r0, [sp, #20]
 800b73c:	2101      	movs	r1, #1
 800b73e:	f7ff f929 	bl	800a994 <__i2b>
 800b742:	4680      	mov	r8, r0
 800b744:	b948      	cbnz	r0, 800b75a <_strtod_l+0x6a2>
 800b746:	f04f 0800 	mov.w	r8, #0
 800b74a:	e6d4      	b.n	800b4f6 <_strtod_l+0x43e>
 800b74c:	f04f 32ff 	mov.w	r2, #4294967295
 800b750:	fa02 f303 	lsl.w	r3, r2, r3
 800b754:	ea03 0a0a 	and.w	sl, r3, sl
 800b758:	e7b0      	b.n	800b6bc <_strtod_l+0x604>
 800b75a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b75c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b75e:	2d00      	cmp	r5, #0
 800b760:	bfab      	itete	ge
 800b762:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b764:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b766:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b768:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b76a:	bfac      	ite	ge
 800b76c:	18ef      	addge	r7, r5, r3
 800b76e:	1b5e      	sublt	r6, r3, r5
 800b770:	9b08      	ldr	r3, [sp, #32]
 800b772:	1aed      	subs	r5, r5, r3
 800b774:	4415      	add	r5, r2
 800b776:	4b66      	ldr	r3, [pc, #408]	@ (800b910 <_strtod_l+0x858>)
 800b778:	3d01      	subs	r5, #1
 800b77a:	429d      	cmp	r5, r3
 800b77c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b780:	da50      	bge.n	800b824 <_strtod_l+0x76c>
 800b782:	1b5b      	subs	r3, r3, r5
 800b784:	2b1f      	cmp	r3, #31
 800b786:	eba2 0203 	sub.w	r2, r2, r3
 800b78a:	f04f 0101 	mov.w	r1, #1
 800b78e:	dc3d      	bgt.n	800b80c <_strtod_l+0x754>
 800b790:	fa01 f303 	lsl.w	r3, r1, r3
 800b794:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b796:	2300      	movs	r3, #0
 800b798:	9310      	str	r3, [sp, #64]	@ 0x40
 800b79a:	18bd      	adds	r5, r7, r2
 800b79c:	9b08      	ldr	r3, [sp, #32]
 800b79e:	42af      	cmp	r7, r5
 800b7a0:	4416      	add	r6, r2
 800b7a2:	441e      	add	r6, r3
 800b7a4:	463b      	mov	r3, r7
 800b7a6:	bfa8      	it	ge
 800b7a8:	462b      	movge	r3, r5
 800b7aa:	42b3      	cmp	r3, r6
 800b7ac:	bfa8      	it	ge
 800b7ae:	4633      	movge	r3, r6
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	bfc2      	ittt	gt
 800b7b4:	1aed      	subgt	r5, r5, r3
 800b7b6:	1af6      	subgt	r6, r6, r3
 800b7b8:	1aff      	subgt	r7, r7, r3
 800b7ba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	dd16      	ble.n	800b7ee <_strtod_l+0x736>
 800b7c0:	4641      	mov	r1, r8
 800b7c2:	9805      	ldr	r0, [sp, #20]
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	f7ff f9a5 	bl	800ab14 <__pow5mult>
 800b7ca:	4680      	mov	r8, r0
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	d0ba      	beq.n	800b746 <_strtod_l+0x68e>
 800b7d0:	4601      	mov	r1, r0
 800b7d2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b7d4:	9805      	ldr	r0, [sp, #20]
 800b7d6:	f7ff f8f3 	bl	800a9c0 <__multiply>
 800b7da:	900e      	str	r0, [sp, #56]	@ 0x38
 800b7dc:	2800      	cmp	r0, #0
 800b7de:	f43f ae8a 	beq.w	800b4f6 <_strtod_l+0x43e>
 800b7e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b7e4:	9805      	ldr	r0, [sp, #20]
 800b7e6:	f7fe ffd7 	bl	800a798 <_Bfree>
 800b7ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800b7ee:	2d00      	cmp	r5, #0
 800b7f0:	dc1d      	bgt.n	800b82e <_strtod_l+0x776>
 800b7f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	dd23      	ble.n	800b840 <_strtod_l+0x788>
 800b7f8:	4649      	mov	r1, r9
 800b7fa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b7fc:	9805      	ldr	r0, [sp, #20]
 800b7fe:	f7ff f989 	bl	800ab14 <__pow5mult>
 800b802:	4681      	mov	r9, r0
 800b804:	b9e0      	cbnz	r0, 800b840 <_strtod_l+0x788>
 800b806:	f04f 0900 	mov.w	r9, #0
 800b80a:	e674      	b.n	800b4f6 <_strtod_l+0x43e>
 800b80c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b810:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b814:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b818:	35e2      	adds	r5, #226	@ 0xe2
 800b81a:	fa01 f305 	lsl.w	r3, r1, r5
 800b81e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b820:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b822:	e7ba      	b.n	800b79a <_strtod_l+0x6e2>
 800b824:	2300      	movs	r3, #0
 800b826:	9310      	str	r3, [sp, #64]	@ 0x40
 800b828:	2301      	movs	r3, #1
 800b82a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b82c:	e7b5      	b.n	800b79a <_strtod_l+0x6e2>
 800b82e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b830:	9805      	ldr	r0, [sp, #20]
 800b832:	462a      	mov	r2, r5
 800b834:	f7ff f9c8 	bl	800abc8 <__lshift>
 800b838:	901a      	str	r0, [sp, #104]	@ 0x68
 800b83a:	2800      	cmp	r0, #0
 800b83c:	d1d9      	bne.n	800b7f2 <_strtod_l+0x73a>
 800b83e:	e65a      	b.n	800b4f6 <_strtod_l+0x43e>
 800b840:	2e00      	cmp	r6, #0
 800b842:	dd07      	ble.n	800b854 <_strtod_l+0x79c>
 800b844:	4649      	mov	r1, r9
 800b846:	9805      	ldr	r0, [sp, #20]
 800b848:	4632      	mov	r2, r6
 800b84a:	f7ff f9bd 	bl	800abc8 <__lshift>
 800b84e:	4681      	mov	r9, r0
 800b850:	2800      	cmp	r0, #0
 800b852:	d0d8      	beq.n	800b806 <_strtod_l+0x74e>
 800b854:	2f00      	cmp	r7, #0
 800b856:	dd08      	ble.n	800b86a <_strtod_l+0x7b2>
 800b858:	4641      	mov	r1, r8
 800b85a:	9805      	ldr	r0, [sp, #20]
 800b85c:	463a      	mov	r2, r7
 800b85e:	f7ff f9b3 	bl	800abc8 <__lshift>
 800b862:	4680      	mov	r8, r0
 800b864:	2800      	cmp	r0, #0
 800b866:	f43f ae46 	beq.w	800b4f6 <_strtod_l+0x43e>
 800b86a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b86c:	9805      	ldr	r0, [sp, #20]
 800b86e:	464a      	mov	r2, r9
 800b870:	f7ff fa32 	bl	800acd8 <__mdiff>
 800b874:	4604      	mov	r4, r0
 800b876:	2800      	cmp	r0, #0
 800b878:	f43f ae3d 	beq.w	800b4f6 <_strtod_l+0x43e>
 800b87c:	68c3      	ldr	r3, [r0, #12]
 800b87e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b880:	2300      	movs	r3, #0
 800b882:	60c3      	str	r3, [r0, #12]
 800b884:	4641      	mov	r1, r8
 800b886:	f7ff fa0b 	bl	800aca0 <__mcmp>
 800b88a:	2800      	cmp	r0, #0
 800b88c:	da46      	bge.n	800b91c <_strtod_l+0x864>
 800b88e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b890:	ea53 030a 	orrs.w	r3, r3, sl
 800b894:	d16c      	bne.n	800b970 <_strtod_l+0x8b8>
 800b896:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d168      	bne.n	800b970 <_strtod_l+0x8b8>
 800b89e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b8a2:	0d1b      	lsrs	r3, r3, #20
 800b8a4:	051b      	lsls	r3, r3, #20
 800b8a6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b8aa:	d961      	bls.n	800b970 <_strtod_l+0x8b8>
 800b8ac:	6963      	ldr	r3, [r4, #20]
 800b8ae:	b913      	cbnz	r3, 800b8b6 <_strtod_l+0x7fe>
 800b8b0:	6923      	ldr	r3, [r4, #16]
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	dd5c      	ble.n	800b970 <_strtod_l+0x8b8>
 800b8b6:	4621      	mov	r1, r4
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	9805      	ldr	r0, [sp, #20]
 800b8bc:	f7ff f984 	bl	800abc8 <__lshift>
 800b8c0:	4641      	mov	r1, r8
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	f7ff f9ec 	bl	800aca0 <__mcmp>
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	dd51      	ble.n	800b970 <_strtod_l+0x8b8>
 800b8cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b8d0:	9a08      	ldr	r2, [sp, #32]
 800b8d2:	0d1b      	lsrs	r3, r3, #20
 800b8d4:	051b      	lsls	r3, r3, #20
 800b8d6:	2a00      	cmp	r2, #0
 800b8d8:	d06b      	beq.n	800b9b2 <_strtod_l+0x8fa>
 800b8da:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b8de:	d868      	bhi.n	800b9b2 <_strtod_l+0x8fa>
 800b8e0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b8e4:	f67f ae9d 	bls.w	800b622 <_strtod_l+0x56a>
 800b8e8:	4b0a      	ldr	r3, [pc, #40]	@ (800b914 <_strtod_l+0x85c>)
 800b8ea:	4650      	mov	r0, sl
 800b8ec:	4659      	mov	r1, fp
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	f7f4 feaa 	bl	8000648 <__aeabi_dmul>
 800b8f4:	4b08      	ldr	r3, [pc, #32]	@ (800b918 <_strtod_l+0x860>)
 800b8f6:	400b      	ands	r3, r1
 800b8f8:	4682      	mov	sl, r0
 800b8fa:	468b      	mov	fp, r1
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f47f ae05 	bne.w	800b50c <_strtod_l+0x454>
 800b902:	9a05      	ldr	r2, [sp, #20]
 800b904:	2322      	movs	r3, #34	@ 0x22
 800b906:	6013      	str	r3, [r2, #0]
 800b908:	e600      	b.n	800b50c <_strtod_l+0x454>
 800b90a:	bf00      	nop
 800b90c:	0800d248 	.word	0x0800d248
 800b910:	fffffc02 	.word	0xfffffc02
 800b914:	39500000 	.word	0x39500000
 800b918:	7ff00000 	.word	0x7ff00000
 800b91c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b920:	d165      	bne.n	800b9ee <_strtod_l+0x936>
 800b922:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b924:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b928:	b35a      	cbz	r2, 800b982 <_strtod_l+0x8ca>
 800b92a:	4a9f      	ldr	r2, [pc, #636]	@ (800bba8 <_strtod_l+0xaf0>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d12b      	bne.n	800b988 <_strtod_l+0x8d0>
 800b930:	9b08      	ldr	r3, [sp, #32]
 800b932:	4651      	mov	r1, sl
 800b934:	b303      	cbz	r3, 800b978 <_strtod_l+0x8c0>
 800b936:	4b9d      	ldr	r3, [pc, #628]	@ (800bbac <_strtod_l+0xaf4>)
 800b938:	465a      	mov	r2, fp
 800b93a:	4013      	ands	r3, r2
 800b93c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b940:	f04f 32ff 	mov.w	r2, #4294967295
 800b944:	d81b      	bhi.n	800b97e <_strtod_l+0x8c6>
 800b946:	0d1b      	lsrs	r3, r3, #20
 800b948:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b94c:	fa02 f303 	lsl.w	r3, r2, r3
 800b950:	4299      	cmp	r1, r3
 800b952:	d119      	bne.n	800b988 <_strtod_l+0x8d0>
 800b954:	4b96      	ldr	r3, [pc, #600]	@ (800bbb0 <_strtod_l+0xaf8>)
 800b956:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b958:	429a      	cmp	r2, r3
 800b95a:	d102      	bne.n	800b962 <_strtod_l+0x8aa>
 800b95c:	3101      	adds	r1, #1
 800b95e:	f43f adca 	beq.w	800b4f6 <_strtod_l+0x43e>
 800b962:	4b92      	ldr	r3, [pc, #584]	@ (800bbac <_strtod_l+0xaf4>)
 800b964:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b966:	401a      	ands	r2, r3
 800b968:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b96c:	f04f 0a00 	mov.w	sl, #0
 800b970:	9b08      	ldr	r3, [sp, #32]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d1b8      	bne.n	800b8e8 <_strtod_l+0x830>
 800b976:	e5c9      	b.n	800b50c <_strtod_l+0x454>
 800b978:	f04f 33ff 	mov.w	r3, #4294967295
 800b97c:	e7e8      	b.n	800b950 <_strtod_l+0x898>
 800b97e:	4613      	mov	r3, r2
 800b980:	e7e6      	b.n	800b950 <_strtod_l+0x898>
 800b982:	ea53 030a 	orrs.w	r3, r3, sl
 800b986:	d0a1      	beq.n	800b8cc <_strtod_l+0x814>
 800b988:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b98a:	b1db      	cbz	r3, 800b9c4 <_strtod_l+0x90c>
 800b98c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b98e:	4213      	tst	r3, r2
 800b990:	d0ee      	beq.n	800b970 <_strtod_l+0x8b8>
 800b992:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b994:	9a08      	ldr	r2, [sp, #32]
 800b996:	4650      	mov	r0, sl
 800b998:	4659      	mov	r1, fp
 800b99a:	b1bb      	cbz	r3, 800b9cc <_strtod_l+0x914>
 800b99c:	f7ff fb6e 	bl	800b07c <sulp>
 800b9a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9a4:	ec53 2b10 	vmov	r2, r3, d0
 800b9a8:	f7f4 fc98 	bl	80002dc <__adddf3>
 800b9ac:	4682      	mov	sl, r0
 800b9ae:	468b      	mov	fp, r1
 800b9b0:	e7de      	b.n	800b970 <_strtod_l+0x8b8>
 800b9b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b9b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b9ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b9be:	f04f 3aff 	mov.w	sl, #4294967295
 800b9c2:	e7d5      	b.n	800b970 <_strtod_l+0x8b8>
 800b9c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b9c6:	ea13 0f0a 	tst.w	r3, sl
 800b9ca:	e7e1      	b.n	800b990 <_strtod_l+0x8d8>
 800b9cc:	f7ff fb56 	bl	800b07c <sulp>
 800b9d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9d4:	ec53 2b10 	vmov	r2, r3, d0
 800b9d8:	f7f4 fc7e 	bl	80002d8 <__aeabi_dsub>
 800b9dc:	2200      	movs	r2, #0
 800b9de:	2300      	movs	r3, #0
 800b9e0:	4682      	mov	sl, r0
 800b9e2:	468b      	mov	fp, r1
 800b9e4:	f7f5 f898 	bl	8000b18 <__aeabi_dcmpeq>
 800b9e8:	2800      	cmp	r0, #0
 800b9ea:	d0c1      	beq.n	800b970 <_strtod_l+0x8b8>
 800b9ec:	e619      	b.n	800b622 <_strtod_l+0x56a>
 800b9ee:	4641      	mov	r1, r8
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	f7ff facd 	bl	800af90 <__ratio>
 800b9f6:	ec57 6b10 	vmov	r6, r7, d0
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ba00:	4630      	mov	r0, r6
 800ba02:	4639      	mov	r1, r7
 800ba04:	f7f5 f89c 	bl	8000b40 <__aeabi_dcmple>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	d06f      	beq.n	800baec <_strtod_l+0xa34>
 800ba0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d17a      	bne.n	800bb08 <_strtod_l+0xa50>
 800ba12:	f1ba 0f00 	cmp.w	sl, #0
 800ba16:	d158      	bne.n	800baca <_strtod_l+0xa12>
 800ba18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d15a      	bne.n	800bad8 <_strtod_l+0xa20>
 800ba22:	4b64      	ldr	r3, [pc, #400]	@ (800bbb4 <_strtod_l+0xafc>)
 800ba24:	2200      	movs	r2, #0
 800ba26:	4630      	mov	r0, r6
 800ba28:	4639      	mov	r1, r7
 800ba2a:	f7f5 f87f 	bl	8000b2c <__aeabi_dcmplt>
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	d159      	bne.n	800bae6 <_strtod_l+0xa2e>
 800ba32:	4630      	mov	r0, r6
 800ba34:	4639      	mov	r1, r7
 800ba36:	4b60      	ldr	r3, [pc, #384]	@ (800bbb8 <_strtod_l+0xb00>)
 800ba38:	2200      	movs	r2, #0
 800ba3a:	f7f4 fe05 	bl	8000648 <__aeabi_dmul>
 800ba3e:	4606      	mov	r6, r0
 800ba40:	460f      	mov	r7, r1
 800ba42:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ba46:	9606      	str	r6, [sp, #24]
 800ba48:	9307      	str	r3, [sp, #28]
 800ba4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba4e:	4d57      	ldr	r5, [pc, #348]	@ (800bbac <_strtod_l+0xaf4>)
 800ba50:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ba54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba56:	401d      	ands	r5, r3
 800ba58:	4b58      	ldr	r3, [pc, #352]	@ (800bbbc <_strtod_l+0xb04>)
 800ba5a:	429d      	cmp	r5, r3
 800ba5c:	f040 80b2 	bne.w	800bbc4 <_strtod_l+0xb0c>
 800ba60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba62:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ba66:	ec4b ab10 	vmov	d0, sl, fp
 800ba6a:	f7ff f9c9 	bl	800ae00 <__ulp>
 800ba6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba72:	ec51 0b10 	vmov	r0, r1, d0
 800ba76:	f7f4 fde7 	bl	8000648 <__aeabi_dmul>
 800ba7a:	4652      	mov	r2, sl
 800ba7c:	465b      	mov	r3, fp
 800ba7e:	f7f4 fc2d 	bl	80002dc <__adddf3>
 800ba82:	460b      	mov	r3, r1
 800ba84:	4949      	ldr	r1, [pc, #292]	@ (800bbac <_strtod_l+0xaf4>)
 800ba86:	4a4e      	ldr	r2, [pc, #312]	@ (800bbc0 <_strtod_l+0xb08>)
 800ba88:	4019      	ands	r1, r3
 800ba8a:	4291      	cmp	r1, r2
 800ba8c:	4682      	mov	sl, r0
 800ba8e:	d942      	bls.n	800bb16 <_strtod_l+0xa5e>
 800ba90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ba92:	4b47      	ldr	r3, [pc, #284]	@ (800bbb0 <_strtod_l+0xaf8>)
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d103      	bne.n	800baa0 <_strtod_l+0x9e8>
 800ba98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	f43f ad2b 	beq.w	800b4f6 <_strtod_l+0x43e>
 800baa0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bbb0 <_strtod_l+0xaf8>
 800baa4:	f04f 3aff 	mov.w	sl, #4294967295
 800baa8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800baaa:	9805      	ldr	r0, [sp, #20]
 800baac:	f7fe fe74 	bl	800a798 <_Bfree>
 800bab0:	9805      	ldr	r0, [sp, #20]
 800bab2:	4649      	mov	r1, r9
 800bab4:	f7fe fe70 	bl	800a798 <_Bfree>
 800bab8:	9805      	ldr	r0, [sp, #20]
 800baba:	4641      	mov	r1, r8
 800babc:	f7fe fe6c 	bl	800a798 <_Bfree>
 800bac0:	9805      	ldr	r0, [sp, #20]
 800bac2:	4621      	mov	r1, r4
 800bac4:	f7fe fe68 	bl	800a798 <_Bfree>
 800bac8:	e618      	b.n	800b6fc <_strtod_l+0x644>
 800baca:	f1ba 0f01 	cmp.w	sl, #1
 800bace:	d103      	bne.n	800bad8 <_strtod_l+0xa20>
 800bad0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	f43f ada5 	beq.w	800b622 <_strtod_l+0x56a>
 800bad8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bb88 <_strtod_l+0xad0>
 800badc:	4f35      	ldr	r7, [pc, #212]	@ (800bbb4 <_strtod_l+0xafc>)
 800bade:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bae2:	2600      	movs	r6, #0
 800bae4:	e7b1      	b.n	800ba4a <_strtod_l+0x992>
 800bae6:	4f34      	ldr	r7, [pc, #208]	@ (800bbb8 <_strtod_l+0xb00>)
 800bae8:	2600      	movs	r6, #0
 800baea:	e7aa      	b.n	800ba42 <_strtod_l+0x98a>
 800baec:	4b32      	ldr	r3, [pc, #200]	@ (800bbb8 <_strtod_l+0xb00>)
 800baee:	4630      	mov	r0, r6
 800baf0:	4639      	mov	r1, r7
 800baf2:	2200      	movs	r2, #0
 800baf4:	f7f4 fda8 	bl	8000648 <__aeabi_dmul>
 800baf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bafa:	4606      	mov	r6, r0
 800bafc:	460f      	mov	r7, r1
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d09f      	beq.n	800ba42 <_strtod_l+0x98a>
 800bb02:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bb06:	e7a0      	b.n	800ba4a <_strtod_l+0x992>
 800bb08:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bb90 <_strtod_l+0xad8>
 800bb0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bb10:	ec57 6b17 	vmov	r6, r7, d7
 800bb14:	e799      	b.n	800ba4a <_strtod_l+0x992>
 800bb16:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bb1a:	9b08      	ldr	r3, [sp, #32]
 800bb1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d1c1      	bne.n	800baa8 <_strtod_l+0x9f0>
 800bb24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bb28:	0d1b      	lsrs	r3, r3, #20
 800bb2a:	051b      	lsls	r3, r3, #20
 800bb2c:	429d      	cmp	r5, r3
 800bb2e:	d1bb      	bne.n	800baa8 <_strtod_l+0x9f0>
 800bb30:	4630      	mov	r0, r6
 800bb32:	4639      	mov	r1, r7
 800bb34:	f7f5 f8e8 	bl	8000d08 <__aeabi_d2lz>
 800bb38:	f7f4 fd58 	bl	80005ec <__aeabi_l2d>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	460b      	mov	r3, r1
 800bb40:	4630      	mov	r0, r6
 800bb42:	4639      	mov	r1, r7
 800bb44:	f7f4 fbc8 	bl	80002d8 <__aeabi_dsub>
 800bb48:	460b      	mov	r3, r1
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bb50:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bb54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb56:	ea46 060a 	orr.w	r6, r6, sl
 800bb5a:	431e      	orrs	r6, r3
 800bb5c:	d06f      	beq.n	800bc3e <_strtod_l+0xb86>
 800bb5e:	a30e      	add	r3, pc, #56	@ (adr r3, 800bb98 <_strtod_l+0xae0>)
 800bb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb64:	f7f4 ffe2 	bl	8000b2c <__aeabi_dcmplt>
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	f47f accf 	bne.w	800b50c <_strtod_l+0x454>
 800bb6e:	a30c      	add	r3, pc, #48	@ (adr r3, 800bba0 <_strtod_l+0xae8>)
 800bb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb78:	f7f4 fff6 	bl	8000b68 <__aeabi_dcmpgt>
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	d093      	beq.n	800baa8 <_strtod_l+0x9f0>
 800bb80:	e4c4      	b.n	800b50c <_strtod_l+0x454>
 800bb82:	bf00      	nop
 800bb84:	f3af 8000 	nop.w
 800bb88:	00000000 	.word	0x00000000
 800bb8c:	bff00000 	.word	0xbff00000
 800bb90:	00000000 	.word	0x00000000
 800bb94:	3ff00000 	.word	0x3ff00000
 800bb98:	94a03595 	.word	0x94a03595
 800bb9c:	3fdfffff 	.word	0x3fdfffff
 800bba0:	35afe535 	.word	0x35afe535
 800bba4:	3fe00000 	.word	0x3fe00000
 800bba8:	000fffff 	.word	0x000fffff
 800bbac:	7ff00000 	.word	0x7ff00000
 800bbb0:	7fefffff 	.word	0x7fefffff
 800bbb4:	3ff00000 	.word	0x3ff00000
 800bbb8:	3fe00000 	.word	0x3fe00000
 800bbbc:	7fe00000 	.word	0x7fe00000
 800bbc0:	7c9fffff 	.word	0x7c9fffff
 800bbc4:	9b08      	ldr	r3, [sp, #32]
 800bbc6:	b323      	cbz	r3, 800bc12 <_strtod_l+0xb5a>
 800bbc8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bbcc:	d821      	bhi.n	800bc12 <_strtod_l+0xb5a>
 800bbce:	a328      	add	r3, pc, #160	@ (adr r3, 800bc70 <_strtod_l+0xbb8>)
 800bbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	4639      	mov	r1, r7
 800bbd8:	f7f4 ffb2 	bl	8000b40 <__aeabi_dcmple>
 800bbdc:	b1a0      	cbz	r0, 800bc08 <_strtod_l+0xb50>
 800bbde:	4639      	mov	r1, r7
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	f7f5 f809 	bl	8000bf8 <__aeabi_d2uiz>
 800bbe6:	2801      	cmp	r0, #1
 800bbe8:	bf38      	it	cc
 800bbea:	2001      	movcc	r0, #1
 800bbec:	f7f4 fcb2 	bl	8000554 <__aeabi_ui2d>
 800bbf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbf2:	4606      	mov	r6, r0
 800bbf4:	460f      	mov	r7, r1
 800bbf6:	b9fb      	cbnz	r3, 800bc38 <_strtod_l+0xb80>
 800bbf8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bbfc:	9014      	str	r0, [sp, #80]	@ 0x50
 800bbfe:	9315      	str	r3, [sp, #84]	@ 0x54
 800bc00:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bc04:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bc08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bc0a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bc0e:	1b5b      	subs	r3, r3, r5
 800bc10:	9311      	str	r3, [sp, #68]	@ 0x44
 800bc12:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bc16:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bc1a:	f7ff f8f1 	bl	800ae00 <__ulp>
 800bc1e:	4650      	mov	r0, sl
 800bc20:	ec53 2b10 	vmov	r2, r3, d0
 800bc24:	4659      	mov	r1, fp
 800bc26:	f7f4 fd0f 	bl	8000648 <__aeabi_dmul>
 800bc2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bc2e:	f7f4 fb55 	bl	80002dc <__adddf3>
 800bc32:	4682      	mov	sl, r0
 800bc34:	468b      	mov	fp, r1
 800bc36:	e770      	b.n	800bb1a <_strtod_l+0xa62>
 800bc38:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bc3c:	e7e0      	b.n	800bc00 <_strtod_l+0xb48>
 800bc3e:	a30e      	add	r3, pc, #56	@ (adr r3, 800bc78 <_strtod_l+0xbc0>)
 800bc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc44:	f7f4 ff72 	bl	8000b2c <__aeabi_dcmplt>
 800bc48:	e798      	b.n	800bb7c <_strtod_l+0xac4>
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc4e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bc50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc52:	6013      	str	r3, [r2, #0]
 800bc54:	f7ff ba6d 	b.w	800b132 <_strtod_l+0x7a>
 800bc58:	2a65      	cmp	r2, #101	@ 0x65
 800bc5a:	f43f ab66 	beq.w	800b32a <_strtod_l+0x272>
 800bc5e:	2a45      	cmp	r2, #69	@ 0x45
 800bc60:	f43f ab63 	beq.w	800b32a <_strtod_l+0x272>
 800bc64:	2301      	movs	r3, #1
 800bc66:	f7ff bb9e 	b.w	800b3a6 <_strtod_l+0x2ee>
 800bc6a:	bf00      	nop
 800bc6c:	f3af 8000 	nop.w
 800bc70:	ffc00000 	.word	0xffc00000
 800bc74:	41dfffff 	.word	0x41dfffff
 800bc78:	94a03595 	.word	0x94a03595
 800bc7c:	3fcfffff 	.word	0x3fcfffff

0800bc80 <_strtod_r>:
 800bc80:	4b01      	ldr	r3, [pc, #4]	@ (800bc88 <_strtod_r+0x8>)
 800bc82:	f7ff ba19 	b.w	800b0b8 <_strtod_l>
 800bc86:	bf00      	nop
 800bc88:	2000006c 	.word	0x2000006c

0800bc8c <_strtol_l.constprop.0>:
 800bc8c:	2b24      	cmp	r3, #36	@ 0x24
 800bc8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc92:	4686      	mov	lr, r0
 800bc94:	4690      	mov	r8, r2
 800bc96:	d801      	bhi.n	800bc9c <_strtol_l.constprop.0+0x10>
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d106      	bne.n	800bcaa <_strtol_l.constprop.0+0x1e>
 800bc9c:	f7fd fdae 	bl	80097fc <__errno>
 800bca0:	2316      	movs	r3, #22
 800bca2:	6003      	str	r3, [r0, #0]
 800bca4:	2000      	movs	r0, #0
 800bca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcaa:	4834      	ldr	r0, [pc, #208]	@ (800bd7c <_strtol_l.constprop.0+0xf0>)
 800bcac:	460d      	mov	r5, r1
 800bcae:	462a      	mov	r2, r5
 800bcb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bcb4:	5d06      	ldrb	r6, [r0, r4]
 800bcb6:	f016 0608 	ands.w	r6, r6, #8
 800bcba:	d1f8      	bne.n	800bcae <_strtol_l.constprop.0+0x22>
 800bcbc:	2c2d      	cmp	r4, #45	@ 0x2d
 800bcbe:	d12d      	bne.n	800bd1c <_strtol_l.constprop.0+0x90>
 800bcc0:	782c      	ldrb	r4, [r5, #0]
 800bcc2:	2601      	movs	r6, #1
 800bcc4:	1c95      	adds	r5, r2, #2
 800bcc6:	f033 0210 	bics.w	r2, r3, #16
 800bcca:	d109      	bne.n	800bce0 <_strtol_l.constprop.0+0x54>
 800bccc:	2c30      	cmp	r4, #48	@ 0x30
 800bcce:	d12a      	bne.n	800bd26 <_strtol_l.constprop.0+0x9a>
 800bcd0:	782a      	ldrb	r2, [r5, #0]
 800bcd2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bcd6:	2a58      	cmp	r2, #88	@ 0x58
 800bcd8:	d125      	bne.n	800bd26 <_strtol_l.constprop.0+0x9a>
 800bcda:	786c      	ldrb	r4, [r5, #1]
 800bcdc:	2310      	movs	r3, #16
 800bcde:	3502      	adds	r5, #2
 800bce0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bce4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bce8:	2200      	movs	r2, #0
 800bcea:	fbbc f9f3 	udiv	r9, ip, r3
 800bcee:	4610      	mov	r0, r2
 800bcf0:	fb03 ca19 	mls	sl, r3, r9, ip
 800bcf4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bcf8:	2f09      	cmp	r7, #9
 800bcfa:	d81b      	bhi.n	800bd34 <_strtol_l.constprop.0+0xa8>
 800bcfc:	463c      	mov	r4, r7
 800bcfe:	42a3      	cmp	r3, r4
 800bd00:	dd27      	ble.n	800bd52 <_strtol_l.constprop.0+0xc6>
 800bd02:	1c57      	adds	r7, r2, #1
 800bd04:	d007      	beq.n	800bd16 <_strtol_l.constprop.0+0x8a>
 800bd06:	4581      	cmp	r9, r0
 800bd08:	d320      	bcc.n	800bd4c <_strtol_l.constprop.0+0xc0>
 800bd0a:	d101      	bne.n	800bd10 <_strtol_l.constprop.0+0x84>
 800bd0c:	45a2      	cmp	sl, r4
 800bd0e:	db1d      	blt.n	800bd4c <_strtol_l.constprop.0+0xc0>
 800bd10:	fb00 4003 	mla	r0, r0, r3, r4
 800bd14:	2201      	movs	r2, #1
 800bd16:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd1a:	e7eb      	b.n	800bcf4 <_strtol_l.constprop.0+0x68>
 800bd1c:	2c2b      	cmp	r4, #43	@ 0x2b
 800bd1e:	bf04      	itt	eq
 800bd20:	782c      	ldrbeq	r4, [r5, #0]
 800bd22:	1c95      	addeq	r5, r2, #2
 800bd24:	e7cf      	b.n	800bcc6 <_strtol_l.constprop.0+0x3a>
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d1da      	bne.n	800bce0 <_strtol_l.constprop.0+0x54>
 800bd2a:	2c30      	cmp	r4, #48	@ 0x30
 800bd2c:	bf0c      	ite	eq
 800bd2e:	2308      	moveq	r3, #8
 800bd30:	230a      	movne	r3, #10
 800bd32:	e7d5      	b.n	800bce0 <_strtol_l.constprop.0+0x54>
 800bd34:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bd38:	2f19      	cmp	r7, #25
 800bd3a:	d801      	bhi.n	800bd40 <_strtol_l.constprop.0+0xb4>
 800bd3c:	3c37      	subs	r4, #55	@ 0x37
 800bd3e:	e7de      	b.n	800bcfe <_strtol_l.constprop.0+0x72>
 800bd40:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bd44:	2f19      	cmp	r7, #25
 800bd46:	d804      	bhi.n	800bd52 <_strtol_l.constprop.0+0xc6>
 800bd48:	3c57      	subs	r4, #87	@ 0x57
 800bd4a:	e7d8      	b.n	800bcfe <_strtol_l.constprop.0+0x72>
 800bd4c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd50:	e7e1      	b.n	800bd16 <_strtol_l.constprop.0+0x8a>
 800bd52:	1c53      	adds	r3, r2, #1
 800bd54:	d108      	bne.n	800bd68 <_strtol_l.constprop.0+0xdc>
 800bd56:	2322      	movs	r3, #34	@ 0x22
 800bd58:	f8ce 3000 	str.w	r3, [lr]
 800bd5c:	4660      	mov	r0, ip
 800bd5e:	f1b8 0f00 	cmp.w	r8, #0
 800bd62:	d0a0      	beq.n	800bca6 <_strtol_l.constprop.0+0x1a>
 800bd64:	1e69      	subs	r1, r5, #1
 800bd66:	e006      	b.n	800bd76 <_strtol_l.constprop.0+0xea>
 800bd68:	b106      	cbz	r6, 800bd6c <_strtol_l.constprop.0+0xe0>
 800bd6a:	4240      	negs	r0, r0
 800bd6c:	f1b8 0f00 	cmp.w	r8, #0
 800bd70:	d099      	beq.n	800bca6 <_strtol_l.constprop.0+0x1a>
 800bd72:	2a00      	cmp	r2, #0
 800bd74:	d1f6      	bne.n	800bd64 <_strtol_l.constprop.0+0xd8>
 800bd76:	f8c8 1000 	str.w	r1, [r8]
 800bd7a:	e794      	b.n	800bca6 <_strtol_l.constprop.0+0x1a>
 800bd7c:	0800d271 	.word	0x0800d271

0800bd80 <_strtol_r>:
 800bd80:	f7ff bf84 	b.w	800bc8c <_strtol_l.constprop.0>

0800bd84 <__ssputs_r>:
 800bd84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd88:	688e      	ldr	r6, [r1, #8]
 800bd8a:	461f      	mov	r7, r3
 800bd8c:	42be      	cmp	r6, r7
 800bd8e:	680b      	ldr	r3, [r1, #0]
 800bd90:	4682      	mov	sl, r0
 800bd92:	460c      	mov	r4, r1
 800bd94:	4690      	mov	r8, r2
 800bd96:	d82d      	bhi.n	800bdf4 <__ssputs_r+0x70>
 800bd98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bda0:	d026      	beq.n	800bdf0 <__ssputs_r+0x6c>
 800bda2:	6965      	ldr	r5, [r4, #20]
 800bda4:	6909      	ldr	r1, [r1, #16]
 800bda6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bdaa:	eba3 0901 	sub.w	r9, r3, r1
 800bdae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bdb2:	1c7b      	adds	r3, r7, #1
 800bdb4:	444b      	add	r3, r9
 800bdb6:	106d      	asrs	r5, r5, #1
 800bdb8:	429d      	cmp	r5, r3
 800bdba:	bf38      	it	cc
 800bdbc:	461d      	movcc	r5, r3
 800bdbe:	0553      	lsls	r3, r2, #21
 800bdc0:	d527      	bpl.n	800be12 <__ssputs_r+0x8e>
 800bdc2:	4629      	mov	r1, r5
 800bdc4:	f7fe fc1c 	bl	800a600 <_malloc_r>
 800bdc8:	4606      	mov	r6, r0
 800bdca:	b360      	cbz	r0, 800be26 <__ssputs_r+0xa2>
 800bdcc:	6921      	ldr	r1, [r4, #16]
 800bdce:	464a      	mov	r2, r9
 800bdd0:	f7fd fd41 	bl	8009856 <memcpy>
 800bdd4:	89a3      	ldrh	r3, [r4, #12]
 800bdd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bdda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdde:	81a3      	strh	r3, [r4, #12]
 800bde0:	6126      	str	r6, [r4, #16]
 800bde2:	6165      	str	r5, [r4, #20]
 800bde4:	444e      	add	r6, r9
 800bde6:	eba5 0509 	sub.w	r5, r5, r9
 800bdea:	6026      	str	r6, [r4, #0]
 800bdec:	60a5      	str	r5, [r4, #8]
 800bdee:	463e      	mov	r6, r7
 800bdf0:	42be      	cmp	r6, r7
 800bdf2:	d900      	bls.n	800bdf6 <__ssputs_r+0x72>
 800bdf4:	463e      	mov	r6, r7
 800bdf6:	6820      	ldr	r0, [r4, #0]
 800bdf8:	4632      	mov	r2, r6
 800bdfa:	4641      	mov	r1, r8
 800bdfc:	f000 f9c6 	bl	800c18c <memmove>
 800be00:	68a3      	ldr	r3, [r4, #8]
 800be02:	1b9b      	subs	r3, r3, r6
 800be04:	60a3      	str	r3, [r4, #8]
 800be06:	6823      	ldr	r3, [r4, #0]
 800be08:	4433      	add	r3, r6
 800be0a:	6023      	str	r3, [r4, #0]
 800be0c:	2000      	movs	r0, #0
 800be0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be12:	462a      	mov	r2, r5
 800be14:	f000 fd7d 	bl	800c912 <_realloc_r>
 800be18:	4606      	mov	r6, r0
 800be1a:	2800      	cmp	r0, #0
 800be1c:	d1e0      	bne.n	800bde0 <__ssputs_r+0x5c>
 800be1e:	6921      	ldr	r1, [r4, #16]
 800be20:	4650      	mov	r0, sl
 800be22:	f7fe fb79 	bl	800a518 <_free_r>
 800be26:	230c      	movs	r3, #12
 800be28:	f8ca 3000 	str.w	r3, [sl]
 800be2c:	89a3      	ldrh	r3, [r4, #12]
 800be2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be32:	81a3      	strh	r3, [r4, #12]
 800be34:	f04f 30ff 	mov.w	r0, #4294967295
 800be38:	e7e9      	b.n	800be0e <__ssputs_r+0x8a>
	...

0800be3c <_svfiprintf_r>:
 800be3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be40:	4698      	mov	r8, r3
 800be42:	898b      	ldrh	r3, [r1, #12]
 800be44:	061b      	lsls	r3, r3, #24
 800be46:	b09d      	sub	sp, #116	@ 0x74
 800be48:	4607      	mov	r7, r0
 800be4a:	460d      	mov	r5, r1
 800be4c:	4614      	mov	r4, r2
 800be4e:	d510      	bpl.n	800be72 <_svfiprintf_r+0x36>
 800be50:	690b      	ldr	r3, [r1, #16]
 800be52:	b973      	cbnz	r3, 800be72 <_svfiprintf_r+0x36>
 800be54:	2140      	movs	r1, #64	@ 0x40
 800be56:	f7fe fbd3 	bl	800a600 <_malloc_r>
 800be5a:	6028      	str	r0, [r5, #0]
 800be5c:	6128      	str	r0, [r5, #16]
 800be5e:	b930      	cbnz	r0, 800be6e <_svfiprintf_r+0x32>
 800be60:	230c      	movs	r3, #12
 800be62:	603b      	str	r3, [r7, #0]
 800be64:	f04f 30ff 	mov.w	r0, #4294967295
 800be68:	b01d      	add	sp, #116	@ 0x74
 800be6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be6e:	2340      	movs	r3, #64	@ 0x40
 800be70:	616b      	str	r3, [r5, #20]
 800be72:	2300      	movs	r3, #0
 800be74:	9309      	str	r3, [sp, #36]	@ 0x24
 800be76:	2320      	movs	r3, #32
 800be78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800be80:	2330      	movs	r3, #48	@ 0x30
 800be82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c020 <_svfiprintf_r+0x1e4>
 800be86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800be8a:	f04f 0901 	mov.w	r9, #1
 800be8e:	4623      	mov	r3, r4
 800be90:	469a      	mov	sl, r3
 800be92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be96:	b10a      	cbz	r2, 800be9c <_svfiprintf_r+0x60>
 800be98:	2a25      	cmp	r2, #37	@ 0x25
 800be9a:	d1f9      	bne.n	800be90 <_svfiprintf_r+0x54>
 800be9c:	ebba 0b04 	subs.w	fp, sl, r4
 800bea0:	d00b      	beq.n	800beba <_svfiprintf_r+0x7e>
 800bea2:	465b      	mov	r3, fp
 800bea4:	4622      	mov	r2, r4
 800bea6:	4629      	mov	r1, r5
 800bea8:	4638      	mov	r0, r7
 800beaa:	f7ff ff6b 	bl	800bd84 <__ssputs_r>
 800beae:	3001      	adds	r0, #1
 800beb0:	f000 80a7 	beq.w	800c002 <_svfiprintf_r+0x1c6>
 800beb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800beb6:	445a      	add	r2, fp
 800beb8:	9209      	str	r2, [sp, #36]	@ 0x24
 800beba:	f89a 3000 	ldrb.w	r3, [sl]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	f000 809f 	beq.w	800c002 <_svfiprintf_r+0x1c6>
 800bec4:	2300      	movs	r3, #0
 800bec6:	f04f 32ff 	mov.w	r2, #4294967295
 800beca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bece:	f10a 0a01 	add.w	sl, sl, #1
 800bed2:	9304      	str	r3, [sp, #16]
 800bed4:	9307      	str	r3, [sp, #28]
 800bed6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800beda:	931a      	str	r3, [sp, #104]	@ 0x68
 800bedc:	4654      	mov	r4, sl
 800bede:	2205      	movs	r2, #5
 800bee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bee4:	484e      	ldr	r0, [pc, #312]	@ (800c020 <_svfiprintf_r+0x1e4>)
 800bee6:	f7f4 f99b 	bl	8000220 <memchr>
 800beea:	9a04      	ldr	r2, [sp, #16]
 800beec:	b9d8      	cbnz	r0, 800bf26 <_svfiprintf_r+0xea>
 800beee:	06d0      	lsls	r0, r2, #27
 800bef0:	bf44      	itt	mi
 800bef2:	2320      	movmi	r3, #32
 800bef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bef8:	0711      	lsls	r1, r2, #28
 800befa:	bf44      	itt	mi
 800befc:	232b      	movmi	r3, #43	@ 0x2b
 800befe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf02:	f89a 3000 	ldrb.w	r3, [sl]
 800bf06:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf08:	d015      	beq.n	800bf36 <_svfiprintf_r+0xfa>
 800bf0a:	9a07      	ldr	r2, [sp, #28]
 800bf0c:	4654      	mov	r4, sl
 800bf0e:	2000      	movs	r0, #0
 800bf10:	f04f 0c0a 	mov.w	ip, #10
 800bf14:	4621      	mov	r1, r4
 800bf16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf1a:	3b30      	subs	r3, #48	@ 0x30
 800bf1c:	2b09      	cmp	r3, #9
 800bf1e:	d94b      	bls.n	800bfb8 <_svfiprintf_r+0x17c>
 800bf20:	b1b0      	cbz	r0, 800bf50 <_svfiprintf_r+0x114>
 800bf22:	9207      	str	r2, [sp, #28]
 800bf24:	e014      	b.n	800bf50 <_svfiprintf_r+0x114>
 800bf26:	eba0 0308 	sub.w	r3, r0, r8
 800bf2a:	fa09 f303 	lsl.w	r3, r9, r3
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	9304      	str	r3, [sp, #16]
 800bf32:	46a2      	mov	sl, r4
 800bf34:	e7d2      	b.n	800bedc <_svfiprintf_r+0xa0>
 800bf36:	9b03      	ldr	r3, [sp, #12]
 800bf38:	1d19      	adds	r1, r3, #4
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	9103      	str	r1, [sp, #12]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	bfbb      	ittet	lt
 800bf42:	425b      	neglt	r3, r3
 800bf44:	f042 0202 	orrlt.w	r2, r2, #2
 800bf48:	9307      	strge	r3, [sp, #28]
 800bf4a:	9307      	strlt	r3, [sp, #28]
 800bf4c:	bfb8      	it	lt
 800bf4e:	9204      	strlt	r2, [sp, #16]
 800bf50:	7823      	ldrb	r3, [r4, #0]
 800bf52:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf54:	d10a      	bne.n	800bf6c <_svfiprintf_r+0x130>
 800bf56:	7863      	ldrb	r3, [r4, #1]
 800bf58:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf5a:	d132      	bne.n	800bfc2 <_svfiprintf_r+0x186>
 800bf5c:	9b03      	ldr	r3, [sp, #12]
 800bf5e:	1d1a      	adds	r2, r3, #4
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	9203      	str	r2, [sp, #12]
 800bf64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf68:	3402      	adds	r4, #2
 800bf6a:	9305      	str	r3, [sp, #20]
 800bf6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c030 <_svfiprintf_r+0x1f4>
 800bf70:	7821      	ldrb	r1, [r4, #0]
 800bf72:	2203      	movs	r2, #3
 800bf74:	4650      	mov	r0, sl
 800bf76:	f7f4 f953 	bl	8000220 <memchr>
 800bf7a:	b138      	cbz	r0, 800bf8c <_svfiprintf_r+0x150>
 800bf7c:	9b04      	ldr	r3, [sp, #16]
 800bf7e:	eba0 000a 	sub.w	r0, r0, sl
 800bf82:	2240      	movs	r2, #64	@ 0x40
 800bf84:	4082      	lsls	r2, r0
 800bf86:	4313      	orrs	r3, r2
 800bf88:	3401      	adds	r4, #1
 800bf8a:	9304      	str	r3, [sp, #16]
 800bf8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf90:	4824      	ldr	r0, [pc, #144]	@ (800c024 <_svfiprintf_r+0x1e8>)
 800bf92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf96:	2206      	movs	r2, #6
 800bf98:	f7f4 f942 	bl	8000220 <memchr>
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	d036      	beq.n	800c00e <_svfiprintf_r+0x1d2>
 800bfa0:	4b21      	ldr	r3, [pc, #132]	@ (800c028 <_svfiprintf_r+0x1ec>)
 800bfa2:	bb1b      	cbnz	r3, 800bfec <_svfiprintf_r+0x1b0>
 800bfa4:	9b03      	ldr	r3, [sp, #12]
 800bfa6:	3307      	adds	r3, #7
 800bfa8:	f023 0307 	bic.w	r3, r3, #7
 800bfac:	3308      	adds	r3, #8
 800bfae:	9303      	str	r3, [sp, #12]
 800bfb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfb2:	4433      	add	r3, r6
 800bfb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfb6:	e76a      	b.n	800be8e <_svfiprintf_r+0x52>
 800bfb8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfbc:	460c      	mov	r4, r1
 800bfbe:	2001      	movs	r0, #1
 800bfc0:	e7a8      	b.n	800bf14 <_svfiprintf_r+0xd8>
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	3401      	adds	r4, #1
 800bfc6:	9305      	str	r3, [sp, #20]
 800bfc8:	4619      	mov	r1, r3
 800bfca:	f04f 0c0a 	mov.w	ip, #10
 800bfce:	4620      	mov	r0, r4
 800bfd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfd4:	3a30      	subs	r2, #48	@ 0x30
 800bfd6:	2a09      	cmp	r2, #9
 800bfd8:	d903      	bls.n	800bfe2 <_svfiprintf_r+0x1a6>
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d0c6      	beq.n	800bf6c <_svfiprintf_r+0x130>
 800bfde:	9105      	str	r1, [sp, #20]
 800bfe0:	e7c4      	b.n	800bf6c <_svfiprintf_r+0x130>
 800bfe2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfe6:	4604      	mov	r4, r0
 800bfe8:	2301      	movs	r3, #1
 800bfea:	e7f0      	b.n	800bfce <_svfiprintf_r+0x192>
 800bfec:	ab03      	add	r3, sp, #12
 800bfee:	9300      	str	r3, [sp, #0]
 800bff0:	462a      	mov	r2, r5
 800bff2:	4b0e      	ldr	r3, [pc, #56]	@ (800c02c <_svfiprintf_r+0x1f0>)
 800bff4:	a904      	add	r1, sp, #16
 800bff6:	4638      	mov	r0, r7
 800bff8:	f7fc fcbc 	bl	8008974 <_printf_float>
 800bffc:	1c42      	adds	r2, r0, #1
 800bffe:	4606      	mov	r6, r0
 800c000:	d1d6      	bne.n	800bfb0 <_svfiprintf_r+0x174>
 800c002:	89ab      	ldrh	r3, [r5, #12]
 800c004:	065b      	lsls	r3, r3, #25
 800c006:	f53f af2d 	bmi.w	800be64 <_svfiprintf_r+0x28>
 800c00a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c00c:	e72c      	b.n	800be68 <_svfiprintf_r+0x2c>
 800c00e:	ab03      	add	r3, sp, #12
 800c010:	9300      	str	r3, [sp, #0]
 800c012:	462a      	mov	r2, r5
 800c014:	4b05      	ldr	r3, [pc, #20]	@ (800c02c <_svfiprintf_r+0x1f0>)
 800c016:	a904      	add	r1, sp, #16
 800c018:	4638      	mov	r0, r7
 800c01a:	f7fc ff43 	bl	8008ea4 <_printf_i>
 800c01e:	e7ed      	b.n	800bffc <_svfiprintf_r+0x1c0>
 800c020:	0800d371 	.word	0x0800d371
 800c024:	0800d37b 	.word	0x0800d37b
 800c028:	08008975 	.word	0x08008975
 800c02c:	0800bd85 	.word	0x0800bd85
 800c030:	0800d377 	.word	0x0800d377

0800c034 <__sflush_r>:
 800c034:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c03c:	0716      	lsls	r6, r2, #28
 800c03e:	4605      	mov	r5, r0
 800c040:	460c      	mov	r4, r1
 800c042:	d454      	bmi.n	800c0ee <__sflush_r+0xba>
 800c044:	684b      	ldr	r3, [r1, #4]
 800c046:	2b00      	cmp	r3, #0
 800c048:	dc02      	bgt.n	800c050 <__sflush_r+0x1c>
 800c04a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	dd48      	ble.n	800c0e2 <__sflush_r+0xae>
 800c050:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c052:	2e00      	cmp	r6, #0
 800c054:	d045      	beq.n	800c0e2 <__sflush_r+0xae>
 800c056:	2300      	movs	r3, #0
 800c058:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c05c:	682f      	ldr	r7, [r5, #0]
 800c05e:	6a21      	ldr	r1, [r4, #32]
 800c060:	602b      	str	r3, [r5, #0]
 800c062:	d030      	beq.n	800c0c6 <__sflush_r+0x92>
 800c064:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c066:	89a3      	ldrh	r3, [r4, #12]
 800c068:	0759      	lsls	r1, r3, #29
 800c06a:	d505      	bpl.n	800c078 <__sflush_r+0x44>
 800c06c:	6863      	ldr	r3, [r4, #4]
 800c06e:	1ad2      	subs	r2, r2, r3
 800c070:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c072:	b10b      	cbz	r3, 800c078 <__sflush_r+0x44>
 800c074:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c076:	1ad2      	subs	r2, r2, r3
 800c078:	2300      	movs	r3, #0
 800c07a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c07c:	6a21      	ldr	r1, [r4, #32]
 800c07e:	4628      	mov	r0, r5
 800c080:	47b0      	blx	r6
 800c082:	1c43      	adds	r3, r0, #1
 800c084:	89a3      	ldrh	r3, [r4, #12]
 800c086:	d106      	bne.n	800c096 <__sflush_r+0x62>
 800c088:	6829      	ldr	r1, [r5, #0]
 800c08a:	291d      	cmp	r1, #29
 800c08c:	d82b      	bhi.n	800c0e6 <__sflush_r+0xb2>
 800c08e:	4a2a      	ldr	r2, [pc, #168]	@ (800c138 <__sflush_r+0x104>)
 800c090:	410a      	asrs	r2, r1
 800c092:	07d6      	lsls	r6, r2, #31
 800c094:	d427      	bmi.n	800c0e6 <__sflush_r+0xb2>
 800c096:	2200      	movs	r2, #0
 800c098:	6062      	str	r2, [r4, #4]
 800c09a:	04d9      	lsls	r1, r3, #19
 800c09c:	6922      	ldr	r2, [r4, #16]
 800c09e:	6022      	str	r2, [r4, #0]
 800c0a0:	d504      	bpl.n	800c0ac <__sflush_r+0x78>
 800c0a2:	1c42      	adds	r2, r0, #1
 800c0a4:	d101      	bne.n	800c0aa <__sflush_r+0x76>
 800c0a6:	682b      	ldr	r3, [r5, #0]
 800c0a8:	b903      	cbnz	r3, 800c0ac <__sflush_r+0x78>
 800c0aa:	6560      	str	r0, [r4, #84]	@ 0x54
 800c0ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0ae:	602f      	str	r7, [r5, #0]
 800c0b0:	b1b9      	cbz	r1, 800c0e2 <__sflush_r+0xae>
 800c0b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0b6:	4299      	cmp	r1, r3
 800c0b8:	d002      	beq.n	800c0c0 <__sflush_r+0x8c>
 800c0ba:	4628      	mov	r0, r5
 800c0bc:	f7fe fa2c 	bl	800a518 <_free_r>
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0c4:	e00d      	b.n	800c0e2 <__sflush_r+0xae>
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	4628      	mov	r0, r5
 800c0ca:	47b0      	blx	r6
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	1c50      	adds	r0, r2, #1
 800c0d0:	d1c9      	bne.n	800c066 <__sflush_r+0x32>
 800c0d2:	682b      	ldr	r3, [r5, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d0c6      	beq.n	800c066 <__sflush_r+0x32>
 800c0d8:	2b1d      	cmp	r3, #29
 800c0da:	d001      	beq.n	800c0e0 <__sflush_r+0xac>
 800c0dc:	2b16      	cmp	r3, #22
 800c0de:	d11e      	bne.n	800c11e <__sflush_r+0xea>
 800c0e0:	602f      	str	r7, [r5, #0]
 800c0e2:	2000      	movs	r0, #0
 800c0e4:	e022      	b.n	800c12c <__sflush_r+0xf8>
 800c0e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0ea:	b21b      	sxth	r3, r3
 800c0ec:	e01b      	b.n	800c126 <__sflush_r+0xf2>
 800c0ee:	690f      	ldr	r7, [r1, #16]
 800c0f0:	2f00      	cmp	r7, #0
 800c0f2:	d0f6      	beq.n	800c0e2 <__sflush_r+0xae>
 800c0f4:	0793      	lsls	r3, r2, #30
 800c0f6:	680e      	ldr	r6, [r1, #0]
 800c0f8:	bf08      	it	eq
 800c0fa:	694b      	ldreq	r3, [r1, #20]
 800c0fc:	600f      	str	r7, [r1, #0]
 800c0fe:	bf18      	it	ne
 800c100:	2300      	movne	r3, #0
 800c102:	eba6 0807 	sub.w	r8, r6, r7
 800c106:	608b      	str	r3, [r1, #8]
 800c108:	f1b8 0f00 	cmp.w	r8, #0
 800c10c:	dde9      	ble.n	800c0e2 <__sflush_r+0xae>
 800c10e:	6a21      	ldr	r1, [r4, #32]
 800c110:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c112:	4643      	mov	r3, r8
 800c114:	463a      	mov	r2, r7
 800c116:	4628      	mov	r0, r5
 800c118:	47b0      	blx	r6
 800c11a:	2800      	cmp	r0, #0
 800c11c:	dc08      	bgt.n	800c130 <__sflush_r+0xfc>
 800c11e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c126:	81a3      	strh	r3, [r4, #12]
 800c128:	f04f 30ff 	mov.w	r0, #4294967295
 800c12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c130:	4407      	add	r7, r0
 800c132:	eba8 0800 	sub.w	r8, r8, r0
 800c136:	e7e7      	b.n	800c108 <__sflush_r+0xd4>
 800c138:	dfbffffe 	.word	0xdfbffffe

0800c13c <_fflush_r>:
 800c13c:	b538      	push	{r3, r4, r5, lr}
 800c13e:	690b      	ldr	r3, [r1, #16]
 800c140:	4605      	mov	r5, r0
 800c142:	460c      	mov	r4, r1
 800c144:	b913      	cbnz	r3, 800c14c <_fflush_r+0x10>
 800c146:	2500      	movs	r5, #0
 800c148:	4628      	mov	r0, r5
 800c14a:	bd38      	pop	{r3, r4, r5, pc}
 800c14c:	b118      	cbz	r0, 800c156 <_fflush_r+0x1a>
 800c14e:	6a03      	ldr	r3, [r0, #32]
 800c150:	b90b      	cbnz	r3, 800c156 <_fflush_r+0x1a>
 800c152:	f7fd fa67 	bl	8009624 <__sinit>
 800c156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d0f3      	beq.n	800c146 <_fflush_r+0xa>
 800c15e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c160:	07d0      	lsls	r0, r2, #31
 800c162:	d404      	bmi.n	800c16e <_fflush_r+0x32>
 800c164:	0599      	lsls	r1, r3, #22
 800c166:	d402      	bmi.n	800c16e <_fflush_r+0x32>
 800c168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c16a:	f7fd fb72 	bl	8009852 <__retarget_lock_acquire_recursive>
 800c16e:	4628      	mov	r0, r5
 800c170:	4621      	mov	r1, r4
 800c172:	f7ff ff5f 	bl	800c034 <__sflush_r>
 800c176:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c178:	07da      	lsls	r2, r3, #31
 800c17a:	4605      	mov	r5, r0
 800c17c:	d4e4      	bmi.n	800c148 <_fflush_r+0xc>
 800c17e:	89a3      	ldrh	r3, [r4, #12]
 800c180:	059b      	lsls	r3, r3, #22
 800c182:	d4e1      	bmi.n	800c148 <_fflush_r+0xc>
 800c184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c186:	f7fd fb65 	bl	8009854 <__retarget_lock_release_recursive>
 800c18a:	e7dd      	b.n	800c148 <_fflush_r+0xc>

0800c18c <memmove>:
 800c18c:	4288      	cmp	r0, r1
 800c18e:	b510      	push	{r4, lr}
 800c190:	eb01 0402 	add.w	r4, r1, r2
 800c194:	d902      	bls.n	800c19c <memmove+0x10>
 800c196:	4284      	cmp	r4, r0
 800c198:	4623      	mov	r3, r4
 800c19a:	d807      	bhi.n	800c1ac <memmove+0x20>
 800c19c:	1e43      	subs	r3, r0, #1
 800c19e:	42a1      	cmp	r1, r4
 800c1a0:	d008      	beq.n	800c1b4 <memmove+0x28>
 800c1a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c1aa:	e7f8      	b.n	800c19e <memmove+0x12>
 800c1ac:	4402      	add	r2, r0
 800c1ae:	4601      	mov	r1, r0
 800c1b0:	428a      	cmp	r2, r1
 800c1b2:	d100      	bne.n	800c1b6 <memmove+0x2a>
 800c1b4:	bd10      	pop	{r4, pc}
 800c1b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c1be:	e7f7      	b.n	800c1b0 <memmove+0x24>

0800c1c0 <strncmp>:
 800c1c0:	b510      	push	{r4, lr}
 800c1c2:	b16a      	cbz	r2, 800c1e0 <strncmp+0x20>
 800c1c4:	3901      	subs	r1, #1
 800c1c6:	1884      	adds	r4, r0, r2
 800c1c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d103      	bne.n	800c1dc <strncmp+0x1c>
 800c1d4:	42a0      	cmp	r0, r4
 800c1d6:	d001      	beq.n	800c1dc <strncmp+0x1c>
 800c1d8:	2a00      	cmp	r2, #0
 800c1da:	d1f5      	bne.n	800c1c8 <strncmp+0x8>
 800c1dc:	1ad0      	subs	r0, r2, r3
 800c1de:	bd10      	pop	{r4, pc}
 800c1e0:	4610      	mov	r0, r2
 800c1e2:	e7fc      	b.n	800c1de <strncmp+0x1e>

0800c1e4 <_sbrk_r>:
 800c1e4:	b538      	push	{r3, r4, r5, lr}
 800c1e6:	4d06      	ldr	r5, [pc, #24]	@ (800c200 <_sbrk_r+0x1c>)
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	4604      	mov	r4, r0
 800c1ec:	4608      	mov	r0, r1
 800c1ee:	602b      	str	r3, [r5, #0]
 800c1f0:	f7f5 fbda 	bl	80019a8 <_sbrk>
 800c1f4:	1c43      	adds	r3, r0, #1
 800c1f6:	d102      	bne.n	800c1fe <_sbrk_r+0x1a>
 800c1f8:	682b      	ldr	r3, [r5, #0]
 800c1fa:	b103      	cbz	r3, 800c1fe <_sbrk_r+0x1a>
 800c1fc:	6023      	str	r3, [r4, #0]
 800c1fe:	bd38      	pop	{r3, r4, r5, pc}
 800c200:	200013b8 	.word	0x200013b8
 800c204:	00000000 	.word	0x00000000

0800c208 <nan>:
 800c208:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c210 <nan+0x8>
 800c20c:	4770      	bx	lr
 800c20e:	bf00      	nop
 800c210:	00000000 	.word	0x00000000
 800c214:	7ff80000 	.word	0x7ff80000

0800c218 <__assert_func>:
 800c218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c21a:	4614      	mov	r4, r2
 800c21c:	461a      	mov	r2, r3
 800c21e:	4b09      	ldr	r3, [pc, #36]	@ (800c244 <__assert_func+0x2c>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	4605      	mov	r5, r0
 800c224:	68d8      	ldr	r0, [r3, #12]
 800c226:	b954      	cbnz	r4, 800c23e <__assert_func+0x26>
 800c228:	4b07      	ldr	r3, [pc, #28]	@ (800c248 <__assert_func+0x30>)
 800c22a:	461c      	mov	r4, r3
 800c22c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c230:	9100      	str	r1, [sp, #0]
 800c232:	462b      	mov	r3, r5
 800c234:	4905      	ldr	r1, [pc, #20]	@ (800c24c <__assert_func+0x34>)
 800c236:	f000 fba7 	bl	800c988 <fiprintf>
 800c23a:	f000 fbb7 	bl	800c9ac <abort>
 800c23e:	4b04      	ldr	r3, [pc, #16]	@ (800c250 <__assert_func+0x38>)
 800c240:	e7f4      	b.n	800c22c <__assert_func+0x14>
 800c242:	bf00      	nop
 800c244:	2000001c 	.word	0x2000001c
 800c248:	0800d3c5 	.word	0x0800d3c5
 800c24c:	0800d397 	.word	0x0800d397
 800c250:	0800d38a 	.word	0x0800d38a

0800c254 <_calloc_r>:
 800c254:	b570      	push	{r4, r5, r6, lr}
 800c256:	fba1 5402 	umull	r5, r4, r1, r2
 800c25a:	b93c      	cbnz	r4, 800c26c <_calloc_r+0x18>
 800c25c:	4629      	mov	r1, r5
 800c25e:	f7fe f9cf 	bl	800a600 <_malloc_r>
 800c262:	4606      	mov	r6, r0
 800c264:	b928      	cbnz	r0, 800c272 <_calloc_r+0x1e>
 800c266:	2600      	movs	r6, #0
 800c268:	4630      	mov	r0, r6
 800c26a:	bd70      	pop	{r4, r5, r6, pc}
 800c26c:	220c      	movs	r2, #12
 800c26e:	6002      	str	r2, [r0, #0]
 800c270:	e7f9      	b.n	800c266 <_calloc_r+0x12>
 800c272:	462a      	mov	r2, r5
 800c274:	4621      	mov	r1, r4
 800c276:	f7fd fa6e 	bl	8009756 <memset>
 800c27a:	e7f5      	b.n	800c268 <_calloc_r+0x14>

0800c27c <rshift>:
 800c27c:	6903      	ldr	r3, [r0, #16]
 800c27e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c282:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c286:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c28a:	f100 0414 	add.w	r4, r0, #20
 800c28e:	dd45      	ble.n	800c31c <rshift+0xa0>
 800c290:	f011 011f 	ands.w	r1, r1, #31
 800c294:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c298:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c29c:	d10c      	bne.n	800c2b8 <rshift+0x3c>
 800c29e:	f100 0710 	add.w	r7, r0, #16
 800c2a2:	4629      	mov	r1, r5
 800c2a4:	42b1      	cmp	r1, r6
 800c2a6:	d334      	bcc.n	800c312 <rshift+0x96>
 800c2a8:	1a9b      	subs	r3, r3, r2
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	1eea      	subs	r2, r5, #3
 800c2ae:	4296      	cmp	r6, r2
 800c2b0:	bf38      	it	cc
 800c2b2:	2300      	movcc	r3, #0
 800c2b4:	4423      	add	r3, r4
 800c2b6:	e015      	b.n	800c2e4 <rshift+0x68>
 800c2b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c2bc:	f1c1 0820 	rsb	r8, r1, #32
 800c2c0:	40cf      	lsrs	r7, r1
 800c2c2:	f105 0e04 	add.w	lr, r5, #4
 800c2c6:	46a1      	mov	r9, r4
 800c2c8:	4576      	cmp	r6, lr
 800c2ca:	46f4      	mov	ip, lr
 800c2cc:	d815      	bhi.n	800c2fa <rshift+0x7e>
 800c2ce:	1a9a      	subs	r2, r3, r2
 800c2d0:	0092      	lsls	r2, r2, #2
 800c2d2:	3a04      	subs	r2, #4
 800c2d4:	3501      	adds	r5, #1
 800c2d6:	42ae      	cmp	r6, r5
 800c2d8:	bf38      	it	cc
 800c2da:	2200      	movcc	r2, #0
 800c2dc:	18a3      	adds	r3, r4, r2
 800c2de:	50a7      	str	r7, [r4, r2]
 800c2e0:	b107      	cbz	r7, 800c2e4 <rshift+0x68>
 800c2e2:	3304      	adds	r3, #4
 800c2e4:	1b1a      	subs	r2, r3, r4
 800c2e6:	42a3      	cmp	r3, r4
 800c2e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c2ec:	bf08      	it	eq
 800c2ee:	2300      	moveq	r3, #0
 800c2f0:	6102      	str	r2, [r0, #16]
 800c2f2:	bf08      	it	eq
 800c2f4:	6143      	streq	r3, [r0, #20]
 800c2f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2fa:	f8dc c000 	ldr.w	ip, [ip]
 800c2fe:	fa0c fc08 	lsl.w	ip, ip, r8
 800c302:	ea4c 0707 	orr.w	r7, ip, r7
 800c306:	f849 7b04 	str.w	r7, [r9], #4
 800c30a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c30e:	40cf      	lsrs	r7, r1
 800c310:	e7da      	b.n	800c2c8 <rshift+0x4c>
 800c312:	f851 cb04 	ldr.w	ip, [r1], #4
 800c316:	f847 cf04 	str.w	ip, [r7, #4]!
 800c31a:	e7c3      	b.n	800c2a4 <rshift+0x28>
 800c31c:	4623      	mov	r3, r4
 800c31e:	e7e1      	b.n	800c2e4 <rshift+0x68>

0800c320 <__hexdig_fun>:
 800c320:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c324:	2b09      	cmp	r3, #9
 800c326:	d802      	bhi.n	800c32e <__hexdig_fun+0xe>
 800c328:	3820      	subs	r0, #32
 800c32a:	b2c0      	uxtb	r0, r0
 800c32c:	4770      	bx	lr
 800c32e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c332:	2b05      	cmp	r3, #5
 800c334:	d801      	bhi.n	800c33a <__hexdig_fun+0x1a>
 800c336:	3847      	subs	r0, #71	@ 0x47
 800c338:	e7f7      	b.n	800c32a <__hexdig_fun+0xa>
 800c33a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c33e:	2b05      	cmp	r3, #5
 800c340:	d801      	bhi.n	800c346 <__hexdig_fun+0x26>
 800c342:	3827      	subs	r0, #39	@ 0x27
 800c344:	e7f1      	b.n	800c32a <__hexdig_fun+0xa>
 800c346:	2000      	movs	r0, #0
 800c348:	4770      	bx	lr
	...

0800c34c <__gethex>:
 800c34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c350:	b085      	sub	sp, #20
 800c352:	468a      	mov	sl, r1
 800c354:	9302      	str	r3, [sp, #8]
 800c356:	680b      	ldr	r3, [r1, #0]
 800c358:	9001      	str	r0, [sp, #4]
 800c35a:	4690      	mov	r8, r2
 800c35c:	1c9c      	adds	r4, r3, #2
 800c35e:	46a1      	mov	r9, r4
 800c360:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c364:	2830      	cmp	r0, #48	@ 0x30
 800c366:	d0fa      	beq.n	800c35e <__gethex+0x12>
 800c368:	eba9 0303 	sub.w	r3, r9, r3
 800c36c:	f1a3 0b02 	sub.w	fp, r3, #2
 800c370:	f7ff ffd6 	bl	800c320 <__hexdig_fun>
 800c374:	4605      	mov	r5, r0
 800c376:	2800      	cmp	r0, #0
 800c378:	d168      	bne.n	800c44c <__gethex+0x100>
 800c37a:	49a0      	ldr	r1, [pc, #640]	@ (800c5fc <__gethex+0x2b0>)
 800c37c:	2201      	movs	r2, #1
 800c37e:	4648      	mov	r0, r9
 800c380:	f7ff ff1e 	bl	800c1c0 <strncmp>
 800c384:	4607      	mov	r7, r0
 800c386:	2800      	cmp	r0, #0
 800c388:	d167      	bne.n	800c45a <__gethex+0x10e>
 800c38a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c38e:	4626      	mov	r6, r4
 800c390:	f7ff ffc6 	bl	800c320 <__hexdig_fun>
 800c394:	2800      	cmp	r0, #0
 800c396:	d062      	beq.n	800c45e <__gethex+0x112>
 800c398:	4623      	mov	r3, r4
 800c39a:	7818      	ldrb	r0, [r3, #0]
 800c39c:	2830      	cmp	r0, #48	@ 0x30
 800c39e:	4699      	mov	r9, r3
 800c3a0:	f103 0301 	add.w	r3, r3, #1
 800c3a4:	d0f9      	beq.n	800c39a <__gethex+0x4e>
 800c3a6:	f7ff ffbb 	bl	800c320 <__hexdig_fun>
 800c3aa:	fab0 f580 	clz	r5, r0
 800c3ae:	096d      	lsrs	r5, r5, #5
 800c3b0:	f04f 0b01 	mov.w	fp, #1
 800c3b4:	464a      	mov	r2, r9
 800c3b6:	4616      	mov	r6, r2
 800c3b8:	3201      	adds	r2, #1
 800c3ba:	7830      	ldrb	r0, [r6, #0]
 800c3bc:	f7ff ffb0 	bl	800c320 <__hexdig_fun>
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	d1f8      	bne.n	800c3b6 <__gethex+0x6a>
 800c3c4:	498d      	ldr	r1, [pc, #564]	@ (800c5fc <__gethex+0x2b0>)
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	f7ff fef9 	bl	800c1c0 <strncmp>
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	d13f      	bne.n	800c452 <__gethex+0x106>
 800c3d2:	b944      	cbnz	r4, 800c3e6 <__gethex+0x9a>
 800c3d4:	1c74      	adds	r4, r6, #1
 800c3d6:	4622      	mov	r2, r4
 800c3d8:	4616      	mov	r6, r2
 800c3da:	3201      	adds	r2, #1
 800c3dc:	7830      	ldrb	r0, [r6, #0]
 800c3de:	f7ff ff9f 	bl	800c320 <__hexdig_fun>
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	d1f8      	bne.n	800c3d8 <__gethex+0x8c>
 800c3e6:	1ba4      	subs	r4, r4, r6
 800c3e8:	00a7      	lsls	r7, r4, #2
 800c3ea:	7833      	ldrb	r3, [r6, #0]
 800c3ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c3f0:	2b50      	cmp	r3, #80	@ 0x50
 800c3f2:	d13e      	bne.n	800c472 <__gethex+0x126>
 800c3f4:	7873      	ldrb	r3, [r6, #1]
 800c3f6:	2b2b      	cmp	r3, #43	@ 0x2b
 800c3f8:	d033      	beq.n	800c462 <__gethex+0x116>
 800c3fa:	2b2d      	cmp	r3, #45	@ 0x2d
 800c3fc:	d034      	beq.n	800c468 <__gethex+0x11c>
 800c3fe:	1c71      	adds	r1, r6, #1
 800c400:	2400      	movs	r4, #0
 800c402:	7808      	ldrb	r0, [r1, #0]
 800c404:	f7ff ff8c 	bl	800c320 <__hexdig_fun>
 800c408:	1e43      	subs	r3, r0, #1
 800c40a:	b2db      	uxtb	r3, r3
 800c40c:	2b18      	cmp	r3, #24
 800c40e:	d830      	bhi.n	800c472 <__gethex+0x126>
 800c410:	f1a0 0210 	sub.w	r2, r0, #16
 800c414:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c418:	f7ff ff82 	bl	800c320 <__hexdig_fun>
 800c41c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c420:	fa5f fc8c 	uxtb.w	ip, ip
 800c424:	f1bc 0f18 	cmp.w	ip, #24
 800c428:	f04f 030a 	mov.w	r3, #10
 800c42c:	d91e      	bls.n	800c46c <__gethex+0x120>
 800c42e:	b104      	cbz	r4, 800c432 <__gethex+0xe6>
 800c430:	4252      	negs	r2, r2
 800c432:	4417      	add	r7, r2
 800c434:	f8ca 1000 	str.w	r1, [sl]
 800c438:	b1ed      	cbz	r5, 800c476 <__gethex+0x12a>
 800c43a:	f1bb 0f00 	cmp.w	fp, #0
 800c43e:	bf0c      	ite	eq
 800c440:	2506      	moveq	r5, #6
 800c442:	2500      	movne	r5, #0
 800c444:	4628      	mov	r0, r5
 800c446:	b005      	add	sp, #20
 800c448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c44c:	2500      	movs	r5, #0
 800c44e:	462c      	mov	r4, r5
 800c450:	e7b0      	b.n	800c3b4 <__gethex+0x68>
 800c452:	2c00      	cmp	r4, #0
 800c454:	d1c7      	bne.n	800c3e6 <__gethex+0x9a>
 800c456:	4627      	mov	r7, r4
 800c458:	e7c7      	b.n	800c3ea <__gethex+0x9e>
 800c45a:	464e      	mov	r6, r9
 800c45c:	462f      	mov	r7, r5
 800c45e:	2501      	movs	r5, #1
 800c460:	e7c3      	b.n	800c3ea <__gethex+0x9e>
 800c462:	2400      	movs	r4, #0
 800c464:	1cb1      	adds	r1, r6, #2
 800c466:	e7cc      	b.n	800c402 <__gethex+0xb6>
 800c468:	2401      	movs	r4, #1
 800c46a:	e7fb      	b.n	800c464 <__gethex+0x118>
 800c46c:	fb03 0002 	mla	r0, r3, r2, r0
 800c470:	e7ce      	b.n	800c410 <__gethex+0xc4>
 800c472:	4631      	mov	r1, r6
 800c474:	e7de      	b.n	800c434 <__gethex+0xe8>
 800c476:	eba6 0309 	sub.w	r3, r6, r9
 800c47a:	3b01      	subs	r3, #1
 800c47c:	4629      	mov	r1, r5
 800c47e:	2b07      	cmp	r3, #7
 800c480:	dc0a      	bgt.n	800c498 <__gethex+0x14c>
 800c482:	9801      	ldr	r0, [sp, #4]
 800c484:	f7fe f948 	bl	800a718 <_Balloc>
 800c488:	4604      	mov	r4, r0
 800c48a:	b940      	cbnz	r0, 800c49e <__gethex+0x152>
 800c48c:	4b5c      	ldr	r3, [pc, #368]	@ (800c600 <__gethex+0x2b4>)
 800c48e:	4602      	mov	r2, r0
 800c490:	21e4      	movs	r1, #228	@ 0xe4
 800c492:	485c      	ldr	r0, [pc, #368]	@ (800c604 <__gethex+0x2b8>)
 800c494:	f7ff fec0 	bl	800c218 <__assert_func>
 800c498:	3101      	adds	r1, #1
 800c49a:	105b      	asrs	r3, r3, #1
 800c49c:	e7ef      	b.n	800c47e <__gethex+0x132>
 800c49e:	f100 0a14 	add.w	sl, r0, #20
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	4655      	mov	r5, sl
 800c4a6:	469b      	mov	fp, r3
 800c4a8:	45b1      	cmp	r9, r6
 800c4aa:	d337      	bcc.n	800c51c <__gethex+0x1d0>
 800c4ac:	f845 bb04 	str.w	fp, [r5], #4
 800c4b0:	eba5 050a 	sub.w	r5, r5, sl
 800c4b4:	10ad      	asrs	r5, r5, #2
 800c4b6:	6125      	str	r5, [r4, #16]
 800c4b8:	4658      	mov	r0, fp
 800c4ba:	f7fe fa1f 	bl	800a8fc <__hi0bits>
 800c4be:	016d      	lsls	r5, r5, #5
 800c4c0:	f8d8 6000 	ldr.w	r6, [r8]
 800c4c4:	1a2d      	subs	r5, r5, r0
 800c4c6:	42b5      	cmp	r5, r6
 800c4c8:	dd54      	ble.n	800c574 <__gethex+0x228>
 800c4ca:	1bad      	subs	r5, r5, r6
 800c4cc:	4629      	mov	r1, r5
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	f7fe fdb3 	bl	800b03a <__any_on>
 800c4d4:	4681      	mov	r9, r0
 800c4d6:	b178      	cbz	r0, 800c4f8 <__gethex+0x1ac>
 800c4d8:	1e6b      	subs	r3, r5, #1
 800c4da:	1159      	asrs	r1, r3, #5
 800c4dc:	f003 021f 	and.w	r2, r3, #31
 800c4e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c4e4:	f04f 0901 	mov.w	r9, #1
 800c4e8:	fa09 f202 	lsl.w	r2, r9, r2
 800c4ec:	420a      	tst	r2, r1
 800c4ee:	d003      	beq.n	800c4f8 <__gethex+0x1ac>
 800c4f0:	454b      	cmp	r3, r9
 800c4f2:	dc36      	bgt.n	800c562 <__gethex+0x216>
 800c4f4:	f04f 0902 	mov.w	r9, #2
 800c4f8:	4629      	mov	r1, r5
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	f7ff febe 	bl	800c27c <rshift>
 800c500:	442f      	add	r7, r5
 800c502:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c506:	42bb      	cmp	r3, r7
 800c508:	da42      	bge.n	800c590 <__gethex+0x244>
 800c50a:	9801      	ldr	r0, [sp, #4]
 800c50c:	4621      	mov	r1, r4
 800c50e:	f7fe f943 	bl	800a798 <_Bfree>
 800c512:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c514:	2300      	movs	r3, #0
 800c516:	6013      	str	r3, [r2, #0]
 800c518:	25a3      	movs	r5, #163	@ 0xa3
 800c51a:	e793      	b.n	800c444 <__gethex+0xf8>
 800c51c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c520:	2a2e      	cmp	r2, #46	@ 0x2e
 800c522:	d012      	beq.n	800c54a <__gethex+0x1fe>
 800c524:	2b20      	cmp	r3, #32
 800c526:	d104      	bne.n	800c532 <__gethex+0x1e6>
 800c528:	f845 bb04 	str.w	fp, [r5], #4
 800c52c:	f04f 0b00 	mov.w	fp, #0
 800c530:	465b      	mov	r3, fp
 800c532:	7830      	ldrb	r0, [r6, #0]
 800c534:	9303      	str	r3, [sp, #12]
 800c536:	f7ff fef3 	bl	800c320 <__hexdig_fun>
 800c53a:	9b03      	ldr	r3, [sp, #12]
 800c53c:	f000 000f 	and.w	r0, r0, #15
 800c540:	4098      	lsls	r0, r3
 800c542:	ea4b 0b00 	orr.w	fp, fp, r0
 800c546:	3304      	adds	r3, #4
 800c548:	e7ae      	b.n	800c4a8 <__gethex+0x15c>
 800c54a:	45b1      	cmp	r9, r6
 800c54c:	d8ea      	bhi.n	800c524 <__gethex+0x1d8>
 800c54e:	492b      	ldr	r1, [pc, #172]	@ (800c5fc <__gethex+0x2b0>)
 800c550:	9303      	str	r3, [sp, #12]
 800c552:	2201      	movs	r2, #1
 800c554:	4630      	mov	r0, r6
 800c556:	f7ff fe33 	bl	800c1c0 <strncmp>
 800c55a:	9b03      	ldr	r3, [sp, #12]
 800c55c:	2800      	cmp	r0, #0
 800c55e:	d1e1      	bne.n	800c524 <__gethex+0x1d8>
 800c560:	e7a2      	b.n	800c4a8 <__gethex+0x15c>
 800c562:	1ea9      	subs	r1, r5, #2
 800c564:	4620      	mov	r0, r4
 800c566:	f7fe fd68 	bl	800b03a <__any_on>
 800c56a:	2800      	cmp	r0, #0
 800c56c:	d0c2      	beq.n	800c4f4 <__gethex+0x1a8>
 800c56e:	f04f 0903 	mov.w	r9, #3
 800c572:	e7c1      	b.n	800c4f8 <__gethex+0x1ac>
 800c574:	da09      	bge.n	800c58a <__gethex+0x23e>
 800c576:	1b75      	subs	r5, r6, r5
 800c578:	4621      	mov	r1, r4
 800c57a:	9801      	ldr	r0, [sp, #4]
 800c57c:	462a      	mov	r2, r5
 800c57e:	f7fe fb23 	bl	800abc8 <__lshift>
 800c582:	1b7f      	subs	r7, r7, r5
 800c584:	4604      	mov	r4, r0
 800c586:	f100 0a14 	add.w	sl, r0, #20
 800c58a:	f04f 0900 	mov.w	r9, #0
 800c58e:	e7b8      	b.n	800c502 <__gethex+0x1b6>
 800c590:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c594:	42bd      	cmp	r5, r7
 800c596:	dd6f      	ble.n	800c678 <__gethex+0x32c>
 800c598:	1bed      	subs	r5, r5, r7
 800c59a:	42ae      	cmp	r6, r5
 800c59c:	dc34      	bgt.n	800c608 <__gethex+0x2bc>
 800c59e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c5a2:	2b02      	cmp	r3, #2
 800c5a4:	d022      	beq.n	800c5ec <__gethex+0x2a0>
 800c5a6:	2b03      	cmp	r3, #3
 800c5a8:	d024      	beq.n	800c5f4 <__gethex+0x2a8>
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	d115      	bne.n	800c5da <__gethex+0x28e>
 800c5ae:	42ae      	cmp	r6, r5
 800c5b0:	d113      	bne.n	800c5da <__gethex+0x28e>
 800c5b2:	2e01      	cmp	r6, #1
 800c5b4:	d10b      	bne.n	800c5ce <__gethex+0x282>
 800c5b6:	9a02      	ldr	r2, [sp, #8]
 800c5b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c5bc:	6013      	str	r3, [r2, #0]
 800c5be:	2301      	movs	r3, #1
 800c5c0:	6123      	str	r3, [r4, #16]
 800c5c2:	f8ca 3000 	str.w	r3, [sl]
 800c5c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5c8:	2562      	movs	r5, #98	@ 0x62
 800c5ca:	601c      	str	r4, [r3, #0]
 800c5cc:	e73a      	b.n	800c444 <__gethex+0xf8>
 800c5ce:	1e71      	subs	r1, r6, #1
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	f7fe fd32 	bl	800b03a <__any_on>
 800c5d6:	2800      	cmp	r0, #0
 800c5d8:	d1ed      	bne.n	800c5b6 <__gethex+0x26a>
 800c5da:	9801      	ldr	r0, [sp, #4]
 800c5dc:	4621      	mov	r1, r4
 800c5de:	f7fe f8db 	bl	800a798 <_Bfree>
 800c5e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	6013      	str	r3, [r2, #0]
 800c5e8:	2550      	movs	r5, #80	@ 0x50
 800c5ea:	e72b      	b.n	800c444 <__gethex+0xf8>
 800c5ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1f3      	bne.n	800c5da <__gethex+0x28e>
 800c5f2:	e7e0      	b.n	800c5b6 <__gethex+0x26a>
 800c5f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d1dd      	bne.n	800c5b6 <__gethex+0x26a>
 800c5fa:	e7ee      	b.n	800c5da <__gethex+0x28e>
 800c5fc:	0800d218 	.word	0x0800d218
 800c600:	0800d0ad 	.word	0x0800d0ad
 800c604:	0800d3c6 	.word	0x0800d3c6
 800c608:	1e6f      	subs	r7, r5, #1
 800c60a:	f1b9 0f00 	cmp.w	r9, #0
 800c60e:	d130      	bne.n	800c672 <__gethex+0x326>
 800c610:	b127      	cbz	r7, 800c61c <__gethex+0x2d0>
 800c612:	4639      	mov	r1, r7
 800c614:	4620      	mov	r0, r4
 800c616:	f7fe fd10 	bl	800b03a <__any_on>
 800c61a:	4681      	mov	r9, r0
 800c61c:	117a      	asrs	r2, r7, #5
 800c61e:	2301      	movs	r3, #1
 800c620:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c624:	f007 071f 	and.w	r7, r7, #31
 800c628:	40bb      	lsls	r3, r7
 800c62a:	4213      	tst	r3, r2
 800c62c:	4629      	mov	r1, r5
 800c62e:	4620      	mov	r0, r4
 800c630:	bf18      	it	ne
 800c632:	f049 0902 	orrne.w	r9, r9, #2
 800c636:	f7ff fe21 	bl	800c27c <rshift>
 800c63a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c63e:	1b76      	subs	r6, r6, r5
 800c640:	2502      	movs	r5, #2
 800c642:	f1b9 0f00 	cmp.w	r9, #0
 800c646:	d047      	beq.n	800c6d8 <__gethex+0x38c>
 800c648:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c64c:	2b02      	cmp	r3, #2
 800c64e:	d015      	beq.n	800c67c <__gethex+0x330>
 800c650:	2b03      	cmp	r3, #3
 800c652:	d017      	beq.n	800c684 <__gethex+0x338>
 800c654:	2b01      	cmp	r3, #1
 800c656:	d109      	bne.n	800c66c <__gethex+0x320>
 800c658:	f019 0f02 	tst.w	r9, #2
 800c65c:	d006      	beq.n	800c66c <__gethex+0x320>
 800c65e:	f8da 3000 	ldr.w	r3, [sl]
 800c662:	ea49 0903 	orr.w	r9, r9, r3
 800c666:	f019 0f01 	tst.w	r9, #1
 800c66a:	d10e      	bne.n	800c68a <__gethex+0x33e>
 800c66c:	f045 0510 	orr.w	r5, r5, #16
 800c670:	e032      	b.n	800c6d8 <__gethex+0x38c>
 800c672:	f04f 0901 	mov.w	r9, #1
 800c676:	e7d1      	b.n	800c61c <__gethex+0x2d0>
 800c678:	2501      	movs	r5, #1
 800c67a:	e7e2      	b.n	800c642 <__gethex+0x2f6>
 800c67c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c67e:	f1c3 0301 	rsb	r3, r3, #1
 800c682:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c684:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c686:	2b00      	cmp	r3, #0
 800c688:	d0f0      	beq.n	800c66c <__gethex+0x320>
 800c68a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c68e:	f104 0314 	add.w	r3, r4, #20
 800c692:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c696:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c69a:	f04f 0c00 	mov.w	ip, #0
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c6a8:	d01b      	beq.n	800c6e2 <__gethex+0x396>
 800c6aa:	3201      	adds	r2, #1
 800c6ac:	6002      	str	r2, [r0, #0]
 800c6ae:	2d02      	cmp	r5, #2
 800c6b0:	f104 0314 	add.w	r3, r4, #20
 800c6b4:	d13c      	bne.n	800c730 <__gethex+0x3e4>
 800c6b6:	f8d8 2000 	ldr.w	r2, [r8]
 800c6ba:	3a01      	subs	r2, #1
 800c6bc:	42b2      	cmp	r2, r6
 800c6be:	d109      	bne.n	800c6d4 <__gethex+0x388>
 800c6c0:	1171      	asrs	r1, r6, #5
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c6c8:	f006 061f 	and.w	r6, r6, #31
 800c6cc:	fa02 f606 	lsl.w	r6, r2, r6
 800c6d0:	421e      	tst	r6, r3
 800c6d2:	d13a      	bne.n	800c74a <__gethex+0x3fe>
 800c6d4:	f045 0520 	orr.w	r5, r5, #32
 800c6d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6da:	601c      	str	r4, [r3, #0]
 800c6dc:	9b02      	ldr	r3, [sp, #8]
 800c6de:	601f      	str	r7, [r3, #0]
 800c6e0:	e6b0      	b.n	800c444 <__gethex+0xf8>
 800c6e2:	4299      	cmp	r1, r3
 800c6e4:	f843 cc04 	str.w	ip, [r3, #-4]
 800c6e8:	d8d9      	bhi.n	800c69e <__gethex+0x352>
 800c6ea:	68a3      	ldr	r3, [r4, #8]
 800c6ec:	459b      	cmp	fp, r3
 800c6ee:	db17      	blt.n	800c720 <__gethex+0x3d4>
 800c6f0:	6861      	ldr	r1, [r4, #4]
 800c6f2:	9801      	ldr	r0, [sp, #4]
 800c6f4:	3101      	adds	r1, #1
 800c6f6:	f7fe f80f 	bl	800a718 <_Balloc>
 800c6fa:	4681      	mov	r9, r0
 800c6fc:	b918      	cbnz	r0, 800c706 <__gethex+0x3ba>
 800c6fe:	4b1a      	ldr	r3, [pc, #104]	@ (800c768 <__gethex+0x41c>)
 800c700:	4602      	mov	r2, r0
 800c702:	2184      	movs	r1, #132	@ 0x84
 800c704:	e6c5      	b.n	800c492 <__gethex+0x146>
 800c706:	6922      	ldr	r2, [r4, #16]
 800c708:	3202      	adds	r2, #2
 800c70a:	f104 010c 	add.w	r1, r4, #12
 800c70e:	0092      	lsls	r2, r2, #2
 800c710:	300c      	adds	r0, #12
 800c712:	f7fd f8a0 	bl	8009856 <memcpy>
 800c716:	4621      	mov	r1, r4
 800c718:	9801      	ldr	r0, [sp, #4]
 800c71a:	f7fe f83d 	bl	800a798 <_Bfree>
 800c71e:	464c      	mov	r4, r9
 800c720:	6923      	ldr	r3, [r4, #16]
 800c722:	1c5a      	adds	r2, r3, #1
 800c724:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c728:	6122      	str	r2, [r4, #16]
 800c72a:	2201      	movs	r2, #1
 800c72c:	615a      	str	r2, [r3, #20]
 800c72e:	e7be      	b.n	800c6ae <__gethex+0x362>
 800c730:	6922      	ldr	r2, [r4, #16]
 800c732:	455a      	cmp	r2, fp
 800c734:	dd0b      	ble.n	800c74e <__gethex+0x402>
 800c736:	2101      	movs	r1, #1
 800c738:	4620      	mov	r0, r4
 800c73a:	f7ff fd9f 	bl	800c27c <rshift>
 800c73e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c742:	3701      	adds	r7, #1
 800c744:	42bb      	cmp	r3, r7
 800c746:	f6ff aee0 	blt.w	800c50a <__gethex+0x1be>
 800c74a:	2501      	movs	r5, #1
 800c74c:	e7c2      	b.n	800c6d4 <__gethex+0x388>
 800c74e:	f016 061f 	ands.w	r6, r6, #31
 800c752:	d0fa      	beq.n	800c74a <__gethex+0x3fe>
 800c754:	4453      	add	r3, sl
 800c756:	f1c6 0620 	rsb	r6, r6, #32
 800c75a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c75e:	f7fe f8cd 	bl	800a8fc <__hi0bits>
 800c762:	42b0      	cmp	r0, r6
 800c764:	dbe7      	blt.n	800c736 <__gethex+0x3ea>
 800c766:	e7f0      	b.n	800c74a <__gethex+0x3fe>
 800c768:	0800d0ad 	.word	0x0800d0ad

0800c76c <L_shift>:
 800c76c:	f1c2 0208 	rsb	r2, r2, #8
 800c770:	0092      	lsls	r2, r2, #2
 800c772:	b570      	push	{r4, r5, r6, lr}
 800c774:	f1c2 0620 	rsb	r6, r2, #32
 800c778:	6843      	ldr	r3, [r0, #4]
 800c77a:	6804      	ldr	r4, [r0, #0]
 800c77c:	fa03 f506 	lsl.w	r5, r3, r6
 800c780:	432c      	orrs	r4, r5
 800c782:	40d3      	lsrs	r3, r2
 800c784:	6004      	str	r4, [r0, #0]
 800c786:	f840 3f04 	str.w	r3, [r0, #4]!
 800c78a:	4288      	cmp	r0, r1
 800c78c:	d3f4      	bcc.n	800c778 <L_shift+0xc>
 800c78e:	bd70      	pop	{r4, r5, r6, pc}

0800c790 <__match>:
 800c790:	b530      	push	{r4, r5, lr}
 800c792:	6803      	ldr	r3, [r0, #0]
 800c794:	3301      	adds	r3, #1
 800c796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c79a:	b914      	cbnz	r4, 800c7a2 <__match+0x12>
 800c79c:	6003      	str	r3, [r0, #0]
 800c79e:	2001      	movs	r0, #1
 800c7a0:	bd30      	pop	{r4, r5, pc}
 800c7a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c7aa:	2d19      	cmp	r5, #25
 800c7ac:	bf98      	it	ls
 800c7ae:	3220      	addls	r2, #32
 800c7b0:	42a2      	cmp	r2, r4
 800c7b2:	d0f0      	beq.n	800c796 <__match+0x6>
 800c7b4:	2000      	movs	r0, #0
 800c7b6:	e7f3      	b.n	800c7a0 <__match+0x10>

0800c7b8 <__hexnan>:
 800c7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7bc:	680b      	ldr	r3, [r1, #0]
 800c7be:	6801      	ldr	r1, [r0, #0]
 800c7c0:	115e      	asrs	r6, r3, #5
 800c7c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c7c6:	f013 031f 	ands.w	r3, r3, #31
 800c7ca:	b087      	sub	sp, #28
 800c7cc:	bf18      	it	ne
 800c7ce:	3604      	addne	r6, #4
 800c7d0:	2500      	movs	r5, #0
 800c7d2:	1f37      	subs	r7, r6, #4
 800c7d4:	4682      	mov	sl, r0
 800c7d6:	4690      	mov	r8, r2
 800c7d8:	9301      	str	r3, [sp, #4]
 800c7da:	f846 5c04 	str.w	r5, [r6, #-4]
 800c7de:	46b9      	mov	r9, r7
 800c7e0:	463c      	mov	r4, r7
 800c7e2:	9502      	str	r5, [sp, #8]
 800c7e4:	46ab      	mov	fp, r5
 800c7e6:	784a      	ldrb	r2, [r1, #1]
 800c7e8:	1c4b      	adds	r3, r1, #1
 800c7ea:	9303      	str	r3, [sp, #12]
 800c7ec:	b342      	cbz	r2, 800c840 <__hexnan+0x88>
 800c7ee:	4610      	mov	r0, r2
 800c7f0:	9105      	str	r1, [sp, #20]
 800c7f2:	9204      	str	r2, [sp, #16]
 800c7f4:	f7ff fd94 	bl	800c320 <__hexdig_fun>
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	d151      	bne.n	800c8a0 <__hexnan+0xe8>
 800c7fc:	9a04      	ldr	r2, [sp, #16]
 800c7fe:	9905      	ldr	r1, [sp, #20]
 800c800:	2a20      	cmp	r2, #32
 800c802:	d818      	bhi.n	800c836 <__hexnan+0x7e>
 800c804:	9b02      	ldr	r3, [sp, #8]
 800c806:	459b      	cmp	fp, r3
 800c808:	dd13      	ble.n	800c832 <__hexnan+0x7a>
 800c80a:	454c      	cmp	r4, r9
 800c80c:	d206      	bcs.n	800c81c <__hexnan+0x64>
 800c80e:	2d07      	cmp	r5, #7
 800c810:	dc04      	bgt.n	800c81c <__hexnan+0x64>
 800c812:	462a      	mov	r2, r5
 800c814:	4649      	mov	r1, r9
 800c816:	4620      	mov	r0, r4
 800c818:	f7ff ffa8 	bl	800c76c <L_shift>
 800c81c:	4544      	cmp	r4, r8
 800c81e:	d952      	bls.n	800c8c6 <__hexnan+0x10e>
 800c820:	2300      	movs	r3, #0
 800c822:	f1a4 0904 	sub.w	r9, r4, #4
 800c826:	f844 3c04 	str.w	r3, [r4, #-4]
 800c82a:	f8cd b008 	str.w	fp, [sp, #8]
 800c82e:	464c      	mov	r4, r9
 800c830:	461d      	mov	r5, r3
 800c832:	9903      	ldr	r1, [sp, #12]
 800c834:	e7d7      	b.n	800c7e6 <__hexnan+0x2e>
 800c836:	2a29      	cmp	r2, #41	@ 0x29
 800c838:	d157      	bne.n	800c8ea <__hexnan+0x132>
 800c83a:	3102      	adds	r1, #2
 800c83c:	f8ca 1000 	str.w	r1, [sl]
 800c840:	f1bb 0f00 	cmp.w	fp, #0
 800c844:	d051      	beq.n	800c8ea <__hexnan+0x132>
 800c846:	454c      	cmp	r4, r9
 800c848:	d206      	bcs.n	800c858 <__hexnan+0xa0>
 800c84a:	2d07      	cmp	r5, #7
 800c84c:	dc04      	bgt.n	800c858 <__hexnan+0xa0>
 800c84e:	462a      	mov	r2, r5
 800c850:	4649      	mov	r1, r9
 800c852:	4620      	mov	r0, r4
 800c854:	f7ff ff8a 	bl	800c76c <L_shift>
 800c858:	4544      	cmp	r4, r8
 800c85a:	d936      	bls.n	800c8ca <__hexnan+0x112>
 800c85c:	f1a8 0204 	sub.w	r2, r8, #4
 800c860:	4623      	mov	r3, r4
 800c862:	f853 1b04 	ldr.w	r1, [r3], #4
 800c866:	f842 1f04 	str.w	r1, [r2, #4]!
 800c86a:	429f      	cmp	r7, r3
 800c86c:	d2f9      	bcs.n	800c862 <__hexnan+0xaa>
 800c86e:	1b3b      	subs	r3, r7, r4
 800c870:	f023 0303 	bic.w	r3, r3, #3
 800c874:	3304      	adds	r3, #4
 800c876:	3401      	adds	r4, #1
 800c878:	3e03      	subs	r6, #3
 800c87a:	42b4      	cmp	r4, r6
 800c87c:	bf88      	it	hi
 800c87e:	2304      	movhi	r3, #4
 800c880:	4443      	add	r3, r8
 800c882:	2200      	movs	r2, #0
 800c884:	f843 2b04 	str.w	r2, [r3], #4
 800c888:	429f      	cmp	r7, r3
 800c88a:	d2fb      	bcs.n	800c884 <__hexnan+0xcc>
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	b91b      	cbnz	r3, 800c898 <__hexnan+0xe0>
 800c890:	4547      	cmp	r7, r8
 800c892:	d128      	bne.n	800c8e6 <__hexnan+0x12e>
 800c894:	2301      	movs	r3, #1
 800c896:	603b      	str	r3, [r7, #0]
 800c898:	2005      	movs	r0, #5
 800c89a:	b007      	add	sp, #28
 800c89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a0:	3501      	adds	r5, #1
 800c8a2:	2d08      	cmp	r5, #8
 800c8a4:	f10b 0b01 	add.w	fp, fp, #1
 800c8a8:	dd06      	ble.n	800c8b8 <__hexnan+0x100>
 800c8aa:	4544      	cmp	r4, r8
 800c8ac:	d9c1      	bls.n	800c832 <__hexnan+0x7a>
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c8b4:	2501      	movs	r5, #1
 800c8b6:	3c04      	subs	r4, #4
 800c8b8:	6822      	ldr	r2, [r4, #0]
 800c8ba:	f000 000f 	and.w	r0, r0, #15
 800c8be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c8c2:	6020      	str	r0, [r4, #0]
 800c8c4:	e7b5      	b.n	800c832 <__hexnan+0x7a>
 800c8c6:	2508      	movs	r5, #8
 800c8c8:	e7b3      	b.n	800c832 <__hexnan+0x7a>
 800c8ca:	9b01      	ldr	r3, [sp, #4]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d0dd      	beq.n	800c88c <__hexnan+0xd4>
 800c8d0:	f1c3 0320 	rsb	r3, r3, #32
 800c8d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8d8:	40da      	lsrs	r2, r3
 800c8da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c8de:	4013      	ands	r3, r2
 800c8e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800c8e4:	e7d2      	b.n	800c88c <__hexnan+0xd4>
 800c8e6:	3f04      	subs	r7, #4
 800c8e8:	e7d0      	b.n	800c88c <__hexnan+0xd4>
 800c8ea:	2004      	movs	r0, #4
 800c8ec:	e7d5      	b.n	800c89a <__hexnan+0xe2>

0800c8ee <__ascii_mbtowc>:
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	b901      	cbnz	r1, 800c8f4 <__ascii_mbtowc+0x6>
 800c8f2:	a901      	add	r1, sp, #4
 800c8f4:	b142      	cbz	r2, 800c908 <__ascii_mbtowc+0x1a>
 800c8f6:	b14b      	cbz	r3, 800c90c <__ascii_mbtowc+0x1e>
 800c8f8:	7813      	ldrb	r3, [r2, #0]
 800c8fa:	600b      	str	r3, [r1, #0]
 800c8fc:	7812      	ldrb	r2, [r2, #0]
 800c8fe:	1e10      	subs	r0, r2, #0
 800c900:	bf18      	it	ne
 800c902:	2001      	movne	r0, #1
 800c904:	b002      	add	sp, #8
 800c906:	4770      	bx	lr
 800c908:	4610      	mov	r0, r2
 800c90a:	e7fb      	b.n	800c904 <__ascii_mbtowc+0x16>
 800c90c:	f06f 0001 	mvn.w	r0, #1
 800c910:	e7f8      	b.n	800c904 <__ascii_mbtowc+0x16>

0800c912 <_realloc_r>:
 800c912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c916:	4680      	mov	r8, r0
 800c918:	4615      	mov	r5, r2
 800c91a:	460c      	mov	r4, r1
 800c91c:	b921      	cbnz	r1, 800c928 <_realloc_r+0x16>
 800c91e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c922:	4611      	mov	r1, r2
 800c924:	f7fd be6c 	b.w	800a600 <_malloc_r>
 800c928:	b92a      	cbnz	r2, 800c936 <_realloc_r+0x24>
 800c92a:	f7fd fdf5 	bl	800a518 <_free_r>
 800c92e:	2400      	movs	r4, #0
 800c930:	4620      	mov	r0, r4
 800c932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c936:	f000 f840 	bl	800c9ba <_malloc_usable_size_r>
 800c93a:	4285      	cmp	r5, r0
 800c93c:	4606      	mov	r6, r0
 800c93e:	d802      	bhi.n	800c946 <_realloc_r+0x34>
 800c940:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c944:	d8f4      	bhi.n	800c930 <_realloc_r+0x1e>
 800c946:	4629      	mov	r1, r5
 800c948:	4640      	mov	r0, r8
 800c94a:	f7fd fe59 	bl	800a600 <_malloc_r>
 800c94e:	4607      	mov	r7, r0
 800c950:	2800      	cmp	r0, #0
 800c952:	d0ec      	beq.n	800c92e <_realloc_r+0x1c>
 800c954:	42b5      	cmp	r5, r6
 800c956:	462a      	mov	r2, r5
 800c958:	4621      	mov	r1, r4
 800c95a:	bf28      	it	cs
 800c95c:	4632      	movcs	r2, r6
 800c95e:	f7fc ff7a 	bl	8009856 <memcpy>
 800c962:	4621      	mov	r1, r4
 800c964:	4640      	mov	r0, r8
 800c966:	f7fd fdd7 	bl	800a518 <_free_r>
 800c96a:	463c      	mov	r4, r7
 800c96c:	e7e0      	b.n	800c930 <_realloc_r+0x1e>

0800c96e <__ascii_wctomb>:
 800c96e:	4603      	mov	r3, r0
 800c970:	4608      	mov	r0, r1
 800c972:	b141      	cbz	r1, 800c986 <__ascii_wctomb+0x18>
 800c974:	2aff      	cmp	r2, #255	@ 0xff
 800c976:	d904      	bls.n	800c982 <__ascii_wctomb+0x14>
 800c978:	228a      	movs	r2, #138	@ 0x8a
 800c97a:	601a      	str	r2, [r3, #0]
 800c97c:	f04f 30ff 	mov.w	r0, #4294967295
 800c980:	4770      	bx	lr
 800c982:	700a      	strb	r2, [r1, #0]
 800c984:	2001      	movs	r0, #1
 800c986:	4770      	bx	lr

0800c988 <fiprintf>:
 800c988:	b40e      	push	{r1, r2, r3}
 800c98a:	b503      	push	{r0, r1, lr}
 800c98c:	4601      	mov	r1, r0
 800c98e:	ab03      	add	r3, sp, #12
 800c990:	4805      	ldr	r0, [pc, #20]	@ (800c9a8 <fiprintf+0x20>)
 800c992:	f853 2b04 	ldr.w	r2, [r3], #4
 800c996:	6800      	ldr	r0, [r0, #0]
 800c998:	9301      	str	r3, [sp, #4]
 800c99a:	f000 f83f 	bl	800ca1c <_vfiprintf_r>
 800c99e:	b002      	add	sp, #8
 800c9a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9a4:	b003      	add	sp, #12
 800c9a6:	4770      	bx	lr
 800c9a8:	2000001c 	.word	0x2000001c

0800c9ac <abort>:
 800c9ac:	b508      	push	{r3, lr}
 800c9ae:	2006      	movs	r0, #6
 800c9b0:	f000 fa08 	bl	800cdc4 <raise>
 800c9b4:	2001      	movs	r0, #1
 800c9b6:	f7f4 ff7f 	bl	80018b8 <_exit>

0800c9ba <_malloc_usable_size_r>:
 800c9ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9be:	1f18      	subs	r0, r3, #4
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	bfbc      	itt	lt
 800c9c4:	580b      	ldrlt	r3, [r1, r0]
 800c9c6:	18c0      	addlt	r0, r0, r3
 800c9c8:	4770      	bx	lr

0800c9ca <__sfputc_r>:
 800c9ca:	6893      	ldr	r3, [r2, #8]
 800c9cc:	3b01      	subs	r3, #1
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	b410      	push	{r4}
 800c9d2:	6093      	str	r3, [r2, #8]
 800c9d4:	da08      	bge.n	800c9e8 <__sfputc_r+0x1e>
 800c9d6:	6994      	ldr	r4, [r2, #24]
 800c9d8:	42a3      	cmp	r3, r4
 800c9da:	db01      	blt.n	800c9e0 <__sfputc_r+0x16>
 800c9dc:	290a      	cmp	r1, #10
 800c9de:	d103      	bne.n	800c9e8 <__sfputc_r+0x1e>
 800c9e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9e4:	f000 b932 	b.w	800cc4c <__swbuf_r>
 800c9e8:	6813      	ldr	r3, [r2, #0]
 800c9ea:	1c58      	adds	r0, r3, #1
 800c9ec:	6010      	str	r0, [r2, #0]
 800c9ee:	7019      	strb	r1, [r3, #0]
 800c9f0:	4608      	mov	r0, r1
 800c9f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9f6:	4770      	bx	lr

0800c9f8 <__sfputs_r>:
 800c9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9fa:	4606      	mov	r6, r0
 800c9fc:	460f      	mov	r7, r1
 800c9fe:	4614      	mov	r4, r2
 800ca00:	18d5      	adds	r5, r2, r3
 800ca02:	42ac      	cmp	r4, r5
 800ca04:	d101      	bne.n	800ca0a <__sfputs_r+0x12>
 800ca06:	2000      	movs	r0, #0
 800ca08:	e007      	b.n	800ca1a <__sfputs_r+0x22>
 800ca0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca0e:	463a      	mov	r2, r7
 800ca10:	4630      	mov	r0, r6
 800ca12:	f7ff ffda 	bl	800c9ca <__sfputc_r>
 800ca16:	1c43      	adds	r3, r0, #1
 800ca18:	d1f3      	bne.n	800ca02 <__sfputs_r+0xa>
 800ca1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ca1c <_vfiprintf_r>:
 800ca1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca20:	460d      	mov	r5, r1
 800ca22:	b09d      	sub	sp, #116	@ 0x74
 800ca24:	4614      	mov	r4, r2
 800ca26:	4698      	mov	r8, r3
 800ca28:	4606      	mov	r6, r0
 800ca2a:	b118      	cbz	r0, 800ca34 <_vfiprintf_r+0x18>
 800ca2c:	6a03      	ldr	r3, [r0, #32]
 800ca2e:	b90b      	cbnz	r3, 800ca34 <_vfiprintf_r+0x18>
 800ca30:	f7fc fdf8 	bl	8009624 <__sinit>
 800ca34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca36:	07d9      	lsls	r1, r3, #31
 800ca38:	d405      	bmi.n	800ca46 <_vfiprintf_r+0x2a>
 800ca3a:	89ab      	ldrh	r3, [r5, #12]
 800ca3c:	059a      	lsls	r2, r3, #22
 800ca3e:	d402      	bmi.n	800ca46 <_vfiprintf_r+0x2a>
 800ca40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca42:	f7fc ff06 	bl	8009852 <__retarget_lock_acquire_recursive>
 800ca46:	89ab      	ldrh	r3, [r5, #12]
 800ca48:	071b      	lsls	r3, r3, #28
 800ca4a:	d501      	bpl.n	800ca50 <_vfiprintf_r+0x34>
 800ca4c:	692b      	ldr	r3, [r5, #16]
 800ca4e:	b99b      	cbnz	r3, 800ca78 <_vfiprintf_r+0x5c>
 800ca50:	4629      	mov	r1, r5
 800ca52:	4630      	mov	r0, r6
 800ca54:	f000 f938 	bl	800ccc8 <__swsetup_r>
 800ca58:	b170      	cbz	r0, 800ca78 <_vfiprintf_r+0x5c>
 800ca5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca5c:	07dc      	lsls	r4, r3, #31
 800ca5e:	d504      	bpl.n	800ca6a <_vfiprintf_r+0x4e>
 800ca60:	f04f 30ff 	mov.w	r0, #4294967295
 800ca64:	b01d      	add	sp, #116	@ 0x74
 800ca66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca6a:	89ab      	ldrh	r3, [r5, #12]
 800ca6c:	0598      	lsls	r0, r3, #22
 800ca6e:	d4f7      	bmi.n	800ca60 <_vfiprintf_r+0x44>
 800ca70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca72:	f7fc feef 	bl	8009854 <__retarget_lock_release_recursive>
 800ca76:	e7f3      	b.n	800ca60 <_vfiprintf_r+0x44>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca7c:	2320      	movs	r3, #32
 800ca7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca82:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca86:	2330      	movs	r3, #48	@ 0x30
 800ca88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cc38 <_vfiprintf_r+0x21c>
 800ca8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca90:	f04f 0901 	mov.w	r9, #1
 800ca94:	4623      	mov	r3, r4
 800ca96:	469a      	mov	sl, r3
 800ca98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca9c:	b10a      	cbz	r2, 800caa2 <_vfiprintf_r+0x86>
 800ca9e:	2a25      	cmp	r2, #37	@ 0x25
 800caa0:	d1f9      	bne.n	800ca96 <_vfiprintf_r+0x7a>
 800caa2:	ebba 0b04 	subs.w	fp, sl, r4
 800caa6:	d00b      	beq.n	800cac0 <_vfiprintf_r+0xa4>
 800caa8:	465b      	mov	r3, fp
 800caaa:	4622      	mov	r2, r4
 800caac:	4629      	mov	r1, r5
 800caae:	4630      	mov	r0, r6
 800cab0:	f7ff ffa2 	bl	800c9f8 <__sfputs_r>
 800cab4:	3001      	adds	r0, #1
 800cab6:	f000 80a7 	beq.w	800cc08 <_vfiprintf_r+0x1ec>
 800caba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cabc:	445a      	add	r2, fp
 800cabe:	9209      	str	r2, [sp, #36]	@ 0x24
 800cac0:	f89a 3000 	ldrb.w	r3, [sl]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	f000 809f 	beq.w	800cc08 <_vfiprintf_r+0x1ec>
 800caca:	2300      	movs	r3, #0
 800cacc:	f04f 32ff 	mov.w	r2, #4294967295
 800cad0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cad4:	f10a 0a01 	add.w	sl, sl, #1
 800cad8:	9304      	str	r3, [sp, #16]
 800cada:	9307      	str	r3, [sp, #28]
 800cadc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cae0:	931a      	str	r3, [sp, #104]	@ 0x68
 800cae2:	4654      	mov	r4, sl
 800cae4:	2205      	movs	r2, #5
 800cae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caea:	4853      	ldr	r0, [pc, #332]	@ (800cc38 <_vfiprintf_r+0x21c>)
 800caec:	f7f3 fb98 	bl	8000220 <memchr>
 800caf0:	9a04      	ldr	r2, [sp, #16]
 800caf2:	b9d8      	cbnz	r0, 800cb2c <_vfiprintf_r+0x110>
 800caf4:	06d1      	lsls	r1, r2, #27
 800caf6:	bf44      	itt	mi
 800caf8:	2320      	movmi	r3, #32
 800cafa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cafe:	0713      	lsls	r3, r2, #28
 800cb00:	bf44      	itt	mi
 800cb02:	232b      	movmi	r3, #43	@ 0x2b
 800cb04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb08:	f89a 3000 	ldrb.w	r3, [sl]
 800cb0c:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb0e:	d015      	beq.n	800cb3c <_vfiprintf_r+0x120>
 800cb10:	9a07      	ldr	r2, [sp, #28]
 800cb12:	4654      	mov	r4, sl
 800cb14:	2000      	movs	r0, #0
 800cb16:	f04f 0c0a 	mov.w	ip, #10
 800cb1a:	4621      	mov	r1, r4
 800cb1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb20:	3b30      	subs	r3, #48	@ 0x30
 800cb22:	2b09      	cmp	r3, #9
 800cb24:	d94b      	bls.n	800cbbe <_vfiprintf_r+0x1a2>
 800cb26:	b1b0      	cbz	r0, 800cb56 <_vfiprintf_r+0x13a>
 800cb28:	9207      	str	r2, [sp, #28]
 800cb2a:	e014      	b.n	800cb56 <_vfiprintf_r+0x13a>
 800cb2c:	eba0 0308 	sub.w	r3, r0, r8
 800cb30:	fa09 f303 	lsl.w	r3, r9, r3
 800cb34:	4313      	orrs	r3, r2
 800cb36:	9304      	str	r3, [sp, #16]
 800cb38:	46a2      	mov	sl, r4
 800cb3a:	e7d2      	b.n	800cae2 <_vfiprintf_r+0xc6>
 800cb3c:	9b03      	ldr	r3, [sp, #12]
 800cb3e:	1d19      	adds	r1, r3, #4
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	9103      	str	r1, [sp, #12]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	bfbb      	ittet	lt
 800cb48:	425b      	neglt	r3, r3
 800cb4a:	f042 0202 	orrlt.w	r2, r2, #2
 800cb4e:	9307      	strge	r3, [sp, #28]
 800cb50:	9307      	strlt	r3, [sp, #28]
 800cb52:	bfb8      	it	lt
 800cb54:	9204      	strlt	r2, [sp, #16]
 800cb56:	7823      	ldrb	r3, [r4, #0]
 800cb58:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb5a:	d10a      	bne.n	800cb72 <_vfiprintf_r+0x156>
 800cb5c:	7863      	ldrb	r3, [r4, #1]
 800cb5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb60:	d132      	bne.n	800cbc8 <_vfiprintf_r+0x1ac>
 800cb62:	9b03      	ldr	r3, [sp, #12]
 800cb64:	1d1a      	adds	r2, r3, #4
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	9203      	str	r2, [sp, #12]
 800cb6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb6e:	3402      	adds	r4, #2
 800cb70:	9305      	str	r3, [sp, #20]
 800cb72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cc48 <_vfiprintf_r+0x22c>
 800cb76:	7821      	ldrb	r1, [r4, #0]
 800cb78:	2203      	movs	r2, #3
 800cb7a:	4650      	mov	r0, sl
 800cb7c:	f7f3 fb50 	bl	8000220 <memchr>
 800cb80:	b138      	cbz	r0, 800cb92 <_vfiprintf_r+0x176>
 800cb82:	9b04      	ldr	r3, [sp, #16]
 800cb84:	eba0 000a 	sub.w	r0, r0, sl
 800cb88:	2240      	movs	r2, #64	@ 0x40
 800cb8a:	4082      	lsls	r2, r0
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	3401      	adds	r4, #1
 800cb90:	9304      	str	r3, [sp, #16]
 800cb92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb96:	4829      	ldr	r0, [pc, #164]	@ (800cc3c <_vfiprintf_r+0x220>)
 800cb98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb9c:	2206      	movs	r2, #6
 800cb9e:	f7f3 fb3f 	bl	8000220 <memchr>
 800cba2:	2800      	cmp	r0, #0
 800cba4:	d03f      	beq.n	800cc26 <_vfiprintf_r+0x20a>
 800cba6:	4b26      	ldr	r3, [pc, #152]	@ (800cc40 <_vfiprintf_r+0x224>)
 800cba8:	bb1b      	cbnz	r3, 800cbf2 <_vfiprintf_r+0x1d6>
 800cbaa:	9b03      	ldr	r3, [sp, #12]
 800cbac:	3307      	adds	r3, #7
 800cbae:	f023 0307 	bic.w	r3, r3, #7
 800cbb2:	3308      	adds	r3, #8
 800cbb4:	9303      	str	r3, [sp, #12]
 800cbb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbb8:	443b      	add	r3, r7
 800cbba:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbbc:	e76a      	b.n	800ca94 <_vfiprintf_r+0x78>
 800cbbe:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbc2:	460c      	mov	r4, r1
 800cbc4:	2001      	movs	r0, #1
 800cbc6:	e7a8      	b.n	800cb1a <_vfiprintf_r+0xfe>
 800cbc8:	2300      	movs	r3, #0
 800cbca:	3401      	adds	r4, #1
 800cbcc:	9305      	str	r3, [sp, #20]
 800cbce:	4619      	mov	r1, r3
 800cbd0:	f04f 0c0a 	mov.w	ip, #10
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbda:	3a30      	subs	r2, #48	@ 0x30
 800cbdc:	2a09      	cmp	r2, #9
 800cbde:	d903      	bls.n	800cbe8 <_vfiprintf_r+0x1cc>
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d0c6      	beq.n	800cb72 <_vfiprintf_r+0x156>
 800cbe4:	9105      	str	r1, [sp, #20]
 800cbe6:	e7c4      	b.n	800cb72 <_vfiprintf_r+0x156>
 800cbe8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbec:	4604      	mov	r4, r0
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e7f0      	b.n	800cbd4 <_vfiprintf_r+0x1b8>
 800cbf2:	ab03      	add	r3, sp, #12
 800cbf4:	9300      	str	r3, [sp, #0]
 800cbf6:	462a      	mov	r2, r5
 800cbf8:	4b12      	ldr	r3, [pc, #72]	@ (800cc44 <_vfiprintf_r+0x228>)
 800cbfa:	a904      	add	r1, sp, #16
 800cbfc:	4630      	mov	r0, r6
 800cbfe:	f7fb feb9 	bl	8008974 <_printf_float>
 800cc02:	4607      	mov	r7, r0
 800cc04:	1c78      	adds	r0, r7, #1
 800cc06:	d1d6      	bne.n	800cbb6 <_vfiprintf_r+0x19a>
 800cc08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc0a:	07d9      	lsls	r1, r3, #31
 800cc0c:	d405      	bmi.n	800cc1a <_vfiprintf_r+0x1fe>
 800cc0e:	89ab      	ldrh	r3, [r5, #12]
 800cc10:	059a      	lsls	r2, r3, #22
 800cc12:	d402      	bmi.n	800cc1a <_vfiprintf_r+0x1fe>
 800cc14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc16:	f7fc fe1d 	bl	8009854 <__retarget_lock_release_recursive>
 800cc1a:	89ab      	ldrh	r3, [r5, #12]
 800cc1c:	065b      	lsls	r3, r3, #25
 800cc1e:	f53f af1f 	bmi.w	800ca60 <_vfiprintf_r+0x44>
 800cc22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc24:	e71e      	b.n	800ca64 <_vfiprintf_r+0x48>
 800cc26:	ab03      	add	r3, sp, #12
 800cc28:	9300      	str	r3, [sp, #0]
 800cc2a:	462a      	mov	r2, r5
 800cc2c:	4b05      	ldr	r3, [pc, #20]	@ (800cc44 <_vfiprintf_r+0x228>)
 800cc2e:	a904      	add	r1, sp, #16
 800cc30:	4630      	mov	r0, r6
 800cc32:	f7fc f937 	bl	8008ea4 <_printf_i>
 800cc36:	e7e4      	b.n	800cc02 <_vfiprintf_r+0x1e6>
 800cc38:	0800d371 	.word	0x0800d371
 800cc3c:	0800d37b 	.word	0x0800d37b
 800cc40:	08008975 	.word	0x08008975
 800cc44:	0800c9f9 	.word	0x0800c9f9
 800cc48:	0800d377 	.word	0x0800d377

0800cc4c <__swbuf_r>:
 800cc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc4e:	460e      	mov	r6, r1
 800cc50:	4614      	mov	r4, r2
 800cc52:	4605      	mov	r5, r0
 800cc54:	b118      	cbz	r0, 800cc5e <__swbuf_r+0x12>
 800cc56:	6a03      	ldr	r3, [r0, #32]
 800cc58:	b90b      	cbnz	r3, 800cc5e <__swbuf_r+0x12>
 800cc5a:	f7fc fce3 	bl	8009624 <__sinit>
 800cc5e:	69a3      	ldr	r3, [r4, #24]
 800cc60:	60a3      	str	r3, [r4, #8]
 800cc62:	89a3      	ldrh	r3, [r4, #12]
 800cc64:	071a      	lsls	r2, r3, #28
 800cc66:	d501      	bpl.n	800cc6c <__swbuf_r+0x20>
 800cc68:	6923      	ldr	r3, [r4, #16]
 800cc6a:	b943      	cbnz	r3, 800cc7e <__swbuf_r+0x32>
 800cc6c:	4621      	mov	r1, r4
 800cc6e:	4628      	mov	r0, r5
 800cc70:	f000 f82a 	bl	800ccc8 <__swsetup_r>
 800cc74:	b118      	cbz	r0, 800cc7e <__swbuf_r+0x32>
 800cc76:	f04f 37ff 	mov.w	r7, #4294967295
 800cc7a:	4638      	mov	r0, r7
 800cc7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc7e:	6823      	ldr	r3, [r4, #0]
 800cc80:	6922      	ldr	r2, [r4, #16]
 800cc82:	1a98      	subs	r0, r3, r2
 800cc84:	6963      	ldr	r3, [r4, #20]
 800cc86:	b2f6      	uxtb	r6, r6
 800cc88:	4283      	cmp	r3, r0
 800cc8a:	4637      	mov	r7, r6
 800cc8c:	dc05      	bgt.n	800cc9a <__swbuf_r+0x4e>
 800cc8e:	4621      	mov	r1, r4
 800cc90:	4628      	mov	r0, r5
 800cc92:	f7ff fa53 	bl	800c13c <_fflush_r>
 800cc96:	2800      	cmp	r0, #0
 800cc98:	d1ed      	bne.n	800cc76 <__swbuf_r+0x2a>
 800cc9a:	68a3      	ldr	r3, [r4, #8]
 800cc9c:	3b01      	subs	r3, #1
 800cc9e:	60a3      	str	r3, [r4, #8]
 800cca0:	6823      	ldr	r3, [r4, #0]
 800cca2:	1c5a      	adds	r2, r3, #1
 800cca4:	6022      	str	r2, [r4, #0]
 800cca6:	701e      	strb	r6, [r3, #0]
 800cca8:	6962      	ldr	r2, [r4, #20]
 800ccaa:	1c43      	adds	r3, r0, #1
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d004      	beq.n	800ccba <__swbuf_r+0x6e>
 800ccb0:	89a3      	ldrh	r3, [r4, #12]
 800ccb2:	07db      	lsls	r3, r3, #31
 800ccb4:	d5e1      	bpl.n	800cc7a <__swbuf_r+0x2e>
 800ccb6:	2e0a      	cmp	r6, #10
 800ccb8:	d1df      	bne.n	800cc7a <__swbuf_r+0x2e>
 800ccba:	4621      	mov	r1, r4
 800ccbc:	4628      	mov	r0, r5
 800ccbe:	f7ff fa3d 	bl	800c13c <_fflush_r>
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	d0d9      	beq.n	800cc7a <__swbuf_r+0x2e>
 800ccc6:	e7d6      	b.n	800cc76 <__swbuf_r+0x2a>

0800ccc8 <__swsetup_r>:
 800ccc8:	b538      	push	{r3, r4, r5, lr}
 800ccca:	4b29      	ldr	r3, [pc, #164]	@ (800cd70 <__swsetup_r+0xa8>)
 800cccc:	4605      	mov	r5, r0
 800ccce:	6818      	ldr	r0, [r3, #0]
 800ccd0:	460c      	mov	r4, r1
 800ccd2:	b118      	cbz	r0, 800ccdc <__swsetup_r+0x14>
 800ccd4:	6a03      	ldr	r3, [r0, #32]
 800ccd6:	b90b      	cbnz	r3, 800ccdc <__swsetup_r+0x14>
 800ccd8:	f7fc fca4 	bl	8009624 <__sinit>
 800ccdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cce0:	0719      	lsls	r1, r3, #28
 800cce2:	d422      	bmi.n	800cd2a <__swsetup_r+0x62>
 800cce4:	06da      	lsls	r2, r3, #27
 800cce6:	d407      	bmi.n	800ccf8 <__swsetup_r+0x30>
 800cce8:	2209      	movs	r2, #9
 800ccea:	602a      	str	r2, [r5, #0]
 800ccec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccf0:	81a3      	strh	r3, [r4, #12]
 800ccf2:	f04f 30ff 	mov.w	r0, #4294967295
 800ccf6:	e033      	b.n	800cd60 <__swsetup_r+0x98>
 800ccf8:	0758      	lsls	r0, r3, #29
 800ccfa:	d512      	bpl.n	800cd22 <__swsetup_r+0x5a>
 800ccfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ccfe:	b141      	cbz	r1, 800cd12 <__swsetup_r+0x4a>
 800cd00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd04:	4299      	cmp	r1, r3
 800cd06:	d002      	beq.n	800cd0e <__swsetup_r+0x46>
 800cd08:	4628      	mov	r0, r5
 800cd0a:	f7fd fc05 	bl	800a518 <_free_r>
 800cd0e:	2300      	movs	r3, #0
 800cd10:	6363      	str	r3, [r4, #52]	@ 0x34
 800cd12:	89a3      	ldrh	r3, [r4, #12]
 800cd14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cd18:	81a3      	strh	r3, [r4, #12]
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	6063      	str	r3, [r4, #4]
 800cd1e:	6923      	ldr	r3, [r4, #16]
 800cd20:	6023      	str	r3, [r4, #0]
 800cd22:	89a3      	ldrh	r3, [r4, #12]
 800cd24:	f043 0308 	orr.w	r3, r3, #8
 800cd28:	81a3      	strh	r3, [r4, #12]
 800cd2a:	6923      	ldr	r3, [r4, #16]
 800cd2c:	b94b      	cbnz	r3, 800cd42 <__swsetup_r+0x7a>
 800cd2e:	89a3      	ldrh	r3, [r4, #12]
 800cd30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cd34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd38:	d003      	beq.n	800cd42 <__swsetup_r+0x7a>
 800cd3a:	4621      	mov	r1, r4
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	f000 f883 	bl	800ce48 <__smakebuf_r>
 800cd42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd46:	f013 0201 	ands.w	r2, r3, #1
 800cd4a:	d00a      	beq.n	800cd62 <__swsetup_r+0x9a>
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	60a2      	str	r2, [r4, #8]
 800cd50:	6962      	ldr	r2, [r4, #20]
 800cd52:	4252      	negs	r2, r2
 800cd54:	61a2      	str	r2, [r4, #24]
 800cd56:	6922      	ldr	r2, [r4, #16]
 800cd58:	b942      	cbnz	r2, 800cd6c <__swsetup_r+0xa4>
 800cd5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cd5e:	d1c5      	bne.n	800ccec <__swsetup_r+0x24>
 800cd60:	bd38      	pop	{r3, r4, r5, pc}
 800cd62:	0799      	lsls	r1, r3, #30
 800cd64:	bf58      	it	pl
 800cd66:	6962      	ldrpl	r2, [r4, #20]
 800cd68:	60a2      	str	r2, [r4, #8]
 800cd6a:	e7f4      	b.n	800cd56 <__swsetup_r+0x8e>
 800cd6c:	2000      	movs	r0, #0
 800cd6e:	e7f7      	b.n	800cd60 <__swsetup_r+0x98>
 800cd70:	2000001c 	.word	0x2000001c

0800cd74 <_raise_r>:
 800cd74:	291f      	cmp	r1, #31
 800cd76:	b538      	push	{r3, r4, r5, lr}
 800cd78:	4605      	mov	r5, r0
 800cd7a:	460c      	mov	r4, r1
 800cd7c:	d904      	bls.n	800cd88 <_raise_r+0x14>
 800cd7e:	2316      	movs	r3, #22
 800cd80:	6003      	str	r3, [r0, #0]
 800cd82:	f04f 30ff 	mov.w	r0, #4294967295
 800cd86:	bd38      	pop	{r3, r4, r5, pc}
 800cd88:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cd8a:	b112      	cbz	r2, 800cd92 <_raise_r+0x1e>
 800cd8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd90:	b94b      	cbnz	r3, 800cda6 <_raise_r+0x32>
 800cd92:	4628      	mov	r0, r5
 800cd94:	f000 f830 	bl	800cdf8 <_getpid_r>
 800cd98:	4622      	mov	r2, r4
 800cd9a:	4601      	mov	r1, r0
 800cd9c:	4628      	mov	r0, r5
 800cd9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cda2:	f000 b817 	b.w	800cdd4 <_kill_r>
 800cda6:	2b01      	cmp	r3, #1
 800cda8:	d00a      	beq.n	800cdc0 <_raise_r+0x4c>
 800cdaa:	1c59      	adds	r1, r3, #1
 800cdac:	d103      	bne.n	800cdb6 <_raise_r+0x42>
 800cdae:	2316      	movs	r3, #22
 800cdb0:	6003      	str	r3, [r0, #0]
 800cdb2:	2001      	movs	r0, #1
 800cdb4:	e7e7      	b.n	800cd86 <_raise_r+0x12>
 800cdb6:	2100      	movs	r1, #0
 800cdb8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	4798      	blx	r3
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	e7e0      	b.n	800cd86 <_raise_r+0x12>

0800cdc4 <raise>:
 800cdc4:	4b02      	ldr	r3, [pc, #8]	@ (800cdd0 <raise+0xc>)
 800cdc6:	4601      	mov	r1, r0
 800cdc8:	6818      	ldr	r0, [r3, #0]
 800cdca:	f7ff bfd3 	b.w	800cd74 <_raise_r>
 800cdce:	bf00      	nop
 800cdd0:	2000001c 	.word	0x2000001c

0800cdd4 <_kill_r>:
 800cdd4:	b538      	push	{r3, r4, r5, lr}
 800cdd6:	4d07      	ldr	r5, [pc, #28]	@ (800cdf4 <_kill_r+0x20>)
 800cdd8:	2300      	movs	r3, #0
 800cdda:	4604      	mov	r4, r0
 800cddc:	4608      	mov	r0, r1
 800cdde:	4611      	mov	r1, r2
 800cde0:	602b      	str	r3, [r5, #0]
 800cde2:	f7f4 fd59 	bl	8001898 <_kill>
 800cde6:	1c43      	adds	r3, r0, #1
 800cde8:	d102      	bne.n	800cdf0 <_kill_r+0x1c>
 800cdea:	682b      	ldr	r3, [r5, #0]
 800cdec:	b103      	cbz	r3, 800cdf0 <_kill_r+0x1c>
 800cdee:	6023      	str	r3, [r4, #0]
 800cdf0:	bd38      	pop	{r3, r4, r5, pc}
 800cdf2:	bf00      	nop
 800cdf4:	200013b8 	.word	0x200013b8

0800cdf8 <_getpid_r>:
 800cdf8:	f7f4 bd46 	b.w	8001888 <_getpid>

0800cdfc <__swhatbuf_r>:
 800cdfc:	b570      	push	{r4, r5, r6, lr}
 800cdfe:	460c      	mov	r4, r1
 800ce00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce04:	2900      	cmp	r1, #0
 800ce06:	b096      	sub	sp, #88	@ 0x58
 800ce08:	4615      	mov	r5, r2
 800ce0a:	461e      	mov	r6, r3
 800ce0c:	da0d      	bge.n	800ce2a <__swhatbuf_r+0x2e>
 800ce0e:	89a3      	ldrh	r3, [r4, #12]
 800ce10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ce14:	f04f 0100 	mov.w	r1, #0
 800ce18:	bf14      	ite	ne
 800ce1a:	2340      	movne	r3, #64	@ 0x40
 800ce1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ce20:	2000      	movs	r0, #0
 800ce22:	6031      	str	r1, [r6, #0]
 800ce24:	602b      	str	r3, [r5, #0]
 800ce26:	b016      	add	sp, #88	@ 0x58
 800ce28:	bd70      	pop	{r4, r5, r6, pc}
 800ce2a:	466a      	mov	r2, sp
 800ce2c:	f000 f848 	bl	800cec0 <_fstat_r>
 800ce30:	2800      	cmp	r0, #0
 800ce32:	dbec      	blt.n	800ce0e <__swhatbuf_r+0x12>
 800ce34:	9901      	ldr	r1, [sp, #4]
 800ce36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ce3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ce3e:	4259      	negs	r1, r3
 800ce40:	4159      	adcs	r1, r3
 800ce42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce46:	e7eb      	b.n	800ce20 <__swhatbuf_r+0x24>

0800ce48 <__smakebuf_r>:
 800ce48:	898b      	ldrh	r3, [r1, #12]
 800ce4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce4c:	079d      	lsls	r5, r3, #30
 800ce4e:	4606      	mov	r6, r0
 800ce50:	460c      	mov	r4, r1
 800ce52:	d507      	bpl.n	800ce64 <__smakebuf_r+0x1c>
 800ce54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ce58:	6023      	str	r3, [r4, #0]
 800ce5a:	6123      	str	r3, [r4, #16]
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	6163      	str	r3, [r4, #20]
 800ce60:	b003      	add	sp, #12
 800ce62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce64:	ab01      	add	r3, sp, #4
 800ce66:	466a      	mov	r2, sp
 800ce68:	f7ff ffc8 	bl	800cdfc <__swhatbuf_r>
 800ce6c:	9f00      	ldr	r7, [sp, #0]
 800ce6e:	4605      	mov	r5, r0
 800ce70:	4639      	mov	r1, r7
 800ce72:	4630      	mov	r0, r6
 800ce74:	f7fd fbc4 	bl	800a600 <_malloc_r>
 800ce78:	b948      	cbnz	r0, 800ce8e <__smakebuf_r+0x46>
 800ce7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce7e:	059a      	lsls	r2, r3, #22
 800ce80:	d4ee      	bmi.n	800ce60 <__smakebuf_r+0x18>
 800ce82:	f023 0303 	bic.w	r3, r3, #3
 800ce86:	f043 0302 	orr.w	r3, r3, #2
 800ce8a:	81a3      	strh	r3, [r4, #12]
 800ce8c:	e7e2      	b.n	800ce54 <__smakebuf_r+0xc>
 800ce8e:	89a3      	ldrh	r3, [r4, #12]
 800ce90:	6020      	str	r0, [r4, #0]
 800ce92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce96:	81a3      	strh	r3, [r4, #12]
 800ce98:	9b01      	ldr	r3, [sp, #4]
 800ce9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ce9e:	b15b      	cbz	r3, 800ceb8 <__smakebuf_r+0x70>
 800cea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cea4:	4630      	mov	r0, r6
 800cea6:	f000 f81d 	bl	800cee4 <_isatty_r>
 800ceaa:	b128      	cbz	r0, 800ceb8 <__smakebuf_r+0x70>
 800ceac:	89a3      	ldrh	r3, [r4, #12]
 800ceae:	f023 0303 	bic.w	r3, r3, #3
 800ceb2:	f043 0301 	orr.w	r3, r3, #1
 800ceb6:	81a3      	strh	r3, [r4, #12]
 800ceb8:	89a3      	ldrh	r3, [r4, #12]
 800ceba:	431d      	orrs	r5, r3
 800cebc:	81a5      	strh	r5, [r4, #12]
 800cebe:	e7cf      	b.n	800ce60 <__smakebuf_r+0x18>

0800cec0 <_fstat_r>:
 800cec0:	b538      	push	{r3, r4, r5, lr}
 800cec2:	4d07      	ldr	r5, [pc, #28]	@ (800cee0 <_fstat_r+0x20>)
 800cec4:	2300      	movs	r3, #0
 800cec6:	4604      	mov	r4, r0
 800cec8:	4608      	mov	r0, r1
 800ceca:	4611      	mov	r1, r2
 800cecc:	602b      	str	r3, [r5, #0]
 800cece:	f7f4 fd43 	bl	8001958 <_fstat>
 800ced2:	1c43      	adds	r3, r0, #1
 800ced4:	d102      	bne.n	800cedc <_fstat_r+0x1c>
 800ced6:	682b      	ldr	r3, [r5, #0]
 800ced8:	b103      	cbz	r3, 800cedc <_fstat_r+0x1c>
 800ceda:	6023      	str	r3, [r4, #0]
 800cedc:	bd38      	pop	{r3, r4, r5, pc}
 800cede:	bf00      	nop
 800cee0:	200013b8 	.word	0x200013b8

0800cee4 <_isatty_r>:
 800cee4:	b538      	push	{r3, r4, r5, lr}
 800cee6:	4d06      	ldr	r5, [pc, #24]	@ (800cf00 <_isatty_r+0x1c>)
 800cee8:	2300      	movs	r3, #0
 800ceea:	4604      	mov	r4, r0
 800ceec:	4608      	mov	r0, r1
 800ceee:	602b      	str	r3, [r5, #0]
 800cef0:	f7f4 fd42 	bl	8001978 <_isatty>
 800cef4:	1c43      	adds	r3, r0, #1
 800cef6:	d102      	bne.n	800cefe <_isatty_r+0x1a>
 800cef8:	682b      	ldr	r3, [r5, #0]
 800cefa:	b103      	cbz	r3, 800cefe <_isatty_r+0x1a>
 800cefc:	6023      	str	r3, [r4, #0]
 800cefe:	bd38      	pop	{r3, r4, r5, pc}
 800cf00:	200013b8 	.word	0x200013b8

0800cf04 <_init>:
 800cf04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf06:	bf00      	nop
 800cf08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf0a:	bc08      	pop	{r3}
 800cf0c:	469e      	mov	lr, r3
 800cf0e:	4770      	bx	lr

0800cf10 <_fini>:
 800cf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf12:	bf00      	nop
 800cf14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf16:	bc08      	pop	{r3}
 800cf18:	469e      	mov	lr, r3
 800cf1a:	4770      	bx	lr
