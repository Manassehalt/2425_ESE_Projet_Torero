
Projet_Torero_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052b4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800548c  0800548c  0000648c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054cc  080054cc  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080054cc  080054cc  000064cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054d4  080054d4  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054d4  080054d4  000064d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054d8  080054d8  000064d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080054dc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  2000000c  080054e8  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  080054e8  00007354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178d3  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002929  00000000  00000000  0001e90f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e0  00000000  00000000  00021238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001123  00000000  00000000  00022818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fe72  00000000  00000000  0002393b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001835f  00000000  00000000  000437ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9ebd  00000000  00000000  0005bb0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001359c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f94  00000000  00000000  00135a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009f  00000000  00000000  0013b9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005474 	.word	0x08005474

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005474 	.word	0x08005474

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 ff1b 	bl	8001346 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f814 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 fb76 	bl	8000c04 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000518:	f000 f84e 	bl	80005b8 <MX_ADC1_Init>
  MX_SPI2_Init();
 800051c:	f000 f8c4 	bl	80006a8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000520:	f000 f900 	bl	8000724 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000524:	f000 f99e 	bl	8000864 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000528:	f000 fa00 	bl	800092c <MX_TIM3_Init>
  MX_TIM4_Init();
 800052c:	f000 fa54 	bl	80009d8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000530:	f000 fad0 	bl	8000ad4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000534:	f000 fb1a 	bl	8000b6c <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <main+0x30>

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	@ 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0318 	add.w	r3, r7, #24
 8000546:	2238      	movs	r2, #56	@ 0x38
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f004 ff66 	bl	800541c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000562:	f002 f9f3 	bl	800294c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000566:	2301      	movs	r3, #1
 8000568:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800056e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000570:	2300      	movs	r3, #0
 8000572:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	f107 0318 	add.w	r3, r7, #24
 8000578:	4618      	mov	r0, r3
 800057a:	f002 fa9b 	bl	8002ab4 <HAL_RCC_OscConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x4c>
  {
    Error_Handler();
 8000584:	f000 fbec 	bl	8000d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	230f      	movs	r3, #15
 800058a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800058c:	2302      	movs	r3, #2
 800058e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f002 fd99 	bl	80030d8 <HAL_RCC_ClockConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005ac:	f000 fbd8 	bl	8000d60 <Error_Handler>
  }
}
 80005b0:	bf00      	nop
 80005b2:	3750      	adds	r7, #80	@ 0x50
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08c      	sub	sp, #48	@ 0x30
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2220      	movs	r2, #32
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f004 ff23 	bl	800541c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005d6:	4b32      	ldr	r3, [pc, #200]	@ (80006a0 <MX_ADC1_Init+0xe8>)
 80005d8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005de:	4b30      	ldr	r3, [pc, #192]	@ (80006a0 <MX_ADC1_Init+0xe8>)
 80005e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80005e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005e6:	4b2e      	ldr	r3, [pc, #184]	@ (80006a0 <MX_ADC1_Init+0xe8>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ec:	4b2c      	ldr	r3, [pc, #176]	@ (80006a0 <MX_ADC1_Init+0xe8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80005f2:	4b2b      	ldr	r3, [pc, #172]	@ (80006a0 <MX_ADC1_Init+0xe8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005f8:	4b29      	ldr	r3, [pc, #164]	@ (80006a0 <MX_ADC1_Init+0xe8>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fe:	4b28      	ldr	r3, [pc, #160]	@ (80006a0 <MX_ADC1_Init+0xe8>)
 8000600:	2204      	movs	r2, #4
 8000602:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000604:	4b26      	ldr	r3, [pc, #152]	@ (80006a0 <MX_ADC1_Init+0xe8>)
 8000606:	2200      	movs	r2, #0
 8000608:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800060a:	4b25      	ldr	r3, [pc, #148]	@ (80006a0 <MX_ADC1_Init+0xe8>)
 800060c:	2200      	movs	r2, #0
 800060e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000610:	4b23      	ldr	r3, [pc, #140]	@ (80006a0 <MX_ADC1_Init+0xe8>)
 8000612:	2201      	movs	r2, #1
 8000614:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000616:	4b22      	ldr	r3, [pc, #136]	@ (80006a0 <MX_ADC1_Init+0xe8>)
 8000618:	2200      	movs	r2, #0
 800061a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061e:	4b20      	ldr	r3, [pc, #128]	@ (80006a0 <MX_ADC1_Init+0xe8>)
 8000620:	2200      	movs	r2, #0
 8000622:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000624:	4b1e      	ldr	r3, [pc, #120]	@ (80006a0 <MX_ADC1_Init+0xe8>)
 8000626:	2200      	movs	r2, #0
 8000628:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062a:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <MX_ADC1_Init+0xe8>)
 800062c:	2200      	movs	r2, #0
 800062e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000632:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <MX_ADC1_Init+0xe8>)
 8000634:	2200      	movs	r2, #0
 8000636:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000638:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <MX_ADC1_Init+0xe8>)
 800063a:	2200      	movs	r2, #0
 800063c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000640:	4817      	ldr	r0, [pc, #92]	@ (80006a0 <MX_ADC1_Init+0xe8>)
 8000642:	f001 f8c7 	bl	80017d4 <HAL_ADC_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800064c:	f000 fb88 	bl	8000d60 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000650:	2300      	movs	r3, #0
 8000652:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000658:	4619      	mov	r1, r3
 800065a:	4811      	ldr	r0, [pc, #68]	@ (80006a0 <MX_ADC1_Init+0xe8>)
 800065c:	f001 fe54 	bl	8002308 <HAL_ADCEx_MultiModeConfigChannel>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000666:	f000 fb7b 	bl	8000d60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800066a:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <MX_ADC1_Init+0xec>)
 800066c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800066e:	2306      	movs	r3, #6
 8000670:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000676:	237f      	movs	r3, #127	@ 0x7f
 8000678:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800067a:	2304      	movs	r3, #4
 800067c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	4619      	mov	r1, r3
 8000686:	4806      	ldr	r0, [pc, #24]	@ (80006a0 <MX_ADC1_Init+0xe8>)
 8000688:	f001 fa28 	bl	8001adc <HAL_ADC_ConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000692:	f000 fb65 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	3730      	adds	r7, #48	@ 0x30
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000028 	.word	0x20000028
 80006a4:	32601000 	.word	0x32601000

080006a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006ac:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <MX_SPI2_Init+0x74>)
 80006ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000720 <MX_SPI2_Init+0x78>)
 80006b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <MX_SPI2_Init+0x74>)
 80006b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006ba:	4b18      	ldr	r3, [pc, #96]	@ (800071c <MX_SPI2_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80006c0:	4b16      	ldr	r3, [pc, #88]	@ (800071c <MX_SPI2_Init+0x74>)
 80006c2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80006c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006c8:	4b14      	ldr	r3, [pc, #80]	@ (800071c <MX_SPI2_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ce:	4b13      	ldr	r3, [pc, #76]	@ (800071c <MX_SPI2_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006d4:	4b11      	ldr	r3, [pc, #68]	@ (800071c <MX_SPI2_Init+0x74>)
 80006d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006da:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <MX_SPI2_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_SPI2_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <MX_SPI2_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <MX_SPI2_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006f4:	4b09      	ldr	r3, [pc, #36]	@ (800071c <MX_SPI2_Init+0x74>)
 80006f6:	2207      	movs	r2, #7
 80006f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	@ (800071c <MX_SPI2_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000700:	4b06      	ldr	r3, [pc, #24]	@ (800071c <MX_SPI2_Init+0x74>)
 8000702:	2208      	movs	r2, #8
 8000704:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	@ (800071c <MX_SPI2_Init+0x74>)
 8000708:	f003 f8ee 	bl	80038e8 <HAL_SPI_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000712:	f000 fb25 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000094 	.word	0x20000094
 8000720:	40003800 	.word	0x40003800

08000724 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b098      	sub	sp, #96	@ 0x60
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000736:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
 8000746:	615a      	str	r2, [r3, #20]
 8000748:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2234      	movs	r2, #52	@ 0x34
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f004 fe63 	bl	800541c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000756:	4b41      	ldr	r3, [pc, #260]	@ (800085c <MX_TIM1_Init+0x138>)
 8000758:	4a41      	ldr	r2, [pc, #260]	@ (8000860 <MX_TIM1_Init+0x13c>)
 800075a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800075c:	4b3f      	ldr	r3, [pc, #252]	@ (800085c <MX_TIM1_Init+0x138>)
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000762:	4b3e      	ldr	r3, [pc, #248]	@ (800085c <MX_TIM1_Init+0x138>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000768:	4b3c      	ldr	r3, [pc, #240]	@ (800085c <MX_TIM1_Init+0x138>)
 800076a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800076e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000770:	4b3a      	ldr	r3, [pc, #232]	@ (800085c <MX_TIM1_Init+0x138>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000776:	4b39      	ldr	r3, [pc, #228]	@ (800085c <MX_TIM1_Init+0x138>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077c:	4b37      	ldr	r3, [pc, #220]	@ (800085c <MX_TIM1_Init+0x138>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000782:	4836      	ldr	r0, [pc, #216]	@ (800085c <MX_TIM1_Init+0x138>)
 8000784:	f003 f95b 	bl	8003a3e <HAL_TIM_PWM_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800078e:	f000 fae7 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000792:	2300      	movs	r3, #0
 8000794:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000796:	2300      	movs	r3, #0
 8000798:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800079e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007a2:	4619      	mov	r1, r3
 80007a4:	482d      	ldr	r0, [pc, #180]	@ (800085c <MX_TIM1_Init+0x138>)
 80007a6:	f003 feed 	bl	8004584 <HAL_TIMEx_MasterConfigSynchronization>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007b0:	f000 fad6 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b4:	2360      	movs	r3, #96	@ 0x60
 80007b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007bc:	2300      	movs	r3, #0
 80007be:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007c0:	2300      	movs	r3, #0
 80007c2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007c8:	2300      	movs	r3, #0
 80007ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007cc:	2300      	movs	r3, #0
 80007ce:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007d4:	2200      	movs	r2, #0
 80007d6:	4619      	mov	r1, r3
 80007d8:	4820      	ldr	r0, [pc, #128]	@ (800085c <MX_TIM1_Init+0x138>)
 80007da:	f003 fa2d 	bl	8003c38 <HAL_TIM_PWM_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80007e4:	f000 fabc 	bl	8000d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007ec:	2204      	movs	r2, #4
 80007ee:	4619      	mov	r1, r3
 80007f0:	481a      	ldr	r0, [pc, #104]	@ (800085c <MX_TIM1_Init+0x138>)
 80007f2:	f003 fa21 	bl	8003c38 <HAL_TIM_PWM_ConfigChannel>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80007fc:	f000 fab0 	bl	8000d60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000814:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000818:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000826:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800082a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000830:	2300      	movs	r3, #0
 8000832:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	4619      	mov	r1, r3
 800083c:	4807      	ldr	r0, [pc, #28]	@ (800085c <MX_TIM1_Init+0x138>)
 800083e:	f003 ff23 	bl	8004688 <HAL_TIMEx_ConfigBreakDeadTime>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000848:	f000 fa8a 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800084c:	4803      	ldr	r0, [pc, #12]	@ (800085c <MX_TIM1_Init+0x138>)
 800084e:	f000 fbf5 	bl	800103c <HAL_TIM_MspPostInit>

}
 8000852:	bf00      	nop
 8000854:	3760      	adds	r7, #96	@ 0x60
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000f8 	.word	0x200000f8
 8000860:	40012c00 	.word	0x40012c00

08000864 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	@ 0x28
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000876:	463b      	mov	r3, r7
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
 8000884:	615a      	str	r2, [r3, #20]
 8000886:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000888:	4b27      	ldr	r3, [pc, #156]	@ (8000928 <MX_TIM2_Init+0xc4>)
 800088a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800088e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000890:	4b25      	ldr	r3, [pc, #148]	@ (8000928 <MX_TIM2_Init+0xc4>)
 8000892:	2200      	movs	r2, #0
 8000894:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000896:	4b24      	ldr	r3, [pc, #144]	@ (8000928 <MX_TIM2_Init+0xc4>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800089c:	4b22      	ldr	r3, [pc, #136]	@ (8000928 <MX_TIM2_Init+0xc4>)
 800089e:	f04f 32ff 	mov.w	r2, #4294967295
 80008a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a4:	4b20      	ldr	r3, [pc, #128]	@ (8000928 <MX_TIM2_Init+0xc4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000928 <MX_TIM2_Init+0xc4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008b0:	481d      	ldr	r0, [pc, #116]	@ (8000928 <MX_TIM2_Init+0xc4>)
 80008b2:	f003 f8c4 	bl	8003a3e <HAL_TIM_PWM_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80008bc:	f000 fa50 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4816      	ldr	r0, [pc, #88]	@ (8000928 <MX_TIM2_Init+0xc4>)
 80008d0:	f003 fe58 	bl	8004584 <HAL_TIMEx_MasterConfigSynchronization>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80008da:	f000 fa41 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008de:	2360      	movs	r3, #96	@ 0x60
 80008e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ee:	463b      	mov	r3, r7
 80008f0:	2200      	movs	r2, #0
 80008f2:	4619      	mov	r1, r3
 80008f4:	480c      	ldr	r0, [pc, #48]	@ (8000928 <MX_TIM2_Init+0xc4>)
 80008f6:	f003 f99f 	bl	8003c38 <HAL_TIM_PWM_ConfigChannel>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000900:	f000 fa2e 	bl	8000d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000904:	463b      	mov	r3, r7
 8000906:	2204      	movs	r2, #4
 8000908:	4619      	mov	r1, r3
 800090a:	4807      	ldr	r0, [pc, #28]	@ (8000928 <MX_TIM2_Init+0xc4>)
 800090c:	f003 f994 	bl	8003c38 <HAL_TIM_PWM_ConfigChannel>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000916:	f000 fa23 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800091a:	4803      	ldr	r0, [pc, #12]	@ (8000928 <MX_TIM2_Init+0xc4>)
 800091c:	f000 fb8e 	bl	800103c <HAL_TIM_MspPostInit>

}
 8000920:	bf00      	nop
 8000922:	3728      	adds	r7, #40	@ 0x28
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000144 	.word	0x20000144

0800092c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08c      	sub	sp, #48	@ 0x30
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	2224      	movs	r2, #36	@ 0x24
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f004 fd6e 	bl	800541c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000940:	463b      	mov	r3, r7
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800094a:	4b21      	ldr	r3, [pc, #132]	@ (80009d0 <MX_TIM3_Init+0xa4>)
 800094c:	4a21      	ldr	r2, [pc, #132]	@ (80009d4 <MX_TIM3_Init+0xa8>)
 800094e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000950:	4b1f      	ldr	r3, [pc, #124]	@ (80009d0 <MX_TIM3_Init+0xa4>)
 8000952:	2200      	movs	r2, #0
 8000954:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000956:	4b1e      	ldr	r3, [pc, #120]	@ (80009d0 <MX_TIM3_Init+0xa4>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800095c:	4b1c      	ldr	r3, [pc, #112]	@ (80009d0 <MX_TIM3_Init+0xa4>)
 800095e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000962:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000964:	4b1a      	ldr	r3, [pc, #104]	@ (80009d0 <MX_TIM3_Init+0xa4>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096a:	4b19      	ldr	r3, [pc, #100]	@ (80009d0 <MX_TIM3_Init+0xa4>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000970:	2301      	movs	r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000974:	2300      	movs	r3, #0
 8000976:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000978:	2301      	movs	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000988:	2301      	movs	r3, #1
 800098a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	4619      	mov	r1, r3
 800099a:	480d      	ldr	r0, [pc, #52]	@ (80009d0 <MX_TIM3_Init+0xa4>)
 800099c:	f003 f8a6 	bl	8003aec <HAL_TIM_Encoder_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80009a6:	f000 f9db 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009b2:	463b      	mov	r3, r7
 80009b4:	4619      	mov	r1, r3
 80009b6:	4806      	ldr	r0, [pc, #24]	@ (80009d0 <MX_TIM3_Init+0xa4>)
 80009b8:	f003 fde4 	bl	8004584 <HAL_TIMEx_MasterConfigSynchronization>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80009c2:	f000 f9cd 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	3730      	adds	r7, #48	@ 0x30
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000190 	.word	0x20000190
 80009d4:	40000400 	.word	0x40000400

080009d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b094      	sub	sp, #80	@ 0x50
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009e2:	2224      	movs	r2, #36	@ 0x24
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f004 fd18 	bl	800541c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ec:	f107 0320 	add.w	r3, r7, #32
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
 8000a06:	615a      	str	r2, [r3, #20]
 8000a08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a0a:	4b30      	ldr	r3, [pc, #192]	@ (8000acc <MX_TIM4_Init+0xf4>)
 8000a0c:	4a30      	ldr	r2, [pc, #192]	@ (8000ad0 <MX_TIM4_Init+0xf8>)
 8000a0e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a10:	4b2e      	ldr	r3, [pc, #184]	@ (8000acc <MX_TIM4_Init+0xf4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a16:	4b2d      	ldr	r3, [pc, #180]	@ (8000acc <MX_TIM4_Init+0xf4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000acc <MX_TIM4_Init+0xf4>)
 8000a1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a22:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a24:	4b29      	ldr	r3, [pc, #164]	@ (8000acc <MX_TIM4_Init+0xf4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2a:	4b28      	ldr	r3, [pc, #160]	@ (8000acc <MX_TIM4_Init+0xf4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a30:	4826      	ldr	r0, [pc, #152]	@ (8000acc <MX_TIM4_Init+0xf4>)
 8000a32:	f003 f804 	bl	8003a3e <HAL_TIM_PWM_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000a3c:	f000 f990 	bl	8000d60 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a40:	2301      	movs	r3, #1
 8000a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a44:	2300      	movs	r3, #0
 8000a46:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC1Filter = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a54:	2300      	movs	r3, #0
 8000a56:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.IC2Filter = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000a64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4818      	ldr	r0, [pc, #96]	@ (8000acc <MX_TIM4_Init+0xf4>)
 8000a6c:	f003 f83e 	bl	8003aec <HAL_TIM_Encoder_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8000a76:	f000 f973 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a82:	f107 0320 	add.w	r3, r7, #32
 8000a86:	4619      	mov	r1, r3
 8000a88:	4810      	ldr	r0, [pc, #64]	@ (8000acc <MX_TIM4_Init+0xf4>)
 8000a8a:	f003 fd7b 	bl	8004584 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8000a94:	f000 f964 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a98:	2360      	movs	r3, #96	@ 0x60
 8000a9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	220c      	movs	r2, #12
 8000aac:	4619      	mov	r1, r3
 8000aae:	4807      	ldr	r0, [pc, #28]	@ (8000acc <MX_TIM4_Init+0xf4>)
 8000ab0:	f003 f8c2 	bl	8003c38 <HAL_TIM_PWM_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8000aba:	f000 f951 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000abe:	4803      	ldr	r0, [pc, #12]	@ (8000acc <MX_TIM4_Init+0xf4>)
 8000ac0:	f000 fabc 	bl	800103c <HAL_TIM_MspPostInit>

}
 8000ac4:	bf00      	nop
 8000ac6:	3750      	adds	r7, #80	@ 0x50
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	200001dc 	.word	0x200001dc
 8000ad0:	40000800 	.word	0x40000800

08000ad4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad8:	4b22      	ldr	r3, [pc, #136]	@ (8000b64 <MX_USART2_UART_Init+0x90>)
 8000ada:	4a23      	ldr	r2, [pc, #140]	@ (8000b68 <MX_USART2_UART_Init+0x94>)
 8000adc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ade:	4b21      	ldr	r3, [pc, #132]	@ (8000b64 <MX_USART2_UART_Init+0x90>)
 8000ae0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ae4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b64 <MX_USART2_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aec:	4b1d      	ldr	r3, [pc, #116]	@ (8000b64 <MX_USART2_UART_Init+0x90>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000af2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b64 <MX_USART2_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b64 <MX_USART2_UART_Init+0x90>)
 8000afa:	220c      	movs	r2, #12
 8000afc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afe:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <MX_USART2_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b04:	4b17      	ldr	r3, [pc, #92]	@ (8000b64 <MX_USART2_UART_Init+0x90>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <MX_USART2_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b10:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <MX_USART2_UART_Init+0x90>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b16:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <MX_USART2_UART_Init+0x90>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b1c:	4811      	ldr	r0, [pc, #68]	@ (8000b64 <MX_USART2_UART_Init+0x90>)
 8000b1e:	f003 fe3f 	bl	80047a0 <HAL_UART_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b28:	f000 f91a 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	480d      	ldr	r0, [pc, #52]	@ (8000b64 <MX_USART2_UART_Init+0x90>)
 8000b30:	f004 fbaa 	bl	8005288 <HAL_UARTEx_SetTxFifoThreshold>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b3a:	f000 f911 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4808      	ldr	r0, [pc, #32]	@ (8000b64 <MX_USART2_UART_Init+0x90>)
 8000b42:	f004 fbdf 	bl	8005304 <HAL_UARTEx_SetRxFifoThreshold>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b4c:	f000 f908 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b50:	4804      	ldr	r0, [pc, #16]	@ (8000b64 <MX_USART2_UART_Init+0x90>)
 8000b52:	f004 fb60 	bl	8005216 <HAL_UARTEx_DisableFifoMode>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b5c:	f000 f900 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000228 	.word	0x20000228
 8000b68:	40004400 	.word	0x40004400

08000b6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b70:	4b22      	ldr	r3, [pc, #136]	@ (8000bfc <MX_USART3_UART_Init+0x90>)
 8000b72:	4a23      	ldr	r2, [pc, #140]	@ (8000c00 <MX_USART3_UART_Init+0x94>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b76:	4b21      	ldr	r3, [pc, #132]	@ (8000bfc <MX_USART3_UART_Init+0x90>)
 8000b78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bfc <MX_USART3_UART_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b84:	4b1d      	ldr	r3, [pc, #116]	@ (8000bfc <MX_USART3_UART_Init+0x90>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <MX_USART3_UART_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	@ (8000bfc <MX_USART3_UART_Init+0x90>)
 8000b92:	220c      	movs	r2, #12
 8000b94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <MX_USART3_UART_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b17      	ldr	r3, [pc, #92]	@ (8000bfc <MX_USART3_UART_Init+0x90>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	@ (8000bfc <MX_USART3_UART_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	@ (8000bfc <MX_USART3_UART_Init+0x90>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bae:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <MX_USART3_UART_Init+0x90>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bb4:	4811      	ldr	r0, [pc, #68]	@ (8000bfc <MX_USART3_UART_Init+0x90>)
 8000bb6:	f003 fdf3 	bl	80047a0 <HAL_UART_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bc0:	f000 f8ce 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	480d      	ldr	r0, [pc, #52]	@ (8000bfc <MX_USART3_UART_Init+0x90>)
 8000bc8:	f004 fb5e 	bl	8005288 <HAL_UARTEx_SetTxFifoThreshold>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bd2:	f000 f8c5 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4808      	ldr	r0, [pc, #32]	@ (8000bfc <MX_USART3_UART_Init+0x90>)
 8000bda:	f004 fb93 	bl	8005304 <HAL_UARTEx_SetRxFifoThreshold>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000be4:	f000 f8bc 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000be8:	4804      	ldr	r0, [pc, #16]	@ (8000bfc <MX_USART3_UART_Init+0x90>)
 8000bea:	f004 fb14 	bl	8005216 <HAL_UARTEx_DisableFifoMode>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bf4:	f000 f8b4 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200002bc 	.word	0x200002bc
 8000c00:	40004800 	.word	0x40004800

08000c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	@ 0x28
 8000c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1a:	4b4d      	ldr	r3, [pc, #308]	@ (8000d50 <MX_GPIO_Init+0x14c>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1e:	4a4c      	ldr	r2, [pc, #304]	@ (8000d50 <MX_GPIO_Init+0x14c>)
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c26:	4b4a      	ldr	r3, [pc, #296]	@ (8000d50 <MX_GPIO_Init+0x14c>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c32:	4b47      	ldr	r3, [pc, #284]	@ (8000d50 <MX_GPIO_Init+0x14c>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c36:	4a46      	ldr	r2, [pc, #280]	@ (8000d50 <MX_GPIO_Init+0x14c>)
 8000c38:	f043 0320 	orr.w	r3, r3, #32
 8000c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c3e:	4b44      	ldr	r3, [pc, #272]	@ (8000d50 <MX_GPIO_Init+0x14c>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c42:	f003 0320 	and.w	r3, r3, #32
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c4a:	4b41      	ldr	r3, [pc, #260]	@ (8000d50 <MX_GPIO_Init+0x14c>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4e:	4a40      	ldr	r2, [pc, #256]	@ (8000d50 <MX_GPIO_Init+0x14c>)
 8000c50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c56:	4b3e      	ldr	r3, [pc, #248]	@ (8000d50 <MX_GPIO_Init+0x14c>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	4b3b      	ldr	r3, [pc, #236]	@ (8000d50 <MX_GPIO_Init+0x14c>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c66:	4a3a      	ldr	r2, [pc, #232]	@ (8000d50 <MX_GPIO_Init+0x14c>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c6e:	4b38      	ldr	r3, [pc, #224]	@ (8000d50 <MX_GPIO_Init+0x14c>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	4b35      	ldr	r3, [pc, #212]	@ (8000d50 <MX_GPIO_Init+0x14c>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7e:	4a34      	ldr	r2, [pc, #208]	@ (8000d50 <MX_GPIO_Init+0x14c>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c86:	4b32      	ldr	r3, [pc, #200]	@ (8000d50 <MX_GPIO_Init+0x14c>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INT2_ACC_Pin|LED_SE_Pin|LED_SW_Pin|Status_LED_Pin
 8000c92:	2200      	movs	r2, #0
 8000c94:	f642 4150 	movw	r1, #11344	@ 0x2c50
 8000c98:	482e      	ldr	r0, [pc, #184]	@ (8000d54 <MX_GPIO_Init+0x150>)
 8000c9a:	f001 fe3f 	bl	800291c <HAL_GPIO_WritePin>
                          |Status_LED_debbug_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_ACC_Pin|LED_NE_Pin|INT1_ACC_Pin|DEV_EN_LIDAR_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f248 41a0 	movw	r1, #33952	@ 0x84a0
 8000ca4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca8:	f001 fe38 	bl	800291c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M_EN_LIDAR_Pin|LED_NW_Pin|LED_W_Pin|LED_N_Pin
 8000cac:	2200      	movs	r2, #0
 8000cae:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 8000cb2:	4829      	ldr	r0, [pc, #164]	@ (8000d58 <MX_GPIO_Init+0x154>)
 8000cb4:	f001 fe32 	bl	800291c <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_S_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : INT2_ACC_Pin LED_SE_Pin LED_SW_Pin Status_LED_Pin
                           Status_LED_debbug_Pin */
  GPIO_InitStruct.Pin = INT2_ACC_Pin|LED_SE_Pin|LED_SW_Pin|Status_LED_Pin
 8000cb8:	f642 4350 	movw	r3, #11344	@ 0x2c50
 8000cbc:	617b      	str	r3, [r7, #20]
                          |Status_LED_debbug_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4820      	ldr	r0, [pc, #128]	@ (8000d54 <MX_GPIO_Init+0x150>)
 8000cd2:	f001 fca1 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8000cd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	481c      	ldr	r0, [pc, #112]	@ (8000d5c <MX_GPIO_Init+0x158>)
 8000cec:	f001 fc94 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_ACC_Pin LED_NE_Pin INT1_ACC_Pin DEV_EN_LIDAR_Pin */
  GPIO_InitStruct.Pin = CS_ACC_Pin|LED_NE_Pin|INT1_ACC_Pin|DEV_EN_LIDAR_Pin;
 8000cf0:	f248 43a0 	movw	r3, #33952	@ 0x84a0
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d0c:	f001 fc84 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : M_EN_LIDAR_Pin LED_NW_Pin LED_W_Pin LED_N_Pin
                           LED_E_Pin LED_S_Pin */
  GPIO_InitStruct.Pin = M_EN_LIDAR_Pin|LED_NW_Pin|LED_W_Pin|LED_N_Pin
 8000d10:	f241 03f4 	movw	r3, #4340	@ 0x10f4
 8000d14:	617b      	str	r3, [r7, #20]
                          |LED_E_Pin|LED_S_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	480b      	ldr	r0, [pc, #44]	@ (8000d58 <MX_GPIO_Init+0x154>)
 8000d2a:	f001 fc75 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT_Flash_Pin */
  GPIO_InitStruct.Pin = BOOT_Flash_Pin;
 8000d2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT_Flash_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <MX_GPIO_Init+0x154>)
 8000d44:	f001 fc68 	bl	8002618 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d48:	bf00      	nop
 8000d4a:	3728      	adds	r7, #40	@ 0x28
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40021000 	.word	0x40021000
 8000d54:	48000800 	.word	0x48000800
 8000d58:	48000400 	.word	0x48000400
 8000d5c:	48001800 	.word	0x48001800

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d64:	b672      	cpsid	i
}
 8000d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <Error_Handler+0x8>

08000d6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d76:	4a0e      	ldr	r2, [pc, #56]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d8e:	4a08      	ldr	r2, [pc, #32]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d96:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000da2:	f001 fe77 	bl	8002a94 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000

08000db4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b09a      	sub	sp, #104	@ 0x68
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	2244      	movs	r2, #68	@ 0x44
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f004 fb21 	bl	800541c <memset>
  if(hadc->Instance==ADC1)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000de2:	d133      	bne.n	8000e4c <HAL_ADC_MspInit+0x98>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000de4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000de8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000dea:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	4618      	mov	r0, r3
 8000df6:	f002 fb87 	bl	8003508 <HAL_RCCEx_PeriphCLKConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000e00:	f7ff ffae 	bl	8000d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e04:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <HAL_ADC_MspInit+0xa0>)
 8000e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e08:	4a12      	ldr	r2, [pc, #72]	@ (8000e54 <HAL_ADC_MspInit+0xa0>)
 8000e0a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e10:	4b10      	ldr	r3, [pc, #64]	@ (8000e54 <HAL_ADC_MspInit+0xa0>)
 8000e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e54 <HAL_ADC_MspInit+0xa0>)
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e20:	4a0c      	ldr	r2, [pc, #48]	@ (8000e54 <HAL_ADC_MspInit+0xa0>)
 8000e22:	f043 0302 	orr.w	r3, r3, #2
 8000e26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e28:	4b0a      	ldr	r3, [pc, #40]	@ (8000e54 <HAL_ADC_MspInit+0xa0>)
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC1_IN15_AN_CB_G_Pin|ADC1_IN12_AN_CB_D_Pin;
 8000e34:	2303      	movs	r3, #3
 8000e36:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e40:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e44:	4619      	mov	r1, r3
 8000e46:	4804      	ldr	r0, [pc, #16]	@ (8000e58 <HAL_ADC_MspInit+0xa4>)
 8000e48:	f001 fbe6 	bl	8002618 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e4c:	bf00      	nop
 8000e4e:	3768      	adds	r7, #104	@ 0x68
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40021000 	.word	0x40021000
 8000e58:	48000400 	.word	0x48000400

08000e5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	@ 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a17      	ldr	r2, [pc, #92]	@ (8000ed8 <HAL_SPI_MspInit+0x7c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d128      	bne.n	8000ed0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e7e:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <HAL_SPI_MspInit+0x80>)
 8000e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e82:	4a16      	ldr	r2, [pc, #88]	@ (8000edc <HAL_SPI_MspInit+0x80>)
 8000e84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e8a:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <HAL_SPI_MspInit+0x80>)
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <HAL_SPI_MspInit+0x80>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9a:	4a10      	ldr	r2, [pc, #64]	@ (8000edc <HAL_SPI_MspInit+0x80>)
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <HAL_SPI_MspInit+0x80>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_TO_SCLK_ACC_Pin|SPI2_MISO_TO_SDO_ACC_Pin|SPI2_MOSI_TO_SDI_ACC_Pin;
 8000eae:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ec0:	2305      	movs	r3, #5
 8000ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <HAL_SPI_MspInit+0x84>)
 8000ecc:	f001 fba4 	bl	8002618 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000ed0:	bf00      	nop
 8000ed2:	3728      	adds	r7, #40	@ 0x28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40003800 	.word	0x40003800
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	48000400 	.word	0x48000400

08000ee4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08c      	sub	sp, #48	@ 0x30
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a2a      	ldr	r2, [pc, #168]	@ (8000fac <HAL_TIM_PWM_MspInit+0xc8>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d10c      	bne.n	8000f20 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f06:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb0 <HAL_TIM_PWM_MspInit+0xcc>)
 8000f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f0a:	4a29      	ldr	r2, [pc, #164]	@ (8000fb0 <HAL_TIM_PWM_MspInit+0xcc>)
 8000f0c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f10:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f12:	4b27      	ldr	r3, [pc, #156]	@ (8000fb0 <HAL_TIM_PWM_MspInit+0xcc>)
 8000f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f1a:	61bb      	str	r3, [r7, #24]
 8000f1c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f1e:	e040      	b.n	8000fa2 <HAL_TIM_PWM_MspInit+0xbe>
  else if(htim_pwm->Instance==TIM2)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f28:	d10c      	bne.n	8000f44 <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f2a:	4b21      	ldr	r3, [pc, #132]	@ (8000fb0 <HAL_TIM_PWM_MspInit+0xcc>)
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f2e:	4a20      	ldr	r2, [pc, #128]	@ (8000fb0 <HAL_TIM_PWM_MspInit+0xcc>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f36:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb0 <HAL_TIM_PWM_MspInit+0xcc>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697b      	ldr	r3, [r7, #20]
}
 8000f42:	e02e      	b.n	8000fa2 <HAL_TIM_PWM_MspInit+0xbe>
  else if(htim_pwm->Instance==TIM4)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a1a      	ldr	r2, [pc, #104]	@ (8000fb4 <HAL_TIM_PWM_MspInit+0xd0>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d129      	bne.n	8000fa2 <HAL_TIM_PWM_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f4e:	4b18      	ldr	r3, [pc, #96]	@ (8000fb0 <HAL_TIM_PWM_MspInit+0xcc>)
 8000f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f52:	4a17      	ldr	r2, [pc, #92]	@ (8000fb0 <HAL_TIM_PWM_MspInit+0xcc>)
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f5a:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <HAL_TIM_PWM_MspInit+0xcc>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <HAL_TIM_PWM_MspInit+0xcc>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6a:	4a11      	ldr	r2, [pc, #68]	@ (8000fb0 <HAL_TIM_PWM_MspInit+0xcc>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f72:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <HAL_TIM_PWM_MspInit+0xcc>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f7e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8000f90:	230a      	movs	r3, #10
 8000f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f9e:	f001 fb3b 	bl	8002618 <HAL_GPIO_Init>
}
 8000fa2:	bf00      	nop
 8000fa4:	3730      	adds	r7, #48	@ 0x30
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40012c00 	.word	0x40012c00
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40000800 	.word	0x40000800

08000fb8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	@ 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a17      	ldr	r2, [pc, #92]	@ (8001034 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d128      	bne.n	800102c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fda:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <HAL_TIM_Encoder_MspInit+0x80>)
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fde:	4a16      	ldr	r2, [pc, #88]	@ (8001038 <HAL_TIM_Encoder_MspInit+0x80>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fe6:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <HAL_TIM_Encoder_MspInit+0x80>)
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <HAL_TIM_Encoder_MspInit+0x80>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff6:	4a10      	ldr	r2, [pc, #64]	@ (8001038 <HAL_TIM_Encoder_MspInit+0x80>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <HAL_TIM_Encoder_MspInit+0x80>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800100a:	2350      	movs	r3, #80	@ 0x50
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800101a:	2302      	movs	r3, #2
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001028:	f001 faf6 	bl	8002618 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800102c:	bf00      	nop
 800102e:	3728      	adds	r7, #40	@ 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40000400 	.word	0x40000400
 8001038:	40021000 	.word	0x40021000

0800103c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	@ 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a35      	ldr	r2, [pc, #212]	@ (8001130 <HAL_TIM_MspPostInit+0xf4>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d11e      	bne.n	800109c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	4b35      	ldr	r3, [pc, #212]	@ (8001134 <HAL_TIM_MspPostInit+0xf8>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001062:	4a34      	ldr	r2, [pc, #208]	@ (8001134 <HAL_TIM_MspPostInit+0xf8>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800106a:	4b32      	ldr	r3, [pc, #200]	@ (8001134 <HAL_TIM_MspPostInit+0xf8>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001076:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800107a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001088:	2306      	movs	r3, #6
 800108a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001096:	f001 fabf 	bl	8002618 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800109a:	e044      	b.n	8001126 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010a4:	d11d      	bne.n	80010e2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b23      	ldr	r3, [pc, #140]	@ (8001134 <HAL_TIM_MspPostInit+0xf8>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a22      	ldr	r2, [pc, #136]	@ (8001134 <HAL_TIM_MspPostInit+0xf8>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b20      	ldr	r3, [pc, #128]	@ (8001134 <HAL_TIM_MspPostInit+0xf8>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010be:	2303      	movs	r3, #3
 80010c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010ce:	2301      	movs	r3, #1
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010dc:	f001 fa9c 	bl	8002618 <HAL_GPIO_Init>
}
 80010e0:	e021      	b.n	8001126 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM4)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a14      	ldr	r2, [pc, #80]	@ (8001138 <HAL_TIM_MspPostInit+0xfc>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d11c      	bne.n	8001126 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <HAL_TIM_MspPostInit+0xf8>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f0:	4a10      	ldr	r2, [pc, #64]	@ (8001134 <HAL_TIM_MspPostInit+0xf8>)
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <HAL_TIM_MspPostInit+0xf8>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM4_CH4_M_SCTR_LIDAR_Pin;
 8001104:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001116:	2302      	movs	r3, #2
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM4_CH4_M_SCTR_LIDAR_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	4806      	ldr	r0, [pc, #24]	@ (800113c <HAL_TIM_MspPostInit+0x100>)
 8001122:	f001 fa79 	bl	8002618 <HAL_GPIO_Init>
}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	@ 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40012c00 	.word	0x40012c00
 8001134:	40021000 	.word	0x40021000
 8001138:	40000800 	.word	0x40000800
 800113c:	48000400 	.word	0x48000400

08001140 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b09c      	sub	sp, #112	@ 0x70
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001158:	f107 0318 	add.w	r3, r7, #24
 800115c:	2244      	movs	r2, #68	@ 0x44
 800115e:	2100      	movs	r1, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f004 f95b 	bl	800541c <memset>
  if(huart->Instance==USART2)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a3d      	ldr	r2, [pc, #244]	@ (8001260 <HAL_UART_MspInit+0x120>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d137      	bne.n	80011e0 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001170:	2302      	movs	r3, #2
 8001172:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001174:	2300      	movs	r3, #0
 8001176:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001178:	f107 0318 	add.w	r3, r7, #24
 800117c:	4618      	mov	r0, r3
 800117e:	f002 f9c3 	bl	8003508 <HAL_RCCEx_PeriphCLKConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001188:	f7ff fdea 	bl	8000d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800118c:	4b35      	ldr	r3, [pc, #212]	@ (8001264 <HAL_UART_MspInit+0x124>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001190:	4a34      	ldr	r2, [pc, #208]	@ (8001264 <HAL_UART_MspInit+0x124>)
 8001192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001196:	6593      	str	r3, [r2, #88]	@ 0x58
 8001198:	4b32      	ldr	r3, [pc, #200]	@ (8001264 <HAL_UART_MspInit+0x124>)
 800119a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800119c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001264 <HAL_UART_MspInit+0x124>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a8:	4a2e      	ldr	r2, [pc, #184]	@ (8001264 <HAL_UART_MspInit+0x124>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001264 <HAL_UART_MspInit+0x124>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011bc:	230c      	movs	r3, #12
 80011be:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011cc:	2307      	movs	r3, #7
 80011ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80011d4:	4619      	mov	r1, r3
 80011d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011da:	f001 fa1d 	bl	8002618 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011de:	e03b      	b.n	8001258 <HAL_UART_MspInit+0x118>
  else if(huart->Instance==USART3)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a20      	ldr	r2, [pc, #128]	@ (8001268 <HAL_UART_MspInit+0x128>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d136      	bne.n	8001258 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011ea:	2304      	movs	r3, #4
 80011ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f2:	f107 0318 	add.w	r3, r7, #24
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 f986 	bl	8003508 <HAL_RCCEx_PeriphCLKConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001202:	f7ff fdad 	bl	8000d60 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001206:	4b17      	ldr	r3, [pc, #92]	@ (8001264 <HAL_UART_MspInit+0x124>)
 8001208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800120a:	4a16      	ldr	r2, [pc, #88]	@ (8001264 <HAL_UART_MspInit+0x124>)
 800120c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001210:	6593      	str	r3, [r2, #88]	@ 0x58
 8001212:	4b14      	ldr	r3, [pc, #80]	@ (8001264 <HAL_UART_MspInit+0x124>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001216:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <HAL_UART_MspInit+0x124>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	4a10      	ldr	r2, [pc, #64]	@ (8001264 <HAL_UART_MspInit+0x124>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122a:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <HAL_UART_MspInit+0x124>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_TX_LIDAR_Pin|USART3_RX_LIDAR_Pin;
 8001236:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800123a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001248:	2307      	movs	r3, #7
 800124a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	@ (800126c <HAL_UART_MspInit+0x12c>)
 8001254:	f001 f9e0 	bl	8002618 <HAL_GPIO_Init>
}
 8001258:	bf00      	nop
 800125a:	3770      	adds	r7, #112	@ 0x70
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40004400 	.word	0x40004400
 8001264:	40021000 	.word	0x40021000
 8001268:	40004800 	.word	0x40004800
 800126c:	48000400 	.word	0x48000400

08001270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <NMI_Handler+0x4>

08001278 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <HardFault_Handler+0x4>

08001280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <MemManage_Handler+0x4>

08001288 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <BusFault_Handler+0x4>

08001290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <UsageFault_Handler+0x4>

08001298 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c6:	f000 f891 	bl	80013ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012d4:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <SystemInit+0x20>)
 80012d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012da:	4a05      	ldr	r2, [pc, #20]	@ (80012f0 <SystemInit+0x20>)
 80012dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012f4:	480d      	ldr	r0, [pc, #52]	@ (800132c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012f6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012f8:	f7ff ffea 	bl	80012d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012fc:	480c      	ldr	r0, [pc, #48]	@ (8001330 <LoopForever+0x6>)
  ldr r1, =_edata
 80012fe:	490d      	ldr	r1, [pc, #52]	@ (8001334 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001300:	4a0d      	ldr	r2, [pc, #52]	@ (8001338 <LoopForever+0xe>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001304:	e002      	b.n	800130c <LoopCopyDataInit>

08001306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130a:	3304      	adds	r3, #4

0800130c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800130c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001310:	d3f9      	bcc.n	8001306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001312:	4a0a      	ldr	r2, [pc, #40]	@ (800133c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001314:	4c0a      	ldr	r4, [pc, #40]	@ (8001340 <LoopForever+0x16>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001318:	e001      	b.n	800131e <LoopFillZerobss>

0800131a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800131c:	3204      	adds	r2, #4

0800131e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001320:	d3fb      	bcc.n	800131a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001322:	f004 f883 	bl	800542c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001326:	f7ff f8ef 	bl	8000508 <main>

0800132a <LoopForever>:

LoopForever:
    b LoopForever
 800132a:	e7fe      	b.n	800132a <LoopForever>
  ldr   r0, =_estack
 800132c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001334:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001338:	080054dc 	.word	0x080054dc
  ldr r2, =_sbss
 800133c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001340:	20000354 	.word	0x20000354

08001344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC1_2_IRQHandler>

08001346 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001350:	2003      	movs	r0, #3
 8001352:	f001 f92f 	bl	80025b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001356:	200f      	movs	r0, #15
 8001358:	f000 f80e 	bl	8001378 <HAL_InitTick>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	71fb      	strb	r3, [r7, #7]
 8001366:	e001      	b.n	800136c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001368:	f7ff fd00 	bl	8000d6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800136c:	79fb      	ldrb	r3, [r7, #7]

}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001384:	4b16      	ldr	r3, [pc, #88]	@ (80013e0 <HAL_InitTick+0x68>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d022      	beq.n	80013d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800138c:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <HAL_InitTick+0x6c>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b13      	ldr	r3, [pc, #76]	@ (80013e0 <HAL_InitTick+0x68>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001398:	fbb1 f3f3 	udiv	r3, r1, r3
 800139c:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a0:	4618      	mov	r0, r3
 80013a2:	f001 f92c 	bl	80025fe <HAL_SYSTICK_Config>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d10f      	bne.n	80013cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b0f      	cmp	r3, #15
 80013b0:	d809      	bhi.n	80013c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b2:	2200      	movs	r2, #0
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	f04f 30ff 	mov.w	r0, #4294967295
 80013ba:	f001 f906 	bl	80025ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013be:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <HAL_InitTick+0x70>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	e007      	b.n	80013d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	e004      	b.n	80013d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
 80013d0:	e001      	b.n	80013d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000008 	.word	0x20000008
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000004 	.word	0x20000004

080013ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f0:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <HAL_IncTick+0x1c>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b05      	ldr	r3, [pc, #20]	@ (800140c <HAL_IncTick+0x20>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a03      	ldr	r2, [pc, #12]	@ (8001408 <HAL_IncTick+0x1c>)
 80013fc:	6013      	str	r3, [r2, #0]
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	20000350 	.word	0x20000350
 800140c:	20000008 	.word	0x20000008

08001410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return uwTick;
 8001414:	4b03      	ldr	r3, [pc, #12]	@ (8001424 <HAL_GetTick+0x14>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000350 	.word	0x20000350

08001428 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	431a      	orrs	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	609a      	str	r2, [r3, #8]
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	609a      	str	r2, [r3, #8]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3360      	adds	r3, #96	@ 0x60
 80014a2:	461a      	mov	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <LL_ADC_SetOffset+0x44>)
 80014b2:	4013      	ands	r3, r2
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	4313      	orrs	r3, r2
 80014c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80014c8:	bf00      	nop
 80014ca:	371c      	adds	r7, #28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	03fff000 	.word	0x03fff000

080014d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3360      	adds	r3, #96	@ 0x60
 80014e6:	461a      	mov	r2, r3
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001504:	b480      	push	{r7}
 8001506:	b087      	sub	sp, #28
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3360      	adds	r3, #96	@ 0x60
 8001514:	461a      	mov	r2, r3
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	431a      	orrs	r2, r3
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800152e:	bf00      	nop
 8001530:	371c      	adds	r7, #28
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800153a:	b480      	push	{r7}
 800153c:	b087      	sub	sp, #28
 800153e:	af00      	add	r7, sp, #0
 8001540:	60f8      	str	r0, [r7, #12]
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	3360      	adds	r3, #96	@ 0x60
 800154a:	461a      	mov	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	431a      	orrs	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001564:	bf00      	nop
 8001566:	371c      	adds	r7, #28
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	3360      	adds	r3, #96	@ 0x60
 8001580:	461a      	mov	r2, r3
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	431a      	orrs	r2, r3
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800159a:	bf00      	nop
 800159c:	371c      	adds	r7, #28
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	615a      	str	r2, [r3, #20]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	3330      	adds	r3, #48	@ 0x30
 80015dc:	461a      	mov	r2, r3
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	f003 030c 	and.w	r3, r3, #12
 80015e8:	4413      	add	r3, r2
 80015ea:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	f003 031f 	and.w	r3, r3, #31
 80015f6:	211f      	movs	r1, #31
 80015f8:	fa01 f303 	lsl.w	r3, r1, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	401a      	ands	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	0e9b      	lsrs	r3, r3, #26
 8001604:	f003 011f 	and.w	r1, r3, #31
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	f003 031f 	and.w	r3, r3, #31
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	431a      	orrs	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001618:	bf00      	nop
 800161a:	371c      	adds	r7, #28
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001624:	b480      	push	{r7}
 8001626:	b087      	sub	sp, #28
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3314      	adds	r3, #20
 8001634:	461a      	mov	r2, r3
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	0e5b      	lsrs	r3, r3, #25
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	4413      	add	r3, r2
 8001642:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	0d1b      	lsrs	r3, r3, #20
 800164c:	f003 031f 	and.w	r3, r3, #31
 8001650:	2107      	movs	r1, #7
 8001652:	fa01 f303 	lsl.w	r3, r1, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	401a      	ands	r2, r3
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	0d1b      	lsrs	r3, r3, #20
 800165e:	f003 031f 	and.w	r3, r3, #31
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	fa01 f303 	lsl.w	r3, r1, r3
 8001668:	431a      	orrs	r2, r3
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800166e:	bf00      	nop
 8001670:	371c      	adds	r7, #28
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001694:	43db      	mvns	r3, r3
 8001696:	401a      	ands	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f003 0318 	and.w	r3, r3, #24
 800169e:	4908      	ldr	r1, [pc, #32]	@ (80016c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016a0:	40d9      	lsrs	r1, r3
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	400b      	ands	r3, r1
 80016a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016aa:	431a      	orrs	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	0007ffff 	.word	0x0007ffff

080016c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80016d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6093      	str	r3, [r2, #8]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80016f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016fc:	d101      	bne.n	8001702 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001720:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001724:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001748:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800174c:	d101      	bne.n	8001752 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b01      	cmp	r3, #1
 8001772:	d101      	bne.n	8001778 <LL_ADC_IsEnabled+0x18>
 8001774:	2301      	movs	r3, #1
 8001776:	e000      	b.n	800177a <LL_ADC_IsEnabled+0x1a>
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	2b04      	cmp	r3, #4
 8001798:	d101      	bne.n	800179e <LL_ADC_REG_IsConversionOngoing+0x18>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d101      	bne.n	80017c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b089      	sub	sp, #36	@ 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e167      	b.n	8001abe <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d109      	bne.n	8001810 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff fad9 	bl	8000db4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff67 	bl	80016e8 <LL_ADC_IsDeepPowerDownEnabled>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d004      	beq.n	800182a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff4d 	bl	80016c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff82 	bl	8001738 <LL_ADC_IsInternalRegulatorEnabled>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d115      	bne.n	8001866 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff66 	bl	8001710 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001844:	4ba0      	ldr	r3, [pc, #640]	@ (8001ac8 <HAL_ADC_Init+0x2f4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	099b      	lsrs	r3, r3, #6
 800184a:	4aa0      	ldr	r2, [pc, #640]	@ (8001acc <HAL_ADC_Init+0x2f8>)
 800184c:	fba2 2303 	umull	r2, r3, r2, r3
 8001850:	099b      	lsrs	r3, r3, #6
 8001852:	3301      	adds	r3, #1
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001858:	e002      	b.n	8001860 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	3b01      	subs	r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f9      	bne.n	800185a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff64 	bl	8001738 <LL_ADC_IsInternalRegulatorEnabled>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10d      	bne.n	8001892 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800187a:	f043 0210 	orr.w	r2, r3, #16
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001886:	f043 0201 	orr.w	r2, r3, #1
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff ff75 	bl	8001786 <LL_ADC_REG_IsConversionOngoing>
 800189c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f040 8100 	bne.w	8001aac <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f040 80fc 	bne.w	8001aac <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80018bc:	f043 0202 	orr.w	r2, r3, #2
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff49 	bl	8001760 <LL_ADC_IsEnabled>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d111      	bne.n	80018f8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018d4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80018d8:	f7ff ff42 	bl	8001760 <LL_ADC_IsEnabled>
 80018dc:	4604      	mov	r4, r0
 80018de:	487c      	ldr	r0, [pc, #496]	@ (8001ad0 <HAL_ADC_Init+0x2fc>)
 80018e0:	f7ff ff3e 	bl	8001760 <LL_ADC_IsEnabled>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4323      	orrs	r3, r4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d105      	bne.n	80018f8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	4619      	mov	r1, r3
 80018f2:	4878      	ldr	r0, [pc, #480]	@ (8001ad4 <HAL_ADC_Init+0x300>)
 80018f4:	f7ff fd98 	bl	8001428 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	7f5b      	ldrb	r3, [r3, #29]
 80018fc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001902:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001908:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800190e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001916:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001922:	2b01      	cmp	r3, #1
 8001924:	d106      	bne.n	8001934 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192a:	3b01      	subs	r3, #1
 800192c:	045b      	lsls	r3, r3, #17
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001938:	2b00      	cmp	r3, #0
 800193a:	d009      	beq.n	8001950 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001940:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001948:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	4b60      	ldr	r3, [pc, #384]	@ (8001ad8 <HAL_ADC_Init+0x304>)
 8001958:	4013      	ands	r3, r2
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	69b9      	ldr	r1, [r7, #24]
 8001960:	430b      	orrs	r3, r1
 8001962:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ff14 	bl	80017ac <LL_ADC_INJ_IsConversionOngoing>
 8001984:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d16d      	bne.n	8001a68 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d16a      	bne.n	8001a68 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001996:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800199e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80019ae:	f023 0302 	bic.w	r3, r3, #2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	69b9      	ldr	r1, [r7, #24]
 80019b8:	430b      	orrs	r3, r1
 80019ba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d017      	beq.n	80019f4 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	691a      	ldr	r2, [r3, #16]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80019d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80019dc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80019e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6911      	ldr	r1, [r2, #16]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	430b      	orrs	r3, r1
 80019ee:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80019f2:	e013      	b.n	8001a1c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691a      	ldr	r2, [r3, #16]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001a02:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a18:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d118      	bne.n	8001a58 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001a30:	f023 0304 	bic.w	r3, r3, #4
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a3c:	4311      	orrs	r1, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001a42:	4311      	orrs	r1, r2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f042 0201 	orr.w	r2, r2, #1
 8001a54:	611a      	str	r2, [r3, #16]
 8001a56:	e007      	b.n	8001a68 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	691a      	ldr	r2, [r3, #16]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0201 	bic.w	r2, r2, #1
 8001a66:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d10c      	bne.n	8001a8a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	f023 010f 	bic.w	r1, r3, #15
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	1e5a      	subs	r2, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a88:	e007      	b.n	8001a9a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 020f 	bic.w	r2, r2, #15
 8001a98:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a9e:	f023 0303 	bic.w	r3, r3, #3
 8001aa2:	f043 0201 	orr.w	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001aaa:	e007      	b.n	8001abc <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab0:	f043 0210 	orr.w	r2, r3, #16
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001abc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3724      	adds	r7, #36	@ 0x24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd90      	pop	{r4, r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	053e2d63 	.word	0x053e2d63
 8001ad0:	50000100 	.word	0x50000100
 8001ad4:	50000300 	.word	0x50000300
 8001ad8:	fff04007 	.word	0xfff04007

08001adc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b0b6      	sub	sp, #216	@ 0xd8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d101      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x22>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e3c8      	b.n	8002290 <HAL_ADC_ConfigChannel+0x7b4>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fe3b 	bl	8001786 <LL_ADC_REG_IsConversionOngoing>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 83ad 	bne.w	8002272 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6818      	ldr	r0, [r3, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	6859      	ldr	r1, [r3, #4]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	f7ff fd51 	bl	80015cc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fe29 	bl	8001786 <LL_ADC_REG_IsConversionOngoing>
 8001b34:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fe35 	bl	80017ac <LL_ADC_INJ_IsConversionOngoing>
 8001b42:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f040 81d9 	bne.w	8001f02 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f040 81d4 	bne.w	8001f02 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b62:	d10f      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f7ff fd58 	bl	8001624 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fd12 	bl	80015a6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001b82:	e00e      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6818      	ldr	r0, [r3, #0]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	6819      	ldr	r1, [r3, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	461a      	mov	r2, r3
 8001b92:	f7ff fd47 	bl	8001624 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fd02 	bl	80015a6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	08db      	lsrs	r3, r3, #3
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d022      	beq.n	8001c0a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	6919      	ldr	r1, [r3, #16]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001bd4:	f7ff fc5c 	bl	8001490 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	6919      	ldr	r1, [r3, #16]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	461a      	mov	r2, r3
 8001be6:	f7ff fca8 	bl	800153a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d102      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x124>
 8001bfa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bfe:	e000      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x126>
 8001c00:	2300      	movs	r3, #0
 8001c02:	461a      	mov	r2, r3
 8001c04:	f7ff fcb4 	bl	8001570 <LL_ADC_SetOffsetSaturation>
 8001c08:	e17b      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fc61 	bl	80014d8 <LL_ADC_GetOffsetChannel>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10a      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x15a>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2100      	movs	r1, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fc56 	bl	80014d8 <LL_ADC_GetOffsetChannel>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	0e9b      	lsrs	r3, r3, #26
 8001c30:	f003 021f 	and.w	r2, r3, #31
 8001c34:	e01e      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x198>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff fc4b 	bl	80014d8 <LL_ADC_GetOffsetChannel>
 8001c42:	4603      	mov	r3, r0
 8001c44:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c4c:	fa93 f3a3 	rbit	r3, r3
 8001c50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001c64:	2320      	movs	r3, #32
 8001c66:	e004      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001c68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c6c:	fab3 f383 	clz	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d105      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x1b0>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	0e9b      	lsrs	r3, r3, #26
 8001c86:	f003 031f 	and.w	r3, r3, #31
 8001c8a:	e018      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x1e2>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c98:	fa93 f3a3 	rbit	r3, r3
 8001c9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001ca0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001ca8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001cb0:	2320      	movs	r3, #32
 8001cb2:	e004      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001cb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cb8:	fab3 f383 	clz	r3, r3
 8001cbc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d106      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fc1a 	bl	8001504 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fbfe 	bl	80014d8 <LL_ADC_GetOffsetChannel>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10a      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x220>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2101      	movs	r1, #1
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fbf3 	bl	80014d8 <LL_ADC_GetOffsetChannel>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	0e9b      	lsrs	r3, r3, #26
 8001cf6:	f003 021f 	and.w	r2, r3, #31
 8001cfa:	e01e      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x25e>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2101      	movs	r1, #1
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fbe8 	bl	80014d8 <LL_ADC_GetOffsetChannel>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001d1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001d1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001d22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001d2a:	2320      	movs	r3, #32
 8001d2c:	e004      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001d2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d105      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x276>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	0e9b      	lsrs	r3, r3, #26
 8001d4c:	f003 031f 	and.w	r3, r3, #31
 8001d50:	e018      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x2a8>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d5e:	fa93 f3a3 	rbit	r3, r3
 8001d62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001d66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001d6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001d76:	2320      	movs	r3, #32
 8001d78:	e004      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001d7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d7e:	fab3 f383 	clz	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d106      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2101      	movs	r1, #1
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fbb7 	bl	8001504 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2102      	movs	r1, #2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fb9b 	bl	80014d8 <LL_ADC_GetOffsetChannel>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10a      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x2e6>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2102      	movs	r1, #2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fb90 	bl	80014d8 <LL_ADC_GetOffsetChannel>
 8001db8:	4603      	mov	r3, r0
 8001dba:	0e9b      	lsrs	r3, r3, #26
 8001dbc:	f003 021f 	and.w	r2, r3, #31
 8001dc0:	e01e      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x324>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2102      	movs	r1, #2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fb85 	bl	80014d8 <LL_ADC_GetOffsetChannel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001de0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001de4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001de8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001df0:	2320      	movs	r3, #32
 8001df2:	e004      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001df4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001df8:	fab3 f383 	clz	r3, r3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d105      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x33c>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	0e9b      	lsrs	r3, r3, #26
 8001e12:	f003 031f 	and.w	r3, r3, #31
 8001e16:	e016      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x36a>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001e2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001e30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001e38:	2320      	movs	r3, #32
 8001e3a:	e004      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e40:	fab3 f383 	clz	r3, r3
 8001e44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d106      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2102      	movs	r1, #2
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fb56 	bl	8001504 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2103      	movs	r1, #3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fb3a 	bl	80014d8 <LL_ADC_GetOffsetChannel>
 8001e64:	4603      	mov	r3, r0
 8001e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10a      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x3a8>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2103      	movs	r1, #3
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fb2f 	bl	80014d8 <LL_ADC_GetOffsetChannel>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	0e9b      	lsrs	r3, r3, #26
 8001e7e:	f003 021f 	and.w	r2, r3, #31
 8001e82:	e017      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x3d8>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2103      	movs	r1, #3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fb24 	bl	80014d8 <LL_ADC_GetOffsetChannel>
 8001e90:	4603      	mov	r3, r0
 8001e92:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001e9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e9e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001ea0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001ea6:	2320      	movs	r3, #32
 8001ea8:	e003      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001eaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001eac:	fab3 f383 	clz	r3, r3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d105      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x3f0>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	0e9b      	lsrs	r3, r3, #26
 8001ec6:	f003 031f 	and.w	r3, r3, #31
 8001eca:	e011      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x414>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ed4:	fa93 f3a3 	rbit	r3, r3
 8001ed8:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001eda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001edc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001ede:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001ee4:	2320      	movs	r3, #32
 8001ee6:	e003      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001ee8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001eea:	fab3 f383 	clz	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d106      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2103      	movs	r1, #3
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fb01 	bl	8001504 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff fc2a 	bl	8001760 <LL_ADC_IsEnabled>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f040 8140 	bne.w	8002194 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6818      	ldr	r0, [r3, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	6819      	ldr	r1, [r3, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	461a      	mov	r2, r3
 8001f22:	f7ff fbab 	bl	800167c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	4a8f      	ldr	r2, [pc, #572]	@ (8002168 <HAL_ADC_ConfigChannel+0x68c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	f040 8131 	bne.w	8002194 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10b      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x47e>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	0e9b      	lsrs	r3, r3, #26
 8001f48:	3301      	adds	r3, #1
 8001f4a:	f003 031f 	and.w	r3, r3, #31
 8001f4e:	2b09      	cmp	r3, #9
 8001f50:	bf94      	ite	ls
 8001f52:	2301      	movls	r3, #1
 8001f54:	2300      	movhi	r3, #0
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	e019      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x4b2>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001f68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f6a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001f6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001f72:	2320      	movs	r3, #32
 8001f74:	e003      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001f76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f78:	fab3 f383 	clz	r3, r3
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	3301      	adds	r3, #1
 8001f80:	f003 031f 	and.w	r3, r3, #31
 8001f84:	2b09      	cmp	r3, #9
 8001f86:	bf94      	ite	ls
 8001f88:	2301      	movls	r3, #1
 8001f8a:	2300      	movhi	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d079      	beq.n	8002086 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d107      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x4d2>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	0e9b      	lsrs	r3, r3, #26
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	069b      	lsls	r3, r3, #26
 8001fa8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fac:	e015      	b.n	8001fda <HAL_ADC_ConfigChannel+0x4fe>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001fbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fbe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	e003      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fcc:	fab3 f383 	clz	r3, r3
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	069b      	lsls	r3, r3, #26
 8001fd6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d109      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x51e>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	0e9b      	lsrs	r3, r3, #26
 8001fec:	3301      	adds	r3, #1
 8001fee:	f003 031f 	and.w	r3, r3, #31
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff8:	e017      	b.n	800202a <HAL_ADC_ConfigChannel+0x54e>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002008:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800200a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800200c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002012:	2320      	movs	r3, #32
 8002014:	e003      	b.n	800201e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002016:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	b2db      	uxtb	r3, r3
 800201e:	3301      	adds	r3, #1
 8002020:	f003 031f 	and.w	r3, r3, #31
 8002024:	2101      	movs	r1, #1
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	ea42 0103 	orr.w	r1, r2, r3
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10a      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x574>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	0e9b      	lsrs	r3, r3, #26
 8002040:	3301      	adds	r3, #1
 8002042:	f003 021f 	and.w	r2, r3, #31
 8002046:	4613      	mov	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4413      	add	r3, r2
 800204c:	051b      	lsls	r3, r3, #20
 800204e:	e018      	b.n	8002082 <HAL_ADC_ConfigChannel+0x5a6>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800205e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002060:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002068:	2320      	movs	r3, #32
 800206a:	e003      	b.n	8002074 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800206c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	3301      	adds	r3, #1
 8002076:	f003 021f 	and.w	r2, r3, #31
 800207a:	4613      	mov	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002082:	430b      	orrs	r3, r1
 8002084:	e081      	b.n	800218a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208e:	2b00      	cmp	r3, #0
 8002090:	d107      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x5c6>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	0e9b      	lsrs	r3, r3, #26
 8002098:	3301      	adds	r3, #1
 800209a:	069b      	lsls	r3, r3, #26
 800209c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020a0:	e015      	b.n	80020ce <HAL_ADC_ConfigChannel+0x5f2>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80020b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020b2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80020b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80020ba:	2320      	movs	r3, #32
 80020bc:	e003      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80020be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c0:	fab3 f383 	clz	r3, r3
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	3301      	adds	r3, #1
 80020c8:	069b      	lsls	r3, r3, #26
 80020ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d109      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x612>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	0e9b      	lsrs	r3, r3, #26
 80020e0:	3301      	adds	r3, #1
 80020e2:	f003 031f 	and.w	r3, r3, #31
 80020e6:	2101      	movs	r1, #1
 80020e8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ec:	e017      	b.n	800211e <HAL_ADC_ConfigChannel+0x642>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	fa93 f3a3 	rbit	r3, r3
 80020fa:	61fb      	str	r3, [r7, #28]
  return result;
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002106:	2320      	movs	r3, #32
 8002108:	e003      	b.n	8002112 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800210a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210c:	fab3 f383 	clz	r3, r3
 8002110:	b2db      	uxtb	r3, r3
 8002112:	3301      	adds	r3, #1
 8002114:	f003 031f 	and.w	r3, r3, #31
 8002118:	2101      	movs	r1, #1
 800211a:	fa01 f303 	lsl.w	r3, r1, r3
 800211e:	ea42 0103 	orr.w	r1, r2, r3
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10d      	bne.n	800214a <HAL_ADC_ConfigChannel+0x66e>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	0e9b      	lsrs	r3, r3, #26
 8002134:	3301      	adds	r3, #1
 8002136:	f003 021f 	and.w	r2, r3, #31
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	3b1e      	subs	r3, #30
 8002142:	051b      	lsls	r3, r3, #20
 8002144:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002148:	e01e      	b.n	8002188 <HAL_ADC_ConfigChannel+0x6ac>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	613b      	str	r3, [r7, #16]
  return result;
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d104      	bne.n	800216c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002162:	2320      	movs	r3, #32
 8002164:	e006      	b.n	8002174 <HAL_ADC_ConfigChannel+0x698>
 8002166:	bf00      	nop
 8002168:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	fab3 f383 	clz	r3, r3
 8002172:	b2db      	uxtb	r3, r3
 8002174:	3301      	adds	r3, #1
 8002176:	f003 021f 	and.w	r2, r3, #31
 800217a:	4613      	mov	r3, r2
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4413      	add	r3, r2
 8002180:	3b1e      	subs	r3, #30
 8002182:	051b      	lsls	r3, r3, #20
 8002184:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002188:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800218e:	4619      	mov	r1, r3
 8002190:	f7ff fa48 	bl	8001624 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b3f      	ldr	r3, [pc, #252]	@ (8002298 <HAL_ADC_ConfigChannel+0x7bc>)
 800219a:	4013      	ands	r3, r2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d071      	beq.n	8002284 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021a0:	483e      	ldr	r0, [pc, #248]	@ (800229c <HAL_ADC_ConfigChannel+0x7c0>)
 80021a2:	f7ff f967 	bl	8001474 <LL_ADC_GetCommonPathInternalCh>
 80021a6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a3c      	ldr	r2, [pc, #240]	@ (80022a0 <HAL_ADC_ConfigChannel+0x7c4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d004      	beq.n	80021be <HAL_ADC_ConfigChannel+0x6e2>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a3a      	ldr	r2, [pc, #232]	@ (80022a4 <HAL_ADC_ConfigChannel+0x7c8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d127      	bne.n	800220e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d121      	bne.n	800220e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021d2:	d157      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021dc:	4619      	mov	r1, r3
 80021de:	482f      	ldr	r0, [pc, #188]	@ (800229c <HAL_ADC_ConfigChannel+0x7c0>)
 80021e0:	f7ff f935 	bl	800144e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021e4:	4b30      	ldr	r3, [pc, #192]	@ (80022a8 <HAL_ADC_ConfigChannel+0x7cc>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	099b      	lsrs	r3, r3, #6
 80021ea:	4a30      	ldr	r2, [pc, #192]	@ (80022ac <HAL_ADC_ConfigChannel+0x7d0>)
 80021ec:	fba2 2303 	umull	r2, r3, r2, r3
 80021f0:	099b      	lsrs	r3, r3, #6
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	4613      	mov	r3, r2
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021fe:	e002      	b.n	8002206 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3b01      	subs	r3, #1
 8002204:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f9      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800220c:	e03a      	b.n	8002284 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a27      	ldr	r2, [pc, #156]	@ (80022b0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d113      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002218:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800221c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10d      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a22      	ldr	r2, [pc, #136]	@ (80022b4 <HAL_ADC_ConfigChannel+0x7d8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d02a      	beq.n	8002284 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800222e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002232:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002236:	4619      	mov	r1, r3
 8002238:	4818      	ldr	r0, [pc, #96]	@ (800229c <HAL_ADC_ConfigChannel+0x7c0>)
 800223a:	f7ff f908 	bl	800144e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800223e:	e021      	b.n	8002284 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a1c      	ldr	r2, [pc, #112]	@ (80022b8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d11c      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800224a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800224e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d116      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a16      	ldr	r2, [pc, #88]	@ (80022b4 <HAL_ADC_ConfigChannel+0x7d8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d011      	beq.n	8002284 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002260:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002264:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002268:	4619      	mov	r1, r3
 800226a:	480c      	ldr	r0, [pc, #48]	@ (800229c <HAL_ADC_ConfigChannel+0x7c0>)
 800226c:	f7ff f8ef 	bl	800144e <LL_ADC_SetCommonPathInternalCh>
 8002270:	e008      	b.n	8002284 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002276:	f043 0220 	orr.w	r2, r3, #32
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800228c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002290:	4618      	mov	r0, r3
 8002292:	37d8      	adds	r7, #216	@ 0xd8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	80080000 	.word	0x80080000
 800229c:	50000300 	.word	0x50000300
 80022a0:	c3210000 	.word	0xc3210000
 80022a4:	90c00010 	.word	0x90c00010
 80022a8:	20000000 	.word	0x20000000
 80022ac:	053e2d63 	.word	0x053e2d63
 80022b0:	c7520000 	.word	0xc7520000
 80022b4:	50000100 	.word	0x50000100
 80022b8:	cb840000 	.word	0xcb840000

080022bc <LL_ADC_IsEnabled>:
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <LL_ADC_IsEnabled+0x18>
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <LL_ADC_IsEnabled+0x1a>
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <LL_ADC_REG_IsConversionOngoing>:
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d101      	bne.n	80022fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b0a1      	sub	sp, #132	@ 0x84
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002322:	2302      	movs	r3, #2
 8002324:	e08b      	b.n	800243e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800232e:	2300      	movs	r3, #0
 8002330:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002332:	2300      	movs	r3, #0
 8002334:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800233e:	d102      	bne.n	8002346 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002340:	4b41      	ldr	r3, [pc, #260]	@ (8002448 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	e001      	b.n	800234a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10b      	bne.n	8002368 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002354:	f043 0220 	orr.w	r2, r3, #32
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e06a      	b.n	800243e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ffb9 	bl	80022e2 <LL_ADC_REG_IsConversionOngoing>
 8002370:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff ffb3 	bl	80022e2 <LL_ADC_REG_IsConversionOngoing>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d14c      	bne.n	800241c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002382:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002384:	2b00      	cmp	r3, #0
 8002386:	d149      	bne.n	800241c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002388:	4b30      	ldr	r3, [pc, #192]	@ (800244c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800238a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d028      	beq.n	80023e6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002394:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	6859      	ldr	r1, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023a6:	035b      	lsls	r3, r3, #13
 80023a8:	430b      	orrs	r3, r1
 80023aa:	431a      	orrs	r2, r3
 80023ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023b0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80023b4:	f7ff ff82 	bl	80022bc <LL_ADC_IsEnabled>
 80023b8:	4604      	mov	r4, r0
 80023ba:	4823      	ldr	r0, [pc, #140]	@ (8002448 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80023bc:	f7ff ff7e 	bl	80022bc <LL_ADC_IsEnabled>
 80023c0:	4603      	mov	r3, r0
 80023c2:	4323      	orrs	r3, r4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d133      	bne.n	8002430 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80023c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80023d0:	f023 030f 	bic.w	r3, r3, #15
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	6811      	ldr	r1, [r2, #0]
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	6892      	ldr	r2, [r2, #8]
 80023dc:	430a      	orrs	r2, r1
 80023de:	431a      	orrs	r2, r3
 80023e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023e2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80023e4:	e024      	b.n	8002430 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80023e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023f0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023f2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80023f6:	f7ff ff61 	bl	80022bc <LL_ADC_IsEnabled>
 80023fa:	4604      	mov	r4, r0
 80023fc:	4812      	ldr	r0, [pc, #72]	@ (8002448 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80023fe:	f7ff ff5d 	bl	80022bc <LL_ADC_IsEnabled>
 8002402:	4603      	mov	r3, r0
 8002404:	4323      	orrs	r3, r4
 8002406:	2b00      	cmp	r3, #0
 8002408:	d112      	bne.n	8002430 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800240a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002412:	f023 030f 	bic.w	r3, r3, #15
 8002416:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002418:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800241a:	e009      	b.n	8002430 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002420:	f043 0220 	orr.w	r2, r3, #32
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800242e:	e000      	b.n	8002432 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002430:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800243a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800243e:	4618      	mov	r0, r3
 8002440:	3784      	adds	r7, #132	@ 0x84
 8002442:	46bd      	mov	sp, r7
 8002444:	bd90      	pop	{r4, r7, pc}
 8002446:	bf00      	nop
 8002448:	50000100 	.word	0x50000100
 800244c:	50000300 	.word	0x50000300

08002450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002460:	4b0c      	ldr	r3, [pc, #48]	@ (8002494 <__NVIC_SetPriorityGrouping+0x44>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800246c:	4013      	ands	r3, r2
 800246e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002478:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800247c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002482:	4a04      	ldr	r2, [pc, #16]	@ (8002494 <__NVIC_SetPriorityGrouping+0x44>)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	60d3      	str	r3, [r2, #12]
}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800249c:	4b04      	ldr	r3, [pc, #16]	@ (80024b0 <__NVIC_GetPriorityGrouping+0x18>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	0a1b      	lsrs	r3, r3, #8
 80024a2:	f003 0307 	and.w	r3, r3, #7
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	6039      	str	r1, [r7, #0]
 80024be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	db0a      	blt.n	80024de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	490c      	ldr	r1, [pc, #48]	@ (8002500 <__NVIC_SetPriority+0x4c>)
 80024ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d2:	0112      	lsls	r2, r2, #4
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	440b      	add	r3, r1
 80024d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024dc:	e00a      	b.n	80024f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	4908      	ldr	r1, [pc, #32]	@ (8002504 <__NVIC_SetPriority+0x50>)
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	3b04      	subs	r3, #4
 80024ec:	0112      	lsls	r2, r2, #4
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	440b      	add	r3, r1
 80024f2:	761a      	strb	r2, [r3, #24]
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	e000e100 	.word	0xe000e100
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	@ 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f1c3 0307 	rsb	r3, r3, #7
 8002522:	2b04      	cmp	r3, #4
 8002524:	bf28      	it	cs
 8002526:	2304      	movcs	r3, #4
 8002528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3304      	adds	r3, #4
 800252e:	2b06      	cmp	r3, #6
 8002530:	d902      	bls.n	8002538 <NVIC_EncodePriority+0x30>
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3b03      	subs	r3, #3
 8002536:	e000      	b.n	800253a <NVIC_EncodePriority+0x32>
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800253c:	f04f 32ff 	mov.w	r2, #4294967295
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43da      	mvns	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	401a      	ands	r2, r3
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002550:	f04f 31ff 	mov.w	r1, #4294967295
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	fa01 f303 	lsl.w	r3, r1, r3
 800255a:	43d9      	mvns	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002560:	4313      	orrs	r3, r2
         );
}
 8002562:	4618      	mov	r0, r3
 8002564:	3724      	adds	r7, #36	@ 0x24
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3b01      	subs	r3, #1
 800257c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002580:	d301      	bcc.n	8002586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002582:	2301      	movs	r3, #1
 8002584:	e00f      	b.n	80025a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002586:	4a0a      	ldr	r2, [pc, #40]	@ (80025b0 <SysTick_Config+0x40>)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3b01      	subs	r3, #1
 800258c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800258e:	210f      	movs	r1, #15
 8002590:	f04f 30ff 	mov.w	r0, #4294967295
 8002594:	f7ff ff8e 	bl	80024b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002598:	4b05      	ldr	r3, [pc, #20]	@ (80025b0 <SysTick_Config+0x40>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800259e:	4b04      	ldr	r3, [pc, #16]	@ (80025b0 <SysTick_Config+0x40>)
 80025a0:	2207      	movs	r2, #7
 80025a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	e000e010 	.word	0xe000e010

080025b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff ff47 	bl	8002450 <__NVIC_SetPriorityGrouping>
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b086      	sub	sp, #24
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	4603      	mov	r3, r0
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	607a      	str	r2, [r7, #4]
 80025d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025d8:	f7ff ff5e 	bl	8002498 <__NVIC_GetPriorityGrouping>
 80025dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	68b9      	ldr	r1, [r7, #8]
 80025e2:	6978      	ldr	r0, [r7, #20]
 80025e4:	f7ff ff90 	bl	8002508 <NVIC_EncodePriority>
 80025e8:	4602      	mov	r2, r0
 80025ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ee:	4611      	mov	r1, r2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff5f 	bl	80024b4 <__NVIC_SetPriority>
}
 80025f6:	bf00      	nop
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ffb2 	bl	8002570 <SysTick_Config>
 800260c:	4603      	mov	r3, r0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002618:	b480      	push	{r7}
 800261a:	b087      	sub	sp, #28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002626:	e15a      	b.n	80028de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	2101      	movs	r1, #1
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	fa01 f303 	lsl.w	r3, r1, r3
 8002634:	4013      	ands	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 814c 	beq.w	80028d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d005      	beq.n	8002658 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002654:	2b02      	cmp	r3, #2
 8002656:	d130      	bne.n	80026ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	2203      	movs	r2, #3
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4013      	ands	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800268e:	2201      	movs	r2, #1
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	091b      	lsrs	r3, r3, #4
 80026a4:	f003 0201 	and.w	r2, r3, #1
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d017      	beq.n	80026f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	2203      	movs	r2, #3
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4013      	ands	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d123      	bne.n	800274a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	08da      	lsrs	r2, r3, #3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3208      	adds	r2, #8
 800270a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800270e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	220f      	movs	r2, #15
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	08da      	lsrs	r2, r3, #3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3208      	adds	r2, #8
 8002744:	6939      	ldr	r1, [r7, #16]
 8002746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	2203      	movs	r2, #3
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 0203 	and.w	r2, r3, #3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 80a6 	beq.w	80028d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278c:	4b5b      	ldr	r3, [pc, #364]	@ (80028fc <HAL_GPIO_Init+0x2e4>)
 800278e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002790:	4a5a      	ldr	r2, [pc, #360]	@ (80028fc <HAL_GPIO_Init+0x2e4>)
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	6613      	str	r3, [r2, #96]	@ 0x60
 8002798:	4b58      	ldr	r3, [pc, #352]	@ (80028fc <HAL_GPIO_Init+0x2e4>)
 800279a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027a4:	4a56      	ldr	r2, [pc, #344]	@ (8002900 <HAL_GPIO_Init+0x2e8>)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	089b      	lsrs	r3, r3, #2
 80027aa:	3302      	adds	r3, #2
 80027ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	220f      	movs	r2, #15
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80027ce:	d01f      	beq.n	8002810 <HAL_GPIO_Init+0x1f8>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a4c      	ldr	r2, [pc, #304]	@ (8002904 <HAL_GPIO_Init+0x2ec>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d019      	beq.n	800280c <HAL_GPIO_Init+0x1f4>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a4b      	ldr	r2, [pc, #300]	@ (8002908 <HAL_GPIO_Init+0x2f0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d013      	beq.n	8002808 <HAL_GPIO_Init+0x1f0>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a4a      	ldr	r2, [pc, #296]	@ (800290c <HAL_GPIO_Init+0x2f4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d00d      	beq.n	8002804 <HAL_GPIO_Init+0x1ec>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a49      	ldr	r2, [pc, #292]	@ (8002910 <HAL_GPIO_Init+0x2f8>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d007      	beq.n	8002800 <HAL_GPIO_Init+0x1e8>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a48      	ldr	r2, [pc, #288]	@ (8002914 <HAL_GPIO_Init+0x2fc>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d101      	bne.n	80027fc <HAL_GPIO_Init+0x1e4>
 80027f8:	2305      	movs	r3, #5
 80027fa:	e00a      	b.n	8002812 <HAL_GPIO_Init+0x1fa>
 80027fc:	2306      	movs	r3, #6
 80027fe:	e008      	b.n	8002812 <HAL_GPIO_Init+0x1fa>
 8002800:	2304      	movs	r3, #4
 8002802:	e006      	b.n	8002812 <HAL_GPIO_Init+0x1fa>
 8002804:	2303      	movs	r3, #3
 8002806:	e004      	b.n	8002812 <HAL_GPIO_Init+0x1fa>
 8002808:	2302      	movs	r3, #2
 800280a:	e002      	b.n	8002812 <HAL_GPIO_Init+0x1fa>
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <HAL_GPIO_Init+0x1fa>
 8002810:	2300      	movs	r3, #0
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	f002 0203 	and.w	r2, r2, #3
 8002818:	0092      	lsls	r2, r2, #2
 800281a:	4093      	lsls	r3, r2
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002822:	4937      	ldr	r1, [pc, #220]	@ (8002900 <HAL_GPIO_Init+0x2e8>)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	089b      	lsrs	r3, r3, #2
 8002828:	3302      	adds	r3, #2
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002830:	4b39      	ldr	r3, [pc, #228]	@ (8002918 <HAL_GPIO_Init+0x300>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	43db      	mvns	r3, r3
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002854:	4a30      	ldr	r2, [pc, #192]	@ (8002918 <HAL_GPIO_Init+0x300>)
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800285a:	4b2f      	ldr	r3, [pc, #188]	@ (8002918 <HAL_GPIO_Init+0x300>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	43db      	mvns	r3, r3
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800287e:	4a26      	ldr	r2, [pc, #152]	@ (8002918 <HAL_GPIO_Init+0x300>)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002884:	4b24      	ldr	r3, [pc, #144]	@ (8002918 <HAL_GPIO_Init+0x300>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	43db      	mvns	r3, r3
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4013      	ands	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002918 <HAL_GPIO_Init+0x300>)
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002918 <HAL_GPIO_Init+0x300>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028d2:	4a11      	ldr	r2, [pc, #68]	@ (8002918 <HAL_GPIO_Init+0x300>)
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	3301      	adds	r3, #1
 80028dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	fa22 f303 	lsr.w	r3, r2, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f47f ae9d 	bne.w	8002628 <HAL_GPIO_Init+0x10>
  }
}
 80028ee:	bf00      	nop
 80028f0:	bf00      	nop
 80028f2:	371c      	adds	r7, #28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	40021000 	.word	0x40021000
 8002900:	40010000 	.word	0x40010000
 8002904:	48000400 	.word	0x48000400
 8002908:	48000800 	.word	0x48000800
 800290c:	48000c00 	.word	0x48000c00
 8002910:	48001000 	.word	0x48001000
 8002914:	48001400 	.word	0x48001400
 8002918:	40010400 	.word	0x40010400

0800291c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	807b      	strh	r3, [r7, #2]
 8002928:	4613      	mov	r3, r2
 800292a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800292c:	787b      	ldrb	r3, [r7, #1]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002932:	887a      	ldrh	r2, [r7, #2]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002938:	e002      	b.n	8002940 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800293a:	887a      	ldrh	r2, [r7, #2]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d141      	bne.n	80029de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800295a:	4b4b      	ldr	r3, [pc, #300]	@ (8002a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002966:	d131      	bne.n	80029cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002968:	4b47      	ldr	r3, [pc, #284]	@ (8002a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800296a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800296e:	4a46      	ldr	r2, [pc, #280]	@ (8002a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002974:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002978:	4b43      	ldr	r3, [pc, #268]	@ (8002a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002980:	4a41      	ldr	r2, [pc, #260]	@ (8002a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002982:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002986:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002988:	4b40      	ldr	r3, [pc, #256]	@ (8002a8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2232      	movs	r2, #50	@ 0x32
 800298e:	fb02 f303 	mul.w	r3, r2, r3
 8002992:	4a3f      	ldr	r2, [pc, #252]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002994:	fba2 2303 	umull	r2, r3, r2, r3
 8002998:	0c9b      	lsrs	r3, r3, #18
 800299a:	3301      	adds	r3, #1
 800299c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800299e:	e002      	b.n	80029a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029a6:	4b38      	ldr	r3, [pc, #224]	@ (8002a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029b2:	d102      	bne.n	80029ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f2      	bne.n	80029a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029ba:	4b33      	ldr	r3, [pc, #204]	@ (8002a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029c6:	d158      	bne.n	8002a7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e057      	b.n	8002a7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80029dc:	e04d      	b.n	8002a7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029e4:	d141      	bne.n	8002a6a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029e6:	4b28      	ldr	r3, [pc, #160]	@ (8002a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029f2:	d131      	bne.n	8002a58 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029f4:	4b24      	ldr	r3, [pc, #144]	@ (8002a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029fa:	4a23      	ldr	r2, [pc, #140]	@ (8002a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a04:	4b20      	ldr	r3, [pc, #128]	@ (8002a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a0c:	4a1e      	ldr	r2, [pc, #120]	@ (8002a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a14:	4b1d      	ldr	r3, [pc, #116]	@ (8002a8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2232      	movs	r2, #50	@ 0x32
 8002a1a:	fb02 f303 	mul.w	r3, r2, r3
 8002a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a20:	fba2 2303 	umull	r2, r3, r2, r3
 8002a24:	0c9b      	lsrs	r3, r3, #18
 8002a26:	3301      	adds	r3, #1
 8002a28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a2a:	e002      	b.n	8002a32 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a32:	4b15      	ldr	r3, [pc, #84]	@ (8002a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a3e:	d102      	bne.n	8002a46 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f2      	bne.n	8002a2c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a46:	4b10      	ldr	r3, [pc, #64]	@ (8002a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a52:	d112      	bne.n	8002a7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e011      	b.n	8002a7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a58:	4b0b      	ldr	r3, [pc, #44]	@ (8002a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002a68:	e007      	b.n	8002a7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a6a:	4b07      	ldr	r3, [pc, #28]	@ (8002a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a72:	4a05      	ldr	r2, [pc, #20]	@ (8002a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a74:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a78:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	40007000 	.word	0x40007000
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	431bde83 	.word	0x431bde83

08002a94 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002a98:	4b05      	ldr	r3, [pc, #20]	@ (8002ab0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4a04      	ldr	r2, [pc, #16]	@ (8002ab0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aa2:	6093      	str	r3, [r2, #8]
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40007000 	.word	0x40007000

08002ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e2fe      	b.n	80030c4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d075      	beq.n	8002bbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ad2:	4b97      	ldr	r3, [pc, #604]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002adc:	4b94      	ldr	r3, [pc, #592]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	2b0c      	cmp	r3, #12
 8002aea:	d102      	bne.n	8002af2 <HAL_RCC_OscConfig+0x3e>
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d002      	beq.n	8002af8 <HAL_RCC_OscConfig+0x44>
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d10b      	bne.n	8002b10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af8:	4b8d      	ldr	r3, [pc, #564]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d05b      	beq.n	8002bbc <HAL_RCC_OscConfig+0x108>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d157      	bne.n	8002bbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e2d9      	b.n	80030c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b18:	d106      	bne.n	8002b28 <HAL_RCC_OscConfig+0x74>
 8002b1a:	4b85      	ldr	r3, [pc, #532]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a84      	ldr	r2, [pc, #528]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e01d      	b.n	8002b64 <HAL_RCC_OscConfig+0xb0>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCC_OscConfig+0x98>
 8002b32:	4b7f      	ldr	r3, [pc, #508]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a7e      	ldr	r2, [pc, #504]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002b38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	4b7c      	ldr	r3, [pc, #496]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a7b      	ldr	r2, [pc, #492]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	e00b      	b.n	8002b64 <HAL_RCC_OscConfig+0xb0>
 8002b4c:	4b78      	ldr	r3, [pc, #480]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a77      	ldr	r2, [pc, #476]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	4b75      	ldr	r3, [pc, #468]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a74      	ldr	r2, [pc, #464]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002b5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d013      	beq.n	8002b94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fc50 	bl	8001410 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b74:	f7fe fc4c 	bl	8001410 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b64      	cmp	r3, #100	@ 0x64
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e29e      	b.n	80030c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b86:	4b6a      	ldr	r3, [pc, #424]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0xc0>
 8002b92:	e014      	b.n	8002bbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7fe fc3c 	bl	8001410 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b9c:	f7fe fc38 	bl	8001410 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	@ 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e28a      	b.n	80030c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bae:	4b60      	ldr	r3, [pc, #384]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0xe8>
 8002bba:	e000      	b.n	8002bbe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d075      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bca:	4b59      	ldr	r3, [pc, #356]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bd4:	4b56      	ldr	r3, [pc, #344]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	2b0c      	cmp	r3, #12
 8002be2:	d102      	bne.n	8002bea <HAL_RCC_OscConfig+0x136>
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d002      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x13c>
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d11f      	bne.n	8002c30 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bf0:	4b4f      	ldr	r3, [pc, #316]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_OscConfig+0x154>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e25d      	b.n	80030c4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c08:	4b49      	ldr	r3, [pc, #292]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	4946      	ldr	r1, [pc, #280]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c1c:	4b45      	ldr	r3, [pc, #276]	@ (8002d34 <HAL_RCC_OscConfig+0x280>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fe fba9 	bl	8001378 <HAL_InitTick>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d043      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e249      	b.n	80030c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d023      	beq.n	8002c80 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c38:	4b3d      	ldr	r3, [pc, #244]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a3c      	ldr	r2, [pc, #240]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002c3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe fbe4 	bl	8001410 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4c:	f7fe fbe0 	bl	8001410 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e232      	b.n	80030c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c5e:	4b34      	ldr	r3, [pc, #208]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6a:	4b31      	ldr	r3, [pc, #196]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	061b      	lsls	r3, r3, #24
 8002c78:	492d      	ldr	r1, [pc, #180]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	604b      	str	r3, [r1, #4]
 8002c7e:	e01a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c80:	4b2b      	ldr	r3, [pc, #172]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a2a      	ldr	r2, [pc, #168]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002c86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fbc0 	bl	8001410 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c94:	f7fe fbbc 	bl	8001410 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e20e      	b.n	80030c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ca6:	4b22      	ldr	r3, [pc, #136]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x1e0>
 8002cb2:	e000      	b.n	8002cb6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cb4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d041      	beq.n	8002d46 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01c      	beq.n	8002d04 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cca:	4b19      	ldr	r3, [pc, #100]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cd0:	4a17      	ldr	r2, [pc, #92]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cda:	f7fe fb99 	bl	8001410 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce2:	f7fe fb95 	bl	8001410 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e1e7      	b.n	80030c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0ef      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x22e>
 8002d02:	e020      	b.n	8002d46 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d04:	4b0a      	ldr	r3, [pc, #40]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d0a:	4a09      	ldr	r2, [pc, #36]	@ (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002d0c:	f023 0301 	bic.w	r3, r3, #1
 8002d10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d14:	f7fe fb7c 	bl	8001410 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d1a:	e00d      	b.n	8002d38 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d1c:	f7fe fb78 	bl	8001410 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d906      	bls.n	8002d38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e1ca      	b.n	80030c4 <HAL_RCC_OscConfig+0x610>
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000
 8002d34:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d38:	4b8c      	ldr	r3, [pc, #560]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1ea      	bne.n	8002d1c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 80a6 	beq.w	8002ea0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d54:	2300      	movs	r3, #0
 8002d56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d58:	4b84      	ldr	r3, [pc, #528]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_RCC_OscConfig+0x2b4>
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <HAL_RCC_OscConfig+0x2b6>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00d      	beq.n	8002d8a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d72:	4a7e      	ldr	r2, [pc, #504]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d78:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d7a:	4b7c      	ldr	r3, [pc, #496]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d86:	2301      	movs	r3, #1
 8002d88:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d8a:	4b79      	ldr	r3, [pc, #484]	@ (8002f70 <HAL_RCC_OscConfig+0x4bc>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d118      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d96:	4b76      	ldr	r3, [pc, #472]	@ (8002f70 <HAL_RCC_OscConfig+0x4bc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a75      	ldr	r2, [pc, #468]	@ (8002f70 <HAL_RCC_OscConfig+0x4bc>)
 8002d9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da2:	f7fe fb35 	bl	8001410 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002daa:	f7fe fb31 	bl	8001410 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e183      	b.n	80030c4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dbc:	4b6c      	ldr	r3, [pc, #432]	@ (8002f70 <HAL_RCC_OscConfig+0x4bc>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d108      	bne.n	8002de2 <HAL_RCC_OscConfig+0x32e>
 8002dd0:	4b66      	ldr	r3, [pc, #408]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd6:	4a65      	ldr	r2, [pc, #404]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002de0:	e024      	b.n	8002e2c <HAL_RCC_OscConfig+0x378>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b05      	cmp	r3, #5
 8002de8:	d110      	bne.n	8002e0c <HAL_RCC_OscConfig+0x358>
 8002dea:	4b60      	ldr	r3, [pc, #384]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df0:	4a5e      	ldr	r2, [pc, #376]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002df2:	f043 0304 	orr.w	r3, r3, #4
 8002df6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dfa:	4b5c      	ldr	r3, [pc, #368]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e00:	4a5a      	ldr	r2, [pc, #360]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e0a:	e00f      	b.n	8002e2c <HAL_RCC_OscConfig+0x378>
 8002e0c:	4b57      	ldr	r3, [pc, #348]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e12:	4a56      	ldr	r2, [pc, #344]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002e14:	f023 0301 	bic.w	r3, r3, #1
 8002e18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e1c:	4b53      	ldr	r3, [pc, #332]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e22:	4a52      	ldr	r2, [pc, #328]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002e24:	f023 0304 	bic.w	r3, r3, #4
 8002e28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d016      	beq.n	8002e62 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e34:	f7fe faec 	bl	8001410 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e3a:	e00a      	b.n	8002e52 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e3c:	f7fe fae8 	bl	8001410 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e138      	b.n	80030c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e52:	4b46      	ldr	r3, [pc, #280]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0ed      	beq.n	8002e3c <HAL_RCC_OscConfig+0x388>
 8002e60:	e015      	b.n	8002e8e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e62:	f7fe fad5 	bl	8001410 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e68:	e00a      	b.n	8002e80 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6a:	f7fe fad1 	bl	8001410 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e121      	b.n	80030c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e80:	4b3a      	ldr	r3, [pc, #232]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1ed      	bne.n	8002e6a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e8e:	7ffb      	ldrb	r3, [r7, #31]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d105      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e94:	4b35      	ldr	r3, [pc, #212]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e98:	4a34      	ldr	r2, [pc, #208]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002e9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e9e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d03c      	beq.n	8002f26 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d01c      	beq.n	8002eee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002eba:	4a2c      	ldr	r2, [pc, #176]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec4:	f7fe faa4 	bl	8001410 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ecc:	f7fe faa0 	bl	8001410 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e0f2      	b.n	80030c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ede:	4b23      	ldr	r3, [pc, #140]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002ee0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0ef      	beq.n	8002ecc <HAL_RCC_OscConfig+0x418>
 8002eec:	e01b      	b.n	8002f26 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002eee:	4b1f      	ldr	r3, [pc, #124]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002ef0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efe:	f7fe fa87 	bl	8001410 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f06:	f7fe fa83 	bl	8001410 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e0d5      	b.n	80030c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f18:	4b14      	ldr	r3, [pc, #80]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002f1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1ef      	bne.n	8002f06 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 80c9 	beq.w	80030c2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f30:	4b0e      	ldr	r3, [pc, #56]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 030c 	and.w	r3, r3, #12
 8002f38:	2b0c      	cmp	r3, #12
 8002f3a:	f000 8083 	beq.w	8003044 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d15e      	bne.n	8003004 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f46:	4b09      	ldr	r3, [pc, #36]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a08      	ldr	r2, [pc, #32]	@ (8002f6c <HAL_RCC_OscConfig+0x4b8>)
 8002f4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f52:	f7fe fa5d 	bl	8001410 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f58:	e00c      	b.n	8002f74 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5a:	f7fe fa59 	bl	8001410 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d905      	bls.n	8002f74 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e0ab      	b.n	80030c4 <HAL_RCC_OscConfig+0x610>
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f74:	4b55      	ldr	r3, [pc, #340]	@ (80030cc <HAL_RCC_OscConfig+0x618>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1ec      	bne.n	8002f5a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f80:	4b52      	ldr	r3, [pc, #328]	@ (80030cc <HAL_RCC_OscConfig+0x618>)
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	4b52      	ldr	r3, [pc, #328]	@ (80030d0 <HAL_RCC_OscConfig+0x61c>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6a11      	ldr	r1, [r2, #32]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f90:	3a01      	subs	r2, #1
 8002f92:	0112      	lsls	r2, r2, #4
 8002f94:	4311      	orrs	r1, r2
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002f9a:	0212      	lsls	r2, r2, #8
 8002f9c:	4311      	orrs	r1, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002fa2:	0852      	lsrs	r2, r2, #1
 8002fa4:	3a01      	subs	r2, #1
 8002fa6:	0552      	lsls	r2, r2, #21
 8002fa8:	4311      	orrs	r1, r2
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002fae:	0852      	lsrs	r2, r2, #1
 8002fb0:	3a01      	subs	r2, #1
 8002fb2:	0652      	lsls	r2, r2, #25
 8002fb4:	4311      	orrs	r1, r2
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002fba:	06d2      	lsls	r2, r2, #27
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	4943      	ldr	r1, [pc, #268]	@ (80030cc <HAL_RCC_OscConfig+0x618>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fc4:	4b41      	ldr	r3, [pc, #260]	@ (80030cc <HAL_RCC_OscConfig+0x618>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a40      	ldr	r2, [pc, #256]	@ (80030cc <HAL_RCC_OscConfig+0x618>)
 8002fca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fd0:	4b3e      	ldr	r3, [pc, #248]	@ (80030cc <HAL_RCC_OscConfig+0x618>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	4a3d      	ldr	r2, [pc, #244]	@ (80030cc <HAL_RCC_OscConfig+0x618>)
 8002fd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fda:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fa18 	bl	8001410 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7fe fa14 	bl	8001410 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e066      	b.n	80030c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff6:	4b35      	ldr	r3, [pc, #212]	@ (80030cc <HAL_RCC_OscConfig+0x618>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x530>
 8003002:	e05e      	b.n	80030c2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003004:	4b31      	ldr	r3, [pc, #196]	@ (80030cc <HAL_RCC_OscConfig+0x618>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a30      	ldr	r2, [pc, #192]	@ (80030cc <HAL_RCC_OscConfig+0x618>)
 800300a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800300e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7fe f9fe 	bl	8001410 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003018:	f7fe f9fa 	bl	8001410 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e04c      	b.n	80030c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800302a:	4b28      	ldr	r3, [pc, #160]	@ (80030cc <HAL_RCC_OscConfig+0x618>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003036:	4b25      	ldr	r3, [pc, #148]	@ (80030cc <HAL_RCC_OscConfig+0x618>)
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	4924      	ldr	r1, [pc, #144]	@ (80030cc <HAL_RCC_OscConfig+0x618>)
 800303c:	4b25      	ldr	r3, [pc, #148]	@ (80030d4 <HAL_RCC_OscConfig+0x620>)
 800303e:	4013      	ands	r3, r2
 8003040:	60cb      	str	r3, [r1, #12]
 8003042:	e03e      	b.n	80030c2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e039      	b.n	80030c4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003050:	4b1e      	ldr	r3, [pc, #120]	@ (80030cc <HAL_RCC_OscConfig+0x618>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f003 0203 	and.w	r2, r3, #3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	429a      	cmp	r2, r3
 8003062:	d12c      	bne.n	80030be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306e:	3b01      	subs	r3, #1
 8003070:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d123      	bne.n	80030be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003080:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d11b      	bne.n	80030be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003090:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003092:	429a      	cmp	r2, r3
 8003094:	d113      	bne.n	80030be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a0:	085b      	lsrs	r3, r3, #1
 80030a2:	3b01      	subs	r3, #1
 80030a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d109      	bne.n	80030be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030b4:	085b      	lsrs	r3, r3, #1
 80030b6:	3b01      	subs	r3, #1
 80030b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d001      	beq.n	80030c2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3720      	adds	r7, #32
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40021000 	.word	0x40021000
 80030d0:	019f800c 	.word	0x019f800c
 80030d4:	feeefffc 	.word	0xfeeefffc

080030d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e11e      	b.n	800332e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030f0:	4b91      	ldr	r3, [pc, #580]	@ (8003338 <HAL_RCC_ClockConfig+0x260>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d910      	bls.n	8003120 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fe:	4b8e      	ldr	r3, [pc, #568]	@ (8003338 <HAL_RCC_ClockConfig+0x260>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 020f 	bic.w	r2, r3, #15
 8003106:	498c      	ldr	r1, [pc, #560]	@ (8003338 <HAL_RCC_ClockConfig+0x260>)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800310e:	4b8a      	ldr	r3, [pc, #552]	@ (8003338 <HAL_RCC_ClockConfig+0x260>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d001      	beq.n	8003120 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e106      	b.n	800332e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d073      	beq.n	8003214 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b03      	cmp	r3, #3
 8003132:	d129      	bne.n	8003188 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003134:	4b81      	ldr	r3, [pc, #516]	@ (800333c <HAL_RCC_ClockConfig+0x264>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0f4      	b.n	800332e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003144:	f000 f99c 	bl	8003480 <RCC_GetSysClockFreqFromPLLSource>
 8003148:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4a7c      	ldr	r2, [pc, #496]	@ (8003340 <HAL_RCC_ClockConfig+0x268>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d93f      	bls.n	80031d2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003152:	4b7a      	ldr	r3, [pc, #488]	@ (800333c <HAL_RCC_ClockConfig+0x264>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d009      	beq.n	8003172 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003166:	2b00      	cmp	r3, #0
 8003168:	d033      	beq.n	80031d2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800316e:	2b00      	cmp	r3, #0
 8003170:	d12f      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003172:	4b72      	ldr	r3, [pc, #456]	@ (800333c <HAL_RCC_ClockConfig+0x264>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800317a:	4a70      	ldr	r2, [pc, #448]	@ (800333c <HAL_RCC_ClockConfig+0x264>)
 800317c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003180:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003182:	2380      	movs	r3, #128	@ 0x80
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	e024      	b.n	80031d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d107      	bne.n	80031a0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003190:	4b6a      	ldr	r3, [pc, #424]	@ (800333c <HAL_RCC_ClockConfig+0x264>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0c6      	b.n	800332e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031a0:	4b66      	ldr	r3, [pc, #408]	@ (800333c <HAL_RCC_ClockConfig+0x264>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0be      	b.n	800332e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80031b0:	f000 f8ce 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 80031b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4a61      	ldr	r2, [pc, #388]	@ (8003340 <HAL_RCC_ClockConfig+0x268>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d909      	bls.n	80031d2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031be:	4b5f      	ldr	r3, [pc, #380]	@ (800333c <HAL_RCC_ClockConfig+0x264>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031c6:	4a5d      	ldr	r2, [pc, #372]	@ (800333c <HAL_RCC_ClockConfig+0x264>)
 80031c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80031ce:	2380      	movs	r3, #128	@ 0x80
 80031d0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031d2:	4b5a      	ldr	r3, [pc, #360]	@ (800333c <HAL_RCC_ClockConfig+0x264>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f023 0203 	bic.w	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4957      	ldr	r1, [pc, #348]	@ (800333c <HAL_RCC_ClockConfig+0x264>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e4:	f7fe f914 	bl	8001410 <HAL_GetTick>
 80031e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ea:	e00a      	b.n	8003202 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ec:	f7fe f910 	bl	8001410 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e095      	b.n	800332e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003202:	4b4e      	ldr	r3, [pc, #312]	@ (800333c <HAL_RCC_ClockConfig+0x264>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 020c 	and.w	r2, r3, #12
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	429a      	cmp	r2, r3
 8003212:	d1eb      	bne.n	80031ec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d023      	beq.n	8003268 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800322c:	4b43      	ldr	r3, [pc, #268]	@ (800333c <HAL_RCC_ClockConfig+0x264>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4a42      	ldr	r2, [pc, #264]	@ (800333c <HAL_RCC_ClockConfig+0x264>)
 8003232:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003236:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b00      	cmp	r3, #0
 8003242:	d007      	beq.n	8003254 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003244:	4b3d      	ldr	r3, [pc, #244]	@ (800333c <HAL_RCC_ClockConfig+0x264>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800324c:	4a3b      	ldr	r2, [pc, #236]	@ (800333c <HAL_RCC_ClockConfig+0x264>)
 800324e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003252:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003254:	4b39      	ldr	r3, [pc, #228]	@ (800333c <HAL_RCC_ClockConfig+0x264>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	4936      	ldr	r1, [pc, #216]	@ (800333c <HAL_RCC_ClockConfig+0x264>)
 8003262:	4313      	orrs	r3, r2
 8003264:	608b      	str	r3, [r1, #8]
 8003266:	e008      	b.n	800327a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	2b80      	cmp	r3, #128	@ 0x80
 800326c:	d105      	bne.n	800327a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800326e:	4b33      	ldr	r3, [pc, #204]	@ (800333c <HAL_RCC_ClockConfig+0x264>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	4a32      	ldr	r2, [pc, #200]	@ (800333c <HAL_RCC_ClockConfig+0x264>)
 8003274:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003278:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800327a:	4b2f      	ldr	r3, [pc, #188]	@ (8003338 <HAL_RCC_ClockConfig+0x260>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d21d      	bcs.n	80032c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003288:	4b2b      	ldr	r3, [pc, #172]	@ (8003338 <HAL_RCC_ClockConfig+0x260>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f023 020f 	bic.w	r2, r3, #15
 8003290:	4929      	ldr	r1, [pc, #164]	@ (8003338 <HAL_RCC_ClockConfig+0x260>)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	4313      	orrs	r3, r2
 8003296:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003298:	f7fe f8ba 	bl	8001410 <HAL_GetTick>
 800329c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800329e:	e00a      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a0:	f7fe f8b6 	bl	8001410 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e03b      	b.n	800332e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b6:	4b20      	ldr	r3, [pc, #128]	@ (8003338 <HAL_RCC_ClockConfig+0x260>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d1ed      	bne.n	80032a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d0:	4b1a      	ldr	r3, [pc, #104]	@ (800333c <HAL_RCC_ClockConfig+0x264>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4917      	ldr	r1, [pc, #92]	@ (800333c <HAL_RCC_ClockConfig+0x264>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d009      	beq.n	8003302 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ee:	4b13      	ldr	r3, [pc, #76]	@ (800333c <HAL_RCC_ClockConfig+0x264>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	490f      	ldr	r1, [pc, #60]	@ (800333c <HAL_RCC_ClockConfig+0x264>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003302:	f000 f825 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 8003306:	4602      	mov	r2, r0
 8003308:	4b0c      	ldr	r3, [pc, #48]	@ (800333c <HAL_RCC_ClockConfig+0x264>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	490c      	ldr	r1, [pc, #48]	@ (8003344 <HAL_RCC_ClockConfig+0x26c>)
 8003314:	5ccb      	ldrb	r3, [r1, r3]
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	fa22 f303 	lsr.w	r3, r2, r3
 800331e:	4a0a      	ldr	r2, [pc, #40]	@ (8003348 <HAL_RCC_ClockConfig+0x270>)
 8003320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003322:	4b0a      	ldr	r3, [pc, #40]	@ (800334c <HAL_RCC_ClockConfig+0x274>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f7fe f826 	bl	8001378 <HAL_InitTick>
 800332c:	4603      	mov	r3, r0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40022000 	.word	0x40022000
 800333c:	40021000 	.word	0x40021000
 8003340:	04c4b400 	.word	0x04c4b400
 8003344:	0800548c 	.word	0x0800548c
 8003348:	20000000 	.word	0x20000000
 800334c:	20000004 	.word	0x20000004

08003350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003356:	4b2c      	ldr	r3, [pc, #176]	@ (8003408 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 030c 	and.w	r3, r3, #12
 800335e:	2b04      	cmp	r3, #4
 8003360:	d102      	bne.n	8003368 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003362:	4b2a      	ldr	r3, [pc, #168]	@ (800340c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	e047      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003368:	4b27      	ldr	r3, [pc, #156]	@ (8003408 <HAL_RCC_GetSysClockFreq+0xb8>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 030c 	and.w	r3, r3, #12
 8003370:	2b08      	cmp	r3, #8
 8003372:	d102      	bne.n	800337a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003374:	4b25      	ldr	r3, [pc, #148]	@ (800340c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	e03e      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800337a:	4b23      	ldr	r3, [pc, #140]	@ (8003408 <HAL_RCC_GetSysClockFreq+0xb8>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
 8003382:	2b0c      	cmp	r3, #12
 8003384:	d136      	bne.n	80033f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003386:	4b20      	ldr	r3, [pc, #128]	@ (8003408 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003390:	4b1d      	ldr	r3, [pc, #116]	@ (8003408 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	3301      	adds	r3, #1
 800339c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d10c      	bne.n	80033be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033a4:	4a19      	ldr	r2, [pc, #100]	@ (800340c <HAL_RCC_GetSysClockFreq+0xbc>)
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ac:	4a16      	ldr	r2, [pc, #88]	@ (8003408 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033ae:	68d2      	ldr	r2, [r2, #12]
 80033b0:	0a12      	lsrs	r2, r2, #8
 80033b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80033b6:	fb02 f303 	mul.w	r3, r2, r3
 80033ba:	617b      	str	r3, [r7, #20]
      break;
 80033bc:	e00c      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033be:	4a13      	ldr	r2, [pc, #76]	@ (800340c <HAL_RCC_GetSysClockFreq+0xbc>)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c6:	4a10      	ldr	r2, [pc, #64]	@ (8003408 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033c8:	68d2      	ldr	r2, [r2, #12]
 80033ca:	0a12      	lsrs	r2, r2, #8
 80033cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80033d0:	fb02 f303 	mul.w	r3, r2, r3
 80033d4:	617b      	str	r3, [r7, #20]
      break;
 80033d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003408 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	0e5b      	lsrs	r3, r3, #25
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	3301      	adds	r3, #1
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	e001      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80033f8:	693b      	ldr	r3, [r7, #16]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	371c      	adds	r7, #28
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40021000 	.word	0x40021000
 800340c:	00f42400 	.word	0x00f42400

08003410 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003414:	4b03      	ldr	r3, [pc, #12]	@ (8003424 <HAL_RCC_GetHCLKFreq+0x14>)
 8003416:	681b      	ldr	r3, [r3, #0]
}
 8003418:	4618      	mov	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	20000000 	.word	0x20000000

08003428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800342c:	f7ff fff0 	bl	8003410 <HAL_RCC_GetHCLKFreq>
 8003430:	4602      	mov	r2, r0
 8003432:	4b06      	ldr	r3, [pc, #24]	@ (800344c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	0a1b      	lsrs	r3, r3, #8
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	4904      	ldr	r1, [pc, #16]	@ (8003450 <HAL_RCC_GetPCLK1Freq+0x28>)
 800343e:	5ccb      	ldrb	r3, [r1, r3]
 8003440:	f003 031f 	and.w	r3, r3, #31
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003448:	4618      	mov	r0, r3
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40021000 	.word	0x40021000
 8003450:	0800549c 	.word	0x0800549c

08003454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003458:	f7ff ffda 	bl	8003410 <HAL_RCC_GetHCLKFreq>
 800345c:	4602      	mov	r2, r0
 800345e:	4b06      	ldr	r3, [pc, #24]	@ (8003478 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	0adb      	lsrs	r3, r3, #11
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	4904      	ldr	r1, [pc, #16]	@ (800347c <HAL_RCC_GetPCLK2Freq+0x28>)
 800346a:	5ccb      	ldrb	r3, [r1, r3]
 800346c:	f003 031f 	and.w	r3, r3, #31
 8003470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003474:	4618      	mov	r0, r3
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40021000 	.word	0x40021000
 800347c:	0800549c 	.word	0x0800549c

08003480 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003486:	4b1e      	ldr	r3, [pc, #120]	@ (8003500 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003490:	4b1b      	ldr	r3, [pc, #108]	@ (8003500 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	091b      	lsrs	r3, r3, #4
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	3301      	adds	r3, #1
 800349c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d10c      	bne.n	80034be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034a4:	4a17      	ldr	r2, [pc, #92]	@ (8003504 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ac:	4a14      	ldr	r2, [pc, #80]	@ (8003500 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034ae:	68d2      	ldr	r2, [r2, #12]
 80034b0:	0a12      	lsrs	r2, r2, #8
 80034b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80034b6:	fb02 f303 	mul.w	r3, r2, r3
 80034ba:	617b      	str	r3, [r7, #20]
    break;
 80034bc:	e00c      	b.n	80034d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034be:	4a11      	ldr	r2, [pc, #68]	@ (8003504 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003500 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034c8:	68d2      	ldr	r2, [r2, #12]
 80034ca:	0a12      	lsrs	r2, r2, #8
 80034cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80034d0:	fb02 f303 	mul.w	r3, r2, r3
 80034d4:	617b      	str	r3, [r7, #20]
    break;
 80034d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034d8:	4b09      	ldr	r3, [pc, #36]	@ (8003500 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	0e5b      	lsrs	r3, r3, #25
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	3301      	adds	r3, #1
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80034f2:	687b      	ldr	r3, [r7, #4]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	371c      	adds	r7, #28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	40021000 	.word	0x40021000
 8003504:	00f42400 	.word	0x00f42400

08003508 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003510:	2300      	movs	r3, #0
 8003512:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003514:	2300      	movs	r3, #0
 8003516:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 8098 	beq.w	8003656 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003526:	2300      	movs	r3, #0
 8003528:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800352a:	4b43      	ldr	r3, [pc, #268]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800352c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10d      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003536:	4b40      	ldr	r3, [pc, #256]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353a:	4a3f      	ldr	r2, [pc, #252]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800353c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003540:	6593      	str	r3, [r2, #88]	@ 0x58
 8003542:	4b3d      	ldr	r3, [pc, #244]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800354e:	2301      	movs	r3, #1
 8003550:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003552:	4b3a      	ldr	r3, [pc, #232]	@ (800363c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a39      	ldr	r2, [pc, #228]	@ (800363c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800355c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800355e:	f7fd ff57 	bl	8001410 <HAL_GetTick>
 8003562:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003564:	e009      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003566:	f7fd ff53 	bl	8001410 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d902      	bls.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	74fb      	strb	r3, [r7, #19]
        break;
 8003578:	e005      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800357a:	4b30      	ldr	r3, [pc, #192]	@ (800363c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0ef      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003586:	7cfb      	ldrb	r3, [r7, #19]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d159      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800358c:	4b2a      	ldr	r3, [pc, #168]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800358e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003596:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d01e      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d019      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035a8:	4b23      	ldr	r3, [pc, #140]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035b4:	4b20      	ldr	r3, [pc, #128]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035d4:	4a18      	ldr	r2, [pc, #96]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d016      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e6:	f7fd ff13 	bl	8001410 <HAL_GetTick>
 80035ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ec:	e00b      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ee:	f7fd ff0f 	bl	8001410 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d902      	bls.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	74fb      	strb	r3, [r7, #19]
            break;
 8003604:	e006      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003606:	4b0c      	ldr	r3, [pc, #48]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0ec      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003614:	7cfb      	ldrb	r3, [r7, #19]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10b      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800361a:	4b07      	ldr	r3, [pc, #28]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800361c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003620:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003628:	4903      	ldr	r1, [pc, #12]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003630:	e008      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003632:	7cfb      	ldrb	r3, [r7, #19]
 8003634:	74bb      	strb	r3, [r7, #18]
 8003636:	e005      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003638:	40021000 	.word	0x40021000
 800363c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003640:	7cfb      	ldrb	r3, [r7, #19]
 8003642:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003644:	7c7b      	ldrb	r3, [r7, #17]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d105      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364a:	4ba6      	ldr	r3, [pc, #664]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800364c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364e:	4aa5      	ldr	r2, [pc, #660]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003650:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003654:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003662:	4ba0      	ldr	r3, [pc, #640]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003668:	f023 0203 	bic.w	r2, r3, #3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	499c      	ldr	r1, [pc, #624]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003684:	4b97      	ldr	r3, [pc, #604]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368a:	f023 020c 	bic.w	r2, r3, #12
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	4994      	ldr	r1, [pc, #592]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036a6:	4b8f      	ldr	r3, [pc, #572]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	498b      	ldr	r1, [pc, #556]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036c8:	4b86      	ldr	r3, [pc, #536]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	4983      	ldr	r1, [pc, #524]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036ea:	4b7e      	ldr	r3, [pc, #504]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	497a      	ldr	r1, [pc, #488]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800370c:	4b75      	ldr	r3, [pc, #468]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003712:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	4972      	ldr	r1, [pc, #456]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800372e:	4b6d      	ldr	r3, [pc, #436]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003734:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	4969      	ldr	r1, [pc, #420]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003750:	4b64      	ldr	r3, [pc, #400]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003756:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	4961      	ldr	r1, [pc, #388]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003772:	4b5c      	ldr	r3, [pc, #368]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003778:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003780:	4958      	ldr	r1, [pc, #352]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003790:	2b00      	cmp	r3, #0
 8003792:	d015      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003794:	4b53      	ldr	r3, [pc, #332]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800379a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a2:	4950      	ldr	r1, [pc, #320]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037b2:	d105      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037b4:	4b4b      	ldr	r3, [pc, #300]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4a4a      	ldr	r2, [pc, #296]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037be:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d015      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037cc:	4b45      	ldr	r3, [pc, #276]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037da:	4942      	ldr	r1, [pc, #264]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037ea:	d105      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ec:	4b3d      	ldr	r3, [pc, #244]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4a3c      	ldr	r2, [pc, #240]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037f6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d015      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003804:	4b37      	ldr	r3, [pc, #220]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800380a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003812:	4934      	ldr	r1, [pc, #208]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003822:	d105      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003824:	4b2f      	ldr	r3, [pc, #188]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4a2e      	ldr	r2, [pc, #184]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800382a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800382e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d015      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800383c:	4b29      	ldr	r3, [pc, #164]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003842:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800384a:	4926      	ldr	r1, [pc, #152]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003856:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800385a:	d105      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800385c:	4b21      	ldr	r3, [pc, #132]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	4a20      	ldr	r2, [pc, #128]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003862:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003866:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d015      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003874:	4b1b      	ldr	r3, [pc, #108]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003882:	4918      	ldr	r1, [pc, #96]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003892:	d105      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003894:	4b13      	ldr	r3, [pc, #76]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4a12      	ldr	r2, [pc, #72]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800389a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800389e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d015      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038ac:	4b0d      	ldr	r3, [pc, #52]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ba:	490a      	ldr	r1, [pc, #40]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038ca:	d105      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80038cc:	4b05      	ldr	r3, [pc, #20]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	4a04      	ldr	r2, [pc, #16]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80038d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40021000 	.word	0x40021000

080038e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e09d      	b.n	8003a36 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d108      	bne.n	8003914 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800390a:	d009      	beq.n	8003920 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	61da      	str	r2, [r3, #28]
 8003912:	e005      	b.n	8003920 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d106      	bne.n	8003940 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7fd fa8e 	bl	8000e5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003956:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003960:	d902      	bls.n	8003968 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	e002      	b.n	800396e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003968:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800396c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003976:	d007      	beq.n	8003988 <HAL_SPI_Init+0xa0>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003980:	d002      	beq.n	8003988 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ca:	ea42 0103 	orr.w	r1, r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	0c1b      	lsrs	r3, r3, #16
 80039e4:	f003 0204 	and.w	r2, r3, #4
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ec:	f003 0310 	and.w	r3, r3, #16
 80039f0:	431a      	orrs	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003a04:	ea42 0103 	orr.w	r1, r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69da      	ldr	r2, [r3, #28]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e049      	b.n	8003ae4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d106      	bne.n	8003a6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7fd fa3d 	bl	8000ee4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	f000 f9ef 	bl	8003e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e097      	b.n	8003c30 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d106      	bne.n	8003b1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7fd fa4f 	bl	8000fb8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6812      	ldr	r2, [r2, #0]
 8003b2c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003b30:	f023 0307 	bic.w	r3, r3, #7
 8003b34:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4610      	mov	r0, r2
 8003b42:	f000 f98d 	bl	8003e60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b6e:	f023 0303 	bic.w	r3, r3, #3
 8003b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003b8c:	f023 030c 	bic.w	r3, r3, #12
 8003b90:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	021b      	lsls	r3, r3, #8
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	011a      	lsls	r2, r3, #4
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	031b      	lsls	r3, r3, #12
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003bca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003bd2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	4313      	orrs	r3, r2
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e0ff      	b.n	8003e56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b14      	cmp	r3, #20
 8003c62:	f200 80f0 	bhi.w	8003e46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c66:	a201      	add	r2, pc, #4	@ (adr r2, 8003c6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6c:	08003cc1 	.word	0x08003cc1
 8003c70:	08003e47 	.word	0x08003e47
 8003c74:	08003e47 	.word	0x08003e47
 8003c78:	08003e47 	.word	0x08003e47
 8003c7c:	08003d01 	.word	0x08003d01
 8003c80:	08003e47 	.word	0x08003e47
 8003c84:	08003e47 	.word	0x08003e47
 8003c88:	08003e47 	.word	0x08003e47
 8003c8c:	08003d43 	.word	0x08003d43
 8003c90:	08003e47 	.word	0x08003e47
 8003c94:	08003e47 	.word	0x08003e47
 8003c98:	08003e47 	.word	0x08003e47
 8003c9c:	08003d83 	.word	0x08003d83
 8003ca0:	08003e47 	.word	0x08003e47
 8003ca4:	08003e47 	.word	0x08003e47
 8003ca8:	08003e47 	.word	0x08003e47
 8003cac:	08003dc5 	.word	0x08003dc5
 8003cb0:	08003e47 	.word	0x08003e47
 8003cb4:	08003e47 	.word	0x08003e47
 8003cb8:	08003e47 	.word	0x08003e47
 8003cbc:	08003e05 	.word	0x08003e05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68b9      	ldr	r1, [r7, #8]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 f966 	bl	8003f98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699a      	ldr	r2, [r3, #24]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0208 	orr.w	r2, r2, #8
 8003cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699a      	ldr	r2, [r3, #24]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0204 	bic.w	r2, r2, #4
 8003cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6999      	ldr	r1, [r3, #24]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	619a      	str	r2, [r3, #24]
      break;
 8003cfe:	e0a5      	b.n	8003e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68b9      	ldr	r1, [r7, #8]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 f9d6 	bl	80040b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699a      	ldr	r2, [r3, #24]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6999      	ldr	r1, [r3, #24]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	021a      	lsls	r2, r3, #8
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	619a      	str	r2, [r3, #24]
      break;
 8003d40:	e084      	b.n	8003e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68b9      	ldr	r1, [r7, #8]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 fa3f 	bl	80041cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	69da      	ldr	r2, [r3, #28]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f042 0208 	orr.w	r2, r2, #8
 8003d5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	69da      	ldr	r2, [r3, #28]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0204 	bic.w	r2, r2, #4
 8003d6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	69d9      	ldr	r1, [r3, #28]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	61da      	str	r2, [r3, #28]
      break;
 8003d80:	e064      	b.n	8003e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68b9      	ldr	r1, [r7, #8]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 faa7 	bl	80042dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69da      	ldr	r2, [r3, #28]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69d9      	ldr	r1, [r3, #28]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	021a      	lsls	r2, r3, #8
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	61da      	str	r2, [r3, #28]
      break;
 8003dc2:	e043      	b.n	8003e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68b9      	ldr	r1, [r7, #8]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fb10 	bl	80043f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0208 	orr.w	r2, r2, #8
 8003dde:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0204 	bic.w	r2, r2, #4
 8003dee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	691a      	ldr	r2, [r3, #16]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003e02:	e023      	b.n	8003e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fb54 	bl	80044b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e1e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e2e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	021a      	lsls	r2, r3, #8
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003e44:	e002      	b.n	8003e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	75fb      	strb	r3, [r7, #23]
      break;
 8003e4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop

08003e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a42      	ldr	r2, [pc, #264]	@ (8003f7c <TIM_Base_SetConfig+0x11c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00f      	beq.n	8003e98 <TIM_Base_SetConfig+0x38>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e7e:	d00b      	beq.n	8003e98 <TIM_Base_SetConfig+0x38>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a3f      	ldr	r2, [pc, #252]	@ (8003f80 <TIM_Base_SetConfig+0x120>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d007      	beq.n	8003e98 <TIM_Base_SetConfig+0x38>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a3e      	ldr	r2, [pc, #248]	@ (8003f84 <TIM_Base_SetConfig+0x124>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d003      	beq.n	8003e98 <TIM_Base_SetConfig+0x38>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a3d      	ldr	r2, [pc, #244]	@ (8003f88 <TIM_Base_SetConfig+0x128>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d108      	bne.n	8003eaa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a33      	ldr	r2, [pc, #204]	@ (8003f7c <TIM_Base_SetConfig+0x11c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d01b      	beq.n	8003eea <TIM_Base_SetConfig+0x8a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb8:	d017      	beq.n	8003eea <TIM_Base_SetConfig+0x8a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a30      	ldr	r2, [pc, #192]	@ (8003f80 <TIM_Base_SetConfig+0x120>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d013      	beq.n	8003eea <TIM_Base_SetConfig+0x8a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a2f      	ldr	r2, [pc, #188]	@ (8003f84 <TIM_Base_SetConfig+0x124>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00f      	beq.n	8003eea <TIM_Base_SetConfig+0x8a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a2e      	ldr	r2, [pc, #184]	@ (8003f88 <TIM_Base_SetConfig+0x128>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00b      	beq.n	8003eea <TIM_Base_SetConfig+0x8a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a2d      	ldr	r2, [pc, #180]	@ (8003f8c <TIM_Base_SetConfig+0x12c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d007      	beq.n	8003eea <TIM_Base_SetConfig+0x8a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a2c      	ldr	r2, [pc, #176]	@ (8003f90 <TIM_Base_SetConfig+0x130>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d003      	beq.n	8003eea <TIM_Base_SetConfig+0x8a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a2b      	ldr	r2, [pc, #172]	@ (8003f94 <TIM_Base_SetConfig+0x134>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d108      	bne.n	8003efc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a16      	ldr	r2, [pc, #88]	@ (8003f7c <TIM_Base_SetConfig+0x11c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00f      	beq.n	8003f48 <TIM_Base_SetConfig+0xe8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a17      	ldr	r2, [pc, #92]	@ (8003f88 <TIM_Base_SetConfig+0x128>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00b      	beq.n	8003f48 <TIM_Base_SetConfig+0xe8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a16      	ldr	r2, [pc, #88]	@ (8003f8c <TIM_Base_SetConfig+0x12c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d007      	beq.n	8003f48 <TIM_Base_SetConfig+0xe8>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a15      	ldr	r2, [pc, #84]	@ (8003f90 <TIM_Base_SetConfig+0x130>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d003      	beq.n	8003f48 <TIM_Base_SetConfig+0xe8>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a14      	ldr	r2, [pc, #80]	@ (8003f94 <TIM_Base_SetConfig+0x134>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d103      	bne.n	8003f50 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d105      	bne.n	8003f6e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f023 0201 	bic.w	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	611a      	str	r2, [r3, #16]
  }
}
 8003f6e:	bf00      	nop
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40012c00 	.word	0x40012c00
 8003f80:	40000400 	.word	0x40000400
 8003f84:	40000800 	.word	0x40000800
 8003f88:	40013400 	.word	0x40013400
 8003f8c:	40014000 	.word	0x40014000
 8003f90:	40014400 	.word	0x40014400
 8003f94:	40014800 	.word	0x40014800

08003f98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f023 0201 	bic.w	r2, r3, #1
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0303 	bic.w	r3, r3, #3
 8003fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f023 0302 	bic.w	r3, r3, #2
 8003fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a2c      	ldr	r2, [pc, #176]	@ (80040a4 <TIM_OC1_SetConfig+0x10c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d00f      	beq.n	8004018 <TIM_OC1_SetConfig+0x80>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a2b      	ldr	r2, [pc, #172]	@ (80040a8 <TIM_OC1_SetConfig+0x110>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00b      	beq.n	8004018 <TIM_OC1_SetConfig+0x80>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a2a      	ldr	r2, [pc, #168]	@ (80040ac <TIM_OC1_SetConfig+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d007      	beq.n	8004018 <TIM_OC1_SetConfig+0x80>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a29      	ldr	r2, [pc, #164]	@ (80040b0 <TIM_OC1_SetConfig+0x118>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d003      	beq.n	8004018 <TIM_OC1_SetConfig+0x80>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a28      	ldr	r2, [pc, #160]	@ (80040b4 <TIM_OC1_SetConfig+0x11c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d10c      	bne.n	8004032 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f023 0308 	bic.w	r3, r3, #8
 800401e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f023 0304 	bic.w	r3, r3, #4
 8004030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a1b      	ldr	r2, [pc, #108]	@ (80040a4 <TIM_OC1_SetConfig+0x10c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00f      	beq.n	800405a <TIM_OC1_SetConfig+0xc2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a1a      	ldr	r2, [pc, #104]	@ (80040a8 <TIM_OC1_SetConfig+0x110>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d00b      	beq.n	800405a <TIM_OC1_SetConfig+0xc2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a19      	ldr	r2, [pc, #100]	@ (80040ac <TIM_OC1_SetConfig+0x114>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d007      	beq.n	800405a <TIM_OC1_SetConfig+0xc2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a18      	ldr	r2, [pc, #96]	@ (80040b0 <TIM_OC1_SetConfig+0x118>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d003      	beq.n	800405a <TIM_OC1_SetConfig+0xc2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a17      	ldr	r2, [pc, #92]	@ (80040b4 <TIM_OC1_SetConfig+0x11c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d111      	bne.n	800407e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	621a      	str	r2, [r3, #32]
}
 8004098:	bf00      	nop
 800409a:	371c      	adds	r7, #28
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	40012c00 	.word	0x40012c00
 80040a8:	40013400 	.word	0x40013400
 80040ac:	40014000 	.word	0x40014000
 80040b0:	40014400 	.word	0x40014400
 80040b4:	40014800 	.word	0x40014800

080040b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	f023 0210 	bic.w	r2, r3, #16
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	021b      	lsls	r3, r3, #8
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f023 0320 	bic.w	r3, r3, #32
 8004106:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	4313      	orrs	r3, r2
 8004112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a28      	ldr	r2, [pc, #160]	@ (80041b8 <TIM_OC2_SetConfig+0x100>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d003      	beq.n	8004124 <TIM_OC2_SetConfig+0x6c>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a27      	ldr	r2, [pc, #156]	@ (80041bc <TIM_OC2_SetConfig+0x104>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d10d      	bne.n	8004140 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800412a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800413e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a1d      	ldr	r2, [pc, #116]	@ (80041b8 <TIM_OC2_SetConfig+0x100>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00f      	beq.n	8004168 <TIM_OC2_SetConfig+0xb0>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a1c      	ldr	r2, [pc, #112]	@ (80041bc <TIM_OC2_SetConfig+0x104>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00b      	beq.n	8004168 <TIM_OC2_SetConfig+0xb0>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a1b      	ldr	r2, [pc, #108]	@ (80041c0 <TIM_OC2_SetConfig+0x108>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d007      	beq.n	8004168 <TIM_OC2_SetConfig+0xb0>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a1a      	ldr	r2, [pc, #104]	@ (80041c4 <TIM_OC2_SetConfig+0x10c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d003      	beq.n	8004168 <TIM_OC2_SetConfig+0xb0>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a19      	ldr	r2, [pc, #100]	@ (80041c8 <TIM_OC2_SetConfig+0x110>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d113      	bne.n	8004190 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800416e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004176:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40012c00 	.word	0x40012c00
 80041bc:	40013400 	.word	0x40013400
 80041c0:	40014000 	.word	0x40014000
 80041c4:	40014400 	.word	0x40014400
 80041c8:	40014800 	.word	0x40014800

080041cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0303 	bic.w	r3, r3, #3
 8004206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	021b      	lsls	r3, r3, #8
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	4313      	orrs	r3, r2
 8004224:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a27      	ldr	r2, [pc, #156]	@ (80042c8 <TIM_OC3_SetConfig+0xfc>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d003      	beq.n	8004236 <TIM_OC3_SetConfig+0x6a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a26      	ldr	r2, [pc, #152]	@ (80042cc <TIM_OC3_SetConfig+0x100>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d10d      	bne.n	8004252 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800423c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	021b      	lsls	r3, r3, #8
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	4313      	orrs	r3, r2
 8004248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a1c      	ldr	r2, [pc, #112]	@ (80042c8 <TIM_OC3_SetConfig+0xfc>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d00f      	beq.n	800427a <TIM_OC3_SetConfig+0xae>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a1b      	ldr	r2, [pc, #108]	@ (80042cc <TIM_OC3_SetConfig+0x100>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d00b      	beq.n	800427a <TIM_OC3_SetConfig+0xae>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a1a      	ldr	r2, [pc, #104]	@ (80042d0 <TIM_OC3_SetConfig+0x104>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d007      	beq.n	800427a <TIM_OC3_SetConfig+0xae>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a19      	ldr	r2, [pc, #100]	@ (80042d4 <TIM_OC3_SetConfig+0x108>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d003      	beq.n	800427a <TIM_OC3_SetConfig+0xae>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a18      	ldr	r2, [pc, #96]	@ (80042d8 <TIM_OC3_SetConfig+0x10c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d113      	bne.n	80042a2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	621a      	str	r2, [r3, #32]
}
 80042bc:	bf00      	nop
 80042be:	371c      	adds	r7, #28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	40012c00 	.word	0x40012c00
 80042cc:	40013400 	.word	0x40013400
 80042d0:	40014000 	.word	0x40014000
 80042d4:	40014400 	.word	0x40014400
 80042d8:	40014800 	.word	0x40014800

080042dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800430a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800430e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	021b      	lsls	r3, r3, #8
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800432a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	031b      	lsls	r3, r3, #12
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a28      	ldr	r2, [pc, #160]	@ (80043dc <TIM_OC4_SetConfig+0x100>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d003      	beq.n	8004348 <TIM_OC4_SetConfig+0x6c>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a27      	ldr	r2, [pc, #156]	@ (80043e0 <TIM_OC4_SetConfig+0x104>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d10d      	bne.n	8004364 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800434e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	031b      	lsls	r3, r3, #12
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004362:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a1d      	ldr	r2, [pc, #116]	@ (80043dc <TIM_OC4_SetConfig+0x100>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00f      	beq.n	800438c <TIM_OC4_SetConfig+0xb0>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a1c      	ldr	r2, [pc, #112]	@ (80043e0 <TIM_OC4_SetConfig+0x104>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00b      	beq.n	800438c <TIM_OC4_SetConfig+0xb0>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a1b      	ldr	r2, [pc, #108]	@ (80043e4 <TIM_OC4_SetConfig+0x108>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d007      	beq.n	800438c <TIM_OC4_SetConfig+0xb0>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a1a      	ldr	r2, [pc, #104]	@ (80043e8 <TIM_OC4_SetConfig+0x10c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d003      	beq.n	800438c <TIM_OC4_SetConfig+0xb0>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a19      	ldr	r2, [pc, #100]	@ (80043ec <TIM_OC4_SetConfig+0x110>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d113      	bne.n	80043b4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004392:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800439a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	019b      	lsls	r3, r3, #6
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	019b      	lsls	r3, r3, #6
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	621a      	str	r2, [r3, #32]
}
 80043ce:	bf00      	nop
 80043d0:	371c      	adds	r7, #28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40012c00 	.word	0x40012c00
 80043e0:	40013400 	.word	0x40013400
 80043e4:	40014000 	.word	0x40014000
 80043e8:	40014400 	.word	0x40014400
 80043ec:	40014800 	.word	0x40014800

080043f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800441e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004434:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	041b      	lsls	r3, r3, #16
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a17      	ldr	r2, [pc, #92]	@ (80044a4 <TIM_OC5_SetConfig+0xb4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d00f      	beq.n	800446a <TIM_OC5_SetConfig+0x7a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a16      	ldr	r2, [pc, #88]	@ (80044a8 <TIM_OC5_SetConfig+0xb8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00b      	beq.n	800446a <TIM_OC5_SetConfig+0x7a>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a15      	ldr	r2, [pc, #84]	@ (80044ac <TIM_OC5_SetConfig+0xbc>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d007      	beq.n	800446a <TIM_OC5_SetConfig+0x7a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a14      	ldr	r2, [pc, #80]	@ (80044b0 <TIM_OC5_SetConfig+0xc0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d003      	beq.n	800446a <TIM_OC5_SetConfig+0x7a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a13      	ldr	r2, [pc, #76]	@ (80044b4 <TIM_OC5_SetConfig+0xc4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d109      	bne.n	800447e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004470:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	4313      	orrs	r3, r2
 800447c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	621a      	str	r2, [r3, #32]
}
 8004498:	bf00      	nop
 800449a:	371c      	adds	r7, #28
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	40012c00 	.word	0x40012c00
 80044a8:	40013400 	.word	0x40013400
 80044ac:	40014000 	.word	0x40014000
 80044b0:	40014400 	.word	0x40014400
 80044b4:	40014800 	.word	0x40014800

080044b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	021b      	lsls	r3, r3, #8
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80044fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	051b      	lsls	r3, r3, #20
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a18      	ldr	r2, [pc, #96]	@ (8004570 <TIM_OC6_SetConfig+0xb8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00f      	beq.n	8004534 <TIM_OC6_SetConfig+0x7c>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a17      	ldr	r2, [pc, #92]	@ (8004574 <TIM_OC6_SetConfig+0xbc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00b      	beq.n	8004534 <TIM_OC6_SetConfig+0x7c>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a16      	ldr	r2, [pc, #88]	@ (8004578 <TIM_OC6_SetConfig+0xc0>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d007      	beq.n	8004534 <TIM_OC6_SetConfig+0x7c>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a15      	ldr	r2, [pc, #84]	@ (800457c <TIM_OC6_SetConfig+0xc4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d003      	beq.n	8004534 <TIM_OC6_SetConfig+0x7c>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a14      	ldr	r2, [pc, #80]	@ (8004580 <TIM_OC6_SetConfig+0xc8>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d109      	bne.n	8004548 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800453a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	029b      	lsls	r3, r3, #10
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	621a      	str	r2, [r3, #32]
}
 8004562:	bf00      	nop
 8004564:	371c      	adds	r7, #28
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40012c00 	.word	0x40012c00
 8004574:	40013400 	.word	0x40013400
 8004578:	40014000 	.word	0x40014000
 800457c:	40014400 	.word	0x40014400
 8004580:	40014800 	.word	0x40014800

08004584 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004594:	2b01      	cmp	r3, #1
 8004596:	d101      	bne.n	800459c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004598:	2302      	movs	r3, #2
 800459a:	e065      	b.n	8004668 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004674 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d004      	beq.n	80045d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a2b      	ldr	r2, [pc, #172]	@ (8004678 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d108      	bne.n	80045e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80045d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	4313      	orrs	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80045e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a1b      	ldr	r2, [pc, #108]	@ (8004674 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d018      	beq.n	800463c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004612:	d013      	beq.n	800463c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a18      	ldr	r2, [pc, #96]	@ (800467c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d00e      	beq.n	800463c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a17      	ldr	r2, [pc, #92]	@ (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d009      	beq.n	800463c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a12      	ldr	r2, [pc, #72]	@ (8004678 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d004      	beq.n	800463c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a13      	ldr	r2, [pc, #76]	@ (8004684 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d10c      	bne.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004642:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	4313      	orrs	r3, r2
 800464c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	40012c00 	.word	0x40012c00
 8004678:	40013400 	.word	0x40013400
 800467c:	40000400 	.word	0x40000400
 8004680:	40000800 	.word	0x40000800
 8004684:	40014000 	.word	0x40014000

08004688 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e073      	b.n	800478c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470a:	4313      	orrs	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	041b      	lsls	r3, r3, #16
 800471a:	4313      	orrs	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	4313      	orrs	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a19      	ldr	r2, [pc, #100]	@ (8004798 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d004      	beq.n	8004740 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a18      	ldr	r2, [pc, #96]	@ (800479c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d11c      	bne.n	800477a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474a:	051b      	lsls	r3, r3, #20
 800474c:	4313      	orrs	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	40012c00 	.word	0x40012c00
 800479c:	40013400 	.word	0x40013400

080047a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e042      	b.n	8004838 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d106      	bne.n	80047ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7fc fcbb 	bl	8001140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2224      	movs	r2, #36	@ 0x24
 80047ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0201 	bic.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 faf4 	bl	8004dd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f825 	bl	8004840 <UART_SetConfig>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e01b      	b.n	8004838 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800480e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800481e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0201 	orr.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 fb73 	bl	8004f1c <UART_CheckIdleState>
 8004836:	4603      	mov	r3, r0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004844:	b08c      	sub	sp, #48	@ 0x30
 8004846:	af00      	add	r7, sp, #0
 8004848:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	431a      	orrs	r2, r3
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	431a      	orrs	r2, r3
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	4313      	orrs	r3, r2
 8004866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	4bab      	ldr	r3, [pc, #684]	@ (8004b1c <UART_SetConfig+0x2dc>)
 8004870:	4013      	ands	r3, r2
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	6812      	ldr	r2, [r2, #0]
 8004876:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004878:	430b      	orrs	r3, r1
 800487a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4aa0      	ldr	r2, [pc, #640]	@ (8004b20 <UART_SetConfig+0x2e0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d004      	beq.n	80048ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048a8:	4313      	orrs	r3, r2
 80048aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80048b6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	6812      	ldr	r2, [r2, #0]
 80048be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048c0:	430b      	orrs	r3, r1
 80048c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ca:	f023 010f 	bic.w	r1, r3, #15
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a91      	ldr	r2, [pc, #580]	@ (8004b24 <UART_SetConfig+0x2e4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d125      	bne.n	8004930 <UART_SetConfig+0xf0>
 80048e4:	4b90      	ldr	r3, [pc, #576]	@ (8004b28 <UART_SetConfig+0x2e8>)
 80048e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d81a      	bhi.n	8004928 <UART_SetConfig+0xe8>
 80048f2:	a201      	add	r2, pc, #4	@ (adr r2, 80048f8 <UART_SetConfig+0xb8>)
 80048f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f8:	08004909 	.word	0x08004909
 80048fc:	08004919 	.word	0x08004919
 8004900:	08004911 	.word	0x08004911
 8004904:	08004921 	.word	0x08004921
 8004908:	2301      	movs	r3, #1
 800490a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800490e:	e0d6      	b.n	8004abe <UART_SetConfig+0x27e>
 8004910:	2302      	movs	r3, #2
 8004912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004916:	e0d2      	b.n	8004abe <UART_SetConfig+0x27e>
 8004918:	2304      	movs	r3, #4
 800491a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800491e:	e0ce      	b.n	8004abe <UART_SetConfig+0x27e>
 8004920:	2308      	movs	r3, #8
 8004922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004926:	e0ca      	b.n	8004abe <UART_SetConfig+0x27e>
 8004928:	2310      	movs	r3, #16
 800492a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800492e:	e0c6      	b.n	8004abe <UART_SetConfig+0x27e>
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a7d      	ldr	r2, [pc, #500]	@ (8004b2c <UART_SetConfig+0x2ec>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d138      	bne.n	80049ac <UART_SetConfig+0x16c>
 800493a:	4b7b      	ldr	r3, [pc, #492]	@ (8004b28 <UART_SetConfig+0x2e8>)
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004940:	f003 030c 	and.w	r3, r3, #12
 8004944:	2b0c      	cmp	r3, #12
 8004946:	d82d      	bhi.n	80049a4 <UART_SetConfig+0x164>
 8004948:	a201      	add	r2, pc, #4	@ (adr r2, 8004950 <UART_SetConfig+0x110>)
 800494a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494e:	bf00      	nop
 8004950:	08004985 	.word	0x08004985
 8004954:	080049a5 	.word	0x080049a5
 8004958:	080049a5 	.word	0x080049a5
 800495c:	080049a5 	.word	0x080049a5
 8004960:	08004995 	.word	0x08004995
 8004964:	080049a5 	.word	0x080049a5
 8004968:	080049a5 	.word	0x080049a5
 800496c:	080049a5 	.word	0x080049a5
 8004970:	0800498d 	.word	0x0800498d
 8004974:	080049a5 	.word	0x080049a5
 8004978:	080049a5 	.word	0x080049a5
 800497c:	080049a5 	.word	0x080049a5
 8004980:	0800499d 	.word	0x0800499d
 8004984:	2300      	movs	r3, #0
 8004986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800498a:	e098      	b.n	8004abe <UART_SetConfig+0x27e>
 800498c:	2302      	movs	r3, #2
 800498e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004992:	e094      	b.n	8004abe <UART_SetConfig+0x27e>
 8004994:	2304      	movs	r3, #4
 8004996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800499a:	e090      	b.n	8004abe <UART_SetConfig+0x27e>
 800499c:	2308      	movs	r3, #8
 800499e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049a2:	e08c      	b.n	8004abe <UART_SetConfig+0x27e>
 80049a4:	2310      	movs	r3, #16
 80049a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049aa:	e088      	b.n	8004abe <UART_SetConfig+0x27e>
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a5f      	ldr	r2, [pc, #380]	@ (8004b30 <UART_SetConfig+0x2f0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d125      	bne.n	8004a02 <UART_SetConfig+0x1c2>
 80049b6:	4b5c      	ldr	r3, [pc, #368]	@ (8004b28 <UART_SetConfig+0x2e8>)
 80049b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80049c0:	2b30      	cmp	r3, #48	@ 0x30
 80049c2:	d016      	beq.n	80049f2 <UART_SetConfig+0x1b2>
 80049c4:	2b30      	cmp	r3, #48	@ 0x30
 80049c6:	d818      	bhi.n	80049fa <UART_SetConfig+0x1ba>
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	d00a      	beq.n	80049e2 <UART_SetConfig+0x1a2>
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	d814      	bhi.n	80049fa <UART_SetConfig+0x1ba>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <UART_SetConfig+0x19a>
 80049d4:	2b10      	cmp	r3, #16
 80049d6:	d008      	beq.n	80049ea <UART_SetConfig+0x1aa>
 80049d8:	e00f      	b.n	80049fa <UART_SetConfig+0x1ba>
 80049da:	2300      	movs	r3, #0
 80049dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049e0:	e06d      	b.n	8004abe <UART_SetConfig+0x27e>
 80049e2:	2302      	movs	r3, #2
 80049e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049e8:	e069      	b.n	8004abe <UART_SetConfig+0x27e>
 80049ea:	2304      	movs	r3, #4
 80049ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049f0:	e065      	b.n	8004abe <UART_SetConfig+0x27e>
 80049f2:	2308      	movs	r3, #8
 80049f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049f8:	e061      	b.n	8004abe <UART_SetConfig+0x27e>
 80049fa:	2310      	movs	r3, #16
 80049fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a00:	e05d      	b.n	8004abe <UART_SetConfig+0x27e>
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a4b      	ldr	r2, [pc, #300]	@ (8004b34 <UART_SetConfig+0x2f4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d125      	bne.n	8004a58 <UART_SetConfig+0x218>
 8004a0c:	4b46      	ldr	r3, [pc, #280]	@ (8004b28 <UART_SetConfig+0x2e8>)
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a12:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a16:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a18:	d016      	beq.n	8004a48 <UART_SetConfig+0x208>
 8004a1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a1c:	d818      	bhi.n	8004a50 <UART_SetConfig+0x210>
 8004a1e:	2b80      	cmp	r3, #128	@ 0x80
 8004a20:	d00a      	beq.n	8004a38 <UART_SetConfig+0x1f8>
 8004a22:	2b80      	cmp	r3, #128	@ 0x80
 8004a24:	d814      	bhi.n	8004a50 <UART_SetConfig+0x210>
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <UART_SetConfig+0x1f0>
 8004a2a:	2b40      	cmp	r3, #64	@ 0x40
 8004a2c:	d008      	beq.n	8004a40 <UART_SetConfig+0x200>
 8004a2e:	e00f      	b.n	8004a50 <UART_SetConfig+0x210>
 8004a30:	2300      	movs	r3, #0
 8004a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a36:	e042      	b.n	8004abe <UART_SetConfig+0x27e>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a3e:	e03e      	b.n	8004abe <UART_SetConfig+0x27e>
 8004a40:	2304      	movs	r3, #4
 8004a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a46:	e03a      	b.n	8004abe <UART_SetConfig+0x27e>
 8004a48:	2308      	movs	r3, #8
 8004a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a4e:	e036      	b.n	8004abe <UART_SetConfig+0x27e>
 8004a50:	2310      	movs	r3, #16
 8004a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a56:	e032      	b.n	8004abe <UART_SetConfig+0x27e>
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a30      	ldr	r2, [pc, #192]	@ (8004b20 <UART_SetConfig+0x2e0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d12a      	bne.n	8004ab8 <UART_SetConfig+0x278>
 8004a62:	4b31      	ldr	r3, [pc, #196]	@ (8004b28 <UART_SetConfig+0x2e8>)
 8004a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a70:	d01a      	beq.n	8004aa8 <UART_SetConfig+0x268>
 8004a72:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a76:	d81b      	bhi.n	8004ab0 <UART_SetConfig+0x270>
 8004a78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a7c:	d00c      	beq.n	8004a98 <UART_SetConfig+0x258>
 8004a7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a82:	d815      	bhi.n	8004ab0 <UART_SetConfig+0x270>
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <UART_SetConfig+0x250>
 8004a88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a8c:	d008      	beq.n	8004aa0 <UART_SetConfig+0x260>
 8004a8e:	e00f      	b.n	8004ab0 <UART_SetConfig+0x270>
 8004a90:	2300      	movs	r3, #0
 8004a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a96:	e012      	b.n	8004abe <UART_SetConfig+0x27e>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a9e:	e00e      	b.n	8004abe <UART_SetConfig+0x27e>
 8004aa0:	2304      	movs	r3, #4
 8004aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aa6:	e00a      	b.n	8004abe <UART_SetConfig+0x27e>
 8004aa8:	2308      	movs	r3, #8
 8004aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aae:	e006      	b.n	8004abe <UART_SetConfig+0x27e>
 8004ab0:	2310      	movs	r3, #16
 8004ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ab6:	e002      	b.n	8004abe <UART_SetConfig+0x27e>
 8004ab8:	2310      	movs	r3, #16
 8004aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a17      	ldr	r2, [pc, #92]	@ (8004b20 <UART_SetConfig+0x2e0>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	f040 80a8 	bne.w	8004c1a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004aca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ace:	2b08      	cmp	r3, #8
 8004ad0:	d834      	bhi.n	8004b3c <UART_SetConfig+0x2fc>
 8004ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad8 <UART_SetConfig+0x298>)
 8004ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad8:	08004afd 	.word	0x08004afd
 8004adc:	08004b3d 	.word	0x08004b3d
 8004ae0:	08004b05 	.word	0x08004b05
 8004ae4:	08004b3d 	.word	0x08004b3d
 8004ae8:	08004b0b 	.word	0x08004b0b
 8004aec:	08004b3d 	.word	0x08004b3d
 8004af0:	08004b3d 	.word	0x08004b3d
 8004af4:	08004b3d 	.word	0x08004b3d
 8004af8:	08004b13 	.word	0x08004b13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004afc:	f7fe fc94 	bl	8003428 <HAL_RCC_GetPCLK1Freq>
 8004b00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b02:	e021      	b.n	8004b48 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b04:	4b0c      	ldr	r3, [pc, #48]	@ (8004b38 <UART_SetConfig+0x2f8>)
 8004b06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b08:	e01e      	b.n	8004b48 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b0a:	f7fe fc21 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 8004b0e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b10:	e01a      	b.n	8004b48 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b18:	e016      	b.n	8004b48 <UART_SetConfig+0x308>
 8004b1a:	bf00      	nop
 8004b1c:	cfff69f3 	.word	0xcfff69f3
 8004b20:	40008000 	.word	0x40008000
 8004b24:	40013800 	.word	0x40013800
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	40004400 	.word	0x40004400
 8004b30:	40004800 	.word	0x40004800
 8004b34:	40004c00 	.word	0x40004c00
 8004b38:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004b46:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 812a 	beq.w	8004da4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b54:	4a9e      	ldr	r2, [pc, #632]	@ (8004dd0 <UART_SetConfig+0x590>)
 8004b56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	4413      	add	r3, r2
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d305      	bcc.n	8004b80 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d903      	bls.n	8004b88 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b86:	e10d      	b.n	8004da4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	60bb      	str	r3, [r7, #8]
 8004b8e:	60fa      	str	r2, [r7, #12]
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b94:	4a8e      	ldr	r2, [pc, #568]	@ (8004dd0 <UART_SetConfig+0x590>)
 8004b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	603b      	str	r3, [r7, #0]
 8004ba0:	607a      	str	r2, [r7, #4]
 8004ba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ba6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004baa:	f7fb fb35 	bl	8000218 <__aeabi_uldivmod>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	020b      	lsls	r3, r1, #8
 8004bc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004bc4:	0202      	lsls	r2, r0, #8
 8004bc6:	6979      	ldr	r1, [r7, #20]
 8004bc8:	6849      	ldr	r1, [r1, #4]
 8004bca:	0849      	lsrs	r1, r1, #1
 8004bcc:	2000      	movs	r0, #0
 8004bce:	460c      	mov	r4, r1
 8004bd0:	4605      	mov	r5, r0
 8004bd2:	eb12 0804 	adds.w	r8, r2, r4
 8004bd6:	eb43 0905 	adc.w	r9, r3, r5
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	469a      	mov	sl, r3
 8004be2:	4693      	mov	fp, r2
 8004be4:	4652      	mov	r2, sl
 8004be6:	465b      	mov	r3, fp
 8004be8:	4640      	mov	r0, r8
 8004bea:	4649      	mov	r1, r9
 8004bec:	f7fb fb14 	bl	8000218 <__aeabi_uldivmod>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bfe:	d308      	bcc.n	8004c12 <UART_SetConfig+0x3d2>
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c06:	d204      	bcs.n	8004c12 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6a3a      	ldr	r2, [r7, #32]
 8004c0e:	60da      	str	r2, [r3, #12]
 8004c10:	e0c8      	b.n	8004da4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004c18:	e0c4      	b.n	8004da4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c22:	d167      	bne.n	8004cf4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004c24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d828      	bhi.n	8004c7e <UART_SetConfig+0x43e>
 8004c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c34 <UART_SetConfig+0x3f4>)
 8004c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c32:	bf00      	nop
 8004c34:	08004c59 	.word	0x08004c59
 8004c38:	08004c61 	.word	0x08004c61
 8004c3c:	08004c69 	.word	0x08004c69
 8004c40:	08004c7f 	.word	0x08004c7f
 8004c44:	08004c6f 	.word	0x08004c6f
 8004c48:	08004c7f 	.word	0x08004c7f
 8004c4c:	08004c7f 	.word	0x08004c7f
 8004c50:	08004c7f 	.word	0x08004c7f
 8004c54:	08004c77 	.word	0x08004c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c58:	f7fe fbe6 	bl	8003428 <HAL_RCC_GetPCLK1Freq>
 8004c5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c5e:	e014      	b.n	8004c8a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c60:	f7fe fbf8 	bl	8003454 <HAL_RCC_GetPCLK2Freq>
 8004c64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c66:	e010      	b.n	8004c8a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c68:	4b5a      	ldr	r3, [pc, #360]	@ (8004dd4 <UART_SetConfig+0x594>)
 8004c6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c6c:	e00d      	b.n	8004c8a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c6e:	f7fe fb6f 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 8004c72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c74:	e009      	b.n	8004c8a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c7c:	e005      	b.n	8004c8a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004c88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 8089 	beq.w	8004da4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	4a4e      	ldr	r2, [pc, #312]	@ (8004dd0 <UART_SetConfig+0x590>)
 8004c98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ca4:	005a      	lsls	r2, r3, #1
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	085b      	lsrs	r3, r3, #1
 8004cac:	441a      	add	r2, r3
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	2b0f      	cmp	r3, #15
 8004cbc:	d916      	bls.n	8004cec <UART_SetConfig+0x4ac>
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cc4:	d212      	bcs.n	8004cec <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	f023 030f 	bic.w	r3, r3, #15
 8004cce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	085b      	lsrs	r3, r3, #1
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	f003 0307 	and.w	r3, r3, #7
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	8bfb      	ldrh	r3, [r7, #30]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	8bfa      	ldrh	r2, [r7, #30]
 8004ce8:	60da      	str	r2, [r3, #12]
 8004cea:	e05b      	b.n	8004da4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004cf2:	e057      	b.n	8004da4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cf4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d828      	bhi.n	8004d4e <UART_SetConfig+0x50e>
 8004cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8004d04 <UART_SetConfig+0x4c4>)
 8004cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d02:	bf00      	nop
 8004d04:	08004d29 	.word	0x08004d29
 8004d08:	08004d31 	.word	0x08004d31
 8004d0c:	08004d39 	.word	0x08004d39
 8004d10:	08004d4f 	.word	0x08004d4f
 8004d14:	08004d3f 	.word	0x08004d3f
 8004d18:	08004d4f 	.word	0x08004d4f
 8004d1c:	08004d4f 	.word	0x08004d4f
 8004d20:	08004d4f 	.word	0x08004d4f
 8004d24:	08004d47 	.word	0x08004d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d28:	f7fe fb7e 	bl	8003428 <HAL_RCC_GetPCLK1Freq>
 8004d2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d2e:	e014      	b.n	8004d5a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d30:	f7fe fb90 	bl	8003454 <HAL_RCC_GetPCLK2Freq>
 8004d34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d36:	e010      	b.n	8004d5a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d38:	4b26      	ldr	r3, [pc, #152]	@ (8004dd4 <UART_SetConfig+0x594>)
 8004d3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d3c:	e00d      	b.n	8004d5a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d3e:	f7fe fb07 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 8004d42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d44:	e009      	b.n	8004d5a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d4c:	e005      	b.n	8004d5a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004d58:	bf00      	nop
    }

    if (pclk != 0U)
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d021      	beq.n	8004da4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d64:	4a1a      	ldr	r2, [pc, #104]	@ (8004dd0 <UART_SetConfig+0x590>)
 8004d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	085b      	lsrs	r3, r3, #1
 8004d78:	441a      	add	r2, r3
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d82:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	2b0f      	cmp	r3, #15
 8004d88:	d909      	bls.n	8004d9e <UART_SetConfig+0x55e>
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d90:	d205      	bcs.n	8004d9e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	60da      	str	r2, [r3, #12]
 8004d9c:	e002      	b.n	8004da4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2200      	movs	r2, #0
 8004db8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004dc0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3730      	adds	r7, #48	@ 0x30
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dce:	bf00      	nop
 8004dd0:	080054a4 	.word	0x080054a4
 8004dd4:	00f42400 	.word	0x00f42400

08004dd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00a      	beq.n	8004e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6c:	f003 0310 	and.w	r3, r3, #16
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00a      	beq.n	8004e8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e8e:	f003 0320 	and.w	r3, r3, #32
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01a      	beq.n	8004eee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ed6:	d10a      	bne.n	8004eee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	605a      	str	r2, [r3, #4]
  }
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b098      	sub	sp, #96	@ 0x60
 8004f20:	af02      	add	r7, sp, #8
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f2c:	f7fc fa70 	bl	8001410 <HAL_GetTick>
 8004f30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d12f      	bne.n	8004fa0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f88e 	bl	8005070 <UART_WaitOnFlagUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d022      	beq.n	8004fa0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f62:	e853 3f00 	ldrex	r3, [r3]
 8004f66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	461a      	mov	r2, r3
 8004f76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f78:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f7a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f80:	e841 2300 	strex	r3, r2, [r1]
 8004f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e6      	bne.n	8004f5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e063      	b.n	8005068 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0304 	and.w	r3, r3, #4
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d149      	bne.n	8005042 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f857 	bl	8005070 <UART_WaitOnFlagUntilTimeout>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d03c      	beq.n	8005042 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd0:	e853 3f00 	ldrex	r3, [r3]
 8004fd4:	623b      	str	r3, [r7, #32]
   return(result);
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fe6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fe8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fee:	e841 2300 	strex	r3, r2, [r1]
 8004ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1e6      	bne.n	8004fc8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3308      	adds	r3, #8
 8005000:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	e853 3f00 	ldrex	r3, [r3]
 8005008:	60fb      	str	r3, [r7, #12]
   return(result);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f023 0301 	bic.w	r3, r3, #1
 8005010:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3308      	adds	r3, #8
 8005018:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800501a:	61fa      	str	r2, [r7, #28]
 800501c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501e:	69b9      	ldr	r1, [r7, #24]
 8005020:	69fa      	ldr	r2, [r7, #28]
 8005022:	e841 2300 	strex	r3, r2, [r1]
 8005026:	617b      	str	r3, [r7, #20]
   return(result);
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1e5      	bne.n	8004ffa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2220      	movs	r2, #32
 8005032:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e012      	b.n	8005068 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2220      	movs	r2, #32
 8005046:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2220      	movs	r2, #32
 800504e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3758      	adds	r7, #88	@ 0x58
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	4613      	mov	r3, r2
 800507e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005080:	e04f      	b.n	8005122 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005088:	d04b      	beq.n	8005122 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800508a:	f7fc f9c1 	bl	8001410 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	429a      	cmp	r2, r3
 8005098:	d302      	bcc.n	80050a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e04e      	b.n	8005142 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0304 	and.w	r3, r3, #4
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d037      	beq.n	8005122 <UART_WaitOnFlagUntilTimeout+0xb2>
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2b80      	cmp	r3, #128	@ 0x80
 80050b6:	d034      	beq.n	8005122 <UART_WaitOnFlagUntilTimeout+0xb2>
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2b40      	cmp	r3, #64	@ 0x40
 80050bc:	d031      	beq.n	8005122 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	f003 0308 	and.w	r3, r3, #8
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d110      	bne.n	80050ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2208      	movs	r2, #8
 80050d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 f838 	bl	800514a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2208      	movs	r2, #8
 80050de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e029      	b.n	8005142 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050fc:	d111      	bne.n	8005122 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005106:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f81e 	bl	800514a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2220      	movs	r2, #32
 8005112:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e00f      	b.n	8005142 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	4013      	ands	r3, r2
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	429a      	cmp	r2, r3
 8005130:	bf0c      	ite	eq
 8005132:	2301      	moveq	r3, #1
 8005134:	2300      	movne	r3, #0
 8005136:	b2db      	uxtb	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	429a      	cmp	r2, r3
 800513e:	d0a0      	beq.n	8005082 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800514a:	b480      	push	{r7}
 800514c:	b095      	sub	sp, #84	@ 0x54
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800515a:	e853 3f00 	ldrex	r3, [r3]
 800515e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005162:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005166:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	461a      	mov	r2, r3
 800516e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005170:	643b      	str	r3, [r7, #64]	@ 0x40
 8005172:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005174:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005176:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005178:	e841 2300 	strex	r3, r2, [r1]
 800517c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800517e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1e6      	bne.n	8005152 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3308      	adds	r3, #8
 800518a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	e853 3f00 	ldrex	r3, [r3]
 8005192:	61fb      	str	r3, [r7, #28]
   return(result);
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800519a:	f023 0301 	bic.w	r3, r3, #1
 800519e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3308      	adds	r3, #8
 80051a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051b0:	e841 2300 	strex	r3, r2, [r1]
 80051b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1e3      	bne.n	8005184 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d118      	bne.n	80051f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f023 0310 	bic.w	r3, r3, #16
 80051d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051e2:	61bb      	str	r3, [r7, #24]
 80051e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e6:	6979      	ldr	r1, [r7, #20]
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	e841 2300 	strex	r3, r2, [r1]
 80051ee:	613b      	str	r3, [r7, #16]
   return(result);
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1e6      	bne.n	80051c4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800520a:	bf00      	nop
 800520c:	3754      	adds	r7, #84	@ 0x54
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005216:	b480      	push	{r7}
 8005218:	b085      	sub	sp, #20
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_UARTEx_DisableFifoMode+0x16>
 8005228:	2302      	movs	r3, #2
 800522a:	e027      	b.n	800527c <HAL_UARTEx_DisableFifoMode+0x66>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2224      	movs	r2, #36	@ 0x24
 8005238:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f022 0201 	bic.w	r2, r2, #1
 8005252:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800525a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2220      	movs	r2, #32
 800526e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005298:	2b01      	cmp	r3, #1
 800529a:	d101      	bne.n	80052a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800529c:	2302      	movs	r3, #2
 800529e:	e02d      	b.n	80052fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2224      	movs	r2, #36	@ 0x24
 80052ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0201 	bic.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f84f 	bl	8005380 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005318:	2302      	movs	r3, #2
 800531a:	e02d      	b.n	8005378 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2224      	movs	r2, #36	@ 0x24
 8005328:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 0201 	bic.w	r2, r2, #1
 8005342:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f811 	bl	8005380 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2220      	movs	r2, #32
 800536a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800538c:	2b00      	cmp	r3, #0
 800538e:	d108      	bne.n	80053a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80053a0:	e031      	b.n	8005406 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80053a2:	2308      	movs	r3, #8
 80053a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80053a6:	2308      	movs	r3, #8
 80053a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	0e5b      	lsrs	r3, r3, #25
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	0f5b      	lsrs	r3, r3, #29
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053ca:	7bbb      	ldrb	r3, [r7, #14]
 80053cc:	7b3a      	ldrb	r2, [r7, #12]
 80053ce:	4911      	ldr	r1, [pc, #68]	@ (8005414 <UARTEx_SetNbDataToProcess+0x94>)
 80053d0:	5c8a      	ldrb	r2, [r1, r2]
 80053d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80053d6:	7b3a      	ldrb	r2, [r7, #12]
 80053d8:	490f      	ldr	r1, [pc, #60]	@ (8005418 <UARTEx_SetNbDataToProcess+0x98>)
 80053da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
 80053ea:	7b7a      	ldrb	r2, [r7, #13]
 80053ec:	4909      	ldr	r1, [pc, #36]	@ (8005414 <UARTEx_SetNbDataToProcess+0x94>)
 80053ee:	5c8a      	ldrb	r2, [r1, r2]
 80053f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80053f4:	7b7a      	ldrb	r2, [r7, #13]
 80053f6:	4908      	ldr	r1, [pc, #32]	@ (8005418 <UARTEx_SetNbDataToProcess+0x98>)
 80053f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80053fe:	b29a      	uxth	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005406:	bf00      	nop
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	080054bc 	.word	0x080054bc
 8005418:	080054c4 	.word	0x080054c4

0800541c <memset>:
 800541c:	4402      	add	r2, r0
 800541e:	4603      	mov	r3, r0
 8005420:	4293      	cmp	r3, r2
 8005422:	d100      	bne.n	8005426 <memset+0xa>
 8005424:	4770      	bx	lr
 8005426:	f803 1b01 	strb.w	r1, [r3], #1
 800542a:	e7f9      	b.n	8005420 <memset+0x4>

0800542c <__libc_init_array>:
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	4d0d      	ldr	r5, [pc, #52]	@ (8005464 <__libc_init_array+0x38>)
 8005430:	4c0d      	ldr	r4, [pc, #52]	@ (8005468 <__libc_init_array+0x3c>)
 8005432:	1b64      	subs	r4, r4, r5
 8005434:	10a4      	asrs	r4, r4, #2
 8005436:	2600      	movs	r6, #0
 8005438:	42a6      	cmp	r6, r4
 800543a:	d109      	bne.n	8005450 <__libc_init_array+0x24>
 800543c:	4d0b      	ldr	r5, [pc, #44]	@ (800546c <__libc_init_array+0x40>)
 800543e:	4c0c      	ldr	r4, [pc, #48]	@ (8005470 <__libc_init_array+0x44>)
 8005440:	f000 f818 	bl	8005474 <_init>
 8005444:	1b64      	subs	r4, r4, r5
 8005446:	10a4      	asrs	r4, r4, #2
 8005448:	2600      	movs	r6, #0
 800544a:	42a6      	cmp	r6, r4
 800544c:	d105      	bne.n	800545a <__libc_init_array+0x2e>
 800544e:	bd70      	pop	{r4, r5, r6, pc}
 8005450:	f855 3b04 	ldr.w	r3, [r5], #4
 8005454:	4798      	blx	r3
 8005456:	3601      	adds	r6, #1
 8005458:	e7ee      	b.n	8005438 <__libc_init_array+0xc>
 800545a:	f855 3b04 	ldr.w	r3, [r5], #4
 800545e:	4798      	blx	r3
 8005460:	3601      	adds	r6, #1
 8005462:	e7f2      	b.n	800544a <__libc_init_array+0x1e>
 8005464:	080054d4 	.word	0x080054d4
 8005468:	080054d4 	.word	0x080054d4
 800546c:	080054d4 	.word	0x080054d4
 8005470:	080054d8 	.word	0x080054d8

08005474 <_init>:
 8005474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005476:	bf00      	nop
 8005478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800547a:	bc08      	pop	{r3}
 800547c:	469e      	mov	lr, r3
 800547e:	4770      	bx	lr

08005480 <_fini>:
 8005480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005482:	bf00      	nop
 8005484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005486:	bc08      	pop	{r3}
 8005488:	469e      	mov	lr, r3
 800548a:	4770      	bx	lr
