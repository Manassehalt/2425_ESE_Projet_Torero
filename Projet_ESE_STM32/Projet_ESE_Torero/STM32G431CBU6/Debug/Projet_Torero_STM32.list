
Projet_Torero_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf3c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  0800d120  0800d120  0000e120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d690  0800d690  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d690  0800d690  0000e690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d698  0800d698  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d698  0800d698  0000e698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d69c  0800d69c  0000e69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d6a0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fe0  200001d8  0800d878  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200041b8  0800d878  000101b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dfab  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004934  00000000  00000000  0002d1b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab0  00000000  00000000  00031ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000149d  00000000  00000000  00033598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022dbb  00000000  00000000  00034a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021554  00000000  00000000  000577f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3eea  00000000  00000000  00078d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014cc2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008398  00000000  00000000  0014cc74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  0015500c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d104 	.word	0x0800d104

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800d104 	.word	0x0800d104

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001034:	b5b0      	push	{r4, r5, r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800103a:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <MX_FREERTOS_Init+0x2c>)
 800103c:	1d3c      	adds	r4, r7, #4
 800103e:	461d      	mov	r5, r3
 8001040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001044:	682b      	ldr	r3, [r5, #0]
 8001046:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f005 ff12 	bl	8006e76 <osThreadCreate>
 8001052:	4603      	mov	r3, r0
 8001054:	4a03      	ldr	r2, [pc, #12]	@ (8001064 <MX_FREERTOS_Init+0x30>)
 8001056:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001058:	bf00      	nop
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bdb0      	pop	{r4, r5, r7, pc}
 8001060:	0800d12c 	.word	0x0800d12c
 8001064:	200001f4 	.word	0x200001f4

08001068 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001070:	2001      	movs	r0, #1
 8001072:	f005 ff27 	bl	8006ec4 <osDelay>
 8001076:	e7fb      	b.n	8001070 <StartDefaultTask+0x8>

08001078 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800107e:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <MX_DMA_Init+0x50>)
 8001080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001082:	4a11      	ldr	r2, [pc, #68]	@ (80010c8 <MX_DMA_Init+0x50>)
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	6493      	str	r3, [r2, #72]	@ 0x48
 800108a:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <MX_DMA_Init+0x50>)
 800108c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001096:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <MX_DMA_Init+0x50>)
 8001098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800109a:	4a0b      	ldr	r2, [pc, #44]	@ (80010c8 <MX_DMA_Init+0x50>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80010a2:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <MX_DMA_Init+0x50>)
 80010a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2105      	movs	r1, #5
 80010b2:	200b      	movs	r0, #11
 80010b4:	f001 fa6b 	bl	800258e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010b8:	200b      	movs	r0, #11
 80010ba:	f001 fa82 	bl	80025c2 <HAL_NVIC_EnableIRQ>

}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000

080010cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	4b6b      	ldr	r3, [pc, #428]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	4a6a      	ldr	r2, [pc, #424]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ee:	4b68      	ldr	r3, [pc, #416]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010fa:	4b65      	ldr	r3, [pc, #404]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a64      	ldr	r2, [pc, #400]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 8001100:	f043 0320 	orr.w	r3, r3, #32
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b62      	ldr	r3, [pc, #392]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0320 	and.w	r3, r3, #32
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001112:	4b5f      	ldr	r3, [pc, #380]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a5e      	ldr	r2, [pc, #376]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 8001118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b5c      	ldr	r3, [pc, #368]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	4b59      	ldr	r3, [pc, #356]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4a58      	ldr	r2, [pc, #352]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001136:	4b56      	ldr	r3, [pc, #344]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	4b53      	ldr	r3, [pc, #332]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	4a52      	ldr	r2, [pc, #328]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114e:	4b50      	ldr	r3, [pc, #320]	@ (8001290 <MX_GPIO_Init+0x1c4>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INT2_ACC_Pin|LED_SE_Pin|LED_SW_Pin|Status_LED_Pin
 800115a:	2200      	movs	r2, #0
 800115c:	f642 4150 	movw	r1, #11344	@ 0x2c50
 8001160:	484c      	ldr	r0, [pc, #304]	@ (8001294 <MX_GPIO_Init+0x1c8>)
 8001162:	f001 fe3d 	bl	8002de0 <HAL_GPIO_WritePin>
                          |Status_LED_debbug_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	2120      	movs	r1, #32
 800116a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800116e:	f001 fe37 	bl	8002de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_NE_Pin|DEV_EN_LIDAR_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	f248 0180 	movw	r1, #32896	@ 0x8080
 8001178:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800117c:	f001 fe30 	bl	8002de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M_EN_LIDAR_Pin|LED_NW_Pin|LED_W_Pin|LED_N_Pin
 8001180:	2200      	movs	r2, #0
 8001182:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 8001186:	4844      	ldr	r0, [pc, #272]	@ (8001298 <MX_GPIO_Init+0x1cc>)
 8001188:	f001 fe2a 	bl	8002de0 <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_S_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = INT2_ACC_Pin|LED_SE_Pin|LED_SW_Pin|Status_LED_Pin
 800118c:	f642 4350 	movw	r3, #11344	@ 0x2c50
 8001190:	617b      	str	r3, [r7, #20]
                          |Status_LED_debbug_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	2301      	movs	r3, #1
 8001194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	483b      	ldr	r0, [pc, #236]	@ (8001294 <MX_GPIO_Init+0x1c8>)
 80011a6:	f001 fc99 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 80011aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	4837      	ldr	r0, [pc, #220]	@ (800129c <MX_GPIO_Init+0x1d0>)
 80011c0:	f001 fc8c 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS_ACC_Pin|LED_NE_Pin|DEV_EN_LIDAR_Pin;
 80011c4:	f248 03a0 	movw	r3, #32928	@ 0x80a0
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e0:	f001 fc7c 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CAPTEUR_G_Pin|CAPTEUR_D_Pin;
 80011e4:	2303      	movs	r3, #3
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80011e8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	4827      	ldr	r0, [pc, #156]	@ (8001298 <MX_GPIO_Init+0x1cc>)
 80011fa:	f001 fc6f 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = M_EN_LIDAR_Pin|LED_NW_Pin|LED_W_Pin|LED_N_Pin
 80011fe:	f241 03f4 	movw	r3, #4340	@ 0x10f4
 8001202:	617b      	str	r3, [r7, #20]
                          |LED_E_Pin|LED_S_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	4820      	ldr	r0, [pc, #128]	@ (8001298 <MX_GPIO_Init+0x1cc>)
 8001218:	f001 fc60 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT1_ACC_Pin;
 800121c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001222:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT1_ACC_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001236:	f001 fc51 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800123a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001240:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	4811      	ldr	r0, [pc, #68]	@ (8001298 <MX_GPIO_Init+0x1cc>)
 8001252:	f001 fc43 	bl	8002adc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2105      	movs	r1, #5
 800125a:	2006      	movs	r0, #6
 800125c:	f001 f997 	bl	800258e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001260:	2006      	movs	r0, #6
 8001262:	f001 f9ae 	bl	80025c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2105      	movs	r1, #5
 800126a:	2007      	movs	r0, #7
 800126c:	f001 f98f 	bl	800258e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001270:	2007      	movs	r0, #7
 8001272:	f001 f9a6 	bl	80025c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2105      	movs	r1, #5
 800127a:	2028      	movs	r0, #40	@ 0x28
 800127c:	f001 f987 	bl	800258e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001280:	2028      	movs	r0, #40	@ 0x28
 8001282:	f001 f99e 	bl	80025c2 <HAL_NVIC_EnableIRQ>

}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	@ 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000
 8001294:	48000800 	.word	0x48000800
 8001298:	48000400 	.word	0x48000400
 800129c:	48001800 	.word	0x48001800

080012a0 <__io_putchar>:
int frame_start = 0;
int frame_end = 0;



int __io_putchar(int chr){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 80012a8:	1d39      	adds	r1, r7, #4
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
 80012ae:	2201      	movs	r2, #1
 80012b0:	4803      	ldr	r0, [pc, #12]	@ (80012c0 <__io_putchar+0x20>)
 80012b2:	f004 fcf1 	bl	8005c98 <HAL_UART_Transmit>
	return chr;
 80012b6:	687b      	ldr	r3, [r7, #4]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20001678 	.word	0x20001678

080012c4 <TaskEDGE>:
		//Motor_Forward_R(100);

	}
}

void TaskEDGE(void * pvParameters){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	for (;;) {

		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295
 80012d0:	2001      	movs	r0, #1
 80012d2:	f006 fc2b 	bl	8007b2c <ulTaskNotifyTake>
		printf("Bonjour de Task2\r\n");
 80012d6:	4830      	ldr	r0, [pc, #192]	@ (8001398 <TaskEDGE+0xd4>)
 80012d8:	f008 fad0 	bl	800987c <puts>
		capteur_virtuel = capteur_G&&capteur_D;
 80012dc:	4b2f      	ldr	r3, [pc, #188]	@ (800139c <TaskEDGE+0xd8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d005      	beq.n	80012f0 <TaskEDGE+0x2c>
 80012e4:	4b2e      	ldr	r3, [pc, #184]	@ (80013a0 <TaskEDGE+0xdc>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <TaskEDGE+0x2c>
 80012ec:	2301      	movs	r3, #1
 80012ee:	e000      	b.n	80012f2 <TaskEDGE+0x2e>
 80012f0:	2300      	movs	r3, #0
 80012f2:	4a2c      	ldr	r2, [pc, #176]	@ (80013a4 <TaskEDGE+0xe0>)
 80012f4:	6013      	str	r3, [r2, #0]
		int erreur_capteur = -45*capteur_G+45*capteur_D+90*capteur_virtuel;
 80012f6:	4b29      	ldr	r3, [pc, #164]	@ (800139c <TaskEDGE+0xd8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f06f 022c 	mvn.w	r2, #44	@ 0x2c
 80012fe:	fb02 f103 	mul.w	r1, r2, r3
 8001302:	4b27      	ldr	r3, [pc, #156]	@ (80013a0 <TaskEDGE+0xdc>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4613      	mov	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	011a      	lsls	r2, r3, #4
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	18ca      	adds	r2, r1, r3
 8001312:	4b24      	ldr	r3, [pc, #144]	@ (80013a4 <TaskEDGE+0xe0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	215a      	movs	r1, #90	@ 0x5a
 8001318:	fb01 f303 	mul.w	r3, r1, r3
 800131c:	4413      	add	r3, r2
 800131e:	617b      	str	r3, [r7, #20]
		int erreurLidar = 10/180;
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]
		int alphaD = coeff_Lidar*erreurLidar-coeff_Capteur*erreur_capteur;
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	ee07 3a90 	vmov	s15, r3
 800132a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800132e:	4b1e      	ldr	r3, [pc, #120]	@ (80013a8 <TaskEDGE+0xe4>)
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001342:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <TaskEDGE+0xe8>)
 8001344:	edd3 7a00 	vldr	s15, [r3]
 8001348:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800134c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001354:	ee17 3a90 	vmov	r3, s15
 8001358:	60fb      	str	r3, [r7, #12]
		int alphaG = -coeff_Lidar*erreurLidar+coeff_Capteur*erreur_capteur;
 800135a:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <TaskEDGE+0xe4>)
 800135c:	edd3 7a00 	vldr	s15, [r3]
 8001360:	eeb1 7a67 	vneg.f32	s14, s15
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	ee07 3a90 	vmov	s15, r3
 800136a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	ee07 3a90 	vmov	s15, r3
 8001378:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800137c:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <TaskEDGE+0xe8>)
 800137e:	edd3 7a00 	vldr	s15, [r3]
 8001382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800138a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800138e:	ee17 3a90 	vmov	r3, s15
 8001392:	60bb      	str	r3, [r7, #8]
	for (;;) {
 8001394:	e79a      	b.n	80012cc <TaskEDGE+0x8>
 8001396:	bf00      	nop
 8001398:	0800d16c 	.word	0x0800d16c
 800139c:	200014bc 	.word	0x200014bc
 80013a0:	200014c0 	.word	0x200014c0
 80013a4:	200014c4 	.word	0x200014c4
 80013a8:	200014c8 	.word	0x200014c8
 80013ac:	200014cc 	.word	0x200014cc

080013b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b6:	f000 ff7c 	bl	80022b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ba:	f000 f875 	bl	80014a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013be:	f7ff fe85 	bl	80010cc <MX_GPIO_Init>
  MX_DMA_Init();
 80013c2:	f7ff fe59 	bl	8001078 <MX_DMA_Init>
  MX_SPI2_Init();
 80013c6:	f000 f91b 	bl	8001600 <MX_SPI2_Init>
  MX_TIM1_Init();
 80013ca:	f000 fae5 	bl	8001998 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013ce:	f000 fb83 	bl	8001ad8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80013d2:	f000 fbe5 	bl	8001ba0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80013d6:	f000 fc39 	bl	8001c4c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80013da:	f000 fde3 	bl	8001fa4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80013de:	f000 fe2d 	bl	800203c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	Start_Motors();
 80013e2:	f007 f9db 	bl	800879c <Start_Motors>
	Motor_SetSpeed_L(30);
 80013e6:	201e      	movs	r0, #30
 80013e8:	f007 fa00 	bl	80087ec <Motor_SetSpeed_L>
	//Motor_SetSpeed_R(-15);
	ADXL343_Init();
 80013ec:	f007 f97e 	bl	80086ec <ADXL343_Init>
	LIDAR_Init(&hlidar);
 80013f0:	4822      	ldr	r0, [pc, #136]	@ (800147c <main+0xcc>)
 80013f2:	f007 fa7f 	bl	80088f4 <LIDAR_Init>
	LIDAR_Start(&hlidar);
 80013f6:	4821      	ldr	r0, [pc, #132]	@ (800147c <main+0xcc>)
 80013f8:	f007 fa98 	bl	800892c <LIDAR_Start>
	//	Error_Handler();
	//}
	//printf("Task MOTOR created\r\n");


	ret = xTaskCreate(TaskEDGE,"TaskEDGE",STACK_SIZE,(void *) NULL,4,&xHandleEDGE);
 80013fc:	4b20      	ldr	r3, [pc, #128]	@ (8001480 <main+0xd0>)
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	2304      	movs	r3, #4
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2300      	movs	r3, #0
 8001406:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800140a:	491e      	ldr	r1, [pc, #120]	@ (8001484 <main+0xd4>)
 800140c:	481e      	ldr	r0, [pc, #120]	@ (8001488 <main+0xd8>)
 800140e:	f005 fee1 	bl	80071d4 <xTaskCreate>
 8001412:	4603      	mov	r3, r0
 8001414:	4a1d      	ldr	r2, [pc, #116]	@ (800148c <main+0xdc>)
 8001416:	6013      	str	r3, [r2, #0]
	if (ret != pdPASS)
 8001418:	4b1c      	ldr	r3, [pc, #112]	@ (800148c <main+0xdc>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d004      	beq.n	800142a <main+0x7a>
	{
		printf("Error creating TaskEDGE\r\n");
 8001420:	481b      	ldr	r0, [pc, #108]	@ (8001490 <main+0xe0>)
 8001422:	f008 fa2b 	bl	800987c <puts>
		Error_Handler();
 8001426:	f000 f8e5 	bl	80015f4 <Error_Handler>
	}
	printf("Task EDGE created\r\n");
 800142a:	481a      	ldr	r0, [pc, #104]	@ (8001494 <main+0xe4>)
 800142c:	f008 fa26 	bl	800987c <puts>

	SemDMAHalfCallBack = xSemaphoreCreateBinary();
 8001430:	2203      	movs	r2, #3
 8001432:	2100      	movs	r1, #0
 8001434:	2001      	movs	r0, #1
 8001436:	f005 fe77 	bl	8007128 <xQueueGenericCreate>
 800143a:	4603      	mov	r3, r0
 800143c:	4a16      	ldr	r2, [pc, #88]	@ (8001498 <main+0xe8>)
 800143e:	6013      	str	r3, [r2, #0]
	SemDMAClpCallBack = xSemaphoreCreateBinary();
 8001440:	2203      	movs	r2, #3
 8001442:	2100      	movs	r1, #0
 8001444:	2001      	movs	r0, #1
 8001446:	f005 fe6f 	bl	8007128 <xQueueGenericCreate>
 800144a:	4603      	mov	r3, r0
 800144c:	4a13      	ldr	r2, [pc, #76]	@ (800149c <main+0xec>)
 800144e:	6013      	str	r3, [r2, #0]
	xShockSemaphore = xSemaphoreCreateBinary();
 8001450:	2203      	movs	r2, #3
 8001452:	2100      	movs	r1, #0
 8001454:	2001      	movs	r0, #1
 8001456:	f005 fe67 	bl	8007128 <xQueueGenericCreate>
 800145a:	4603      	mov	r3, r0
 800145c:	4a10      	ldr	r2, [pc, #64]	@ (80014a0 <main+0xf0>)
 800145e:	6013      	str	r3, [r2, #0]
	SemEtat = xSemaphoreCreateBinary();
 8001460:	2203      	movs	r2, #3
 8001462:	2100      	movs	r1, #0
 8001464:	2001      	movs	r0, #1
 8001466:	f005 fe5f 	bl	8007128 <xQueueGenericCreate>
 800146a:	4603      	mov	r3, r0
 800146c:	4a0d      	ldr	r2, [pc, #52]	@ (80014a4 <main+0xf4>)
 800146e:	6013      	str	r3, [r2, #0]
	//xNoSignalSemaphore = xSemaphoreCreateBinary();
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001470:	f7ff fde0 	bl	8001034 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001474:	f005 fcf8 	bl	8006e68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <main+0xc8>
 800147c:	200001f8 	.word	0x200001f8
 8001480:	200014b4 	.word	0x200014b4
 8001484:	0800d180 	.word	0x0800d180
 8001488:	080012c5 	.word	0x080012c5
 800148c:	200014b8 	.word	0x200014b8
 8001490:	0800d18c 	.word	0x0800d18c
 8001494:	0800d1a8 	.word	0x0800d1a8
 8001498:	200014d8 	.word	0x200014d8
 800149c:	200014dc 	.word	0x200014dc
 80014a0:	200014d4 	.word	0x200014d4
 80014a4:	200014d0 	.word	0x200014d0

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b094      	sub	sp, #80	@ 0x50
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 0318 	add.w	r3, r7, #24
 80014b2:	2238      	movs	r2, #56	@ 0x38
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f008 fae0 	bl	8009a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014ce:	f001 fcb7 	bl	8002e40 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014d2:	2301      	movs	r3, #1
 80014d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014dc:	2300      	movs	r3, #0
 80014de:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e0:	f107 0318 	add.w	r3, r7, #24
 80014e4:	4618      	mov	r0, r3
 80014e6:	f001 fd5f 	bl	8002fa8 <HAL_RCC_OscConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <SystemClock_Config+0x4c>
  {
    Error_Handler();
 80014f0:	f000 f880 	bl	80015f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f4:	230f      	movs	r3, #15
 80014f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80014f8:	2302      	movs	r3, #2
 80014fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f002 f85d 	bl	80035cc <HAL_RCC_ClockConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001518:	f000 f86c 	bl	80015f4 <Error_Handler>
  }
}
 800151c:	bf00      	nop
 800151e:	3750      	adds	r7, #80	@ 0x50
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == INT1_ACC_Pin) {
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001534:	d117      	bne.n	8001566 <HAL_GPIO_EXTI_Callback+0x42>
		printf("yeah\r\n");
 8001536:	4829      	ldr	r0, [pc, #164]	@ (80015dc <HAL_GPIO_EXTI_Callback+0xb8>)
 8001538:	f008 f9a0 	bl	800987c <puts>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
		vTaskNotifyGiveFromISR(xHandleETAT, &xHigherPriorityTaskWoken);
 8001540:	4b27      	ldr	r3, [pc, #156]	@ (80015e0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f107 0214 	add.w	r2, r7, #20
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f006 fb36 	bl	8007bbc <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d007      	beq.n	8001566 <HAL_GPIO_EXTI_Callback+0x42>
 8001556:	4b23      	ldr	r3, [pc, #140]	@ (80015e4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001558:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	f3bf 8f4f 	dsb	sy
 8001562:	f3bf 8f6f 	isb	sy
	}
	if (GPIO_Pin == CAPTEUR_D_Pin) {
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	2b02      	cmp	r3, #2
 800156a:	d117      	bne.n	800159c <HAL_GPIO_EXTI_Callback+0x78>
			printf("void\r\n");
 800156c:	481e      	ldr	r0, [pc, #120]	@ (80015e8 <HAL_GPIO_EXTI_Callback+0xc4>)
 800156e:	f008 f985 	bl	800987c <puts>
			BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
			vTaskNotifyGiveFromISR(xHandleEDGE, &xHigherPriorityTaskWoken);
 8001576:	4b1d      	ldr	r3, [pc, #116]	@ (80015ec <HAL_GPIO_EXTI_Callback+0xc8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f107 0210 	add.w	r2, r7, #16
 800157e:	4611      	mov	r1, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f006 fb1b 	bl	8007bbc <vTaskNotifyGiveFromISR>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d007      	beq.n	800159c <HAL_GPIO_EXTI_Callback+0x78>
 800158c:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <HAL_GPIO_EXTI_Callback+0xc0>)
 800158e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	f3bf 8f4f 	dsb	sy
 8001598:	f3bf 8f6f 	isb	sy
		}
	if (GPIO_Pin == CAPTEUR_G_Pin) {
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d117      	bne.n	80015d2 <HAL_GPIO_EXTI_Callback+0xae>
			printf("vide\r\n");
 80015a2:	4813      	ldr	r0, [pc, #76]	@ (80015f0 <HAL_GPIO_EXTI_Callback+0xcc>)
 80015a4:	f008 f96a 	bl	800987c <puts>
			BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
			vTaskNotifyGiveFromISR(xHandleEDGE, &xHigherPriorityTaskWoken);
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <HAL_GPIO_EXTI_Callback+0xc8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f107 020c 	add.w	r2, r7, #12
 80015b4:	4611      	mov	r1, r2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f006 fb00 	bl	8007bbc <vTaskNotifyGiveFromISR>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d007      	beq.n	80015d2 <HAL_GPIO_EXTI_Callback+0xae>
 80015c2:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <HAL_GPIO_EXTI_Callback+0xc0>)
 80015c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	f3bf 8f4f 	dsb	sy
 80015ce:	f3bf 8f6f 	isb	sy
		}
}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	0800d1bc 	.word	0x0800d1bc
 80015e0:	200014b0 	.word	0x200014b0
 80015e4:	e000ed04 	.word	0xe000ed04
 80015e8:	0800d1c4 	.word	0x0800d1c4
 80015ec:	200014b4 	.word	0x200014b4
 80015f0:	0800d1cc 	.word	0x0800d1cc

080015f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f8:	b672      	cpsid	i
}
 80015fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <Error_Handler+0x8>

08001600 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001604:	4b1b      	ldr	r3, [pc, #108]	@ (8001674 <MX_SPI2_Init+0x74>)
 8001606:	4a1c      	ldr	r2, [pc, #112]	@ (8001678 <MX_SPI2_Init+0x78>)
 8001608:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800160a:	4b1a      	ldr	r3, [pc, #104]	@ (8001674 <MX_SPI2_Init+0x74>)
 800160c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001610:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001612:	4b18      	ldr	r3, [pc, #96]	@ (8001674 <MX_SPI2_Init+0x74>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001618:	4b16      	ldr	r3, [pc, #88]	@ (8001674 <MX_SPI2_Init+0x74>)
 800161a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800161e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001620:	4b14      	ldr	r3, [pc, #80]	@ (8001674 <MX_SPI2_Init+0x74>)
 8001622:	2202      	movs	r2, #2
 8001624:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001626:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <MX_SPI2_Init+0x74>)
 8001628:	2201      	movs	r2, #1
 800162a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800162c:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <MX_SPI2_Init+0x74>)
 800162e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001632:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001634:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <MX_SPI2_Init+0x74>)
 8001636:	2218      	movs	r2, #24
 8001638:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800163a:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <MX_SPI2_Init+0x74>)
 800163c:	2200      	movs	r2, #0
 800163e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001640:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <MX_SPI2_Init+0x74>)
 8001642:	2200      	movs	r2, #0
 8001644:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001646:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <MX_SPI2_Init+0x74>)
 8001648:	2200      	movs	r2, #0
 800164a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800164c:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <MX_SPI2_Init+0x74>)
 800164e:	2207      	movs	r2, #7
 8001650:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001652:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <MX_SPI2_Init+0x74>)
 8001654:	2200      	movs	r2, #0
 8001656:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <MX_SPI2_Init+0x74>)
 800165a:	2200      	movs	r2, #0
 800165c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800165e:	4805      	ldr	r0, [pc, #20]	@ (8001674 <MX_SPI2_Init+0x74>)
 8001660:	f002 fbbc 	bl	8003ddc <HAL_SPI_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800166a:	f7ff ffc3 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200014e0 	.word	0x200014e0
 8001678:	40003800 	.word	0x40003800

0800167c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	@ 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a17      	ldr	r2, [pc, #92]	@ (80016f8 <HAL_SPI_MspInit+0x7c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d128      	bne.n	80016f0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800169e:	4b17      	ldr	r3, [pc, #92]	@ (80016fc <HAL_SPI_MspInit+0x80>)
 80016a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a2:	4a16      	ldr	r2, [pc, #88]	@ (80016fc <HAL_SPI_MspInit+0x80>)
 80016a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80016aa:	4b14      	ldr	r3, [pc, #80]	@ (80016fc <HAL_SPI_MspInit+0x80>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b6:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <HAL_SPI_MspInit+0x80>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ba:	4a10      	ldr	r2, [pc, #64]	@ (80016fc <HAL_SPI_MspInit+0x80>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c2:	4b0e      	ldr	r3, [pc, #56]	@ (80016fc <HAL_SPI_MspInit+0x80>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_TO_SCLK_ACC_Pin|SPI2_MISO_TO_SDO_ACC_Pin|SPI2_MOSI_TO_SDI_ACC_Pin;
 80016ce:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80016d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016e0:	2305      	movs	r3, #5
 80016e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4619      	mov	r1, r3
 80016ea:	4805      	ldr	r0, [pc, #20]	@ (8001700 <HAL_SPI_MspInit+0x84>)
 80016ec:	f001 f9f6 	bl	8002adc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80016f0:	bf00      	nop
 80016f2:	3728      	adds	r7, #40	@ 0x28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40003800 	.word	0x40003800
 80016fc:	40021000 	.word	0x40021000
 8001700:	48000400 	.word	0x48000400

08001704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <HAL_MspInit+0x50>)
 800170c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800170e:	4a11      	ldr	r2, [pc, #68]	@ (8001754 <HAL_MspInit+0x50>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6613      	str	r3, [r2, #96]	@ 0x60
 8001716:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <HAL_MspInit+0x50>)
 8001718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <HAL_MspInit+0x50>)
 8001724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001726:	4a0b      	ldr	r2, [pc, #44]	@ (8001754 <HAL_MspInit+0x50>)
 8001728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800172c:	6593      	str	r3, [r2, #88]	@ 0x58
 800172e:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <HAL_MspInit+0x50>)
 8001730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	210f      	movs	r1, #15
 800173e:	f06f 0001 	mvn.w	r0, #1
 8001742:	f000 ff24 	bl	800258e <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001746:	f001 fc1f 	bl	8002f88 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <NMI_Handler+0x4>

08001760 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <HardFault_Handler+0x4>

08001768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <MemManage_Handler+0x4>

08001770 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <BusFault_Handler+0x4>

08001778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <UsageFault_Handler+0x4>

08001780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001792:	f000 fde1 	bl	8002358 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001796:	f006 f9ab 	bl	8007af0 <xTaskGetSchedulerState>
 800179a:	4603      	mov	r3, r0
 800179c:	2b01      	cmp	r3, #1
 800179e:	d001      	beq.n	80017a4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80017a0:	f006 fcca 	bl	8008138 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAPTEUR_G_Pin);
 80017ac:	2001      	movs	r0, #1
 80017ae:	f001 fb2f 	bl	8002e10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAPTEUR_D_Pin);
 80017ba:	2002      	movs	r0, #2
 80017bc:	f001 fb28 	bl	8002e10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80017c8:	4802      	ldr	r0, [pc, #8]	@ (80017d4 <DMA1_Channel1_IRQHandler+0x10>)
 80017ca:	f001 f838 	bl	800283e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200017a0 	.word	0x200017a0

080017d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACC_Pin);
 80017dc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80017e0:	f001 fb16 	bl	8002e10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return 1;
 80017ec:	2301      	movs	r3, #1
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <_kill>:

int _kill(int pid, int sig)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001802:	f008 f98d 	bl	8009b20 <__errno>
 8001806:	4603      	mov	r3, r0
 8001808:	2216      	movs	r2, #22
 800180a:	601a      	str	r2, [r3, #0]
  return -1;
 800180c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <_exit>:

void _exit (int status)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001820:	f04f 31ff 	mov.w	r1, #4294967295
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ffe7 	bl	80017f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800182a:	bf00      	nop
 800182c:	e7fd      	b.n	800182a <_exit+0x12>

0800182e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	e00a      	b.n	8001856 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001840:	f3af 8000 	nop.w
 8001844:	4601      	mov	r1, r0
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	60ba      	str	r2, [r7, #8]
 800184c:	b2ca      	uxtb	r2, r1
 800184e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	3301      	adds	r3, #1
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	429a      	cmp	r2, r3
 800185c:	dbf0      	blt.n	8001840 <_read+0x12>
  }

  return len;
 800185e:	687b      	ldr	r3, [r7, #4]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	e009      	b.n	800188e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	60ba      	str	r2, [r7, #8]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fd0c 	bl	80012a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	3301      	adds	r3, #1
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	429a      	cmp	r2, r3
 8001894:	dbf1      	blt.n	800187a <_write+0x12>
  }
  return len;
 8001896:	687b      	ldr	r3, [r7, #4]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <_close>:

int _close(int file)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018c8:	605a      	str	r2, [r3, #4]
  return 0;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <_isatty>:

int _isatty(int file)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018e0:	2301      	movs	r3, #1
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b085      	sub	sp, #20
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001910:	4a14      	ldr	r2, [pc, #80]	@ (8001964 <_sbrk+0x5c>)
 8001912:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <_sbrk+0x60>)
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800191c:	4b13      	ldr	r3, [pc, #76]	@ (800196c <_sbrk+0x64>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001924:	4b11      	ldr	r3, [pc, #68]	@ (800196c <_sbrk+0x64>)
 8001926:	4a12      	ldr	r2, [pc, #72]	@ (8001970 <_sbrk+0x68>)
 8001928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192a:	4b10      	ldr	r3, [pc, #64]	@ (800196c <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	429a      	cmp	r2, r3
 8001936:	d207      	bcs.n	8001948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001938:	f008 f8f2 	bl	8009b20 <__errno>
 800193c:	4603      	mov	r3, r0
 800193e:	220c      	movs	r2, #12
 8001940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	e009      	b.n	800195c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001948:	4b08      	ldr	r3, [pc, #32]	@ (800196c <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194e:	4b07      	ldr	r3, [pc, #28]	@ (800196c <_sbrk+0x64>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	4a05      	ldr	r2, [pc, #20]	@ (800196c <_sbrk+0x64>)
 8001958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20008000 	.word	0x20008000
 8001968:	00000400 	.word	0x00000400
 800196c:	20001544 	.word	0x20001544
 8001970:	200041b8 	.word	0x200041b8

08001974 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <SystemInit+0x20>)
 800197a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800197e:	4a05      	ldr	r2, [pc, #20]	@ (8001994 <SystemInit+0x20>)
 8001980:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001984:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b098      	sub	sp, #96	@ 0x60
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800199e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	611a      	str	r2, [r3, #16]
 80019ba:	615a      	str	r2, [r3, #20]
 80019bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	2234      	movs	r2, #52	@ 0x34
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f008 f859 	bl	8009a7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019ca:	4b41      	ldr	r3, [pc, #260]	@ (8001ad0 <MX_TIM1_Init+0x138>)
 80019cc:	4a41      	ldr	r2, [pc, #260]	@ (8001ad4 <MX_TIM1_Init+0x13c>)
 80019ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019d0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad0 <MX_TIM1_Init+0x138>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ad0 <MX_TIM1_Init+0x138>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019dc:	4b3c      	ldr	r3, [pc, #240]	@ (8001ad0 <MX_TIM1_Init+0x138>)
 80019de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad0 <MX_TIM1_Init+0x138>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019ea:	4b39      	ldr	r3, [pc, #228]	@ (8001ad0 <MX_TIM1_Init+0x138>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f0:	4b37      	ldr	r3, [pc, #220]	@ (8001ad0 <MX_TIM1_Init+0x138>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019f6:	4836      	ldr	r0, [pc, #216]	@ (8001ad0 <MX_TIM1_Init+0x138>)
 80019f8:	f003 f926 	bl	8004c48 <HAL_TIM_PWM_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001a02:	f7ff fdf7 	bl	80015f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a12:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a16:	4619      	mov	r1, r3
 8001a18:	482d      	ldr	r0, [pc, #180]	@ (8001ad0 <MX_TIM1_Init+0x138>)
 8001a1a:	f003 ffdf 	bl	80059dc <HAL_TIMEx_MasterConfigSynchronization>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a24:	f7ff fde6 	bl	80015f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a28:	2360      	movs	r3, #96	@ 0x60
 8001a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a30:	2300      	movs	r3, #0
 8001a32:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a34:	2300      	movs	r3, #0
 8001a36:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a44:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a48:	2200      	movs	r2, #0
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4820      	ldr	r0, [pc, #128]	@ (8001ad0 <MX_TIM1_Init+0x138>)
 8001a4e:	f003 faf9 	bl	8005044 <HAL_TIM_PWM_ConfigChannel>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001a58:	f7ff fdcc 	bl	80015f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a5c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a60:	2204      	movs	r2, #4
 8001a62:	4619      	mov	r1, r3
 8001a64:	481a      	ldr	r0, [pc, #104]	@ (8001ad0 <MX_TIM1_Init+0x138>)
 8001a66:	f003 faed 	bl	8005044 <HAL_TIM_PWM_ConfigChannel>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001a70:	f7ff fdc0 	bl	80015f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4807      	ldr	r0, [pc, #28]	@ (8001ad0 <MX_TIM1_Init+0x138>)
 8001ab2:	f004 f815 	bl	8005ae0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001abc:	f7ff fd9a 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ac0:	4803      	ldr	r0, [pc, #12]	@ (8001ad0 <MX_TIM1_Init+0x138>)
 8001ac2:	f000 f9ed 	bl	8001ea0 <HAL_TIM_MspPostInit>

}
 8001ac6:	bf00      	nop
 8001ac8:	3760      	adds	r7, #96	@ 0x60
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20001548 	.word	0x20001548
 8001ad4:	40012c00 	.word	0x40012c00

08001ad8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	@ 0x28
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aea:	463b      	mov	r3, r7
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
 8001af8:	615a      	str	r2, [r3, #20]
 8001afa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001afc:	4b27      	ldr	r3, [pc, #156]	@ (8001b9c <MX_TIM2_Init+0xc4>)
 8001afe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b04:	4b25      	ldr	r3, [pc, #148]	@ (8001b9c <MX_TIM2_Init+0xc4>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0a:	4b24      	ldr	r3, [pc, #144]	@ (8001b9c <MX_TIM2_Init+0xc4>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b10:	4b22      	ldr	r3, [pc, #136]	@ (8001b9c <MX_TIM2_Init+0xc4>)
 8001b12:	f04f 32ff 	mov.w	r2, #4294967295
 8001b16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b18:	4b20      	ldr	r3, [pc, #128]	@ (8001b9c <MX_TIM2_Init+0xc4>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001b9c <MX_TIM2_Init+0xc4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b24:	481d      	ldr	r0, [pc, #116]	@ (8001b9c <MX_TIM2_Init+0xc4>)
 8001b26:	f003 f88f 	bl	8004c48 <HAL_TIM_PWM_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001b30:	f7ff fd60 	bl	80015f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	4619      	mov	r1, r3
 8001b42:	4816      	ldr	r0, [pc, #88]	@ (8001b9c <MX_TIM2_Init+0xc4>)
 8001b44:	f003 ff4a 	bl	80059dc <HAL_TIMEx_MasterConfigSynchronization>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001b4e:	f7ff fd51 	bl	80015f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b52:	2360      	movs	r3, #96	@ 0x60
 8001b54:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b62:	463b      	mov	r3, r7
 8001b64:	2200      	movs	r2, #0
 8001b66:	4619      	mov	r1, r3
 8001b68:	480c      	ldr	r0, [pc, #48]	@ (8001b9c <MX_TIM2_Init+0xc4>)
 8001b6a:	f003 fa6b 	bl	8005044 <HAL_TIM_PWM_ConfigChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001b74:	f7ff fd3e 	bl	80015f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b78:	463b      	mov	r3, r7
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4807      	ldr	r0, [pc, #28]	@ (8001b9c <MX_TIM2_Init+0xc4>)
 8001b80:	f003 fa60 	bl	8005044 <HAL_TIM_PWM_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001b8a:	f7ff fd33 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b8e:	4803      	ldr	r0, [pc, #12]	@ (8001b9c <MX_TIM2_Init+0xc4>)
 8001b90:	f000 f986 	bl	8001ea0 <HAL_TIM_MspPostInit>

}
 8001b94:	bf00      	nop
 8001b96:	3728      	adds	r7, #40	@ 0x28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20001594 	.word	0x20001594

08001ba0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08c      	sub	sp, #48	@ 0x30
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ba6:	f107 030c 	add.w	r3, r7, #12
 8001baa:	2224      	movs	r2, #36	@ 0x24
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f007 ff64 	bl	8009a7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bbe:	4b21      	ldr	r3, [pc, #132]	@ (8001c44 <MX_TIM3_Init+0xa4>)
 8001bc0:	4a21      	ldr	r2, [pc, #132]	@ (8001c48 <MX_TIM3_Init+0xa8>)
 8001bc2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c44 <MX_TIM3_Init+0xa4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bca:	4b1e      	ldr	r3, [pc, #120]	@ (8001c44 <MX_TIM3_Init+0xa4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c44 <MX_TIM3_Init+0xa4>)
 8001bd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bd6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c44 <MX_TIM3_Init+0xa4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bde:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <MX_TIM3_Init+0xa4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001be4:	2301      	movs	r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001be8:	2300      	movs	r3, #0
 8001bea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bec:	2301      	movs	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	480d      	ldr	r0, [pc, #52]	@ (8001c44 <MX_TIM3_Init+0xa4>)
 8001c10:	f003 f972 	bl	8004ef8 <HAL_TIM_Encoder_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001c1a:	f7ff fceb 	bl	80015f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c26:	463b      	mov	r3, r7
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4806      	ldr	r0, [pc, #24]	@ (8001c44 <MX_TIM3_Init+0xa4>)
 8001c2c:	f003 fed6 	bl	80059dc <HAL_TIMEx_MasterConfigSynchronization>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001c36:	f7ff fcdd 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	3730      	adds	r7, #48	@ 0x30
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200015e0 	.word	0x200015e0
 8001c48:	40000400 	.word	0x40000400

08001c4c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b094      	sub	sp, #80	@ 0x50
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c56:	2224      	movs	r2, #36	@ 0x24
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f007 ff0e 	bl	8009a7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c60:	f107 0320 	add.w	r3, r7, #32
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	611a      	str	r2, [r3, #16]
 8001c7a:	615a      	str	r2, [r3, #20]
 8001c7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c7e:	4b30      	ldr	r3, [pc, #192]	@ (8001d40 <MX_TIM4_Init+0xf4>)
 8001c80:	4a30      	ldr	r2, [pc, #192]	@ (8001d44 <MX_TIM4_Init+0xf8>)
 8001c82:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c84:	4b2e      	ldr	r3, [pc, #184]	@ (8001d40 <MX_TIM4_Init+0xf4>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d40 <MX_TIM4_Init+0xf4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c90:	4b2b      	ldr	r3, [pc, #172]	@ (8001d40 <MX_TIM4_Init+0xf4>)
 8001c92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c96:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c98:	4b29      	ldr	r3, [pc, #164]	@ (8001d40 <MX_TIM4_Init+0xf4>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c9e:	4b28      	ldr	r3, [pc, #160]	@ (8001d40 <MX_TIM4_Init+0xf4>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ca4:	4826      	ldr	r0, [pc, #152]	@ (8001d40 <MX_TIM4_Init+0xf4>)
 8001ca6:	f002 ffcf 	bl	8004c48 <HAL_TIM_PWM_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001cb0:	f7ff fca0 	bl	80015f4 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC1Filter = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.IC2Filter = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001cd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4818      	ldr	r0, [pc, #96]	@ (8001d40 <MX_TIM4_Init+0xf4>)
 8001ce0:	f003 f90a 	bl	8004ef8 <HAL_TIM_Encoder_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8001cea:	f7ff fc83 	bl	80015f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cf6:	f107 0320 	add.w	r3, r7, #32
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4810      	ldr	r0, [pc, #64]	@ (8001d40 <MX_TIM4_Init+0xf4>)
 8001cfe:	f003 fe6d 	bl	80059dc <HAL_TIMEx_MasterConfigSynchronization>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8001d08:	f7ff fc74 	bl	80015f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d0c:	2360      	movs	r3, #96	@ 0x60
 8001d0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	220c      	movs	r2, #12
 8001d20:	4619      	mov	r1, r3
 8001d22:	4807      	ldr	r0, [pc, #28]	@ (8001d40 <MX_TIM4_Init+0xf4>)
 8001d24:	f003 f98e 	bl	8005044 <HAL_TIM_PWM_ConfigChannel>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8001d2e:	f7ff fc61 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d32:	4803      	ldr	r0, [pc, #12]	@ (8001d40 <MX_TIM4_Init+0xf4>)
 8001d34:	f000 f8b4 	bl	8001ea0 <HAL_TIM_MspPostInit>

}
 8001d38:	bf00      	nop
 8001d3a:	3750      	adds	r7, #80	@ 0x50
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	2000162c 	.word	0x2000162c
 8001d44:	40000800 	.word	0x40000800

08001d48 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08c      	sub	sp, #48	@ 0x30
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 031c 	add.w	r3, r7, #28
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a2a      	ldr	r2, [pc, #168]	@ (8001e10 <HAL_TIM_PWM_MspInit+0xc8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d10c      	bne.n	8001d84 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e14 <HAL_TIM_PWM_MspInit+0xcc>)
 8001d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d6e:	4a29      	ldr	r2, [pc, #164]	@ (8001e14 <HAL_TIM_PWM_MspInit+0xcc>)
 8001d70:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d74:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d76:	4b27      	ldr	r3, [pc, #156]	@ (8001e14 <HAL_TIM_PWM_MspInit+0xcc>)
 8001d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d7e:	61bb      	str	r3, [r7, #24]
 8001d80:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001d82:	e040      	b.n	8001e06 <HAL_TIM_PWM_MspInit+0xbe>
  else if(tim_pwmHandle->Instance==TIM2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d8c:	d10c      	bne.n	8001da8 <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d8e:	4b21      	ldr	r3, [pc, #132]	@ (8001e14 <HAL_TIM_PWM_MspInit+0xcc>)
 8001d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d92:	4a20      	ldr	r2, [pc, #128]	@ (8001e14 <HAL_TIM_PWM_MspInit+0xcc>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <HAL_TIM_PWM_MspInit+0xcc>)
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697b      	ldr	r3, [r7, #20]
}
 8001da6:	e02e      	b.n	8001e06 <HAL_TIM_PWM_MspInit+0xbe>
  else if(tim_pwmHandle->Instance==TIM4)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1a      	ldr	r2, [pc, #104]	@ (8001e18 <HAL_TIM_PWM_MspInit+0xd0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d129      	bne.n	8001e06 <HAL_TIM_PWM_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001db2:	4b18      	ldr	r3, [pc, #96]	@ (8001e14 <HAL_TIM_PWM_MspInit+0xcc>)
 8001db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db6:	4a17      	ldr	r2, [pc, #92]	@ (8001e14 <HAL_TIM_PWM_MspInit+0xcc>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dbe:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <HAL_TIM_PWM_MspInit+0xcc>)
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <HAL_TIM_PWM_MspInit+0xcc>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dce:	4a11      	ldr	r2, [pc, #68]	@ (8001e14 <HAL_TIM_PWM_MspInit+0xcc>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e14 <HAL_TIM_PWM_MspInit+0xcc>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001de2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001df4:	230a      	movs	r3, #10
 8001df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e02:	f000 fe6b 	bl	8002adc <HAL_GPIO_Init>
}
 8001e06:	bf00      	nop
 8001e08:	3730      	adds	r7, #48	@ 0x30
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40012c00 	.word	0x40012c00
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40000800 	.word	0x40000800

08001e1c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	@ 0x28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a17      	ldr	r2, [pc, #92]	@ (8001e98 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d128      	bne.n	8001e90 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e3e:	4b17      	ldr	r3, [pc, #92]	@ (8001e9c <HAL_TIM_Encoder_MspInit+0x80>)
 8001e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e42:	4a16      	ldr	r2, [pc, #88]	@ (8001e9c <HAL_TIM_Encoder_MspInit+0x80>)
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e4a:	4b14      	ldr	r3, [pc, #80]	@ (8001e9c <HAL_TIM_Encoder_MspInit+0x80>)
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	4b11      	ldr	r3, [pc, #68]	@ (8001e9c <HAL_TIM_Encoder_MspInit+0x80>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5a:	4a10      	ldr	r2, [pc, #64]	@ (8001e9c <HAL_TIM_Encoder_MspInit+0x80>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e62:	4b0e      	ldr	r3, [pc, #56]	@ (8001e9c <HAL_TIM_Encoder_MspInit+0x80>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001e6e:	2350      	movs	r3, #80	@ 0x50
 8001e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e82:	f107 0314 	add.w	r3, r7, #20
 8001e86:	4619      	mov	r1, r3
 8001e88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e8c:	f000 fe26 	bl	8002adc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e90:	bf00      	nop
 8001e92:	3728      	adds	r7, #40	@ 0x28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40000400 	.word	0x40000400
 8001e9c:	40021000 	.word	0x40021000

08001ea0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	@ 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a35      	ldr	r2, [pc, #212]	@ (8001f94 <HAL_TIM_MspPostInit+0xf4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d11e      	bne.n	8001f00 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec2:	4b35      	ldr	r3, [pc, #212]	@ (8001f98 <HAL_TIM_MspPostInit+0xf8>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec6:	4a34      	ldr	r2, [pc, #208]	@ (8001f98 <HAL_TIM_MspPostInit+0xf8>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ece:	4b32      	ldr	r3, [pc, #200]	@ (8001f98 <HAL_TIM_MspPostInit+0xf8>)
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001eda:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001eec:	2306      	movs	r3, #6
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001efa:	f000 fdef 	bl	8002adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001efe:	e044      	b.n	8001f8a <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f08:	d11d      	bne.n	8001f46 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0a:	4b23      	ldr	r3, [pc, #140]	@ (8001f98 <HAL_TIM_MspPostInit+0xf8>)
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0e:	4a22      	ldr	r2, [pc, #136]	@ (8001f98 <HAL_TIM_MspPostInit+0xf8>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f16:	4b20      	ldr	r3, [pc, #128]	@ (8001f98 <HAL_TIM_MspPostInit+0xf8>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f22:	2303      	movs	r3, #3
 8001f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f32:	2301      	movs	r3, #1
 8001f34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f36:	f107 0314 	add.w	r3, r7, #20
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f40:	f000 fdcc 	bl	8002adc <HAL_GPIO_Init>
}
 8001f44:	e021      	b.n	8001f8a <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM4)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a14      	ldr	r2, [pc, #80]	@ (8001f9c <HAL_TIM_MspPostInit+0xfc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d11c      	bne.n	8001f8a <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f50:	4b11      	ldr	r3, [pc, #68]	@ (8001f98 <HAL_TIM_MspPostInit+0xf8>)
 8001f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f54:	4a10      	ldr	r2, [pc, #64]	@ (8001f98 <HAL_TIM_MspPostInit+0xf8>)
 8001f56:	f043 0302 	orr.w	r3, r3, #2
 8001f5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f98 <HAL_TIM_MspPostInit+0xf8>)
 8001f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM4_CH4_M_SCTR_LIDAR_Pin;
 8001f68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM4_CH4_M_SCTR_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4619      	mov	r1, r3
 8001f84:	4806      	ldr	r0, [pc, #24]	@ (8001fa0 <HAL_TIM_MspPostInit+0x100>)
 8001f86:	f000 fda9 	bl	8002adc <HAL_GPIO_Init>
}
 8001f8a:	bf00      	nop
 8001f8c:	3728      	adds	r7, #40	@ 0x28
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40012c00 	.word	0x40012c00
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40000800 	.word	0x40000800
 8001fa0:	48000400 	.word	0x48000400

08001fa4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fa8:	4b22      	ldr	r3, [pc, #136]	@ (8002034 <MX_USART2_UART_Init+0x90>)
 8001faa:	4a23      	ldr	r2, [pc, #140]	@ (8002038 <MX_USART2_UART_Init+0x94>)
 8001fac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fae:	4b21      	ldr	r3, [pc, #132]	@ (8002034 <MX_USART2_UART_Init+0x90>)
 8001fb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002034 <MX_USART2_UART_Init+0x90>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <MX_USART2_UART_Init+0x90>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8002034 <MX_USART2_UART_Init+0x90>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <MX_USART2_UART_Init+0x90>)
 8001fca:	220c      	movs	r2, #12
 8001fcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fce:	4b19      	ldr	r3, [pc, #100]	@ (8002034 <MX_USART2_UART_Init+0x90>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd4:	4b17      	ldr	r3, [pc, #92]	@ (8002034 <MX_USART2_UART_Init+0x90>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fda:	4b16      	ldr	r3, [pc, #88]	@ (8002034 <MX_USART2_UART_Init+0x90>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fe0:	4b14      	ldr	r3, [pc, #80]	@ (8002034 <MX_USART2_UART_Init+0x90>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fe6:	4b13      	ldr	r3, [pc, #76]	@ (8002034 <MX_USART2_UART_Init+0x90>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fec:	4811      	ldr	r0, [pc, #68]	@ (8002034 <MX_USART2_UART_Init+0x90>)
 8001fee:	f003 fe03 	bl	8005bf8 <HAL_UART_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001ff8:	f7ff fafc 	bl	80015f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	480d      	ldr	r0, [pc, #52]	@ (8002034 <MX_USART2_UART_Init+0x90>)
 8002000:	f004 fe4f 	bl	8006ca2 <HAL_UARTEx_SetTxFifoThreshold>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800200a:	f7ff faf3 	bl	80015f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800200e:	2100      	movs	r1, #0
 8002010:	4808      	ldr	r0, [pc, #32]	@ (8002034 <MX_USART2_UART_Init+0x90>)
 8002012:	f004 fe84 	bl	8006d1e <HAL_UARTEx_SetRxFifoThreshold>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800201c:	f7ff faea 	bl	80015f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002020:	4804      	ldr	r0, [pc, #16]	@ (8002034 <MX_USART2_UART_Init+0x90>)
 8002022:	f004 fe05 	bl	8006c30 <HAL_UARTEx_DisableFifoMode>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800202c:	f7ff fae2 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20001678 	.word	0x20001678
 8002038:	40004400 	.word	0x40004400

0800203c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002040:	4b22      	ldr	r3, [pc, #136]	@ (80020cc <MX_USART3_UART_Init+0x90>)
 8002042:	4a23      	ldr	r2, [pc, #140]	@ (80020d0 <MX_USART3_UART_Init+0x94>)
 8002044:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 128000;
 8002046:	4b21      	ldr	r3, [pc, #132]	@ (80020cc <MX_USART3_UART_Init+0x90>)
 8002048:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 800204c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800204e:	4b1f      	ldr	r3, [pc, #124]	@ (80020cc <MX_USART3_UART_Init+0x90>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002054:	4b1d      	ldr	r3, [pc, #116]	@ (80020cc <MX_USART3_UART_Init+0x90>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800205a:	4b1c      	ldr	r3, [pc, #112]	@ (80020cc <MX_USART3_UART_Init+0x90>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002060:	4b1a      	ldr	r3, [pc, #104]	@ (80020cc <MX_USART3_UART_Init+0x90>)
 8002062:	220c      	movs	r2, #12
 8002064:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002066:	4b19      	ldr	r3, [pc, #100]	@ (80020cc <MX_USART3_UART_Init+0x90>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800206c:	4b17      	ldr	r3, [pc, #92]	@ (80020cc <MX_USART3_UART_Init+0x90>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002072:	4b16      	ldr	r3, [pc, #88]	@ (80020cc <MX_USART3_UART_Init+0x90>)
 8002074:	2200      	movs	r2, #0
 8002076:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002078:	4b14      	ldr	r3, [pc, #80]	@ (80020cc <MX_USART3_UART_Init+0x90>)
 800207a:	2200      	movs	r2, #0
 800207c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800207e:	4b13      	ldr	r3, [pc, #76]	@ (80020cc <MX_USART3_UART_Init+0x90>)
 8002080:	2200      	movs	r2, #0
 8002082:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002084:	4811      	ldr	r0, [pc, #68]	@ (80020cc <MX_USART3_UART_Init+0x90>)
 8002086:	f003 fdb7 	bl	8005bf8 <HAL_UART_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002090:	f7ff fab0 	bl	80015f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002094:	2100      	movs	r1, #0
 8002096:	480d      	ldr	r0, [pc, #52]	@ (80020cc <MX_USART3_UART_Init+0x90>)
 8002098:	f004 fe03 	bl	8006ca2 <HAL_UARTEx_SetTxFifoThreshold>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80020a2:	f7ff faa7 	bl	80015f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020a6:	2100      	movs	r1, #0
 80020a8:	4808      	ldr	r0, [pc, #32]	@ (80020cc <MX_USART3_UART_Init+0x90>)
 80020aa:	f004 fe38 	bl	8006d1e <HAL_UARTEx_SetRxFifoThreshold>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80020b4:	f7ff fa9e 	bl	80015f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80020b8:	4804      	ldr	r0, [pc, #16]	@ (80020cc <MX_USART3_UART_Init+0x90>)
 80020ba:	f004 fdb9 	bl	8006c30 <HAL_UARTEx_DisableFifoMode>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80020c4:	f7ff fa96 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	2000170c 	.word	0x2000170c
 80020d0:	40004800 	.word	0x40004800

080020d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b09c      	sub	sp, #112	@ 0x70
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020ec:	f107 0318 	add.w	r3, r7, #24
 80020f0:	2244      	movs	r2, #68	@ 0x44
 80020f2:	2100      	movs	r1, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f007 fcc1 	bl	8009a7c <memset>
  if(uartHandle->Instance==USART2)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a52      	ldr	r2, [pc, #328]	@ (8002248 <HAL_UART_MspInit+0x174>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d137      	bne.n	8002174 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002104:	2302      	movs	r3, #2
 8002106:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002108:	2300      	movs	r3, #0
 800210a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800210c:	f107 0318 	add.w	r3, r7, #24
 8002110:	4618      	mov	r0, r3
 8002112:	f001 fc73 	bl	80039fc <HAL_RCCEx_PeriphCLKConfig>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800211c:	f7ff fa6a 	bl	80015f4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002120:	4b4a      	ldr	r3, [pc, #296]	@ (800224c <HAL_UART_MspInit+0x178>)
 8002122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002124:	4a49      	ldr	r2, [pc, #292]	@ (800224c <HAL_UART_MspInit+0x178>)
 8002126:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800212a:	6593      	str	r3, [r2, #88]	@ 0x58
 800212c:	4b47      	ldr	r3, [pc, #284]	@ (800224c <HAL_UART_MspInit+0x178>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002138:	4b44      	ldr	r3, [pc, #272]	@ (800224c <HAL_UART_MspInit+0x178>)
 800213a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213c:	4a43      	ldr	r2, [pc, #268]	@ (800224c <HAL_UART_MspInit+0x178>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002144:	4b41      	ldr	r3, [pc, #260]	@ (800224c <HAL_UART_MspInit+0x178>)
 8002146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002150:	230c      	movs	r3, #12
 8002152:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002160:	2307      	movs	r3, #7
 8002162:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002164:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002168:	4619      	mov	r1, r3
 800216a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800216e:	f000 fcb5 	bl	8002adc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002172:	e065      	b.n	8002240 <HAL_UART_MspInit+0x16c>
  else if(uartHandle->Instance==USART3)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a35      	ldr	r2, [pc, #212]	@ (8002250 <HAL_UART_MspInit+0x17c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d160      	bne.n	8002240 <HAL_UART_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800217e:	2304      	movs	r3, #4
 8002180:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002182:	2300      	movs	r3, #0
 8002184:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002186:	f107 0318 	add.w	r3, r7, #24
 800218a:	4618      	mov	r0, r3
 800218c:	f001 fc36 	bl	80039fc <HAL_RCCEx_PeriphCLKConfig>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8002196:	f7ff fa2d 	bl	80015f4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800219a:	4b2c      	ldr	r3, [pc, #176]	@ (800224c <HAL_UART_MspInit+0x178>)
 800219c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219e:	4a2b      	ldr	r2, [pc, #172]	@ (800224c <HAL_UART_MspInit+0x178>)
 80021a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80021a6:	4b29      	ldr	r3, [pc, #164]	@ (800224c <HAL_UART_MspInit+0x178>)
 80021a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b2:	4b26      	ldr	r3, [pc, #152]	@ (800224c <HAL_UART_MspInit+0x178>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b6:	4a25      	ldr	r2, [pc, #148]	@ (800224c <HAL_UART_MspInit+0x178>)
 80021b8:	f043 0302 	orr.w	r3, r3, #2
 80021bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021be:	4b23      	ldr	r3, [pc, #140]	@ (800224c <HAL_UART_MspInit+0x178>)
 80021c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_TX_LIDAR_Pin|USART3_RX_LIDAR_Pin;
 80021ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80021ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021dc:	2307      	movs	r3, #7
 80021de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80021e4:	4619      	mov	r1, r3
 80021e6:	481b      	ldr	r0, [pc, #108]	@ (8002254 <HAL_UART_MspInit+0x180>)
 80021e8:	f000 fc78 	bl	8002adc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 80021ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002258 <HAL_UART_MspInit+0x184>)
 80021ee:	4a1b      	ldr	r2, [pc, #108]	@ (800225c <HAL_UART_MspInit+0x188>)
 80021f0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80021f2:	4b19      	ldr	r3, [pc, #100]	@ (8002258 <HAL_UART_MspInit+0x184>)
 80021f4:	221c      	movs	r2, #28
 80021f6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021f8:	4b17      	ldr	r3, [pc, #92]	@ (8002258 <HAL_UART_MspInit+0x184>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021fe:	4b16      	ldr	r3, [pc, #88]	@ (8002258 <HAL_UART_MspInit+0x184>)
 8002200:	2200      	movs	r2, #0
 8002202:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002204:	4b14      	ldr	r3, [pc, #80]	@ (8002258 <HAL_UART_MspInit+0x184>)
 8002206:	2280      	movs	r2, #128	@ 0x80
 8002208:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800220a:	4b13      	ldr	r3, [pc, #76]	@ (8002258 <HAL_UART_MspInit+0x184>)
 800220c:	2200      	movs	r2, #0
 800220e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002210:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <HAL_UART_MspInit+0x184>)
 8002212:	2200      	movs	r2, #0
 8002214:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002216:	4b10      	ldr	r3, [pc, #64]	@ (8002258 <HAL_UART_MspInit+0x184>)
 8002218:	2220      	movs	r2, #32
 800221a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800221c:	4b0e      	ldr	r3, [pc, #56]	@ (8002258 <HAL_UART_MspInit+0x184>)
 800221e:	2200      	movs	r2, #0
 8002220:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002222:	480d      	ldr	r0, [pc, #52]	@ (8002258 <HAL_UART_MspInit+0x184>)
 8002224:	f000 f9e8 	bl	80025f8 <HAL_DMA_Init>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_UART_MspInit+0x15e>
      Error_Handler();
 800222e:	f7ff f9e1 	bl	80015f4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a08      	ldr	r2, [pc, #32]	@ (8002258 <HAL_UART_MspInit+0x184>)
 8002236:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800223a:	4a07      	ldr	r2, [pc, #28]	@ (8002258 <HAL_UART_MspInit+0x184>)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002240:	bf00      	nop
 8002242:	3770      	adds	r7, #112	@ 0x70
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40004400 	.word	0x40004400
 800224c:	40021000 	.word	0x40021000
 8002250:	40004800 	.word	0x40004800
 8002254:	48000400 	.word	0x48000400
 8002258:	200017a0 	.word	0x200017a0
 800225c:	40020008 	.word	0x40020008

08002260 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002260:	480d      	ldr	r0, [pc, #52]	@ (8002298 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002262:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002264:	f7ff fb86 	bl	8001974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002268:	480c      	ldr	r0, [pc, #48]	@ (800229c <LoopForever+0x6>)
  ldr r1, =_edata
 800226a:	490d      	ldr	r1, [pc, #52]	@ (80022a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800226c:	4a0d      	ldr	r2, [pc, #52]	@ (80022a4 <LoopForever+0xe>)
  movs r3, #0
 800226e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002270:	e002      	b.n	8002278 <LoopCopyDataInit>

08002272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002276:	3304      	adds	r3, #4

08002278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800227a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800227c:	d3f9      	bcc.n	8002272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800227e:	4a0a      	ldr	r2, [pc, #40]	@ (80022a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002280:	4c0a      	ldr	r4, [pc, #40]	@ (80022ac <LoopForever+0x16>)
  movs r3, #0
 8002282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002284:	e001      	b.n	800228a <LoopFillZerobss>

08002286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002288:	3204      	adds	r2, #4

0800228a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800228a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800228c:	d3fb      	bcc.n	8002286 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800228e:	f007 fc4d 	bl	8009b2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002292:	f7ff f88d 	bl	80013b0 <main>

08002296 <LoopForever>:

LoopForever:
    b LoopForever
 8002296:	e7fe      	b.n	8002296 <LoopForever>
  ldr   r0, =_estack
 8002298:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800229c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80022a4:	0800d6a0 	.word	0x0800d6a0
  ldr r2, =_sbss
 80022a8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80022ac:	200041b8 	.word	0x200041b8

080022b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022b0:	e7fe      	b.n	80022b0 <ADC1_2_IRQHandler>

080022b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022bc:	2003      	movs	r0, #3
 80022be:	f000 f95b 	bl	8002578 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022c2:	200f      	movs	r0, #15
 80022c4:	f000 f80e 	bl	80022e4 <HAL_InitTick>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	71fb      	strb	r3, [r7, #7]
 80022d2:	e001      	b.n	80022d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022d4:	f7ff fa16 	bl	8001704 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022d8:	79fb      	ldrb	r3, [r7, #7]

}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80022f0:	4b16      	ldr	r3, [pc, #88]	@ (800234c <HAL_InitTick+0x68>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d022      	beq.n	800233e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80022f8:	4b15      	ldr	r3, [pc, #84]	@ (8002350 <HAL_InitTick+0x6c>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b13      	ldr	r3, [pc, #76]	@ (800234c <HAL_InitTick+0x68>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002304:	fbb1 f3f3 	udiv	r3, r1, r3
 8002308:	fbb2 f3f3 	udiv	r3, r2, r3
 800230c:	4618      	mov	r0, r3
 800230e:	f000 f966 	bl	80025de <HAL_SYSTICK_Config>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10f      	bne.n	8002338 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b0f      	cmp	r3, #15
 800231c:	d809      	bhi.n	8002332 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800231e:	2200      	movs	r2, #0
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	f04f 30ff 	mov.w	r0, #4294967295
 8002326:	f000 f932 	bl	800258e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800232a:	4a0a      	ldr	r2, [pc, #40]	@ (8002354 <HAL_InitTick+0x70>)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	e007      	b.n	8002342 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	73fb      	strb	r3, [r7, #15]
 8002336:	e004      	b.n	8002342 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	e001      	b.n	8002342 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002342:	7bfb      	ldrb	r3, [r7, #15]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000008 	.word	0x20000008
 8002350:	20000000 	.word	0x20000000
 8002354:	20000004 	.word	0x20000004

08002358 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800235c:	4b05      	ldr	r3, [pc, #20]	@ (8002374 <HAL_IncTick+0x1c>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b05      	ldr	r3, [pc, #20]	@ (8002378 <HAL_IncTick+0x20>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4413      	add	r3, r2
 8002366:	4a03      	ldr	r2, [pc, #12]	@ (8002374 <HAL_IncTick+0x1c>)
 8002368:	6013      	str	r3, [r2, #0]
}
 800236a:	bf00      	nop
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	20001800 	.word	0x20001800
 8002378:	20000008 	.word	0x20000008

0800237c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return uwTick;
 8002380:	4b03      	ldr	r3, [pc, #12]	@ (8002390 <HAL_GetTick+0x14>)
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20001800 	.word	0x20001800

08002394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800239c:	f7ff ffee 	bl	800237c <HAL_GetTick>
 80023a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ac:	d004      	beq.n	80023b8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ae:	4b09      	ldr	r3, [pc, #36]	@ (80023d4 <HAL_Delay+0x40>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	4413      	add	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023b8:	bf00      	nop
 80023ba:	f7ff ffdf 	bl	800237c <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d8f7      	bhi.n	80023ba <HAL_Delay+0x26>
  {
  }
}
 80023ca:	bf00      	nop
 80023cc:	bf00      	nop
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000008 	.word	0x20000008

080023d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e8:	4b0c      	ldr	r3, [pc, #48]	@ (800241c <__NVIC_SetPriorityGrouping+0x44>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023f4:	4013      	ands	r3, r2
 80023f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002400:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002404:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800240a:	4a04      	ldr	r2, [pc, #16]	@ (800241c <__NVIC_SetPriorityGrouping+0x44>)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	60d3      	str	r3, [r2, #12]
}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002424:	4b04      	ldr	r3, [pc, #16]	@ (8002438 <__NVIC_GetPriorityGrouping+0x18>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	f003 0307 	and.w	r3, r3, #7
}
 800242e:	4618      	mov	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	2b00      	cmp	r3, #0
 800244c:	db0b      	blt.n	8002466 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	f003 021f 	and.w	r2, r3, #31
 8002454:	4907      	ldr	r1, [pc, #28]	@ (8002474 <__NVIC_EnableIRQ+0x38>)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	095b      	lsrs	r3, r3, #5
 800245c:	2001      	movs	r0, #1
 800245e:	fa00 f202 	lsl.w	r2, r0, r2
 8002462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000e100 	.word	0xe000e100

08002478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	6039      	str	r1, [r7, #0]
 8002482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002488:	2b00      	cmp	r3, #0
 800248a:	db0a      	blt.n	80024a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	b2da      	uxtb	r2, r3
 8002490:	490c      	ldr	r1, [pc, #48]	@ (80024c4 <__NVIC_SetPriority+0x4c>)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	0112      	lsls	r2, r2, #4
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	440b      	add	r3, r1
 800249c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a0:	e00a      	b.n	80024b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4908      	ldr	r1, [pc, #32]	@ (80024c8 <__NVIC_SetPriority+0x50>)
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	3b04      	subs	r3, #4
 80024b0:	0112      	lsls	r2, r2, #4
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	440b      	add	r3, r1
 80024b6:	761a      	strb	r2, [r3, #24]
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000e100 	.word	0xe000e100
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b089      	sub	sp, #36	@ 0x24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f1c3 0307 	rsb	r3, r3, #7
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	bf28      	it	cs
 80024ea:	2304      	movcs	r3, #4
 80024ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3304      	adds	r3, #4
 80024f2:	2b06      	cmp	r3, #6
 80024f4:	d902      	bls.n	80024fc <NVIC_EncodePriority+0x30>
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3b03      	subs	r3, #3
 80024fa:	e000      	b.n	80024fe <NVIC_EncodePriority+0x32>
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002500:	f04f 32ff 	mov.w	r2, #4294967295
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43da      	mvns	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	401a      	ands	r2, r3
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002514:	f04f 31ff 	mov.w	r1, #4294967295
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	fa01 f303 	lsl.w	r3, r1, r3
 800251e:	43d9      	mvns	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	4313      	orrs	r3, r2
         );
}
 8002526:	4618      	mov	r0, r3
 8002528:	3724      	adds	r7, #36	@ 0x24
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
	...

08002534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3b01      	subs	r3, #1
 8002540:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002544:	d301      	bcc.n	800254a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002546:	2301      	movs	r3, #1
 8002548:	e00f      	b.n	800256a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800254a:	4a0a      	ldr	r2, [pc, #40]	@ (8002574 <SysTick_Config+0x40>)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3b01      	subs	r3, #1
 8002550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002552:	210f      	movs	r1, #15
 8002554:	f04f 30ff 	mov.w	r0, #4294967295
 8002558:	f7ff ff8e 	bl	8002478 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800255c:	4b05      	ldr	r3, [pc, #20]	@ (8002574 <SysTick_Config+0x40>)
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002562:	4b04      	ldr	r3, [pc, #16]	@ (8002574 <SysTick_Config+0x40>)
 8002564:	2207      	movs	r2, #7
 8002566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	e000e010 	.word	0xe000e010

08002578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff ff29 	bl	80023d8 <__NVIC_SetPriorityGrouping>
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b086      	sub	sp, #24
 8002592:	af00      	add	r7, sp, #0
 8002594:	4603      	mov	r3, r0
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800259c:	f7ff ff40 	bl	8002420 <__NVIC_GetPriorityGrouping>
 80025a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	6978      	ldr	r0, [r7, #20]
 80025a8:	f7ff ff90 	bl	80024cc <NVIC_EncodePriority>
 80025ac:	4602      	mov	r2, r0
 80025ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff5f 	bl	8002478 <__NVIC_SetPriority>
}
 80025ba:	bf00      	nop
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	4603      	mov	r3, r0
 80025ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff33 	bl	800243c <__NVIC_EnableIRQ>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ffa4 	bl	8002534 <SysTick_Config>
 80025ec:	4603      	mov	r3, r0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e08d      	b.n	8002726 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	4b47      	ldr	r3, [pc, #284]	@ (8002730 <HAL_DMA_Init+0x138>)
 8002612:	429a      	cmp	r2, r3
 8002614:	d80f      	bhi.n	8002636 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	4b45      	ldr	r3, [pc, #276]	@ (8002734 <HAL_DMA_Init+0x13c>)
 800261e:	4413      	add	r3, r2
 8002620:	4a45      	ldr	r2, [pc, #276]	@ (8002738 <HAL_DMA_Init+0x140>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	091b      	lsrs	r3, r3, #4
 8002628:	009a      	lsls	r2, r3, #2
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a42      	ldr	r2, [pc, #264]	@ (800273c <HAL_DMA_Init+0x144>)
 8002632:	641a      	str	r2, [r3, #64]	@ 0x40
 8002634:	e00e      	b.n	8002654 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	4b40      	ldr	r3, [pc, #256]	@ (8002740 <HAL_DMA_Init+0x148>)
 800263e:	4413      	add	r3, r2
 8002640:	4a3d      	ldr	r2, [pc, #244]	@ (8002738 <HAL_DMA_Init+0x140>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	091b      	lsrs	r3, r3, #4
 8002648:	009a      	lsls	r2, r3, #2
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a3c      	ldr	r2, [pc, #240]	@ (8002744 <HAL_DMA_Init+0x14c>)
 8002652:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800266a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800266e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002678:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002684:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002690:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f9b6 	bl	8002a18 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026b4:	d102      	bne.n	80026bc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80026d0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d010      	beq.n	80026fc <HAL_DMA_Init+0x104>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d80c      	bhi.n	80026fc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f9d6 	bl	8002a94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	e008      	b.n	800270e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40020407 	.word	0x40020407
 8002734:	bffdfff8 	.word	0xbffdfff8
 8002738:	cccccccd 	.word	0xcccccccd
 800273c:	40020000 	.word	0x40020000
 8002740:	bffdfbf8 	.word	0xbffdfbf8
 8002744:	40020400 	.word	0x40020400

08002748 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_DMA_Start_IT+0x20>
 8002764:	2302      	movs	r3, #2
 8002766:	e066      	b.n	8002836 <HAL_DMA_Start_IT+0xee>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	d155      	bne.n	8002828 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0201 	bic.w	r2, r2, #1
 8002798:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 f8fb 	bl	800299c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d008      	beq.n	80027c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 020e 	orr.w	r2, r2, #14
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	e00f      	b.n	80027e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0204 	bic.w	r2, r2, #4
 80027ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 020a 	orr.w	r2, r2, #10
 80027de:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d007      	beq.n	80027fe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027fc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002802:	2b00      	cmp	r3, #0
 8002804:	d007      	beq.n	8002816 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002810:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002814:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 0201 	orr.w	r2, r2, #1
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	e005      	b.n	8002834 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002830:	2302      	movs	r3, #2
 8002832:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002834:	7dfb      	ldrb	r3, [r7, #23]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285a:	f003 031f 	and.w	r3, r3, #31
 800285e:	2204      	movs	r2, #4
 8002860:	409a      	lsls	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4013      	ands	r3, r2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d026      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x7a>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d021      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b00      	cmp	r3, #0
 8002880:	d107      	bne.n	8002892 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0204 	bic.w	r2, r2, #4
 8002890:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002896:	f003 021f 	and.w	r2, r3, #31
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	2104      	movs	r1, #4
 80028a0:	fa01 f202 	lsl.w	r2, r1, r2
 80028a4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d071      	beq.n	8002992 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80028b6:	e06c      	b.n	8002992 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	2202      	movs	r2, #2
 80028c2:	409a      	lsls	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d02e      	beq.n	800292a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d029      	beq.n	800292a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0320 	and.w	r3, r3, #32
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10b      	bne.n	80028fc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 020a 	bic.w	r2, r2, #10
 80028f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002900:	f003 021f 	and.w	r2, r3, #31
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	2102      	movs	r1, #2
 800290a:	fa01 f202 	lsl.w	r2, r1, r2
 800290e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291c:	2b00      	cmp	r3, #0
 800291e:	d038      	beq.n	8002992 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002928:	e033      	b.n	8002992 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292e:	f003 031f 	and.w	r3, r3, #31
 8002932:	2208      	movs	r2, #8
 8002934:	409a      	lsls	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4013      	ands	r3, r2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d02a      	beq.n	8002994 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d025      	beq.n	8002994 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 020e 	bic.w	r2, r2, #14
 8002956:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295c:	f003 021f 	and.w	r2, r3, #31
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002964:	2101      	movs	r1, #1
 8002966:	fa01 f202 	lsl.w	r2, r1, r2
 800296a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002986:	2b00      	cmp	r3, #0
 8002988:	d004      	beq.n	8002994 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002992:	bf00      	nop
 8002994:	bf00      	nop
}
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80029b2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d004      	beq.n	80029c6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80029c4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ca:	f003 021f 	and.w	r2, r3, #31
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	2101      	movs	r1, #1
 80029d4:	fa01 f202 	lsl.w	r2, r1, r2
 80029d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b10      	cmp	r3, #16
 80029e8:	d108      	bne.n	80029fc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029fa:	e007      	b.n	8002a0c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	60da      	str	r2, [r3, #12]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	4b16      	ldr	r3, [pc, #88]	@ (8002a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d802      	bhi.n	8002a32 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002a2c:	4b15      	ldr	r3, [pc, #84]	@ (8002a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	e001      	b.n	8002a36 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002a32:	4b15      	ldr	r3, [pc, #84]	@ (8002a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002a34:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	3b08      	subs	r3, #8
 8002a42:	4a12      	ldr	r2, [pc, #72]	@ (8002a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002a44:	fba2 2303 	umull	r2, r3, r2, r3
 8002a48:	091b      	lsrs	r3, r3, #4
 8002a4a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a50:	089b      	lsrs	r3, r3, #2
 8002a52:	009a      	lsls	r2, r3, #2
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4413      	add	r3, r2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a0b      	ldr	r2, [pc, #44]	@ (8002a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002a62:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002a72:	bf00      	nop
 8002a74:	371c      	adds	r7, #28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40020407 	.word	0x40020407
 8002a84:	40020800 	.word	0x40020800
 8002a88:	40020820 	.word	0x40020820
 8002a8c:	cccccccd 	.word	0xcccccccd
 8002a90:	40020880 	.word	0x40020880

08002a94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	461a      	mov	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a08      	ldr	r2, [pc, #32]	@ (8002ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002ab6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002ac8:	bf00      	nop
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	1000823f 	.word	0x1000823f
 8002ad8:	40020940 	.word	0x40020940

08002adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002aea:	e15a      	b.n	8002da2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	2101      	movs	r1, #1
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	fa01 f303 	lsl.w	r3, r1, r3
 8002af8:	4013      	ands	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 814c 	beq.w	8002d9c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d005      	beq.n	8002b1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d130      	bne.n	8002b7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	2203      	movs	r2, #3
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4013      	ands	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b52:	2201      	movs	r2, #1
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	091b      	lsrs	r3, r3, #4
 8002b68:	f003 0201 	and.w	r2, r3, #1
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d017      	beq.n	8002bba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	2203      	movs	r2, #3
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d123      	bne.n	8002c0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	08da      	lsrs	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3208      	adds	r2, #8
 8002bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	220f      	movs	r2, #15
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4013      	ands	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	08da      	lsrs	r2, r3, #3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3208      	adds	r2, #8
 8002c08:	6939      	ldr	r1, [r7, #16]
 8002c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	2203      	movs	r2, #3
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4013      	ands	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f003 0203 	and.w	r2, r3, #3
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 80a6 	beq.w	8002d9c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c50:	4b5b      	ldr	r3, [pc, #364]	@ (8002dc0 <HAL_GPIO_Init+0x2e4>)
 8002c52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c54:	4a5a      	ldr	r2, [pc, #360]	@ (8002dc0 <HAL_GPIO_Init+0x2e4>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c5c:	4b58      	ldr	r3, [pc, #352]	@ (8002dc0 <HAL_GPIO_Init+0x2e4>)
 8002c5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c68:	4a56      	ldr	r2, [pc, #344]	@ (8002dc4 <HAL_GPIO_Init+0x2e8>)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	089b      	lsrs	r3, r3, #2
 8002c6e:	3302      	adds	r3, #2
 8002c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	220f      	movs	r2, #15
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c92:	d01f      	beq.n	8002cd4 <HAL_GPIO_Init+0x1f8>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a4c      	ldr	r2, [pc, #304]	@ (8002dc8 <HAL_GPIO_Init+0x2ec>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d019      	beq.n	8002cd0 <HAL_GPIO_Init+0x1f4>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a4b      	ldr	r2, [pc, #300]	@ (8002dcc <HAL_GPIO_Init+0x2f0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d013      	beq.n	8002ccc <HAL_GPIO_Init+0x1f0>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a4a      	ldr	r2, [pc, #296]	@ (8002dd0 <HAL_GPIO_Init+0x2f4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00d      	beq.n	8002cc8 <HAL_GPIO_Init+0x1ec>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a49      	ldr	r2, [pc, #292]	@ (8002dd4 <HAL_GPIO_Init+0x2f8>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d007      	beq.n	8002cc4 <HAL_GPIO_Init+0x1e8>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a48      	ldr	r2, [pc, #288]	@ (8002dd8 <HAL_GPIO_Init+0x2fc>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d101      	bne.n	8002cc0 <HAL_GPIO_Init+0x1e4>
 8002cbc:	2305      	movs	r3, #5
 8002cbe:	e00a      	b.n	8002cd6 <HAL_GPIO_Init+0x1fa>
 8002cc0:	2306      	movs	r3, #6
 8002cc2:	e008      	b.n	8002cd6 <HAL_GPIO_Init+0x1fa>
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	e006      	b.n	8002cd6 <HAL_GPIO_Init+0x1fa>
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e004      	b.n	8002cd6 <HAL_GPIO_Init+0x1fa>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e002      	b.n	8002cd6 <HAL_GPIO_Init+0x1fa>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <HAL_GPIO_Init+0x1fa>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	f002 0203 	and.w	r2, r2, #3
 8002cdc:	0092      	lsls	r2, r2, #2
 8002cde:	4093      	lsls	r3, r2
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ce6:	4937      	ldr	r1, [pc, #220]	@ (8002dc4 <HAL_GPIO_Init+0x2e8>)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	089b      	lsrs	r3, r3, #2
 8002cec:	3302      	adds	r3, #2
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cf4:	4b39      	ldr	r3, [pc, #228]	@ (8002ddc <HAL_GPIO_Init+0x300>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4013      	ands	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d18:	4a30      	ldr	r2, [pc, #192]	@ (8002ddc <HAL_GPIO_Init+0x300>)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d1e:	4b2f      	ldr	r3, [pc, #188]	@ (8002ddc <HAL_GPIO_Init+0x300>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d42:	4a26      	ldr	r2, [pc, #152]	@ (8002ddc <HAL_GPIO_Init+0x300>)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002d48:	4b24      	ldr	r3, [pc, #144]	@ (8002ddc <HAL_GPIO_Init+0x300>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	43db      	mvns	r3, r3
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4013      	ands	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8002ddc <HAL_GPIO_Init+0x300>)
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d72:	4b1a      	ldr	r3, [pc, #104]	@ (8002ddc <HAL_GPIO_Init+0x300>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d96:	4a11      	ldr	r2, [pc, #68]	@ (8002ddc <HAL_GPIO_Init+0x300>)
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f47f ae9d 	bne.w	8002aec <HAL_GPIO_Init+0x10>
  }
}
 8002db2:	bf00      	nop
 8002db4:	bf00      	nop
 8002db6:	371c      	adds	r7, #28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40010000 	.word	0x40010000
 8002dc8:	48000400 	.word	0x48000400
 8002dcc:	48000800 	.word	0x48000800
 8002dd0:	48000c00 	.word	0x48000c00
 8002dd4:	48001000 	.word	0x48001000
 8002dd8:	48001400 	.word	0x48001400
 8002ddc:	40010400 	.word	0x40010400

08002de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	807b      	strh	r3, [r7, #2]
 8002dec:	4613      	mov	r3, r2
 8002dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002df0:	787b      	ldrb	r3, [r7, #1]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002df6:	887a      	ldrh	r2, [r7, #2]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dfc:	e002      	b.n	8002e04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dfe:	887a      	ldrh	r2, [r7, #2]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e1a:	4b08      	ldr	r3, [pc, #32]	@ (8002e3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	88fb      	ldrh	r3, [r7, #6]
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d006      	beq.n	8002e34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e26:	4a05      	ldr	r2, [pc, #20]	@ (8002e3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e2c:	88fb      	ldrh	r3, [r7, #6]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe fb78 	bl	8001524 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40010400 	.word	0x40010400

08002e40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d141      	bne.n	8002ed2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e4e:	4b4b      	ldr	r3, [pc, #300]	@ (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e5a:	d131      	bne.n	8002ec0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e5c:	4b47      	ldr	r3, [pc, #284]	@ (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e62:	4a46      	ldr	r2, [pc, #280]	@ (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e6c:	4b43      	ldr	r3, [pc, #268]	@ (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e74:	4a41      	ldr	r2, [pc, #260]	@ (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e7c:	4b40      	ldr	r3, [pc, #256]	@ (8002f80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2232      	movs	r2, #50	@ 0x32
 8002e82:	fb02 f303 	mul.w	r3, r2, r3
 8002e86:	4a3f      	ldr	r2, [pc, #252]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e88:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8c:	0c9b      	lsrs	r3, r3, #18
 8002e8e:	3301      	adds	r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e92:	e002      	b.n	8002e9a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e9a:	4b38      	ldr	r3, [pc, #224]	@ (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ea6:	d102      	bne.n	8002eae <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f2      	bne.n	8002e94 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002eae:	4b33      	ldr	r3, [pc, #204]	@ (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eba:	d158      	bne.n	8002f6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e057      	b.n	8002f70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ec6:	4a2d      	ldr	r2, [pc, #180]	@ (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ecc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ed0:	e04d      	b.n	8002f6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ed8:	d141      	bne.n	8002f5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eda:	4b28      	ldr	r3, [pc, #160]	@ (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ee6:	d131      	bne.n	8002f4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ee8:	4b24      	ldr	r3, [pc, #144]	@ (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002eee:	4a23      	ldr	r2, [pc, #140]	@ (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ef4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ef8:	4b20      	ldr	r3, [pc, #128]	@ (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f00:	4a1e      	ldr	r2, [pc, #120]	@ (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f08:	4b1d      	ldr	r3, [pc, #116]	@ (8002f80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2232      	movs	r2, #50	@ 0x32
 8002f0e:	fb02 f303 	mul.w	r3, r2, r3
 8002f12:	4a1c      	ldr	r2, [pc, #112]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	0c9b      	lsrs	r3, r3, #18
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f1e:	e002      	b.n	8002f26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f26:	4b15      	ldr	r3, [pc, #84]	@ (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f32:	d102      	bne.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f2      	bne.n	8002f20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f3a:	4b10      	ldr	r3, [pc, #64]	@ (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f46:	d112      	bne.n	8002f6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e011      	b.n	8002f70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f52:	4a0a      	ldr	r2, [pc, #40]	@ (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f5c:	e007      	b.n	8002f6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f5e:	4b07      	ldr	r3, [pc, #28]	@ (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f66:	4a05      	ldr	r2, [pc, #20]	@ (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f6c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	40007000 	.word	0x40007000
 8002f80:	20000000 	.word	0x20000000
 8002f84:	431bde83 	.word	0x431bde83

08002f88 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002f8c:	4b05      	ldr	r3, [pc, #20]	@ (8002fa4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	4a04      	ldr	r2, [pc, #16]	@ (8002fa4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f96:	6093      	str	r3, [r2, #8]
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40007000 	.word	0x40007000

08002fa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e2fe      	b.n	80035b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d075      	beq.n	80030b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fc6:	4b97      	ldr	r3, [pc, #604]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fd0:	4b94      	ldr	r3, [pc, #592]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	2b0c      	cmp	r3, #12
 8002fde:	d102      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x3e>
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d002      	beq.n	8002fec <HAL_RCC_OscConfig+0x44>
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d10b      	bne.n	8003004 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fec:	4b8d      	ldr	r3, [pc, #564]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d05b      	beq.n	80030b0 <HAL_RCC_OscConfig+0x108>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d157      	bne.n	80030b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e2d9      	b.n	80035b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800300c:	d106      	bne.n	800301c <HAL_RCC_OscConfig+0x74>
 800300e:	4b85      	ldr	r3, [pc, #532]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a84      	ldr	r2, [pc, #528]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 8003014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	e01d      	b.n	8003058 <HAL_RCC_OscConfig+0xb0>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003024:	d10c      	bne.n	8003040 <HAL_RCC_OscConfig+0x98>
 8003026:	4b7f      	ldr	r3, [pc, #508]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a7e      	ldr	r2, [pc, #504]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 800302c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	4b7c      	ldr	r3, [pc, #496]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a7b      	ldr	r2, [pc, #492]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 8003038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	e00b      	b.n	8003058 <HAL_RCC_OscConfig+0xb0>
 8003040:	4b78      	ldr	r3, [pc, #480]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a77      	ldr	r2, [pc, #476]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 8003046:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	4b75      	ldr	r3, [pc, #468]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a74      	ldr	r2, [pc, #464]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 8003052:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d013      	beq.n	8003088 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7ff f98c 	bl	800237c <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003068:	f7ff f988 	bl	800237c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b64      	cmp	r3, #100	@ 0x64
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e29e      	b.n	80035b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800307a:	4b6a      	ldr	r3, [pc, #424]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0xc0>
 8003086:	e014      	b.n	80030b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7ff f978 	bl	800237c <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003090:	f7ff f974 	bl	800237c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b64      	cmp	r3, #100	@ 0x64
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e28a      	b.n	80035b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030a2:	4b60      	ldr	r3, [pc, #384]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0xe8>
 80030ae:	e000      	b.n	80030b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d075      	beq.n	80031aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030be:	4b59      	ldr	r3, [pc, #356]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030c8:	4b56      	ldr	r3, [pc, #344]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	2b0c      	cmp	r3, #12
 80030d6:	d102      	bne.n	80030de <HAL_RCC_OscConfig+0x136>
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d002      	beq.n	80030e4 <HAL_RCC_OscConfig+0x13c>
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d11f      	bne.n	8003124 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030e4:	4b4f      	ldr	r3, [pc, #316]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_OscConfig+0x154>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e25d      	b.n	80035b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fc:	4b49      	ldr	r3, [pc, #292]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	061b      	lsls	r3, r3, #24
 800310a:	4946      	ldr	r1, [pc, #280]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003110:	4b45      	ldr	r3, [pc, #276]	@ (8003228 <HAL_RCC_OscConfig+0x280>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff f8e5 	bl	80022e4 <HAL_InitTick>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d043      	beq.n	80031a8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e249      	b.n	80035b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d023      	beq.n	8003174 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800312c:	4b3d      	ldr	r3, [pc, #244]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a3c      	ldr	r2, [pc, #240]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 8003132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7ff f920 	bl	800237c <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003140:	f7ff f91c 	bl	800237c <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e232      	b.n	80035b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003152:	4b34      	ldr	r3, [pc, #208]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315e:	4b31      	ldr	r3, [pc, #196]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	061b      	lsls	r3, r3, #24
 800316c:	492d      	ldr	r1, [pc, #180]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 800316e:	4313      	orrs	r3, r2
 8003170:	604b      	str	r3, [r1, #4]
 8003172:	e01a      	b.n	80031aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003174:	4b2b      	ldr	r3, [pc, #172]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a2a      	ldr	r2, [pc, #168]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 800317a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800317e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7ff f8fc 	bl	800237c <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003188:	f7ff f8f8 	bl	800237c <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e20e      	b.n	80035b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800319a:	4b22      	ldr	r3, [pc, #136]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x1e0>
 80031a6:	e000      	b.n	80031aa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d041      	beq.n	800323a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d01c      	beq.n	80031f8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031be:	4b19      	ldr	r3, [pc, #100]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 80031c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031c4:	4a17      	ldr	r2, [pc, #92]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ce:	f7ff f8d5 	bl	800237c <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d6:	f7ff f8d1 	bl	800237c <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e1e7      	b.n	80035b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 80031ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0ef      	beq.n	80031d6 <HAL_RCC_OscConfig+0x22e>
 80031f6:	e020      	b.n	800323a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 80031fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031fe:	4a09      	ldr	r2, [pc, #36]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003208:	f7ff f8b8 	bl	800237c <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800320e:	e00d      	b.n	800322c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003210:	f7ff f8b4 	bl	800237c <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d906      	bls.n	800322c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e1ca      	b.n	80035b8 <HAL_RCC_OscConfig+0x610>
 8003222:	bf00      	nop
 8003224:	40021000 	.word	0x40021000
 8003228:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800322c:	4b8c      	ldr	r3, [pc, #560]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 800322e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1ea      	bne.n	8003210 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 80a6 	beq.w	8003394 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003248:	2300      	movs	r3, #0
 800324a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800324c:	4b84      	ldr	r3, [pc, #528]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 800324e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_RCC_OscConfig+0x2b4>
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <HAL_RCC_OscConfig+0x2b6>
 800325c:	2300      	movs	r3, #0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00d      	beq.n	800327e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003262:	4b7f      	ldr	r3, [pc, #508]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 8003264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003266:	4a7e      	ldr	r2, [pc, #504]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 8003268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800326c:	6593      	str	r3, [r2, #88]	@ 0x58
 800326e:	4b7c      	ldr	r3, [pc, #496]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 8003270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800327a:	2301      	movs	r3, #1
 800327c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800327e:	4b79      	ldr	r3, [pc, #484]	@ (8003464 <HAL_RCC_OscConfig+0x4bc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d118      	bne.n	80032bc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800328a:	4b76      	ldr	r3, [pc, #472]	@ (8003464 <HAL_RCC_OscConfig+0x4bc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a75      	ldr	r2, [pc, #468]	@ (8003464 <HAL_RCC_OscConfig+0x4bc>)
 8003290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003296:	f7ff f871 	bl	800237c <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329e:	f7ff f86d 	bl	800237c <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e183      	b.n	80035b8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b0:	4b6c      	ldr	r3, [pc, #432]	@ (8003464 <HAL_RCC_OscConfig+0x4bc>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d108      	bne.n	80032d6 <HAL_RCC_OscConfig+0x32e>
 80032c4:	4b66      	ldr	r3, [pc, #408]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ca:	4a65      	ldr	r2, [pc, #404]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032d4:	e024      	b.n	8003320 <HAL_RCC_OscConfig+0x378>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b05      	cmp	r3, #5
 80032dc:	d110      	bne.n	8003300 <HAL_RCC_OscConfig+0x358>
 80032de:	4b60      	ldr	r3, [pc, #384]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e4:	4a5e      	ldr	r2, [pc, #376]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 80032e6:	f043 0304 	orr.w	r3, r3, #4
 80032ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032ee:	4b5c      	ldr	r3, [pc, #368]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 80032f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f4:	4a5a      	ldr	r2, [pc, #360]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032fe:	e00f      	b.n	8003320 <HAL_RCC_OscConfig+0x378>
 8003300:	4b57      	ldr	r3, [pc, #348]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 8003302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003306:	4a56      	ldr	r2, [pc, #344]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 8003308:	f023 0301 	bic.w	r3, r3, #1
 800330c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003310:	4b53      	ldr	r3, [pc, #332]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003316:	4a52      	ldr	r2, [pc, #328]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 8003318:	f023 0304 	bic.w	r3, r3, #4
 800331c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d016      	beq.n	8003356 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003328:	f7ff f828 	bl	800237c <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800332e:	e00a      	b.n	8003346 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003330:	f7ff f824 	bl	800237c <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800333e:	4293      	cmp	r3, r2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e138      	b.n	80035b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003346:	4b46      	ldr	r3, [pc, #280]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 8003348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0ed      	beq.n	8003330 <HAL_RCC_OscConfig+0x388>
 8003354:	e015      	b.n	8003382 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003356:	f7ff f811 	bl	800237c <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800335c:	e00a      	b.n	8003374 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335e:	f7ff f80d 	bl	800237c <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	f241 3288 	movw	r2, #5000	@ 0x1388
 800336c:	4293      	cmp	r3, r2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e121      	b.n	80035b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003374:	4b3a      	ldr	r3, [pc, #232]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1ed      	bne.n	800335e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003382:	7ffb      	ldrb	r3, [r7, #31]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d105      	bne.n	8003394 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003388:	4b35      	ldr	r3, [pc, #212]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 800338a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338c:	4a34      	ldr	r2, [pc, #208]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 800338e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003392:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d03c      	beq.n	800341a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d01c      	beq.n	80033e2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 80033aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033ae:	4a2c      	ldr	r2, [pc, #176]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b8:	f7fe ffe0 	bl	800237c <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033c0:	f7fe ffdc 	bl	800237c <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e0f2      	b.n	80035b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033d2:	4b23      	ldr	r3, [pc, #140]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 80033d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0ef      	beq.n	80033c0 <HAL_RCC_OscConfig+0x418>
 80033e0:	e01b      	b.n	800341a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033e2:	4b1f      	ldr	r3, [pc, #124]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 80033e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 80033ea:	f023 0301 	bic.w	r3, r3, #1
 80033ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f2:	f7fe ffc3 	bl	800237c <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033fa:	f7fe ffbf 	bl	800237c <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e0d5      	b.n	80035b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800340c:	4b14      	ldr	r3, [pc, #80]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 800340e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1ef      	bne.n	80033fa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 80c9 	beq.w	80035b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003424:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 030c 	and.w	r3, r3, #12
 800342c:	2b0c      	cmp	r3, #12
 800342e:	f000 8083 	beq.w	8003538 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d15e      	bne.n	80034f8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343a:	4b09      	ldr	r3, [pc, #36]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a08      	ldr	r2, [pc, #32]	@ (8003460 <HAL_RCC_OscConfig+0x4b8>)
 8003440:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003446:	f7fe ff99 	bl	800237c <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800344c:	e00c      	b.n	8003468 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344e:	f7fe ff95 	bl	800237c <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d905      	bls.n	8003468 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e0ab      	b.n	80035b8 <HAL_RCC_OscConfig+0x610>
 8003460:	40021000 	.word	0x40021000
 8003464:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003468:	4b55      	ldr	r3, [pc, #340]	@ (80035c0 <HAL_RCC_OscConfig+0x618>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1ec      	bne.n	800344e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003474:	4b52      	ldr	r3, [pc, #328]	@ (80035c0 <HAL_RCC_OscConfig+0x618>)
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	4b52      	ldr	r3, [pc, #328]	@ (80035c4 <HAL_RCC_OscConfig+0x61c>)
 800347a:	4013      	ands	r3, r2
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6a11      	ldr	r1, [r2, #32]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003484:	3a01      	subs	r2, #1
 8003486:	0112      	lsls	r2, r2, #4
 8003488:	4311      	orrs	r1, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800348e:	0212      	lsls	r2, r2, #8
 8003490:	4311      	orrs	r1, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003496:	0852      	lsrs	r2, r2, #1
 8003498:	3a01      	subs	r2, #1
 800349a:	0552      	lsls	r2, r2, #21
 800349c:	4311      	orrs	r1, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80034a2:	0852      	lsrs	r2, r2, #1
 80034a4:	3a01      	subs	r2, #1
 80034a6:	0652      	lsls	r2, r2, #25
 80034a8:	4311      	orrs	r1, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80034ae:	06d2      	lsls	r2, r2, #27
 80034b0:	430a      	orrs	r2, r1
 80034b2:	4943      	ldr	r1, [pc, #268]	@ (80035c0 <HAL_RCC_OscConfig+0x618>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b8:	4b41      	ldr	r3, [pc, #260]	@ (80035c0 <HAL_RCC_OscConfig+0x618>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a40      	ldr	r2, [pc, #256]	@ (80035c0 <HAL_RCC_OscConfig+0x618>)
 80034be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034c4:	4b3e      	ldr	r3, [pc, #248]	@ (80035c0 <HAL_RCC_OscConfig+0x618>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	4a3d      	ldr	r2, [pc, #244]	@ (80035c0 <HAL_RCC_OscConfig+0x618>)
 80034ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fe ff54 	bl	800237c <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d8:	f7fe ff50 	bl	800237c <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e066      	b.n	80035b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ea:	4b35      	ldr	r3, [pc, #212]	@ (80035c0 <HAL_RCC_OscConfig+0x618>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCC_OscConfig+0x530>
 80034f6:	e05e      	b.n	80035b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f8:	4b31      	ldr	r3, [pc, #196]	@ (80035c0 <HAL_RCC_OscConfig+0x618>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a30      	ldr	r2, [pc, #192]	@ (80035c0 <HAL_RCC_OscConfig+0x618>)
 80034fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fe ff3a 	bl	800237c <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350c:	f7fe ff36 	bl	800237c <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e04c      	b.n	80035b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800351e:	4b28      	ldr	r3, [pc, #160]	@ (80035c0 <HAL_RCC_OscConfig+0x618>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800352a:	4b25      	ldr	r3, [pc, #148]	@ (80035c0 <HAL_RCC_OscConfig+0x618>)
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	4924      	ldr	r1, [pc, #144]	@ (80035c0 <HAL_RCC_OscConfig+0x618>)
 8003530:	4b25      	ldr	r3, [pc, #148]	@ (80035c8 <HAL_RCC_OscConfig+0x620>)
 8003532:	4013      	ands	r3, r2
 8003534:	60cb      	str	r3, [r1, #12]
 8003536:	e03e      	b.n	80035b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e039      	b.n	80035b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003544:	4b1e      	ldr	r3, [pc, #120]	@ (80035c0 <HAL_RCC_OscConfig+0x618>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f003 0203 	and.w	r2, r3, #3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	429a      	cmp	r2, r3
 8003556:	d12c      	bne.n	80035b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003562:	3b01      	subs	r3, #1
 8003564:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d123      	bne.n	80035b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003574:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d11b      	bne.n	80035b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003584:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003586:	429a      	cmp	r2, r3
 8003588:	d113      	bne.n	80035b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003594:	085b      	lsrs	r3, r3, #1
 8003596:	3b01      	subs	r3, #1
 8003598:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800359a:	429a      	cmp	r2, r3
 800359c:	d109      	bne.n	80035b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a8:	085b      	lsrs	r3, r3, #1
 80035aa:	3b01      	subs	r3, #1
 80035ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d001      	beq.n	80035b6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3720      	adds	r7, #32
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40021000 	.word	0x40021000
 80035c4:	019f800c 	.word	0x019f800c
 80035c8:	feeefffc 	.word	0xfeeefffc

080035cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e11e      	b.n	8003822 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035e4:	4b91      	ldr	r3, [pc, #580]	@ (800382c <HAL_RCC_ClockConfig+0x260>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d910      	bls.n	8003614 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b8e      	ldr	r3, [pc, #568]	@ (800382c <HAL_RCC_ClockConfig+0x260>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 020f 	bic.w	r2, r3, #15
 80035fa:	498c      	ldr	r1, [pc, #560]	@ (800382c <HAL_RCC_ClockConfig+0x260>)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	4313      	orrs	r3, r2
 8003600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003602:	4b8a      	ldr	r3, [pc, #552]	@ (800382c <HAL_RCC_ClockConfig+0x260>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e106      	b.n	8003822 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d073      	beq.n	8003708 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b03      	cmp	r3, #3
 8003626:	d129      	bne.n	800367c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003628:	4b81      	ldr	r3, [pc, #516]	@ (8003830 <HAL_RCC_ClockConfig+0x264>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0f4      	b.n	8003822 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003638:	f000 f99c 	bl	8003974 <RCC_GetSysClockFreqFromPLLSource>
 800363c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4a7c      	ldr	r2, [pc, #496]	@ (8003834 <HAL_RCC_ClockConfig+0x268>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d93f      	bls.n	80036c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003646:	4b7a      	ldr	r3, [pc, #488]	@ (8003830 <HAL_RCC_ClockConfig+0x264>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d009      	beq.n	8003666 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800365a:	2b00      	cmp	r3, #0
 800365c:	d033      	beq.n	80036c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003662:	2b00      	cmp	r3, #0
 8003664:	d12f      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003666:	4b72      	ldr	r3, [pc, #456]	@ (8003830 <HAL_RCC_ClockConfig+0x264>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800366e:	4a70      	ldr	r2, [pc, #448]	@ (8003830 <HAL_RCC_ClockConfig+0x264>)
 8003670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003674:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003676:	2380      	movs	r3, #128	@ 0x80
 8003678:	617b      	str	r3, [r7, #20]
 800367a:	e024      	b.n	80036c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b02      	cmp	r3, #2
 8003682:	d107      	bne.n	8003694 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003684:	4b6a      	ldr	r3, [pc, #424]	@ (8003830 <HAL_RCC_ClockConfig+0x264>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d109      	bne.n	80036a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0c6      	b.n	8003822 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003694:	4b66      	ldr	r3, [pc, #408]	@ (8003830 <HAL_RCC_ClockConfig+0x264>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0be      	b.n	8003822 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80036a4:	f000 f8ce 	bl	8003844 <HAL_RCC_GetSysClockFreq>
 80036a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4a61      	ldr	r2, [pc, #388]	@ (8003834 <HAL_RCC_ClockConfig+0x268>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d909      	bls.n	80036c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036b2:	4b5f      	ldr	r3, [pc, #380]	@ (8003830 <HAL_RCC_ClockConfig+0x264>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036ba:	4a5d      	ldr	r2, [pc, #372]	@ (8003830 <HAL_RCC_ClockConfig+0x264>)
 80036bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80036c2:	2380      	movs	r3, #128	@ 0x80
 80036c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036c6:	4b5a      	ldr	r3, [pc, #360]	@ (8003830 <HAL_RCC_ClockConfig+0x264>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f023 0203 	bic.w	r2, r3, #3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	4957      	ldr	r1, [pc, #348]	@ (8003830 <HAL_RCC_ClockConfig+0x264>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d8:	f7fe fe50 	bl	800237c <HAL_GetTick>
 80036dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036de:	e00a      	b.n	80036f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e0:	f7fe fe4c 	bl	800237c <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e095      	b.n	8003822 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f6:	4b4e      	ldr	r3, [pc, #312]	@ (8003830 <HAL_RCC_ClockConfig+0x264>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 020c 	and.w	r2, r3, #12
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	429a      	cmp	r2, r3
 8003706:	d1eb      	bne.n	80036e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d023      	beq.n	800375c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003720:	4b43      	ldr	r3, [pc, #268]	@ (8003830 <HAL_RCC_ClockConfig+0x264>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	4a42      	ldr	r2, [pc, #264]	@ (8003830 <HAL_RCC_ClockConfig+0x264>)
 8003726:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800372a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b00      	cmp	r3, #0
 8003736:	d007      	beq.n	8003748 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003738:	4b3d      	ldr	r3, [pc, #244]	@ (8003830 <HAL_RCC_ClockConfig+0x264>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003740:	4a3b      	ldr	r2, [pc, #236]	@ (8003830 <HAL_RCC_ClockConfig+0x264>)
 8003742:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003746:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003748:	4b39      	ldr	r3, [pc, #228]	@ (8003830 <HAL_RCC_ClockConfig+0x264>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	4936      	ldr	r1, [pc, #216]	@ (8003830 <HAL_RCC_ClockConfig+0x264>)
 8003756:	4313      	orrs	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
 800375a:	e008      	b.n	800376e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2b80      	cmp	r3, #128	@ 0x80
 8003760:	d105      	bne.n	800376e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003762:	4b33      	ldr	r3, [pc, #204]	@ (8003830 <HAL_RCC_ClockConfig+0x264>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	4a32      	ldr	r2, [pc, #200]	@ (8003830 <HAL_RCC_ClockConfig+0x264>)
 8003768:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800376c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800376e:	4b2f      	ldr	r3, [pc, #188]	@ (800382c <HAL_RCC_ClockConfig+0x260>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d21d      	bcs.n	80037b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377c:	4b2b      	ldr	r3, [pc, #172]	@ (800382c <HAL_RCC_ClockConfig+0x260>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f023 020f 	bic.w	r2, r3, #15
 8003784:	4929      	ldr	r1, [pc, #164]	@ (800382c <HAL_RCC_ClockConfig+0x260>)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	4313      	orrs	r3, r2
 800378a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800378c:	f7fe fdf6 	bl	800237c <HAL_GetTick>
 8003790:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003792:	e00a      	b.n	80037aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003794:	f7fe fdf2 	bl	800237c <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e03b      	b.n	8003822 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037aa:	4b20      	ldr	r3, [pc, #128]	@ (800382c <HAL_RCC_ClockConfig+0x260>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d1ed      	bne.n	8003794 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d008      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003830 <HAL_RCC_ClockConfig+0x264>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	4917      	ldr	r1, [pc, #92]	@ (8003830 <HAL_RCC_ClockConfig+0x264>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d009      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037e2:	4b13      	ldr	r3, [pc, #76]	@ (8003830 <HAL_RCC_ClockConfig+0x264>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	490f      	ldr	r1, [pc, #60]	@ (8003830 <HAL_RCC_ClockConfig+0x264>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037f6:	f000 f825 	bl	8003844 <HAL_RCC_GetSysClockFreq>
 80037fa:	4602      	mov	r2, r0
 80037fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003830 <HAL_RCC_ClockConfig+0x264>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	490c      	ldr	r1, [pc, #48]	@ (8003838 <HAL_RCC_ClockConfig+0x26c>)
 8003808:	5ccb      	ldrb	r3, [r1, r3]
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	fa22 f303 	lsr.w	r3, r2, r3
 8003812:	4a0a      	ldr	r2, [pc, #40]	@ (800383c <HAL_RCC_ClockConfig+0x270>)
 8003814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003816:	4b0a      	ldr	r3, [pc, #40]	@ (8003840 <HAL_RCC_ClockConfig+0x274>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe fd62 	bl	80022e4 <HAL_InitTick>
 8003820:	4603      	mov	r3, r0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40022000 	.word	0x40022000
 8003830:	40021000 	.word	0x40021000
 8003834:	04c4b400 	.word	0x04c4b400
 8003838:	0800d224 	.word	0x0800d224
 800383c:	20000000 	.word	0x20000000
 8003840:	20000004 	.word	0x20000004

08003844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800384a:	4b2c      	ldr	r3, [pc, #176]	@ (80038fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 030c 	and.w	r3, r3, #12
 8003852:	2b04      	cmp	r3, #4
 8003854:	d102      	bne.n	800385c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003856:	4b2a      	ldr	r3, [pc, #168]	@ (8003900 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	e047      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800385c:	4b27      	ldr	r3, [pc, #156]	@ (80038fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b08      	cmp	r3, #8
 8003866:	d102      	bne.n	800386e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003868:	4b25      	ldr	r3, [pc, #148]	@ (8003900 <HAL_RCC_GetSysClockFreq+0xbc>)
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	e03e      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800386e:	4b23      	ldr	r3, [pc, #140]	@ (80038fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 030c 	and.w	r3, r3, #12
 8003876:	2b0c      	cmp	r3, #12
 8003878:	d136      	bne.n	80038e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800387a:	4b20      	ldr	r3, [pc, #128]	@ (80038fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003884:	4b1d      	ldr	r3, [pc, #116]	@ (80038fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	3301      	adds	r3, #1
 8003890:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2b03      	cmp	r3, #3
 8003896:	d10c      	bne.n	80038b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003898:	4a19      	ldr	r2, [pc, #100]	@ (8003900 <HAL_RCC_GetSysClockFreq+0xbc>)
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a0:	4a16      	ldr	r2, [pc, #88]	@ (80038fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80038a2:	68d2      	ldr	r2, [r2, #12]
 80038a4:	0a12      	lsrs	r2, r2, #8
 80038a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80038aa:	fb02 f303 	mul.w	r3, r2, r3
 80038ae:	617b      	str	r3, [r7, #20]
      break;
 80038b0:	e00c      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038b2:	4a13      	ldr	r2, [pc, #76]	@ (8003900 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ba:	4a10      	ldr	r2, [pc, #64]	@ (80038fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80038bc:	68d2      	ldr	r2, [r2, #12]
 80038be:	0a12      	lsrs	r2, r2, #8
 80038c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80038c4:	fb02 f303 	mul.w	r3, r2, r3
 80038c8:	617b      	str	r3, [r7, #20]
      break;
 80038ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038cc:	4b0b      	ldr	r3, [pc, #44]	@ (80038fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	0e5b      	lsrs	r3, r3, #25
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	3301      	adds	r3, #1
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	e001      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80038ec:	693b      	ldr	r3, [r7, #16]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000
 8003900:	00f42400 	.word	0x00f42400

08003904 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003908:	4b03      	ldr	r3, [pc, #12]	@ (8003918 <HAL_RCC_GetHCLKFreq+0x14>)
 800390a:	681b      	ldr	r3, [r3, #0]
}
 800390c:	4618      	mov	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	20000000 	.word	0x20000000

0800391c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003920:	f7ff fff0 	bl	8003904 <HAL_RCC_GetHCLKFreq>
 8003924:	4602      	mov	r2, r0
 8003926:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	0a1b      	lsrs	r3, r3, #8
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	4904      	ldr	r1, [pc, #16]	@ (8003944 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003932:	5ccb      	ldrb	r3, [r1, r3]
 8003934:	f003 031f 	and.w	r3, r3, #31
 8003938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40021000 	.word	0x40021000
 8003944:	0800d234 	.word	0x0800d234

08003948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800394c:	f7ff ffda 	bl	8003904 <HAL_RCC_GetHCLKFreq>
 8003950:	4602      	mov	r2, r0
 8003952:	4b06      	ldr	r3, [pc, #24]	@ (800396c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	0adb      	lsrs	r3, r3, #11
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	4904      	ldr	r1, [pc, #16]	@ (8003970 <HAL_RCC_GetPCLK2Freq+0x28>)
 800395e:	5ccb      	ldrb	r3, [r1, r3]
 8003960:	f003 031f 	and.w	r3, r3, #31
 8003964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003968:	4618      	mov	r0, r3
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40021000 	.word	0x40021000
 8003970:	0800d234 	.word	0x0800d234

08003974 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003974:	b480      	push	{r7}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800397a:	4b1e      	ldr	r3, [pc, #120]	@ (80039f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003984:	4b1b      	ldr	r3, [pc, #108]	@ (80039f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	3301      	adds	r3, #1
 8003990:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b03      	cmp	r3, #3
 8003996:	d10c      	bne.n	80039b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003998:	4a17      	ldr	r2, [pc, #92]	@ (80039f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a0:	4a14      	ldr	r2, [pc, #80]	@ (80039f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039a2:	68d2      	ldr	r2, [r2, #12]
 80039a4:	0a12      	lsrs	r2, r2, #8
 80039a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039aa:	fb02 f303 	mul.w	r3, r2, r3
 80039ae:	617b      	str	r3, [r7, #20]
    break;
 80039b0:	e00c      	b.n	80039cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039b2:	4a11      	ldr	r2, [pc, #68]	@ (80039f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ba:	4a0e      	ldr	r2, [pc, #56]	@ (80039f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039bc:	68d2      	ldr	r2, [r2, #12]
 80039be:	0a12      	lsrs	r2, r2, #8
 80039c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039c4:	fb02 f303 	mul.w	r3, r2, r3
 80039c8:	617b      	str	r3, [r7, #20]
    break;
 80039ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039cc:	4b09      	ldr	r3, [pc, #36]	@ (80039f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	0e5b      	lsrs	r3, r3, #25
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	3301      	adds	r3, #1
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80039e6:	687b      	ldr	r3, [r7, #4]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	371c      	adds	r7, #28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	40021000 	.word	0x40021000
 80039f8:	00f42400 	.word	0x00f42400

080039fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a04:	2300      	movs	r3, #0
 8003a06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a08:	2300      	movs	r3, #0
 8003a0a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 8098 	beq.w	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a1e:	4b43      	ldr	r3, [pc, #268]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10d      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a2a:	4b40      	ldr	r3, [pc, #256]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2e:	4a3f      	ldr	r2, [pc, #252]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a34:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a36:	4b3d      	ldr	r3, [pc, #244]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a42:	2301      	movs	r3, #1
 8003a44:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a46:	4b3a      	ldr	r3, [pc, #232]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a39      	ldr	r2, [pc, #228]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a52:	f7fe fc93 	bl	800237c <HAL_GetTick>
 8003a56:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a58:	e009      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a5a:	f7fe fc8f 	bl	800237c <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d902      	bls.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	74fb      	strb	r3, [r7, #19]
        break;
 8003a6c:	e005      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a6e:	4b30      	ldr	r3, [pc, #192]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0ef      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a7a:	7cfb      	ldrb	r3, [r7, #19]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d159      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a80:	4b2a      	ldr	r3, [pc, #168]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a8a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01e      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d019      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a9c:	4b23      	ldr	r3, [pc, #140]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003aa8:	4b20      	ldr	r3, [pc, #128]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aae:	4a1f      	ldr	r2, [pc, #124]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003abe:	4a1b      	ldr	r2, [pc, #108]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ac0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ac8:	4a18      	ldr	r2, [pc, #96]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d016      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ada:	f7fe fc4f 	bl	800237c <HAL_GetTick>
 8003ade:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae0:	e00b      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae2:	f7fe fc4b 	bl	800237c <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d902      	bls.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	74fb      	strb	r3, [r7, #19]
            break;
 8003af8:	e006      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003afa:	4b0c      	ldr	r3, [pc, #48]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0ec      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003b08:	7cfb      	ldrb	r3, [r7, #19]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10b      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b0e:	4b07      	ldr	r3, [pc, #28]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1c:	4903      	ldr	r1, [pc, #12]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b24:	e008      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b26:	7cfb      	ldrb	r3, [r7, #19]
 8003b28:	74bb      	strb	r3, [r7, #18]
 8003b2a:	e005      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b34:	7cfb      	ldrb	r3, [r7, #19]
 8003b36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b38:	7c7b      	ldrb	r3, [r7, #17]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d105      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b3e:	4ba6      	ldr	r3, [pc, #664]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b42:	4aa5      	ldr	r2, [pc, #660]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b48:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b56:	4ba0      	ldr	r3, [pc, #640]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5c:	f023 0203 	bic.w	r2, r3, #3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	499c      	ldr	r1, [pc, #624]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b78:	4b97      	ldr	r3, [pc, #604]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b7e:	f023 020c 	bic.w	r2, r3, #12
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	4994      	ldr	r1, [pc, #592]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b9a:	4b8f      	ldr	r3, [pc, #572]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	498b      	ldr	r1, [pc, #556]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bbc:	4b86      	ldr	r3, [pc, #536]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	4983      	ldr	r1, [pc, #524]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0320 	and.w	r3, r3, #32
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bde:	4b7e      	ldr	r3, [pc, #504]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	497a      	ldr	r1, [pc, #488]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c00:	4b75      	ldr	r3, [pc, #468]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c06:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	4972      	ldr	r1, [pc, #456]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c22:	4b6d      	ldr	r3, [pc, #436]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c28:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	4969      	ldr	r1, [pc, #420]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c44:	4b64      	ldr	r3, [pc, #400]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	4961      	ldr	r1, [pc, #388]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c66:	4b5c      	ldr	r3, [pc, #368]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c6c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	4958      	ldr	r1, [pc, #352]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d015      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c88:	4b53      	ldr	r3, [pc, #332]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c96:	4950      	ldr	r1, [pc, #320]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ca6:	d105      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ca8:	4b4b      	ldr	r3, [pc, #300]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	4a4a      	ldr	r2, [pc, #296]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cb2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d015      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cc0:	4b45      	ldr	r3, [pc, #276]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cce:	4942      	ldr	r1, [pc, #264]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cde:	d105      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ce0:	4b3d      	ldr	r3, [pc, #244]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	4a3c      	ldr	r2, [pc, #240]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cea:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d015      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cf8:	4b37      	ldr	r3, [pc, #220]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d06:	4934      	ldr	r1, [pc, #208]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d16:	d105      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d18:	4b2f      	ldr	r3, [pc, #188]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	4a2e      	ldr	r2, [pc, #184]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d22:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d015      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d30:	4b29      	ldr	r3, [pc, #164]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d3e:	4926      	ldr	r1, [pc, #152]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d4e:	d105      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d50:	4b21      	ldr	r3, [pc, #132]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4a20      	ldr	r2, [pc, #128]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d5a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d015      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d68:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d76:	4918      	ldr	r1, [pc, #96]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d86:	d105      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d88:	4b13      	ldr	r3, [pc, #76]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4a12      	ldr	r2, [pc, #72]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d015      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003da0:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dae:	490a      	ldr	r1, [pc, #40]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dbe:	d105      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003dc0:	4b05      	ldr	r3, [pc, #20]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4a04      	ldr	r2, [pc, #16]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003dcc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40021000 	.word	0x40021000

08003ddc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e09d      	b.n	8003f2a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d108      	bne.n	8003e08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dfe:	d009      	beq.n	8003e14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	61da      	str	r2, [r3, #28]
 8003e06:	e005      	b.n	8003e14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fd fc24 	bl	800167c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e54:	d902      	bls.n	8003e5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	e002      	b.n	8003e62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003e6a:	d007      	beq.n	8003e7c <HAL_SPI_Init+0xa0>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e74:	d002      	beq.n	8003e7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ebe:	ea42 0103 	orr.w	r1, r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	0c1b      	lsrs	r3, r3, #16
 8003ed8:	f003 0204 	and.w	r2, r3, #4
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003ef8:	ea42 0103 	orr.w	r1, r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b088      	sub	sp, #32
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	603b      	str	r3, [r7, #0]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_SPI_Transmit+0x22>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e15f      	b.n	8004214 <HAL_SPI_Transmit+0x2e2>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f5c:	f7fe fa0e 	bl	800237c <HAL_GetTick>
 8003f60:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d002      	beq.n	8003f78 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f72:	2302      	movs	r3, #2
 8003f74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f76:	e148      	b.n	800420a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <HAL_SPI_Transmit+0x52>
 8003f7e:	88fb      	ldrh	r3, [r7, #6]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d102      	bne.n	8003f8a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f88:	e13f      	b.n	800420a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2203      	movs	r2, #3
 8003f8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	88fa      	ldrh	r2, [r7, #6]
 8003fa2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	88fa      	ldrh	r2, [r7, #6]
 8003fa8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fd4:	d10f      	bne.n	8003ff6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fe4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ff4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004000:	2b40      	cmp	r3, #64	@ 0x40
 8004002:	d007      	beq.n	8004014 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004012:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800401c:	d94f      	bls.n	80040be <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <HAL_SPI_Transmit+0xfa>
 8004026:	8afb      	ldrh	r3, [r7, #22]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d142      	bne.n	80040b2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004030:	881a      	ldrh	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403c:	1c9a      	adds	r2, r3, #2
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004050:	e02f      	b.n	80040b2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b02      	cmp	r3, #2
 800405e:	d112      	bne.n	8004086 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004064:	881a      	ldrh	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004070:	1c9a      	adds	r2, r3, #2
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800407a:	b29b      	uxth	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004084:	e015      	b.n	80040b2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004086:	f7fe f979 	bl	800237c <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d803      	bhi.n	800409e <HAL_SPI_Transmit+0x16c>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409c:	d102      	bne.n	80040a4 <HAL_SPI_Transmit+0x172>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d106      	bne.n	80040b2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80040b0:	e0ab      	b.n	800420a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1ca      	bne.n	8004052 <HAL_SPI_Transmit+0x120>
 80040bc:	e080      	b.n	80041c0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <HAL_SPI_Transmit+0x19a>
 80040c6:	8afb      	ldrh	r3, [r7, #22]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d174      	bne.n	80041b6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d912      	bls.n	80040fc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040da:	881a      	ldrh	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e6:	1c9a      	adds	r2, r3, #2
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b02      	subs	r3, #2
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80040fa:	e05c      	b.n	80041b6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	330c      	adds	r3, #12
 8004106:	7812      	ldrb	r2, [r2, #0]
 8004108:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004122:	e048      	b.n	80041b6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b02      	cmp	r3, #2
 8004130:	d12b      	bne.n	800418a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b01      	cmp	r3, #1
 800413a:	d912      	bls.n	8004162 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004140:	881a      	ldrh	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414c:	1c9a      	adds	r2, r3, #2
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b02      	subs	r3, #2
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004160:	e029      	b.n	80041b6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	330c      	adds	r3, #12
 800416c:	7812      	ldrb	r2, [r2, #0]
 800416e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004188:	e015      	b.n	80041b6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800418a:	f7fe f8f7 	bl	800237c <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d803      	bhi.n	80041a2 <HAL_SPI_Transmit+0x270>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d102      	bne.n	80041a8 <HAL_SPI_Transmit+0x276>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d106      	bne.n	80041b6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80041b4:	e029      	b.n	800420a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1b1      	bne.n	8004124 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	6839      	ldr	r1, [r7, #0]
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 fcf9 	bl	8004bbc <SPI_EndRxTxTransaction>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2220      	movs	r2, #32
 80041d4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10a      	bne.n	80041f4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041de:	2300      	movs	r3, #0
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	77fb      	strb	r3, [r7, #31]
 8004200:	e003      	b.n	800420a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004212:	7ffb      	ldrb	r3, [r7, #31]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3720      	adds	r7, #32
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af02      	add	r7, sp, #8
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	4613      	mov	r3, r2
 800422a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	d002      	beq.n	8004242 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800423c:	2302      	movs	r3, #2
 800423e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004240:	e11a      	b.n	8004478 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800424a:	d112      	bne.n	8004272 <HAL_SPI_Receive+0x56>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10e      	bne.n	8004272 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2204      	movs	r2, #4
 8004258:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800425c:	88fa      	ldrh	r2, [r7, #6]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	4613      	mov	r3, r2
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	68b9      	ldr	r1, [r7, #8]
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f90e 	bl	800448a <HAL_SPI_TransmitReceive>
 800426e:	4603      	mov	r3, r0
 8004270:	e107      	b.n	8004482 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_SPI_Receive+0x64>
 800427c:	2302      	movs	r3, #2
 800427e:	e100      	b.n	8004482 <HAL_SPI_Receive+0x266>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004288:	f7fe f878 	bl	800237c <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <HAL_SPI_Receive+0x7e>
 8004294:	88fb      	ldrh	r3, [r7, #6]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d102      	bne.n	80042a0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800429e:	e0eb      	b.n	8004478 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2204      	movs	r2, #4
 80042a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	88fa      	ldrh	r2, [r7, #6]
 80042b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	88fa      	ldrh	r2, [r7, #6]
 80042c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042ea:	d908      	bls.n	80042fe <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80042fa:	605a      	str	r2, [r3, #4]
 80042fc:	e007      	b.n	800430e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800430c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004316:	d10f      	bne.n	8004338 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004326:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004336:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004342:	2b40      	cmp	r3, #64	@ 0x40
 8004344:	d007      	beq.n	8004356 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004354:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800435e:	d86f      	bhi.n	8004440 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004360:	e034      	b.n	80043cc <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b01      	cmp	r3, #1
 800436e:	d117      	bne.n	80043a0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f103 020c 	add.w	r2, r3, #12
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437c:	7812      	ldrb	r2, [r2, #0]
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800439e:	e015      	b.n	80043cc <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043a0:	f7fd ffec 	bl	800237c <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d803      	bhi.n	80043b8 <HAL_SPI_Receive+0x19c>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b6:	d102      	bne.n	80043be <HAL_SPI_Receive+0x1a2>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80043ca:	e055      	b.n	8004478 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1c4      	bne.n	8004362 <HAL_SPI_Receive+0x146>
 80043d8:	e038      	b.n	800444c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d115      	bne.n	8004414 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f2:	b292      	uxth	r2, r2
 80043f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fa:	1c9a      	adds	r2, r3, #2
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004406:	b29b      	uxth	r3, r3
 8004408:	3b01      	subs	r3, #1
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004412:	e015      	b.n	8004440 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004414:	f7fd ffb2 	bl	800237c <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	429a      	cmp	r2, r3
 8004422:	d803      	bhi.n	800442c <HAL_SPI_Receive+0x210>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442a:	d102      	bne.n	8004432 <HAL_SPI_Receive+0x216>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d106      	bne.n	8004440 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800443e:	e01b      	b.n	8004478 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1c6      	bne.n	80043da <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	6839      	ldr	r1, [r7, #0]
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 fb5b 	bl	8004b0c <SPI_EndRxTransaction>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2220      	movs	r2, #32
 8004460:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	75fb      	strb	r3, [r7, #23]
 800446e:	e003      	b.n	8004478 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004480:	7dfb      	ldrb	r3, [r7, #23]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b08a      	sub	sp, #40	@ 0x28
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
 8004496:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004498:	2301      	movs	r3, #1
 800449a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_SPI_TransmitReceive+0x26>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e20a      	b.n	80048c6 <HAL_SPI_TransmitReceive+0x43c>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044b8:	f7fd ff60 	bl	800237c <HAL_GetTick>
 80044bc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80044c4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80044cc:	887b      	ldrh	r3, [r7, #2]
 80044ce:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80044d0:	887b      	ldrh	r3, [r7, #2]
 80044d2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044d4:	7efb      	ldrb	r3, [r7, #27]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d00e      	beq.n	80044f8 <HAL_SPI_TransmitReceive+0x6e>
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044e0:	d106      	bne.n	80044f0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d102      	bne.n	80044f0 <HAL_SPI_TransmitReceive+0x66>
 80044ea:	7efb      	ldrb	r3, [r7, #27]
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d003      	beq.n	80044f8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80044f0:	2302      	movs	r3, #2
 80044f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80044f6:	e1e0      	b.n	80048ba <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <HAL_SPI_TransmitReceive+0x80>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <HAL_SPI_TransmitReceive+0x80>
 8004504:	887b      	ldrh	r3, [r7, #2]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d103      	bne.n	8004512 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004510:	e1d3      	b.n	80048ba <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b04      	cmp	r3, #4
 800451c:	d003      	beq.n	8004526 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2205      	movs	r2, #5
 8004522:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	887a      	ldrh	r2, [r7, #2]
 8004536:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	887a      	ldrh	r2, [r7, #2]
 800453e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	887a      	ldrh	r2, [r7, #2]
 800454c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	887a      	ldrh	r2, [r7, #2]
 8004552:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004568:	d802      	bhi.n	8004570 <HAL_SPI_TransmitReceive+0xe6>
 800456a:	8a3b      	ldrh	r3, [r7, #16]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d908      	bls.n	8004582 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800457e:	605a      	str	r2, [r3, #4]
 8004580:	e007      	b.n	8004592 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004590:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800459c:	2b40      	cmp	r3, #64	@ 0x40
 800459e:	d007      	beq.n	80045b0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80045b8:	f240 8081 	bls.w	80046be <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <HAL_SPI_TransmitReceive+0x140>
 80045c4:	8a7b      	ldrh	r3, [r7, #18]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d16d      	bne.n	80046a6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ce:	881a      	ldrh	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045da:	1c9a      	adds	r2, r3, #2
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045ee:	e05a      	b.n	80046a6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d11b      	bne.n	8004636 <HAL_SPI_TransmitReceive+0x1ac>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d016      	beq.n	8004636 <HAL_SPI_TransmitReceive+0x1ac>
 8004608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460a:	2b01      	cmp	r3, #1
 800460c:	d113      	bne.n	8004636 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004612:	881a      	ldrh	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461e:	1c9a      	adds	r2, r3, #2
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004628:	b29b      	uxth	r3, r3
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b01      	cmp	r3, #1
 8004642:	d11c      	bne.n	800467e <HAL_SPI_TransmitReceive+0x1f4>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d016      	beq.n	800467e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465a:	b292      	uxth	r2, r2
 800465c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004662:	1c9a      	adds	r2, r3, #2
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b01      	subs	r3, #1
 8004672:	b29a      	uxth	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800467a:	2301      	movs	r3, #1
 800467c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800467e:	f7fd fe7d 	bl	800237c <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800468a:	429a      	cmp	r2, r3
 800468c:	d80b      	bhi.n	80046a6 <HAL_SPI_TransmitReceive+0x21c>
 800468e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004694:	d007      	beq.n	80046a6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80046a4:	e109      	b.n	80048ba <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d19f      	bne.n	80045f0 <HAL_SPI_TransmitReceive+0x166>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d199      	bne.n	80045f0 <HAL_SPI_TransmitReceive+0x166>
 80046bc:	e0e3      	b.n	8004886 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_SPI_TransmitReceive+0x244>
 80046c6:	8a7b      	ldrh	r3, [r7, #18]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	f040 80cf 	bne.w	800486c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d912      	bls.n	80046fe <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046dc:	881a      	ldrh	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e8:	1c9a      	adds	r2, r3, #2
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	3b02      	subs	r3, #2
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046fc:	e0b6      	b.n	800486c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	330c      	adds	r3, #12
 8004708:	7812      	ldrb	r2, [r2, #0]
 800470a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004724:	e0a2      	b.n	800486c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b02      	cmp	r3, #2
 8004732:	d134      	bne.n	800479e <HAL_SPI_TransmitReceive+0x314>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d02f      	beq.n	800479e <HAL_SPI_TransmitReceive+0x314>
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	2b01      	cmp	r3, #1
 8004742:	d12c      	bne.n	800479e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b01      	cmp	r3, #1
 800474c:	d912      	bls.n	8004774 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004752:	881a      	ldrh	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475e:	1c9a      	adds	r2, r3, #2
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b02      	subs	r3, #2
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004772:	e012      	b.n	800479a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	330c      	adds	r3, #12
 800477e:	7812      	ldrb	r2, [r2, #0]
 8004780:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d148      	bne.n	800483e <HAL_SPI_TransmitReceive+0x3b4>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d042      	beq.n	800483e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047be:	b29b      	uxth	r3, r3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d923      	bls.n	800480c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ce:	b292      	uxth	r2, r2
 80047d0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d6:	1c9a      	adds	r2, r3, #2
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b02      	subs	r3, #2
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d81f      	bhi.n	800483a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004808:	605a      	str	r2, [r3, #4]
 800480a:	e016      	b.n	800483a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f103 020c 	add.w	r2, r3, #12
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004818:	7812      	ldrb	r2, [r2, #0]
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800483a:	2301      	movs	r3, #1
 800483c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800483e:	f7fd fd9d 	bl	800237c <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800484a:	429a      	cmp	r2, r3
 800484c:	d803      	bhi.n	8004856 <HAL_SPI_TransmitReceive+0x3cc>
 800484e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004854:	d102      	bne.n	800485c <HAL_SPI_TransmitReceive+0x3d2>
 8004856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004858:	2b00      	cmp	r3, #0
 800485a:	d107      	bne.n	800486c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800486a:	e026      	b.n	80048ba <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	f47f af57 	bne.w	8004726 <HAL_SPI_TransmitReceive+0x29c>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	f47f af50 	bne.w	8004726 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004886:	69fa      	ldr	r2, [r7, #28]
 8004888:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 f996 	bl	8004bbc <SPI_EndRxTxTransaction>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d005      	beq.n	80048a2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2220      	movs	r2, #32
 80048a0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048b0:	e003      	b.n	80048ba <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80048c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3728      	adds	r7, #40	@ 0x28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b088      	sub	sp, #32
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	4613      	mov	r3, r2
 80048de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048e0:	f7fd fd4c 	bl	800237c <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e8:	1a9b      	subs	r3, r3, r2
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	4413      	add	r3, r2
 80048ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048f0:	f7fd fd44 	bl	800237c <HAL_GetTick>
 80048f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048f6:	4b39      	ldr	r3, [pc, #228]	@ (80049dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	015b      	lsls	r3, r3, #5
 80048fc:	0d1b      	lsrs	r3, r3, #20
 80048fe:	69fa      	ldr	r2, [r7, #28]
 8004900:	fb02 f303 	mul.w	r3, r2, r3
 8004904:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004906:	e054      	b.n	80049b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490e:	d050      	beq.n	80049b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004910:	f7fd fd34 	bl	800237c <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	429a      	cmp	r2, r3
 800491e:	d902      	bls.n	8004926 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d13d      	bne.n	80049a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004934:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800493e:	d111      	bne.n	8004964 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004948:	d004      	beq.n	8004954 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004952:	d107      	bne.n	8004964 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004962:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004968:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800496c:	d10f      	bne.n	800498e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800498c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e017      	b.n	80049d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4013      	ands	r3, r2
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	429a      	cmp	r2, r3
 80049c0:	bf0c      	ite	eq
 80049c2:	2301      	moveq	r3, #1
 80049c4:	2300      	movne	r3, #0
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	461a      	mov	r2, r3
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d19b      	bne.n	8004908 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3720      	adds	r7, #32
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20000000 	.word	0x20000000

080049e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08a      	sub	sp, #40	@ 0x28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80049ee:	2300      	movs	r3, #0
 80049f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80049f2:	f7fd fcc3 	bl	800237c <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fa:	1a9b      	subs	r3, r3, r2
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	4413      	add	r3, r2
 8004a00:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004a02:	f7fd fcbb 	bl	800237c <HAL_GetTick>
 8004a06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	330c      	adds	r3, #12
 8004a0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004a10:	4b3d      	ldr	r3, [pc, #244]	@ (8004b08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	00da      	lsls	r2, r3, #3
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	0d1b      	lsrs	r3, r3, #20
 8004a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a22:	fb02 f303 	mul.w	r3, r2, r3
 8004a26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004a28:	e060      	b.n	8004aec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004a30:	d107      	bne.n	8004a42 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d104      	bne.n	8004a42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a48:	d050      	beq.n	8004aec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a4a:	f7fd fc97 	bl	800237c <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d902      	bls.n	8004a60 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d13d      	bne.n	8004adc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a78:	d111      	bne.n	8004a9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a82:	d004      	beq.n	8004a8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a8c:	d107      	bne.n	8004a9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aa6:	d10f      	bne.n	8004ac8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ac6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e010      	b.n	8004afe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	4013      	ands	r3, r2
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d196      	bne.n	8004a2a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3728      	adds	r7, #40	@ 0x28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20000000 	.word	0x20000000

08004b0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af02      	add	r7, sp, #8
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b20:	d111      	bne.n	8004b46 <SPI_EndRxTransaction+0x3a>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b2a:	d004      	beq.n	8004b36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b34:	d107      	bne.n	8004b46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b44:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	2180      	movs	r1, #128	@ 0x80
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f7ff febd 	bl	80048d0 <SPI_WaitFlagStateUntilTimeout>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d007      	beq.n	8004b6c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b60:	f043 0220 	orr.w	r2, r3, #32
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e023      	b.n	8004bb4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b74:	d11d      	bne.n	8004bb2 <SPI_EndRxTransaction+0xa6>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b7e:	d004      	beq.n	8004b8a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b88:	d113      	bne.n	8004bb2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7ff ff22 	bl	80049e0 <SPI_WaitFifoStateUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d007      	beq.n	8004bb2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ba6:	f043 0220 	orr.w	r2, r3, #32
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e000      	b.n	8004bb4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af02      	add	r7, sp, #8
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f7ff ff03 	bl	80049e0 <SPI_WaitFifoStateUntilTimeout>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d007      	beq.n	8004bf0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004be4:	f043 0220 	orr.w	r2, r3, #32
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e027      	b.n	8004c40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	2180      	movs	r1, #128	@ 0x80
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f7ff fe68 	bl	80048d0 <SPI_WaitFlagStateUntilTimeout>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d007      	beq.n	8004c16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c0a:	f043 0220 	orr.w	r2, r3, #32
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e014      	b.n	8004c40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f7ff fedc 	bl	80049e0 <SPI_WaitFifoStateUntilTimeout>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d007      	beq.n	8004c3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c32:	f043 0220 	orr.w	r2, r3, #32
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e000      	b.n	8004c40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e049      	b.n	8004cee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d106      	bne.n	8004c74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fd f86a 	bl	8001d48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3304      	adds	r3, #4
 8004c84:	4619      	mov	r1, r3
 8004c86:	4610      	mov	r0, r2
 8004c88:	f000 faf0 	bl	800526c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d109      	bne.n	8004d1c <HAL_TIM_PWM_Start+0x24>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	bf14      	ite	ne
 8004d14:	2301      	movne	r3, #1
 8004d16:	2300      	moveq	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	e03c      	b.n	8004d96 <HAL_TIM_PWM_Start+0x9e>
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d109      	bne.n	8004d36 <HAL_TIM_PWM_Start+0x3e>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	bf14      	ite	ne
 8004d2e:	2301      	movne	r3, #1
 8004d30:	2300      	moveq	r3, #0
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	e02f      	b.n	8004d96 <HAL_TIM_PWM_Start+0x9e>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d109      	bne.n	8004d50 <HAL_TIM_PWM_Start+0x58>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	bf14      	ite	ne
 8004d48:	2301      	movne	r3, #1
 8004d4a:	2300      	moveq	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	e022      	b.n	8004d96 <HAL_TIM_PWM_Start+0x9e>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	2b0c      	cmp	r3, #12
 8004d54:	d109      	bne.n	8004d6a <HAL_TIM_PWM_Start+0x72>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	bf14      	ite	ne
 8004d62:	2301      	movne	r3, #1
 8004d64:	2300      	moveq	r3, #0
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	e015      	b.n	8004d96 <HAL_TIM_PWM_Start+0x9e>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b10      	cmp	r3, #16
 8004d6e:	d109      	bne.n	8004d84 <HAL_TIM_PWM_Start+0x8c>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	bf14      	ite	ne
 8004d7c:	2301      	movne	r3, #1
 8004d7e:	2300      	moveq	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	e008      	b.n	8004d96 <HAL_TIM_PWM_Start+0x9e>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	bf14      	ite	ne
 8004d90:	2301      	movne	r3, #1
 8004d92:	2300      	moveq	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e097      	b.n	8004ece <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d104      	bne.n	8004dae <HAL_TIM_PWM_Start+0xb6>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dac:	e023      	b.n	8004df6 <HAL_TIM_PWM_Start+0xfe>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d104      	bne.n	8004dbe <HAL_TIM_PWM_Start+0xc6>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dbc:	e01b      	b.n	8004df6 <HAL_TIM_PWM_Start+0xfe>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d104      	bne.n	8004dce <HAL_TIM_PWM_Start+0xd6>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dcc:	e013      	b.n	8004df6 <HAL_TIM_PWM_Start+0xfe>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b0c      	cmp	r3, #12
 8004dd2:	d104      	bne.n	8004dde <HAL_TIM_PWM_Start+0xe6>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ddc:	e00b      	b.n	8004df6 <HAL_TIM_PWM_Start+0xfe>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b10      	cmp	r3, #16
 8004de2:	d104      	bne.n	8004dee <HAL_TIM_PWM_Start+0xf6>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dec:	e003      	b.n	8004df6 <HAL_TIM_PWM_Start+0xfe>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2202      	movs	r2, #2
 8004df2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	6839      	ldr	r1, [r7, #0]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fdc6 	bl	8005990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a33      	ldr	r2, [pc, #204]	@ (8004ed8 <HAL_TIM_PWM_Start+0x1e0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d013      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x13e>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a32      	ldr	r2, [pc, #200]	@ (8004edc <HAL_TIM_PWM_Start+0x1e4>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00e      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x13e>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a30      	ldr	r2, [pc, #192]	@ (8004ee0 <HAL_TIM_PWM_Start+0x1e8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d009      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x13e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a2f      	ldr	r2, [pc, #188]	@ (8004ee4 <HAL_TIM_PWM_Start+0x1ec>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d004      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x13e>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a2d      	ldr	r2, [pc, #180]	@ (8004ee8 <HAL_TIM_PWM_Start+0x1f0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d101      	bne.n	8004e3a <HAL_TIM_PWM_Start+0x142>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <HAL_TIM_PWM_Start+0x144>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d007      	beq.n	8004e50 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e4e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a20      	ldr	r2, [pc, #128]	@ (8004ed8 <HAL_TIM_PWM_Start+0x1e0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d018      	beq.n	8004e8c <HAL_TIM_PWM_Start+0x194>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e62:	d013      	beq.n	8004e8c <HAL_TIM_PWM_Start+0x194>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a20      	ldr	r2, [pc, #128]	@ (8004eec <HAL_TIM_PWM_Start+0x1f4>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00e      	beq.n	8004e8c <HAL_TIM_PWM_Start+0x194>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1f      	ldr	r2, [pc, #124]	@ (8004ef0 <HAL_TIM_PWM_Start+0x1f8>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d009      	beq.n	8004e8c <HAL_TIM_PWM_Start+0x194>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a17      	ldr	r2, [pc, #92]	@ (8004edc <HAL_TIM_PWM_Start+0x1e4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d004      	beq.n	8004e8c <HAL_TIM_PWM_Start+0x194>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a16      	ldr	r2, [pc, #88]	@ (8004ee0 <HAL_TIM_PWM_Start+0x1e8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d115      	bne.n	8004eb8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	4b18      	ldr	r3, [pc, #96]	@ (8004ef4 <HAL_TIM_PWM_Start+0x1fc>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2b06      	cmp	r3, #6
 8004e9c:	d015      	beq.n	8004eca <HAL_TIM_PWM_Start+0x1d2>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ea4:	d011      	beq.n	8004eca <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f042 0201 	orr.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb6:	e008      	b.n	8004eca <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	e000      	b.n	8004ecc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40012c00 	.word	0x40012c00
 8004edc:	40013400 	.word	0x40013400
 8004ee0:	40014000 	.word	0x40014000
 8004ee4:	40014400 	.word	0x40014400
 8004ee8:	40014800 	.word	0x40014800
 8004eec:	40000400 	.word	0x40000400
 8004ef0:	40000800 	.word	0x40000800
 8004ef4:	00010007 	.word	0x00010007

08004ef8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e097      	b.n	800503c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d106      	bne.n	8004f26 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7fc ff7b 	bl	8001e1c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6812      	ldr	r2, [r2, #0]
 8004f38:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004f3c:	f023 0307 	bic.w	r3, r3, #7
 8004f40:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	3304      	adds	r3, #4
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	f000 f98d 	bl	800526c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f7a:	f023 0303 	bic.w	r3, r3, #3
 8004f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	021b      	lsls	r3, r3, #8
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004f98:	f023 030c 	bic.w	r3, r3, #12
 8004f9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004fa4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fa8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	021b      	lsls	r3, r3, #8
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	011a      	lsls	r2, r3, #4
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	031b      	lsls	r3, r3, #12
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004fd6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004fde:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	011b      	lsls	r3, r3, #4
 8004fea:	4313      	orrs	r3, r2
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3718      	adds	r7, #24
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005050:	2300      	movs	r3, #0
 8005052:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800505e:	2302      	movs	r3, #2
 8005060:	e0ff      	b.n	8005262 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b14      	cmp	r3, #20
 800506e:	f200 80f0 	bhi.w	8005252 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005072:	a201      	add	r2, pc, #4	@ (adr r2, 8005078 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005078:	080050cd 	.word	0x080050cd
 800507c:	08005253 	.word	0x08005253
 8005080:	08005253 	.word	0x08005253
 8005084:	08005253 	.word	0x08005253
 8005088:	0800510d 	.word	0x0800510d
 800508c:	08005253 	.word	0x08005253
 8005090:	08005253 	.word	0x08005253
 8005094:	08005253 	.word	0x08005253
 8005098:	0800514f 	.word	0x0800514f
 800509c:	08005253 	.word	0x08005253
 80050a0:	08005253 	.word	0x08005253
 80050a4:	08005253 	.word	0x08005253
 80050a8:	0800518f 	.word	0x0800518f
 80050ac:	08005253 	.word	0x08005253
 80050b0:	08005253 	.word	0x08005253
 80050b4:	08005253 	.word	0x08005253
 80050b8:	080051d1 	.word	0x080051d1
 80050bc:	08005253 	.word	0x08005253
 80050c0:	08005253 	.word	0x08005253
 80050c4:	08005253 	.word	0x08005253
 80050c8:	08005211 	.word	0x08005211
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68b9      	ldr	r1, [r7, #8]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 f966 	bl	80053a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699a      	ldr	r2, [r3, #24]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0208 	orr.w	r2, r2, #8
 80050e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0204 	bic.w	r2, r2, #4
 80050f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6999      	ldr	r1, [r3, #24]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	691a      	ldr	r2, [r3, #16]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	619a      	str	r2, [r3, #24]
      break;
 800510a:	e0a5      	b.n	8005258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	4618      	mov	r0, r3
 8005114:	f000 f9d6 	bl	80054c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699a      	ldr	r2, [r3, #24]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699a      	ldr	r2, [r3, #24]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6999      	ldr	r1, [r3, #24]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	021a      	lsls	r2, r3, #8
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	619a      	str	r2, [r3, #24]
      break;
 800514c:	e084      	b.n	8005258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68b9      	ldr	r1, [r7, #8]
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fa3f 	bl	80055d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69da      	ldr	r2, [r3, #28]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0208 	orr.w	r2, r2, #8
 8005168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69da      	ldr	r2, [r3, #28]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0204 	bic.w	r2, r2, #4
 8005178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69d9      	ldr	r1, [r3, #28]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	61da      	str	r2, [r3, #28]
      break;
 800518c:	e064      	b.n	8005258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	4618      	mov	r0, r3
 8005196:	f000 faa7 	bl	80056e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69da      	ldr	r2, [r3, #28]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69d9      	ldr	r1, [r3, #28]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	021a      	lsls	r2, r3, #8
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	61da      	str	r2, [r3, #28]
      break;
 80051ce:	e043      	b.n	8005258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68b9      	ldr	r1, [r7, #8]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fb10 	bl	80057fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0208 	orr.w	r2, r2, #8
 80051ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0204 	bic.w	r2, r2, #4
 80051fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	691a      	ldr	r2, [r3, #16]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800520e:	e023      	b.n	8005258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fb54 	bl	80058c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800522a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800523a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	021a      	lsls	r2, r3, #8
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005250:	e002      	b.n	8005258 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	75fb      	strb	r3, [r7, #23]
      break;
 8005256:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005260:	7dfb      	ldrb	r3, [r7, #23]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3718      	adds	r7, #24
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop

0800526c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a42      	ldr	r2, [pc, #264]	@ (8005388 <TIM_Base_SetConfig+0x11c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00f      	beq.n	80052a4 <TIM_Base_SetConfig+0x38>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800528a:	d00b      	beq.n	80052a4 <TIM_Base_SetConfig+0x38>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a3f      	ldr	r2, [pc, #252]	@ (800538c <TIM_Base_SetConfig+0x120>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d007      	beq.n	80052a4 <TIM_Base_SetConfig+0x38>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a3e      	ldr	r2, [pc, #248]	@ (8005390 <TIM_Base_SetConfig+0x124>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d003      	beq.n	80052a4 <TIM_Base_SetConfig+0x38>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a3d      	ldr	r2, [pc, #244]	@ (8005394 <TIM_Base_SetConfig+0x128>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d108      	bne.n	80052b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a33      	ldr	r2, [pc, #204]	@ (8005388 <TIM_Base_SetConfig+0x11c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d01b      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052c4:	d017      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a30      	ldr	r2, [pc, #192]	@ (800538c <TIM_Base_SetConfig+0x120>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d013      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a2f      	ldr	r2, [pc, #188]	@ (8005390 <TIM_Base_SetConfig+0x124>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00f      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a2e      	ldr	r2, [pc, #184]	@ (8005394 <TIM_Base_SetConfig+0x128>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00b      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a2d      	ldr	r2, [pc, #180]	@ (8005398 <TIM_Base_SetConfig+0x12c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d007      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a2c      	ldr	r2, [pc, #176]	@ (800539c <TIM_Base_SetConfig+0x130>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d003      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a2b      	ldr	r2, [pc, #172]	@ (80053a0 <TIM_Base_SetConfig+0x134>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d108      	bne.n	8005308 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a16      	ldr	r2, [pc, #88]	@ (8005388 <TIM_Base_SetConfig+0x11c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00f      	beq.n	8005354 <TIM_Base_SetConfig+0xe8>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a17      	ldr	r2, [pc, #92]	@ (8005394 <TIM_Base_SetConfig+0x128>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00b      	beq.n	8005354 <TIM_Base_SetConfig+0xe8>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a16      	ldr	r2, [pc, #88]	@ (8005398 <TIM_Base_SetConfig+0x12c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d007      	beq.n	8005354 <TIM_Base_SetConfig+0xe8>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a15      	ldr	r2, [pc, #84]	@ (800539c <TIM_Base_SetConfig+0x130>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d003      	beq.n	8005354 <TIM_Base_SetConfig+0xe8>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a14      	ldr	r2, [pc, #80]	@ (80053a0 <TIM_Base_SetConfig+0x134>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d103      	bne.n	800535c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b01      	cmp	r3, #1
 800536c:	d105      	bne.n	800537a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f023 0201 	bic.w	r2, r3, #1
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	611a      	str	r2, [r3, #16]
  }
}
 800537a:	bf00      	nop
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	40012c00 	.word	0x40012c00
 800538c:	40000400 	.word	0x40000400
 8005390:	40000800 	.word	0x40000800
 8005394:	40013400 	.word	0x40013400
 8005398:	40014000 	.word	0x40014000
 800539c:	40014400 	.word	0x40014400
 80053a0:	40014800 	.word	0x40014800

080053a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	f023 0201 	bic.w	r2, r3, #1
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0303 	bic.w	r3, r3, #3
 80053de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f023 0302 	bic.w	r3, r3, #2
 80053f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a2c      	ldr	r2, [pc, #176]	@ (80054b0 <TIM_OC1_SetConfig+0x10c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d00f      	beq.n	8005424 <TIM_OC1_SetConfig+0x80>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a2b      	ldr	r2, [pc, #172]	@ (80054b4 <TIM_OC1_SetConfig+0x110>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d00b      	beq.n	8005424 <TIM_OC1_SetConfig+0x80>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a2a      	ldr	r2, [pc, #168]	@ (80054b8 <TIM_OC1_SetConfig+0x114>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d007      	beq.n	8005424 <TIM_OC1_SetConfig+0x80>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a29      	ldr	r2, [pc, #164]	@ (80054bc <TIM_OC1_SetConfig+0x118>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d003      	beq.n	8005424 <TIM_OC1_SetConfig+0x80>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a28      	ldr	r2, [pc, #160]	@ (80054c0 <TIM_OC1_SetConfig+0x11c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d10c      	bne.n	800543e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f023 0308 	bic.w	r3, r3, #8
 800542a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	4313      	orrs	r3, r2
 8005434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f023 0304 	bic.w	r3, r3, #4
 800543c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a1b      	ldr	r2, [pc, #108]	@ (80054b0 <TIM_OC1_SetConfig+0x10c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d00f      	beq.n	8005466 <TIM_OC1_SetConfig+0xc2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a1a      	ldr	r2, [pc, #104]	@ (80054b4 <TIM_OC1_SetConfig+0x110>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00b      	beq.n	8005466 <TIM_OC1_SetConfig+0xc2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a19      	ldr	r2, [pc, #100]	@ (80054b8 <TIM_OC1_SetConfig+0x114>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d007      	beq.n	8005466 <TIM_OC1_SetConfig+0xc2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a18      	ldr	r2, [pc, #96]	@ (80054bc <TIM_OC1_SetConfig+0x118>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d003      	beq.n	8005466 <TIM_OC1_SetConfig+0xc2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a17      	ldr	r2, [pc, #92]	@ (80054c0 <TIM_OC1_SetConfig+0x11c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d111      	bne.n	800548a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800546c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	621a      	str	r2, [r3, #32]
}
 80054a4:	bf00      	nop
 80054a6:	371c      	adds	r7, #28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	40012c00 	.word	0x40012c00
 80054b4:	40013400 	.word	0x40013400
 80054b8:	40014000 	.word	0x40014000
 80054bc:	40014400 	.word	0x40014400
 80054c0:	40014800 	.word	0x40014800

080054c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	f023 0210 	bic.w	r2, r3, #16
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	021b      	lsls	r3, r3, #8
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	4313      	orrs	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f023 0320 	bic.w	r3, r3, #32
 8005512:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	4313      	orrs	r3, r2
 800551e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a28      	ldr	r2, [pc, #160]	@ (80055c4 <TIM_OC2_SetConfig+0x100>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d003      	beq.n	8005530 <TIM_OC2_SetConfig+0x6c>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a27      	ldr	r2, [pc, #156]	@ (80055c8 <TIM_OC2_SetConfig+0x104>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d10d      	bne.n	800554c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	011b      	lsls	r3, r3, #4
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	4313      	orrs	r3, r2
 8005542:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800554a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a1d      	ldr	r2, [pc, #116]	@ (80055c4 <TIM_OC2_SetConfig+0x100>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d00f      	beq.n	8005574 <TIM_OC2_SetConfig+0xb0>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a1c      	ldr	r2, [pc, #112]	@ (80055c8 <TIM_OC2_SetConfig+0x104>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00b      	beq.n	8005574 <TIM_OC2_SetConfig+0xb0>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a1b      	ldr	r2, [pc, #108]	@ (80055cc <TIM_OC2_SetConfig+0x108>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d007      	beq.n	8005574 <TIM_OC2_SetConfig+0xb0>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a1a      	ldr	r2, [pc, #104]	@ (80055d0 <TIM_OC2_SetConfig+0x10c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d003      	beq.n	8005574 <TIM_OC2_SetConfig+0xb0>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a19      	ldr	r2, [pc, #100]	@ (80055d4 <TIM_OC2_SetConfig+0x110>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d113      	bne.n	800559c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800557a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005582:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	4313      	orrs	r3, r2
 800559a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	621a      	str	r2, [r3, #32]
}
 80055b6:	bf00      	nop
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	40012c00 	.word	0x40012c00
 80055c8:	40013400 	.word	0x40013400
 80055cc:	40014000 	.word	0x40014000
 80055d0:	40014400 	.word	0x40014400
 80055d4:	40014800 	.word	0x40014800

080055d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800560a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0303 	bic.w	r3, r3, #3
 8005612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	021b      	lsls	r3, r3, #8
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	4313      	orrs	r3, r2
 8005630:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a27      	ldr	r2, [pc, #156]	@ (80056d4 <TIM_OC3_SetConfig+0xfc>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d003      	beq.n	8005642 <TIM_OC3_SetConfig+0x6a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a26      	ldr	r2, [pc, #152]	@ (80056d8 <TIM_OC3_SetConfig+0x100>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d10d      	bne.n	800565e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005648:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	021b      	lsls	r3, r3, #8
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800565c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a1c      	ldr	r2, [pc, #112]	@ (80056d4 <TIM_OC3_SetConfig+0xfc>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d00f      	beq.n	8005686 <TIM_OC3_SetConfig+0xae>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a1b      	ldr	r2, [pc, #108]	@ (80056d8 <TIM_OC3_SetConfig+0x100>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d00b      	beq.n	8005686 <TIM_OC3_SetConfig+0xae>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a1a      	ldr	r2, [pc, #104]	@ (80056dc <TIM_OC3_SetConfig+0x104>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d007      	beq.n	8005686 <TIM_OC3_SetConfig+0xae>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a19      	ldr	r2, [pc, #100]	@ (80056e0 <TIM_OC3_SetConfig+0x108>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d003      	beq.n	8005686 <TIM_OC3_SetConfig+0xae>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a18      	ldr	r2, [pc, #96]	@ (80056e4 <TIM_OC3_SetConfig+0x10c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d113      	bne.n	80056ae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800568c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	011b      	lsls	r3, r3, #4
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	4313      	orrs	r3, r2
 80056a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	621a      	str	r2, [r3, #32]
}
 80056c8:	bf00      	nop
 80056ca:	371c      	adds	r7, #28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	40012c00 	.word	0x40012c00
 80056d8:	40013400 	.word	0x40013400
 80056dc:	40014000 	.word	0x40014000
 80056e0:	40014400 	.word	0x40014400
 80056e4:	40014800 	.word	0x40014800

080056e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005716:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800571a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	021b      	lsls	r3, r3, #8
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4313      	orrs	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005736:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	031b      	lsls	r3, r3, #12
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4313      	orrs	r3, r2
 8005742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a28      	ldr	r2, [pc, #160]	@ (80057e8 <TIM_OC4_SetConfig+0x100>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d003      	beq.n	8005754 <TIM_OC4_SetConfig+0x6c>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a27      	ldr	r2, [pc, #156]	@ (80057ec <TIM_OC4_SetConfig+0x104>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d10d      	bne.n	8005770 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800575a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	031b      	lsls	r3, r3, #12
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	4313      	orrs	r3, r2
 8005766:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800576e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a1d      	ldr	r2, [pc, #116]	@ (80057e8 <TIM_OC4_SetConfig+0x100>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d00f      	beq.n	8005798 <TIM_OC4_SetConfig+0xb0>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a1c      	ldr	r2, [pc, #112]	@ (80057ec <TIM_OC4_SetConfig+0x104>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d00b      	beq.n	8005798 <TIM_OC4_SetConfig+0xb0>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a1b      	ldr	r2, [pc, #108]	@ (80057f0 <TIM_OC4_SetConfig+0x108>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d007      	beq.n	8005798 <TIM_OC4_SetConfig+0xb0>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a1a      	ldr	r2, [pc, #104]	@ (80057f4 <TIM_OC4_SetConfig+0x10c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d003      	beq.n	8005798 <TIM_OC4_SetConfig+0xb0>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a19      	ldr	r2, [pc, #100]	@ (80057f8 <TIM_OC4_SetConfig+0x110>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d113      	bne.n	80057c0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800579e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80057a6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	019b      	lsls	r3, r3, #6
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	019b      	lsls	r3, r3, #6
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	621a      	str	r2, [r3, #32]
}
 80057da:	bf00      	nop
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	40012c00 	.word	0x40012c00
 80057ec:	40013400 	.word	0x40013400
 80057f0:	40014000 	.word	0x40014000
 80057f4:	40014400 	.word	0x40014400
 80057f8:	40014800 	.word	0x40014800

080057fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800582a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800582e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005840:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	041b      	lsls	r3, r3, #16
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	4313      	orrs	r3, r2
 800584c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a17      	ldr	r2, [pc, #92]	@ (80058b0 <TIM_OC5_SetConfig+0xb4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00f      	beq.n	8005876 <TIM_OC5_SetConfig+0x7a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a16      	ldr	r2, [pc, #88]	@ (80058b4 <TIM_OC5_SetConfig+0xb8>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00b      	beq.n	8005876 <TIM_OC5_SetConfig+0x7a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a15      	ldr	r2, [pc, #84]	@ (80058b8 <TIM_OC5_SetConfig+0xbc>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d007      	beq.n	8005876 <TIM_OC5_SetConfig+0x7a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a14      	ldr	r2, [pc, #80]	@ (80058bc <TIM_OC5_SetConfig+0xc0>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d003      	beq.n	8005876 <TIM_OC5_SetConfig+0x7a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a13      	ldr	r2, [pc, #76]	@ (80058c0 <TIM_OC5_SetConfig+0xc4>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d109      	bne.n	800588a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800587c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	021b      	lsls	r3, r3, #8
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	4313      	orrs	r3, r2
 8005888:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	621a      	str	r2, [r3, #32]
}
 80058a4:	bf00      	nop
 80058a6:	371c      	adds	r7, #28
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	40012c00 	.word	0x40012c00
 80058b4:	40013400 	.word	0x40013400
 80058b8:	40014000 	.word	0x40014000
 80058bc:	40014400 	.word	0x40014400
 80058c0:	40014800 	.word	0x40014800

080058c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	021b      	lsls	r3, r3, #8
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4313      	orrs	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800590a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	051b      	lsls	r3, r3, #20
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	4313      	orrs	r3, r2
 8005916:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a18      	ldr	r2, [pc, #96]	@ (800597c <TIM_OC6_SetConfig+0xb8>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d00f      	beq.n	8005940 <TIM_OC6_SetConfig+0x7c>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a17      	ldr	r2, [pc, #92]	@ (8005980 <TIM_OC6_SetConfig+0xbc>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d00b      	beq.n	8005940 <TIM_OC6_SetConfig+0x7c>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a16      	ldr	r2, [pc, #88]	@ (8005984 <TIM_OC6_SetConfig+0xc0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d007      	beq.n	8005940 <TIM_OC6_SetConfig+0x7c>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a15      	ldr	r2, [pc, #84]	@ (8005988 <TIM_OC6_SetConfig+0xc4>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d003      	beq.n	8005940 <TIM_OC6_SetConfig+0x7c>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a14      	ldr	r2, [pc, #80]	@ (800598c <TIM_OC6_SetConfig+0xc8>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d109      	bne.n	8005954 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005946:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	029b      	lsls	r3, r3, #10
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	621a      	str	r2, [r3, #32]
}
 800596e:	bf00      	nop
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	40012c00 	.word	0x40012c00
 8005980:	40013400 	.word	0x40013400
 8005984:	40014000 	.word	0x40014000
 8005988:	40014400 	.word	0x40014400
 800598c:	40014800 	.word	0x40014800

08005990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	2201      	movs	r2, #1
 80059a4:	fa02 f303 	lsl.w	r3, r2, r3
 80059a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a1a      	ldr	r2, [r3, #32]
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	43db      	mvns	r3, r3
 80059b2:	401a      	ands	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a1a      	ldr	r2, [r3, #32]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	f003 031f 	and.w	r3, r3, #31
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	fa01 f303 	lsl.w	r3, r1, r3
 80059c8:	431a      	orrs	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	621a      	str	r2, [r3, #32]
}
 80059ce:	bf00      	nop
 80059d0:	371c      	adds	r7, #28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
	...

080059dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d101      	bne.n	80059f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059f0:	2302      	movs	r3, #2
 80059f2:	e065      	b.n	8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a2c      	ldr	r2, [pc, #176]	@ (8005acc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d004      	beq.n	8005a28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a2b      	ldr	r2, [pc, #172]	@ (8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d108      	bne.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005a2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8005acc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d018      	beq.n	8005a94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a6a:	d013      	beq.n	8005a94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a18      	ldr	r2, [pc, #96]	@ (8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d00e      	beq.n	8005a94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a17      	ldr	r2, [pc, #92]	@ (8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d009      	beq.n	8005a94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a12      	ldr	r2, [pc, #72]	@ (8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d004      	beq.n	8005a94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a13      	ldr	r2, [pc, #76]	@ (8005adc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d10c      	bne.n	8005aae <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	40012c00 	.word	0x40012c00
 8005ad0:	40013400 	.word	0x40013400
 8005ad4:	40000400 	.word	0x40000400
 8005ad8:	40000800 	.word	0x40000800
 8005adc:	40014000 	.word	0x40014000

08005ae0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d101      	bne.n	8005afc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005af8:	2302      	movs	r3, #2
 8005afa:	e073      	b.n	8005be4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	041b      	lsls	r3, r3, #16
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a19      	ldr	r2, [pc, #100]	@ (8005bf0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d004      	beq.n	8005b98 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a18      	ldr	r2, [pc, #96]	@ (8005bf4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d11c      	bne.n	8005bd2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba2:	051b      	lsls	r3, r3, #20
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	40012c00 	.word	0x40012c00
 8005bf4:	40013400 	.word	0x40013400

08005bf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e042      	b.n	8005c90 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d106      	bne.n	8005c22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7fc fa59 	bl	80020d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2224      	movs	r2, #36	@ 0x24
 8005c26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 0201 	bic.w	r2, r2, #1
 8005c38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fbf8 	bl	8006438 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f929 	bl	8005ea0 <UART_SetConfig>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d101      	bne.n	8005c58 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e01b      	b.n	8005c90 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689a      	ldr	r2, [r3, #8]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0201 	orr.w	r2, r2, #1
 8005c86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 fc77 	bl	800657c <UART_CheckIdleState>
 8005c8e:	4603      	mov	r3, r0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08a      	sub	sp, #40	@ 0x28
 8005c9c:	af02      	add	r7, sp, #8
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	603b      	str	r3, [r7, #0]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cae:	2b20      	cmp	r3, #32
 8005cb0:	d17b      	bne.n	8005daa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <HAL_UART_Transmit+0x26>
 8005cb8:	88fb      	ldrh	r3, [r7, #6]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e074      	b.n	8005dac <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2221      	movs	r2, #33	@ 0x21
 8005cce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cd2:	f7fc fb53 	bl	800237c <HAL_GetTick>
 8005cd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	88fa      	ldrh	r2, [r7, #6]
 8005cdc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	88fa      	ldrh	r2, [r7, #6]
 8005ce4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cf0:	d108      	bne.n	8005d04 <HAL_UART_Transmit+0x6c>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d104      	bne.n	8005d04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	61bb      	str	r3, [r7, #24]
 8005d02:	e003      	b.n	8005d0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d0c:	e030      	b.n	8005d70 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2200      	movs	r2, #0
 8005d16:	2180      	movs	r1, #128	@ 0x80
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 fcd9 	bl	80066d0 <UART_WaitOnFlagUntilTimeout>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d005      	beq.n	8005d30 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2220      	movs	r2, #32
 8005d28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e03d      	b.n	8005dac <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10b      	bne.n	8005d4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d44:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	3302      	adds	r3, #2
 8005d4a:	61bb      	str	r3, [r7, #24]
 8005d4c:	e007      	b.n	8005d5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	781a      	ldrb	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	3b01      	subs	r3, #1
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1c8      	bne.n	8005d0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	2200      	movs	r2, #0
 8005d84:	2140      	movs	r1, #64	@ 0x40
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 fca2 	bl	80066d0 <UART_WaitOnFlagUntilTimeout>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d005      	beq.n	8005d9e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2220      	movs	r2, #32
 8005d96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e006      	b.n	8005dac <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	e000      	b.n	8005dac <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005daa:	2302      	movs	r3, #2
  }
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3720      	adds	r7, #32
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08a      	sub	sp, #40	@ 0x28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	d137      	bne.n	8005e3c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d002      	beq.n	8005dd8 <HAL_UART_Receive_DMA+0x24>
 8005dd2:	88fb      	ldrh	r3, [r7, #6]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e030      	b.n	8005e3e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a18      	ldr	r2, [pc, #96]	@ (8005e48 <HAL_UART_Receive_DMA+0x94>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d01f      	beq.n	8005e2c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d018      	beq.n	8005e2c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	e853 3f00 	ldrex	r3, [r3]
 8005e06:	613b      	str	r3, [r7, #16]
   return(result);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	461a      	mov	r2, r3
 8005e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e18:	623b      	str	r3, [r7, #32]
 8005e1a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1c:	69f9      	ldr	r1, [r7, #28]
 8005e1e:	6a3a      	ldr	r2, [r7, #32]
 8005e20:	e841 2300 	strex	r3, r2, [r1]
 8005e24:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1e6      	bne.n	8005dfa <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005e2c:	88fb      	ldrh	r3, [r7, #6]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	68b9      	ldr	r1, [r7, #8]
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 fcba 	bl	80067ac <UART_Start_Receive_DMA>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	e000      	b.n	8005e3e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e3c:	2302      	movs	r3, #2
  }
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3728      	adds	r7, #40	@ 0x28
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	40008000 	.word	0x40008000

08005e4c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	460b      	mov	r3, r1
 8005e92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ea4:	b08c      	sub	sp, #48	@ 0x30
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	4bab      	ldr	r3, [pc, #684]	@ (800617c <UART_SetConfig+0x2dc>)
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	6812      	ldr	r2, [r2, #0]
 8005ed6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4aa0      	ldr	r2, [pc, #640]	@ (8006180 <UART_SetConfig+0x2e0>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d004      	beq.n	8005f0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005f16:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	6812      	ldr	r2, [r2, #0]
 8005f1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f20:	430b      	orrs	r3, r1
 8005f22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2a:	f023 010f 	bic.w	r1, r3, #15
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a91      	ldr	r2, [pc, #580]	@ (8006184 <UART_SetConfig+0x2e4>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d125      	bne.n	8005f90 <UART_SetConfig+0xf0>
 8005f44:	4b90      	ldr	r3, [pc, #576]	@ (8006188 <UART_SetConfig+0x2e8>)
 8005f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f4a:	f003 0303 	and.w	r3, r3, #3
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d81a      	bhi.n	8005f88 <UART_SetConfig+0xe8>
 8005f52:	a201      	add	r2, pc, #4	@ (adr r2, 8005f58 <UART_SetConfig+0xb8>)
 8005f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f58:	08005f69 	.word	0x08005f69
 8005f5c:	08005f79 	.word	0x08005f79
 8005f60:	08005f71 	.word	0x08005f71
 8005f64:	08005f81 	.word	0x08005f81
 8005f68:	2301      	movs	r3, #1
 8005f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f6e:	e0d6      	b.n	800611e <UART_SetConfig+0x27e>
 8005f70:	2302      	movs	r3, #2
 8005f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f76:	e0d2      	b.n	800611e <UART_SetConfig+0x27e>
 8005f78:	2304      	movs	r3, #4
 8005f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f7e:	e0ce      	b.n	800611e <UART_SetConfig+0x27e>
 8005f80:	2308      	movs	r3, #8
 8005f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f86:	e0ca      	b.n	800611e <UART_SetConfig+0x27e>
 8005f88:	2310      	movs	r3, #16
 8005f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f8e:	e0c6      	b.n	800611e <UART_SetConfig+0x27e>
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a7d      	ldr	r2, [pc, #500]	@ (800618c <UART_SetConfig+0x2ec>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d138      	bne.n	800600c <UART_SetConfig+0x16c>
 8005f9a:	4b7b      	ldr	r3, [pc, #492]	@ (8006188 <UART_SetConfig+0x2e8>)
 8005f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa0:	f003 030c 	and.w	r3, r3, #12
 8005fa4:	2b0c      	cmp	r3, #12
 8005fa6:	d82d      	bhi.n	8006004 <UART_SetConfig+0x164>
 8005fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb0 <UART_SetConfig+0x110>)
 8005faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fae:	bf00      	nop
 8005fb0:	08005fe5 	.word	0x08005fe5
 8005fb4:	08006005 	.word	0x08006005
 8005fb8:	08006005 	.word	0x08006005
 8005fbc:	08006005 	.word	0x08006005
 8005fc0:	08005ff5 	.word	0x08005ff5
 8005fc4:	08006005 	.word	0x08006005
 8005fc8:	08006005 	.word	0x08006005
 8005fcc:	08006005 	.word	0x08006005
 8005fd0:	08005fed 	.word	0x08005fed
 8005fd4:	08006005 	.word	0x08006005
 8005fd8:	08006005 	.word	0x08006005
 8005fdc:	08006005 	.word	0x08006005
 8005fe0:	08005ffd 	.word	0x08005ffd
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fea:	e098      	b.n	800611e <UART_SetConfig+0x27e>
 8005fec:	2302      	movs	r3, #2
 8005fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ff2:	e094      	b.n	800611e <UART_SetConfig+0x27e>
 8005ff4:	2304      	movs	r3, #4
 8005ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ffa:	e090      	b.n	800611e <UART_SetConfig+0x27e>
 8005ffc:	2308      	movs	r3, #8
 8005ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006002:	e08c      	b.n	800611e <UART_SetConfig+0x27e>
 8006004:	2310      	movs	r3, #16
 8006006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800600a:	e088      	b.n	800611e <UART_SetConfig+0x27e>
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a5f      	ldr	r2, [pc, #380]	@ (8006190 <UART_SetConfig+0x2f0>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d125      	bne.n	8006062 <UART_SetConfig+0x1c2>
 8006016:	4b5c      	ldr	r3, [pc, #368]	@ (8006188 <UART_SetConfig+0x2e8>)
 8006018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800601c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006020:	2b30      	cmp	r3, #48	@ 0x30
 8006022:	d016      	beq.n	8006052 <UART_SetConfig+0x1b2>
 8006024:	2b30      	cmp	r3, #48	@ 0x30
 8006026:	d818      	bhi.n	800605a <UART_SetConfig+0x1ba>
 8006028:	2b20      	cmp	r3, #32
 800602a:	d00a      	beq.n	8006042 <UART_SetConfig+0x1a2>
 800602c:	2b20      	cmp	r3, #32
 800602e:	d814      	bhi.n	800605a <UART_SetConfig+0x1ba>
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <UART_SetConfig+0x19a>
 8006034:	2b10      	cmp	r3, #16
 8006036:	d008      	beq.n	800604a <UART_SetConfig+0x1aa>
 8006038:	e00f      	b.n	800605a <UART_SetConfig+0x1ba>
 800603a:	2300      	movs	r3, #0
 800603c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006040:	e06d      	b.n	800611e <UART_SetConfig+0x27e>
 8006042:	2302      	movs	r3, #2
 8006044:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006048:	e069      	b.n	800611e <UART_SetConfig+0x27e>
 800604a:	2304      	movs	r3, #4
 800604c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006050:	e065      	b.n	800611e <UART_SetConfig+0x27e>
 8006052:	2308      	movs	r3, #8
 8006054:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006058:	e061      	b.n	800611e <UART_SetConfig+0x27e>
 800605a:	2310      	movs	r3, #16
 800605c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006060:	e05d      	b.n	800611e <UART_SetConfig+0x27e>
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a4b      	ldr	r2, [pc, #300]	@ (8006194 <UART_SetConfig+0x2f4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d125      	bne.n	80060b8 <UART_SetConfig+0x218>
 800606c:	4b46      	ldr	r3, [pc, #280]	@ (8006188 <UART_SetConfig+0x2e8>)
 800606e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006072:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006076:	2bc0      	cmp	r3, #192	@ 0xc0
 8006078:	d016      	beq.n	80060a8 <UART_SetConfig+0x208>
 800607a:	2bc0      	cmp	r3, #192	@ 0xc0
 800607c:	d818      	bhi.n	80060b0 <UART_SetConfig+0x210>
 800607e:	2b80      	cmp	r3, #128	@ 0x80
 8006080:	d00a      	beq.n	8006098 <UART_SetConfig+0x1f8>
 8006082:	2b80      	cmp	r3, #128	@ 0x80
 8006084:	d814      	bhi.n	80060b0 <UART_SetConfig+0x210>
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <UART_SetConfig+0x1f0>
 800608a:	2b40      	cmp	r3, #64	@ 0x40
 800608c:	d008      	beq.n	80060a0 <UART_SetConfig+0x200>
 800608e:	e00f      	b.n	80060b0 <UART_SetConfig+0x210>
 8006090:	2300      	movs	r3, #0
 8006092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006096:	e042      	b.n	800611e <UART_SetConfig+0x27e>
 8006098:	2302      	movs	r3, #2
 800609a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800609e:	e03e      	b.n	800611e <UART_SetConfig+0x27e>
 80060a0:	2304      	movs	r3, #4
 80060a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060a6:	e03a      	b.n	800611e <UART_SetConfig+0x27e>
 80060a8:	2308      	movs	r3, #8
 80060aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ae:	e036      	b.n	800611e <UART_SetConfig+0x27e>
 80060b0:	2310      	movs	r3, #16
 80060b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060b6:	e032      	b.n	800611e <UART_SetConfig+0x27e>
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a30      	ldr	r2, [pc, #192]	@ (8006180 <UART_SetConfig+0x2e0>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d12a      	bne.n	8006118 <UART_SetConfig+0x278>
 80060c2:	4b31      	ldr	r3, [pc, #196]	@ (8006188 <UART_SetConfig+0x2e8>)
 80060c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80060cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060d0:	d01a      	beq.n	8006108 <UART_SetConfig+0x268>
 80060d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060d6:	d81b      	bhi.n	8006110 <UART_SetConfig+0x270>
 80060d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060dc:	d00c      	beq.n	80060f8 <UART_SetConfig+0x258>
 80060de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060e2:	d815      	bhi.n	8006110 <UART_SetConfig+0x270>
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <UART_SetConfig+0x250>
 80060e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060ec:	d008      	beq.n	8006100 <UART_SetConfig+0x260>
 80060ee:	e00f      	b.n	8006110 <UART_SetConfig+0x270>
 80060f0:	2300      	movs	r3, #0
 80060f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060f6:	e012      	b.n	800611e <UART_SetConfig+0x27e>
 80060f8:	2302      	movs	r3, #2
 80060fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060fe:	e00e      	b.n	800611e <UART_SetConfig+0x27e>
 8006100:	2304      	movs	r3, #4
 8006102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006106:	e00a      	b.n	800611e <UART_SetConfig+0x27e>
 8006108:	2308      	movs	r3, #8
 800610a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800610e:	e006      	b.n	800611e <UART_SetConfig+0x27e>
 8006110:	2310      	movs	r3, #16
 8006112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006116:	e002      	b.n	800611e <UART_SetConfig+0x27e>
 8006118:	2310      	movs	r3, #16
 800611a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a17      	ldr	r2, [pc, #92]	@ (8006180 <UART_SetConfig+0x2e0>)
 8006124:	4293      	cmp	r3, r2
 8006126:	f040 80a8 	bne.w	800627a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800612a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800612e:	2b08      	cmp	r3, #8
 8006130:	d834      	bhi.n	800619c <UART_SetConfig+0x2fc>
 8006132:	a201      	add	r2, pc, #4	@ (adr r2, 8006138 <UART_SetConfig+0x298>)
 8006134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006138:	0800615d 	.word	0x0800615d
 800613c:	0800619d 	.word	0x0800619d
 8006140:	08006165 	.word	0x08006165
 8006144:	0800619d 	.word	0x0800619d
 8006148:	0800616b 	.word	0x0800616b
 800614c:	0800619d 	.word	0x0800619d
 8006150:	0800619d 	.word	0x0800619d
 8006154:	0800619d 	.word	0x0800619d
 8006158:	08006173 	.word	0x08006173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800615c:	f7fd fbde 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 8006160:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006162:	e021      	b.n	80061a8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006164:	4b0c      	ldr	r3, [pc, #48]	@ (8006198 <UART_SetConfig+0x2f8>)
 8006166:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006168:	e01e      	b.n	80061a8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800616a:	f7fd fb6b 	bl	8003844 <HAL_RCC_GetSysClockFreq>
 800616e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006170:	e01a      	b.n	80061a8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006172:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006176:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006178:	e016      	b.n	80061a8 <UART_SetConfig+0x308>
 800617a:	bf00      	nop
 800617c:	cfff69f3 	.word	0xcfff69f3
 8006180:	40008000 	.word	0x40008000
 8006184:	40013800 	.word	0x40013800
 8006188:	40021000 	.word	0x40021000
 800618c:	40004400 	.word	0x40004400
 8006190:	40004800 	.word	0x40004800
 8006194:	40004c00 	.word	0x40004c00
 8006198:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80061a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f000 812a 	beq.w	8006404 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b4:	4a9e      	ldr	r2, [pc, #632]	@ (8006430 <UART_SetConfig+0x590>)
 80061b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061ba:	461a      	mov	r2, r3
 80061bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061be:	fbb3 f3f2 	udiv	r3, r3, r2
 80061c2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	4613      	mov	r3, r2
 80061ca:	005b      	lsls	r3, r3, #1
 80061cc:	4413      	add	r3, r2
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d305      	bcc.n	80061e0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d903      	bls.n	80061e8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80061e6:	e10d      	b.n	8006404 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ea:	2200      	movs	r2, #0
 80061ec:	60bb      	str	r3, [r7, #8]
 80061ee:	60fa      	str	r2, [r7, #12]
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f4:	4a8e      	ldr	r2, [pc, #568]	@ (8006430 <UART_SetConfig+0x590>)
 80061f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	2200      	movs	r2, #0
 80061fe:	603b      	str	r3, [r7, #0]
 8006200:	607a      	str	r2, [r7, #4]
 8006202:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006206:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800620a:	f7fa fd65 	bl	8000cd8 <__aeabi_uldivmod>
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	4610      	mov	r0, r2
 8006214:	4619      	mov	r1, r3
 8006216:	f04f 0200 	mov.w	r2, #0
 800621a:	f04f 0300 	mov.w	r3, #0
 800621e:	020b      	lsls	r3, r1, #8
 8006220:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006224:	0202      	lsls	r2, r0, #8
 8006226:	6979      	ldr	r1, [r7, #20]
 8006228:	6849      	ldr	r1, [r1, #4]
 800622a:	0849      	lsrs	r1, r1, #1
 800622c:	2000      	movs	r0, #0
 800622e:	460c      	mov	r4, r1
 8006230:	4605      	mov	r5, r0
 8006232:	eb12 0804 	adds.w	r8, r2, r4
 8006236:	eb43 0905 	adc.w	r9, r3, r5
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	469a      	mov	sl, r3
 8006242:	4693      	mov	fp, r2
 8006244:	4652      	mov	r2, sl
 8006246:	465b      	mov	r3, fp
 8006248:	4640      	mov	r0, r8
 800624a:	4649      	mov	r1, r9
 800624c:	f7fa fd44 	bl	8000cd8 <__aeabi_uldivmod>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4613      	mov	r3, r2
 8006256:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800625e:	d308      	bcc.n	8006272 <UART_SetConfig+0x3d2>
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006266:	d204      	bcs.n	8006272 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6a3a      	ldr	r2, [r7, #32]
 800626e:	60da      	str	r2, [r3, #12]
 8006270:	e0c8      	b.n	8006404 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006278:	e0c4      	b.n	8006404 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006282:	d167      	bne.n	8006354 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006284:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006288:	2b08      	cmp	r3, #8
 800628a:	d828      	bhi.n	80062de <UART_SetConfig+0x43e>
 800628c:	a201      	add	r2, pc, #4	@ (adr r2, 8006294 <UART_SetConfig+0x3f4>)
 800628e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006292:	bf00      	nop
 8006294:	080062b9 	.word	0x080062b9
 8006298:	080062c1 	.word	0x080062c1
 800629c:	080062c9 	.word	0x080062c9
 80062a0:	080062df 	.word	0x080062df
 80062a4:	080062cf 	.word	0x080062cf
 80062a8:	080062df 	.word	0x080062df
 80062ac:	080062df 	.word	0x080062df
 80062b0:	080062df 	.word	0x080062df
 80062b4:	080062d7 	.word	0x080062d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062b8:	f7fd fb30 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 80062bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062be:	e014      	b.n	80062ea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062c0:	f7fd fb42 	bl	8003948 <HAL_RCC_GetPCLK2Freq>
 80062c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062c6:	e010      	b.n	80062ea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062c8:	4b5a      	ldr	r3, [pc, #360]	@ (8006434 <UART_SetConfig+0x594>)
 80062ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062cc:	e00d      	b.n	80062ea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ce:	f7fd fab9 	bl	8003844 <HAL_RCC_GetSysClockFreq>
 80062d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062d4:	e009      	b.n	80062ea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062dc:	e005      	b.n	80062ea <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80062e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 8089 	beq.w	8006404 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f6:	4a4e      	ldr	r2, [pc, #312]	@ (8006430 <UART_SetConfig+0x590>)
 80062f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062fc:	461a      	mov	r2, r3
 80062fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006300:	fbb3 f3f2 	udiv	r3, r3, r2
 8006304:	005a      	lsls	r2, r3, #1
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	085b      	lsrs	r3, r3, #1
 800630c:	441a      	add	r2, r3
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	fbb2 f3f3 	udiv	r3, r2, r3
 8006316:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	2b0f      	cmp	r3, #15
 800631c:	d916      	bls.n	800634c <UART_SetConfig+0x4ac>
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006324:	d212      	bcs.n	800634c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	b29b      	uxth	r3, r3
 800632a:	f023 030f 	bic.w	r3, r3, #15
 800632e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	085b      	lsrs	r3, r3, #1
 8006334:	b29b      	uxth	r3, r3
 8006336:	f003 0307 	and.w	r3, r3, #7
 800633a:	b29a      	uxth	r2, r3
 800633c:	8bfb      	ldrh	r3, [r7, #30]
 800633e:	4313      	orrs	r3, r2
 8006340:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	8bfa      	ldrh	r2, [r7, #30]
 8006348:	60da      	str	r2, [r3, #12]
 800634a:	e05b      	b.n	8006404 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006352:	e057      	b.n	8006404 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006354:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006358:	2b08      	cmp	r3, #8
 800635a:	d828      	bhi.n	80063ae <UART_SetConfig+0x50e>
 800635c:	a201      	add	r2, pc, #4	@ (adr r2, 8006364 <UART_SetConfig+0x4c4>)
 800635e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006362:	bf00      	nop
 8006364:	08006389 	.word	0x08006389
 8006368:	08006391 	.word	0x08006391
 800636c:	08006399 	.word	0x08006399
 8006370:	080063af 	.word	0x080063af
 8006374:	0800639f 	.word	0x0800639f
 8006378:	080063af 	.word	0x080063af
 800637c:	080063af 	.word	0x080063af
 8006380:	080063af 	.word	0x080063af
 8006384:	080063a7 	.word	0x080063a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006388:	f7fd fac8 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 800638c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800638e:	e014      	b.n	80063ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006390:	f7fd fada 	bl	8003948 <HAL_RCC_GetPCLK2Freq>
 8006394:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006396:	e010      	b.n	80063ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006398:	4b26      	ldr	r3, [pc, #152]	@ (8006434 <UART_SetConfig+0x594>)
 800639a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800639c:	e00d      	b.n	80063ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800639e:	f7fd fa51 	bl	8003844 <HAL_RCC_GetSysClockFreq>
 80063a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063a4:	e009      	b.n	80063ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80063ac:	e005      	b.n	80063ba <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80063ae:	2300      	movs	r3, #0
 80063b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80063b8:	bf00      	nop
    }

    if (pclk != 0U)
 80063ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d021      	beq.n	8006404 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006430 <UART_SetConfig+0x590>)
 80063c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063ca:	461a      	mov	r2, r3
 80063cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	085b      	lsrs	r3, r3, #1
 80063d8:	441a      	add	r2, r3
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	2b0f      	cmp	r3, #15
 80063e8:	d909      	bls.n	80063fe <UART_SetConfig+0x55e>
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063f0:	d205      	bcs.n	80063fe <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	60da      	str	r2, [r3, #12]
 80063fc:	e002      	b.n	8006404 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	2201      	movs	r2, #1
 8006408:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	2201      	movs	r2, #1
 8006410:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	2200      	movs	r2, #0
 8006418:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2200      	movs	r2, #0
 800641e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006420:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006424:	4618      	mov	r0, r3
 8006426:	3730      	adds	r7, #48	@ 0x30
 8006428:	46bd      	mov	sp, r7
 800642a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800642e:	bf00      	nop
 8006430:	0800d23c 	.word	0x0800d23c
 8006434:	00f42400 	.word	0x00f42400

08006438 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006444:	f003 0308 	and.w	r3, r3, #8
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00a      	beq.n	80064a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064aa:	f003 0304 	and.w	r3, r3, #4
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064cc:	f003 0310 	and.w	r3, r3, #16
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00a      	beq.n	80064ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ee:	f003 0320 	and.w	r3, r3, #32
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	430a      	orrs	r2, r1
 800650a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01a      	beq.n	800654e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006532:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006536:	d10a      	bne.n	800654e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	605a      	str	r2, [r3, #4]
  }
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b098      	sub	sp, #96	@ 0x60
 8006580:	af02      	add	r7, sp, #8
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800658c:	f7fb fef6 	bl	800237c <HAL_GetTick>
 8006590:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0308 	and.w	r3, r3, #8
 800659c:	2b08      	cmp	r3, #8
 800659e:	d12f      	bne.n	8006600 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065a8:	2200      	movs	r2, #0
 80065aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f88e 	bl	80066d0 <UART_WaitOnFlagUntilTimeout>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d022      	beq.n	8006600 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c2:	e853 3f00 	ldrex	r3, [r3]
 80065c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80065c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	461a      	mov	r2, r3
 80065d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80065da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065e0:	e841 2300 	strex	r3, r2, [r1]
 80065e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1e6      	bne.n	80065ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e063      	b.n	80066c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0304 	and.w	r3, r3, #4
 800660a:	2b04      	cmp	r3, #4
 800660c:	d149      	bne.n	80066a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800660e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006616:	2200      	movs	r2, #0
 8006618:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f857 	bl	80066d0 <UART_WaitOnFlagUntilTimeout>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d03c      	beq.n	80066a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006630:	e853 3f00 	ldrex	r3, [r3]
 8006634:	623b      	str	r3, [r7, #32]
   return(result);
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800663c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	461a      	mov	r2, r3
 8006644:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006646:	633b      	str	r3, [r7, #48]	@ 0x30
 8006648:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800664c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800664e:	e841 2300 	strex	r3, r2, [r1]
 8006652:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1e6      	bne.n	8006628 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3308      	adds	r3, #8
 8006660:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	60fb      	str	r3, [r7, #12]
   return(result);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f023 0301 	bic.w	r3, r3, #1
 8006670:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	3308      	adds	r3, #8
 8006678:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800667a:	61fa      	str	r2, [r7, #28]
 800667c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	69b9      	ldr	r1, [r7, #24]
 8006680:	69fa      	ldr	r2, [r7, #28]
 8006682:	e841 2300 	strex	r3, r2, [r1]
 8006686:	617b      	str	r3, [r7, #20]
   return(result);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1e5      	bne.n	800665a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2220      	movs	r2, #32
 8006692:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e012      	b.n	80066c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2220      	movs	r2, #32
 80066ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3758      	adds	r7, #88	@ 0x58
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	603b      	str	r3, [r7, #0]
 80066dc:	4613      	mov	r3, r2
 80066de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066e0:	e04f      	b.n	8006782 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e8:	d04b      	beq.n	8006782 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ea:	f7fb fe47 	bl	800237c <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d302      	bcc.n	8006700 <UART_WaitOnFlagUntilTimeout+0x30>
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e04e      	b.n	80067a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0304 	and.w	r3, r3, #4
 800670e:	2b00      	cmp	r3, #0
 8006710:	d037      	beq.n	8006782 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	2b80      	cmp	r3, #128	@ 0x80
 8006716:	d034      	beq.n	8006782 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2b40      	cmp	r3, #64	@ 0x40
 800671c:	d031      	beq.n	8006782 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	f003 0308 	and.w	r3, r3, #8
 8006728:	2b08      	cmp	r3, #8
 800672a:	d110      	bne.n	800674e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2208      	movs	r2, #8
 8006732:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f920 	bl	800697a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2208      	movs	r2, #8
 800673e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e029      	b.n	80067a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69db      	ldr	r3, [r3, #28]
 8006754:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006758:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800675c:	d111      	bne.n	8006782 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006766:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 f906 	bl	800697a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2220      	movs	r2, #32
 8006772:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e00f      	b.n	80067a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	69da      	ldr	r2, [r3, #28]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	4013      	ands	r3, r2
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	429a      	cmp	r2, r3
 8006790:	bf0c      	ite	eq
 8006792:	2301      	moveq	r3, #1
 8006794:	2300      	movne	r3, #0
 8006796:	b2db      	uxtb	r3, r3
 8006798:	461a      	mov	r2, r3
 800679a:	79fb      	ldrb	r3, [r7, #7]
 800679c:	429a      	cmp	r2, r3
 800679e:	d0a0      	beq.n	80066e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
	...

080067ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b096      	sub	sp, #88	@ 0x58
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	4613      	mov	r3, r2
 80067b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	88fa      	ldrh	r2, [r7, #6]
 80067c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2222      	movs	r2, #34	@ 0x22
 80067d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d02d      	beq.n	800683e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067e8:	4a40      	ldr	r2, [pc, #256]	@ (80068ec <UART_Start_Receive_DMA+0x140>)
 80067ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067f2:	4a3f      	ldr	r2, [pc, #252]	@ (80068f0 <UART_Start_Receive_DMA+0x144>)
 80067f4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067fc:	4a3d      	ldr	r2, [pc, #244]	@ (80068f4 <UART_Start_Receive_DMA+0x148>)
 80067fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006806:	2200      	movs	r2, #0
 8006808:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3324      	adds	r3, #36	@ 0x24
 8006816:	4619      	mov	r1, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800681c:	461a      	mov	r2, r3
 800681e:	88fb      	ldrh	r3, [r7, #6]
 8006820:	f7fb ff92 	bl	8002748 <HAL_DMA_Start_IT>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d009      	beq.n	800683e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2210      	movs	r2, #16
 800682e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2220      	movs	r2, #32
 8006836:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e051      	b.n	80068e2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d018      	beq.n	8006878 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800684e:	e853 3f00 	ldrex	r3, [r3]
 8006852:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006856:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800685a:	657b      	str	r3, [r7, #84]	@ 0x54
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	461a      	mov	r2, r3
 8006862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006864:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006866:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006868:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800686a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800686c:	e841 2300 	strex	r3, r2, [r1]
 8006870:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1e6      	bne.n	8006846 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3308      	adds	r3, #8
 800687e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006882:	e853 3f00 	ldrex	r3, [r3]
 8006886:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688a:	f043 0301 	orr.w	r3, r3, #1
 800688e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3308      	adds	r3, #8
 8006896:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006898:	637a      	str	r2, [r7, #52]	@ 0x34
 800689a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800689e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80068a0:	e841 2300 	strex	r3, r2, [r1]
 80068a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80068a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1e5      	bne.n	8006878 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3308      	adds	r3, #8
 80068b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	e853 3f00 	ldrex	r3, [r3]
 80068ba:	613b      	str	r3, [r7, #16]
   return(result);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3308      	adds	r3, #8
 80068ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068cc:	623a      	str	r2, [r7, #32]
 80068ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d0:	69f9      	ldr	r1, [r7, #28]
 80068d2:	6a3a      	ldr	r2, [r7, #32]
 80068d4:	e841 2300 	strex	r3, r2, [r1]
 80068d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1e5      	bne.n	80068ac <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3758      	adds	r7, #88	@ 0x58
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	08006a47 	.word	0x08006a47
 80068f0:	08006b73 	.word	0x08006b73
 80068f4:	08006bb1 	.word	0x08006bb1

080068f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b08f      	sub	sp, #60	@ 0x3c
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	e853 3f00 	ldrex	r3, [r3]
 800690c:	61fb      	str	r3, [r7, #28]
   return(result);
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006914:	637b      	str	r3, [r7, #52]	@ 0x34
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	461a      	mov	r2, r3
 800691c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800691e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006920:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006924:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800692c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e6      	bne.n	8006900 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3308      	adds	r3, #8
 8006938:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	e853 3f00 	ldrex	r3, [r3]
 8006940:	60bb      	str	r3, [r7, #8]
   return(result);
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006948:	633b      	str	r3, [r7, #48]	@ 0x30
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	3308      	adds	r3, #8
 8006950:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006952:	61ba      	str	r2, [r7, #24]
 8006954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006956:	6979      	ldr	r1, [r7, #20]
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	613b      	str	r3, [r7, #16]
   return(result);
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e5      	bne.n	8006932 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2220      	movs	r2, #32
 800696a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800696e:	bf00      	nop
 8006970:	373c      	adds	r7, #60	@ 0x3c
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800697a:	b480      	push	{r7}
 800697c:	b095      	sub	sp, #84	@ 0x54
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800698a:	e853 3f00 	ldrex	r3, [r3]
 800698e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006992:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006996:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	461a      	mov	r2, r3
 800699e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80069a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069a8:	e841 2300 	strex	r3, r2, [r1]
 80069ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1e6      	bne.n	8006982 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3308      	adds	r3, #8
 80069ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	e853 3f00 	ldrex	r3, [r3]
 80069c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069ca:	f023 0301 	bic.w	r3, r3, #1
 80069ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	3308      	adds	r3, #8
 80069d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069e0:	e841 2300 	strex	r3, r2, [r1]
 80069e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1e3      	bne.n	80069b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d118      	bne.n	8006a26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	f023 0310 	bic.w	r3, r3, #16
 8006a08:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a12:	61bb      	str	r3, [r7, #24]
 8006a14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a16:	6979      	ldr	r1, [r7, #20]
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e6      	bne.n	80069f4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006a3a:	bf00      	nop
 8006a3c:	3754      	adds	r7, #84	@ 0x54
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b09c      	sub	sp, #112	@ 0x70
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a52:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0320 	and.w	r3, r3, #32
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d171      	bne.n	8006b46 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006a62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a64:	2200      	movs	r2, #0
 8006a66:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a72:	e853 3f00 	ldrex	r3, [r3]
 8006a76:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a7e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	461a      	mov	r2, r3
 8006a86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a8a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a90:	e841 2300 	strex	r3, r2, [r1]
 8006a94:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1e6      	bne.n	8006a6a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa6:	e853 3f00 	ldrex	r3, [r3]
 8006aaa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aae:	f023 0301 	bic.w	r3, r3, #1
 8006ab2:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ab4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	3308      	adds	r3, #8
 8006aba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006abc:	647a      	str	r2, [r7, #68]	@ 0x44
 8006abe:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ac2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ac4:	e841 2300 	strex	r3, r2, [r1]
 8006ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1e5      	bne.n	8006a9c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ad0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3308      	adds	r3, #8
 8006ad6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ada:	e853 3f00 	ldrex	r3, [r3]
 8006ade:	623b      	str	r3, [r7, #32]
   return(result);
 8006ae0:	6a3b      	ldr	r3, [r7, #32]
 8006ae2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ae6:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ae8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3308      	adds	r3, #8
 8006aee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006af0:	633a      	str	r2, [r7, #48]	@ 0x30
 8006af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006af6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006af8:	e841 2300 	strex	r3, r2, [r1]
 8006afc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1e5      	bne.n	8006ad0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b06:	2220      	movs	r2, #32
 8006b08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d118      	bne.n	8006b46 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f023 0310 	bic.w	r3, r3, #16
 8006b28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b32:	61fb      	str	r3, [r7, #28]
 8006b34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	69b9      	ldr	r1, [r7, #24]
 8006b38:	69fa      	ldr	r2, [r7, #28]
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	617b      	str	r3, [r7, #20]
   return(result);
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1e6      	bne.n	8006b14 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b48:	2200      	movs	r2, #0
 8006b4a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d107      	bne.n	8006b64 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006b5e:	f7ff f993 	bl	8005e88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b62:	e002      	b.n	8006b6a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006b64:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006b66:	f7ff f971 	bl	8005e4c <HAL_UART_RxCpltCallback>
}
 8006b6a:	bf00      	nop
 8006b6c:	3770      	adds	r7, #112	@ 0x70
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b084      	sub	sp, #16
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2201      	movs	r2, #1
 8006b84:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d109      	bne.n	8006ba2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b94:	085b      	lsrs	r3, r3, #1
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	4619      	mov	r1, r3
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f7ff f974 	bl	8005e88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ba0:	e002      	b.n	8006ba8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f7ff f95c 	bl	8005e60 <HAL_UART_RxHalfCpltCallback>
}
 8006ba8:	bf00      	nop
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bbc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bc4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bcc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bd8:	2b80      	cmp	r3, #128	@ 0x80
 8006bda:	d109      	bne.n	8006bf0 <UART_DMAError+0x40>
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	2b21      	cmp	r3, #33	@ 0x21
 8006be0:	d106      	bne.n	8006bf0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006bea:	6978      	ldr	r0, [r7, #20]
 8006bec:	f7ff fe84 	bl	80068f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bfa:	2b40      	cmp	r3, #64	@ 0x40
 8006bfc:	d109      	bne.n	8006c12 <UART_DMAError+0x62>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2b22      	cmp	r3, #34	@ 0x22
 8006c02:	d106      	bne.n	8006c12 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006c0c:	6978      	ldr	r0, [r7, #20]
 8006c0e:	f7ff feb4 	bl	800697a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c18:	f043 0210 	orr.w	r2, r3, #16
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c22:	6978      	ldr	r0, [r7, #20]
 8006c24:	f7ff f926 	bl	8005e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c28:	bf00      	nop
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d101      	bne.n	8006c46 <HAL_UARTEx_DisableFifoMode+0x16>
 8006c42:	2302      	movs	r3, #2
 8006c44:	e027      	b.n	8006c96 <HAL_UARTEx_DisableFifoMode+0x66>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2224      	movs	r2, #36	@ 0x24
 8006c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f022 0201 	bic.w	r2, r2, #1
 8006c6c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006c74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d101      	bne.n	8006cba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	e02d      	b.n	8006d16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2224      	movs	r2, #36	@ 0x24
 8006cc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0201 	bic.w	r2, r2, #1
 8006ce0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f850 	bl	8006d9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2220      	movs	r2, #32
 8006d08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d101      	bne.n	8006d36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d32:	2302      	movs	r3, #2
 8006d34:	e02d      	b.n	8006d92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2224      	movs	r2, #36	@ 0x24
 8006d42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f022 0201 	bic.w	r2, r2, #1
 8006d5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f812 	bl	8006d9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2220      	movs	r2, #32
 8006d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
	...

08006d9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d108      	bne.n	8006dbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006dbc:	e031      	b.n	8006e22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006dbe:	2308      	movs	r3, #8
 8006dc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	0e5b      	lsrs	r3, r3, #25
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	f003 0307 	and.w	r3, r3, #7
 8006dd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	0f5b      	lsrs	r3, r3, #29
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	f003 0307 	and.w	r3, r3, #7
 8006de4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006de6:	7bbb      	ldrb	r3, [r7, #14]
 8006de8:	7b3a      	ldrb	r2, [r7, #12]
 8006dea:	4911      	ldr	r1, [pc, #68]	@ (8006e30 <UARTEx_SetNbDataToProcess+0x94>)
 8006dec:	5c8a      	ldrb	r2, [r1, r2]
 8006dee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006df2:	7b3a      	ldrb	r2, [r7, #12]
 8006df4:	490f      	ldr	r1, [pc, #60]	@ (8006e34 <UARTEx_SetNbDataToProcess+0x98>)
 8006df6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006df8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
 8006e06:	7b7a      	ldrb	r2, [r7, #13]
 8006e08:	4909      	ldr	r1, [pc, #36]	@ (8006e30 <UARTEx_SetNbDataToProcess+0x94>)
 8006e0a:	5c8a      	ldrb	r2, [r1, r2]
 8006e0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e10:	7b7a      	ldrb	r2, [r7, #13]
 8006e12:	4908      	ldr	r1, [pc, #32]	@ (8006e34 <UARTEx_SetNbDataToProcess+0x98>)
 8006e14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e16:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006e22:	bf00      	nop
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	0800d254 	.word	0x0800d254
 8006e34:	0800d25c 	.word	0x0800d25c

08006e38 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	4603      	mov	r3, r0
 8006e40:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006e42:	2300      	movs	r3, #0
 8006e44:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e4a:	2b84      	cmp	r3, #132	@ 0x84
 8006e4c:	d005      	beq.n	8006e5a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006e4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	4413      	add	r3, r2
 8006e56:	3303      	adds	r3, #3
 8006e58:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3714      	adds	r7, #20
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006e6c:	f000 fb1c 	bl	80074a8 <vTaskStartScheduler>
  
  return osOK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006e76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e78:	b087      	sub	sp, #28
 8006e7a:	af02      	add	r7, sp, #8
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685c      	ldr	r4, [r3, #4]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e8c:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7ff ffcf 	bl	8006e38 <makeFreeRtosPriority>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	f107 030c 	add.w	r3, r7, #12
 8006ea0:	9301      	str	r3, [sp, #4]
 8006ea2:	9200      	str	r2, [sp, #0]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	4632      	mov	r2, r6
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f000 f992 	bl	80071d4 <xTaskCreate>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d001      	beq.n	8006eba <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	e000      	b.n	8006ebc <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8006eba:	68fb      	ldr	r3, [r7, #12]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3714      	adds	r7, #20
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ec4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <osDelay+0x16>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	e000      	b.n	8006edc <osDelay+0x18>
 8006eda:	2301      	movs	r3, #1
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 faad 	bl	800743c <vTaskDelay>
  
  return osOK;
 8006ee2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f103 0208 	add.w	r2, r3, #8
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f04f 32ff 	mov.w	r2, #4294967295
 8006f04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f103 0208 	add.w	r2, r3, #8
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f103 0208 	add.w	r2, r3, #8
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f3a:	bf00      	nop
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f46:	b480      	push	{r7}
 8006f48:	b085      	sub	sp, #20
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	1c5a      	adds	r2, r3, #1
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	601a      	str	r2, [r3, #0]
}
 8006f82:	bf00      	nop
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b085      	sub	sp, #20
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
 8006f96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa4:	d103      	bne.n	8006fae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	e00c      	b.n	8006fc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	3308      	adds	r3, #8
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	e002      	b.n	8006fbc <vListInsert+0x2e>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d2f6      	bcs.n	8006fb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	683a      	ldr	r2, [r7, #0]
 8006fd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	1c5a      	adds	r2, r3, #1
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	601a      	str	r2, [r3, #0]
}
 8006ff4:	bf00      	nop
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	6892      	ldr	r2, [r2, #8]
 8007016:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	6852      	ldr	r2, [r2, #4]
 8007020:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	429a      	cmp	r2, r3
 800702a:	d103      	bne.n	8007034 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	1e5a      	subs	r2, r3, #1
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3714      	adds	r7, #20
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10b      	bne.n	8007080 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800706c:	f383 8811 	msr	BASEPRI, r3
 8007070:	f3bf 8f6f 	isb	sy
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800707a:	bf00      	nop
 800707c:	bf00      	nop
 800707e:	e7fd      	b.n	800707c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007080:	f000 ffca 	bl	8008018 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800708c:	68f9      	ldr	r1, [r7, #12]
 800708e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007090:	fb01 f303 	mul.w	r3, r1, r3
 8007094:	441a      	add	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b0:	3b01      	subs	r3, #1
 80070b2:	68f9      	ldr	r1, [r7, #12]
 80070b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80070b6:	fb01 f303 	mul.w	r3, r1, r3
 80070ba:	441a      	add	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	22ff      	movs	r2, #255	@ 0xff
 80070c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	22ff      	movs	r2, #255	@ 0xff
 80070cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d114      	bne.n	8007100 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d01a      	beq.n	8007114 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	3310      	adds	r3, #16
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 fbea 	bl	80078bc <xTaskRemoveFromEventList>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d012      	beq.n	8007114 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80070ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007124 <xQueueGenericReset+0xd0>)
 80070f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070f4:	601a      	str	r2, [r3, #0]
 80070f6:	f3bf 8f4f 	dsb	sy
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	e009      	b.n	8007114 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3310      	adds	r3, #16
 8007104:	4618      	mov	r0, r3
 8007106:	f7ff fef1 	bl	8006eec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3324      	adds	r3, #36	@ 0x24
 800710e:	4618      	mov	r0, r3
 8007110:	f7ff feec 	bl	8006eec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007114:	f000 ffb2 	bl	800807c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007118:	2301      	movs	r3, #1
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	e000ed04 	.word	0xe000ed04

08007128 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007128:	b580      	push	{r7, lr}
 800712a:	b08a      	sub	sp, #40	@ 0x28
 800712c:	af02      	add	r7, sp, #8
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	4613      	mov	r3, r2
 8007134:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10b      	bne.n	8007154 <xQueueGenericCreate+0x2c>
	__asm volatile
 800713c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007140:	f383 8811 	msr	BASEPRI, r3
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	613b      	str	r3, [r7, #16]
}
 800714e:	bf00      	nop
 8007150:	bf00      	nop
 8007152:	e7fd      	b.n	8007150 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	fb02 f303 	mul.w	r3, r2, r3
 800715c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	3348      	adds	r3, #72	@ 0x48
 8007162:	4618      	mov	r0, r3
 8007164:	f001 f87a 	bl	800825c <pvPortMalloc>
 8007168:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00d      	beq.n	800718c <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	3348      	adds	r3, #72	@ 0x48
 8007178:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800717a:	79fa      	ldrb	r2, [r7, #7]
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	4613      	mov	r3, r2
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	68b9      	ldr	r1, [r7, #8]
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 f805 	bl	8007196 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800718c:	69bb      	ldr	r3, [r7, #24]
	}
 800718e:	4618      	mov	r0, r3
 8007190:	3720      	adds	r7, #32
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b084      	sub	sp, #16
 800719a:	af00      	add	r7, sp, #0
 800719c:	60f8      	str	r0, [r7, #12]
 800719e:	60b9      	str	r1, [r7, #8]
 80071a0:	607a      	str	r2, [r7, #4]
 80071a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d103      	bne.n	80071b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	69ba      	ldr	r2, [r7, #24]
 80071ae:	601a      	str	r2, [r3, #0]
 80071b0:	e002      	b.n	80071b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80071c4:	2101      	movs	r1, #1
 80071c6:	69b8      	ldr	r0, [r7, #24]
 80071c8:	f7ff ff44 	bl	8007054 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80071cc:	bf00      	nop
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b08c      	sub	sp, #48	@ 0x30
 80071d8:	af04      	add	r7, sp, #16
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	603b      	str	r3, [r7, #0]
 80071e0:	4613      	mov	r3, r2
 80071e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071e4:	88fb      	ldrh	r3, [r7, #6]
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4618      	mov	r0, r3
 80071ea:	f001 f837 	bl	800825c <pvPortMalloc>
 80071ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00e      	beq.n	8007214 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80071f6:	2054      	movs	r0, #84	@ 0x54
 80071f8:	f001 f830 	bl	800825c <pvPortMalloc>
 80071fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d003      	beq.n	800720c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	631a      	str	r2, [r3, #48]	@ 0x30
 800720a:	e005      	b.n	8007218 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800720c:	6978      	ldr	r0, [r7, #20]
 800720e:	f001 f8f3 	bl	80083f8 <vPortFree>
 8007212:	e001      	b.n	8007218 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007214:	2300      	movs	r3, #0
 8007216:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d013      	beq.n	8007246 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800721e:	88fa      	ldrh	r2, [r7, #6]
 8007220:	2300      	movs	r3, #0
 8007222:	9303      	str	r3, [sp, #12]
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	9302      	str	r3, [sp, #8]
 8007228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800722a:	9301      	str	r3, [sp, #4]
 800722c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	68b9      	ldr	r1, [r7, #8]
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f000 f80e 	bl	8007256 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800723a:	69f8      	ldr	r0, [r7, #28]
 800723c:	f000 f894 	bl	8007368 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007240:	2301      	movs	r3, #1
 8007242:	61bb      	str	r3, [r7, #24]
 8007244:	e002      	b.n	800724c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007246:	f04f 33ff 	mov.w	r3, #4294967295
 800724a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800724c:	69bb      	ldr	r3, [r7, #24]
	}
 800724e:	4618      	mov	r0, r3
 8007250:	3720      	adds	r7, #32
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b088      	sub	sp, #32
 800725a:	af00      	add	r7, sp, #0
 800725c:	60f8      	str	r0, [r7, #12]
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	607a      	str	r2, [r7, #4]
 8007262:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007266:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800726e:	3b01      	subs	r3, #1
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	f023 0307 	bic.w	r3, r3, #7
 800727c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	f003 0307 	and.w	r3, r3, #7
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00b      	beq.n	80072a0 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	617b      	str	r3, [r7, #20]
}
 800729a:	bf00      	nop
 800729c:	bf00      	nop
 800729e:	e7fd      	b.n	800729c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d01f      	beq.n	80072e6 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072a6:	2300      	movs	r3, #0
 80072a8:	61fb      	str	r3, [r7, #28]
 80072aa:	e012      	b.n	80072d2 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	4413      	add	r3, r2
 80072b2:	7819      	ldrb	r1, [r3, #0]
 80072b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	4413      	add	r3, r2
 80072ba:	3334      	adds	r3, #52	@ 0x34
 80072bc:	460a      	mov	r2, r1
 80072be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	4413      	add	r3, r2
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d006      	beq.n	80072da <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	3301      	adds	r3, #1
 80072d0:	61fb      	str	r3, [r7, #28]
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	2b0f      	cmp	r3, #15
 80072d6:	d9e9      	bls.n	80072ac <prvInitialiseNewTask+0x56>
 80072d8:	e000      	b.n	80072dc <prvInitialiseNewTask+0x86>
			{
				break;
 80072da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072e4:	e003      	b.n	80072ee <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80072e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f0:	2b06      	cmp	r3, #6
 80072f2:	d901      	bls.n	80072f8 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80072f4:	2306      	movs	r3, #6
 80072f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80072f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072fc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80072fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007300:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007302:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007306:	2200      	movs	r2, #0
 8007308:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800730a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730c:	3304      	adds	r3, #4
 800730e:	4618      	mov	r0, r3
 8007310:	f7ff fe0c 	bl	8006f2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007316:	3318      	adds	r3, #24
 8007318:	4618      	mov	r0, r3
 800731a:	f7ff fe07 	bl	8006f2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800731e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007320:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007322:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007326:	f1c3 0207 	rsb	r2, r3, #7
 800732a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800732e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007330:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007332:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007336:	2200      	movs	r2, #0
 8007338:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800733a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007342:	683a      	ldr	r2, [r7, #0]
 8007344:	68f9      	ldr	r1, [r7, #12]
 8007346:	69b8      	ldr	r0, [r7, #24]
 8007348:	f000 fd32 	bl	8007db0 <pxPortInitialiseStack>
 800734c:	4602      	mov	r2, r0
 800734e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007350:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800735a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800735c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800735e:	bf00      	nop
 8007360:	3720      	adds	r7, #32
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007370:	f000 fe52 	bl	8008018 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007374:	4b2a      	ldr	r3, [pc, #168]	@ (8007420 <prvAddNewTaskToReadyList+0xb8>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3301      	adds	r3, #1
 800737a:	4a29      	ldr	r2, [pc, #164]	@ (8007420 <prvAddNewTaskToReadyList+0xb8>)
 800737c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800737e:	4b29      	ldr	r3, [pc, #164]	@ (8007424 <prvAddNewTaskToReadyList+0xbc>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d109      	bne.n	800739a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007386:	4a27      	ldr	r2, [pc, #156]	@ (8007424 <prvAddNewTaskToReadyList+0xbc>)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800738c:	4b24      	ldr	r3, [pc, #144]	@ (8007420 <prvAddNewTaskToReadyList+0xb8>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d110      	bne.n	80073b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007394:	f000 fb0e 	bl	80079b4 <prvInitialiseTaskLists>
 8007398:	e00d      	b.n	80073b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800739a:	4b23      	ldr	r3, [pc, #140]	@ (8007428 <prvAddNewTaskToReadyList+0xc0>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d109      	bne.n	80073b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80073a2:	4b20      	ldr	r3, [pc, #128]	@ (8007424 <prvAddNewTaskToReadyList+0xbc>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d802      	bhi.n	80073b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80073b0:	4a1c      	ldr	r2, [pc, #112]	@ (8007424 <prvAddNewTaskToReadyList+0xbc>)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80073b6:	4b1d      	ldr	r3, [pc, #116]	@ (800742c <prvAddNewTaskToReadyList+0xc4>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3301      	adds	r3, #1
 80073bc:	4a1b      	ldr	r2, [pc, #108]	@ (800742c <prvAddNewTaskToReadyList+0xc4>)
 80073be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c4:	2201      	movs	r2, #1
 80073c6:	409a      	lsls	r2, r3
 80073c8:	4b19      	ldr	r3, [pc, #100]	@ (8007430 <prvAddNewTaskToReadyList+0xc8>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	4a18      	ldr	r2, [pc, #96]	@ (8007430 <prvAddNewTaskToReadyList+0xc8>)
 80073d0:	6013      	str	r3, [r2, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073d6:	4613      	mov	r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4413      	add	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4a15      	ldr	r2, [pc, #84]	@ (8007434 <prvAddNewTaskToReadyList+0xcc>)
 80073e0:	441a      	add	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	3304      	adds	r3, #4
 80073e6:	4619      	mov	r1, r3
 80073e8:	4610      	mov	r0, r2
 80073ea:	f7ff fdac 	bl	8006f46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073ee:	f000 fe45 	bl	800807c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007428 <prvAddNewTaskToReadyList+0xc0>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00e      	beq.n	8007418 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007424 <prvAddNewTaskToReadyList+0xbc>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007404:	429a      	cmp	r2, r3
 8007406:	d207      	bcs.n	8007418 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007408:	4b0b      	ldr	r3, [pc, #44]	@ (8007438 <prvAddNewTaskToReadyList+0xd0>)
 800740a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007418:	bf00      	nop
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	20001904 	.word	0x20001904
 8007424:	20001804 	.word	0x20001804
 8007428:	20001910 	.word	0x20001910
 800742c:	20001920 	.word	0x20001920
 8007430:	2000190c 	.word	0x2000190c
 8007434:	20001808 	.word	0x20001808
 8007438:	e000ed04 	.word	0xe000ed04

0800743c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007444:	2300      	movs	r3, #0
 8007446:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d018      	beq.n	8007480 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800744e:	4b14      	ldr	r3, [pc, #80]	@ (80074a0 <vTaskDelay+0x64>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00b      	beq.n	800746e <vTaskDelay+0x32>
	__asm volatile
 8007456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	60bb      	str	r3, [r7, #8]
}
 8007468:	bf00      	nop
 800746a:	bf00      	nop
 800746c:	e7fd      	b.n	800746a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800746e:	f000 f863 	bl	8007538 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007472:	2100      	movs	r1, #0
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fc35 	bl	8007ce4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800747a:	f000 f86b 	bl	8007554 <xTaskResumeAll>
 800747e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d107      	bne.n	8007496 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007486:	4b07      	ldr	r3, [pc, #28]	@ (80074a4 <vTaskDelay+0x68>)
 8007488:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007496:	bf00      	nop
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	2000192c 	.word	0x2000192c
 80074a4:	e000ed04 	.word	0xe000ed04

080074a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80074ae:	4b1c      	ldr	r3, [pc, #112]	@ (8007520 <vTaskStartScheduler+0x78>)
 80074b0:	9301      	str	r3, [sp, #4]
 80074b2:	2300      	movs	r3, #0
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	2300      	movs	r3, #0
 80074b8:	2280      	movs	r2, #128	@ 0x80
 80074ba:	491a      	ldr	r1, [pc, #104]	@ (8007524 <vTaskStartScheduler+0x7c>)
 80074bc:	481a      	ldr	r0, [pc, #104]	@ (8007528 <vTaskStartScheduler+0x80>)
 80074be:	f7ff fe89 	bl	80071d4 <xTaskCreate>
 80074c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d116      	bne.n	80074f8 <vTaskStartScheduler+0x50>
	__asm volatile
 80074ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	60bb      	str	r3, [r7, #8]
}
 80074dc:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80074de:	4b13      	ldr	r3, [pc, #76]	@ (800752c <vTaskStartScheduler+0x84>)
 80074e0:	f04f 32ff 	mov.w	r2, #4294967295
 80074e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80074e6:	4b12      	ldr	r3, [pc, #72]	@ (8007530 <vTaskStartScheduler+0x88>)
 80074e8:	2201      	movs	r2, #1
 80074ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80074ec:	4b11      	ldr	r3, [pc, #68]	@ (8007534 <vTaskStartScheduler+0x8c>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80074f2:	f000 fced 	bl	8007ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80074f6:	e00f      	b.n	8007518 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fe:	d10b      	bne.n	8007518 <vTaskStartScheduler+0x70>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	607b      	str	r3, [r7, #4]
}
 8007512:	bf00      	nop
 8007514:	bf00      	nop
 8007516:	e7fd      	b.n	8007514 <vTaskStartScheduler+0x6c>
}
 8007518:	bf00      	nop
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	20001928 	.word	0x20001928
 8007524:	0800d1d4 	.word	0x0800d1d4
 8007528:	08007985 	.word	0x08007985
 800752c:	20001924 	.word	0x20001924
 8007530:	20001910 	.word	0x20001910
 8007534:	20001908 	.word	0x20001908

08007538 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007538:	b480      	push	{r7}
 800753a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800753c:	4b04      	ldr	r3, [pc, #16]	@ (8007550 <vTaskSuspendAll+0x18>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3301      	adds	r3, #1
 8007542:	4a03      	ldr	r2, [pc, #12]	@ (8007550 <vTaskSuspendAll+0x18>)
 8007544:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007546:	bf00      	nop
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	2000192c 	.word	0x2000192c

08007554 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800755a:	2300      	movs	r3, #0
 800755c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800755e:	2300      	movs	r3, #0
 8007560:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007562:	4b42      	ldr	r3, [pc, #264]	@ (800766c <xTaskResumeAll+0x118>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10b      	bne.n	8007582 <xTaskResumeAll+0x2e>
	__asm volatile
 800756a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800756e:	f383 8811 	msr	BASEPRI, r3
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	603b      	str	r3, [r7, #0]
}
 800757c:	bf00      	nop
 800757e:	bf00      	nop
 8007580:	e7fd      	b.n	800757e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007582:	f000 fd49 	bl	8008018 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007586:	4b39      	ldr	r3, [pc, #228]	@ (800766c <xTaskResumeAll+0x118>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	3b01      	subs	r3, #1
 800758c:	4a37      	ldr	r2, [pc, #220]	@ (800766c <xTaskResumeAll+0x118>)
 800758e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007590:	4b36      	ldr	r3, [pc, #216]	@ (800766c <xTaskResumeAll+0x118>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d161      	bne.n	800765c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007598:	4b35      	ldr	r3, [pc, #212]	@ (8007670 <xTaskResumeAll+0x11c>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d05d      	beq.n	800765c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075a0:	e02e      	b.n	8007600 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075a2:	4b34      	ldr	r3, [pc, #208]	@ (8007674 <xTaskResumeAll+0x120>)
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	3318      	adds	r3, #24
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7ff fd26 	bl	8007000 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3304      	adds	r3, #4
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7ff fd21 	bl	8007000 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c2:	2201      	movs	r2, #1
 80075c4:	409a      	lsls	r2, r3
 80075c6:	4b2c      	ldr	r3, [pc, #176]	@ (8007678 <xTaskResumeAll+0x124>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	4a2a      	ldr	r2, [pc, #168]	@ (8007678 <xTaskResumeAll+0x124>)
 80075ce:	6013      	str	r3, [r2, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d4:	4613      	mov	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	4a27      	ldr	r2, [pc, #156]	@ (800767c <xTaskResumeAll+0x128>)
 80075de:	441a      	add	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	3304      	adds	r3, #4
 80075e4:	4619      	mov	r1, r3
 80075e6:	4610      	mov	r0, r2
 80075e8:	f7ff fcad 	bl	8006f46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075f0:	4b23      	ldr	r3, [pc, #140]	@ (8007680 <xTaskResumeAll+0x12c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d302      	bcc.n	8007600 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80075fa:	4b22      	ldr	r3, [pc, #136]	@ (8007684 <xTaskResumeAll+0x130>)
 80075fc:	2201      	movs	r2, #1
 80075fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007600:	4b1c      	ldr	r3, [pc, #112]	@ (8007674 <xTaskResumeAll+0x120>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1cc      	bne.n	80075a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800760e:	f000 fa4f 	bl	8007ab0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007612:	4b1d      	ldr	r3, [pc, #116]	@ (8007688 <xTaskResumeAll+0x134>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d010      	beq.n	8007640 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800761e:	f000 f837 	bl	8007690 <xTaskIncrementTick>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d002      	beq.n	800762e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007628:	4b16      	ldr	r3, [pc, #88]	@ (8007684 <xTaskResumeAll+0x130>)
 800762a:	2201      	movs	r2, #1
 800762c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	3b01      	subs	r3, #1
 8007632:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1f1      	bne.n	800761e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800763a:	4b13      	ldr	r3, [pc, #76]	@ (8007688 <xTaskResumeAll+0x134>)
 800763c:	2200      	movs	r2, #0
 800763e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007640:	4b10      	ldr	r3, [pc, #64]	@ (8007684 <xTaskResumeAll+0x130>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d009      	beq.n	800765c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007648:	2301      	movs	r3, #1
 800764a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800764c:	4b0f      	ldr	r3, [pc, #60]	@ (800768c <xTaskResumeAll+0x138>)
 800764e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800765c:	f000 fd0e 	bl	800807c <vPortExitCritical>

	return xAlreadyYielded;
 8007660:	68bb      	ldr	r3, [r7, #8]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	2000192c 	.word	0x2000192c
 8007670:	20001904 	.word	0x20001904
 8007674:	200018c4 	.word	0x200018c4
 8007678:	2000190c 	.word	0x2000190c
 800767c:	20001808 	.word	0x20001808
 8007680:	20001804 	.word	0x20001804
 8007684:	20001918 	.word	0x20001918
 8007688:	20001914 	.word	0x20001914
 800768c:	e000ed04 	.word	0xe000ed04

08007690 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007696:	2300      	movs	r3, #0
 8007698:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800769a:	4b4f      	ldr	r3, [pc, #316]	@ (80077d8 <xTaskIncrementTick+0x148>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f040 808f 	bne.w	80077c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076a4:	4b4d      	ldr	r3, [pc, #308]	@ (80077dc <xTaskIncrementTick+0x14c>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3301      	adds	r3, #1
 80076aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80076ac:	4a4b      	ldr	r2, [pc, #300]	@ (80077dc <xTaskIncrementTick+0x14c>)
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d121      	bne.n	80076fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80076b8:	4b49      	ldr	r3, [pc, #292]	@ (80077e0 <xTaskIncrementTick+0x150>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00b      	beq.n	80076da <xTaskIncrementTick+0x4a>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	603b      	str	r3, [r7, #0]
}
 80076d4:	bf00      	nop
 80076d6:	bf00      	nop
 80076d8:	e7fd      	b.n	80076d6 <xTaskIncrementTick+0x46>
 80076da:	4b41      	ldr	r3, [pc, #260]	@ (80077e0 <xTaskIncrementTick+0x150>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	4b40      	ldr	r3, [pc, #256]	@ (80077e4 <xTaskIncrementTick+0x154>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a3e      	ldr	r2, [pc, #248]	@ (80077e0 <xTaskIncrementTick+0x150>)
 80076e6:	6013      	str	r3, [r2, #0]
 80076e8:	4a3e      	ldr	r2, [pc, #248]	@ (80077e4 <xTaskIncrementTick+0x154>)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6013      	str	r3, [r2, #0]
 80076ee:	4b3e      	ldr	r3, [pc, #248]	@ (80077e8 <xTaskIncrementTick+0x158>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3301      	adds	r3, #1
 80076f4:	4a3c      	ldr	r2, [pc, #240]	@ (80077e8 <xTaskIncrementTick+0x158>)
 80076f6:	6013      	str	r3, [r2, #0]
 80076f8:	f000 f9da 	bl	8007ab0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80076fc:	4b3b      	ldr	r3, [pc, #236]	@ (80077ec <xTaskIncrementTick+0x15c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	429a      	cmp	r2, r3
 8007704:	d348      	bcc.n	8007798 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007706:	4b36      	ldr	r3, [pc, #216]	@ (80077e0 <xTaskIncrementTick+0x150>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d104      	bne.n	800771a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007710:	4b36      	ldr	r3, [pc, #216]	@ (80077ec <xTaskIncrementTick+0x15c>)
 8007712:	f04f 32ff 	mov.w	r2, #4294967295
 8007716:	601a      	str	r2, [r3, #0]
					break;
 8007718:	e03e      	b.n	8007798 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800771a:	4b31      	ldr	r3, [pc, #196]	@ (80077e0 <xTaskIncrementTick+0x150>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	429a      	cmp	r2, r3
 8007730:	d203      	bcs.n	800773a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007732:	4a2e      	ldr	r2, [pc, #184]	@ (80077ec <xTaskIncrementTick+0x15c>)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007738:	e02e      	b.n	8007798 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	3304      	adds	r3, #4
 800773e:	4618      	mov	r0, r3
 8007740:	f7ff fc5e 	bl	8007000 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007748:	2b00      	cmp	r3, #0
 800774a:	d004      	beq.n	8007756 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	3318      	adds	r3, #24
 8007750:	4618      	mov	r0, r3
 8007752:	f7ff fc55 	bl	8007000 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800775a:	2201      	movs	r2, #1
 800775c:	409a      	lsls	r2, r3
 800775e:	4b24      	ldr	r3, [pc, #144]	@ (80077f0 <xTaskIncrementTick+0x160>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4313      	orrs	r3, r2
 8007764:	4a22      	ldr	r2, [pc, #136]	@ (80077f0 <xTaskIncrementTick+0x160>)
 8007766:	6013      	str	r3, [r2, #0]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800776c:	4613      	mov	r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	4413      	add	r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4a1f      	ldr	r2, [pc, #124]	@ (80077f4 <xTaskIncrementTick+0x164>)
 8007776:	441a      	add	r2, r3
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	3304      	adds	r3, #4
 800777c:	4619      	mov	r1, r3
 800777e:	4610      	mov	r0, r2
 8007780:	f7ff fbe1 	bl	8006f46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007788:	4b1b      	ldr	r3, [pc, #108]	@ (80077f8 <xTaskIncrementTick+0x168>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800778e:	429a      	cmp	r2, r3
 8007790:	d3b9      	bcc.n	8007706 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007792:	2301      	movs	r3, #1
 8007794:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007796:	e7b6      	b.n	8007706 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007798:	4b17      	ldr	r3, [pc, #92]	@ (80077f8 <xTaskIncrementTick+0x168>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800779e:	4915      	ldr	r1, [pc, #84]	@ (80077f4 <xTaskIncrementTick+0x164>)
 80077a0:	4613      	mov	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4413      	add	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	440b      	add	r3, r1
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d901      	bls.n	80077b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80077b0:	2301      	movs	r3, #1
 80077b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80077b4:	4b11      	ldr	r3, [pc, #68]	@ (80077fc <xTaskIncrementTick+0x16c>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d007      	beq.n	80077cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80077bc:	2301      	movs	r3, #1
 80077be:	617b      	str	r3, [r7, #20]
 80077c0:	e004      	b.n	80077cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80077c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007800 <xTaskIncrementTick+0x170>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3301      	adds	r3, #1
 80077c8:	4a0d      	ldr	r2, [pc, #52]	@ (8007800 <xTaskIncrementTick+0x170>)
 80077ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80077cc:	697b      	ldr	r3, [r7, #20]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	2000192c 	.word	0x2000192c
 80077dc:	20001908 	.word	0x20001908
 80077e0:	200018bc 	.word	0x200018bc
 80077e4:	200018c0 	.word	0x200018c0
 80077e8:	2000191c 	.word	0x2000191c
 80077ec:	20001924 	.word	0x20001924
 80077f0:	2000190c 	.word	0x2000190c
 80077f4:	20001808 	.word	0x20001808
 80077f8:	20001804 	.word	0x20001804
 80077fc:	20001918 	.word	0x20001918
 8007800:	20001914 	.word	0x20001914

08007804 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007804:	b480      	push	{r7}
 8007806:	b087      	sub	sp, #28
 8007808:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800780a:	4b27      	ldr	r3, [pc, #156]	@ (80078a8 <vTaskSwitchContext+0xa4>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007812:	4b26      	ldr	r3, [pc, #152]	@ (80078ac <vTaskSwitchContext+0xa8>)
 8007814:	2201      	movs	r2, #1
 8007816:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007818:	e040      	b.n	800789c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800781a:	4b24      	ldr	r3, [pc, #144]	@ (80078ac <vTaskSwitchContext+0xa8>)
 800781c:	2200      	movs	r2, #0
 800781e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007820:	4b23      	ldr	r3, [pc, #140]	@ (80078b0 <vTaskSwitchContext+0xac>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	fab3 f383 	clz	r3, r3
 800782c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800782e:	7afb      	ldrb	r3, [r7, #11]
 8007830:	f1c3 031f 	rsb	r3, r3, #31
 8007834:	617b      	str	r3, [r7, #20]
 8007836:	491f      	ldr	r1, [pc, #124]	@ (80078b4 <vTaskSwitchContext+0xb0>)
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	4613      	mov	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	440b      	add	r3, r1
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10b      	bne.n	8007862 <vTaskSwitchContext+0x5e>
	__asm volatile
 800784a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784e:	f383 8811 	msr	BASEPRI, r3
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	f3bf 8f4f 	dsb	sy
 800785a:	607b      	str	r3, [r7, #4]
}
 800785c:	bf00      	nop
 800785e:	bf00      	nop
 8007860:	e7fd      	b.n	800785e <vTaskSwitchContext+0x5a>
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	4613      	mov	r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	4413      	add	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4a11      	ldr	r2, [pc, #68]	@ (80078b4 <vTaskSwitchContext+0xb0>)
 800786e:	4413      	add	r3, r2
 8007870:	613b      	str	r3, [r7, #16]
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	605a      	str	r2, [r3, #4]
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	685a      	ldr	r2, [r3, #4]
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	3308      	adds	r3, #8
 8007884:	429a      	cmp	r2, r3
 8007886:	d104      	bne.n	8007892 <vTaskSwitchContext+0x8e>
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	685a      	ldr	r2, [r3, #4]
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	605a      	str	r2, [r3, #4]
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	4a07      	ldr	r2, [pc, #28]	@ (80078b8 <vTaskSwitchContext+0xb4>)
 800789a:	6013      	str	r3, [r2, #0]
}
 800789c:	bf00      	nop
 800789e:	371c      	adds	r7, #28
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	2000192c 	.word	0x2000192c
 80078ac:	20001918 	.word	0x20001918
 80078b0:	2000190c 	.word	0x2000190c
 80078b4:	20001808 	.word	0x20001808
 80078b8:	20001804 	.word	0x20001804

080078bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10b      	bne.n	80078ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	60fb      	str	r3, [r7, #12]
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop
 80078e8:	e7fd      	b.n	80078e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	3318      	adds	r3, #24
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7ff fb86 	bl	8007000 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078f4:	4b1d      	ldr	r3, [pc, #116]	@ (800796c <xTaskRemoveFromEventList+0xb0>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d11c      	bne.n	8007936 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	3304      	adds	r3, #4
 8007900:	4618      	mov	r0, r3
 8007902:	f7ff fb7d 	bl	8007000 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790a:	2201      	movs	r2, #1
 800790c:	409a      	lsls	r2, r3
 800790e:	4b18      	ldr	r3, [pc, #96]	@ (8007970 <xTaskRemoveFromEventList+0xb4>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4313      	orrs	r3, r2
 8007914:	4a16      	ldr	r2, [pc, #88]	@ (8007970 <xTaskRemoveFromEventList+0xb4>)
 8007916:	6013      	str	r3, [r2, #0]
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800791c:	4613      	mov	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4a13      	ldr	r2, [pc, #76]	@ (8007974 <xTaskRemoveFromEventList+0xb8>)
 8007926:	441a      	add	r2, r3
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	3304      	adds	r3, #4
 800792c:	4619      	mov	r1, r3
 800792e:	4610      	mov	r0, r2
 8007930:	f7ff fb09 	bl	8006f46 <vListInsertEnd>
 8007934:	e005      	b.n	8007942 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	3318      	adds	r3, #24
 800793a:	4619      	mov	r1, r3
 800793c:	480e      	ldr	r0, [pc, #56]	@ (8007978 <xTaskRemoveFromEventList+0xbc>)
 800793e:	f7ff fb02 	bl	8006f46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007946:	4b0d      	ldr	r3, [pc, #52]	@ (800797c <xTaskRemoveFromEventList+0xc0>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800794c:	429a      	cmp	r2, r3
 800794e:	d905      	bls.n	800795c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007950:	2301      	movs	r3, #1
 8007952:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007954:	4b0a      	ldr	r3, [pc, #40]	@ (8007980 <xTaskRemoveFromEventList+0xc4>)
 8007956:	2201      	movs	r2, #1
 8007958:	601a      	str	r2, [r3, #0]
 800795a:	e001      	b.n	8007960 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800795c:	2300      	movs	r3, #0
 800795e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007960:	697b      	ldr	r3, [r7, #20]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	2000192c 	.word	0x2000192c
 8007970:	2000190c 	.word	0x2000190c
 8007974:	20001808 	.word	0x20001808
 8007978:	200018c4 	.word	0x200018c4
 800797c:	20001804 	.word	0x20001804
 8007980:	20001918 	.word	0x20001918

08007984 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800798c:	f000 f852 	bl	8007a34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007990:	4b06      	ldr	r3, [pc, #24]	@ (80079ac <prvIdleTask+0x28>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d9f9      	bls.n	800798c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007998:	4b05      	ldr	r3, [pc, #20]	@ (80079b0 <prvIdleTask+0x2c>)
 800799a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80079a8:	e7f0      	b.n	800798c <prvIdleTask+0x8>
 80079aa:	bf00      	nop
 80079ac:	20001808 	.word	0x20001808
 80079b0:	e000ed04 	.word	0xe000ed04

080079b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079ba:	2300      	movs	r3, #0
 80079bc:	607b      	str	r3, [r7, #4]
 80079be:	e00c      	b.n	80079da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	4613      	mov	r3, r2
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	4a12      	ldr	r2, [pc, #72]	@ (8007a14 <prvInitialiseTaskLists+0x60>)
 80079cc:	4413      	add	r3, r2
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7ff fa8c 	bl	8006eec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	3301      	adds	r3, #1
 80079d8:	607b      	str	r3, [r7, #4]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2b06      	cmp	r3, #6
 80079de:	d9ef      	bls.n	80079c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80079e0:	480d      	ldr	r0, [pc, #52]	@ (8007a18 <prvInitialiseTaskLists+0x64>)
 80079e2:	f7ff fa83 	bl	8006eec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80079e6:	480d      	ldr	r0, [pc, #52]	@ (8007a1c <prvInitialiseTaskLists+0x68>)
 80079e8:	f7ff fa80 	bl	8006eec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80079ec:	480c      	ldr	r0, [pc, #48]	@ (8007a20 <prvInitialiseTaskLists+0x6c>)
 80079ee:	f7ff fa7d 	bl	8006eec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80079f2:	480c      	ldr	r0, [pc, #48]	@ (8007a24 <prvInitialiseTaskLists+0x70>)
 80079f4:	f7ff fa7a 	bl	8006eec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80079f8:	480b      	ldr	r0, [pc, #44]	@ (8007a28 <prvInitialiseTaskLists+0x74>)
 80079fa:	f7ff fa77 	bl	8006eec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80079fe:	4b0b      	ldr	r3, [pc, #44]	@ (8007a2c <prvInitialiseTaskLists+0x78>)
 8007a00:	4a05      	ldr	r2, [pc, #20]	@ (8007a18 <prvInitialiseTaskLists+0x64>)
 8007a02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a04:	4b0a      	ldr	r3, [pc, #40]	@ (8007a30 <prvInitialiseTaskLists+0x7c>)
 8007a06:	4a05      	ldr	r2, [pc, #20]	@ (8007a1c <prvInitialiseTaskLists+0x68>)
 8007a08:	601a      	str	r2, [r3, #0]
}
 8007a0a:	bf00      	nop
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	20001808 	.word	0x20001808
 8007a18:	20001894 	.word	0x20001894
 8007a1c:	200018a8 	.word	0x200018a8
 8007a20:	200018c4 	.word	0x200018c4
 8007a24:	200018d8 	.word	0x200018d8
 8007a28:	200018f0 	.word	0x200018f0
 8007a2c:	200018bc 	.word	0x200018bc
 8007a30:	200018c0 	.word	0x200018c0

08007a34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a3a:	e019      	b.n	8007a70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a3c:	f000 faec 	bl	8008018 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a40:	4b10      	ldr	r3, [pc, #64]	@ (8007a84 <prvCheckTasksWaitingTermination+0x50>)
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7ff fad7 	bl	8007000 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a52:	4b0d      	ldr	r3, [pc, #52]	@ (8007a88 <prvCheckTasksWaitingTermination+0x54>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	3b01      	subs	r3, #1
 8007a58:	4a0b      	ldr	r2, [pc, #44]	@ (8007a88 <prvCheckTasksWaitingTermination+0x54>)
 8007a5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a8c <prvCheckTasksWaitingTermination+0x58>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	3b01      	subs	r3, #1
 8007a62:	4a0a      	ldr	r2, [pc, #40]	@ (8007a8c <prvCheckTasksWaitingTermination+0x58>)
 8007a64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a66:	f000 fb09 	bl	800807c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f810 	bl	8007a90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a70:	4b06      	ldr	r3, [pc, #24]	@ (8007a8c <prvCheckTasksWaitingTermination+0x58>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1e1      	bne.n	8007a3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a78:	bf00      	nop
 8007a7a:	bf00      	nop
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	200018d8 	.word	0x200018d8
 8007a88:	20001904 	.word	0x20001904
 8007a8c:	200018ec 	.word	0x200018ec

08007a90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 fcab 	bl	80083f8 <vPortFree>
			vPortFree( pxTCB );
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fca8 	bl	80083f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007aa8:	bf00      	nop
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae8 <prvResetNextTaskUnblockTime+0x38>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d104      	bne.n	8007aca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8007aec <prvResetNextTaskUnblockTime+0x3c>)
 8007ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ac8:	e008      	b.n	8007adc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aca:	4b07      	ldr	r3, [pc, #28]	@ (8007ae8 <prvResetNextTaskUnblockTime+0x38>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	4a04      	ldr	r2, [pc, #16]	@ (8007aec <prvResetNextTaskUnblockTime+0x3c>)
 8007ada:	6013      	str	r3, [r2, #0]
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	200018bc 	.word	0x200018bc
 8007aec:	20001924 	.word	0x20001924

08007af0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007af6:	4b0b      	ldr	r3, [pc, #44]	@ (8007b24 <xTaskGetSchedulerState+0x34>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d102      	bne.n	8007b04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007afe:	2301      	movs	r3, #1
 8007b00:	607b      	str	r3, [r7, #4]
 8007b02:	e008      	b.n	8007b16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b04:	4b08      	ldr	r3, [pc, #32]	@ (8007b28 <xTaskGetSchedulerState+0x38>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d102      	bne.n	8007b12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	607b      	str	r3, [r7, #4]
 8007b10:	e001      	b.n	8007b16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007b12:	2300      	movs	r3, #0
 8007b14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007b16:	687b      	ldr	r3, [r7, #4]
	}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	20001910 	.word	0x20001910
 8007b28:	2000192c 	.word	0x2000192c

08007b2c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8007b36:	f000 fa6f 	bl	8008018 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8007b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8007bb4 <ulTaskNotifyTake+0x88>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d113      	bne.n	8007b6c <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007b44:	4b1b      	ldr	r3, [pc, #108]	@ (8007bb4 <ulTaskNotifyTake+0x88>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00b      	beq.n	8007b6c <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b54:	2101      	movs	r1, #1
 8007b56:	6838      	ldr	r0, [r7, #0]
 8007b58:	f000 f8c4 	bl	8007ce4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007b5c:	4b16      	ldr	r3, [pc, #88]	@ (8007bb8 <ulTaskNotifyTake+0x8c>)
 8007b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007b6c:	f000 fa86 	bl	800807c <vPortExitCritical>

		taskENTER_CRITICAL();
 8007b70:	f000 fa52 	bl	8008018 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8007b74:	4b0f      	ldr	r3, [pc, #60]	@ (8007bb4 <ulTaskNotifyTake+0x88>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b7a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00c      	beq.n	8007b9c <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d004      	beq.n	8007b92 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007b88:	4b0a      	ldr	r3, [pc, #40]	@ (8007bb4 <ulTaskNotifyTake+0x88>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007b90:	e004      	b.n	8007b9c <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8007b92:	4b08      	ldr	r3, [pc, #32]	@ (8007bb4 <ulTaskNotifyTake+0x88>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	3a01      	subs	r2, #1
 8007b9a:	64da      	str	r2, [r3, #76]	@ 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b9c:	4b05      	ldr	r3, [pc, #20]	@ (8007bb4 <ulTaskNotifyTake+0x88>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 8007ba6:	f000 fa69 	bl	800807c <vPortExitCritical>

		return ulReturn;
 8007baa:	68fb      	ldr	r3, [r7, #12]
	}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	20001804 	.word	0x20001804
 8007bb8:	e000ed04 	.word	0xe000ed04

08007bbc <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b08a      	sub	sp, #40	@ 0x28
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10b      	bne.n	8007be4 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8007bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	61bb      	str	r3, [r7, #24]
}
 8007bde:	bf00      	nop
 8007be0:	bf00      	nop
 8007be2:	e7fd      	b.n	8007be0 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007be4:	f000 faf8 	bl	80081d8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	627b      	str	r3, [r7, #36]	@ 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007bec:	f3ef 8211 	mrs	r2, BASEPRI
 8007bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	617a      	str	r2, [r7, #20]
 8007c02:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007c04:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c06:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007c0e:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c12:	2202      	movs	r2, #2
 8007c14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8007c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c1c:	1c5a      	adds	r2, r3, #1
 8007c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c20:	64da      	str	r2, [r3, #76]	@ 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007c22:	7ffb      	ldrb	r3, [r7, #31]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d146      	bne.n	8007cb6 <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00b      	beq.n	8007c48 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	60fb      	str	r3, [r7, #12]
}
 8007c42:	bf00      	nop
 8007c44:	bf00      	nop
 8007c46:	e7fd      	b.n	8007c44 <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c48:	4b20      	ldr	r3, [pc, #128]	@ (8007ccc <vTaskNotifyGiveFromISR+0x110>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d11c      	bne.n	8007c8a <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c52:	3304      	adds	r3, #4
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7ff f9d3 	bl	8007000 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5e:	2201      	movs	r2, #1
 8007c60:	409a      	lsls	r2, r3
 8007c62:	4b1b      	ldr	r3, [pc, #108]	@ (8007cd0 <vTaskNotifyGiveFromISR+0x114>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	4a19      	ldr	r2, [pc, #100]	@ (8007cd0 <vTaskNotifyGiveFromISR+0x114>)
 8007c6a:	6013      	str	r3, [r2, #0]
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c70:	4613      	mov	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	4413      	add	r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4a16      	ldr	r2, [pc, #88]	@ (8007cd4 <vTaskNotifyGiveFromISR+0x118>)
 8007c7a:	441a      	add	r2, r3
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7e:	3304      	adds	r3, #4
 8007c80:	4619      	mov	r1, r3
 8007c82:	4610      	mov	r0, r2
 8007c84:	f7ff f95f 	bl	8006f46 <vListInsertEnd>
 8007c88:	e005      	b.n	8007c96 <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8c:	3318      	adds	r3, #24
 8007c8e:	4619      	mov	r1, r3
 8007c90:	4811      	ldr	r0, [pc, #68]	@ (8007cd8 <vTaskNotifyGiveFromISR+0x11c>)
 8007c92:	f7ff f958 	bl	8006f46 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c9a:	4b10      	ldr	r3, [pc, #64]	@ (8007cdc <vTaskNotifyGiveFromISR+0x120>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d908      	bls.n	8007cb6 <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d002      	beq.n	8007cb0 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	2201      	movs	r2, #1
 8007cae:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ce0 <vTaskNotifyGiveFromISR+0x124>)
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007cc0:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8007cc2:	bf00      	nop
 8007cc4:	3728      	adds	r7, #40	@ 0x28
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	2000192c 	.word	0x2000192c
 8007cd0:	2000190c 	.word	0x2000190c
 8007cd4:	20001808 	.word	0x20001808
 8007cd8:	200018c4 	.word	0x200018c4
 8007cdc:	20001804 	.word	0x20001804
 8007ce0:	20001918 	.word	0x20001918

08007ce4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007cee:	4b29      	ldr	r3, [pc, #164]	@ (8007d94 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cf4:	4b28      	ldr	r3, [pc, #160]	@ (8007d98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7ff f980 	bl	8007000 <uxListRemove>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10b      	bne.n	8007d1e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007d06:	4b24      	ldr	r3, [pc, #144]	@ (8007d98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d12:	43da      	mvns	r2, r3
 8007d14:	4b21      	ldr	r3, [pc, #132]	@ (8007d9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4013      	ands	r3, r2
 8007d1a:	4a20      	ldr	r2, [pc, #128]	@ (8007d9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d1c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d24:	d10a      	bne.n	8007d3c <prvAddCurrentTaskToDelayedList+0x58>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d007      	beq.n	8007d3c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8007d98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	3304      	adds	r3, #4
 8007d32:	4619      	mov	r1, r3
 8007d34:	481a      	ldr	r0, [pc, #104]	@ (8007da0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007d36:	f7ff f906 	bl	8006f46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d3a:	e026      	b.n	8007d8a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4413      	add	r3, r2
 8007d42:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d44:	4b14      	ldr	r3, [pc, #80]	@ (8007d98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d209      	bcs.n	8007d68 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d54:	4b13      	ldr	r3, [pc, #76]	@ (8007da4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	4b0f      	ldr	r3, [pc, #60]	@ (8007d98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	4619      	mov	r1, r3
 8007d60:	4610      	mov	r0, r2
 8007d62:	f7ff f914 	bl	8006f8e <vListInsert>
}
 8007d66:	e010      	b.n	8007d8a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d68:	4b0f      	ldr	r3, [pc, #60]	@ (8007da8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	3304      	adds	r3, #4
 8007d72:	4619      	mov	r1, r3
 8007d74:	4610      	mov	r0, r2
 8007d76:	f7ff f90a 	bl	8006f8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8007dac <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d202      	bcs.n	8007d8a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007d84:	4a09      	ldr	r2, [pc, #36]	@ (8007dac <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	6013      	str	r3, [r2, #0]
}
 8007d8a:	bf00      	nop
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	20001908 	.word	0x20001908
 8007d98:	20001804 	.word	0x20001804
 8007d9c:	2000190c 	.word	0x2000190c
 8007da0:	200018f0 	.word	0x200018f0
 8007da4:	200018c0 	.word	0x200018c0
 8007da8:	200018bc 	.word	0x200018bc
 8007dac:	20001924 	.word	0x20001924

08007db0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	3b04      	subs	r3, #4
 8007dc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007dc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	3b04      	subs	r3, #4
 8007dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f023 0201 	bic.w	r2, r3, #1
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3b04      	subs	r3, #4
 8007dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007de0:	4a0c      	ldr	r2, [pc, #48]	@ (8007e14 <pxPortInitialiseStack+0x64>)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	3b14      	subs	r3, #20
 8007dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3b04      	subs	r3, #4
 8007df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f06f 0202 	mvn.w	r2, #2
 8007dfe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	3b20      	subs	r3, #32
 8007e04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e06:	68fb      	ldr	r3, [r7, #12]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	08007e19 	.word	0x08007e19

08007e18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e22:	4b13      	ldr	r3, [pc, #76]	@ (8007e70 <prvTaskExitError+0x58>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2a:	d00b      	beq.n	8007e44 <prvTaskExitError+0x2c>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	60fb      	str	r3, [r7, #12]
}
 8007e3e:	bf00      	nop
 8007e40:	bf00      	nop
 8007e42:	e7fd      	b.n	8007e40 <prvTaskExitError+0x28>
	__asm volatile
 8007e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	60bb      	str	r3, [r7, #8]
}
 8007e56:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e58:	bf00      	nop
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d0fc      	beq.n	8007e5a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e60:	bf00      	nop
 8007e62:	bf00      	nop
 8007e64:	3714      	adds	r7, #20
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	2000000c 	.word	0x2000000c
	...

08007e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e80:	4b07      	ldr	r3, [pc, #28]	@ (8007ea0 <pxCurrentTCBConst2>)
 8007e82:	6819      	ldr	r1, [r3, #0]
 8007e84:	6808      	ldr	r0, [r1, #0]
 8007e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8a:	f380 8809 	msr	PSP, r0
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f04f 0000 	mov.w	r0, #0
 8007e96:	f380 8811 	msr	BASEPRI, r0
 8007e9a:	4770      	bx	lr
 8007e9c:	f3af 8000 	nop.w

08007ea0 <pxCurrentTCBConst2>:
 8007ea0:	20001804 	.word	0x20001804
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop

08007ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ea8:	4808      	ldr	r0, [pc, #32]	@ (8007ecc <prvPortStartFirstTask+0x24>)
 8007eaa:	6800      	ldr	r0, [r0, #0]
 8007eac:	6800      	ldr	r0, [r0, #0]
 8007eae:	f380 8808 	msr	MSP, r0
 8007eb2:	f04f 0000 	mov.w	r0, #0
 8007eb6:	f380 8814 	msr	CONTROL, r0
 8007eba:	b662      	cpsie	i
 8007ebc:	b661      	cpsie	f
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	df00      	svc	0
 8007ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007eca:	bf00      	nop
 8007ecc:	e000ed08 	.word	0xe000ed08

08007ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ed6:	4b47      	ldr	r3, [pc, #284]	@ (8007ff4 <xPortStartScheduler+0x124>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a47      	ldr	r2, [pc, #284]	@ (8007ff8 <xPortStartScheduler+0x128>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d10b      	bne.n	8007ef8 <xPortStartScheduler+0x28>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	613b      	str	r3, [r7, #16]
}
 8007ef2:	bf00      	nop
 8007ef4:	bf00      	nop
 8007ef6:	e7fd      	b.n	8007ef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ef8:	4b3e      	ldr	r3, [pc, #248]	@ (8007ff4 <xPortStartScheduler+0x124>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a3f      	ldr	r2, [pc, #252]	@ (8007ffc <xPortStartScheduler+0x12c>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d10b      	bne.n	8007f1a <xPortStartScheduler+0x4a>
	__asm volatile
 8007f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	60fb      	str	r3, [r7, #12]
}
 8007f14:	bf00      	nop
 8007f16:	bf00      	nop
 8007f18:	e7fd      	b.n	8007f16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f1a:	4b39      	ldr	r3, [pc, #228]	@ (8008000 <xPortStartScheduler+0x130>)
 8007f1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	22ff      	movs	r2, #255	@ 0xff
 8007f2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	4b31      	ldr	r3, [pc, #196]	@ (8008004 <xPortStartScheduler+0x134>)
 8007f40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f42:	4b31      	ldr	r3, [pc, #196]	@ (8008008 <xPortStartScheduler+0x138>)
 8007f44:	2207      	movs	r2, #7
 8007f46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f48:	e009      	b.n	8007f5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8008008 <xPortStartScheduler+0x138>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	4a2d      	ldr	r2, [pc, #180]	@ (8008008 <xPortStartScheduler+0x138>)
 8007f52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f54:	78fb      	ldrb	r3, [r7, #3]
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f5e:	78fb      	ldrb	r3, [r7, #3]
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f66:	2b80      	cmp	r3, #128	@ 0x80
 8007f68:	d0ef      	beq.n	8007f4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f6a:	4b27      	ldr	r3, [pc, #156]	@ (8008008 <xPortStartScheduler+0x138>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f1c3 0307 	rsb	r3, r3, #7
 8007f72:	2b04      	cmp	r3, #4
 8007f74:	d00b      	beq.n	8007f8e <xPortStartScheduler+0xbe>
	__asm volatile
 8007f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f7a:	f383 8811 	msr	BASEPRI, r3
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	60bb      	str	r3, [r7, #8]
}
 8007f88:	bf00      	nop
 8007f8a:	bf00      	nop
 8007f8c:	e7fd      	b.n	8007f8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8008008 <xPortStartScheduler+0x138>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	021b      	lsls	r3, r3, #8
 8007f94:	4a1c      	ldr	r2, [pc, #112]	@ (8008008 <xPortStartScheduler+0x138>)
 8007f96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f98:	4b1b      	ldr	r3, [pc, #108]	@ (8008008 <xPortStartScheduler+0x138>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007fa0:	4a19      	ldr	r2, [pc, #100]	@ (8008008 <xPortStartScheduler+0x138>)
 8007fa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007fac:	4b17      	ldr	r3, [pc, #92]	@ (800800c <xPortStartScheduler+0x13c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a16      	ldr	r2, [pc, #88]	@ (800800c <xPortStartScheduler+0x13c>)
 8007fb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007fb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007fb8:	4b14      	ldr	r3, [pc, #80]	@ (800800c <xPortStartScheduler+0x13c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a13      	ldr	r2, [pc, #76]	@ (800800c <xPortStartScheduler+0x13c>)
 8007fbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007fc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007fc4:	f000 f8da 	bl	800817c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007fc8:	4b11      	ldr	r3, [pc, #68]	@ (8008010 <xPortStartScheduler+0x140>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007fce:	f000 f8f9 	bl	80081c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007fd2:	4b10      	ldr	r3, [pc, #64]	@ (8008014 <xPortStartScheduler+0x144>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8008014 <xPortStartScheduler+0x144>)
 8007fd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007fdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007fde:	f7ff ff63 	bl	8007ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007fe2:	f7ff fc0f 	bl	8007804 <vTaskSwitchContext>
	prvTaskExitError();
 8007fe6:	f7ff ff17 	bl	8007e18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3718      	adds	r7, #24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	e000ed00 	.word	0xe000ed00
 8007ff8:	410fc271 	.word	0x410fc271
 8007ffc:	410fc270 	.word	0x410fc270
 8008000:	e000e400 	.word	0xe000e400
 8008004:	20001930 	.word	0x20001930
 8008008:	20001934 	.word	0x20001934
 800800c:	e000ed20 	.word	0xe000ed20
 8008010:	2000000c 	.word	0x2000000c
 8008014:	e000ef34 	.word	0xe000ef34

08008018 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
	__asm volatile
 800801e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	607b      	str	r3, [r7, #4]
}
 8008030:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008032:	4b10      	ldr	r3, [pc, #64]	@ (8008074 <vPortEnterCritical+0x5c>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3301      	adds	r3, #1
 8008038:	4a0e      	ldr	r2, [pc, #56]	@ (8008074 <vPortEnterCritical+0x5c>)
 800803a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800803c:	4b0d      	ldr	r3, [pc, #52]	@ (8008074 <vPortEnterCritical+0x5c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d110      	bne.n	8008066 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008044:	4b0c      	ldr	r3, [pc, #48]	@ (8008078 <vPortEnterCritical+0x60>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00b      	beq.n	8008066 <vPortEnterCritical+0x4e>
	__asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	603b      	str	r3, [r7, #0]
}
 8008060:	bf00      	nop
 8008062:	bf00      	nop
 8008064:	e7fd      	b.n	8008062 <vPortEnterCritical+0x4a>
	}
}
 8008066:	bf00      	nop
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	2000000c 	.word	0x2000000c
 8008078:	e000ed04 	.word	0xe000ed04

0800807c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008082:	4b12      	ldr	r3, [pc, #72]	@ (80080cc <vPortExitCritical+0x50>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10b      	bne.n	80080a2 <vPortExitCritical+0x26>
	__asm volatile
 800808a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	607b      	str	r3, [r7, #4]
}
 800809c:	bf00      	nop
 800809e:	bf00      	nop
 80080a0:	e7fd      	b.n	800809e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80080a2:	4b0a      	ldr	r3, [pc, #40]	@ (80080cc <vPortExitCritical+0x50>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	4a08      	ldr	r2, [pc, #32]	@ (80080cc <vPortExitCritical+0x50>)
 80080aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080ac:	4b07      	ldr	r3, [pc, #28]	@ (80080cc <vPortExitCritical+0x50>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d105      	bne.n	80080c0 <vPortExitCritical+0x44>
 80080b4:	2300      	movs	r3, #0
 80080b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	f383 8811 	msr	BASEPRI, r3
}
 80080be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080c0:	bf00      	nop
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr
 80080cc:	2000000c 	.word	0x2000000c

080080d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80080d0:	f3ef 8009 	mrs	r0, PSP
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	4b15      	ldr	r3, [pc, #84]	@ (8008130 <pxCurrentTCBConst>)
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	f01e 0f10 	tst.w	lr, #16
 80080e0:	bf08      	it	eq
 80080e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80080e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ea:	6010      	str	r0, [r2, #0]
 80080ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80080f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80080f4:	f380 8811 	msr	BASEPRI, r0
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f7ff fb80 	bl	8007804 <vTaskSwitchContext>
 8008104:	f04f 0000 	mov.w	r0, #0
 8008108:	f380 8811 	msr	BASEPRI, r0
 800810c:	bc09      	pop	{r0, r3}
 800810e:	6819      	ldr	r1, [r3, #0]
 8008110:	6808      	ldr	r0, [r1, #0]
 8008112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008116:	f01e 0f10 	tst.w	lr, #16
 800811a:	bf08      	it	eq
 800811c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008120:	f380 8809 	msr	PSP, r0
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	f3af 8000 	nop.w

08008130 <pxCurrentTCBConst>:
 8008130:	20001804 	.word	0x20001804
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008134:	bf00      	nop
 8008136:	bf00      	nop

08008138 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
	__asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	607b      	str	r3, [r7, #4]
}
 8008150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008152:	f7ff fa9d 	bl	8007690 <xTaskIncrementTick>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d003      	beq.n	8008164 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800815c:	4b06      	ldr	r3, [pc, #24]	@ (8008178 <xPortSysTickHandler+0x40>)
 800815e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	2300      	movs	r3, #0
 8008166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	f383 8811 	msr	BASEPRI, r3
}
 800816e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	e000ed04 	.word	0xe000ed04

0800817c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800817c:	b480      	push	{r7}
 800817e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008180:	4b0b      	ldr	r3, [pc, #44]	@ (80081b0 <vPortSetupTimerInterrupt+0x34>)
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008186:	4b0b      	ldr	r3, [pc, #44]	@ (80081b4 <vPortSetupTimerInterrupt+0x38>)
 8008188:	2200      	movs	r2, #0
 800818a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800818c:	4b0a      	ldr	r3, [pc, #40]	@ (80081b8 <vPortSetupTimerInterrupt+0x3c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a0a      	ldr	r2, [pc, #40]	@ (80081bc <vPortSetupTimerInterrupt+0x40>)
 8008192:	fba2 2303 	umull	r2, r3, r2, r3
 8008196:	099b      	lsrs	r3, r3, #6
 8008198:	4a09      	ldr	r2, [pc, #36]	@ (80081c0 <vPortSetupTimerInterrupt+0x44>)
 800819a:	3b01      	subs	r3, #1
 800819c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800819e:	4b04      	ldr	r3, [pc, #16]	@ (80081b0 <vPortSetupTimerInterrupt+0x34>)
 80081a0:	2207      	movs	r2, #7
 80081a2:	601a      	str	r2, [r3, #0]
}
 80081a4:	bf00      	nop
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	e000e010 	.word	0xe000e010
 80081b4:	e000e018 	.word	0xe000e018
 80081b8:	20000000 	.word	0x20000000
 80081bc:	10624dd3 	.word	0x10624dd3
 80081c0:	e000e014 	.word	0xe000e014

080081c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80081c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80081d4 <vPortEnableVFP+0x10>
 80081c8:	6801      	ldr	r1, [r0, #0]
 80081ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80081ce:	6001      	str	r1, [r0, #0]
 80081d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80081d2:	bf00      	nop
 80081d4:	e000ed88 	.word	0xe000ed88

080081d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80081de:	f3ef 8305 	mrs	r3, IPSR
 80081e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2b0f      	cmp	r3, #15
 80081e8:	d915      	bls.n	8008216 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081ea:	4a18      	ldr	r2, [pc, #96]	@ (800824c <vPortValidateInterruptPriority+0x74>)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4413      	add	r3, r2
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081f4:	4b16      	ldr	r3, [pc, #88]	@ (8008250 <vPortValidateInterruptPriority+0x78>)
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	7afa      	ldrb	r2, [r7, #11]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d20b      	bcs.n	8008216 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	607b      	str	r3, [r7, #4]
}
 8008210:	bf00      	nop
 8008212:	bf00      	nop
 8008214:	e7fd      	b.n	8008212 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008216:	4b0f      	ldr	r3, [pc, #60]	@ (8008254 <vPortValidateInterruptPriority+0x7c>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800821e:	4b0e      	ldr	r3, [pc, #56]	@ (8008258 <vPortValidateInterruptPriority+0x80>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	429a      	cmp	r2, r3
 8008224:	d90b      	bls.n	800823e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	603b      	str	r3, [r7, #0]
}
 8008238:	bf00      	nop
 800823a:	bf00      	nop
 800823c:	e7fd      	b.n	800823a <vPortValidateInterruptPriority+0x62>
	}
 800823e:	bf00      	nop
 8008240:	3714      	adds	r7, #20
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	e000e3f0 	.word	0xe000e3f0
 8008250:	20001930 	.word	0x20001930
 8008254:	e000ed0c 	.word	0xe000ed0c
 8008258:	20001934 	.word	0x20001934

0800825c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b08a      	sub	sp, #40	@ 0x28
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008264:	2300      	movs	r3, #0
 8008266:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008268:	f7ff f966 	bl	8007538 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800826c:	4b5c      	ldr	r3, [pc, #368]	@ (80083e0 <pvPortMalloc+0x184>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008274:	f000 f924 	bl	80084c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008278:	4b5a      	ldr	r3, [pc, #360]	@ (80083e4 <pvPortMalloc+0x188>)
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4013      	ands	r3, r2
 8008280:	2b00      	cmp	r3, #0
 8008282:	f040 8095 	bne.w	80083b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d01e      	beq.n	80082ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800828c:	2208      	movs	r2, #8
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4413      	add	r3, r2
 8008292:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f003 0307 	and.w	r3, r3, #7
 800829a:	2b00      	cmp	r3, #0
 800829c:	d015      	beq.n	80082ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f023 0307 	bic.w	r3, r3, #7
 80082a4:	3308      	adds	r3, #8
 80082a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f003 0307 	and.w	r3, r3, #7
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00b      	beq.n	80082ca <pvPortMalloc+0x6e>
	__asm volatile
 80082b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	617b      	str	r3, [r7, #20]
}
 80082c4:	bf00      	nop
 80082c6:	bf00      	nop
 80082c8:	e7fd      	b.n	80082c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d06f      	beq.n	80083b0 <pvPortMalloc+0x154>
 80082d0:	4b45      	ldr	r3, [pc, #276]	@ (80083e8 <pvPortMalloc+0x18c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d86a      	bhi.n	80083b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082da:	4b44      	ldr	r3, [pc, #272]	@ (80083ec <pvPortMalloc+0x190>)
 80082dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082de:	4b43      	ldr	r3, [pc, #268]	@ (80083ec <pvPortMalloc+0x190>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082e4:	e004      	b.n	80082f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80082e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80082ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d903      	bls.n	8008302 <pvPortMalloc+0xa6>
 80082fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1f1      	bne.n	80082e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008302:	4b37      	ldr	r3, [pc, #220]	@ (80083e0 <pvPortMalloc+0x184>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008308:	429a      	cmp	r2, r3
 800830a:	d051      	beq.n	80083b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800830c:	6a3b      	ldr	r3, [r7, #32]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2208      	movs	r2, #8
 8008312:	4413      	add	r3, r2
 8008314:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	6a3b      	ldr	r3, [r7, #32]
 800831c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800831e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008320:	685a      	ldr	r2, [r3, #4]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	1ad2      	subs	r2, r2, r3
 8008326:	2308      	movs	r3, #8
 8008328:	005b      	lsls	r3, r3, #1
 800832a:	429a      	cmp	r2, r3
 800832c:	d920      	bls.n	8008370 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800832e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4413      	add	r3, r2
 8008334:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	f003 0307 	and.w	r3, r3, #7
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00b      	beq.n	8008358 <pvPortMalloc+0xfc>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	613b      	str	r3, [r7, #16]
}
 8008352:	bf00      	nop
 8008354:	bf00      	nop
 8008356:	e7fd      	b.n	8008354 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	1ad2      	subs	r2, r2, r3
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800836a:	69b8      	ldr	r0, [r7, #24]
 800836c:	f000 f90a 	bl	8008584 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008370:	4b1d      	ldr	r3, [pc, #116]	@ (80083e8 <pvPortMalloc+0x18c>)
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	4a1b      	ldr	r2, [pc, #108]	@ (80083e8 <pvPortMalloc+0x18c>)
 800837c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800837e:	4b1a      	ldr	r3, [pc, #104]	@ (80083e8 <pvPortMalloc+0x18c>)
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	4b1b      	ldr	r3, [pc, #108]	@ (80083f0 <pvPortMalloc+0x194>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	429a      	cmp	r2, r3
 8008388:	d203      	bcs.n	8008392 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800838a:	4b17      	ldr	r3, [pc, #92]	@ (80083e8 <pvPortMalloc+0x18c>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a18      	ldr	r2, [pc, #96]	@ (80083f0 <pvPortMalloc+0x194>)
 8008390:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008394:	685a      	ldr	r2, [r3, #4]
 8008396:	4b13      	ldr	r3, [pc, #76]	@ (80083e4 <pvPortMalloc+0x188>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	431a      	orrs	r2, r3
 800839c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a2:	2200      	movs	r2, #0
 80083a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80083a6:	4b13      	ldr	r3, [pc, #76]	@ (80083f4 <pvPortMalloc+0x198>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3301      	adds	r3, #1
 80083ac:	4a11      	ldr	r2, [pc, #68]	@ (80083f4 <pvPortMalloc+0x198>)
 80083ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083b0:	f7ff f8d0 	bl	8007554 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	f003 0307 	and.w	r3, r3, #7
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00b      	beq.n	80083d6 <pvPortMalloc+0x17a>
	__asm volatile
 80083be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	60fb      	str	r3, [r7, #12]
}
 80083d0:	bf00      	nop
 80083d2:	bf00      	nop
 80083d4:	e7fd      	b.n	80083d2 <pvPortMalloc+0x176>
	return pvReturn;
 80083d6:	69fb      	ldr	r3, [r7, #28]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3728      	adds	r7, #40	@ 0x28
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	20004050 	.word	0x20004050
 80083e4:	20004064 	.word	0x20004064
 80083e8:	20004054 	.word	0x20004054
 80083ec:	20004048 	.word	0x20004048
 80083f0:	20004058 	.word	0x20004058
 80083f4:	2000405c 	.word	0x2000405c

080083f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d04f      	beq.n	80084aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800840a:	2308      	movs	r3, #8
 800840c:	425b      	negs	r3, r3
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	4413      	add	r3, r2
 8008412:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	4b25      	ldr	r3, [pc, #148]	@ (80084b4 <vPortFree+0xbc>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4013      	ands	r3, r2
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10b      	bne.n	800843e <vPortFree+0x46>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	60fb      	str	r3, [r7, #12]
}
 8008438:	bf00      	nop
 800843a:	bf00      	nop
 800843c:	e7fd      	b.n	800843a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00b      	beq.n	800845e <vPortFree+0x66>
	__asm volatile
 8008446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800844a:	f383 8811 	msr	BASEPRI, r3
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	60bb      	str	r3, [r7, #8]
}
 8008458:	bf00      	nop
 800845a:	bf00      	nop
 800845c:	e7fd      	b.n	800845a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	685a      	ldr	r2, [r3, #4]
 8008462:	4b14      	ldr	r3, [pc, #80]	@ (80084b4 <vPortFree+0xbc>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4013      	ands	r3, r2
 8008468:	2b00      	cmp	r3, #0
 800846a:	d01e      	beq.n	80084aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d11a      	bne.n	80084aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	4b0e      	ldr	r3, [pc, #56]	@ (80084b4 <vPortFree+0xbc>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	43db      	mvns	r3, r3
 800847e:	401a      	ands	r2, r3
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008484:	f7ff f858 	bl	8007538 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	685a      	ldr	r2, [r3, #4]
 800848c:	4b0a      	ldr	r3, [pc, #40]	@ (80084b8 <vPortFree+0xc0>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4413      	add	r3, r2
 8008492:	4a09      	ldr	r2, [pc, #36]	@ (80084b8 <vPortFree+0xc0>)
 8008494:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008496:	6938      	ldr	r0, [r7, #16]
 8008498:	f000 f874 	bl	8008584 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800849c:	4b07      	ldr	r3, [pc, #28]	@ (80084bc <vPortFree+0xc4>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	3301      	adds	r3, #1
 80084a2:	4a06      	ldr	r2, [pc, #24]	@ (80084bc <vPortFree+0xc4>)
 80084a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80084a6:	f7ff f855 	bl	8007554 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084aa:	bf00      	nop
 80084ac:	3718      	adds	r7, #24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	20004064 	.word	0x20004064
 80084b8:	20004054 	.word	0x20004054
 80084bc:	20004060 	.word	0x20004060

080084c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084c6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80084ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084cc:	4b27      	ldr	r3, [pc, #156]	@ (800856c <prvHeapInit+0xac>)
 80084ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f003 0307 	and.w	r3, r3, #7
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00c      	beq.n	80084f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3307      	adds	r3, #7
 80084de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f023 0307 	bic.w	r3, r3, #7
 80084e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084e8:	68ba      	ldr	r2, [r7, #8]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	4a1f      	ldr	r2, [pc, #124]	@ (800856c <prvHeapInit+0xac>)
 80084f0:	4413      	add	r3, r2
 80084f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084f8:	4a1d      	ldr	r2, [pc, #116]	@ (8008570 <prvHeapInit+0xb0>)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80084fe:	4b1c      	ldr	r3, [pc, #112]	@ (8008570 <prvHeapInit+0xb0>)
 8008500:	2200      	movs	r2, #0
 8008502:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68ba      	ldr	r2, [r7, #8]
 8008508:	4413      	add	r3, r2
 800850a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800850c:	2208      	movs	r2, #8
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	1a9b      	subs	r3, r3, r2
 8008512:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f023 0307 	bic.w	r3, r3, #7
 800851a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4a15      	ldr	r2, [pc, #84]	@ (8008574 <prvHeapInit+0xb4>)
 8008520:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008522:	4b14      	ldr	r3, [pc, #80]	@ (8008574 <prvHeapInit+0xb4>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2200      	movs	r2, #0
 8008528:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800852a:	4b12      	ldr	r3, [pc, #72]	@ (8008574 <prvHeapInit+0xb4>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2200      	movs	r2, #0
 8008530:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	1ad2      	subs	r2, r2, r3
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008540:	4b0c      	ldr	r3, [pc, #48]	@ (8008574 <prvHeapInit+0xb4>)
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	4a0a      	ldr	r2, [pc, #40]	@ (8008578 <prvHeapInit+0xb8>)
 800854e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	4a09      	ldr	r2, [pc, #36]	@ (800857c <prvHeapInit+0xbc>)
 8008556:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008558:	4b09      	ldr	r3, [pc, #36]	@ (8008580 <prvHeapInit+0xc0>)
 800855a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800855e:	601a      	str	r2, [r3, #0]
}
 8008560:	bf00      	nop
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	20001938 	.word	0x20001938
 8008570:	20004048 	.word	0x20004048
 8008574:	20004050 	.word	0x20004050
 8008578:	20004058 	.word	0x20004058
 800857c:	20004054 	.word	0x20004054
 8008580:	20004064 	.word	0x20004064

08008584 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800858c:	4b28      	ldr	r3, [pc, #160]	@ (8008630 <prvInsertBlockIntoFreeList+0xac>)
 800858e:	60fb      	str	r3, [r7, #12]
 8008590:	e002      	b.n	8008598 <prvInsertBlockIntoFreeList+0x14>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	60fb      	str	r3, [r7, #12]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d8f7      	bhi.n	8008592 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	4413      	add	r3, r2
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d108      	bne.n	80085c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	685a      	ldr	r2, [r3, #4]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	441a      	add	r2, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	68ba      	ldr	r2, [r7, #8]
 80085d0:	441a      	add	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d118      	bne.n	800860c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	4b15      	ldr	r3, [pc, #84]	@ (8008634 <prvInsertBlockIntoFreeList+0xb0>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d00d      	beq.n	8008602 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	685a      	ldr	r2, [r3, #4]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	441a      	add	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	601a      	str	r2, [r3, #0]
 8008600:	e008      	b.n	8008614 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008602:	4b0c      	ldr	r3, [pc, #48]	@ (8008634 <prvInsertBlockIntoFreeList+0xb0>)
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	601a      	str	r2, [r3, #0]
 800860a:	e003      	b.n	8008614 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	429a      	cmp	r2, r3
 800861a:	d002      	beq.n	8008622 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008622:	bf00      	nop
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	20004048 	.word	0x20004048
 8008634:	20004050 	.word	0x20004050

08008638 <SPI_Write>:


TaskHandle_t Bump_task = NULL;


void SPI_Write(uint8_t reg, uint8_t value) {
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	4603      	mov	r3, r0
 8008640:	460a      	mov	r2, r1
 8008642:	71fb      	strb	r3, [r7, #7]
 8008644:	4613      	mov	r3, r2
 8008646:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg | 0x40;
 8008648:	79fb      	ldrb	r3, [r7, #7]
 800864a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800864e:	b2db      	uxtb	r3, r3
 8008650:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8008652:	79bb      	ldrb	r3, [r7, #6]
 8008654:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_RESET);
 8008656:	2200      	movs	r2, #0
 8008658:	2120      	movs	r1, #32
 800865a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800865e:	f7fa fbbf 	bl	8002de0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, data, 2, HAL_MAX_DELAY);
 8008662:	f107 010c 	add.w	r1, r7, #12
 8008666:	f04f 33ff 	mov.w	r3, #4294967295
 800866a:	2202      	movs	r2, #2
 800866c:	4806      	ldr	r0, [pc, #24]	@ (8008688 <SPI_Write+0x50>)
 800866e:	f7fb fc60 	bl	8003f32 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_SET);
 8008672:	2201      	movs	r2, #1
 8008674:	2120      	movs	r1, #32
 8008676:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800867a:	f7fa fbb1 	bl	8002de0 <HAL_GPIO_WritePin>
}
 800867e:	bf00      	nop
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	200014e0 	.word	0x200014e0

0800868c <SPI_Read>:

uint8_t SPI_Read(uint8_t reg) {
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	4603      	mov	r3, r0
 8008694:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_data = reg | 0x80;
 8008696:	79fb      	ldrb	r3, [r7, #7]
 8008698:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800869c:	b2db      	uxtb	r3, r3
 800869e:	73fb      	strb	r3, [r7, #15]
	uint8_t rx_data = 0;
 80086a0:	2300      	movs	r3, #0
 80086a2:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_RESET);
 80086a4:	2200      	movs	r2, #0
 80086a6:	2120      	movs	r1, #32
 80086a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80086ac:	f7fa fb98 	bl	8002de0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &tx_data, 1, HAL_MAX_DELAY);
 80086b0:	f107 010f 	add.w	r1, r7, #15
 80086b4:	f04f 33ff 	mov.w	r3, #4294967295
 80086b8:	2201      	movs	r2, #1
 80086ba:	480b      	ldr	r0, [pc, #44]	@ (80086e8 <SPI_Read+0x5c>)
 80086bc:	f7fb fc39 	bl	8003f32 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &rx_data, 1, HAL_MAX_DELAY);
 80086c0:	f107 010e 	add.w	r1, r7, #14
 80086c4:	f04f 33ff 	mov.w	r3, #4294967295
 80086c8:	2201      	movs	r2, #1
 80086ca:	4807      	ldr	r0, [pc, #28]	@ (80086e8 <SPI_Read+0x5c>)
 80086cc:	f7fb fda6 	bl	800421c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_SET);
 80086d0:	2201      	movs	r2, #1
 80086d2:	2120      	movs	r1, #32
 80086d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80086d8:	f7fa fb82 	bl	8002de0 <HAL_GPIO_WritePin>

	return rx_data;
 80086dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	200014e0 	.word	0x200014e0

080086ec <ADXL343_Init>:
	accel_data[2] = (float)raw_accel[2]; // Accélération Z en g

	return HAL_OK;
}

void ADXL343_Init(void) {
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
	uint8_t devid = SPI_Read(ADXL343_REG_DEVID);  // Lire le registre DEVID (0x00)
 80086f2:	2000      	movs	r0, #0
 80086f4:	f7ff ffca 	bl	800868c <SPI_Read>
 80086f8:	4603      	mov	r3, r0
 80086fa:	73fb      	strb	r3, [r7, #15]

	if (devid == 0xE5) {
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
 80086fe:	2be5      	cmp	r3, #229	@ 0xe5
 8008700:	d135      	bne.n	800876e <ADXL343_Init+0x82>
		// Le composant est détecté, procéder à l'initialisation

		SPI_Write(ADXL343_REG_POWER_CTL, 0x00);  // Désactiver appareil
 8008702:	2100      	movs	r1, #0
 8008704:	202d      	movs	r0, #45	@ 0x2d
 8008706:	f7ff ff97 	bl	8008638 <SPI_Write>
		SPI_Write(ADXL343_REG_DATA_FORMAT, 0x00);  // DATA_FORMAT : FULL_RES = 1, RANGE = ±2g
 800870a:	2100      	movs	r1, #0
 800870c:	2031      	movs	r0, #49	@ 0x31
 800870e:	f7ff ff93 	bl	8008638 <SPI_Write>
		SPI_Write(ADXL343_REG_INT_ENABLE, 0x00);  // Désactiver interruption
 8008712:	2100      	movs	r1, #0
 8008714:	202e      	movs	r0, #46	@ 0x2e
 8008716:	f7ff ff8f 	bl	8008638 <SPI_Write>
		SPI_Write(ADXL343_REG_THRESH_TAP, 0x20);	// Config seuil choc
 800871a:	2120      	movs	r1, #32
 800871c:	201d      	movs	r0, #29
 800871e:	f7ff ff8b 	bl	8008638 <SPI_Write>
		SPI_Write(ADXL343_REG_DUR, 0x20);	// Config durée choc
 8008722:	2120      	movs	r1, #32
 8008724:	2021      	movs	r0, #33	@ 0x21
 8008726:	f7ff ff87 	bl	8008638 <SPI_Write>
		SPI_Write(ADXL343_REG_LATENT, 0xC8);	// Config latence choc
 800872a:	21c8      	movs	r1, #200	@ 0xc8
 800872c:	2022      	movs	r0, #34	@ 0x22
 800872e:	f7ff ff83 	bl	8008638 <SPI_Write>
		SPI_Write(ADXL343_REG_TAP_AXES, 0x06);	// Activer axe X Y
 8008732:	2106      	movs	r1, #6
 8008734:	202a      	movs	r0, #42	@ 0x2a
 8008736:	f7ff ff7f 	bl	8008638 <SPI_Write>
		SPI_Write(ADXL343_REG_BW_RATE, 0x0F);  // Configurer la bande passante
 800873a:	210f      	movs	r1, #15
 800873c:	202c      	movs	r0, #44	@ 0x2c
 800873e:	f7ff ff7b 	bl	8008638 <SPI_Write>
		SPI_Write(ADXL343_REG_INT_MAP, 0x40);	// Configurer pin interruption
 8008742:	2140      	movs	r1, #64	@ 0x40
 8008744:	202f      	movs	r0, #47	@ 0x2f
 8008746:	f7ff ff77 	bl	8008638 <SPI_Write>
		SPI_Write(ADXL343_REG_INT_ENABLE, 0x40);  // Activer interruption
 800874a:	2140      	movs	r1, #64	@ 0x40
 800874c:	202e      	movs	r0, #46	@ 0x2e
 800874e:	f7ff ff73 	bl	8008638 <SPI_Write>
		//Read_Acceleration(float *accel_data);    // Lire les données pour effacer l'interruption

		char *msg = "ADXL343 detecte et initialise !\r\n";
 8008752:	4b0f      	ldr	r3, [pc, #60]	@ (8008790 <ADXL343_Init+0xa4>)
 8008754:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f7f7 fdb2 	bl	80002c0 <strlen>
 800875c:	4603      	mov	r3, r0
 800875e:	b29a      	uxth	r2, r3
 8008760:	f04f 33ff 	mov.w	r3, #4294967295
 8008764:	6879      	ldr	r1, [r7, #4]
 8008766:	480b      	ldr	r0, [pc, #44]	@ (8008794 <ADXL343_Init+0xa8>)
 8008768:	f7fd fa96 	bl	8005c98 <HAL_UART_Transmit>
	} else {
		char *error_msg = "Erreur : ADXL343 non detecte !\r\n";
		HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
	}
}
 800876c:	e00c      	b.n	8008788 <ADXL343_Init+0x9c>
		char *error_msg = "Erreur : ADXL343 non detecte !\r\n";
 800876e:	4b0a      	ldr	r3, [pc, #40]	@ (8008798 <ADXL343_Init+0xac>)
 8008770:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8008772:	68b8      	ldr	r0, [r7, #8]
 8008774:	f7f7 fda4 	bl	80002c0 <strlen>
 8008778:	4603      	mov	r3, r0
 800877a:	b29a      	uxth	r2, r3
 800877c:	f04f 33ff 	mov.w	r3, #4294967295
 8008780:	68b9      	ldr	r1, [r7, #8]
 8008782:	4804      	ldr	r0, [pc, #16]	@ (8008794 <ADXL343_Init+0xa8>)
 8008784:	f7fd fa88 	bl	8005c98 <HAL_UART_Transmit>
}
 8008788:	bf00      	nop
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	0800d1dc 	.word	0x0800d1dc
 8008794:	20001678 	.word	0x20001678
 8008798:	0800d200 	.word	0x0800d200

0800879c <Start_Motors>:
    TIM1->CCR2 = 0;
    TIM2->CCR1 = 0;
    TIM2->CCR2 = 0;
}

void Start_Motors(void) {
 800879c:	b580      	push	{r7, lr}
 800879e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80087a0:	2100      	movs	r1, #0
 80087a2:	480f      	ldr	r0, [pc, #60]	@ (80087e0 <Start_Motors+0x44>)
 80087a4:	f7fc faa8 	bl	8004cf8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80087a8:	2104      	movs	r1, #4
 80087aa:	480d      	ldr	r0, [pc, #52]	@ (80087e0 <Start_Motors+0x44>)
 80087ac:	f7fc faa4 	bl	8004cf8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80087b0:	2100      	movs	r1, #0
 80087b2:	480c      	ldr	r0, [pc, #48]	@ (80087e4 <Start_Motors+0x48>)
 80087b4:	f7fc faa0 	bl	8004cf8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80087b8:	2104      	movs	r1, #4
 80087ba:	480a      	ldr	r0, [pc, #40]	@ (80087e4 <Start_Motors+0x48>)
 80087bc:	f7fc fa9c 	bl	8004cf8 <HAL_TIM_PWM_Start>
    TIM1->CCR1 = 0;
 80087c0:	4b09      	ldr	r3, [pc, #36]	@ (80087e8 <Start_Motors+0x4c>)
 80087c2:	2200      	movs	r2, #0
 80087c4:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 = 0;
 80087c6:	4b08      	ldr	r3, [pc, #32]	@ (80087e8 <Start_Motors+0x4c>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->CCR1 = 0;
 80087cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80087d0:	2200      	movs	r2, #0
 80087d2:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = 0;
 80087d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80087d8:	2200      	movs	r2, #0
 80087da:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80087dc:	bf00      	nop
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	20001548 	.word	0x20001548
 80087e4:	20001594 	.word	0x20001594
 80087e8:	40012c00 	.word	0x40012c00

080087ec <Motor_SetSpeed_L>:
        // Délai pour un changement progressif
        HAL_Delay(10);
    }
}

void Motor_SetSpeed_L(int percentage) {
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
    static int currentSpeed_L = 0;  // Maintenir la vitesse actuelle (moteur gauche)
    int step = (percentage > currentSpeed_L) ? 1 : -1; // Déterminer le pas (incrément ou décrément)
 80087f4:	4b3d      	ldr	r3, [pc, #244]	@ (80088ec <Motor_SetSpeed_L+0x100>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	dd01      	ble.n	8008802 <Motor_SetSpeed_L+0x16>
 80087fe:	2301      	movs	r3, #1
 8008800:	e001      	b.n	8008806 <Motor_SetSpeed_L+0x1a>
 8008802:	f04f 33ff 	mov.w	r3, #4294967295
 8008806:	60fb      	str	r3, [r7, #12]

    // Limiter la cible au pourcentage maximal autorisé
    if (percentage > 100) percentage = 100;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2b64      	cmp	r3, #100	@ 0x64
 800880c:	dd01      	ble.n	8008812 <Motor_SetSpeed_L+0x26>
 800880e:	2364      	movs	r3, #100	@ 0x64
 8008810:	607b      	str	r3, [r7, #4]
    if (percentage < -100) percentage = -100;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8008818:	da5e      	bge.n	80088d8 <Motor_SetSpeed_L+0xec>
 800881a:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800881e:	607b      	str	r3, [r7, #4]

    // Effectuer un ramp-up ou ramp-down jusqu'à la vitesse cible
    while (currentSpeed_L != percentage) {
 8008820:	e05a      	b.n	80088d8 <Motor_SetSpeed_L+0xec>
        currentSpeed_L += step;
 8008822:	4b32      	ldr	r3, [pc, #200]	@ (80088ec <Motor_SetSpeed_L+0x100>)
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	4413      	add	r3, r2
 800882a:	4a30      	ldr	r2, [pc, #192]	@ (80088ec <Motor_SetSpeed_L+0x100>)
 800882c:	6013      	str	r3, [r2, #0]

        if (currentSpeed_L > 0) {
 800882e:	4b2f      	ldr	r3, [pc, #188]	@ (80088ec <Motor_SetSpeed_L+0x100>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	dd1a      	ble.n	800886c <Motor_SetSpeed_L+0x80>
            // Motor Forward
            HAL_GPIO_WritePin(REV_GPIO_PORT_L, REV_GPIO_PIN_L, GPIO_PIN_RESET); // Stop Reverse
 8008836:	2200      	movs	r2, #0
 8008838:	2102      	movs	r1, #2
 800883a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800883e:	f7fa facf 	bl	8002de0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(FWD_GPIO_PORT_L, FWD_GPIO_PIN_L, GPIO_PIN_SET);   // Start Forward
 8008842:	2201      	movs	r2, #1
 8008844:	2101      	movs	r1, #1
 8008846:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800884a:	f7fa fac9 	bl	8002de0 <HAL_GPIO_WritePin>
            TIM2->CCR1 = (PWM_MAX_DUTY_CYCLE * currentSpeed_L) / 100;           // Ajuster le rapport cyclique sur CCR1
 800884e:	4b27      	ldr	r3, [pc, #156]	@ (80088ec <Motor_SetSpeed_L+0x100>)
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	4613      	mov	r3, r2
 8008854:	041b      	lsls	r3, r3, #16
 8008856:	1a9b      	subs	r3, r3, r2
 8008858:	4a25      	ldr	r2, [pc, #148]	@ (80088f0 <Motor_SetSpeed_L+0x104>)
 800885a:	fb82 1203 	smull	r1, r2, r2, r3
 800885e:	1152      	asrs	r2, r2, #5
 8008860:	17db      	asrs	r3, r3, #31
 8008862:	1ad2      	subs	r2, r2, r3
 8008864:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008868:	635a      	str	r2, [r3, #52]	@ 0x34
 800886a:	e032      	b.n	80088d2 <Motor_SetSpeed_L+0xe6>
        } else if (currentSpeed_L < 0) {
 800886c:	4b1f      	ldr	r3, [pc, #124]	@ (80088ec <Motor_SetSpeed_L+0x100>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	da1a      	bge.n	80088aa <Motor_SetSpeed_L+0xbe>
            // Motor Reverse
            HAL_GPIO_WritePin(FWD_GPIO_PORT_L, FWD_GPIO_PIN_L, GPIO_PIN_RESET); // Stop Forward
 8008874:	2200      	movs	r2, #0
 8008876:	2101      	movs	r1, #1
 8008878:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800887c:	f7fa fab0 	bl	8002de0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(REV_GPIO_PORT_L, REV_GPIO_PIN_L, GPIO_PIN_SET);   // Start Reverse
 8008880:	2201      	movs	r2, #1
 8008882:	2102      	movs	r1, #2
 8008884:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008888:	f7fa faaa 	bl	8002de0 <HAL_GPIO_WritePin>
            TIM2->CCR2 = (PWM_MAX_DUTY_CYCLE * -currentSpeed_L) / 100;          // Ajuster le rapport cyclique sur CCR2
 800888c:	4b17      	ldr	r3, [pc, #92]	@ (80088ec <Motor_SetSpeed_L+0x100>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	461a      	mov	r2, r3
 8008892:	041b      	lsls	r3, r3, #16
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	4a16      	ldr	r2, [pc, #88]	@ (80088f0 <Motor_SetSpeed_L+0x104>)
 8008898:	fb82 1203 	smull	r1, r2, r2, r3
 800889c:	1152      	asrs	r2, r2, #5
 800889e:	17db      	asrs	r3, r3, #31
 80088a0:	1ad2      	subs	r2, r2, r3
 80088a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80088a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80088a8:	e013      	b.n	80088d2 <Motor_SetSpeed_L+0xe6>
        } else {
            // Stop both directions
            HAL_GPIO_WritePin(FWD_GPIO_PORT_L, FWD_GPIO_PIN_L, GPIO_PIN_RESET);
 80088aa:	2200      	movs	r2, #0
 80088ac:	2101      	movs	r1, #1
 80088ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80088b2:	f7fa fa95 	bl	8002de0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(REV_GPIO_PORT_L, REV_GPIO_PIN_L, GPIO_PIN_RESET);
 80088b6:	2200      	movs	r2, #0
 80088b8:	2102      	movs	r1, #2
 80088ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80088be:	f7fa fa8f 	bl	8002de0 <HAL_GPIO_WritePin>
            TIM2->CCR1 = 0;  // Désactiver Forward
 80088c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80088c6:	2200      	movs	r2, #0
 80088c8:	635a      	str	r2, [r3, #52]	@ 0x34
            TIM2->CCR2 = 0;  // Désactiver Reverse
 80088ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80088ce:	2200      	movs	r2, #0
 80088d0:	639a      	str	r2, [r3, #56]	@ 0x38
        }

        // Délai pour un changement progressif
        HAL_Delay(10);
 80088d2:	200a      	movs	r0, #10
 80088d4:	f7f9 fd5e 	bl	8002394 <HAL_Delay>
    while (currentSpeed_L != percentage) {
 80088d8:	4b04      	ldr	r3, [pc, #16]	@ (80088ec <Motor_SetSpeed_L+0x100>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d19f      	bne.n	8008822 <Motor_SetSpeed_L+0x36>
    }
}
 80088e2:	bf00      	nop
 80088e4:	bf00      	nop
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	20004068 	.word	0x20004068
 80088f0:	51eb851f 	.word	0x51eb851f

080088f4 <LIDAR_Init>:

/*
 * @brief Initialization of the lidar
 * @param
 */
void LIDAR_Init(LIDAR_HandleTypeDef_t * hlidar){
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
	hlidar->huart = &huart3;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a09      	ldr	r2, [pc, #36]	@ (8008924 <LIDAR_Init+0x30>)
 8008900:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, DEV_EN_LIDAR_Pin, GPIO_PIN_SET);
 8008902:	2201      	movs	r2, #1
 8008904:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008908:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800890c:	f7fa fa68 	bl	8002de0 <HAL_GPIO_WritePin>
	// Enable M_EN lidar
	HAL_GPIO_WritePin(M_EN_LIDAR_GPIO_Port, M_EN_LIDAR_Pin, GPIO_PIN_SET);
 8008910:	2201      	movs	r2, #1
 8008912:	2104      	movs	r1, #4
 8008914:	4804      	ldr	r0, [pc, #16]	@ (8008928 <LIDAR_Init+0x34>)
 8008916:	f7fa fa63 	bl	8002de0 <HAL_GPIO_WritePin>

}
 800891a:	bf00      	nop
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	2000170c 	.word	0x2000170c
 8008928:	48000400 	.word	0x48000400

0800892c <LIDAR_Start>:

/*
 * @brief
 * @param
 */
HAL_StatusTypeDef LIDAR_Start(LIDAR_HandleTypeDef_t * hlidar){
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
	uint8_t lidar_command[2] = {START_CMD_LIDAR, SCAN_CMD_LIDAR};
 8008934:	f246 03a5 	movw	r3, #24741	@ 0x60a5
 8008938:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_UART_Transmit(hlidar->huart, lidar_command, 2, 2000);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6818      	ldr	r0, [r3, #0]
 800893e:	f107 010c 	add.w	r1, r7, #12
 8008942:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8008946:	2202      	movs	r2, #2
 8008948:	f7fd f9a6 	bl	8005c98 <HAL_UART_Transmit>
 800894c:	4603      	mov	r3, r0
 800894e:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK){
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10a      	bne.n	800896c <LIDAR_Start+0x40>
		HAL_UART_Receive_DMA(hlidar->huart, hlidar->data_buff, DATA_BUFF_SIZE_LIDAR);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6818      	ldr	r0, [r3, #0]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	3329      	adds	r3, #41	@ 0x29
 800895e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008962:	4619      	mov	r1, r3
 8008964:	f7fd fa26 	bl	8005db4 <HAL_UART_Receive_DMA>
		return status;
 8008968:	7bfb      	ldrb	r3, [r7, #15]
 800896a:	e000      	b.n	800896e <LIDAR_Start+0x42>
	}
	else{
		return status;
 800896c:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <__cvt>:
 8008976:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800897a:	ec57 6b10 	vmov	r6, r7, d0
 800897e:	2f00      	cmp	r7, #0
 8008980:	460c      	mov	r4, r1
 8008982:	4619      	mov	r1, r3
 8008984:	463b      	mov	r3, r7
 8008986:	bfbb      	ittet	lt
 8008988:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800898c:	461f      	movlt	r7, r3
 800898e:	2300      	movge	r3, #0
 8008990:	232d      	movlt	r3, #45	@ 0x2d
 8008992:	700b      	strb	r3, [r1, #0]
 8008994:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008996:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800899a:	4691      	mov	r9, r2
 800899c:	f023 0820 	bic.w	r8, r3, #32
 80089a0:	bfbc      	itt	lt
 80089a2:	4632      	movlt	r2, r6
 80089a4:	4616      	movlt	r6, r2
 80089a6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80089aa:	d005      	beq.n	80089b8 <__cvt+0x42>
 80089ac:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80089b0:	d100      	bne.n	80089b4 <__cvt+0x3e>
 80089b2:	3401      	adds	r4, #1
 80089b4:	2102      	movs	r1, #2
 80089b6:	e000      	b.n	80089ba <__cvt+0x44>
 80089b8:	2103      	movs	r1, #3
 80089ba:	ab03      	add	r3, sp, #12
 80089bc:	9301      	str	r3, [sp, #4]
 80089be:	ab02      	add	r3, sp, #8
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	ec47 6b10 	vmov	d0, r6, r7
 80089c6:	4653      	mov	r3, sl
 80089c8:	4622      	mov	r2, r4
 80089ca:	f001 f975 	bl	8009cb8 <_dtoa_r>
 80089ce:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80089d2:	4605      	mov	r5, r0
 80089d4:	d119      	bne.n	8008a0a <__cvt+0x94>
 80089d6:	f019 0f01 	tst.w	r9, #1
 80089da:	d00e      	beq.n	80089fa <__cvt+0x84>
 80089dc:	eb00 0904 	add.w	r9, r0, r4
 80089e0:	2200      	movs	r2, #0
 80089e2:	2300      	movs	r3, #0
 80089e4:	4630      	mov	r0, r6
 80089e6:	4639      	mov	r1, r7
 80089e8:	f7f8 f896 	bl	8000b18 <__aeabi_dcmpeq>
 80089ec:	b108      	cbz	r0, 80089f2 <__cvt+0x7c>
 80089ee:	f8cd 900c 	str.w	r9, [sp, #12]
 80089f2:	2230      	movs	r2, #48	@ 0x30
 80089f4:	9b03      	ldr	r3, [sp, #12]
 80089f6:	454b      	cmp	r3, r9
 80089f8:	d31e      	bcc.n	8008a38 <__cvt+0xc2>
 80089fa:	9b03      	ldr	r3, [sp, #12]
 80089fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089fe:	1b5b      	subs	r3, r3, r5
 8008a00:	4628      	mov	r0, r5
 8008a02:	6013      	str	r3, [r2, #0]
 8008a04:	b004      	add	sp, #16
 8008a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008a0e:	eb00 0904 	add.w	r9, r0, r4
 8008a12:	d1e5      	bne.n	80089e0 <__cvt+0x6a>
 8008a14:	7803      	ldrb	r3, [r0, #0]
 8008a16:	2b30      	cmp	r3, #48	@ 0x30
 8008a18:	d10a      	bne.n	8008a30 <__cvt+0xba>
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	4630      	mov	r0, r6
 8008a20:	4639      	mov	r1, r7
 8008a22:	f7f8 f879 	bl	8000b18 <__aeabi_dcmpeq>
 8008a26:	b918      	cbnz	r0, 8008a30 <__cvt+0xba>
 8008a28:	f1c4 0401 	rsb	r4, r4, #1
 8008a2c:	f8ca 4000 	str.w	r4, [sl]
 8008a30:	f8da 3000 	ldr.w	r3, [sl]
 8008a34:	4499      	add	r9, r3
 8008a36:	e7d3      	b.n	80089e0 <__cvt+0x6a>
 8008a38:	1c59      	adds	r1, r3, #1
 8008a3a:	9103      	str	r1, [sp, #12]
 8008a3c:	701a      	strb	r2, [r3, #0]
 8008a3e:	e7d9      	b.n	80089f4 <__cvt+0x7e>

08008a40 <__exponent>:
 8008a40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a42:	2900      	cmp	r1, #0
 8008a44:	bfba      	itte	lt
 8008a46:	4249      	neglt	r1, r1
 8008a48:	232d      	movlt	r3, #45	@ 0x2d
 8008a4a:	232b      	movge	r3, #43	@ 0x2b
 8008a4c:	2909      	cmp	r1, #9
 8008a4e:	7002      	strb	r2, [r0, #0]
 8008a50:	7043      	strb	r3, [r0, #1]
 8008a52:	dd29      	ble.n	8008aa8 <__exponent+0x68>
 8008a54:	f10d 0307 	add.w	r3, sp, #7
 8008a58:	461d      	mov	r5, r3
 8008a5a:	270a      	movs	r7, #10
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	fbb1 f6f7 	udiv	r6, r1, r7
 8008a62:	fb07 1416 	mls	r4, r7, r6, r1
 8008a66:	3430      	adds	r4, #48	@ 0x30
 8008a68:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008a6c:	460c      	mov	r4, r1
 8008a6e:	2c63      	cmp	r4, #99	@ 0x63
 8008a70:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a74:	4631      	mov	r1, r6
 8008a76:	dcf1      	bgt.n	8008a5c <__exponent+0x1c>
 8008a78:	3130      	adds	r1, #48	@ 0x30
 8008a7a:	1e94      	subs	r4, r2, #2
 8008a7c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008a80:	1c41      	adds	r1, r0, #1
 8008a82:	4623      	mov	r3, r4
 8008a84:	42ab      	cmp	r3, r5
 8008a86:	d30a      	bcc.n	8008a9e <__exponent+0x5e>
 8008a88:	f10d 0309 	add.w	r3, sp, #9
 8008a8c:	1a9b      	subs	r3, r3, r2
 8008a8e:	42ac      	cmp	r4, r5
 8008a90:	bf88      	it	hi
 8008a92:	2300      	movhi	r3, #0
 8008a94:	3302      	adds	r3, #2
 8008a96:	4403      	add	r3, r0
 8008a98:	1a18      	subs	r0, r3, r0
 8008a9a:	b003      	add	sp, #12
 8008a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a9e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008aa2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008aa6:	e7ed      	b.n	8008a84 <__exponent+0x44>
 8008aa8:	2330      	movs	r3, #48	@ 0x30
 8008aaa:	3130      	adds	r1, #48	@ 0x30
 8008aac:	7083      	strb	r3, [r0, #2]
 8008aae:	70c1      	strb	r1, [r0, #3]
 8008ab0:	1d03      	adds	r3, r0, #4
 8008ab2:	e7f1      	b.n	8008a98 <__exponent+0x58>

08008ab4 <_printf_float>:
 8008ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab8:	b08d      	sub	sp, #52	@ 0x34
 8008aba:	460c      	mov	r4, r1
 8008abc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008ac0:	4616      	mov	r6, r2
 8008ac2:	461f      	mov	r7, r3
 8008ac4:	4605      	mov	r5, r0
 8008ac6:	f000 ffe1 	bl	8009a8c <_localeconv_r>
 8008aca:	6803      	ldr	r3, [r0, #0]
 8008acc:	9304      	str	r3, [sp, #16]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7f7 fbf6 	bl	80002c0 <strlen>
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ad8:	f8d8 3000 	ldr.w	r3, [r8]
 8008adc:	9005      	str	r0, [sp, #20]
 8008ade:	3307      	adds	r3, #7
 8008ae0:	f023 0307 	bic.w	r3, r3, #7
 8008ae4:	f103 0208 	add.w	r2, r3, #8
 8008ae8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008aec:	f8d4 b000 	ldr.w	fp, [r4]
 8008af0:	f8c8 2000 	str.w	r2, [r8]
 8008af4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008af8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008afc:	9307      	str	r3, [sp, #28]
 8008afe:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b02:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008b06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b0a:	4b9c      	ldr	r3, [pc, #624]	@ (8008d7c <_printf_float+0x2c8>)
 8008b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b10:	f7f8 f834 	bl	8000b7c <__aeabi_dcmpun>
 8008b14:	bb70      	cbnz	r0, 8008b74 <_printf_float+0xc0>
 8008b16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b1a:	4b98      	ldr	r3, [pc, #608]	@ (8008d7c <_printf_float+0x2c8>)
 8008b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b20:	f7f8 f80e 	bl	8000b40 <__aeabi_dcmple>
 8008b24:	bb30      	cbnz	r0, 8008b74 <_printf_float+0xc0>
 8008b26:	2200      	movs	r2, #0
 8008b28:	2300      	movs	r3, #0
 8008b2a:	4640      	mov	r0, r8
 8008b2c:	4649      	mov	r1, r9
 8008b2e:	f7f7 fffd 	bl	8000b2c <__aeabi_dcmplt>
 8008b32:	b110      	cbz	r0, 8008b3a <_printf_float+0x86>
 8008b34:	232d      	movs	r3, #45	@ 0x2d
 8008b36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b3a:	4a91      	ldr	r2, [pc, #580]	@ (8008d80 <_printf_float+0x2cc>)
 8008b3c:	4b91      	ldr	r3, [pc, #580]	@ (8008d84 <_printf_float+0x2d0>)
 8008b3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008b42:	bf94      	ite	ls
 8008b44:	4690      	movls	r8, r2
 8008b46:	4698      	movhi	r8, r3
 8008b48:	2303      	movs	r3, #3
 8008b4a:	6123      	str	r3, [r4, #16]
 8008b4c:	f02b 0304 	bic.w	r3, fp, #4
 8008b50:	6023      	str	r3, [r4, #0]
 8008b52:	f04f 0900 	mov.w	r9, #0
 8008b56:	9700      	str	r7, [sp, #0]
 8008b58:	4633      	mov	r3, r6
 8008b5a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	4628      	mov	r0, r5
 8008b60:	f000 f9d2 	bl	8008f08 <_printf_common>
 8008b64:	3001      	adds	r0, #1
 8008b66:	f040 808d 	bne.w	8008c84 <_printf_float+0x1d0>
 8008b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b6e:	b00d      	add	sp, #52	@ 0x34
 8008b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b74:	4642      	mov	r2, r8
 8008b76:	464b      	mov	r3, r9
 8008b78:	4640      	mov	r0, r8
 8008b7a:	4649      	mov	r1, r9
 8008b7c:	f7f7 fffe 	bl	8000b7c <__aeabi_dcmpun>
 8008b80:	b140      	cbz	r0, 8008b94 <_printf_float+0xe0>
 8008b82:	464b      	mov	r3, r9
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	bfbc      	itt	lt
 8008b88:	232d      	movlt	r3, #45	@ 0x2d
 8008b8a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008b8e:	4a7e      	ldr	r2, [pc, #504]	@ (8008d88 <_printf_float+0x2d4>)
 8008b90:	4b7e      	ldr	r3, [pc, #504]	@ (8008d8c <_printf_float+0x2d8>)
 8008b92:	e7d4      	b.n	8008b3e <_printf_float+0x8a>
 8008b94:	6863      	ldr	r3, [r4, #4]
 8008b96:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008b9a:	9206      	str	r2, [sp, #24]
 8008b9c:	1c5a      	adds	r2, r3, #1
 8008b9e:	d13b      	bne.n	8008c18 <_printf_float+0x164>
 8008ba0:	2306      	movs	r3, #6
 8008ba2:	6063      	str	r3, [r4, #4]
 8008ba4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008ba8:	2300      	movs	r3, #0
 8008baa:	6022      	str	r2, [r4, #0]
 8008bac:	9303      	str	r3, [sp, #12]
 8008bae:	ab0a      	add	r3, sp, #40	@ 0x28
 8008bb0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008bb4:	ab09      	add	r3, sp, #36	@ 0x24
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	6861      	ldr	r1, [r4, #4]
 8008bba:	ec49 8b10 	vmov	d0, r8, r9
 8008bbe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	f7ff fed7 	bl	8008976 <__cvt>
 8008bc8:	9b06      	ldr	r3, [sp, #24]
 8008bca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008bcc:	2b47      	cmp	r3, #71	@ 0x47
 8008bce:	4680      	mov	r8, r0
 8008bd0:	d129      	bne.n	8008c26 <_printf_float+0x172>
 8008bd2:	1cc8      	adds	r0, r1, #3
 8008bd4:	db02      	blt.n	8008bdc <_printf_float+0x128>
 8008bd6:	6863      	ldr	r3, [r4, #4]
 8008bd8:	4299      	cmp	r1, r3
 8008bda:	dd41      	ble.n	8008c60 <_printf_float+0x1ac>
 8008bdc:	f1aa 0a02 	sub.w	sl, sl, #2
 8008be0:	fa5f fa8a 	uxtb.w	sl, sl
 8008be4:	3901      	subs	r1, #1
 8008be6:	4652      	mov	r2, sl
 8008be8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008bec:	9109      	str	r1, [sp, #36]	@ 0x24
 8008bee:	f7ff ff27 	bl	8008a40 <__exponent>
 8008bf2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008bf4:	1813      	adds	r3, r2, r0
 8008bf6:	2a01      	cmp	r2, #1
 8008bf8:	4681      	mov	r9, r0
 8008bfa:	6123      	str	r3, [r4, #16]
 8008bfc:	dc02      	bgt.n	8008c04 <_printf_float+0x150>
 8008bfe:	6822      	ldr	r2, [r4, #0]
 8008c00:	07d2      	lsls	r2, r2, #31
 8008c02:	d501      	bpl.n	8008c08 <_printf_float+0x154>
 8008c04:	3301      	adds	r3, #1
 8008c06:	6123      	str	r3, [r4, #16]
 8008c08:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d0a2      	beq.n	8008b56 <_printf_float+0xa2>
 8008c10:	232d      	movs	r3, #45	@ 0x2d
 8008c12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c16:	e79e      	b.n	8008b56 <_printf_float+0xa2>
 8008c18:	9a06      	ldr	r2, [sp, #24]
 8008c1a:	2a47      	cmp	r2, #71	@ 0x47
 8008c1c:	d1c2      	bne.n	8008ba4 <_printf_float+0xf0>
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1c0      	bne.n	8008ba4 <_printf_float+0xf0>
 8008c22:	2301      	movs	r3, #1
 8008c24:	e7bd      	b.n	8008ba2 <_printf_float+0xee>
 8008c26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008c2a:	d9db      	bls.n	8008be4 <_printf_float+0x130>
 8008c2c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008c30:	d118      	bne.n	8008c64 <_printf_float+0x1b0>
 8008c32:	2900      	cmp	r1, #0
 8008c34:	6863      	ldr	r3, [r4, #4]
 8008c36:	dd0b      	ble.n	8008c50 <_printf_float+0x19c>
 8008c38:	6121      	str	r1, [r4, #16]
 8008c3a:	b913      	cbnz	r3, 8008c42 <_printf_float+0x18e>
 8008c3c:	6822      	ldr	r2, [r4, #0]
 8008c3e:	07d0      	lsls	r0, r2, #31
 8008c40:	d502      	bpl.n	8008c48 <_printf_float+0x194>
 8008c42:	3301      	adds	r3, #1
 8008c44:	440b      	add	r3, r1
 8008c46:	6123      	str	r3, [r4, #16]
 8008c48:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008c4a:	f04f 0900 	mov.w	r9, #0
 8008c4e:	e7db      	b.n	8008c08 <_printf_float+0x154>
 8008c50:	b913      	cbnz	r3, 8008c58 <_printf_float+0x1a4>
 8008c52:	6822      	ldr	r2, [r4, #0]
 8008c54:	07d2      	lsls	r2, r2, #31
 8008c56:	d501      	bpl.n	8008c5c <_printf_float+0x1a8>
 8008c58:	3302      	adds	r3, #2
 8008c5a:	e7f4      	b.n	8008c46 <_printf_float+0x192>
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e7f2      	b.n	8008c46 <_printf_float+0x192>
 8008c60:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008c64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c66:	4299      	cmp	r1, r3
 8008c68:	db05      	blt.n	8008c76 <_printf_float+0x1c2>
 8008c6a:	6823      	ldr	r3, [r4, #0]
 8008c6c:	6121      	str	r1, [r4, #16]
 8008c6e:	07d8      	lsls	r0, r3, #31
 8008c70:	d5ea      	bpl.n	8008c48 <_printf_float+0x194>
 8008c72:	1c4b      	adds	r3, r1, #1
 8008c74:	e7e7      	b.n	8008c46 <_printf_float+0x192>
 8008c76:	2900      	cmp	r1, #0
 8008c78:	bfd4      	ite	le
 8008c7a:	f1c1 0202 	rsble	r2, r1, #2
 8008c7e:	2201      	movgt	r2, #1
 8008c80:	4413      	add	r3, r2
 8008c82:	e7e0      	b.n	8008c46 <_printf_float+0x192>
 8008c84:	6823      	ldr	r3, [r4, #0]
 8008c86:	055a      	lsls	r2, r3, #21
 8008c88:	d407      	bmi.n	8008c9a <_printf_float+0x1e6>
 8008c8a:	6923      	ldr	r3, [r4, #16]
 8008c8c:	4642      	mov	r2, r8
 8008c8e:	4631      	mov	r1, r6
 8008c90:	4628      	mov	r0, r5
 8008c92:	47b8      	blx	r7
 8008c94:	3001      	adds	r0, #1
 8008c96:	d12b      	bne.n	8008cf0 <_printf_float+0x23c>
 8008c98:	e767      	b.n	8008b6a <_printf_float+0xb6>
 8008c9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008c9e:	f240 80dd 	bls.w	8008e5c <_printf_float+0x3a8>
 8008ca2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	2300      	movs	r3, #0
 8008caa:	f7f7 ff35 	bl	8000b18 <__aeabi_dcmpeq>
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	d033      	beq.n	8008d1a <_printf_float+0x266>
 8008cb2:	4a37      	ldr	r2, [pc, #220]	@ (8008d90 <_printf_float+0x2dc>)
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	4631      	mov	r1, r6
 8008cb8:	4628      	mov	r0, r5
 8008cba:	47b8      	blx	r7
 8008cbc:	3001      	adds	r0, #1
 8008cbe:	f43f af54 	beq.w	8008b6a <_printf_float+0xb6>
 8008cc2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008cc6:	4543      	cmp	r3, r8
 8008cc8:	db02      	blt.n	8008cd0 <_printf_float+0x21c>
 8008cca:	6823      	ldr	r3, [r4, #0]
 8008ccc:	07d8      	lsls	r0, r3, #31
 8008cce:	d50f      	bpl.n	8008cf0 <_printf_float+0x23c>
 8008cd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cd4:	4631      	mov	r1, r6
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	47b8      	blx	r7
 8008cda:	3001      	adds	r0, #1
 8008cdc:	f43f af45 	beq.w	8008b6a <_printf_float+0xb6>
 8008ce0:	f04f 0900 	mov.w	r9, #0
 8008ce4:	f108 38ff 	add.w	r8, r8, #4294967295
 8008ce8:	f104 0a1a 	add.w	sl, r4, #26
 8008cec:	45c8      	cmp	r8, r9
 8008cee:	dc09      	bgt.n	8008d04 <_printf_float+0x250>
 8008cf0:	6823      	ldr	r3, [r4, #0]
 8008cf2:	079b      	lsls	r3, r3, #30
 8008cf4:	f100 8103 	bmi.w	8008efe <_printf_float+0x44a>
 8008cf8:	68e0      	ldr	r0, [r4, #12]
 8008cfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cfc:	4298      	cmp	r0, r3
 8008cfe:	bfb8      	it	lt
 8008d00:	4618      	movlt	r0, r3
 8008d02:	e734      	b.n	8008b6e <_printf_float+0xba>
 8008d04:	2301      	movs	r3, #1
 8008d06:	4652      	mov	r2, sl
 8008d08:	4631      	mov	r1, r6
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	47b8      	blx	r7
 8008d0e:	3001      	adds	r0, #1
 8008d10:	f43f af2b 	beq.w	8008b6a <_printf_float+0xb6>
 8008d14:	f109 0901 	add.w	r9, r9, #1
 8008d18:	e7e8      	b.n	8008cec <_printf_float+0x238>
 8008d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	dc39      	bgt.n	8008d94 <_printf_float+0x2e0>
 8008d20:	4a1b      	ldr	r2, [pc, #108]	@ (8008d90 <_printf_float+0x2dc>)
 8008d22:	2301      	movs	r3, #1
 8008d24:	4631      	mov	r1, r6
 8008d26:	4628      	mov	r0, r5
 8008d28:	47b8      	blx	r7
 8008d2a:	3001      	adds	r0, #1
 8008d2c:	f43f af1d 	beq.w	8008b6a <_printf_float+0xb6>
 8008d30:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008d34:	ea59 0303 	orrs.w	r3, r9, r3
 8008d38:	d102      	bne.n	8008d40 <_printf_float+0x28c>
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	07d9      	lsls	r1, r3, #31
 8008d3e:	d5d7      	bpl.n	8008cf0 <_printf_float+0x23c>
 8008d40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d44:	4631      	mov	r1, r6
 8008d46:	4628      	mov	r0, r5
 8008d48:	47b8      	blx	r7
 8008d4a:	3001      	adds	r0, #1
 8008d4c:	f43f af0d 	beq.w	8008b6a <_printf_float+0xb6>
 8008d50:	f04f 0a00 	mov.w	sl, #0
 8008d54:	f104 0b1a 	add.w	fp, r4, #26
 8008d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d5a:	425b      	negs	r3, r3
 8008d5c:	4553      	cmp	r3, sl
 8008d5e:	dc01      	bgt.n	8008d64 <_printf_float+0x2b0>
 8008d60:	464b      	mov	r3, r9
 8008d62:	e793      	b.n	8008c8c <_printf_float+0x1d8>
 8008d64:	2301      	movs	r3, #1
 8008d66:	465a      	mov	r2, fp
 8008d68:	4631      	mov	r1, r6
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	47b8      	blx	r7
 8008d6e:	3001      	adds	r0, #1
 8008d70:	f43f aefb 	beq.w	8008b6a <_printf_float+0xb6>
 8008d74:	f10a 0a01 	add.w	sl, sl, #1
 8008d78:	e7ee      	b.n	8008d58 <_printf_float+0x2a4>
 8008d7a:	bf00      	nop
 8008d7c:	7fefffff 	.word	0x7fefffff
 8008d80:	0800d264 	.word	0x0800d264
 8008d84:	0800d268 	.word	0x0800d268
 8008d88:	0800d26c 	.word	0x0800d26c
 8008d8c:	0800d270 	.word	0x0800d270
 8008d90:	0800d274 	.word	0x0800d274
 8008d94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008d96:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008d9a:	4553      	cmp	r3, sl
 8008d9c:	bfa8      	it	ge
 8008d9e:	4653      	movge	r3, sl
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	4699      	mov	r9, r3
 8008da4:	dc36      	bgt.n	8008e14 <_printf_float+0x360>
 8008da6:	f04f 0b00 	mov.w	fp, #0
 8008daa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008dae:	f104 021a 	add.w	r2, r4, #26
 8008db2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008db4:	9306      	str	r3, [sp, #24]
 8008db6:	eba3 0309 	sub.w	r3, r3, r9
 8008dba:	455b      	cmp	r3, fp
 8008dbc:	dc31      	bgt.n	8008e22 <_printf_float+0x36e>
 8008dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dc0:	459a      	cmp	sl, r3
 8008dc2:	dc3a      	bgt.n	8008e3a <_printf_float+0x386>
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	07da      	lsls	r2, r3, #31
 8008dc8:	d437      	bmi.n	8008e3a <_printf_float+0x386>
 8008dca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dcc:	ebaa 0903 	sub.w	r9, sl, r3
 8008dd0:	9b06      	ldr	r3, [sp, #24]
 8008dd2:	ebaa 0303 	sub.w	r3, sl, r3
 8008dd6:	4599      	cmp	r9, r3
 8008dd8:	bfa8      	it	ge
 8008dda:	4699      	movge	r9, r3
 8008ddc:	f1b9 0f00 	cmp.w	r9, #0
 8008de0:	dc33      	bgt.n	8008e4a <_printf_float+0x396>
 8008de2:	f04f 0800 	mov.w	r8, #0
 8008de6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008dea:	f104 0b1a 	add.w	fp, r4, #26
 8008dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008df0:	ebaa 0303 	sub.w	r3, sl, r3
 8008df4:	eba3 0309 	sub.w	r3, r3, r9
 8008df8:	4543      	cmp	r3, r8
 8008dfa:	f77f af79 	ble.w	8008cf0 <_printf_float+0x23c>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	465a      	mov	r2, fp
 8008e02:	4631      	mov	r1, r6
 8008e04:	4628      	mov	r0, r5
 8008e06:	47b8      	blx	r7
 8008e08:	3001      	adds	r0, #1
 8008e0a:	f43f aeae 	beq.w	8008b6a <_printf_float+0xb6>
 8008e0e:	f108 0801 	add.w	r8, r8, #1
 8008e12:	e7ec      	b.n	8008dee <_printf_float+0x33a>
 8008e14:	4642      	mov	r2, r8
 8008e16:	4631      	mov	r1, r6
 8008e18:	4628      	mov	r0, r5
 8008e1a:	47b8      	blx	r7
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	d1c2      	bne.n	8008da6 <_printf_float+0x2f2>
 8008e20:	e6a3      	b.n	8008b6a <_printf_float+0xb6>
 8008e22:	2301      	movs	r3, #1
 8008e24:	4631      	mov	r1, r6
 8008e26:	4628      	mov	r0, r5
 8008e28:	9206      	str	r2, [sp, #24]
 8008e2a:	47b8      	blx	r7
 8008e2c:	3001      	adds	r0, #1
 8008e2e:	f43f ae9c 	beq.w	8008b6a <_printf_float+0xb6>
 8008e32:	9a06      	ldr	r2, [sp, #24]
 8008e34:	f10b 0b01 	add.w	fp, fp, #1
 8008e38:	e7bb      	b.n	8008db2 <_printf_float+0x2fe>
 8008e3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e3e:	4631      	mov	r1, r6
 8008e40:	4628      	mov	r0, r5
 8008e42:	47b8      	blx	r7
 8008e44:	3001      	adds	r0, #1
 8008e46:	d1c0      	bne.n	8008dca <_printf_float+0x316>
 8008e48:	e68f      	b.n	8008b6a <_printf_float+0xb6>
 8008e4a:	9a06      	ldr	r2, [sp, #24]
 8008e4c:	464b      	mov	r3, r9
 8008e4e:	4442      	add	r2, r8
 8008e50:	4631      	mov	r1, r6
 8008e52:	4628      	mov	r0, r5
 8008e54:	47b8      	blx	r7
 8008e56:	3001      	adds	r0, #1
 8008e58:	d1c3      	bne.n	8008de2 <_printf_float+0x32e>
 8008e5a:	e686      	b.n	8008b6a <_printf_float+0xb6>
 8008e5c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008e60:	f1ba 0f01 	cmp.w	sl, #1
 8008e64:	dc01      	bgt.n	8008e6a <_printf_float+0x3b6>
 8008e66:	07db      	lsls	r3, r3, #31
 8008e68:	d536      	bpl.n	8008ed8 <_printf_float+0x424>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	4642      	mov	r2, r8
 8008e6e:	4631      	mov	r1, r6
 8008e70:	4628      	mov	r0, r5
 8008e72:	47b8      	blx	r7
 8008e74:	3001      	adds	r0, #1
 8008e76:	f43f ae78 	beq.w	8008b6a <_printf_float+0xb6>
 8008e7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e7e:	4631      	mov	r1, r6
 8008e80:	4628      	mov	r0, r5
 8008e82:	47b8      	blx	r7
 8008e84:	3001      	adds	r0, #1
 8008e86:	f43f ae70 	beq.w	8008b6a <_printf_float+0xb6>
 8008e8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008e8e:	2200      	movs	r2, #0
 8008e90:	2300      	movs	r3, #0
 8008e92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e96:	f7f7 fe3f 	bl	8000b18 <__aeabi_dcmpeq>
 8008e9a:	b9c0      	cbnz	r0, 8008ece <_printf_float+0x41a>
 8008e9c:	4653      	mov	r3, sl
 8008e9e:	f108 0201 	add.w	r2, r8, #1
 8008ea2:	4631      	mov	r1, r6
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	47b8      	blx	r7
 8008ea8:	3001      	adds	r0, #1
 8008eaa:	d10c      	bne.n	8008ec6 <_printf_float+0x412>
 8008eac:	e65d      	b.n	8008b6a <_printf_float+0xb6>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	465a      	mov	r2, fp
 8008eb2:	4631      	mov	r1, r6
 8008eb4:	4628      	mov	r0, r5
 8008eb6:	47b8      	blx	r7
 8008eb8:	3001      	adds	r0, #1
 8008eba:	f43f ae56 	beq.w	8008b6a <_printf_float+0xb6>
 8008ebe:	f108 0801 	add.w	r8, r8, #1
 8008ec2:	45d0      	cmp	r8, sl
 8008ec4:	dbf3      	blt.n	8008eae <_printf_float+0x3fa>
 8008ec6:	464b      	mov	r3, r9
 8008ec8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008ecc:	e6df      	b.n	8008c8e <_printf_float+0x1da>
 8008ece:	f04f 0800 	mov.w	r8, #0
 8008ed2:	f104 0b1a 	add.w	fp, r4, #26
 8008ed6:	e7f4      	b.n	8008ec2 <_printf_float+0x40e>
 8008ed8:	2301      	movs	r3, #1
 8008eda:	4642      	mov	r2, r8
 8008edc:	e7e1      	b.n	8008ea2 <_printf_float+0x3ee>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	464a      	mov	r2, r9
 8008ee2:	4631      	mov	r1, r6
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	47b8      	blx	r7
 8008ee8:	3001      	adds	r0, #1
 8008eea:	f43f ae3e 	beq.w	8008b6a <_printf_float+0xb6>
 8008eee:	f108 0801 	add.w	r8, r8, #1
 8008ef2:	68e3      	ldr	r3, [r4, #12]
 8008ef4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008ef6:	1a5b      	subs	r3, r3, r1
 8008ef8:	4543      	cmp	r3, r8
 8008efa:	dcf0      	bgt.n	8008ede <_printf_float+0x42a>
 8008efc:	e6fc      	b.n	8008cf8 <_printf_float+0x244>
 8008efe:	f04f 0800 	mov.w	r8, #0
 8008f02:	f104 0919 	add.w	r9, r4, #25
 8008f06:	e7f4      	b.n	8008ef2 <_printf_float+0x43e>

08008f08 <_printf_common>:
 8008f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f0c:	4616      	mov	r6, r2
 8008f0e:	4698      	mov	r8, r3
 8008f10:	688a      	ldr	r2, [r1, #8]
 8008f12:	690b      	ldr	r3, [r1, #16]
 8008f14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	bfb8      	it	lt
 8008f1c:	4613      	movlt	r3, r2
 8008f1e:	6033      	str	r3, [r6, #0]
 8008f20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f24:	4607      	mov	r7, r0
 8008f26:	460c      	mov	r4, r1
 8008f28:	b10a      	cbz	r2, 8008f2e <_printf_common+0x26>
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	6033      	str	r3, [r6, #0]
 8008f2e:	6823      	ldr	r3, [r4, #0]
 8008f30:	0699      	lsls	r1, r3, #26
 8008f32:	bf42      	ittt	mi
 8008f34:	6833      	ldrmi	r3, [r6, #0]
 8008f36:	3302      	addmi	r3, #2
 8008f38:	6033      	strmi	r3, [r6, #0]
 8008f3a:	6825      	ldr	r5, [r4, #0]
 8008f3c:	f015 0506 	ands.w	r5, r5, #6
 8008f40:	d106      	bne.n	8008f50 <_printf_common+0x48>
 8008f42:	f104 0a19 	add.w	sl, r4, #25
 8008f46:	68e3      	ldr	r3, [r4, #12]
 8008f48:	6832      	ldr	r2, [r6, #0]
 8008f4a:	1a9b      	subs	r3, r3, r2
 8008f4c:	42ab      	cmp	r3, r5
 8008f4e:	dc26      	bgt.n	8008f9e <_printf_common+0x96>
 8008f50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f54:	6822      	ldr	r2, [r4, #0]
 8008f56:	3b00      	subs	r3, #0
 8008f58:	bf18      	it	ne
 8008f5a:	2301      	movne	r3, #1
 8008f5c:	0692      	lsls	r2, r2, #26
 8008f5e:	d42b      	bmi.n	8008fb8 <_printf_common+0xb0>
 8008f60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f64:	4641      	mov	r1, r8
 8008f66:	4638      	mov	r0, r7
 8008f68:	47c8      	blx	r9
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	d01e      	beq.n	8008fac <_printf_common+0xa4>
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	6922      	ldr	r2, [r4, #16]
 8008f72:	f003 0306 	and.w	r3, r3, #6
 8008f76:	2b04      	cmp	r3, #4
 8008f78:	bf02      	ittt	eq
 8008f7a:	68e5      	ldreq	r5, [r4, #12]
 8008f7c:	6833      	ldreq	r3, [r6, #0]
 8008f7e:	1aed      	subeq	r5, r5, r3
 8008f80:	68a3      	ldr	r3, [r4, #8]
 8008f82:	bf0c      	ite	eq
 8008f84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f88:	2500      	movne	r5, #0
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	bfc4      	itt	gt
 8008f8e:	1a9b      	subgt	r3, r3, r2
 8008f90:	18ed      	addgt	r5, r5, r3
 8008f92:	2600      	movs	r6, #0
 8008f94:	341a      	adds	r4, #26
 8008f96:	42b5      	cmp	r5, r6
 8008f98:	d11a      	bne.n	8008fd0 <_printf_common+0xc8>
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	e008      	b.n	8008fb0 <_printf_common+0xa8>
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	4652      	mov	r2, sl
 8008fa2:	4641      	mov	r1, r8
 8008fa4:	4638      	mov	r0, r7
 8008fa6:	47c8      	blx	r9
 8008fa8:	3001      	adds	r0, #1
 8008faa:	d103      	bne.n	8008fb4 <_printf_common+0xac>
 8008fac:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fb4:	3501      	adds	r5, #1
 8008fb6:	e7c6      	b.n	8008f46 <_printf_common+0x3e>
 8008fb8:	18e1      	adds	r1, r4, r3
 8008fba:	1c5a      	adds	r2, r3, #1
 8008fbc:	2030      	movs	r0, #48	@ 0x30
 8008fbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008fc2:	4422      	add	r2, r4
 8008fc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008fc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008fcc:	3302      	adds	r3, #2
 8008fce:	e7c7      	b.n	8008f60 <_printf_common+0x58>
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	4622      	mov	r2, r4
 8008fd4:	4641      	mov	r1, r8
 8008fd6:	4638      	mov	r0, r7
 8008fd8:	47c8      	blx	r9
 8008fda:	3001      	adds	r0, #1
 8008fdc:	d0e6      	beq.n	8008fac <_printf_common+0xa4>
 8008fde:	3601      	adds	r6, #1
 8008fe0:	e7d9      	b.n	8008f96 <_printf_common+0x8e>
	...

08008fe4 <_printf_i>:
 8008fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fe8:	7e0f      	ldrb	r7, [r1, #24]
 8008fea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008fec:	2f78      	cmp	r7, #120	@ 0x78
 8008fee:	4691      	mov	r9, r2
 8008ff0:	4680      	mov	r8, r0
 8008ff2:	460c      	mov	r4, r1
 8008ff4:	469a      	mov	sl, r3
 8008ff6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ffa:	d807      	bhi.n	800900c <_printf_i+0x28>
 8008ffc:	2f62      	cmp	r7, #98	@ 0x62
 8008ffe:	d80a      	bhi.n	8009016 <_printf_i+0x32>
 8009000:	2f00      	cmp	r7, #0
 8009002:	f000 80d2 	beq.w	80091aa <_printf_i+0x1c6>
 8009006:	2f58      	cmp	r7, #88	@ 0x58
 8009008:	f000 80b9 	beq.w	800917e <_printf_i+0x19a>
 800900c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009010:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009014:	e03a      	b.n	800908c <_printf_i+0xa8>
 8009016:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800901a:	2b15      	cmp	r3, #21
 800901c:	d8f6      	bhi.n	800900c <_printf_i+0x28>
 800901e:	a101      	add	r1, pc, #4	@ (adr r1, 8009024 <_printf_i+0x40>)
 8009020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009024:	0800907d 	.word	0x0800907d
 8009028:	08009091 	.word	0x08009091
 800902c:	0800900d 	.word	0x0800900d
 8009030:	0800900d 	.word	0x0800900d
 8009034:	0800900d 	.word	0x0800900d
 8009038:	0800900d 	.word	0x0800900d
 800903c:	08009091 	.word	0x08009091
 8009040:	0800900d 	.word	0x0800900d
 8009044:	0800900d 	.word	0x0800900d
 8009048:	0800900d 	.word	0x0800900d
 800904c:	0800900d 	.word	0x0800900d
 8009050:	08009191 	.word	0x08009191
 8009054:	080090bb 	.word	0x080090bb
 8009058:	0800914b 	.word	0x0800914b
 800905c:	0800900d 	.word	0x0800900d
 8009060:	0800900d 	.word	0x0800900d
 8009064:	080091b3 	.word	0x080091b3
 8009068:	0800900d 	.word	0x0800900d
 800906c:	080090bb 	.word	0x080090bb
 8009070:	0800900d 	.word	0x0800900d
 8009074:	0800900d 	.word	0x0800900d
 8009078:	08009153 	.word	0x08009153
 800907c:	6833      	ldr	r3, [r6, #0]
 800907e:	1d1a      	adds	r2, r3, #4
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	6032      	str	r2, [r6, #0]
 8009084:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009088:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800908c:	2301      	movs	r3, #1
 800908e:	e09d      	b.n	80091cc <_printf_i+0x1e8>
 8009090:	6833      	ldr	r3, [r6, #0]
 8009092:	6820      	ldr	r0, [r4, #0]
 8009094:	1d19      	adds	r1, r3, #4
 8009096:	6031      	str	r1, [r6, #0]
 8009098:	0606      	lsls	r6, r0, #24
 800909a:	d501      	bpl.n	80090a0 <_printf_i+0xbc>
 800909c:	681d      	ldr	r5, [r3, #0]
 800909e:	e003      	b.n	80090a8 <_printf_i+0xc4>
 80090a0:	0645      	lsls	r5, r0, #25
 80090a2:	d5fb      	bpl.n	800909c <_printf_i+0xb8>
 80090a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80090a8:	2d00      	cmp	r5, #0
 80090aa:	da03      	bge.n	80090b4 <_printf_i+0xd0>
 80090ac:	232d      	movs	r3, #45	@ 0x2d
 80090ae:	426d      	negs	r5, r5
 80090b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090b4:	4859      	ldr	r0, [pc, #356]	@ (800921c <_printf_i+0x238>)
 80090b6:	230a      	movs	r3, #10
 80090b8:	e011      	b.n	80090de <_printf_i+0xfa>
 80090ba:	6821      	ldr	r1, [r4, #0]
 80090bc:	6833      	ldr	r3, [r6, #0]
 80090be:	0608      	lsls	r0, r1, #24
 80090c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80090c4:	d402      	bmi.n	80090cc <_printf_i+0xe8>
 80090c6:	0649      	lsls	r1, r1, #25
 80090c8:	bf48      	it	mi
 80090ca:	b2ad      	uxthmi	r5, r5
 80090cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80090ce:	4853      	ldr	r0, [pc, #332]	@ (800921c <_printf_i+0x238>)
 80090d0:	6033      	str	r3, [r6, #0]
 80090d2:	bf14      	ite	ne
 80090d4:	230a      	movne	r3, #10
 80090d6:	2308      	moveq	r3, #8
 80090d8:	2100      	movs	r1, #0
 80090da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80090de:	6866      	ldr	r6, [r4, #4]
 80090e0:	60a6      	str	r6, [r4, #8]
 80090e2:	2e00      	cmp	r6, #0
 80090e4:	bfa2      	ittt	ge
 80090e6:	6821      	ldrge	r1, [r4, #0]
 80090e8:	f021 0104 	bicge.w	r1, r1, #4
 80090ec:	6021      	strge	r1, [r4, #0]
 80090ee:	b90d      	cbnz	r5, 80090f4 <_printf_i+0x110>
 80090f0:	2e00      	cmp	r6, #0
 80090f2:	d04b      	beq.n	800918c <_printf_i+0x1a8>
 80090f4:	4616      	mov	r6, r2
 80090f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80090fa:	fb03 5711 	mls	r7, r3, r1, r5
 80090fe:	5dc7      	ldrb	r7, [r0, r7]
 8009100:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009104:	462f      	mov	r7, r5
 8009106:	42bb      	cmp	r3, r7
 8009108:	460d      	mov	r5, r1
 800910a:	d9f4      	bls.n	80090f6 <_printf_i+0x112>
 800910c:	2b08      	cmp	r3, #8
 800910e:	d10b      	bne.n	8009128 <_printf_i+0x144>
 8009110:	6823      	ldr	r3, [r4, #0]
 8009112:	07df      	lsls	r7, r3, #31
 8009114:	d508      	bpl.n	8009128 <_printf_i+0x144>
 8009116:	6923      	ldr	r3, [r4, #16]
 8009118:	6861      	ldr	r1, [r4, #4]
 800911a:	4299      	cmp	r1, r3
 800911c:	bfde      	ittt	le
 800911e:	2330      	movle	r3, #48	@ 0x30
 8009120:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009124:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009128:	1b92      	subs	r2, r2, r6
 800912a:	6122      	str	r2, [r4, #16]
 800912c:	f8cd a000 	str.w	sl, [sp]
 8009130:	464b      	mov	r3, r9
 8009132:	aa03      	add	r2, sp, #12
 8009134:	4621      	mov	r1, r4
 8009136:	4640      	mov	r0, r8
 8009138:	f7ff fee6 	bl	8008f08 <_printf_common>
 800913c:	3001      	adds	r0, #1
 800913e:	d14a      	bne.n	80091d6 <_printf_i+0x1f2>
 8009140:	f04f 30ff 	mov.w	r0, #4294967295
 8009144:	b004      	add	sp, #16
 8009146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800914a:	6823      	ldr	r3, [r4, #0]
 800914c:	f043 0320 	orr.w	r3, r3, #32
 8009150:	6023      	str	r3, [r4, #0]
 8009152:	4833      	ldr	r0, [pc, #204]	@ (8009220 <_printf_i+0x23c>)
 8009154:	2778      	movs	r7, #120	@ 0x78
 8009156:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	6831      	ldr	r1, [r6, #0]
 800915e:	061f      	lsls	r7, r3, #24
 8009160:	f851 5b04 	ldr.w	r5, [r1], #4
 8009164:	d402      	bmi.n	800916c <_printf_i+0x188>
 8009166:	065f      	lsls	r7, r3, #25
 8009168:	bf48      	it	mi
 800916a:	b2ad      	uxthmi	r5, r5
 800916c:	6031      	str	r1, [r6, #0]
 800916e:	07d9      	lsls	r1, r3, #31
 8009170:	bf44      	itt	mi
 8009172:	f043 0320 	orrmi.w	r3, r3, #32
 8009176:	6023      	strmi	r3, [r4, #0]
 8009178:	b11d      	cbz	r5, 8009182 <_printf_i+0x19e>
 800917a:	2310      	movs	r3, #16
 800917c:	e7ac      	b.n	80090d8 <_printf_i+0xf4>
 800917e:	4827      	ldr	r0, [pc, #156]	@ (800921c <_printf_i+0x238>)
 8009180:	e7e9      	b.n	8009156 <_printf_i+0x172>
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	f023 0320 	bic.w	r3, r3, #32
 8009188:	6023      	str	r3, [r4, #0]
 800918a:	e7f6      	b.n	800917a <_printf_i+0x196>
 800918c:	4616      	mov	r6, r2
 800918e:	e7bd      	b.n	800910c <_printf_i+0x128>
 8009190:	6833      	ldr	r3, [r6, #0]
 8009192:	6825      	ldr	r5, [r4, #0]
 8009194:	6961      	ldr	r1, [r4, #20]
 8009196:	1d18      	adds	r0, r3, #4
 8009198:	6030      	str	r0, [r6, #0]
 800919a:	062e      	lsls	r6, r5, #24
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	d501      	bpl.n	80091a4 <_printf_i+0x1c0>
 80091a0:	6019      	str	r1, [r3, #0]
 80091a2:	e002      	b.n	80091aa <_printf_i+0x1c6>
 80091a4:	0668      	lsls	r0, r5, #25
 80091a6:	d5fb      	bpl.n	80091a0 <_printf_i+0x1bc>
 80091a8:	8019      	strh	r1, [r3, #0]
 80091aa:	2300      	movs	r3, #0
 80091ac:	6123      	str	r3, [r4, #16]
 80091ae:	4616      	mov	r6, r2
 80091b0:	e7bc      	b.n	800912c <_printf_i+0x148>
 80091b2:	6833      	ldr	r3, [r6, #0]
 80091b4:	1d1a      	adds	r2, r3, #4
 80091b6:	6032      	str	r2, [r6, #0]
 80091b8:	681e      	ldr	r6, [r3, #0]
 80091ba:	6862      	ldr	r2, [r4, #4]
 80091bc:	2100      	movs	r1, #0
 80091be:	4630      	mov	r0, r6
 80091c0:	f7f7 f82e 	bl	8000220 <memchr>
 80091c4:	b108      	cbz	r0, 80091ca <_printf_i+0x1e6>
 80091c6:	1b80      	subs	r0, r0, r6
 80091c8:	6060      	str	r0, [r4, #4]
 80091ca:	6863      	ldr	r3, [r4, #4]
 80091cc:	6123      	str	r3, [r4, #16]
 80091ce:	2300      	movs	r3, #0
 80091d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091d4:	e7aa      	b.n	800912c <_printf_i+0x148>
 80091d6:	6923      	ldr	r3, [r4, #16]
 80091d8:	4632      	mov	r2, r6
 80091da:	4649      	mov	r1, r9
 80091dc:	4640      	mov	r0, r8
 80091de:	47d0      	blx	sl
 80091e0:	3001      	adds	r0, #1
 80091e2:	d0ad      	beq.n	8009140 <_printf_i+0x15c>
 80091e4:	6823      	ldr	r3, [r4, #0]
 80091e6:	079b      	lsls	r3, r3, #30
 80091e8:	d413      	bmi.n	8009212 <_printf_i+0x22e>
 80091ea:	68e0      	ldr	r0, [r4, #12]
 80091ec:	9b03      	ldr	r3, [sp, #12]
 80091ee:	4298      	cmp	r0, r3
 80091f0:	bfb8      	it	lt
 80091f2:	4618      	movlt	r0, r3
 80091f4:	e7a6      	b.n	8009144 <_printf_i+0x160>
 80091f6:	2301      	movs	r3, #1
 80091f8:	4632      	mov	r2, r6
 80091fa:	4649      	mov	r1, r9
 80091fc:	4640      	mov	r0, r8
 80091fe:	47d0      	blx	sl
 8009200:	3001      	adds	r0, #1
 8009202:	d09d      	beq.n	8009140 <_printf_i+0x15c>
 8009204:	3501      	adds	r5, #1
 8009206:	68e3      	ldr	r3, [r4, #12]
 8009208:	9903      	ldr	r1, [sp, #12]
 800920a:	1a5b      	subs	r3, r3, r1
 800920c:	42ab      	cmp	r3, r5
 800920e:	dcf2      	bgt.n	80091f6 <_printf_i+0x212>
 8009210:	e7eb      	b.n	80091ea <_printf_i+0x206>
 8009212:	2500      	movs	r5, #0
 8009214:	f104 0619 	add.w	r6, r4, #25
 8009218:	e7f5      	b.n	8009206 <_printf_i+0x222>
 800921a:	bf00      	nop
 800921c:	0800d276 	.word	0x0800d276
 8009220:	0800d287 	.word	0x0800d287

08009224 <_scanf_float>:
 8009224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009228:	b087      	sub	sp, #28
 800922a:	4617      	mov	r7, r2
 800922c:	9303      	str	r3, [sp, #12]
 800922e:	688b      	ldr	r3, [r1, #8]
 8009230:	1e5a      	subs	r2, r3, #1
 8009232:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009236:	bf81      	itttt	hi
 8009238:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800923c:	eb03 0b05 	addhi.w	fp, r3, r5
 8009240:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009244:	608b      	strhi	r3, [r1, #8]
 8009246:	680b      	ldr	r3, [r1, #0]
 8009248:	460a      	mov	r2, r1
 800924a:	f04f 0500 	mov.w	r5, #0
 800924e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009252:	f842 3b1c 	str.w	r3, [r2], #28
 8009256:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800925a:	4680      	mov	r8, r0
 800925c:	460c      	mov	r4, r1
 800925e:	bf98      	it	ls
 8009260:	f04f 0b00 	movls.w	fp, #0
 8009264:	9201      	str	r2, [sp, #4]
 8009266:	4616      	mov	r6, r2
 8009268:	46aa      	mov	sl, r5
 800926a:	46a9      	mov	r9, r5
 800926c:	9502      	str	r5, [sp, #8]
 800926e:	68a2      	ldr	r2, [r4, #8]
 8009270:	b152      	cbz	r2, 8009288 <_scanf_float+0x64>
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	2b4e      	cmp	r3, #78	@ 0x4e
 8009278:	d864      	bhi.n	8009344 <_scanf_float+0x120>
 800927a:	2b40      	cmp	r3, #64	@ 0x40
 800927c:	d83c      	bhi.n	80092f8 <_scanf_float+0xd4>
 800927e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009282:	b2c8      	uxtb	r0, r1
 8009284:	280e      	cmp	r0, #14
 8009286:	d93a      	bls.n	80092fe <_scanf_float+0xda>
 8009288:	f1b9 0f00 	cmp.w	r9, #0
 800928c:	d003      	beq.n	8009296 <_scanf_float+0x72>
 800928e:	6823      	ldr	r3, [r4, #0]
 8009290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009294:	6023      	str	r3, [r4, #0]
 8009296:	f10a 3aff 	add.w	sl, sl, #4294967295
 800929a:	f1ba 0f01 	cmp.w	sl, #1
 800929e:	f200 8117 	bhi.w	80094d0 <_scanf_float+0x2ac>
 80092a2:	9b01      	ldr	r3, [sp, #4]
 80092a4:	429e      	cmp	r6, r3
 80092a6:	f200 8108 	bhi.w	80094ba <_scanf_float+0x296>
 80092aa:	2001      	movs	r0, #1
 80092ac:	b007      	add	sp, #28
 80092ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80092b6:	2a0d      	cmp	r2, #13
 80092b8:	d8e6      	bhi.n	8009288 <_scanf_float+0x64>
 80092ba:	a101      	add	r1, pc, #4	@ (adr r1, 80092c0 <_scanf_float+0x9c>)
 80092bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80092c0:	08009407 	.word	0x08009407
 80092c4:	08009289 	.word	0x08009289
 80092c8:	08009289 	.word	0x08009289
 80092cc:	08009289 	.word	0x08009289
 80092d0:	08009467 	.word	0x08009467
 80092d4:	0800943f 	.word	0x0800943f
 80092d8:	08009289 	.word	0x08009289
 80092dc:	08009289 	.word	0x08009289
 80092e0:	08009415 	.word	0x08009415
 80092e4:	08009289 	.word	0x08009289
 80092e8:	08009289 	.word	0x08009289
 80092ec:	08009289 	.word	0x08009289
 80092f0:	08009289 	.word	0x08009289
 80092f4:	080093cd 	.word	0x080093cd
 80092f8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80092fc:	e7db      	b.n	80092b6 <_scanf_float+0x92>
 80092fe:	290e      	cmp	r1, #14
 8009300:	d8c2      	bhi.n	8009288 <_scanf_float+0x64>
 8009302:	a001      	add	r0, pc, #4	@ (adr r0, 8009308 <_scanf_float+0xe4>)
 8009304:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009308:	080093bd 	.word	0x080093bd
 800930c:	08009289 	.word	0x08009289
 8009310:	080093bd 	.word	0x080093bd
 8009314:	08009453 	.word	0x08009453
 8009318:	08009289 	.word	0x08009289
 800931c:	08009365 	.word	0x08009365
 8009320:	080093a3 	.word	0x080093a3
 8009324:	080093a3 	.word	0x080093a3
 8009328:	080093a3 	.word	0x080093a3
 800932c:	080093a3 	.word	0x080093a3
 8009330:	080093a3 	.word	0x080093a3
 8009334:	080093a3 	.word	0x080093a3
 8009338:	080093a3 	.word	0x080093a3
 800933c:	080093a3 	.word	0x080093a3
 8009340:	080093a3 	.word	0x080093a3
 8009344:	2b6e      	cmp	r3, #110	@ 0x6e
 8009346:	d809      	bhi.n	800935c <_scanf_float+0x138>
 8009348:	2b60      	cmp	r3, #96	@ 0x60
 800934a:	d8b2      	bhi.n	80092b2 <_scanf_float+0x8e>
 800934c:	2b54      	cmp	r3, #84	@ 0x54
 800934e:	d07b      	beq.n	8009448 <_scanf_float+0x224>
 8009350:	2b59      	cmp	r3, #89	@ 0x59
 8009352:	d199      	bne.n	8009288 <_scanf_float+0x64>
 8009354:	2d07      	cmp	r5, #7
 8009356:	d197      	bne.n	8009288 <_scanf_float+0x64>
 8009358:	2508      	movs	r5, #8
 800935a:	e02c      	b.n	80093b6 <_scanf_float+0x192>
 800935c:	2b74      	cmp	r3, #116	@ 0x74
 800935e:	d073      	beq.n	8009448 <_scanf_float+0x224>
 8009360:	2b79      	cmp	r3, #121	@ 0x79
 8009362:	e7f6      	b.n	8009352 <_scanf_float+0x12e>
 8009364:	6821      	ldr	r1, [r4, #0]
 8009366:	05c8      	lsls	r0, r1, #23
 8009368:	d51b      	bpl.n	80093a2 <_scanf_float+0x17e>
 800936a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800936e:	6021      	str	r1, [r4, #0]
 8009370:	f109 0901 	add.w	r9, r9, #1
 8009374:	f1bb 0f00 	cmp.w	fp, #0
 8009378:	d003      	beq.n	8009382 <_scanf_float+0x15e>
 800937a:	3201      	adds	r2, #1
 800937c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009380:	60a2      	str	r2, [r4, #8]
 8009382:	68a3      	ldr	r3, [r4, #8]
 8009384:	3b01      	subs	r3, #1
 8009386:	60a3      	str	r3, [r4, #8]
 8009388:	6923      	ldr	r3, [r4, #16]
 800938a:	3301      	adds	r3, #1
 800938c:	6123      	str	r3, [r4, #16]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	3b01      	subs	r3, #1
 8009392:	2b00      	cmp	r3, #0
 8009394:	607b      	str	r3, [r7, #4]
 8009396:	f340 8087 	ble.w	80094a8 <_scanf_float+0x284>
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	3301      	adds	r3, #1
 800939e:	603b      	str	r3, [r7, #0]
 80093a0:	e765      	b.n	800926e <_scanf_float+0x4a>
 80093a2:	eb1a 0105 	adds.w	r1, sl, r5
 80093a6:	f47f af6f 	bne.w	8009288 <_scanf_float+0x64>
 80093aa:	6822      	ldr	r2, [r4, #0]
 80093ac:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80093b0:	6022      	str	r2, [r4, #0]
 80093b2:	460d      	mov	r5, r1
 80093b4:	468a      	mov	sl, r1
 80093b6:	f806 3b01 	strb.w	r3, [r6], #1
 80093ba:	e7e2      	b.n	8009382 <_scanf_float+0x15e>
 80093bc:	6822      	ldr	r2, [r4, #0]
 80093be:	0610      	lsls	r0, r2, #24
 80093c0:	f57f af62 	bpl.w	8009288 <_scanf_float+0x64>
 80093c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80093c8:	6022      	str	r2, [r4, #0]
 80093ca:	e7f4      	b.n	80093b6 <_scanf_float+0x192>
 80093cc:	f1ba 0f00 	cmp.w	sl, #0
 80093d0:	d10e      	bne.n	80093f0 <_scanf_float+0x1cc>
 80093d2:	f1b9 0f00 	cmp.w	r9, #0
 80093d6:	d10e      	bne.n	80093f6 <_scanf_float+0x1d2>
 80093d8:	6822      	ldr	r2, [r4, #0]
 80093da:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80093de:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80093e2:	d108      	bne.n	80093f6 <_scanf_float+0x1d2>
 80093e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80093e8:	6022      	str	r2, [r4, #0]
 80093ea:	f04f 0a01 	mov.w	sl, #1
 80093ee:	e7e2      	b.n	80093b6 <_scanf_float+0x192>
 80093f0:	f1ba 0f02 	cmp.w	sl, #2
 80093f4:	d055      	beq.n	80094a2 <_scanf_float+0x27e>
 80093f6:	2d01      	cmp	r5, #1
 80093f8:	d002      	beq.n	8009400 <_scanf_float+0x1dc>
 80093fa:	2d04      	cmp	r5, #4
 80093fc:	f47f af44 	bne.w	8009288 <_scanf_float+0x64>
 8009400:	3501      	adds	r5, #1
 8009402:	b2ed      	uxtb	r5, r5
 8009404:	e7d7      	b.n	80093b6 <_scanf_float+0x192>
 8009406:	f1ba 0f01 	cmp.w	sl, #1
 800940a:	f47f af3d 	bne.w	8009288 <_scanf_float+0x64>
 800940e:	f04f 0a02 	mov.w	sl, #2
 8009412:	e7d0      	b.n	80093b6 <_scanf_float+0x192>
 8009414:	b97d      	cbnz	r5, 8009436 <_scanf_float+0x212>
 8009416:	f1b9 0f00 	cmp.w	r9, #0
 800941a:	f47f af38 	bne.w	800928e <_scanf_float+0x6a>
 800941e:	6822      	ldr	r2, [r4, #0]
 8009420:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009424:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009428:	f040 8108 	bne.w	800963c <_scanf_float+0x418>
 800942c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009430:	6022      	str	r2, [r4, #0]
 8009432:	2501      	movs	r5, #1
 8009434:	e7bf      	b.n	80093b6 <_scanf_float+0x192>
 8009436:	2d03      	cmp	r5, #3
 8009438:	d0e2      	beq.n	8009400 <_scanf_float+0x1dc>
 800943a:	2d05      	cmp	r5, #5
 800943c:	e7de      	b.n	80093fc <_scanf_float+0x1d8>
 800943e:	2d02      	cmp	r5, #2
 8009440:	f47f af22 	bne.w	8009288 <_scanf_float+0x64>
 8009444:	2503      	movs	r5, #3
 8009446:	e7b6      	b.n	80093b6 <_scanf_float+0x192>
 8009448:	2d06      	cmp	r5, #6
 800944a:	f47f af1d 	bne.w	8009288 <_scanf_float+0x64>
 800944e:	2507      	movs	r5, #7
 8009450:	e7b1      	b.n	80093b6 <_scanf_float+0x192>
 8009452:	6822      	ldr	r2, [r4, #0]
 8009454:	0591      	lsls	r1, r2, #22
 8009456:	f57f af17 	bpl.w	8009288 <_scanf_float+0x64>
 800945a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800945e:	6022      	str	r2, [r4, #0]
 8009460:	f8cd 9008 	str.w	r9, [sp, #8]
 8009464:	e7a7      	b.n	80093b6 <_scanf_float+0x192>
 8009466:	6822      	ldr	r2, [r4, #0]
 8009468:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800946c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009470:	d006      	beq.n	8009480 <_scanf_float+0x25c>
 8009472:	0550      	lsls	r0, r2, #21
 8009474:	f57f af08 	bpl.w	8009288 <_scanf_float+0x64>
 8009478:	f1b9 0f00 	cmp.w	r9, #0
 800947c:	f000 80de 	beq.w	800963c <_scanf_float+0x418>
 8009480:	0591      	lsls	r1, r2, #22
 8009482:	bf58      	it	pl
 8009484:	9902      	ldrpl	r1, [sp, #8]
 8009486:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800948a:	bf58      	it	pl
 800948c:	eba9 0101 	subpl.w	r1, r9, r1
 8009490:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009494:	bf58      	it	pl
 8009496:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800949a:	6022      	str	r2, [r4, #0]
 800949c:	f04f 0900 	mov.w	r9, #0
 80094a0:	e789      	b.n	80093b6 <_scanf_float+0x192>
 80094a2:	f04f 0a03 	mov.w	sl, #3
 80094a6:	e786      	b.n	80093b6 <_scanf_float+0x192>
 80094a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80094ac:	4639      	mov	r1, r7
 80094ae:	4640      	mov	r0, r8
 80094b0:	4798      	blx	r3
 80094b2:	2800      	cmp	r0, #0
 80094b4:	f43f aedb 	beq.w	800926e <_scanf_float+0x4a>
 80094b8:	e6e6      	b.n	8009288 <_scanf_float+0x64>
 80094ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80094be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80094c2:	463a      	mov	r2, r7
 80094c4:	4640      	mov	r0, r8
 80094c6:	4798      	blx	r3
 80094c8:	6923      	ldr	r3, [r4, #16]
 80094ca:	3b01      	subs	r3, #1
 80094cc:	6123      	str	r3, [r4, #16]
 80094ce:	e6e8      	b.n	80092a2 <_scanf_float+0x7e>
 80094d0:	1e6b      	subs	r3, r5, #1
 80094d2:	2b06      	cmp	r3, #6
 80094d4:	d824      	bhi.n	8009520 <_scanf_float+0x2fc>
 80094d6:	2d02      	cmp	r5, #2
 80094d8:	d836      	bhi.n	8009548 <_scanf_float+0x324>
 80094da:	9b01      	ldr	r3, [sp, #4]
 80094dc:	429e      	cmp	r6, r3
 80094de:	f67f aee4 	bls.w	80092aa <_scanf_float+0x86>
 80094e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80094e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80094ea:	463a      	mov	r2, r7
 80094ec:	4640      	mov	r0, r8
 80094ee:	4798      	blx	r3
 80094f0:	6923      	ldr	r3, [r4, #16]
 80094f2:	3b01      	subs	r3, #1
 80094f4:	6123      	str	r3, [r4, #16]
 80094f6:	e7f0      	b.n	80094da <_scanf_float+0x2b6>
 80094f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80094fc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009500:	463a      	mov	r2, r7
 8009502:	4640      	mov	r0, r8
 8009504:	4798      	blx	r3
 8009506:	6923      	ldr	r3, [r4, #16]
 8009508:	3b01      	subs	r3, #1
 800950a:	6123      	str	r3, [r4, #16]
 800950c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009510:	fa5f fa8a 	uxtb.w	sl, sl
 8009514:	f1ba 0f02 	cmp.w	sl, #2
 8009518:	d1ee      	bne.n	80094f8 <_scanf_float+0x2d4>
 800951a:	3d03      	subs	r5, #3
 800951c:	b2ed      	uxtb	r5, r5
 800951e:	1b76      	subs	r6, r6, r5
 8009520:	6823      	ldr	r3, [r4, #0]
 8009522:	05da      	lsls	r2, r3, #23
 8009524:	d530      	bpl.n	8009588 <_scanf_float+0x364>
 8009526:	055b      	lsls	r3, r3, #21
 8009528:	d511      	bpl.n	800954e <_scanf_float+0x32a>
 800952a:	9b01      	ldr	r3, [sp, #4]
 800952c:	429e      	cmp	r6, r3
 800952e:	f67f aebc 	bls.w	80092aa <_scanf_float+0x86>
 8009532:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009536:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800953a:	463a      	mov	r2, r7
 800953c:	4640      	mov	r0, r8
 800953e:	4798      	blx	r3
 8009540:	6923      	ldr	r3, [r4, #16]
 8009542:	3b01      	subs	r3, #1
 8009544:	6123      	str	r3, [r4, #16]
 8009546:	e7f0      	b.n	800952a <_scanf_float+0x306>
 8009548:	46aa      	mov	sl, r5
 800954a:	46b3      	mov	fp, r6
 800954c:	e7de      	b.n	800950c <_scanf_float+0x2e8>
 800954e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009552:	6923      	ldr	r3, [r4, #16]
 8009554:	2965      	cmp	r1, #101	@ 0x65
 8009556:	f103 33ff 	add.w	r3, r3, #4294967295
 800955a:	f106 35ff 	add.w	r5, r6, #4294967295
 800955e:	6123      	str	r3, [r4, #16]
 8009560:	d00c      	beq.n	800957c <_scanf_float+0x358>
 8009562:	2945      	cmp	r1, #69	@ 0x45
 8009564:	d00a      	beq.n	800957c <_scanf_float+0x358>
 8009566:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800956a:	463a      	mov	r2, r7
 800956c:	4640      	mov	r0, r8
 800956e:	4798      	blx	r3
 8009570:	6923      	ldr	r3, [r4, #16]
 8009572:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009576:	3b01      	subs	r3, #1
 8009578:	1eb5      	subs	r5, r6, #2
 800957a:	6123      	str	r3, [r4, #16]
 800957c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009580:	463a      	mov	r2, r7
 8009582:	4640      	mov	r0, r8
 8009584:	4798      	blx	r3
 8009586:	462e      	mov	r6, r5
 8009588:	6822      	ldr	r2, [r4, #0]
 800958a:	f012 0210 	ands.w	r2, r2, #16
 800958e:	d001      	beq.n	8009594 <_scanf_float+0x370>
 8009590:	2000      	movs	r0, #0
 8009592:	e68b      	b.n	80092ac <_scanf_float+0x88>
 8009594:	7032      	strb	r2, [r6, #0]
 8009596:	6823      	ldr	r3, [r4, #0]
 8009598:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800959c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095a0:	d11c      	bne.n	80095dc <_scanf_float+0x3b8>
 80095a2:	9b02      	ldr	r3, [sp, #8]
 80095a4:	454b      	cmp	r3, r9
 80095a6:	eba3 0209 	sub.w	r2, r3, r9
 80095aa:	d123      	bne.n	80095f4 <_scanf_float+0x3d0>
 80095ac:	9901      	ldr	r1, [sp, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	4640      	mov	r0, r8
 80095b2:	f002 fcf9 	bl	800bfa8 <_strtod_r>
 80095b6:	9b03      	ldr	r3, [sp, #12]
 80095b8:	6821      	ldr	r1, [r4, #0]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f011 0f02 	tst.w	r1, #2
 80095c0:	ec57 6b10 	vmov	r6, r7, d0
 80095c4:	f103 0204 	add.w	r2, r3, #4
 80095c8:	d01f      	beq.n	800960a <_scanf_float+0x3e6>
 80095ca:	9903      	ldr	r1, [sp, #12]
 80095cc:	600a      	str	r2, [r1, #0]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	e9c3 6700 	strd	r6, r7, [r3]
 80095d4:	68e3      	ldr	r3, [r4, #12]
 80095d6:	3301      	adds	r3, #1
 80095d8:	60e3      	str	r3, [r4, #12]
 80095da:	e7d9      	b.n	8009590 <_scanf_float+0x36c>
 80095dc:	9b04      	ldr	r3, [sp, #16]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d0e4      	beq.n	80095ac <_scanf_float+0x388>
 80095e2:	9905      	ldr	r1, [sp, #20]
 80095e4:	230a      	movs	r3, #10
 80095e6:	3101      	adds	r1, #1
 80095e8:	4640      	mov	r0, r8
 80095ea:	f002 fd5d 	bl	800c0a8 <_strtol_r>
 80095ee:	9b04      	ldr	r3, [sp, #16]
 80095f0:	9e05      	ldr	r6, [sp, #20]
 80095f2:	1ac2      	subs	r2, r0, r3
 80095f4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80095f8:	429e      	cmp	r6, r3
 80095fa:	bf28      	it	cs
 80095fc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009600:	4910      	ldr	r1, [pc, #64]	@ (8009644 <_scanf_float+0x420>)
 8009602:	4630      	mov	r0, r6
 8009604:	f000 f942 	bl	800988c <siprintf>
 8009608:	e7d0      	b.n	80095ac <_scanf_float+0x388>
 800960a:	f011 0f04 	tst.w	r1, #4
 800960e:	9903      	ldr	r1, [sp, #12]
 8009610:	600a      	str	r2, [r1, #0]
 8009612:	d1dc      	bne.n	80095ce <_scanf_float+0x3aa>
 8009614:	681d      	ldr	r5, [r3, #0]
 8009616:	4632      	mov	r2, r6
 8009618:	463b      	mov	r3, r7
 800961a:	4630      	mov	r0, r6
 800961c:	4639      	mov	r1, r7
 800961e:	f7f7 faad 	bl	8000b7c <__aeabi_dcmpun>
 8009622:	b128      	cbz	r0, 8009630 <_scanf_float+0x40c>
 8009624:	4808      	ldr	r0, [pc, #32]	@ (8009648 <_scanf_float+0x424>)
 8009626:	f000 fab7 	bl	8009b98 <nanf>
 800962a:	ed85 0a00 	vstr	s0, [r5]
 800962e:	e7d1      	b.n	80095d4 <_scanf_float+0x3b0>
 8009630:	4630      	mov	r0, r6
 8009632:	4639      	mov	r1, r7
 8009634:	f7f7 fb00 	bl	8000c38 <__aeabi_d2f>
 8009638:	6028      	str	r0, [r5, #0]
 800963a:	e7cb      	b.n	80095d4 <_scanf_float+0x3b0>
 800963c:	f04f 0900 	mov.w	r9, #0
 8009640:	e629      	b.n	8009296 <_scanf_float+0x72>
 8009642:	bf00      	nop
 8009644:	0800d298 	.word	0x0800d298
 8009648:	0800d62d 	.word	0x0800d62d

0800964c <std>:
 800964c:	2300      	movs	r3, #0
 800964e:	b510      	push	{r4, lr}
 8009650:	4604      	mov	r4, r0
 8009652:	e9c0 3300 	strd	r3, r3, [r0]
 8009656:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800965a:	6083      	str	r3, [r0, #8]
 800965c:	8181      	strh	r1, [r0, #12]
 800965e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009660:	81c2      	strh	r2, [r0, #14]
 8009662:	6183      	str	r3, [r0, #24]
 8009664:	4619      	mov	r1, r3
 8009666:	2208      	movs	r2, #8
 8009668:	305c      	adds	r0, #92	@ 0x5c
 800966a:	f000 fa07 	bl	8009a7c <memset>
 800966e:	4b0d      	ldr	r3, [pc, #52]	@ (80096a4 <std+0x58>)
 8009670:	6263      	str	r3, [r4, #36]	@ 0x24
 8009672:	4b0d      	ldr	r3, [pc, #52]	@ (80096a8 <std+0x5c>)
 8009674:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009676:	4b0d      	ldr	r3, [pc, #52]	@ (80096ac <std+0x60>)
 8009678:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800967a:	4b0d      	ldr	r3, [pc, #52]	@ (80096b0 <std+0x64>)
 800967c:	6323      	str	r3, [r4, #48]	@ 0x30
 800967e:	4b0d      	ldr	r3, [pc, #52]	@ (80096b4 <std+0x68>)
 8009680:	6224      	str	r4, [r4, #32]
 8009682:	429c      	cmp	r4, r3
 8009684:	d006      	beq.n	8009694 <std+0x48>
 8009686:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800968a:	4294      	cmp	r4, r2
 800968c:	d002      	beq.n	8009694 <std+0x48>
 800968e:	33d0      	adds	r3, #208	@ 0xd0
 8009690:	429c      	cmp	r4, r3
 8009692:	d105      	bne.n	80096a0 <std+0x54>
 8009694:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800969c:	f000 ba6a 	b.w	8009b74 <__retarget_lock_init_recursive>
 80096a0:	bd10      	pop	{r4, pc}
 80096a2:	bf00      	nop
 80096a4:	080098cd 	.word	0x080098cd
 80096a8:	080098ef 	.word	0x080098ef
 80096ac:	08009927 	.word	0x08009927
 80096b0:	0800994b 	.word	0x0800994b
 80096b4:	2000406c 	.word	0x2000406c

080096b8 <stdio_exit_handler>:
 80096b8:	4a02      	ldr	r2, [pc, #8]	@ (80096c4 <stdio_exit_handler+0xc>)
 80096ba:	4903      	ldr	r1, [pc, #12]	@ (80096c8 <stdio_exit_handler+0x10>)
 80096bc:	4803      	ldr	r0, [pc, #12]	@ (80096cc <stdio_exit_handler+0x14>)
 80096be:	f000 b869 	b.w	8009794 <_fwalk_sglue>
 80096c2:	bf00      	nop
 80096c4:	20000010 	.word	0x20000010
 80096c8:	0800c6e9 	.word	0x0800c6e9
 80096cc:	20000020 	.word	0x20000020

080096d0 <cleanup_stdio>:
 80096d0:	6841      	ldr	r1, [r0, #4]
 80096d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009704 <cleanup_stdio+0x34>)
 80096d4:	4299      	cmp	r1, r3
 80096d6:	b510      	push	{r4, lr}
 80096d8:	4604      	mov	r4, r0
 80096da:	d001      	beq.n	80096e0 <cleanup_stdio+0x10>
 80096dc:	f003 f804 	bl	800c6e8 <_fflush_r>
 80096e0:	68a1      	ldr	r1, [r4, #8]
 80096e2:	4b09      	ldr	r3, [pc, #36]	@ (8009708 <cleanup_stdio+0x38>)
 80096e4:	4299      	cmp	r1, r3
 80096e6:	d002      	beq.n	80096ee <cleanup_stdio+0x1e>
 80096e8:	4620      	mov	r0, r4
 80096ea:	f002 fffd 	bl	800c6e8 <_fflush_r>
 80096ee:	68e1      	ldr	r1, [r4, #12]
 80096f0:	4b06      	ldr	r3, [pc, #24]	@ (800970c <cleanup_stdio+0x3c>)
 80096f2:	4299      	cmp	r1, r3
 80096f4:	d004      	beq.n	8009700 <cleanup_stdio+0x30>
 80096f6:	4620      	mov	r0, r4
 80096f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096fc:	f002 bff4 	b.w	800c6e8 <_fflush_r>
 8009700:	bd10      	pop	{r4, pc}
 8009702:	bf00      	nop
 8009704:	2000406c 	.word	0x2000406c
 8009708:	200040d4 	.word	0x200040d4
 800970c:	2000413c 	.word	0x2000413c

08009710 <global_stdio_init.part.0>:
 8009710:	b510      	push	{r4, lr}
 8009712:	4b0b      	ldr	r3, [pc, #44]	@ (8009740 <global_stdio_init.part.0+0x30>)
 8009714:	4c0b      	ldr	r4, [pc, #44]	@ (8009744 <global_stdio_init.part.0+0x34>)
 8009716:	4a0c      	ldr	r2, [pc, #48]	@ (8009748 <global_stdio_init.part.0+0x38>)
 8009718:	601a      	str	r2, [r3, #0]
 800971a:	4620      	mov	r0, r4
 800971c:	2200      	movs	r2, #0
 800971e:	2104      	movs	r1, #4
 8009720:	f7ff ff94 	bl	800964c <std>
 8009724:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009728:	2201      	movs	r2, #1
 800972a:	2109      	movs	r1, #9
 800972c:	f7ff ff8e 	bl	800964c <std>
 8009730:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009734:	2202      	movs	r2, #2
 8009736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800973a:	2112      	movs	r1, #18
 800973c:	f7ff bf86 	b.w	800964c <std>
 8009740:	200041a4 	.word	0x200041a4
 8009744:	2000406c 	.word	0x2000406c
 8009748:	080096b9 	.word	0x080096b9

0800974c <__sfp_lock_acquire>:
 800974c:	4801      	ldr	r0, [pc, #4]	@ (8009754 <__sfp_lock_acquire+0x8>)
 800974e:	f000 ba12 	b.w	8009b76 <__retarget_lock_acquire_recursive>
 8009752:	bf00      	nop
 8009754:	200041ad 	.word	0x200041ad

08009758 <__sfp_lock_release>:
 8009758:	4801      	ldr	r0, [pc, #4]	@ (8009760 <__sfp_lock_release+0x8>)
 800975a:	f000 ba0d 	b.w	8009b78 <__retarget_lock_release_recursive>
 800975e:	bf00      	nop
 8009760:	200041ad 	.word	0x200041ad

08009764 <__sinit>:
 8009764:	b510      	push	{r4, lr}
 8009766:	4604      	mov	r4, r0
 8009768:	f7ff fff0 	bl	800974c <__sfp_lock_acquire>
 800976c:	6a23      	ldr	r3, [r4, #32]
 800976e:	b11b      	cbz	r3, 8009778 <__sinit+0x14>
 8009770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009774:	f7ff bff0 	b.w	8009758 <__sfp_lock_release>
 8009778:	4b04      	ldr	r3, [pc, #16]	@ (800978c <__sinit+0x28>)
 800977a:	6223      	str	r3, [r4, #32]
 800977c:	4b04      	ldr	r3, [pc, #16]	@ (8009790 <__sinit+0x2c>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1f5      	bne.n	8009770 <__sinit+0xc>
 8009784:	f7ff ffc4 	bl	8009710 <global_stdio_init.part.0>
 8009788:	e7f2      	b.n	8009770 <__sinit+0xc>
 800978a:	bf00      	nop
 800978c:	080096d1 	.word	0x080096d1
 8009790:	200041a4 	.word	0x200041a4

08009794 <_fwalk_sglue>:
 8009794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009798:	4607      	mov	r7, r0
 800979a:	4688      	mov	r8, r1
 800979c:	4614      	mov	r4, r2
 800979e:	2600      	movs	r6, #0
 80097a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097a4:	f1b9 0901 	subs.w	r9, r9, #1
 80097a8:	d505      	bpl.n	80097b6 <_fwalk_sglue+0x22>
 80097aa:	6824      	ldr	r4, [r4, #0]
 80097ac:	2c00      	cmp	r4, #0
 80097ae:	d1f7      	bne.n	80097a0 <_fwalk_sglue+0xc>
 80097b0:	4630      	mov	r0, r6
 80097b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097b6:	89ab      	ldrh	r3, [r5, #12]
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d907      	bls.n	80097cc <_fwalk_sglue+0x38>
 80097bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097c0:	3301      	adds	r3, #1
 80097c2:	d003      	beq.n	80097cc <_fwalk_sglue+0x38>
 80097c4:	4629      	mov	r1, r5
 80097c6:	4638      	mov	r0, r7
 80097c8:	47c0      	blx	r8
 80097ca:	4306      	orrs	r6, r0
 80097cc:	3568      	adds	r5, #104	@ 0x68
 80097ce:	e7e9      	b.n	80097a4 <_fwalk_sglue+0x10>

080097d0 <_puts_r>:
 80097d0:	6a03      	ldr	r3, [r0, #32]
 80097d2:	b570      	push	{r4, r5, r6, lr}
 80097d4:	6884      	ldr	r4, [r0, #8]
 80097d6:	4605      	mov	r5, r0
 80097d8:	460e      	mov	r6, r1
 80097da:	b90b      	cbnz	r3, 80097e0 <_puts_r+0x10>
 80097dc:	f7ff ffc2 	bl	8009764 <__sinit>
 80097e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80097e2:	07db      	lsls	r3, r3, #31
 80097e4:	d405      	bmi.n	80097f2 <_puts_r+0x22>
 80097e6:	89a3      	ldrh	r3, [r4, #12]
 80097e8:	0598      	lsls	r0, r3, #22
 80097ea:	d402      	bmi.n	80097f2 <_puts_r+0x22>
 80097ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097ee:	f000 f9c2 	bl	8009b76 <__retarget_lock_acquire_recursive>
 80097f2:	89a3      	ldrh	r3, [r4, #12]
 80097f4:	0719      	lsls	r1, r3, #28
 80097f6:	d502      	bpl.n	80097fe <_puts_r+0x2e>
 80097f8:	6923      	ldr	r3, [r4, #16]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d135      	bne.n	800986a <_puts_r+0x9a>
 80097fe:	4621      	mov	r1, r4
 8009800:	4628      	mov	r0, r5
 8009802:	f000 f8e5 	bl	80099d0 <__swsetup_r>
 8009806:	b380      	cbz	r0, 800986a <_puts_r+0x9a>
 8009808:	f04f 35ff 	mov.w	r5, #4294967295
 800980c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800980e:	07da      	lsls	r2, r3, #31
 8009810:	d405      	bmi.n	800981e <_puts_r+0x4e>
 8009812:	89a3      	ldrh	r3, [r4, #12]
 8009814:	059b      	lsls	r3, r3, #22
 8009816:	d402      	bmi.n	800981e <_puts_r+0x4e>
 8009818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800981a:	f000 f9ad 	bl	8009b78 <__retarget_lock_release_recursive>
 800981e:	4628      	mov	r0, r5
 8009820:	bd70      	pop	{r4, r5, r6, pc}
 8009822:	2b00      	cmp	r3, #0
 8009824:	da04      	bge.n	8009830 <_puts_r+0x60>
 8009826:	69a2      	ldr	r2, [r4, #24]
 8009828:	429a      	cmp	r2, r3
 800982a:	dc17      	bgt.n	800985c <_puts_r+0x8c>
 800982c:	290a      	cmp	r1, #10
 800982e:	d015      	beq.n	800985c <_puts_r+0x8c>
 8009830:	6823      	ldr	r3, [r4, #0]
 8009832:	1c5a      	adds	r2, r3, #1
 8009834:	6022      	str	r2, [r4, #0]
 8009836:	7019      	strb	r1, [r3, #0]
 8009838:	68a3      	ldr	r3, [r4, #8]
 800983a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800983e:	3b01      	subs	r3, #1
 8009840:	60a3      	str	r3, [r4, #8]
 8009842:	2900      	cmp	r1, #0
 8009844:	d1ed      	bne.n	8009822 <_puts_r+0x52>
 8009846:	2b00      	cmp	r3, #0
 8009848:	da11      	bge.n	800986e <_puts_r+0x9e>
 800984a:	4622      	mov	r2, r4
 800984c:	210a      	movs	r1, #10
 800984e:	4628      	mov	r0, r5
 8009850:	f000 f87f 	bl	8009952 <__swbuf_r>
 8009854:	3001      	adds	r0, #1
 8009856:	d0d7      	beq.n	8009808 <_puts_r+0x38>
 8009858:	250a      	movs	r5, #10
 800985a:	e7d7      	b.n	800980c <_puts_r+0x3c>
 800985c:	4622      	mov	r2, r4
 800985e:	4628      	mov	r0, r5
 8009860:	f000 f877 	bl	8009952 <__swbuf_r>
 8009864:	3001      	adds	r0, #1
 8009866:	d1e7      	bne.n	8009838 <_puts_r+0x68>
 8009868:	e7ce      	b.n	8009808 <_puts_r+0x38>
 800986a:	3e01      	subs	r6, #1
 800986c:	e7e4      	b.n	8009838 <_puts_r+0x68>
 800986e:	6823      	ldr	r3, [r4, #0]
 8009870:	1c5a      	adds	r2, r3, #1
 8009872:	6022      	str	r2, [r4, #0]
 8009874:	220a      	movs	r2, #10
 8009876:	701a      	strb	r2, [r3, #0]
 8009878:	e7ee      	b.n	8009858 <_puts_r+0x88>
	...

0800987c <puts>:
 800987c:	4b02      	ldr	r3, [pc, #8]	@ (8009888 <puts+0xc>)
 800987e:	4601      	mov	r1, r0
 8009880:	6818      	ldr	r0, [r3, #0]
 8009882:	f7ff bfa5 	b.w	80097d0 <_puts_r>
 8009886:	bf00      	nop
 8009888:	2000001c 	.word	0x2000001c

0800988c <siprintf>:
 800988c:	b40e      	push	{r1, r2, r3}
 800988e:	b500      	push	{lr}
 8009890:	b09c      	sub	sp, #112	@ 0x70
 8009892:	ab1d      	add	r3, sp, #116	@ 0x74
 8009894:	9002      	str	r0, [sp, #8]
 8009896:	9006      	str	r0, [sp, #24]
 8009898:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800989c:	4809      	ldr	r0, [pc, #36]	@ (80098c4 <siprintf+0x38>)
 800989e:	9107      	str	r1, [sp, #28]
 80098a0:	9104      	str	r1, [sp, #16]
 80098a2:	4909      	ldr	r1, [pc, #36]	@ (80098c8 <siprintf+0x3c>)
 80098a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80098a8:	9105      	str	r1, [sp, #20]
 80098aa:	6800      	ldr	r0, [r0, #0]
 80098ac:	9301      	str	r3, [sp, #4]
 80098ae:	a902      	add	r1, sp, #8
 80098b0:	f002 fc58 	bl	800c164 <_svfiprintf_r>
 80098b4:	9b02      	ldr	r3, [sp, #8]
 80098b6:	2200      	movs	r2, #0
 80098b8:	701a      	strb	r2, [r3, #0]
 80098ba:	b01c      	add	sp, #112	@ 0x70
 80098bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80098c0:	b003      	add	sp, #12
 80098c2:	4770      	bx	lr
 80098c4:	2000001c 	.word	0x2000001c
 80098c8:	ffff0208 	.word	0xffff0208

080098cc <__sread>:
 80098cc:	b510      	push	{r4, lr}
 80098ce:	460c      	mov	r4, r1
 80098d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d4:	f000 f900 	bl	8009ad8 <_read_r>
 80098d8:	2800      	cmp	r0, #0
 80098da:	bfab      	itete	ge
 80098dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80098de:	89a3      	ldrhlt	r3, [r4, #12]
 80098e0:	181b      	addge	r3, r3, r0
 80098e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80098e6:	bfac      	ite	ge
 80098e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80098ea:	81a3      	strhlt	r3, [r4, #12]
 80098ec:	bd10      	pop	{r4, pc}

080098ee <__swrite>:
 80098ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098f2:	461f      	mov	r7, r3
 80098f4:	898b      	ldrh	r3, [r1, #12]
 80098f6:	05db      	lsls	r3, r3, #23
 80098f8:	4605      	mov	r5, r0
 80098fa:	460c      	mov	r4, r1
 80098fc:	4616      	mov	r6, r2
 80098fe:	d505      	bpl.n	800990c <__swrite+0x1e>
 8009900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009904:	2302      	movs	r3, #2
 8009906:	2200      	movs	r2, #0
 8009908:	f000 f8d4 	bl	8009ab4 <_lseek_r>
 800990c:	89a3      	ldrh	r3, [r4, #12]
 800990e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009912:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009916:	81a3      	strh	r3, [r4, #12]
 8009918:	4632      	mov	r2, r6
 800991a:	463b      	mov	r3, r7
 800991c:	4628      	mov	r0, r5
 800991e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009922:	f000 b8eb 	b.w	8009afc <_write_r>

08009926 <__sseek>:
 8009926:	b510      	push	{r4, lr}
 8009928:	460c      	mov	r4, r1
 800992a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800992e:	f000 f8c1 	bl	8009ab4 <_lseek_r>
 8009932:	1c43      	adds	r3, r0, #1
 8009934:	89a3      	ldrh	r3, [r4, #12]
 8009936:	bf15      	itete	ne
 8009938:	6560      	strne	r0, [r4, #84]	@ 0x54
 800993a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800993e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009942:	81a3      	strheq	r3, [r4, #12]
 8009944:	bf18      	it	ne
 8009946:	81a3      	strhne	r3, [r4, #12]
 8009948:	bd10      	pop	{r4, pc}

0800994a <__sclose>:
 800994a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800994e:	f000 b8a1 	b.w	8009a94 <_close_r>

08009952 <__swbuf_r>:
 8009952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009954:	460e      	mov	r6, r1
 8009956:	4614      	mov	r4, r2
 8009958:	4605      	mov	r5, r0
 800995a:	b118      	cbz	r0, 8009964 <__swbuf_r+0x12>
 800995c:	6a03      	ldr	r3, [r0, #32]
 800995e:	b90b      	cbnz	r3, 8009964 <__swbuf_r+0x12>
 8009960:	f7ff ff00 	bl	8009764 <__sinit>
 8009964:	69a3      	ldr	r3, [r4, #24]
 8009966:	60a3      	str	r3, [r4, #8]
 8009968:	89a3      	ldrh	r3, [r4, #12]
 800996a:	071a      	lsls	r2, r3, #28
 800996c:	d501      	bpl.n	8009972 <__swbuf_r+0x20>
 800996e:	6923      	ldr	r3, [r4, #16]
 8009970:	b943      	cbnz	r3, 8009984 <__swbuf_r+0x32>
 8009972:	4621      	mov	r1, r4
 8009974:	4628      	mov	r0, r5
 8009976:	f000 f82b 	bl	80099d0 <__swsetup_r>
 800997a:	b118      	cbz	r0, 8009984 <__swbuf_r+0x32>
 800997c:	f04f 37ff 	mov.w	r7, #4294967295
 8009980:	4638      	mov	r0, r7
 8009982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009984:	6823      	ldr	r3, [r4, #0]
 8009986:	6922      	ldr	r2, [r4, #16]
 8009988:	1a98      	subs	r0, r3, r2
 800998a:	6963      	ldr	r3, [r4, #20]
 800998c:	b2f6      	uxtb	r6, r6
 800998e:	4283      	cmp	r3, r0
 8009990:	4637      	mov	r7, r6
 8009992:	dc05      	bgt.n	80099a0 <__swbuf_r+0x4e>
 8009994:	4621      	mov	r1, r4
 8009996:	4628      	mov	r0, r5
 8009998:	f002 fea6 	bl	800c6e8 <_fflush_r>
 800999c:	2800      	cmp	r0, #0
 800999e:	d1ed      	bne.n	800997c <__swbuf_r+0x2a>
 80099a0:	68a3      	ldr	r3, [r4, #8]
 80099a2:	3b01      	subs	r3, #1
 80099a4:	60a3      	str	r3, [r4, #8]
 80099a6:	6823      	ldr	r3, [r4, #0]
 80099a8:	1c5a      	adds	r2, r3, #1
 80099aa:	6022      	str	r2, [r4, #0]
 80099ac:	701e      	strb	r6, [r3, #0]
 80099ae:	6962      	ldr	r2, [r4, #20]
 80099b0:	1c43      	adds	r3, r0, #1
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d004      	beq.n	80099c0 <__swbuf_r+0x6e>
 80099b6:	89a3      	ldrh	r3, [r4, #12]
 80099b8:	07db      	lsls	r3, r3, #31
 80099ba:	d5e1      	bpl.n	8009980 <__swbuf_r+0x2e>
 80099bc:	2e0a      	cmp	r6, #10
 80099be:	d1df      	bne.n	8009980 <__swbuf_r+0x2e>
 80099c0:	4621      	mov	r1, r4
 80099c2:	4628      	mov	r0, r5
 80099c4:	f002 fe90 	bl	800c6e8 <_fflush_r>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d0d9      	beq.n	8009980 <__swbuf_r+0x2e>
 80099cc:	e7d6      	b.n	800997c <__swbuf_r+0x2a>
	...

080099d0 <__swsetup_r>:
 80099d0:	b538      	push	{r3, r4, r5, lr}
 80099d2:	4b29      	ldr	r3, [pc, #164]	@ (8009a78 <__swsetup_r+0xa8>)
 80099d4:	4605      	mov	r5, r0
 80099d6:	6818      	ldr	r0, [r3, #0]
 80099d8:	460c      	mov	r4, r1
 80099da:	b118      	cbz	r0, 80099e4 <__swsetup_r+0x14>
 80099dc:	6a03      	ldr	r3, [r0, #32]
 80099de:	b90b      	cbnz	r3, 80099e4 <__swsetup_r+0x14>
 80099e0:	f7ff fec0 	bl	8009764 <__sinit>
 80099e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099e8:	0719      	lsls	r1, r3, #28
 80099ea:	d422      	bmi.n	8009a32 <__swsetup_r+0x62>
 80099ec:	06da      	lsls	r2, r3, #27
 80099ee:	d407      	bmi.n	8009a00 <__swsetup_r+0x30>
 80099f0:	2209      	movs	r2, #9
 80099f2:	602a      	str	r2, [r5, #0]
 80099f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099f8:	81a3      	strh	r3, [r4, #12]
 80099fa:	f04f 30ff 	mov.w	r0, #4294967295
 80099fe:	e033      	b.n	8009a68 <__swsetup_r+0x98>
 8009a00:	0758      	lsls	r0, r3, #29
 8009a02:	d512      	bpl.n	8009a2a <__swsetup_r+0x5a>
 8009a04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a06:	b141      	cbz	r1, 8009a1a <__swsetup_r+0x4a>
 8009a08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a0c:	4299      	cmp	r1, r3
 8009a0e:	d002      	beq.n	8009a16 <__swsetup_r+0x46>
 8009a10:	4628      	mov	r0, r5
 8009a12:	f000 ff15 	bl	800a840 <_free_r>
 8009a16:	2300      	movs	r3, #0
 8009a18:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a1a:	89a3      	ldrh	r3, [r4, #12]
 8009a1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009a20:	81a3      	strh	r3, [r4, #12]
 8009a22:	2300      	movs	r3, #0
 8009a24:	6063      	str	r3, [r4, #4]
 8009a26:	6923      	ldr	r3, [r4, #16]
 8009a28:	6023      	str	r3, [r4, #0]
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	f043 0308 	orr.w	r3, r3, #8
 8009a30:	81a3      	strh	r3, [r4, #12]
 8009a32:	6923      	ldr	r3, [r4, #16]
 8009a34:	b94b      	cbnz	r3, 8009a4a <__swsetup_r+0x7a>
 8009a36:	89a3      	ldrh	r3, [r4, #12]
 8009a38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009a3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a40:	d003      	beq.n	8009a4a <__swsetup_r+0x7a>
 8009a42:	4621      	mov	r1, r4
 8009a44:	4628      	mov	r0, r5
 8009a46:	f002 fe9d 	bl	800c784 <__smakebuf_r>
 8009a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a4e:	f013 0201 	ands.w	r2, r3, #1
 8009a52:	d00a      	beq.n	8009a6a <__swsetup_r+0x9a>
 8009a54:	2200      	movs	r2, #0
 8009a56:	60a2      	str	r2, [r4, #8]
 8009a58:	6962      	ldr	r2, [r4, #20]
 8009a5a:	4252      	negs	r2, r2
 8009a5c:	61a2      	str	r2, [r4, #24]
 8009a5e:	6922      	ldr	r2, [r4, #16]
 8009a60:	b942      	cbnz	r2, 8009a74 <__swsetup_r+0xa4>
 8009a62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009a66:	d1c5      	bne.n	80099f4 <__swsetup_r+0x24>
 8009a68:	bd38      	pop	{r3, r4, r5, pc}
 8009a6a:	0799      	lsls	r1, r3, #30
 8009a6c:	bf58      	it	pl
 8009a6e:	6962      	ldrpl	r2, [r4, #20]
 8009a70:	60a2      	str	r2, [r4, #8]
 8009a72:	e7f4      	b.n	8009a5e <__swsetup_r+0x8e>
 8009a74:	2000      	movs	r0, #0
 8009a76:	e7f7      	b.n	8009a68 <__swsetup_r+0x98>
 8009a78:	2000001c 	.word	0x2000001c

08009a7c <memset>:
 8009a7c:	4402      	add	r2, r0
 8009a7e:	4603      	mov	r3, r0
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d100      	bne.n	8009a86 <memset+0xa>
 8009a84:	4770      	bx	lr
 8009a86:	f803 1b01 	strb.w	r1, [r3], #1
 8009a8a:	e7f9      	b.n	8009a80 <memset+0x4>

08009a8c <_localeconv_r>:
 8009a8c:	4800      	ldr	r0, [pc, #0]	@ (8009a90 <_localeconv_r+0x4>)
 8009a8e:	4770      	bx	lr
 8009a90:	2000015c 	.word	0x2000015c

08009a94 <_close_r>:
 8009a94:	b538      	push	{r3, r4, r5, lr}
 8009a96:	4d06      	ldr	r5, [pc, #24]	@ (8009ab0 <_close_r+0x1c>)
 8009a98:	2300      	movs	r3, #0
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	4608      	mov	r0, r1
 8009a9e:	602b      	str	r3, [r5, #0]
 8009aa0:	f7f7 fefe 	bl	80018a0 <_close>
 8009aa4:	1c43      	adds	r3, r0, #1
 8009aa6:	d102      	bne.n	8009aae <_close_r+0x1a>
 8009aa8:	682b      	ldr	r3, [r5, #0]
 8009aaa:	b103      	cbz	r3, 8009aae <_close_r+0x1a>
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	bd38      	pop	{r3, r4, r5, pc}
 8009ab0:	200041a8 	.word	0x200041a8

08009ab4 <_lseek_r>:
 8009ab4:	b538      	push	{r3, r4, r5, lr}
 8009ab6:	4d07      	ldr	r5, [pc, #28]	@ (8009ad4 <_lseek_r+0x20>)
 8009ab8:	4604      	mov	r4, r0
 8009aba:	4608      	mov	r0, r1
 8009abc:	4611      	mov	r1, r2
 8009abe:	2200      	movs	r2, #0
 8009ac0:	602a      	str	r2, [r5, #0]
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	f7f7 ff13 	bl	80018ee <_lseek>
 8009ac8:	1c43      	adds	r3, r0, #1
 8009aca:	d102      	bne.n	8009ad2 <_lseek_r+0x1e>
 8009acc:	682b      	ldr	r3, [r5, #0]
 8009ace:	b103      	cbz	r3, 8009ad2 <_lseek_r+0x1e>
 8009ad0:	6023      	str	r3, [r4, #0]
 8009ad2:	bd38      	pop	{r3, r4, r5, pc}
 8009ad4:	200041a8 	.word	0x200041a8

08009ad8 <_read_r>:
 8009ad8:	b538      	push	{r3, r4, r5, lr}
 8009ada:	4d07      	ldr	r5, [pc, #28]	@ (8009af8 <_read_r+0x20>)
 8009adc:	4604      	mov	r4, r0
 8009ade:	4608      	mov	r0, r1
 8009ae0:	4611      	mov	r1, r2
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	602a      	str	r2, [r5, #0]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	f7f7 fea1 	bl	800182e <_read>
 8009aec:	1c43      	adds	r3, r0, #1
 8009aee:	d102      	bne.n	8009af6 <_read_r+0x1e>
 8009af0:	682b      	ldr	r3, [r5, #0]
 8009af2:	b103      	cbz	r3, 8009af6 <_read_r+0x1e>
 8009af4:	6023      	str	r3, [r4, #0]
 8009af6:	bd38      	pop	{r3, r4, r5, pc}
 8009af8:	200041a8 	.word	0x200041a8

08009afc <_write_r>:
 8009afc:	b538      	push	{r3, r4, r5, lr}
 8009afe:	4d07      	ldr	r5, [pc, #28]	@ (8009b1c <_write_r+0x20>)
 8009b00:	4604      	mov	r4, r0
 8009b02:	4608      	mov	r0, r1
 8009b04:	4611      	mov	r1, r2
 8009b06:	2200      	movs	r2, #0
 8009b08:	602a      	str	r2, [r5, #0]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	f7f7 feac 	bl	8001868 <_write>
 8009b10:	1c43      	adds	r3, r0, #1
 8009b12:	d102      	bne.n	8009b1a <_write_r+0x1e>
 8009b14:	682b      	ldr	r3, [r5, #0]
 8009b16:	b103      	cbz	r3, 8009b1a <_write_r+0x1e>
 8009b18:	6023      	str	r3, [r4, #0]
 8009b1a:	bd38      	pop	{r3, r4, r5, pc}
 8009b1c:	200041a8 	.word	0x200041a8

08009b20 <__errno>:
 8009b20:	4b01      	ldr	r3, [pc, #4]	@ (8009b28 <__errno+0x8>)
 8009b22:	6818      	ldr	r0, [r3, #0]
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	2000001c 	.word	0x2000001c

08009b2c <__libc_init_array>:
 8009b2c:	b570      	push	{r4, r5, r6, lr}
 8009b2e:	4d0d      	ldr	r5, [pc, #52]	@ (8009b64 <__libc_init_array+0x38>)
 8009b30:	4c0d      	ldr	r4, [pc, #52]	@ (8009b68 <__libc_init_array+0x3c>)
 8009b32:	1b64      	subs	r4, r4, r5
 8009b34:	10a4      	asrs	r4, r4, #2
 8009b36:	2600      	movs	r6, #0
 8009b38:	42a6      	cmp	r6, r4
 8009b3a:	d109      	bne.n	8009b50 <__libc_init_array+0x24>
 8009b3c:	4d0b      	ldr	r5, [pc, #44]	@ (8009b6c <__libc_init_array+0x40>)
 8009b3e:	4c0c      	ldr	r4, [pc, #48]	@ (8009b70 <__libc_init_array+0x44>)
 8009b40:	f003 fae0 	bl	800d104 <_init>
 8009b44:	1b64      	subs	r4, r4, r5
 8009b46:	10a4      	asrs	r4, r4, #2
 8009b48:	2600      	movs	r6, #0
 8009b4a:	42a6      	cmp	r6, r4
 8009b4c:	d105      	bne.n	8009b5a <__libc_init_array+0x2e>
 8009b4e:	bd70      	pop	{r4, r5, r6, pc}
 8009b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b54:	4798      	blx	r3
 8009b56:	3601      	adds	r6, #1
 8009b58:	e7ee      	b.n	8009b38 <__libc_init_array+0xc>
 8009b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b5e:	4798      	blx	r3
 8009b60:	3601      	adds	r6, #1
 8009b62:	e7f2      	b.n	8009b4a <__libc_init_array+0x1e>
 8009b64:	0800d698 	.word	0x0800d698
 8009b68:	0800d698 	.word	0x0800d698
 8009b6c:	0800d698 	.word	0x0800d698
 8009b70:	0800d69c 	.word	0x0800d69c

08009b74 <__retarget_lock_init_recursive>:
 8009b74:	4770      	bx	lr

08009b76 <__retarget_lock_acquire_recursive>:
 8009b76:	4770      	bx	lr

08009b78 <__retarget_lock_release_recursive>:
 8009b78:	4770      	bx	lr

08009b7a <memcpy>:
 8009b7a:	440a      	add	r2, r1
 8009b7c:	4291      	cmp	r1, r2
 8009b7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b82:	d100      	bne.n	8009b86 <memcpy+0xc>
 8009b84:	4770      	bx	lr
 8009b86:	b510      	push	{r4, lr}
 8009b88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b90:	4291      	cmp	r1, r2
 8009b92:	d1f9      	bne.n	8009b88 <memcpy+0xe>
 8009b94:	bd10      	pop	{r4, pc}
	...

08009b98 <nanf>:
 8009b98:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009ba0 <nanf+0x8>
 8009b9c:	4770      	bx	lr
 8009b9e:	bf00      	nop
 8009ba0:	7fc00000 	.word	0x7fc00000

08009ba4 <quorem>:
 8009ba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba8:	6903      	ldr	r3, [r0, #16]
 8009baa:	690c      	ldr	r4, [r1, #16]
 8009bac:	42a3      	cmp	r3, r4
 8009bae:	4607      	mov	r7, r0
 8009bb0:	db7e      	blt.n	8009cb0 <quorem+0x10c>
 8009bb2:	3c01      	subs	r4, #1
 8009bb4:	f101 0814 	add.w	r8, r1, #20
 8009bb8:	00a3      	lsls	r3, r4, #2
 8009bba:	f100 0514 	add.w	r5, r0, #20
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009bc4:	9301      	str	r3, [sp, #4]
 8009bc6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009bca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009bd6:	fbb2 f6f3 	udiv	r6, r2, r3
 8009bda:	d32e      	bcc.n	8009c3a <quorem+0x96>
 8009bdc:	f04f 0a00 	mov.w	sl, #0
 8009be0:	46c4      	mov	ip, r8
 8009be2:	46ae      	mov	lr, r5
 8009be4:	46d3      	mov	fp, sl
 8009be6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009bea:	b298      	uxth	r0, r3
 8009bec:	fb06 a000 	mla	r0, r6, r0, sl
 8009bf0:	0c02      	lsrs	r2, r0, #16
 8009bf2:	0c1b      	lsrs	r3, r3, #16
 8009bf4:	fb06 2303 	mla	r3, r6, r3, r2
 8009bf8:	f8de 2000 	ldr.w	r2, [lr]
 8009bfc:	b280      	uxth	r0, r0
 8009bfe:	b292      	uxth	r2, r2
 8009c00:	1a12      	subs	r2, r2, r0
 8009c02:	445a      	add	r2, fp
 8009c04:	f8de 0000 	ldr.w	r0, [lr]
 8009c08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009c12:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009c16:	b292      	uxth	r2, r2
 8009c18:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009c1c:	45e1      	cmp	r9, ip
 8009c1e:	f84e 2b04 	str.w	r2, [lr], #4
 8009c22:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009c26:	d2de      	bcs.n	8009be6 <quorem+0x42>
 8009c28:	9b00      	ldr	r3, [sp, #0]
 8009c2a:	58eb      	ldr	r3, [r5, r3]
 8009c2c:	b92b      	cbnz	r3, 8009c3a <quorem+0x96>
 8009c2e:	9b01      	ldr	r3, [sp, #4]
 8009c30:	3b04      	subs	r3, #4
 8009c32:	429d      	cmp	r5, r3
 8009c34:	461a      	mov	r2, r3
 8009c36:	d32f      	bcc.n	8009c98 <quorem+0xf4>
 8009c38:	613c      	str	r4, [r7, #16]
 8009c3a:	4638      	mov	r0, r7
 8009c3c:	f001 f9c4 	bl	800afc8 <__mcmp>
 8009c40:	2800      	cmp	r0, #0
 8009c42:	db25      	blt.n	8009c90 <quorem+0xec>
 8009c44:	4629      	mov	r1, r5
 8009c46:	2000      	movs	r0, #0
 8009c48:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c4c:	f8d1 c000 	ldr.w	ip, [r1]
 8009c50:	fa1f fe82 	uxth.w	lr, r2
 8009c54:	fa1f f38c 	uxth.w	r3, ip
 8009c58:	eba3 030e 	sub.w	r3, r3, lr
 8009c5c:	4403      	add	r3, r0
 8009c5e:	0c12      	lsrs	r2, r2, #16
 8009c60:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009c64:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c6e:	45c1      	cmp	r9, r8
 8009c70:	f841 3b04 	str.w	r3, [r1], #4
 8009c74:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009c78:	d2e6      	bcs.n	8009c48 <quorem+0xa4>
 8009c7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c82:	b922      	cbnz	r2, 8009c8e <quorem+0xea>
 8009c84:	3b04      	subs	r3, #4
 8009c86:	429d      	cmp	r5, r3
 8009c88:	461a      	mov	r2, r3
 8009c8a:	d30b      	bcc.n	8009ca4 <quorem+0x100>
 8009c8c:	613c      	str	r4, [r7, #16]
 8009c8e:	3601      	adds	r6, #1
 8009c90:	4630      	mov	r0, r6
 8009c92:	b003      	add	sp, #12
 8009c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c98:	6812      	ldr	r2, [r2, #0]
 8009c9a:	3b04      	subs	r3, #4
 8009c9c:	2a00      	cmp	r2, #0
 8009c9e:	d1cb      	bne.n	8009c38 <quorem+0x94>
 8009ca0:	3c01      	subs	r4, #1
 8009ca2:	e7c6      	b.n	8009c32 <quorem+0x8e>
 8009ca4:	6812      	ldr	r2, [r2, #0]
 8009ca6:	3b04      	subs	r3, #4
 8009ca8:	2a00      	cmp	r2, #0
 8009caa:	d1ef      	bne.n	8009c8c <quorem+0xe8>
 8009cac:	3c01      	subs	r4, #1
 8009cae:	e7ea      	b.n	8009c86 <quorem+0xe2>
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	e7ee      	b.n	8009c92 <quorem+0xee>
 8009cb4:	0000      	movs	r0, r0
	...

08009cb8 <_dtoa_r>:
 8009cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cbc:	69c7      	ldr	r7, [r0, #28]
 8009cbe:	b099      	sub	sp, #100	@ 0x64
 8009cc0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009cc4:	ec55 4b10 	vmov	r4, r5, d0
 8009cc8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009cca:	9109      	str	r1, [sp, #36]	@ 0x24
 8009ccc:	4683      	mov	fp, r0
 8009cce:	920e      	str	r2, [sp, #56]	@ 0x38
 8009cd0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009cd2:	b97f      	cbnz	r7, 8009cf4 <_dtoa_r+0x3c>
 8009cd4:	2010      	movs	r0, #16
 8009cd6:	f000 fdfd 	bl	800a8d4 <malloc>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	f8cb 001c 	str.w	r0, [fp, #28]
 8009ce0:	b920      	cbnz	r0, 8009cec <_dtoa_r+0x34>
 8009ce2:	4ba7      	ldr	r3, [pc, #668]	@ (8009f80 <_dtoa_r+0x2c8>)
 8009ce4:	21ef      	movs	r1, #239	@ 0xef
 8009ce6:	48a7      	ldr	r0, [pc, #668]	@ (8009f84 <_dtoa_r+0x2cc>)
 8009ce8:	f002 fdee 	bl	800c8c8 <__assert_func>
 8009cec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009cf0:	6007      	str	r7, [r0, #0]
 8009cf2:	60c7      	str	r7, [r0, #12]
 8009cf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009cf8:	6819      	ldr	r1, [r3, #0]
 8009cfa:	b159      	cbz	r1, 8009d14 <_dtoa_r+0x5c>
 8009cfc:	685a      	ldr	r2, [r3, #4]
 8009cfe:	604a      	str	r2, [r1, #4]
 8009d00:	2301      	movs	r3, #1
 8009d02:	4093      	lsls	r3, r2
 8009d04:	608b      	str	r3, [r1, #8]
 8009d06:	4658      	mov	r0, fp
 8009d08:	f000 feda 	bl	800aac0 <_Bfree>
 8009d0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d10:	2200      	movs	r2, #0
 8009d12:	601a      	str	r2, [r3, #0]
 8009d14:	1e2b      	subs	r3, r5, #0
 8009d16:	bfb9      	ittee	lt
 8009d18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009d1c:	9303      	strlt	r3, [sp, #12]
 8009d1e:	2300      	movge	r3, #0
 8009d20:	6033      	strge	r3, [r6, #0]
 8009d22:	9f03      	ldr	r7, [sp, #12]
 8009d24:	4b98      	ldr	r3, [pc, #608]	@ (8009f88 <_dtoa_r+0x2d0>)
 8009d26:	bfbc      	itt	lt
 8009d28:	2201      	movlt	r2, #1
 8009d2a:	6032      	strlt	r2, [r6, #0]
 8009d2c:	43bb      	bics	r3, r7
 8009d2e:	d112      	bne.n	8009d56 <_dtoa_r+0x9e>
 8009d30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009d32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009d36:	6013      	str	r3, [r2, #0]
 8009d38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d3c:	4323      	orrs	r3, r4
 8009d3e:	f000 854d 	beq.w	800a7dc <_dtoa_r+0xb24>
 8009d42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d44:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009f9c <_dtoa_r+0x2e4>
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	f000 854f 	beq.w	800a7ec <_dtoa_r+0xb34>
 8009d4e:	f10a 0303 	add.w	r3, sl, #3
 8009d52:	f000 bd49 	b.w	800a7e8 <_dtoa_r+0xb30>
 8009d56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	ec51 0b17 	vmov	r0, r1, d7
 8009d60:	2300      	movs	r3, #0
 8009d62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009d66:	f7f6 fed7 	bl	8000b18 <__aeabi_dcmpeq>
 8009d6a:	4680      	mov	r8, r0
 8009d6c:	b158      	cbz	r0, 8009d86 <_dtoa_r+0xce>
 8009d6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009d70:	2301      	movs	r3, #1
 8009d72:	6013      	str	r3, [r2, #0]
 8009d74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d76:	b113      	cbz	r3, 8009d7e <_dtoa_r+0xc6>
 8009d78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009d7a:	4b84      	ldr	r3, [pc, #528]	@ (8009f8c <_dtoa_r+0x2d4>)
 8009d7c:	6013      	str	r3, [r2, #0]
 8009d7e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009fa0 <_dtoa_r+0x2e8>
 8009d82:	f000 bd33 	b.w	800a7ec <_dtoa_r+0xb34>
 8009d86:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009d8a:	aa16      	add	r2, sp, #88	@ 0x58
 8009d8c:	a917      	add	r1, sp, #92	@ 0x5c
 8009d8e:	4658      	mov	r0, fp
 8009d90:	f001 fa3a 	bl	800b208 <__d2b>
 8009d94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009d98:	4681      	mov	r9, r0
 8009d9a:	2e00      	cmp	r6, #0
 8009d9c:	d077      	beq.n	8009e8e <_dtoa_r+0x1d6>
 8009d9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009da0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009da8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009dac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009db0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009db4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009db8:	4619      	mov	r1, r3
 8009dba:	2200      	movs	r2, #0
 8009dbc:	4b74      	ldr	r3, [pc, #464]	@ (8009f90 <_dtoa_r+0x2d8>)
 8009dbe:	f7f6 fa8b 	bl	80002d8 <__aeabi_dsub>
 8009dc2:	a369      	add	r3, pc, #420	@ (adr r3, 8009f68 <_dtoa_r+0x2b0>)
 8009dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc8:	f7f6 fc3e 	bl	8000648 <__aeabi_dmul>
 8009dcc:	a368      	add	r3, pc, #416	@ (adr r3, 8009f70 <_dtoa_r+0x2b8>)
 8009dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd2:	f7f6 fa83 	bl	80002dc <__adddf3>
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	4630      	mov	r0, r6
 8009dda:	460d      	mov	r5, r1
 8009ddc:	f7f6 fbca 	bl	8000574 <__aeabi_i2d>
 8009de0:	a365      	add	r3, pc, #404	@ (adr r3, 8009f78 <_dtoa_r+0x2c0>)
 8009de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de6:	f7f6 fc2f 	bl	8000648 <__aeabi_dmul>
 8009dea:	4602      	mov	r2, r0
 8009dec:	460b      	mov	r3, r1
 8009dee:	4620      	mov	r0, r4
 8009df0:	4629      	mov	r1, r5
 8009df2:	f7f6 fa73 	bl	80002dc <__adddf3>
 8009df6:	4604      	mov	r4, r0
 8009df8:	460d      	mov	r5, r1
 8009dfa:	f7f6 fed5 	bl	8000ba8 <__aeabi_d2iz>
 8009dfe:	2200      	movs	r2, #0
 8009e00:	4607      	mov	r7, r0
 8009e02:	2300      	movs	r3, #0
 8009e04:	4620      	mov	r0, r4
 8009e06:	4629      	mov	r1, r5
 8009e08:	f7f6 fe90 	bl	8000b2c <__aeabi_dcmplt>
 8009e0c:	b140      	cbz	r0, 8009e20 <_dtoa_r+0x168>
 8009e0e:	4638      	mov	r0, r7
 8009e10:	f7f6 fbb0 	bl	8000574 <__aeabi_i2d>
 8009e14:	4622      	mov	r2, r4
 8009e16:	462b      	mov	r3, r5
 8009e18:	f7f6 fe7e 	bl	8000b18 <__aeabi_dcmpeq>
 8009e1c:	b900      	cbnz	r0, 8009e20 <_dtoa_r+0x168>
 8009e1e:	3f01      	subs	r7, #1
 8009e20:	2f16      	cmp	r7, #22
 8009e22:	d851      	bhi.n	8009ec8 <_dtoa_r+0x210>
 8009e24:	4b5b      	ldr	r3, [pc, #364]	@ (8009f94 <_dtoa_r+0x2dc>)
 8009e26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e32:	f7f6 fe7b 	bl	8000b2c <__aeabi_dcmplt>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	d048      	beq.n	8009ecc <_dtoa_r+0x214>
 8009e3a:	3f01      	subs	r7, #1
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009e40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009e42:	1b9b      	subs	r3, r3, r6
 8009e44:	1e5a      	subs	r2, r3, #1
 8009e46:	bf44      	itt	mi
 8009e48:	f1c3 0801 	rsbmi	r8, r3, #1
 8009e4c:	2300      	movmi	r3, #0
 8009e4e:	9208      	str	r2, [sp, #32]
 8009e50:	bf54      	ite	pl
 8009e52:	f04f 0800 	movpl.w	r8, #0
 8009e56:	9308      	strmi	r3, [sp, #32]
 8009e58:	2f00      	cmp	r7, #0
 8009e5a:	db39      	blt.n	8009ed0 <_dtoa_r+0x218>
 8009e5c:	9b08      	ldr	r3, [sp, #32]
 8009e5e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009e60:	443b      	add	r3, r7
 8009e62:	9308      	str	r3, [sp, #32]
 8009e64:	2300      	movs	r3, #0
 8009e66:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e6a:	2b09      	cmp	r3, #9
 8009e6c:	d864      	bhi.n	8009f38 <_dtoa_r+0x280>
 8009e6e:	2b05      	cmp	r3, #5
 8009e70:	bfc4      	itt	gt
 8009e72:	3b04      	subgt	r3, #4
 8009e74:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e78:	f1a3 0302 	sub.w	r3, r3, #2
 8009e7c:	bfcc      	ite	gt
 8009e7e:	2400      	movgt	r4, #0
 8009e80:	2401      	movle	r4, #1
 8009e82:	2b03      	cmp	r3, #3
 8009e84:	d863      	bhi.n	8009f4e <_dtoa_r+0x296>
 8009e86:	e8df f003 	tbb	[pc, r3]
 8009e8a:	372a      	.short	0x372a
 8009e8c:	5535      	.short	0x5535
 8009e8e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009e92:	441e      	add	r6, r3
 8009e94:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009e98:	2b20      	cmp	r3, #32
 8009e9a:	bfc1      	itttt	gt
 8009e9c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009ea0:	409f      	lslgt	r7, r3
 8009ea2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009ea6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009eaa:	bfd6      	itet	le
 8009eac:	f1c3 0320 	rsble	r3, r3, #32
 8009eb0:	ea47 0003 	orrgt.w	r0, r7, r3
 8009eb4:	fa04 f003 	lslle.w	r0, r4, r3
 8009eb8:	f7f6 fb4c 	bl	8000554 <__aeabi_ui2d>
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009ec2:	3e01      	subs	r6, #1
 8009ec4:	9214      	str	r2, [sp, #80]	@ 0x50
 8009ec6:	e777      	b.n	8009db8 <_dtoa_r+0x100>
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e7b8      	b.n	8009e3e <_dtoa_r+0x186>
 8009ecc:	9012      	str	r0, [sp, #72]	@ 0x48
 8009ece:	e7b7      	b.n	8009e40 <_dtoa_r+0x188>
 8009ed0:	427b      	negs	r3, r7
 8009ed2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	eba8 0807 	sub.w	r8, r8, r7
 8009eda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009edc:	e7c4      	b.n	8009e68 <_dtoa_r+0x1b0>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ee2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	dc35      	bgt.n	8009f54 <_dtoa_r+0x29c>
 8009ee8:	2301      	movs	r3, #1
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	9307      	str	r3, [sp, #28]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ef2:	e00b      	b.n	8009f0c <_dtoa_r+0x254>
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e7f3      	b.n	8009ee0 <_dtoa_r+0x228>
 8009ef8:	2300      	movs	r3, #0
 8009efa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009efc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009efe:	18fb      	adds	r3, r7, r3
 8009f00:	9300      	str	r3, [sp, #0]
 8009f02:	3301      	adds	r3, #1
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	9307      	str	r3, [sp, #28]
 8009f08:	bfb8      	it	lt
 8009f0a:	2301      	movlt	r3, #1
 8009f0c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009f10:	2100      	movs	r1, #0
 8009f12:	2204      	movs	r2, #4
 8009f14:	f102 0514 	add.w	r5, r2, #20
 8009f18:	429d      	cmp	r5, r3
 8009f1a:	d91f      	bls.n	8009f5c <_dtoa_r+0x2a4>
 8009f1c:	6041      	str	r1, [r0, #4]
 8009f1e:	4658      	mov	r0, fp
 8009f20:	f000 fd8e 	bl	800aa40 <_Balloc>
 8009f24:	4682      	mov	sl, r0
 8009f26:	2800      	cmp	r0, #0
 8009f28:	d13c      	bne.n	8009fa4 <_dtoa_r+0x2ec>
 8009f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8009f98 <_dtoa_r+0x2e0>)
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009f32:	e6d8      	b.n	8009ce6 <_dtoa_r+0x2e>
 8009f34:	2301      	movs	r3, #1
 8009f36:	e7e0      	b.n	8009efa <_dtoa_r+0x242>
 8009f38:	2401      	movs	r4, #1
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009f40:	f04f 33ff 	mov.w	r3, #4294967295
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	9307      	str	r3, [sp, #28]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	2312      	movs	r3, #18
 8009f4c:	e7d0      	b.n	8009ef0 <_dtoa_r+0x238>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f52:	e7f5      	b.n	8009f40 <_dtoa_r+0x288>
 8009f54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	9307      	str	r3, [sp, #28]
 8009f5a:	e7d7      	b.n	8009f0c <_dtoa_r+0x254>
 8009f5c:	3101      	adds	r1, #1
 8009f5e:	0052      	lsls	r2, r2, #1
 8009f60:	e7d8      	b.n	8009f14 <_dtoa_r+0x25c>
 8009f62:	bf00      	nop
 8009f64:	f3af 8000 	nop.w
 8009f68:	636f4361 	.word	0x636f4361
 8009f6c:	3fd287a7 	.word	0x3fd287a7
 8009f70:	8b60c8b3 	.word	0x8b60c8b3
 8009f74:	3fc68a28 	.word	0x3fc68a28
 8009f78:	509f79fb 	.word	0x509f79fb
 8009f7c:	3fd34413 	.word	0x3fd34413
 8009f80:	0800d2aa 	.word	0x0800d2aa
 8009f84:	0800d2c1 	.word	0x0800d2c1
 8009f88:	7ff00000 	.word	0x7ff00000
 8009f8c:	0800d275 	.word	0x0800d275
 8009f90:	3ff80000 	.word	0x3ff80000
 8009f94:	0800d3b8 	.word	0x0800d3b8
 8009f98:	0800d319 	.word	0x0800d319
 8009f9c:	0800d2a6 	.word	0x0800d2a6
 8009fa0:	0800d274 	.word	0x0800d274
 8009fa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009fa8:	6018      	str	r0, [r3, #0]
 8009faa:	9b07      	ldr	r3, [sp, #28]
 8009fac:	2b0e      	cmp	r3, #14
 8009fae:	f200 80a4 	bhi.w	800a0fa <_dtoa_r+0x442>
 8009fb2:	2c00      	cmp	r4, #0
 8009fb4:	f000 80a1 	beq.w	800a0fa <_dtoa_r+0x442>
 8009fb8:	2f00      	cmp	r7, #0
 8009fba:	dd33      	ble.n	800a024 <_dtoa_r+0x36c>
 8009fbc:	4bad      	ldr	r3, [pc, #692]	@ (800a274 <_dtoa_r+0x5bc>)
 8009fbe:	f007 020f 	and.w	r2, r7, #15
 8009fc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fc6:	ed93 7b00 	vldr	d7, [r3]
 8009fca:	05f8      	lsls	r0, r7, #23
 8009fcc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009fd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009fd4:	d516      	bpl.n	800a004 <_dtoa_r+0x34c>
 8009fd6:	4ba8      	ldr	r3, [pc, #672]	@ (800a278 <_dtoa_r+0x5c0>)
 8009fd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009fdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009fe0:	f7f6 fc5c 	bl	800089c <__aeabi_ddiv>
 8009fe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fe8:	f004 040f 	and.w	r4, r4, #15
 8009fec:	2603      	movs	r6, #3
 8009fee:	4da2      	ldr	r5, [pc, #648]	@ (800a278 <_dtoa_r+0x5c0>)
 8009ff0:	b954      	cbnz	r4, 800a008 <_dtoa_r+0x350>
 8009ff2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ffa:	f7f6 fc4f 	bl	800089c <__aeabi_ddiv>
 8009ffe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a002:	e028      	b.n	800a056 <_dtoa_r+0x39e>
 800a004:	2602      	movs	r6, #2
 800a006:	e7f2      	b.n	8009fee <_dtoa_r+0x336>
 800a008:	07e1      	lsls	r1, r4, #31
 800a00a:	d508      	bpl.n	800a01e <_dtoa_r+0x366>
 800a00c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a010:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a014:	f7f6 fb18 	bl	8000648 <__aeabi_dmul>
 800a018:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a01c:	3601      	adds	r6, #1
 800a01e:	1064      	asrs	r4, r4, #1
 800a020:	3508      	adds	r5, #8
 800a022:	e7e5      	b.n	8009ff0 <_dtoa_r+0x338>
 800a024:	f000 80d2 	beq.w	800a1cc <_dtoa_r+0x514>
 800a028:	427c      	negs	r4, r7
 800a02a:	4b92      	ldr	r3, [pc, #584]	@ (800a274 <_dtoa_r+0x5bc>)
 800a02c:	4d92      	ldr	r5, [pc, #584]	@ (800a278 <_dtoa_r+0x5c0>)
 800a02e:	f004 020f 	and.w	r2, r4, #15
 800a032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a03e:	f7f6 fb03 	bl	8000648 <__aeabi_dmul>
 800a042:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a046:	1124      	asrs	r4, r4, #4
 800a048:	2300      	movs	r3, #0
 800a04a:	2602      	movs	r6, #2
 800a04c:	2c00      	cmp	r4, #0
 800a04e:	f040 80b2 	bne.w	800a1b6 <_dtoa_r+0x4fe>
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1d3      	bne.n	8009ffe <_dtoa_r+0x346>
 800a056:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a058:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f000 80b7 	beq.w	800a1d0 <_dtoa_r+0x518>
 800a062:	4b86      	ldr	r3, [pc, #536]	@ (800a27c <_dtoa_r+0x5c4>)
 800a064:	2200      	movs	r2, #0
 800a066:	4620      	mov	r0, r4
 800a068:	4629      	mov	r1, r5
 800a06a:	f7f6 fd5f 	bl	8000b2c <__aeabi_dcmplt>
 800a06e:	2800      	cmp	r0, #0
 800a070:	f000 80ae 	beq.w	800a1d0 <_dtoa_r+0x518>
 800a074:	9b07      	ldr	r3, [sp, #28]
 800a076:	2b00      	cmp	r3, #0
 800a078:	f000 80aa 	beq.w	800a1d0 <_dtoa_r+0x518>
 800a07c:	9b00      	ldr	r3, [sp, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	dd37      	ble.n	800a0f2 <_dtoa_r+0x43a>
 800a082:	1e7b      	subs	r3, r7, #1
 800a084:	9304      	str	r3, [sp, #16]
 800a086:	4620      	mov	r0, r4
 800a088:	4b7d      	ldr	r3, [pc, #500]	@ (800a280 <_dtoa_r+0x5c8>)
 800a08a:	2200      	movs	r2, #0
 800a08c:	4629      	mov	r1, r5
 800a08e:	f7f6 fadb 	bl	8000648 <__aeabi_dmul>
 800a092:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a096:	9c00      	ldr	r4, [sp, #0]
 800a098:	3601      	adds	r6, #1
 800a09a:	4630      	mov	r0, r6
 800a09c:	f7f6 fa6a 	bl	8000574 <__aeabi_i2d>
 800a0a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0a4:	f7f6 fad0 	bl	8000648 <__aeabi_dmul>
 800a0a8:	4b76      	ldr	r3, [pc, #472]	@ (800a284 <_dtoa_r+0x5cc>)
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f7f6 f916 	bl	80002dc <__adddf3>
 800a0b0:	4605      	mov	r5, r0
 800a0b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a0b6:	2c00      	cmp	r4, #0
 800a0b8:	f040 808d 	bne.w	800a1d6 <_dtoa_r+0x51e>
 800a0bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0c0:	4b71      	ldr	r3, [pc, #452]	@ (800a288 <_dtoa_r+0x5d0>)
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f7f6 f908 	bl	80002d8 <__aeabi_dsub>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a0d0:	462a      	mov	r2, r5
 800a0d2:	4633      	mov	r3, r6
 800a0d4:	f7f6 fd48 	bl	8000b68 <__aeabi_dcmpgt>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	f040 828b 	bne.w	800a5f4 <_dtoa_r+0x93c>
 800a0de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0e2:	462a      	mov	r2, r5
 800a0e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a0e8:	f7f6 fd20 	bl	8000b2c <__aeabi_dcmplt>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	f040 8128 	bne.w	800a342 <_dtoa_r+0x68a>
 800a0f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a0f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a0fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f2c0 815a 	blt.w	800a3b6 <_dtoa_r+0x6fe>
 800a102:	2f0e      	cmp	r7, #14
 800a104:	f300 8157 	bgt.w	800a3b6 <_dtoa_r+0x6fe>
 800a108:	4b5a      	ldr	r3, [pc, #360]	@ (800a274 <_dtoa_r+0x5bc>)
 800a10a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a10e:	ed93 7b00 	vldr	d7, [r3]
 800a112:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a114:	2b00      	cmp	r3, #0
 800a116:	ed8d 7b00 	vstr	d7, [sp]
 800a11a:	da03      	bge.n	800a124 <_dtoa_r+0x46c>
 800a11c:	9b07      	ldr	r3, [sp, #28]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	f340 8101 	ble.w	800a326 <_dtoa_r+0x66e>
 800a124:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a128:	4656      	mov	r6, sl
 800a12a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a12e:	4620      	mov	r0, r4
 800a130:	4629      	mov	r1, r5
 800a132:	f7f6 fbb3 	bl	800089c <__aeabi_ddiv>
 800a136:	f7f6 fd37 	bl	8000ba8 <__aeabi_d2iz>
 800a13a:	4680      	mov	r8, r0
 800a13c:	f7f6 fa1a 	bl	8000574 <__aeabi_i2d>
 800a140:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a144:	f7f6 fa80 	bl	8000648 <__aeabi_dmul>
 800a148:	4602      	mov	r2, r0
 800a14a:	460b      	mov	r3, r1
 800a14c:	4620      	mov	r0, r4
 800a14e:	4629      	mov	r1, r5
 800a150:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a154:	f7f6 f8c0 	bl	80002d8 <__aeabi_dsub>
 800a158:	f806 4b01 	strb.w	r4, [r6], #1
 800a15c:	9d07      	ldr	r5, [sp, #28]
 800a15e:	eba6 040a 	sub.w	r4, r6, sl
 800a162:	42a5      	cmp	r5, r4
 800a164:	4602      	mov	r2, r0
 800a166:	460b      	mov	r3, r1
 800a168:	f040 8117 	bne.w	800a39a <_dtoa_r+0x6e2>
 800a16c:	f7f6 f8b6 	bl	80002dc <__adddf3>
 800a170:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a174:	4604      	mov	r4, r0
 800a176:	460d      	mov	r5, r1
 800a178:	f7f6 fcf6 	bl	8000b68 <__aeabi_dcmpgt>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	f040 80f9 	bne.w	800a374 <_dtoa_r+0x6bc>
 800a182:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a186:	4620      	mov	r0, r4
 800a188:	4629      	mov	r1, r5
 800a18a:	f7f6 fcc5 	bl	8000b18 <__aeabi_dcmpeq>
 800a18e:	b118      	cbz	r0, 800a198 <_dtoa_r+0x4e0>
 800a190:	f018 0f01 	tst.w	r8, #1
 800a194:	f040 80ee 	bne.w	800a374 <_dtoa_r+0x6bc>
 800a198:	4649      	mov	r1, r9
 800a19a:	4658      	mov	r0, fp
 800a19c:	f000 fc90 	bl	800aac0 <_Bfree>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	7033      	strb	r3, [r6, #0]
 800a1a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a1a6:	3701      	adds	r7, #1
 800a1a8:	601f      	str	r7, [r3, #0]
 800a1aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f000 831d 	beq.w	800a7ec <_dtoa_r+0xb34>
 800a1b2:	601e      	str	r6, [r3, #0]
 800a1b4:	e31a      	b.n	800a7ec <_dtoa_r+0xb34>
 800a1b6:	07e2      	lsls	r2, r4, #31
 800a1b8:	d505      	bpl.n	800a1c6 <_dtoa_r+0x50e>
 800a1ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a1be:	f7f6 fa43 	bl	8000648 <__aeabi_dmul>
 800a1c2:	3601      	adds	r6, #1
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	1064      	asrs	r4, r4, #1
 800a1c8:	3508      	adds	r5, #8
 800a1ca:	e73f      	b.n	800a04c <_dtoa_r+0x394>
 800a1cc:	2602      	movs	r6, #2
 800a1ce:	e742      	b.n	800a056 <_dtoa_r+0x39e>
 800a1d0:	9c07      	ldr	r4, [sp, #28]
 800a1d2:	9704      	str	r7, [sp, #16]
 800a1d4:	e761      	b.n	800a09a <_dtoa_r+0x3e2>
 800a1d6:	4b27      	ldr	r3, [pc, #156]	@ (800a274 <_dtoa_r+0x5bc>)
 800a1d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a1da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a1de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a1e2:	4454      	add	r4, sl
 800a1e4:	2900      	cmp	r1, #0
 800a1e6:	d053      	beq.n	800a290 <_dtoa_r+0x5d8>
 800a1e8:	4928      	ldr	r1, [pc, #160]	@ (800a28c <_dtoa_r+0x5d4>)
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	f7f6 fb56 	bl	800089c <__aeabi_ddiv>
 800a1f0:	4633      	mov	r3, r6
 800a1f2:	462a      	mov	r2, r5
 800a1f4:	f7f6 f870 	bl	80002d8 <__aeabi_dsub>
 800a1f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a1fc:	4656      	mov	r6, sl
 800a1fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a202:	f7f6 fcd1 	bl	8000ba8 <__aeabi_d2iz>
 800a206:	4605      	mov	r5, r0
 800a208:	f7f6 f9b4 	bl	8000574 <__aeabi_i2d>
 800a20c:	4602      	mov	r2, r0
 800a20e:	460b      	mov	r3, r1
 800a210:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a214:	f7f6 f860 	bl	80002d8 <__aeabi_dsub>
 800a218:	3530      	adds	r5, #48	@ 0x30
 800a21a:	4602      	mov	r2, r0
 800a21c:	460b      	mov	r3, r1
 800a21e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a222:	f806 5b01 	strb.w	r5, [r6], #1
 800a226:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a22a:	f7f6 fc7f 	bl	8000b2c <__aeabi_dcmplt>
 800a22e:	2800      	cmp	r0, #0
 800a230:	d171      	bne.n	800a316 <_dtoa_r+0x65e>
 800a232:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a236:	4911      	ldr	r1, [pc, #68]	@ (800a27c <_dtoa_r+0x5c4>)
 800a238:	2000      	movs	r0, #0
 800a23a:	f7f6 f84d 	bl	80002d8 <__aeabi_dsub>
 800a23e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a242:	f7f6 fc73 	bl	8000b2c <__aeabi_dcmplt>
 800a246:	2800      	cmp	r0, #0
 800a248:	f040 8095 	bne.w	800a376 <_dtoa_r+0x6be>
 800a24c:	42a6      	cmp	r6, r4
 800a24e:	f43f af50 	beq.w	800a0f2 <_dtoa_r+0x43a>
 800a252:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a256:	4b0a      	ldr	r3, [pc, #40]	@ (800a280 <_dtoa_r+0x5c8>)
 800a258:	2200      	movs	r2, #0
 800a25a:	f7f6 f9f5 	bl	8000648 <__aeabi_dmul>
 800a25e:	4b08      	ldr	r3, [pc, #32]	@ (800a280 <_dtoa_r+0x5c8>)
 800a260:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a264:	2200      	movs	r2, #0
 800a266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a26a:	f7f6 f9ed 	bl	8000648 <__aeabi_dmul>
 800a26e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a272:	e7c4      	b.n	800a1fe <_dtoa_r+0x546>
 800a274:	0800d3b8 	.word	0x0800d3b8
 800a278:	0800d390 	.word	0x0800d390
 800a27c:	3ff00000 	.word	0x3ff00000
 800a280:	40240000 	.word	0x40240000
 800a284:	401c0000 	.word	0x401c0000
 800a288:	40140000 	.word	0x40140000
 800a28c:	3fe00000 	.word	0x3fe00000
 800a290:	4631      	mov	r1, r6
 800a292:	4628      	mov	r0, r5
 800a294:	f7f6 f9d8 	bl	8000648 <__aeabi_dmul>
 800a298:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a29c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a29e:	4656      	mov	r6, sl
 800a2a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2a4:	f7f6 fc80 	bl	8000ba8 <__aeabi_d2iz>
 800a2a8:	4605      	mov	r5, r0
 800a2aa:	f7f6 f963 	bl	8000574 <__aeabi_i2d>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2b6:	f7f6 f80f 	bl	80002d8 <__aeabi_dsub>
 800a2ba:	3530      	adds	r5, #48	@ 0x30
 800a2bc:	f806 5b01 	strb.w	r5, [r6], #1
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	42a6      	cmp	r6, r4
 800a2c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a2ca:	f04f 0200 	mov.w	r2, #0
 800a2ce:	d124      	bne.n	800a31a <_dtoa_r+0x662>
 800a2d0:	4bac      	ldr	r3, [pc, #688]	@ (800a584 <_dtoa_r+0x8cc>)
 800a2d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a2d6:	f7f6 f801 	bl	80002dc <__adddf3>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	460b      	mov	r3, r1
 800a2de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2e2:	f7f6 fc41 	bl	8000b68 <__aeabi_dcmpgt>
 800a2e6:	2800      	cmp	r0, #0
 800a2e8:	d145      	bne.n	800a376 <_dtoa_r+0x6be>
 800a2ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a2ee:	49a5      	ldr	r1, [pc, #660]	@ (800a584 <_dtoa_r+0x8cc>)
 800a2f0:	2000      	movs	r0, #0
 800a2f2:	f7f5 fff1 	bl	80002d8 <__aeabi_dsub>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2fe:	f7f6 fc15 	bl	8000b2c <__aeabi_dcmplt>
 800a302:	2800      	cmp	r0, #0
 800a304:	f43f aef5 	beq.w	800a0f2 <_dtoa_r+0x43a>
 800a308:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a30a:	1e73      	subs	r3, r6, #1
 800a30c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a30e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a312:	2b30      	cmp	r3, #48	@ 0x30
 800a314:	d0f8      	beq.n	800a308 <_dtoa_r+0x650>
 800a316:	9f04      	ldr	r7, [sp, #16]
 800a318:	e73e      	b.n	800a198 <_dtoa_r+0x4e0>
 800a31a:	4b9b      	ldr	r3, [pc, #620]	@ (800a588 <_dtoa_r+0x8d0>)
 800a31c:	f7f6 f994 	bl	8000648 <__aeabi_dmul>
 800a320:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a324:	e7bc      	b.n	800a2a0 <_dtoa_r+0x5e8>
 800a326:	d10c      	bne.n	800a342 <_dtoa_r+0x68a>
 800a328:	4b98      	ldr	r3, [pc, #608]	@ (800a58c <_dtoa_r+0x8d4>)
 800a32a:	2200      	movs	r2, #0
 800a32c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a330:	f7f6 f98a 	bl	8000648 <__aeabi_dmul>
 800a334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a338:	f7f6 fc0c 	bl	8000b54 <__aeabi_dcmpge>
 800a33c:	2800      	cmp	r0, #0
 800a33e:	f000 8157 	beq.w	800a5f0 <_dtoa_r+0x938>
 800a342:	2400      	movs	r4, #0
 800a344:	4625      	mov	r5, r4
 800a346:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a348:	43db      	mvns	r3, r3
 800a34a:	9304      	str	r3, [sp, #16]
 800a34c:	4656      	mov	r6, sl
 800a34e:	2700      	movs	r7, #0
 800a350:	4621      	mov	r1, r4
 800a352:	4658      	mov	r0, fp
 800a354:	f000 fbb4 	bl	800aac0 <_Bfree>
 800a358:	2d00      	cmp	r5, #0
 800a35a:	d0dc      	beq.n	800a316 <_dtoa_r+0x65e>
 800a35c:	b12f      	cbz	r7, 800a36a <_dtoa_r+0x6b2>
 800a35e:	42af      	cmp	r7, r5
 800a360:	d003      	beq.n	800a36a <_dtoa_r+0x6b2>
 800a362:	4639      	mov	r1, r7
 800a364:	4658      	mov	r0, fp
 800a366:	f000 fbab 	bl	800aac0 <_Bfree>
 800a36a:	4629      	mov	r1, r5
 800a36c:	4658      	mov	r0, fp
 800a36e:	f000 fba7 	bl	800aac0 <_Bfree>
 800a372:	e7d0      	b.n	800a316 <_dtoa_r+0x65e>
 800a374:	9704      	str	r7, [sp, #16]
 800a376:	4633      	mov	r3, r6
 800a378:	461e      	mov	r6, r3
 800a37a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a37e:	2a39      	cmp	r2, #57	@ 0x39
 800a380:	d107      	bne.n	800a392 <_dtoa_r+0x6da>
 800a382:	459a      	cmp	sl, r3
 800a384:	d1f8      	bne.n	800a378 <_dtoa_r+0x6c0>
 800a386:	9a04      	ldr	r2, [sp, #16]
 800a388:	3201      	adds	r2, #1
 800a38a:	9204      	str	r2, [sp, #16]
 800a38c:	2230      	movs	r2, #48	@ 0x30
 800a38e:	f88a 2000 	strb.w	r2, [sl]
 800a392:	781a      	ldrb	r2, [r3, #0]
 800a394:	3201      	adds	r2, #1
 800a396:	701a      	strb	r2, [r3, #0]
 800a398:	e7bd      	b.n	800a316 <_dtoa_r+0x65e>
 800a39a:	4b7b      	ldr	r3, [pc, #492]	@ (800a588 <_dtoa_r+0x8d0>)
 800a39c:	2200      	movs	r2, #0
 800a39e:	f7f6 f953 	bl	8000648 <__aeabi_dmul>
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	460d      	mov	r5, r1
 800a3aa:	f7f6 fbb5 	bl	8000b18 <__aeabi_dcmpeq>
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	f43f aebb 	beq.w	800a12a <_dtoa_r+0x472>
 800a3b4:	e6f0      	b.n	800a198 <_dtoa_r+0x4e0>
 800a3b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a3b8:	2a00      	cmp	r2, #0
 800a3ba:	f000 80db 	beq.w	800a574 <_dtoa_r+0x8bc>
 800a3be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3c0:	2a01      	cmp	r2, #1
 800a3c2:	f300 80bf 	bgt.w	800a544 <_dtoa_r+0x88c>
 800a3c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a3c8:	2a00      	cmp	r2, #0
 800a3ca:	f000 80b7 	beq.w	800a53c <_dtoa_r+0x884>
 800a3ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a3d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a3d4:	4646      	mov	r6, r8
 800a3d6:	9a08      	ldr	r2, [sp, #32]
 800a3d8:	2101      	movs	r1, #1
 800a3da:	441a      	add	r2, r3
 800a3dc:	4658      	mov	r0, fp
 800a3de:	4498      	add	r8, r3
 800a3e0:	9208      	str	r2, [sp, #32]
 800a3e2:	f000 fc6b 	bl	800acbc <__i2b>
 800a3e6:	4605      	mov	r5, r0
 800a3e8:	b15e      	cbz	r6, 800a402 <_dtoa_r+0x74a>
 800a3ea:	9b08      	ldr	r3, [sp, #32]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	dd08      	ble.n	800a402 <_dtoa_r+0x74a>
 800a3f0:	42b3      	cmp	r3, r6
 800a3f2:	9a08      	ldr	r2, [sp, #32]
 800a3f4:	bfa8      	it	ge
 800a3f6:	4633      	movge	r3, r6
 800a3f8:	eba8 0803 	sub.w	r8, r8, r3
 800a3fc:	1af6      	subs	r6, r6, r3
 800a3fe:	1ad3      	subs	r3, r2, r3
 800a400:	9308      	str	r3, [sp, #32]
 800a402:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a404:	b1f3      	cbz	r3, 800a444 <_dtoa_r+0x78c>
 800a406:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 80b7 	beq.w	800a57c <_dtoa_r+0x8c4>
 800a40e:	b18c      	cbz	r4, 800a434 <_dtoa_r+0x77c>
 800a410:	4629      	mov	r1, r5
 800a412:	4622      	mov	r2, r4
 800a414:	4658      	mov	r0, fp
 800a416:	f000 fd11 	bl	800ae3c <__pow5mult>
 800a41a:	464a      	mov	r2, r9
 800a41c:	4601      	mov	r1, r0
 800a41e:	4605      	mov	r5, r0
 800a420:	4658      	mov	r0, fp
 800a422:	f000 fc61 	bl	800ace8 <__multiply>
 800a426:	4649      	mov	r1, r9
 800a428:	9004      	str	r0, [sp, #16]
 800a42a:	4658      	mov	r0, fp
 800a42c:	f000 fb48 	bl	800aac0 <_Bfree>
 800a430:	9b04      	ldr	r3, [sp, #16]
 800a432:	4699      	mov	r9, r3
 800a434:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a436:	1b1a      	subs	r2, r3, r4
 800a438:	d004      	beq.n	800a444 <_dtoa_r+0x78c>
 800a43a:	4649      	mov	r1, r9
 800a43c:	4658      	mov	r0, fp
 800a43e:	f000 fcfd 	bl	800ae3c <__pow5mult>
 800a442:	4681      	mov	r9, r0
 800a444:	2101      	movs	r1, #1
 800a446:	4658      	mov	r0, fp
 800a448:	f000 fc38 	bl	800acbc <__i2b>
 800a44c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a44e:	4604      	mov	r4, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	f000 81cf 	beq.w	800a7f4 <_dtoa_r+0xb3c>
 800a456:	461a      	mov	r2, r3
 800a458:	4601      	mov	r1, r0
 800a45a:	4658      	mov	r0, fp
 800a45c:	f000 fcee 	bl	800ae3c <__pow5mult>
 800a460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a462:	2b01      	cmp	r3, #1
 800a464:	4604      	mov	r4, r0
 800a466:	f300 8095 	bgt.w	800a594 <_dtoa_r+0x8dc>
 800a46a:	9b02      	ldr	r3, [sp, #8]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f040 8087 	bne.w	800a580 <_dtoa_r+0x8c8>
 800a472:	9b03      	ldr	r3, [sp, #12]
 800a474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f040 8089 	bne.w	800a590 <_dtoa_r+0x8d8>
 800a47e:	9b03      	ldr	r3, [sp, #12]
 800a480:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a484:	0d1b      	lsrs	r3, r3, #20
 800a486:	051b      	lsls	r3, r3, #20
 800a488:	b12b      	cbz	r3, 800a496 <_dtoa_r+0x7de>
 800a48a:	9b08      	ldr	r3, [sp, #32]
 800a48c:	3301      	adds	r3, #1
 800a48e:	9308      	str	r3, [sp, #32]
 800a490:	f108 0801 	add.w	r8, r8, #1
 800a494:	2301      	movs	r3, #1
 800a496:	930a      	str	r3, [sp, #40]	@ 0x28
 800a498:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	f000 81b0 	beq.w	800a800 <_dtoa_r+0xb48>
 800a4a0:	6923      	ldr	r3, [r4, #16]
 800a4a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a4a6:	6918      	ldr	r0, [r3, #16]
 800a4a8:	f000 fbbc 	bl	800ac24 <__hi0bits>
 800a4ac:	f1c0 0020 	rsb	r0, r0, #32
 800a4b0:	9b08      	ldr	r3, [sp, #32]
 800a4b2:	4418      	add	r0, r3
 800a4b4:	f010 001f 	ands.w	r0, r0, #31
 800a4b8:	d077      	beq.n	800a5aa <_dtoa_r+0x8f2>
 800a4ba:	f1c0 0320 	rsb	r3, r0, #32
 800a4be:	2b04      	cmp	r3, #4
 800a4c0:	dd6b      	ble.n	800a59a <_dtoa_r+0x8e2>
 800a4c2:	9b08      	ldr	r3, [sp, #32]
 800a4c4:	f1c0 001c 	rsb	r0, r0, #28
 800a4c8:	4403      	add	r3, r0
 800a4ca:	4480      	add	r8, r0
 800a4cc:	4406      	add	r6, r0
 800a4ce:	9308      	str	r3, [sp, #32]
 800a4d0:	f1b8 0f00 	cmp.w	r8, #0
 800a4d4:	dd05      	ble.n	800a4e2 <_dtoa_r+0x82a>
 800a4d6:	4649      	mov	r1, r9
 800a4d8:	4642      	mov	r2, r8
 800a4da:	4658      	mov	r0, fp
 800a4dc:	f000 fd08 	bl	800aef0 <__lshift>
 800a4e0:	4681      	mov	r9, r0
 800a4e2:	9b08      	ldr	r3, [sp, #32]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	dd05      	ble.n	800a4f4 <_dtoa_r+0x83c>
 800a4e8:	4621      	mov	r1, r4
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	4658      	mov	r0, fp
 800a4ee:	f000 fcff 	bl	800aef0 <__lshift>
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d059      	beq.n	800a5ae <_dtoa_r+0x8f6>
 800a4fa:	4621      	mov	r1, r4
 800a4fc:	4648      	mov	r0, r9
 800a4fe:	f000 fd63 	bl	800afc8 <__mcmp>
 800a502:	2800      	cmp	r0, #0
 800a504:	da53      	bge.n	800a5ae <_dtoa_r+0x8f6>
 800a506:	1e7b      	subs	r3, r7, #1
 800a508:	9304      	str	r3, [sp, #16]
 800a50a:	4649      	mov	r1, r9
 800a50c:	2300      	movs	r3, #0
 800a50e:	220a      	movs	r2, #10
 800a510:	4658      	mov	r0, fp
 800a512:	f000 faf7 	bl	800ab04 <__multadd>
 800a516:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a518:	4681      	mov	r9, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	f000 8172 	beq.w	800a804 <_dtoa_r+0xb4c>
 800a520:	2300      	movs	r3, #0
 800a522:	4629      	mov	r1, r5
 800a524:	220a      	movs	r2, #10
 800a526:	4658      	mov	r0, fp
 800a528:	f000 faec 	bl	800ab04 <__multadd>
 800a52c:	9b00      	ldr	r3, [sp, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	4605      	mov	r5, r0
 800a532:	dc67      	bgt.n	800a604 <_dtoa_r+0x94c>
 800a534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a536:	2b02      	cmp	r3, #2
 800a538:	dc41      	bgt.n	800a5be <_dtoa_r+0x906>
 800a53a:	e063      	b.n	800a604 <_dtoa_r+0x94c>
 800a53c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a53e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a542:	e746      	b.n	800a3d2 <_dtoa_r+0x71a>
 800a544:	9b07      	ldr	r3, [sp, #28]
 800a546:	1e5c      	subs	r4, r3, #1
 800a548:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a54a:	42a3      	cmp	r3, r4
 800a54c:	bfbf      	itttt	lt
 800a54e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a550:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a552:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a554:	1ae3      	sublt	r3, r4, r3
 800a556:	bfb4      	ite	lt
 800a558:	18d2      	addlt	r2, r2, r3
 800a55a:	1b1c      	subge	r4, r3, r4
 800a55c:	9b07      	ldr	r3, [sp, #28]
 800a55e:	bfbc      	itt	lt
 800a560:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a562:	2400      	movlt	r4, #0
 800a564:	2b00      	cmp	r3, #0
 800a566:	bfb5      	itete	lt
 800a568:	eba8 0603 	sublt.w	r6, r8, r3
 800a56c:	9b07      	ldrge	r3, [sp, #28]
 800a56e:	2300      	movlt	r3, #0
 800a570:	4646      	movge	r6, r8
 800a572:	e730      	b.n	800a3d6 <_dtoa_r+0x71e>
 800a574:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a576:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a578:	4646      	mov	r6, r8
 800a57a:	e735      	b.n	800a3e8 <_dtoa_r+0x730>
 800a57c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a57e:	e75c      	b.n	800a43a <_dtoa_r+0x782>
 800a580:	2300      	movs	r3, #0
 800a582:	e788      	b.n	800a496 <_dtoa_r+0x7de>
 800a584:	3fe00000 	.word	0x3fe00000
 800a588:	40240000 	.word	0x40240000
 800a58c:	40140000 	.word	0x40140000
 800a590:	9b02      	ldr	r3, [sp, #8]
 800a592:	e780      	b.n	800a496 <_dtoa_r+0x7de>
 800a594:	2300      	movs	r3, #0
 800a596:	930a      	str	r3, [sp, #40]	@ 0x28
 800a598:	e782      	b.n	800a4a0 <_dtoa_r+0x7e8>
 800a59a:	d099      	beq.n	800a4d0 <_dtoa_r+0x818>
 800a59c:	9a08      	ldr	r2, [sp, #32]
 800a59e:	331c      	adds	r3, #28
 800a5a0:	441a      	add	r2, r3
 800a5a2:	4498      	add	r8, r3
 800a5a4:	441e      	add	r6, r3
 800a5a6:	9208      	str	r2, [sp, #32]
 800a5a8:	e792      	b.n	800a4d0 <_dtoa_r+0x818>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	e7f6      	b.n	800a59c <_dtoa_r+0x8e4>
 800a5ae:	9b07      	ldr	r3, [sp, #28]
 800a5b0:	9704      	str	r7, [sp, #16]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	dc20      	bgt.n	800a5f8 <_dtoa_r+0x940>
 800a5b6:	9300      	str	r3, [sp, #0]
 800a5b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	dd1e      	ble.n	800a5fc <_dtoa_r+0x944>
 800a5be:	9b00      	ldr	r3, [sp, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f47f aec0 	bne.w	800a346 <_dtoa_r+0x68e>
 800a5c6:	4621      	mov	r1, r4
 800a5c8:	2205      	movs	r2, #5
 800a5ca:	4658      	mov	r0, fp
 800a5cc:	f000 fa9a 	bl	800ab04 <__multadd>
 800a5d0:	4601      	mov	r1, r0
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	4648      	mov	r0, r9
 800a5d6:	f000 fcf7 	bl	800afc8 <__mcmp>
 800a5da:	2800      	cmp	r0, #0
 800a5dc:	f77f aeb3 	ble.w	800a346 <_dtoa_r+0x68e>
 800a5e0:	4656      	mov	r6, sl
 800a5e2:	2331      	movs	r3, #49	@ 0x31
 800a5e4:	f806 3b01 	strb.w	r3, [r6], #1
 800a5e8:	9b04      	ldr	r3, [sp, #16]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	9304      	str	r3, [sp, #16]
 800a5ee:	e6ae      	b.n	800a34e <_dtoa_r+0x696>
 800a5f0:	9c07      	ldr	r4, [sp, #28]
 800a5f2:	9704      	str	r7, [sp, #16]
 800a5f4:	4625      	mov	r5, r4
 800a5f6:	e7f3      	b.n	800a5e0 <_dtoa_r+0x928>
 800a5f8:	9b07      	ldr	r3, [sp, #28]
 800a5fa:	9300      	str	r3, [sp, #0]
 800a5fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f000 8104 	beq.w	800a80c <_dtoa_r+0xb54>
 800a604:	2e00      	cmp	r6, #0
 800a606:	dd05      	ble.n	800a614 <_dtoa_r+0x95c>
 800a608:	4629      	mov	r1, r5
 800a60a:	4632      	mov	r2, r6
 800a60c:	4658      	mov	r0, fp
 800a60e:	f000 fc6f 	bl	800aef0 <__lshift>
 800a612:	4605      	mov	r5, r0
 800a614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a616:	2b00      	cmp	r3, #0
 800a618:	d05a      	beq.n	800a6d0 <_dtoa_r+0xa18>
 800a61a:	6869      	ldr	r1, [r5, #4]
 800a61c:	4658      	mov	r0, fp
 800a61e:	f000 fa0f 	bl	800aa40 <_Balloc>
 800a622:	4606      	mov	r6, r0
 800a624:	b928      	cbnz	r0, 800a632 <_dtoa_r+0x97a>
 800a626:	4b84      	ldr	r3, [pc, #528]	@ (800a838 <_dtoa_r+0xb80>)
 800a628:	4602      	mov	r2, r0
 800a62a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a62e:	f7ff bb5a 	b.w	8009ce6 <_dtoa_r+0x2e>
 800a632:	692a      	ldr	r2, [r5, #16]
 800a634:	3202      	adds	r2, #2
 800a636:	0092      	lsls	r2, r2, #2
 800a638:	f105 010c 	add.w	r1, r5, #12
 800a63c:	300c      	adds	r0, #12
 800a63e:	f7ff fa9c 	bl	8009b7a <memcpy>
 800a642:	2201      	movs	r2, #1
 800a644:	4631      	mov	r1, r6
 800a646:	4658      	mov	r0, fp
 800a648:	f000 fc52 	bl	800aef0 <__lshift>
 800a64c:	f10a 0301 	add.w	r3, sl, #1
 800a650:	9307      	str	r3, [sp, #28]
 800a652:	9b00      	ldr	r3, [sp, #0]
 800a654:	4453      	add	r3, sl
 800a656:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a658:	9b02      	ldr	r3, [sp, #8]
 800a65a:	f003 0301 	and.w	r3, r3, #1
 800a65e:	462f      	mov	r7, r5
 800a660:	930a      	str	r3, [sp, #40]	@ 0x28
 800a662:	4605      	mov	r5, r0
 800a664:	9b07      	ldr	r3, [sp, #28]
 800a666:	4621      	mov	r1, r4
 800a668:	3b01      	subs	r3, #1
 800a66a:	4648      	mov	r0, r9
 800a66c:	9300      	str	r3, [sp, #0]
 800a66e:	f7ff fa99 	bl	8009ba4 <quorem>
 800a672:	4639      	mov	r1, r7
 800a674:	9002      	str	r0, [sp, #8]
 800a676:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a67a:	4648      	mov	r0, r9
 800a67c:	f000 fca4 	bl	800afc8 <__mcmp>
 800a680:	462a      	mov	r2, r5
 800a682:	9008      	str	r0, [sp, #32]
 800a684:	4621      	mov	r1, r4
 800a686:	4658      	mov	r0, fp
 800a688:	f000 fcba 	bl	800b000 <__mdiff>
 800a68c:	68c2      	ldr	r2, [r0, #12]
 800a68e:	4606      	mov	r6, r0
 800a690:	bb02      	cbnz	r2, 800a6d4 <_dtoa_r+0xa1c>
 800a692:	4601      	mov	r1, r0
 800a694:	4648      	mov	r0, r9
 800a696:	f000 fc97 	bl	800afc8 <__mcmp>
 800a69a:	4602      	mov	r2, r0
 800a69c:	4631      	mov	r1, r6
 800a69e:	4658      	mov	r0, fp
 800a6a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a6a2:	f000 fa0d 	bl	800aac0 <_Bfree>
 800a6a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6aa:	9e07      	ldr	r6, [sp, #28]
 800a6ac:	ea43 0102 	orr.w	r1, r3, r2
 800a6b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6b2:	4319      	orrs	r1, r3
 800a6b4:	d110      	bne.n	800a6d8 <_dtoa_r+0xa20>
 800a6b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a6ba:	d029      	beq.n	800a710 <_dtoa_r+0xa58>
 800a6bc:	9b08      	ldr	r3, [sp, #32]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	dd02      	ble.n	800a6c8 <_dtoa_r+0xa10>
 800a6c2:	9b02      	ldr	r3, [sp, #8]
 800a6c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a6c8:	9b00      	ldr	r3, [sp, #0]
 800a6ca:	f883 8000 	strb.w	r8, [r3]
 800a6ce:	e63f      	b.n	800a350 <_dtoa_r+0x698>
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	e7bb      	b.n	800a64c <_dtoa_r+0x994>
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	e7e1      	b.n	800a69c <_dtoa_r+0x9e4>
 800a6d8:	9b08      	ldr	r3, [sp, #32]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	db04      	blt.n	800a6e8 <_dtoa_r+0xa30>
 800a6de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a6e0:	430b      	orrs	r3, r1
 800a6e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a6e4:	430b      	orrs	r3, r1
 800a6e6:	d120      	bne.n	800a72a <_dtoa_r+0xa72>
 800a6e8:	2a00      	cmp	r2, #0
 800a6ea:	dded      	ble.n	800a6c8 <_dtoa_r+0xa10>
 800a6ec:	4649      	mov	r1, r9
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	4658      	mov	r0, fp
 800a6f2:	f000 fbfd 	bl	800aef0 <__lshift>
 800a6f6:	4621      	mov	r1, r4
 800a6f8:	4681      	mov	r9, r0
 800a6fa:	f000 fc65 	bl	800afc8 <__mcmp>
 800a6fe:	2800      	cmp	r0, #0
 800a700:	dc03      	bgt.n	800a70a <_dtoa_r+0xa52>
 800a702:	d1e1      	bne.n	800a6c8 <_dtoa_r+0xa10>
 800a704:	f018 0f01 	tst.w	r8, #1
 800a708:	d0de      	beq.n	800a6c8 <_dtoa_r+0xa10>
 800a70a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a70e:	d1d8      	bne.n	800a6c2 <_dtoa_r+0xa0a>
 800a710:	9a00      	ldr	r2, [sp, #0]
 800a712:	2339      	movs	r3, #57	@ 0x39
 800a714:	7013      	strb	r3, [r2, #0]
 800a716:	4633      	mov	r3, r6
 800a718:	461e      	mov	r6, r3
 800a71a:	3b01      	subs	r3, #1
 800a71c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a720:	2a39      	cmp	r2, #57	@ 0x39
 800a722:	d052      	beq.n	800a7ca <_dtoa_r+0xb12>
 800a724:	3201      	adds	r2, #1
 800a726:	701a      	strb	r2, [r3, #0]
 800a728:	e612      	b.n	800a350 <_dtoa_r+0x698>
 800a72a:	2a00      	cmp	r2, #0
 800a72c:	dd07      	ble.n	800a73e <_dtoa_r+0xa86>
 800a72e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a732:	d0ed      	beq.n	800a710 <_dtoa_r+0xa58>
 800a734:	9a00      	ldr	r2, [sp, #0]
 800a736:	f108 0301 	add.w	r3, r8, #1
 800a73a:	7013      	strb	r3, [r2, #0]
 800a73c:	e608      	b.n	800a350 <_dtoa_r+0x698>
 800a73e:	9b07      	ldr	r3, [sp, #28]
 800a740:	9a07      	ldr	r2, [sp, #28]
 800a742:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a746:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a748:	4293      	cmp	r3, r2
 800a74a:	d028      	beq.n	800a79e <_dtoa_r+0xae6>
 800a74c:	4649      	mov	r1, r9
 800a74e:	2300      	movs	r3, #0
 800a750:	220a      	movs	r2, #10
 800a752:	4658      	mov	r0, fp
 800a754:	f000 f9d6 	bl	800ab04 <__multadd>
 800a758:	42af      	cmp	r7, r5
 800a75a:	4681      	mov	r9, r0
 800a75c:	f04f 0300 	mov.w	r3, #0
 800a760:	f04f 020a 	mov.w	r2, #10
 800a764:	4639      	mov	r1, r7
 800a766:	4658      	mov	r0, fp
 800a768:	d107      	bne.n	800a77a <_dtoa_r+0xac2>
 800a76a:	f000 f9cb 	bl	800ab04 <__multadd>
 800a76e:	4607      	mov	r7, r0
 800a770:	4605      	mov	r5, r0
 800a772:	9b07      	ldr	r3, [sp, #28]
 800a774:	3301      	adds	r3, #1
 800a776:	9307      	str	r3, [sp, #28]
 800a778:	e774      	b.n	800a664 <_dtoa_r+0x9ac>
 800a77a:	f000 f9c3 	bl	800ab04 <__multadd>
 800a77e:	4629      	mov	r1, r5
 800a780:	4607      	mov	r7, r0
 800a782:	2300      	movs	r3, #0
 800a784:	220a      	movs	r2, #10
 800a786:	4658      	mov	r0, fp
 800a788:	f000 f9bc 	bl	800ab04 <__multadd>
 800a78c:	4605      	mov	r5, r0
 800a78e:	e7f0      	b.n	800a772 <_dtoa_r+0xaba>
 800a790:	9b00      	ldr	r3, [sp, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	bfcc      	ite	gt
 800a796:	461e      	movgt	r6, r3
 800a798:	2601      	movle	r6, #1
 800a79a:	4456      	add	r6, sl
 800a79c:	2700      	movs	r7, #0
 800a79e:	4649      	mov	r1, r9
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	4658      	mov	r0, fp
 800a7a4:	f000 fba4 	bl	800aef0 <__lshift>
 800a7a8:	4621      	mov	r1, r4
 800a7aa:	4681      	mov	r9, r0
 800a7ac:	f000 fc0c 	bl	800afc8 <__mcmp>
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	dcb0      	bgt.n	800a716 <_dtoa_r+0xa5e>
 800a7b4:	d102      	bne.n	800a7bc <_dtoa_r+0xb04>
 800a7b6:	f018 0f01 	tst.w	r8, #1
 800a7ba:	d1ac      	bne.n	800a716 <_dtoa_r+0xa5e>
 800a7bc:	4633      	mov	r3, r6
 800a7be:	461e      	mov	r6, r3
 800a7c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7c4:	2a30      	cmp	r2, #48	@ 0x30
 800a7c6:	d0fa      	beq.n	800a7be <_dtoa_r+0xb06>
 800a7c8:	e5c2      	b.n	800a350 <_dtoa_r+0x698>
 800a7ca:	459a      	cmp	sl, r3
 800a7cc:	d1a4      	bne.n	800a718 <_dtoa_r+0xa60>
 800a7ce:	9b04      	ldr	r3, [sp, #16]
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	9304      	str	r3, [sp, #16]
 800a7d4:	2331      	movs	r3, #49	@ 0x31
 800a7d6:	f88a 3000 	strb.w	r3, [sl]
 800a7da:	e5b9      	b.n	800a350 <_dtoa_r+0x698>
 800a7dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a7de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a83c <_dtoa_r+0xb84>
 800a7e2:	b11b      	cbz	r3, 800a7ec <_dtoa_r+0xb34>
 800a7e4:	f10a 0308 	add.w	r3, sl, #8
 800a7e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a7ea:	6013      	str	r3, [r2, #0]
 800a7ec:	4650      	mov	r0, sl
 800a7ee:	b019      	add	sp, #100	@ 0x64
 800a7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	f77f ae37 	ble.w	800a46a <_dtoa_r+0x7b2>
 800a7fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800a800:	2001      	movs	r0, #1
 800a802:	e655      	b.n	800a4b0 <_dtoa_r+0x7f8>
 800a804:	9b00      	ldr	r3, [sp, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	f77f aed6 	ble.w	800a5b8 <_dtoa_r+0x900>
 800a80c:	4656      	mov	r6, sl
 800a80e:	4621      	mov	r1, r4
 800a810:	4648      	mov	r0, r9
 800a812:	f7ff f9c7 	bl	8009ba4 <quorem>
 800a816:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a81a:	f806 8b01 	strb.w	r8, [r6], #1
 800a81e:	9b00      	ldr	r3, [sp, #0]
 800a820:	eba6 020a 	sub.w	r2, r6, sl
 800a824:	4293      	cmp	r3, r2
 800a826:	ddb3      	ble.n	800a790 <_dtoa_r+0xad8>
 800a828:	4649      	mov	r1, r9
 800a82a:	2300      	movs	r3, #0
 800a82c:	220a      	movs	r2, #10
 800a82e:	4658      	mov	r0, fp
 800a830:	f000 f968 	bl	800ab04 <__multadd>
 800a834:	4681      	mov	r9, r0
 800a836:	e7ea      	b.n	800a80e <_dtoa_r+0xb56>
 800a838:	0800d319 	.word	0x0800d319
 800a83c:	0800d29d 	.word	0x0800d29d

0800a840 <_free_r>:
 800a840:	b538      	push	{r3, r4, r5, lr}
 800a842:	4605      	mov	r5, r0
 800a844:	2900      	cmp	r1, #0
 800a846:	d041      	beq.n	800a8cc <_free_r+0x8c>
 800a848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a84c:	1f0c      	subs	r4, r1, #4
 800a84e:	2b00      	cmp	r3, #0
 800a850:	bfb8      	it	lt
 800a852:	18e4      	addlt	r4, r4, r3
 800a854:	f000 f8e8 	bl	800aa28 <__malloc_lock>
 800a858:	4a1d      	ldr	r2, [pc, #116]	@ (800a8d0 <_free_r+0x90>)
 800a85a:	6813      	ldr	r3, [r2, #0]
 800a85c:	b933      	cbnz	r3, 800a86c <_free_r+0x2c>
 800a85e:	6063      	str	r3, [r4, #4]
 800a860:	6014      	str	r4, [r2, #0]
 800a862:	4628      	mov	r0, r5
 800a864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a868:	f000 b8e4 	b.w	800aa34 <__malloc_unlock>
 800a86c:	42a3      	cmp	r3, r4
 800a86e:	d908      	bls.n	800a882 <_free_r+0x42>
 800a870:	6820      	ldr	r0, [r4, #0]
 800a872:	1821      	adds	r1, r4, r0
 800a874:	428b      	cmp	r3, r1
 800a876:	bf01      	itttt	eq
 800a878:	6819      	ldreq	r1, [r3, #0]
 800a87a:	685b      	ldreq	r3, [r3, #4]
 800a87c:	1809      	addeq	r1, r1, r0
 800a87e:	6021      	streq	r1, [r4, #0]
 800a880:	e7ed      	b.n	800a85e <_free_r+0x1e>
 800a882:	461a      	mov	r2, r3
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	b10b      	cbz	r3, 800a88c <_free_r+0x4c>
 800a888:	42a3      	cmp	r3, r4
 800a88a:	d9fa      	bls.n	800a882 <_free_r+0x42>
 800a88c:	6811      	ldr	r1, [r2, #0]
 800a88e:	1850      	adds	r0, r2, r1
 800a890:	42a0      	cmp	r0, r4
 800a892:	d10b      	bne.n	800a8ac <_free_r+0x6c>
 800a894:	6820      	ldr	r0, [r4, #0]
 800a896:	4401      	add	r1, r0
 800a898:	1850      	adds	r0, r2, r1
 800a89a:	4283      	cmp	r3, r0
 800a89c:	6011      	str	r1, [r2, #0]
 800a89e:	d1e0      	bne.n	800a862 <_free_r+0x22>
 800a8a0:	6818      	ldr	r0, [r3, #0]
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	6053      	str	r3, [r2, #4]
 800a8a6:	4408      	add	r0, r1
 800a8a8:	6010      	str	r0, [r2, #0]
 800a8aa:	e7da      	b.n	800a862 <_free_r+0x22>
 800a8ac:	d902      	bls.n	800a8b4 <_free_r+0x74>
 800a8ae:	230c      	movs	r3, #12
 800a8b0:	602b      	str	r3, [r5, #0]
 800a8b2:	e7d6      	b.n	800a862 <_free_r+0x22>
 800a8b4:	6820      	ldr	r0, [r4, #0]
 800a8b6:	1821      	adds	r1, r4, r0
 800a8b8:	428b      	cmp	r3, r1
 800a8ba:	bf04      	itt	eq
 800a8bc:	6819      	ldreq	r1, [r3, #0]
 800a8be:	685b      	ldreq	r3, [r3, #4]
 800a8c0:	6063      	str	r3, [r4, #4]
 800a8c2:	bf04      	itt	eq
 800a8c4:	1809      	addeq	r1, r1, r0
 800a8c6:	6021      	streq	r1, [r4, #0]
 800a8c8:	6054      	str	r4, [r2, #4]
 800a8ca:	e7ca      	b.n	800a862 <_free_r+0x22>
 800a8cc:	bd38      	pop	{r3, r4, r5, pc}
 800a8ce:	bf00      	nop
 800a8d0:	200041b4 	.word	0x200041b4

0800a8d4 <malloc>:
 800a8d4:	4b02      	ldr	r3, [pc, #8]	@ (800a8e0 <malloc+0xc>)
 800a8d6:	4601      	mov	r1, r0
 800a8d8:	6818      	ldr	r0, [r3, #0]
 800a8da:	f000 b825 	b.w	800a928 <_malloc_r>
 800a8de:	bf00      	nop
 800a8e0:	2000001c 	.word	0x2000001c

0800a8e4 <sbrk_aligned>:
 800a8e4:	b570      	push	{r4, r5, r6, lr}
 800a8e6:	4e0f      	ldr	r6, [pc, #60]	@ (800a924 <sbrk_aligned+0x40>)
 800a8e8:	460c      	mov	r4, r1
 800a8ea:	6831      	ldr	r1, [r6, #0]
 800a8ec:	4605      	mov	r5, r0
 800a8ee:	b911      	cbnz	r1, 800a8f6 <sbrk_aligned+0x12>
 800a8f0:	f001 ffd2 	bl	800c898 <_sbrk_r>
 800a8f4:	6030      	str	r0, [r6, #0]
 800a8f6:	4621      	mov	r1, r4
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	f001 ffcd 	bl	800c898 <_sbrk_r>
 800a8fe:	1c43      	adds	r3, r0, #1
 800a900:	d103      	bne.n	800a90a <sbrk_aligned+0x26>
 800a902:	f04f 34ff 	mov.w	r4, #4294967295
 800a906:	4620      	mov	r0, r4
 800a908:	bd70      	pop	{r4, r5, r6, pc}
 800a90a:	1cc4      	adds	r4, r0, #3
 800a90c:	f024 0403 	bic.w	r4, r4, #3
 800a910:	42a0      	cmp	r0, r4
 800a912:	d0f8      	beq.n	800a906 <sbrk_aligned+0x22>
 800a914:	1a21      	subs	r1, r4, r0
 800a916:	4628      	mov	r0, r5
 800a918:	f001 ffbe 	bl	800c898 <_sbrk_r>
 800a91c:	3001      	adds	r0, #1
 800a91e:	d1f2      	bne.n	800a906 <sbrk_aligned+0x22>
 800a920:	e7ef      	b.n	800a902 <sbrk_aligned+0x1e>
 800a922:	bf00      	nop
 800a924:	200041b0 	.word	0x200041b0

0800a928 <_malloc_r>:
 800a928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a92c:	1ccd      	adds	r5, r1, #3
 800a92e:	f025 0503 	bic.w	r5, r5, #3
 800a932:	3508      	adds	r5, #8
 800a934:	2d0c      	cmp	r5, #12
 800a936:	bf38      	it	cc
 800a938:	250c      	movcc	r5, #12
 800a93a:	2d00      	cmp	r5, #0
 800a93c:	4606      	mov	r6, r0
 800a93e:	db01      	blt.n	800a944 <_malloc_r+0x1c>
 800a940:	42a9      	cmp	r1, r5
 800a942:	d904      	bls.n	800a94e <_malloc_r+0x26>
 800a944:	230c      	movs	r3, #12
 800a946:	6033      	str	r3, [r6, #0]
 800a948:	2000      	movs	r0, #0
 800a94a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a94e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa24 <_malloc_r+0xfc>
 800a952:	f000 f869 	bl	800aa28 <__malloc_lock>
 800a956:	f8d8 3000 	ldr.w	r3, [r8]
 800a95a:	461c      	mov	r4, r3
 800a95c:	bb44      	cbnz	r4, 800a9b0 <_malloc_r+0x88>
 800a95e:	4629      	mov	r1, r5
 800a960:	4630      	mov	r0, r6
 800a962:	f7ff ffbf 	bl	800a8e4 <sbrk_aligned>
 800a966:	1c43      	adds	r3, r0, #1
 800a968:	4604      	mov	r4, r0
 800a96a:	d158      	bne.n	800aa1e <_malloc_r+0xf6>
 800a96c:	f8d8 4000 	ldr.w	r4, [r8]
 800a970:	4627      	mov	r7, r4
 800a972:	2f00      	cmp	r7, #0
 800a974:	d143      	bne.n	800a9fe <_malloc_r+0xd6>
 800a976:	2c00      	cmp	r4, #0
 800a978:	d04b      	beq.n	800aa12 <_malloc_r+0xea>
 800a97a:	6823      	ldr	r3, [r4, #0]
 800a97c:	4639      	mov	r1, r7
 800a97e:	4630      	mov	r0, r6
 800a980:	eb04 0903 	add.w	r9, r4, r3
 800a984:	f001 ff88 	bl	800c898 <_sbrk_r>
 800a988:	4581      	cmp	r9, r0
 800a98a:	d142      	bne.n	800aa12 <_malloc_r+0xea>
 800a98c:	6821      	ldr	r1, [r4, #0]
 800a98e:	1a6d      	subs	r5, r5, r1
 800a990:	4629      	mov	r1, r5
 800a992:	4630      	mov	r0, r6
 800a994:	f7ff ffa6 	bl	800a8e4 <sbrk_aligned>
 800a998:	3001      	adds	r0, #1
 800a99a:	d03a      	beq.n	800aa12 <_malloc_r+0xea>
 800a99c:	6823      	ldr	r3, [r4, #0]
 800a99e:	442b      	add	r3, r5
 800a9a0:	6023      	str	r3, [r4, #0]
 800a9a2:	f8d8 3000 	ldr.w	r3, [r8]
 800a9a6:	685a      	ldr	r2, [r3, #4]
 800a9a8:	bb62      	cbnz	r2, 800aa04 <_malloc_r+0xdc>
 800a9aa:	f8c8 7000 	str.w	r7, [r8]
 800a9ae:	e00f      	b.n	800a9d0 <_malloc_r+0xa8>
 800a9b0:	6822      	ldr	r2, [r4, #0]
 800a9b2:	1b52      	subs	r2, r2, r5
 800a9b4:	d420      	bmi.n	800a9f8 <_malloc_r+0xd0>
 800a9b6:	2a0b      	cmp	r2, #11
 800a9b8:	d917      	bls.n	800a9ea <_malloc_r+0xc2>
 800a9ba:	1961      	adds	r1, r4, r5
 800a9bc:	42a3      	cmp	r3, r4
 800a9be:	6025      	str	r5, [r4, #0]
 800a9c0:	bf18      	it	ne
 800a9c2:	6059      	strne	r1, [r3, #4]
 800a9c4:	6863      	ldr	r3, [r4, #4]
 800a9c6:	bf08      	it	eq
 800a9c8:	f8c8 1000 	streq.w	r1, [r8]
 800a9cc:	5162      	str	r2, [r4, r5]
 800a9ce:	604b      	str	r3, [r1, #4]
 800a9d0:	4630      	mov	r0, r6
 800a9d2:	f000 f82f 	bl	800aa34 <__malloc_unlock>
 800a9d6:	f104 000b 	add.w	r0, r4, #11
 800a9da:	1d23      	adds	r3, r4, #4
 800a9dc:	f020 0007 	bic.w	r0, r0, #7
 800a9e0:	1ac2      	subs	r2, r0, r3
 800a9e2:	bf1c      	itt	ne
 800a9e4:	1a1b      	subne	r3, r3, r0
 800a9e6:	50a3      	strne	r3, [r4, r2]
 800a9e8:	e7af      	b.n	800a94a <_malloc_r+0x22>
 800a9ea:	6862      	ldr	r2, [r4, #4]
 800a9ec:	42a3      	cmp	r3, r4
 800a9ee:	bf0c      	ite	eq
 800a9f0:	f8c8 2000 	streq.w	r2, [r8]
 800a9f4:	605a      	strne	r2, [r3, #4]
 800a9f6:	e7eb      	b.n	800a9d0 <_malloc_r+0xa8>
 800a9f8:	4623      	mov	r3, r4
 800a9fa:	6864      	ldr	r4, [r4, #4]
 800a9fc:	e7ae      	b.n	800a95c <_malloc_r+0x34>
 800a9fe:	463c      	mov	r4, r7
 800aa00:	687f      	ldr	r7, [r7, #4]
 800aa02:	e7b6      	b.n	800a972 <_malloc_r+0x4a>
 800aa04:	461a      	mov	r2, r3
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	42a3      	cmp	r3, r4
 800aa0a:	d1fb      	bne.n	800aa04 <_malloc_r+0xdc>
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	6053      	str	r3, [r2, #4]
 800aa10:	e7de      	b.n	800a9d0 <_malloc_r+0xa8>
 800aa12:	230c      	movs	r3, #12
 800aa14:	6033      	str	r3, [r6, #0]
 800aa16:	4630      	mov	r0, r6
 800aa18:	f000 f80c 	bl	800aa34 <__malloc_unlock>
 800aa1c:	e794      	b.n	800a948 <_malloc_r+0x20>
 800aa1e:	6005      	str	r5, [r0, #0]
 800aa20:	e7d6      	b.n	800a9d0 <_malloc_r+0xa8>
 800aa22:	bf00      	nop
 800aa24:	200041b4 	.word	0x200041b4

0800aa28 <__malloc_lock>:
 800aa28:	4801      	ldr	r0, [pc, #4]	@ (800aa30 <__malloc_lock+0x8>)
 800aa2a:	f7ff b8a4 	b.w	8009b76 <__retarget_lock_acquire_recursive>
 800aa2e:	bf00      	nop
 800aa30:	200041ac 	.word	0x200041ac

0800aa34 <__malloc_unlock>:
 800aa34:	4801      	ldr	r0, [pc, #4]	@ (800aa3c <__malloc_unlock+0x8>)
 800aa36:	f7ff b89f 	b.w	8009b78 <__retarget_lock_release_recursive>
 800aa3a:	bf00      	nop
 800aa3c:	200041ac 	.word	0x200041ac

0800aa40 <_Balloc>:
 800aa40:	b570      	push	{r4, r5, r6, lr}
 800aa42:	69c6      	ldr	r6, [r0, #28]
 800aa44:	4604      	mov	r4, r0
 800aa46:	460d      	mov	r5, r1
 800aa48:	b976      	cbnz	r6, 800aa68 <_Balloc+0x28>
 800aa4a:	2010      	movs	r0, #16
 800aa4c:	f7ff ff42 	bl	800a8d4 <malloc>
 800aa50:	4602      	mov	r2, r0
 800aa52:	61e0      	str	r0, [r4, #28]
 800aa54:	b920      	cbnz	r0, 800aa60 <_Balloc+0x20>
 800aa56:	4b18      	ldr	r3, [pc, #96]	@ (800aab8 <_Balloc+0x78>)
 800aa58:	4818      	ldr	r0, [pc, #96]	@ (800aabc <_Balloc+0x7c>)
 800aa5a:	216b      	movs	r1, #107	@ 0x6b
 800aa5c:	f001 ff34 	bl	800c8c8 <__assert_func>
 800aa60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa64:	6006      	str	r6, [r0, #0]
 800aa66:	60c6      	str	r6, [r0, #12]
 800aa68:	69e6      	ldr	r6, [r4, #28]
 800aa6a:	68f3      	ldr	r3, [r6, #12]
 800aa6c:	b183      	cbz	r3, 800aa90 <_Balloc+0x50>
 800aa6e:	69e3      	ldr	r3, [r4, #28]
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa76:	b9b8      	cbnz	r0, 800aaa8 <_Balloc+0x68>
 800aa78:	2101      	movs	r1, #1
 800aa7a:	fa01 f605 	lsl.w	r6, r1, r5
 800aa7e:	1d72      	adds	r2, r6, #5
 800aa80:	0092      	lsls	r2, r2, #2
 800aa82:	4620      	mov	r0, r4
 800aa84:	f001 ff3e 	bl	800c904 <_calloc_r>
 800aa88:	b160      	cbz	r0, 800aaa4 <_Balloc+0x64>
 800aa8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa8e:	e00e      	b.n	800aaae <_Balloc+0x6e>
 800aa90:	2221      	movs	r2, #33	@ 0x21
 800aa92:	2104      	movs	r1, #4
 800aa94:	4620      	mov	r0, r4
 800aa96:	f001 ff35 	bl	800c904 <_calloc_r>
 800aa9a:	69e3      	ldr	r3, [r4, #28]
 800aa9c:	60f0      	str	r0, [r6, #12]
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d1e4      	bne.n	800aa6e <_Balloc+0x2e>
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	bd70      	pop	{r4, r5, r6, pc}
 800aaa8:	6802      	ldr	r2, [r0, #0]
 800aaaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aaae:	2300      	movs	r3, #0
 800aab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aab4:	e7f7      	b.n	800aaa6 <_Balloc+0x66>
 800aab6:	bf00      	nop
 800aab8:	0800d2aa 	.word	0x0800d2aa
 800aabc:	0800d32a 	.word	0x0800d32a

0800aac0 <_Bfree>:
 800aac0:	b570      	push	{r4, r5, r6, lr}
 800aac2:	69c6      	ldr	r6, [r0, #28]
 800aac4:	4605      	mov	r5, r0
 800aac6:	460c      	mov	r4, r1
 800aac8:	b976      	cbnz	r6, 800aae8 <_Bfree+0x28>
 800aaca:	2010      	movs	r0, #16
 800aacc:	f7ff ff02 	bl	800a8d4 <malloc>
 800aad0:	4602      	mov	r2, r0
 800aad2:	61e8      	str	r0, [r5, #28]
 800aad4:	b920      	cbnz	r0, 800aae0 <_Bfree+0x20>
 800aad6:	4b09      	ldr	r3, [pc, #36]	@ (800aafc <_Bfree+0x3c>)
 800aad8:	4809      	ldr	r0, [pc, #36]	@ (800ab00 <_Bfree+0x40>)
 800aada:	218f      	movs	r1, #143	@ 0x8f
 800aadc:	f001 fef4 	bl	800c8c8 <__assert_func>
 800aae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aae4:	6006      	str	r6, [r0, #0]
 800aae6:	60c6      	str	r6, [r0, #12]
 800aae8:	b13c      	cbz	r4, 800aafa <_Bfree+0x3a>
 800aaea:	69eb      	ldr	r3, [r5, #28]
 800aaec:	6862      	ldr	r2, [r4, #4]
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aaf4:	6021      	str	r1, [r4, #0]
 800aaf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aafa:	bd70      	pop	{r4, r5, r6, pc}
 800aafc:	0800d2aa 	.word	0x0800d2aa
 800ab00:	0800d32a 	.word	0x0800d32a

0800ab04 <__multadd>:
 800ab04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab08:	690d      	ldr	r5, [r1, #16]
 800ab0a:	4607      	mov	r7, r0
 800ab0c:	460c      	mov	r4, r1
 800ab0e:	461e      	mov	r6, r3
 800ab10:	f101 0c14 	add.w	ip, r1, #20
 800ab14:	2000      	movs	r0, #0
 800ab16:	f8dc 3000 	ldr.w	r3, [ip]
 800ab1a:	b299      	uxth	r1, r3
 800ab1c:	fb02 6101 	mla	r1, r2, r1, r6
 800ab20:	0c1e      	lsrs	r6, r3, #16
 800ab22:	0c0b      	lsrs	r3, r1, #16
 800ab24:	fb02 3306 	mla	r3, r2, r6, r3
 800ab28:	b289      	uxth	r1, r1
 800ab2a:	3001      	adds	r0, #1
 800ab2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab30:	4285      	cmp	r5, r0
 800ab32:	f84c 1b04 	str.w	r1, [ip], #4
 800ab36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab3a:	dcec      	bgt.n	800ab16 <__multadd+0x12>
 800ab3c:	b30e      	cbz	r6, 800ab82 <__multadd+0x7e>
 800ab3e:	68a3      	ldr	r3, [r4, #8]
 800ab40:	42ab      	cmp	r3, r5
 800ab42:	dc19      	bgt.n	800ab78 <__multadd+0x74>
 800ab44:	6861      	ldr	r1, [r4, #4]
 800ab46:	4638      	mov	r0, r7
 800ab48:	3101      	adds	r1, #1
 800ab4a:	f7ff ff79 	bl	800aa40 <_Balloc>
 800ab4e:	4680      	mov	r8, r0
 800ab50:	b928      	cbnz	r0, 800ab5e <__multadd+0x5a>
 800ab52:	4602      	mov	r2, r0
 800ab54:	4b0c      	ldr	r3, [pc, #48]	@ (800ab88 <__multadd+0x84>)
 800ab56:	480d      	ldr	r0, [pc, #52]	@ (800ab8c <__multadd+0x88>)
 800ab58:	21ba      	movs	r1, #186	@ 0xba
 800ab5a:	f001 feb5 	bl	800c8c8 <__assert_func>
 800ab5e:	6922      	ldr	r2, [r4, #16]
 800ab60:	3202      	adds	r2, #2
 800ab62:	f104 010c 	add.w	r1, r4, #12
 800ab66:	0092      	lsls	r2, r2, #2
 800ab68:	300c      	adds	r0, #12
 800ab6a:	f7ff f806 	bl	8009b7a <memcpy>
 800ab6e:	4621      	mov	r1, r4
 800ab70:	4638      	mov	r0, r7
 800ab72:	f7ff ffa5 	bl	800aac0 <_Bfree>
 800ab76:	4644      	mov	r4, r8
 800ab78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab7c:	3501      	adds	r5, #1
 800ab7e:	615e      	str	r6, [r3, #20]
 800ab80:	6125      	str	r5, [r4, #16]
 800ab82:	4620      	mov	r0, r4
 800ab84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab88:	0800d319 	.word	0x0800d319
 800ab8c:	0800d32a 	.word	0x0800d32a

0800ab90 <__s2b>:
 800ab90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab94:	460c      	mov	r4, r1
 800ab96:	4615      	mov	r5, r2
 800ab98:	461f      	mov	r7, r3
 800ab9a:	2209      	movs	r2, #9
 800ab9c:	3308      	adds	r3, #8
 800ab9e:	4606      	mov	r6, r0
 800aba0:	fb93 f3f2 	sdiv	r3, r3, r2
 800aba4:	2100      	movs	r1, #0
 800aba6:	2201      	movs	r2, #1
 800aba8:	429a      	cmp	r2, r3
 800abaa:	db09      	blt.n	800abc0 <__s2b+0x30>
 800abac:	4630      	mov	r0, r6
 800abae:	f7ff ff47 	bl	800aa40 <_Balloc>
 800abb2:	b940      	cbnz	r0, 800abc6 <__s2b+0x36>
 800abb4:	4602      	mov	r2, r0
 800abb6:	4b19      	ldr	r3, [pc, #100]	@ (800ac1c <__s2b+0x8c>)
 800abb8:	4819      	ldr	r0, [pc, #100]	@ (800ac20 <__s2b+0x90>)
 800abba:	21d3      	movs	r1, #211	@ 0xd3
 800abbc:	f001 fe84 	bl	800c8c8 <__assert_func>
 800abc0:	0052      	lsls	r2, r2, #1
 800abc2:	3101      	adds	r1, #1
 800abc4:	e7f0      	b.n	800aba8 <__s2b+0x18>
 800abc6:	9b08      	ldr	r3, [sp, #32]
 800abc8:	6143      	str	r3, [r0, #20]
 800abca:	2d09      	cmp	r5, #9
 800abcc:	f04f 0301 	mov.w	r3, #1
 800abd0:	6103      	str	r3, [r0, #16]
 800abd2:	dd16      	ble.n	800ac02 <__s2b+0x72>
 800abd4:	f104 0909 	add.w	r9, r4, #9
 800abd8:	46c8      	mov	r8, r9
 800abda:	442c      	add	r4, r5
 800abdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800abe0:	4601      	mov	r1, r0
 800abe2:	3b30      	subs	r3, #48	@ 0x30
 800abe4:	220a      	movs	r2, #10
 800abe6:	4630      	mov	r0, r6
 800abe8:	f7ff ff8c 	bl	800ab04 <__multadd>
 800abec:	45a0      	cmp	r8, r4
 800abee:	d1f5      	bne.n	800abdc <__s2b+0x4c>
 800abf0:	f1a5 0408 	sub.w	r4, r5, #8
 800abf4:	444c      	add	r4, r9
 800abf6:	1b2d      	subs	r5, r5, r4
 800abf8:	1963      	adds	r3, r4, r5
 800abfa:	42bb      	cmp	r3, r7
 800abfc:	db04      	blt.n	800ac08 <__s2b+0x78>
 800abfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac02:	340a      	adds	r4, #10
 800ac04:	2509      	movs	r5, #9
 800ac06:	e7f6      	b.n	800abf6 <__s2b+0x66>
 800ac08:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac0c:	4601      	mov	r1, r0
 800ac0e:	3b30      	subs	r3, #48	@ 0x30
 800ac10:	220a      	movs	r2, #10
 800ac12:	4630      	mov	r0, r6
 800ac14:	f7ff ff76 	bl	800ab04 <__multadd>
 800ac18:	e7ee      	b.n	800abf8 <__s2b+0x68>
 800ac1a:	bf00      	nop
 800ac1c:	0800d319 	.word	0x0800d319
 800ac20:	0800d32a 	.word	0x0800d32a

0800ac24 <__hi0bits>:
 800ac24:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ac28:	4603      	mov	r3, r0
 800ac2a:	bf36      	itet	cc
 800ac2c:	0403      	lslcc	r3, r0, #16
 800ac2e:	2000      	movcs	r0, #0
 800ac30:	2010      	movcc	r0, #16
 800ac32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ac36:	bf3c      	itt	cc
 800ac38:	021b      	lslcc	r3, r3, #8
 800ac3a:	3008      	addcc	r0, #8
 800ac3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac40:	bf3c      	itt	cc
 800ac42:	011b      	lslcc	r3, r3, #4
 800ac44:	3004      	addcc	r0, #4
 800ac46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac4a:	bf3c      	itt	cc
 800ac4c:	009b      	lslcc	r3, r3, #2
 800ac4e:	3002      	addcc	r0, #2
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	db05      	blt.n	800ac60 <__hi0bits+0x3c>
 800ac54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ac58:	f100 0001 	add.w	r0, r0, #1
 800ac5c:	bf08      	it	eq
 800ac5e:	2020      	moveq	r0, #32
 800ac60:	4770      	bx	lr

0800ac62 <__lo0bits>:
 800ac62:	6803      	ldr	r3, [r0, #0]
 800ac64:	4602      	mov	r2, r0
 800ac66:	f013 0007 	ands.w	r0, r3, #7
 800ac6a:	d00b      	beq.n	800ac84 <__lo0bits+0x22>
 800ac6c:	07d9      	lsls	r1, r3, #31
 800ac6e:	d421      	bmi.n	800acb4 <__lo0bits+0x52>
 800ac70:	0798      	lsls	r0, r3, #30
 800ac72:	bf49      	itett	mi
 800ac74:	085b      	lsrmi	r3, r3, #1
 800ac76:	089b      	lsrpl	r3, r3, #2
 800ac78:	2001      	movmi	r0, #1
 800ac7a:	6013      	strmi	r3, [r2, #0]
 800ac7c:	bf5c      	itt	pl
 800ac7e:	6013      	strpl	r3, [r2, #0]
 800ac80:	2002      	movpl	r0, #2
 800ac82:	4770      	bx	lr
 800ac84:	b299      	uxth	r1, r3
 800ac86:	b909      	cbnz	r1, 800ac8c <__lo0bits+0x2a>
 800ac88:	0c1b      	lsrs	r3, r3, #16
 800ac8a:	2010      	movs	r0, #16
 800ac8c:	b2d9      	uxtb	r1, r3
 800ac8e:	b909      	cbnz	r1, 800ac94 <__lo0bits+0x32>
 800ac90:	3008      	adds	r0, #8
 800ac92:	0a1b      	lsrs	r3, r3, #8
 800ac94:	0719      	lsls	r1, r3, #28
 800ac96:	bf04      	itt	eq
 800ac98:	091b      	lsreq	r3, r3, #4
 800ac9a:	3004      	addeq	r0, #4
 800ac9c:	0799      	lsls	r1, r3, #30
 800ac9e:	bf04      	itt	eq
 800aca0:	089b      	lsreq	r3, r3, #2
 800aca2:	3002      	addeq	r0, #2
 800aca4:	07d9      	lsls	r1, r3, #31
 800aca6:	d403      	bmi.n	800acb0 <__lo0bits+0x4e>
 800aca8:	085b      	lsrs	r3, r3, #1
 800acaa:	f100 0001 	add.w	r0, r0, #1
 800acae:	d003      	beq.n	800acb8 <__lo0bits+0x56>
 800acb0:	6013      	str	r3, [r2, #0]
 800acb2:	4770      	bx	lr
 800acb4:	2000      	movs	r0, #0
 800acb6:	4770      	bx	lr
 800acb8:	2020      	movs	r0, #32
 800acba:	4770      	bx	lr

0800acbc <__i2b>:
 800acbc:	b510      	push	{r4, lr}
 800acbe:	460c      	mov	r4, r1
 800acc0:	2101      	movs	r1, #1
 800acc2:	f7ff febd 	bl	800aa40 <_Balloc>
 800acc6:	4602      	mov	r2, r0
 800acc8:	b928      	cbnz	r0, 800acd6 <__i2b+0x1a>
 800acca:	4b05      	ldr	r3, [pc, #20]	@ (800ace0 <__i2b+0x24>)
 800accc:	4805      	ldr	r0, [pc, #20]	@ (800ace4 <__i2b+0x28>)
 800acce:	f240 1145 	movw	r1, #325	@ 0x145
 800acd2:	f001 fdf9 	bl	800c8c8 <__assert_func>
 800acd6:	2301      	movs	r3, #1
 800acd8:	6144      	str	r4, [r0, #20]
 800acda:	6103      	str	r3, [r0, #16]
 800acdc:	bd10      	pop	{r4, pc}
 800acde:	bf00      	nop
 800ace0:	0800d319 	.word	0x0800d319
 800ace4:	0800d32a 	.word	0x0800d32a

0800ace8 <__multiply>:
 800ace8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acec:	4614      	mov	r4, r2
 800acee:	690a      	ldr	r2, [r1, #16]
 800acf0:	6923      	ldr	r3, [r4, #16]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	bfa8      	it	ge
 800acf6:	4623      	movge	r3, r4
 800acf8:	460f      	mov	r7, r1
 800acfa:	bfa4      	itt	ge
 800acfc:	460c      	movge	r4, r1
 800acfe:	461f      	movge	r7, r3
 800ad00:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ad04:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ad08:	68a3      	ldr	r3, [r4, #8]
 800ad0a:	6861      	ldr	r1, [r4, #4]
 800ad0c:	eb0a 0609 	add.w	r6, sl, r9
 800ad10:	42b3      	cmp	r3, r6
 800ad12:	b085      	sub	sp, #20
 800ad14:	bfb8      	it	lt
 800ad16:	3101      	addlt	r1, #1
 800ad18:	f7ff fe92 	bl	800aa40 <_Balloc>
 800ad1c:	b930      	cbnz	r0, 800ad2c <__multiply+0x44>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	4b44      	ldr	r3, [pc, #272]	@ (800ae34 <__multiply+0x14c>)
 800ad22:	4845      	ldr	r0, [pc, #276]	@ (800ae38 <__multiply+0x150>)
 800ad24:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ad28:	f001 fdce 	bl	800c8c8 <__assert_func>
 800ad2c:	f100 0514 	add.w	r5, r0, #20
 800ad30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ad34:	462b      	mov	r3, r5
 800ad36:	2200      	movs	r2, #0
 800ad38:	4543      	cmp	r3, r8
 800ad3a:	d321      	bcc.n	800ad80 <__multiply+0x98>
 800ad3c:	f107 0114 	add.w	r1, r7, #20
 800ad40:	f104 0214 	add.w	r2, r4, #20
 800ad44:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ad48:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ad4c:	9302      	str	r3, [sp, #8]
 800ad4e:	1b13      	subs	r3, r2, r4
 800ad50:	3b15      	subs	r3, #21
 800ad52:	f023 0303 	bic.w	r3, r3, #3
 800ad56:	3304      	adds	r3, #4
 800ad58:	f104 0715 	add.w	r7, r4, #21
 800ad5c:	42ba      	cmp	r2, r7
 800ad5e:	bf38      	it	cc
 800ad60:	2304      	movcc	r3, #4
 800ad62:	9301      	str	r3, [sp, #4]
 800ad64:	9b02      	ldr	r3, [sp, #8]
 800ad66:	9103      	str	r1, [sp, #12]
 800ad68:	428b      	cmp	r3, r1
 800ad6a:	d80c      	bhi.n	800ad86 <__multiply+0x9e>
 800ad6c:	2e00      	cmp	r6, #0
 800ad6e:	dd03      	ble.n	800ad78 <__multiply+0x90>
 800ad70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d05b      	beq.n	800ae30 <__multiply+0x148>
 800ad78:	6106      	str	r6, [r0, #16]
 800ad7a:	b005      	add	sp, #20
 800ad7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad80:	f843 2b04 	str.w	r2, [r3], #4
 800ad84:	e7d8      	b.n	800ad38 <__multiply+0x50>
 800ad86:	f8b1 a000 	ldrh.w	sl, [r1]
 800ad8a:	f1ba 0f00 	cmp.w	sl, #0
 800ad8e:	d024      	beq.n	800adda <__multiply+0xf2>
 800ad90:	f104 0e14 	add.w	lr, r4, #20
 800ad94:	46a9      	mov	r9, r5
 800ad96:	f04f 0c00 	mov.w	ip, #0
 800ad9a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ad9e:	f8d9 3000 	ldr.w	r3, [r9]
 800ada2:	fa1f fb87 	uxth.w	fp, r7
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	fb0a 330b 	mla	r3, sl, fp, r3
 800adac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800adb0:	f8d9 7000 	ldr.w	r7, [r9]
 800adb4:	4463      	add	r3, ip
 800adb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800adba:	fb0a c70b 	mla	r7, sl, fp, ip
 800adbe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800adc8:	4572      	cmp	r2, lr
 800adca:	f849 3b04 	str.w	r3, [r9], #4
 800adce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800add2:	d8e2      	bhi.n	800ad9a <__multiply+0xb2>
 800add4:	9b01      	ldr	r3, [sp, #4]
 800add6:	f845 c003 	str.w	ip, [r5, r3]
 800adda:	9b03      	ldr	r3, [sp, #12]
 800addc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ade0:	3104      	adds	r1, #4
 800ade2:	f1b9 0f00 	cmp.w	r9, #0
 800ade6:	d021      	beq.n	800ae2c <__multiply+0x144>
 800ade8:	682b      	ldr	r3, [r5, #0]
 800adea:	f104 0c14 	add.w	ip, r4, #20
 800adee:	46ae      	mov	lr, r5
 800adf0:	f04f 0a00 	mov.w	sl, #0
 800adf4:	f8bc b000 	ldrh.w	fp, [ip]
 800adf8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800adfc:	fb09 770b 	mla	r7, r9, fp, r7
 800ae00:	4457      	add	r7, sl
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ae08:	f84e 3b04 	str.w	r3, [lr], #4
 800ae0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ae10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae14:	f8be 3000 	ldrh.w	r3, [lr]
 800ae18:	fb09 330a 	mla	r3, r9, sl, r3
 800ae1c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ae20:	4562      	cmp	r2, ip
 800ae22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae26:	d8e5      	bhi.n	800adf4 <__multiply+0x10c>
 800ae28:	9f01      	ldr	r7, [sp, #4]
 800ae2a:	51eb      	str	r3, [r5, r7]
 800ae2c:	3504      	adds	r5, #4
 800ae2e:	e799      	b.n	800ad64 <__multiply+0x7c>
 800ae30:	3e01      	subs	r6, #1
 800ae32:	e79b      	b.n	800ad6c <__multiply+0x84>
 800ae34:	0800d319 	.word	0x0800d319
 800ae38:	0800d32a 	.word	0x0800d32a

0800ae3c <__pow5mult>:
 800ae3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae40:	4615      	mov	r5, r2
 800ae42:	f012 0203 	ands.w	r2, r2, #3
 800ae46:	4607      	mov	r7, r0
 800ae48:	460e      	mov	r6, r1
 800ae4a:	d007      	beq.n	800ae5c <__pow5mult+0x20>
 800ae4c:	4c25      	ldr	r4, [pc, #148]	@ (800aee4 <__pow5mult+0xa8>)
 800ae4e:	3a01      	subs	r2, #1
 800ae50:	2300      	movs	r3, #0
 800ae52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae56:	f7ff fe55 	bl	800ab04 <__multadd>
 800ae5a:	4606      	mov	r6, r0
 800ae5c:	10ad      	asrs	r5, r5, #2
 800ae5e:	d03d      	beq.n	800aedc <__pow5mult+0xa0>
 800ae60:	69fc      	ldr	r4, [r7, #28]
 800ae62:	b97c      	cbnz	r4, 800ae84 <__pow5mult+0x48>
 800ae64:	2010      	movs	r0, #16
 800ae66:	f7ff fd35 	bl	800a8d4 <malloc>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	61f8      	str	r0, [r7, #28]
 800ae6e:	b928      	cbnz	r0, 800ae7c <__pow5mult+0x40>
 800ae70:	4b1d      	ldr	r3, [pc, #116]	@ (800aee8 <__pow5mult+0xac>)
 800ae72:	481e      	ldr	r0, [pc, #120]	@ (800aeec <__pow5mult+0xb0>)
 800ae74:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ae78:	f001 fd26 	bl	800c8c8 <__assert_func>
 800ae7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae80:	6004      	str	r4, [r0, #0]
 800ae82:	60c4      	str	r4, [r0, #12]
 800ae84:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ae88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae8c:	b94c      	cbnz	r4, 800aea2 <__pow5mult+0x66>
 800ae8e:	f240 2171 	movw	r1, #625	@ 0x271
 800ae92:	4638      	mov	r0, r7
 800ae94:	f7ff ff12 	bl	800acbc <__i2b>
 800ae98:	2300      	movs	r3, #0
 800ae9a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae9e:	4604      	mov	r4, r0
 800aea0:	6003      	str	r3, [r0, #0]
 800aea2:	f04f 0900 	mov.w	r9, #0
 800aea6:	07eb      	lsls	r3, r5, #31
 800aea8:	d50a      	bpl.n	800aec0 <__pow5mult+0x84>
 800aeaa:	4631      	mov	r1, r6
 800aeac:	4622      	mov	r2, r4
 800aeae:	4638      	mov	r0, r7
 800aeb0:	f7ff ff1a 	bl	800ace8 <__multiply>
 800aeb4:	4631      	mov	r1, r6
 800aeb6:	4680      	mov	r8, r0
 800aeb8:	4638      	mov	r0, r7
 800aeba:	f7ff fe01 	bl	800aac0 <_Bfree>
 800aebe:	4646      	mov	r6, r8
 800aec0:	106d      	asrs	r5, r5, #1
 800aec2:	d00b      	beq.n	800aedc <__pow5mult+0xa0>
 800aec4:	6820      	ldr	r0, [r4, #0]
 800aec6:	b938      	cbnz	r0, 800aed8 <__pow5mult+0x9c>
 800aec8:	4622      	mov	r2, r4
 800aeca:	4621      	mov	r1, r4
 800aecc:	4638      	mov	r0, r7
 800aece:	f7ff ff0b 	bl	800ace8 <__multiply>
 800aed2:	6020      	str	r0, [r4, #0]
 800aed4:	f8c0 9000 	str.w	r9, [r0]
 800aed8:	4604      	mov	r4, r0
 800aeda:	e7e4      	b.n	800aea6 <__pow5mult+0x6a>
 800aedc:	4630      	mov	r0, r6
 800aede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aee2:	bf00      	nop
 800aee4:	0800d384 	.word	0x0800d384
 800aee8:	0800d2aa 	.word	0x0800d2aa
 800aeec:	0800d32a 	.word	0x0800d32a

0800aef0 <__lshift>:
 800aef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aef4:	460c      	mov	r4, r1
 800aef6:	6849      	ldr	r1, [r1, #4]
 800aef8:	6923      	ldr	r3, [r4, #16]
 800aefa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aefe:	68a3      	ldr	r3, [r4, #8]
 800af00:	4607      	mov	r7, r0
 800af02:	4691      	mov	r9, r2
 800af04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af08:	f108 0601 	add.w	r6, r8, #1
 800af0c:	42b3      	cmp	r3, r6
 800af0e:	db0b      	blt.n	800af28 <__lshift+0x38>
 800af10:	4638      	mov	r0, r7
 800af12:	f7ff fd95 	bl	800aa40 <_Balloc>
 800af16:	4605      	mov	r5, r0
 800af18:	b948      	cbnz	r0, 800af2e <__lshift+0x3e>
 800af1a:	4602      	mov	r2, r0
 800af1c:	4b28      	ldr	r3, [pc, #160]	@ (800afc0 <__lshift+0xd0>)
 800af1e:	4829      	ldr	r0, [pc, #164]	@ (800afc4 <__lshift+0xd4>)
 800af20:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800af24:	f001 fcd0 	bl	800c8c8 <__assert_func>
 800af28:	3101      	adds	r1, #1
 800af2a:	005b      	lsls	r3, r3, #1
 800af2c:	e7ee      	b.n	800af0c <__lshift+0x1c>
 800af2e:	2300      	movs	r3, #0
 800af30:	f100 0114 	add.w	r1, r0, #20
 800af34:	f100 0210 	add.w	r2, r0, #16
 800af38:	4618      	mov	r0, r3
 800af3a:	4553      	cmp	r3, sl
 800af3c:	db33      	blt.n	800afa6 <__lshift+0xb6>
 800af3e:	6920      	ldr	r0, [r4, #16]
 800af40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af44:	f104 0314 	add.w	r3, r4, #20
 800af48:	f019 091f 	ands.w	r9, r9, #31
 800af4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af54:	d02b      	beq.n	800afae <__lshift+0xbe>
 800af56:	f1c9 0e20 	rsb	lr, r9, #32
 800af5a:	468a      	mov	sl, r1
 800af5c:	2200      	movs	r2, #0
 800af5e:	6818      	ldr	r0, [r3, #0]
 800af60:	fa00 f009 	lsl.w	r0, r0, r9
 800af64:	4310      	orrs	r0, r2
 800af66:	f84a 0b04 	str.w	r0, [sl], #4
 800af6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af6e:	459c      	cmp	ip, r3
 800af70:	fa22 f20e 	lsr.w	r2, r2, lr
 800af74:	d8f3      	bhi.n	800af5e <__lshift+0x6e>
 800af76:	ebac 0304 	sub.w	r3, ip, r4
 800af7a:	3b15      	subs	r3, #21
 800af7c:	f023 0303 	bic.w	r3, r3, #3
 800af80:	3304      	adds	r3, #4
 800af82:	f104 0015 	add.w	r0, r4, #21
 800af86:	4584      	cmp	ip, r0
 800af88:	bf38      	it	cc
 800af8a:	2304      	movcc	r3, #4
 800af8c:	50ca      	str	r2, [r1, r3]
 800af8e:	b10a      	cbz	r2, 800af94 <__lshift+0xa4>
 800af90:	f108 0602 	add.w	r6, r8, #2
 800af94:	3e01      	subs	r6, #1
 800af96:	4638      	mov	r0, r7
 800af98:	612e      	str	r6, [r5, #16]
 800af9a:	4621      	mov	r1, r4
 800af9c:	f7ff fd90 	bl	800aac0 <_Bfree>
 800afa0:	4628      	mov	r0, r5
 800afa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afa6:	f842 0f04 	str.w	r0, [r2, #4]!
 800afaa:	3301      	adds	r3, #1
 800afac:	e7c5      	b.n	800af3a <__lshift+0x4a>
 800afae:	3904      	subs	r1, #4
 800afb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800afb4:	f841 2f04 	str.w	r2, [r1, #4]!
 800afb8:	459c      	cmp	ip, r3
 800afba:	d8f9      	bhi.n	800afb0 <__lshift+0xc0>
 800afbc:	e7ea      	b.n	800af94 <__lshift+0xa4>
 800afbe:	bf00      	nop
 800afc0:	0800d319 	.word	0x0800d319
 800afc4:	0800d32a 	.word	0x0800d32a

0800afc8 <__mcmp>:
 800afc8:	690a      	ldr	r2, [r1, #16]
 800afca:	4603      	mov	r3, r0
 800afcc:	6900      	ldr	r0, [r0, #16]
 800afce:	1a80      	subs	r0, r0, r2
 800afd0:	b530      	push	{r4, r5, lr}
 800afd2:	d10e      	bne.n	800aff2 <__mcmp+0x2a>
 800afd4:	3314      	adds	r3, #20
 800afd6:	3114      	adds	r1, #20
 800afd8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800afdc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800afe0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800afe4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800afe8:	4295      	cmp	r5, r2
 800afea:	d003      	beq.n	800aff4 <__mcmp+0x2c>
 800afec:	d205      	bcs.n	800affa <__mcmp+0x32>
 800afee:	f04f 30ff 	mov.w	r0, #4294967295
 800aff2:	bd30      	pop	{r4, r5, pc}
 800aff4:	42a3      	cmp	r3, r4
 800aff6:	d3f3      	bcc.n	800afe0 <__mcmp+0x18>
 800aff8:	e7fb      	b.n	800aff2 <__mcmp+0x2a>
 800affa:	2001      	movs	r0, #1
 800affc:	e7f9      	b.n	800aff2 <__mcmp+0x2a>
	...

0800b000 <__mdiff>:
 800b000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b004:	4689      	mov	r9, r1
 800b006:	4606      	mov	r6, r0
 800b008:	4611      	mov	r1, r2
 800b00a:	4648      	mov	r0, r9
 800b00c:	4614      	mov	r4, r2
 800b00e:	f7ff ffdb 	bl	800afc8 <__mcmp>
 800b012:	1e05      	subs	r5, r0, #0
 800b014:	d112      	bne.n	800b03c <__mdiff+0x3c>
 800b016:	4629      	mov	r1, r5
 800b018:	4630      	mov	r0, r6
 800b01a:	f7ff fd11 	bl	800aa40 <_Balloc>
 800b01e:	4602      	mov	r2, r0
 800b020:	b928      	cbnz	r0, 800b02e <__mdiff+0x2e>
 800b022:	4b3f      	ldr	r3, [pc, #252]	@ (800b120 <__mdiff+0x120>)
 800b024:	f240 2137 	movw	r1, #567	@ 0x237
 800b028:	483e      	ldr	r0, [pc, #248]	@ (800b124 <__mdiff+0x124>)
 800b02a:	f001 fc4d 	bl	800c8c8 <__assert_func>
 800b02e:	2301      	movs	r3, #1
 800b030:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b034:	4610      	mov	r0, r2
 800b036:	b003      	add	sp, #12
 800b038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b03c:	bfbc      	itt	lt
 800b03e:	464b      	movlt	r3, r9
 800b040:	46a1      	movlt	r9, r4
 800b042:	4630      	mov	r0, r6
 800b044:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b048:	bfba      	itte	lt
 800b04a:	461c      	movlt	r4, r3
 800b04c:	2501      	movlt	r5, #1
 800b04e:	2500      	movge	r5, #0
 800b050:	f7ff fcf6 	bl	800aa40 <_Balloc>
 800b054:	4602      	mov	r2, r0
 800b056:	b918      	cbnz	r0, 800b060 <__mdiff+0x60>
 800b058:	4b31      	ldr	r3, [pc, #196]	@ (800b120 <__mdiff+0x120>)
 800b05a:	f240 2145 	movw	r1, #581	@ 0x245
 800b05e:	e7e3      	b.n	800b028 <__mdiff+0x28>
 800b060:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b064:	6926      	ldr	r6, [r4, #16]
 800b066:	60c5      	str	r5, [r0, #12]
 800b068:	f109 0310 	add.w	r3, r9, #16
 800b06c:	f109 0514 	add.w	r5, r9, #20
 800b070:	f104 0e14 	add.w	lr, r4, #20
 800b074:	f100 0b14 	add.w	fp, r0, #20
 800b078:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b07c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b080:	9301      	str	r3, [sp, #4]
 800b082:	46d9      	mov	r9, fp
 800b084:	f04f 0c00 	mov.w	ip, #0
 800b088:	9b01      	ldr	r3, [sp, #4]
 800b08a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b08e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b092:	9301      	str	r3, [sp, #4]
 800b094:	fa1f f38a 	uxth.w	r3, sl
 800b098:	4619      	mov	r1, r3
 800b09a:	b283      	uxth	r3, r0
 800b09c:	1acb      	subs	r3, r1, r3
 800b09e:	0c00      	lsrs	r0, r0, #16
 800b0a0:	4463      	add	r3, ip
 800b0a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b0a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b0b0:	4576      	cmp	r6, lr
 800b0b2:	f849 3b04 	str.w	r3, [r9], #4
 800b0b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b0ba:	d8e5      	bhi.n	800b088 <__mdiff+0x88>
 800b0bc:	1b33      	subs	r3, r6, r4
 800b0be:	3b15      	subs	r3, #21
 800b0c0:	f023 0303 	bic.w	r3, r3, #3
 800b0c4:	3415      	adds	r4, #21
 800b0c6:	3304      	adds	r3, #4
 800b0c8:	42a6      	cmp	r6, r4
 800b0ca:	bf38      	it	cc
 800b0cc:	2304      	movcc	r3, #4
 800b0ce:	441d      	add	r5, r3
 800b0d0:	445b      	add	r3, fp
 800b0d2:	461e      	mov	r6, r3
 800b0d4:	462c      	mov	r4, r5
 800b0d6:	4544      	cmp	r4, r8
 800b0d8:	d30e      	bcc.n	800b0f8 <__mdiff+0xf8>
 800b0da:	f108 0103 	add.w	r1, r8, #3
 800b0de:	1b49      	subs	r1, r1, r5
 800b0e0:	f021 0103 	bic.w	r1, r1, #3
 800b0e4:	3d03      	subs	r5, #3
 800b0e6:	45a8      	cmp	r8, r5
 800b0e8:	bf38      	it	cc
 800b0ea:	2100      	movcc	r1, #0
 800b0ec:	440b      	add	r3, r1
 800b0ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b0f2:	b191      	cbz	r1, 800b11a <__mdiff+0x11a>
 800b0f4:	6117      	str	r7, [r2, #16]
 800b0f6:	e79d      	b.n	800b034 <__mdiff+0x34>
 800b0f8:	f854 1b04 	ldr.w	r1, [r4], #4
 800b0fc:	46e6      	mov	lr, ip
 800b0fe:	0c08      	lsrs	r0, r1, #16
 800b100:	fa1c fc81 	uxtah	ip, ip, r1
 800b104:	4471      	add	r1, lr
 800b106:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b10a:	b289      	uxth	r1, r1
 800b10c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b110:	f846 1b04 	str.w	r1, [r6], #4
 800b114:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b118:	e7dd      	b.n	800b0d6 <__mdiff+0xd6>
 800b11a:	3f01      	subs	r7, #1
 800b11c:	e7e7      	b.n	800b0ee <__mdiff+0xee>
 800b11e:	bf00      	nop
 800b120:	0800d319 	.word	0x0800d319
 800b124:	0800d32a 	.word	0x0800d32a

0800b128 <__ulp>:
 800b128:	b082      	sub	sp, #8
 800b12a:	ed8d 0b00 	vstr	d0, [sp]
 800b12e:	9a01      	ldr	r2, [sp, #4]
 800b130:	4b0f      	ldr	r3, [pc, #60]	@ (800b170 <__ulp+0x48>)
 800b132:	4013      	ands	r3, r2
 800b134:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b138:	2b00      	cmp	r3, #0
 800b13a:	dc08      	bgt.n	800b14e <__ulp+0x26>
 800b13c:	425b      	negs	r3, r3
 800b13e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b142:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b146:	da04      	bge.n	800b152 <__ulp+0x2a>
 800b148:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b14c:	4113      	asrs	r3, r2
 800b14e:	2200      	movs	r2, #0
 800b150:	e008      	b.n	800b164 <__ulp+0x3c>
 800b152:	f1a2 0314 	sub.w	r3, r2, #20
 800b156:	2b1e      	cmp	r3, #30
 800b158:	bfda      	itte	le
 800b15a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b15e:	40da      	lsrle	r2, r3
 800b160:	2201      	movgt	r2, #1
 800b162:	2300      	movs	r3, #0
 800b164:	4619      	mov	r1, r3
 800b166:	4610      	mov	r0, r2
 800b168:	ec41 0b10 	vmov	d0, r0, r1
 800b16c:	b002      	add	sp, #8
 800b16e:	4770      	bx	lr
 800b170:	7ff00000 	.word	0x7ff00000

0800b174 <__b2d>:
 800b174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b178:	6906      	ldr	r6, [r0, #16]
 800b17a:	f100 0814 	add.w	r8, r0, #20
 800b17e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b182:	1f37      	subs	r7, r6, #4
 800b184:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b188:	4610      	mov	r0, r2
 800b18a:	f7ff fd4b 	bl	800ac24 <__hi0bits>
 800b18e:	f1c0 0320 	rsb	r3, r0, #32
 800b192:	280a      	cmp	r0, #10
 800b194:	600b      	str	r3, [r1, #0]
 800b196:	491b      	ldr	r1, [pc, #108]	@ (800b204 <__b2d+0x90>)
 800b198:	dc15      	bgt.n	800b1c6 <__b2d+0x52>
 800b19a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b19e:	fa22 f30c 	lsr.w	r3, r2, ip
 800b1a2:	45b8      	cmp	r8, r7
 800b1a4:	ea43 0501 	orr.w	r5, r3, r1
 800b1a8:	bf34      	ite	cc
 800b1aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b1ae:	2300      	movcs	r3, #0
 800b1b0:	3015      	adds	r0, #21
 800b1b2:	fa02 f000 	lsl.w	r0, r2, r0
 800b1b6:	fa23 f30c 	lsr.w	r3, r3, ip
 800b1ba:	4303      	orrs	r3, r0
 800b1bc:	461c      	mov	r4, r3
 800b1be:	ec45 4b10 	vmov	d0, r4, r5
 800b1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1c6:	45b8      	cmp	r8, r7
 800b1c8:	bf3a      	itte	cc
 800b1ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b1ce:	f1a6 0708 	subcc.w	r7, r6, #8
 800b1d2:	2300      	movcs	r3, #0
 800b1d4:	380b      	subs	r0, #11
 800b1d6:	d012      	beq.n	800b1fe <__b2d+0x8a>
 800b1d8:	f1c0 0120 	rsb	r1, r0, #32
 800b1dc:	fa23 f401 	lsr.w	r4, r3, r1
 800b1e0:	4082      	lsls	r2, r0
 800b1e2:	4322      	orrs	r2, r4
 800b1e4:	4547      	cmp	r7, r8
 800b1e6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b1ea:	bf8c      	ite	hi
 800b1ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b1f0:	2200      	movls	r2, #0
 800b1f2:	4083      	lsls	r3, r0
 800b1f4:	40ca      	lsrs	r2, r1
 800b1f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	e7de      	b.n	800b1bc <__b2d+0x48>
 800b1fe:	ea42 0501 	orr.w	r5, r2, r1
 800b202:	e7db      	b.n	800b1bc <__b2d+0x48>
 800b204:	3ff00000 	.word	0x3ff00000

0800b208 <__d2b>:
 800b208:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b20c:	460f      	mov	r7, r1
 800b20e:	2101      	movs	r1, #1
 800b210:	ec59 8b10 	vmov	r8, r9, d0
 800b214:	4616      	mov	r6, r2
 800b216:	f7ff fc13 	bl	800aa40 <_Balloc>
 800b21a:	4604      	mov	r4, r0
 800b21c:	b930      	cbnz	r0, 800b22c <__d2b+0x24>
 800b21e:	4602      	mov	r2, r0
 800b220:	4b23      	ldr	r3, [pc, #140]	@ (800b2b0 <__d2b+0xa8>)
 800b222:	4824      	ldr	r0, [pc, #144]	@ (800b2b4 <__d2b+0xac>)
 800b224:	f240 310f 	movw	r1, #783	@ 0x30f
 800b228:	f001 fb4e 	bl	800c8c8 <__assert_func>
 800b22c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b230:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b234:	b10d      	cbz	r5, 800b23a <__d2b+0x32>
 800b236:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b23a:	9301      	str	r3, [sp, #4]
 800b23c:	f1b8 0300 	subs.w	r3, r8, #0
 800b240:	d023      	beq.n	800b28a <__d2b+0x82>
 800b242:	4668      	mov	r0, sp
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	f7ff fd0c 	bl	800ac62 <__lo0bits>
 800b24a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b24e:	b1d0      	cbz	r0, 800b286 <__d2b+0x7e>
 800b250:	f1c0 0320 	rsb	r3, r0, #32
 800b254:	fa02 f303 	lsl.w	r3, r2, r3
 800b258:	430b      	orrs	r3, r1
 800b25a:	40c2      	lsrs	r2, r0
 800b25c:	6163      	str	r3, [r4, #20]
 800b25e:	9201      	str	r2, [sp, #4]
 800b260:	9b01      	ldr	r3, [sp, #4]
 800b262:	61a3      	str	r3, [r4, #24]
 800b264:	2b00      	cmp	r3, #0
 800b266:	bf0c      	ite	eq
 800b268:	2201      	moveq	r2, #1
 800b26a:	2202      	movne	r2, #2
 800b26c:	6122      	str	r2, [r4, #16]
 800b26e:	b1a5      	cbz	r5, 800b29a <__d2b+0x92>
 800b270:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b274:	4405      	add	r5, r0
 800b276:	603d      	str	r5, [r7, #0]
 800b278:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b27c:	6030      	str	r0, [r6, #0]
 800b27e:	4620      	mov	r0, r4
 800b280:	b003      	add	sp, #12
 800b282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b286:	6161      	str	r1, [r4, #20]
 800b288:	e7ea      	b.n	800b260 <__d2b+0x58>
 800b28a:	a801      	add	r0, sp, #4
 800b28c:	f7ff fce9 	bl	800ac62 <__lo0bits>
 800b290:	9b01      	ldr	r3, [sp, #4]
 800b292:	6163      	str	r3, [r4, #20]
 800b294:	3020      	adds	r0, #32
 800b296:	2201      	movs	r2, #1
 800b298:	e7e8      	b.n	800b26c <__d2b+0x64>
 800b29a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b29e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b2a2:	6038      	str	r0, [r7, #0]
 800b2a4:	6918      	ldr	r0, [r3, #16]
 800b2a6:	f7ff fcbd 	bl	800ac24 <__hi0bits>
 800b2aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b2ae:	e7e5      	b.n	800b27c <__d2b+0x74>
 800b2b0:	0800d319 	.word	0x0800d319
 800b2b4:	0800d32a 	.word	0x0800d32a

0800b2b8 <__ratio>:
 800b2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2bc:	b085      	sub	sp, #20
 800b2be:	e9cd 1000 	strd	r1, r0, [sp]
 800b2c2:	a902      	add	r1, sp, #8
 800b2c4:	f7ff ff56 	bl	800b174 <__b2d>
 800b2c8:	9800      	ldr	r0, [sp, #0]
 800b2ca:	a903      	add	r1, sp, #12
 800b2cc:	ec55 4b10 	vmov	r4, r5, d0
 800b2d0:	f7ff ff50 	bl	800b174 <__b2d>
 800b2d4:	9b01      	ldr	r3, [sp, #4]
 800b2d6:	6919      	ldr	r1, [r3, #16]
 800b2d8:	9b00      	ldr	r3, [sp, #0]
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	1ac9      	subs	r1, r1, r3
 800b2de:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b2e2:	1a9b      	subs	r3, r3, r2
 800b2e4:	ec5b ab10 	vmov	sl, fp, d0
 800b2e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	bfce      	itee	gt
 800b2f0:	462a      	movgt	r2, r5
 800b2f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b2f6:	465a      	movle	r2, fp
 800b2f8:	462f      	mov	r7, r5
 800b2fa:	46d9      	mov	r9, fp
 800b2fc:	bfcc      	ite	gt
 800b2fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b302:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b306:	464b      	mov	r3, r9
 800b308:	4652      	mov	r2, sl
 800b30a:	4620      	mov	r0, r4
 800b30c:	4639      	mov	r1, r7
 800b30e:	f7f5 fac5 	bl	800089c <__aeabi_ddiv>
 800b312:	ec41 0b10 	vmov	d0, r0, r1
 800b316:	b005      	add	sp, #20
 800b318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b31c <__copybits>:
 800b31c:	3901      	subs	r1, #1
 800b31e:	b570      	push	{r4, r5, r6, lr}
 800b320:	1149      	asrs	r1, r1, #5
 800b322:	6914      	ldr	r4, [r2, #16]
 800b324:	3101      	adds	r1, #1
 800b326:	f102 0314 	add.w	r3, r2, #20
 800b32a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b32e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b332:	1f05      	subs	r5, r0, #4
 800b334:	42a3      	cmp	r3, r4
 800b336:	d30c      	bcc.n	800b352 <__copybits+0x36>
 800b338:	1aa3      	subs	r3, r4, r2
 800b33a:	3b11      	subs	r3, #17
 800b33c:	f023 0303 	bic.w	r3, r3, #3
 800b340:	3211      	adds	r2, #17
 800b342:	42a2      	cmp	r2, r4
 800b344:	bf88      	it	hi
 800b346:	2300      	movhi	r3, #0
 800b348:	4418      	add	r0, r3
 800b34a:	2300      	movs	r3, #0
 800b34c:	4288      	cmp	r0, r1
 800b34e:	d305      	bcc.n	800b35c <__copybits+0x40>
 800b350:	bd70      	pop	{r4, r5, r6, pc}
 800b352:	f853 6b04 	ldr.w	r6, [r3], #4
 800b356:	f845 6f04 	str.w	r6, [r5, #4]!
 800b35a:	e7eb      	b.n	800b334 <__copybits+0x18>
 800b35c:	f840 3b04 	str.w	r3, [r0], #4
 800b360:	e7f4      	b.n	800b34c <__copybits+0x30>

0800b362 <__any_on>:
 800b362:	f100 0214 	add.w	r2, r0, #20
 800b366:	6900      	ldr	r0, [r0, #16]
 800b368:	114b      	asrs	r3, r1, #5
 800b36a:	4298      	cmp	r0, r3
 800b36c:	b510      	push	{r4, lr}
 800b36e:	db11      	blt.n	800b394 <__any_on+0x32>
 800b370:	dd0a      	ble.n	800b388 <__any_on+0x26>
 800b372:	f011 011f 	ands.w	r1, r1, #31
 800b376:	d007      	beq.n	800b388 <__any_on+0x26>
 800b378:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b37c:	fa24 f001 	lsr.w	r0, r4, r1
 800b380:	fa00 f101 	lsl.w	r1, r0, r1
 800b384:	428c      	cmp	r4, r1
 800b386:	d10b      	bne.n	800b3a0 <__any_on+0x3e>
 800b388:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d803      	bhi.n	800b398 <__any_on+0x36>
 800b390:	2000      	movs	r0, #0
 800b392:	bd10      	pop	{r4, pc}
 800b394:	4603      	mov	r3, r0
 800b396:	e7f7      	b.n	800b388 <__any_on+0x26>
 800b398:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b39c:	2900      	cmp	r1, #0
 800b39e:	d0f5      	beq.n	800b38c <__any_on+0x2a>
 800b3a0:	2001      	movs	r0, #1
 800b3a2:	e7f6      	b.n	800b392 <__any_on+0x30>

0800b3a4 <sulp>:
 800b3a4:	b570      	push	{r4, r5, r6, lr}
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	460d      	mov	r5, r1
 800b3aa:	ec45 4b10 	vmov	d0, r4, r5
 800b3ae:	4616      	mov	r6, r2
 800b3b0:	f7ff feba 	bl	800b128 <__ulp>
 800b3b4:	ec51 0b10 	vmov	r0, r1, d0
 800b3b8:	b17e      	cbz	r6, 800b3da <sulp+0x36>
 800b3ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b3be:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	dd09      	ble.n	800b3da <sulp+0x36>
 800b3c6:	051b      	lsls	r3, r3, #20
 800b3c8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b3cc:	2400      	movs	r4, #0
 800b3ce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b3d2:	4622      	mov	r2, r4
 800b3d4:	462b      	mov	r3, r5
 800b3d6:	f7f5 f937 	bl	8000648 <__aeabi_dmul>
 800b3da:	ec41 0b10 	vmov	d0, r0, r1
 800b3de:	bd70      	pop	{r4, r5, r6, pc}

0800b3e0 <_strtod_l>:
 800b3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e4:	b09f      	sub	sp, #124	@ 0x7c
 800b3e6:	460c      	mov	r4, r1
 800b3e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	921a      	str	r2, [sp, #104]	@ 0x68
 800b3ee:	9005      	str	r0, [sp, #20]
 800b3f0:	f04f 0a00 	mov.w	sl, #0
 800b3f4:	f04f 0b00 	mov.w	fp, #0
 800b3f8:	460a      	mov	r2, r1
 800b3fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800b3fc:	7811      	ldrb	r1, [r2, #0]
 800b3fe:	292b      	cmp	r1, #43	@ 0x2b
 800b400:	d04a      	beq.n	800b498 <_strtod_l+0xb8>
 800b402:	d838      	bhi.n	800b476 <_strtod_l+0x96>
 800b404:	290d      	cmp	r1, #13
 800b406:	d832      	bhi.n	800b46e <_strtod_l+0x8e>
 800b408:	2908      	cmp	r1, #8
 800b40a:	d832      	bhi.n	800b472 <_strtod_l+0x92>
 800b40c:	2900      	cmp	r1, #0
 800b40e:	d03b      	beq.n	800b488 <_strtod_l+0xa8>
 800b410:	2200      	movs	r2, #0
 800b412:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b414:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b416:	782a      	ldrb	r2, [r5, #0]
 800b418:	2a30      	cmp	r2, #48	@ 0x30
 800b41a:	f040 80b3 	bne.w	800b584 <_strtod_l+0x1a4>
 800b41e:	786a      	ldrb	r2, [r5, #1]
 800b420:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b424:	2a58      	cmp	r2, #88	@ 0x58
 800b426:	d16e      	bne.n	800b506 <_strtod_l+0x126>
 800b428:	9302      	str	r3, [sp, #8]
 800b42a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b42c:	9301      	str	r3, [sp, #4]
 800b42e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	4a8e      	ldr	r2, [pc, #568]	@ (800b66c <_strtod_l+0x28c>)
 800b434:	9805      	ldr	r0, [sp, #20]
 800b436:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b438:	a919      	add	r1, sp, #100	@ 0x64
 800b43a:	f001 fadf 	bl	800c9fc <__gethex>
 800b43e:	f010 060f 	ands.w	r6, r0, #15
 800b442:	4604      	mov	r4, r0
 800b444:	d005      	beq.n	800b452 <_strtod_l+0x72>
 800b446:	2e06      	cmp	r6, #6
 800b448:	d128      	bne.n	800b49c <_strtod_l+0xbc>
 800b44a:	3501      	adds	r5, #1
 800b44c:	2300      	movs	r3, #0
 800b44e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b450:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b452:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b454:	2b00      	cmp	r3, #0
 800b456:	f040 858e 	bne.w	800bf76 <_strtod_l+0xb96>
 800b45a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b45c:	b1cb      	cbz	r3, 800b492 <_strtod_l+0xb2>
 800b45e:	4652      	mov	r2, sl
 800b460:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b464:	ec43 2b10 	vmov	d0, r2, r3
 800b468:	b01f      	add	sp, #124	@ 0x7c
 800b46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b46e:	2920      	cmp	r1, #32
 800b470:	d1ce      	bne.n	800b410 <_strtod_l+0x30>
 800b472:	3201      	adds	r2, #1
 800b474:	e7c1      	b.n	800b3fa <_strtod_l+0x1a>
 800b476:	292d      	cmp	r1, #45	@ 0x2d
 800b478:	d1ca      	bne.n	800b410 <_strtod_l+0x30>
 800b47a:	2101      	movs	r1, #1
 800b47c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b47e:	1c51      	adds	r1, r2, #1
 800b480:	9119      	str	r1, [sp, #100]	@ 0x64
 800b482:	7852      	ldrb	r2, [r2, #1]
 800b484:	2a00      	cmp	r2, #0
 800b486:	d1c5      	bne.n	800b414 <_strtod_l+0x34>
 800b488:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b48a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f040 8570 	bne.w	800bf72 <_strtod_l+0xb92>
 800b492:	4652      	mov	r2, sl
 800b494:	465b      	mov	r3, fp
 800b496:	e7e5      	b.n	800b464 <_strtod_l+0x84>
 800b498:	2100      	movs	r1, #0
 800b49a:	e7ef      	b.n	800b47c <_strtod_l+0x9c>
 800b49c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b49e:	b13a      	cbz	r2, 800b4b0 <_strtod_l+0xd0>
 800b4a0:	2135      	movs	r1, #53	@ 0x35
 800b4a2:	a81c      	add	r0, sp, #112	@ 0x70
 800b4a4:	f7ff ff3a 	bl	800b31c <__copybits>
 800b4a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b4aa:	9805      	ldr	r0, [sp, #20]
 800b4ac:	f7ff fb08 	bl	800aac0 <_Bfree>
 800b4b0:	3e01      	subs	r6, #1
 800b4b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b4b4:	2e04      	cmp	r6, #4
 800b4b6:	d806      	bhi.n	800b4c6 <_strtod_l+0xe6>
 800b4b8:	e8df f006 	tbb	[pc, r6]
 800b4bc:	201d0314 	.word	0x201d0314
 800b4c0:	14          	.byte	0x14
 800b4c1:	00          	.byte	0x00
 800b4c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b4c6:	05e1      	lsls	r1, r4, #23
 800b4c8:	bf48      	it	mi
 800b4ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b4ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4d2:	0d1b      	lsrs	r3, r3, #20
 800b4d4:	051b      	lsls	r3, r3, #20
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1bb      	bne.n	800b452 <_strtod_l+0x72>
 800b4da:	f7fe fb21 	bl	8009b20 <__errno>
 800b4de:	2322      	movs	r3, #34	@ 0x22
 800b4e0:	6003      	str	r3, [r0, #0]
 800b4e2:	e7b6      	b.n	800b452 <_strtod_l+0x72>
 800b4e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b4e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b4ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b4f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b4f4:	e7e7      	b.n	800b4c6 <_strtod_l+0xe6>
 800b4f6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b674 <_strtod_l+0x294>
 800b4fa:	e7e4      	b.n	800b4c6 <_strtod_l+0xe6>
 800b4fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b500:	f04f 3aff 	mov.w	sl, #4294967295
 800b504:	e7df      	b.n	800b4c6 <_strtod_l+0xe6>
 800b506:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b508:	1c5a      	adds	r2, r3, #1
 800b50a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b50c:	785b      	ldrb	r3, [r3, #1]
 800b50e:	2b30      	cmp	r3, #48	@ 0x30
 800b510:	d0f9      	beq.n	800b506 <_strtod_l+0x126>
 800b512:	2b00      	cmp	r3, #0
 800b514:	d09d      	beq.n	800b452 <_strtod_l+0x72>
 800b516:	2301      	movs	r3, #1
 800b518:	9309      	str	r3, [sp, #36]	@ 0x24
 800b51a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b51c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b51e:	2300      	movs	r3, #0
 800b520:	9308      	str	r3, [sp, #32]
 800b522:	930a      	str	r3, [sp, #40]	@ 0x28
 800b524:	461f      	mov	r7, r3
 800b526:	220a      	movs	r2, #10
 800b528:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b52a:	7805      	ldrb	r5, [r0, #0]
 800b52c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b530:	b2d9      	uxtb	r1, r3
 800b532:	2909      	cmp	r1, #9
 800b534:	d928      	bls.n	800b588 <_strtod_l+0x1a8>
 800b536:	494e      	ldr	r1, [pc, #312]	@ (800b670 <_strtod_l+0x290>)
 800b538:	2201      	movs	r2, #1
 800b53a:	f001 f979 	bl	800c830 <strncmp>
 800b53e:	2800      	cmp	r0, #0
 800b540:	d032      	beq.n	800b5a8 <_strtod_l+0x1c8>
 800b542:	2000      	movs	r0, #0
 800b544:	462a      	mov	r2, r5
 800b546:	4681      	mov	r9, r0
 800b548:	463d      	mov	r5, r7
 800b54a:	4603      	mov	r3, r0
 800b54c:	2a65      	cmp	r2, #101	@ 0x65
 800b54e:	d001      	beq.n	800b554 <_strtod_l+0x174>
 800b550:	2a45      	cmp	r2, #69	@ 0x45
 800b552:	d114      	bne.n	800b57e <_strtod_l+0x19e>
 800b554:	b91d      	cbnz	r5, 800b55e <_strtod_l+0x17e>
 800b556:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b558:	4302      	orrs	r2, r0
 800b55a:	d095      	beq.n	800b488 <_strtod_l+0xa8>
 800b55c:	2500      	movs	r5, #0
 800b55e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b560:	1c62      	adds	r2, r4, #1
 800b562:	9219      	str	r2, [sp, #100]	@ 0x64
 800b564:	7862      	ldrb	r2, [r4, #1]
 800b566:	2a2b      	cmp	r2, #43	@ 0x2b
 800b568:	d077      	beq.n	800b65a <_strtod_l+0x27a>
 800b56a:	2a2d      	cmp	r2, #45	@ 0x2d
 800b56c:	d07b      	beq.n	800b666 <_strtod_l+0x286>
 800b56e:	f04f 0c00 	mov.w	ip, #0
 800b572:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b576:	2909      	cmp	r1, #9
 800b578:	f240 8082 	bls.w	800b680 <_strtod_l+0x2a0>
 800b57c:	9419      	str	r4, [sp, #100]	@ 0x64
 800b57e:	f04f 0800 	mov.w	r8, #0
 800b582:	e0a2      	b.n	800b6ca <_strtod_l+0x2ea>
 800b584:	2300      	movs	r3, #0
 800b586:	e7c7      	b.n	800b518 <_strtod_l+0x138>
 800b588:	2f08      	cmp	r7, #8
 800b58a:	bfd5      	itete	le
 800b58c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b58e:	9908      	ldrgt	r1, [sp, #32]
 800b590:	fb02 3301 	mlale	r3, r2, r1, r3
 800b594:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b598:	f100 0001 	add.w	r0, r0, #1
 800b59c:	bfd4      	ite	le
 800b59e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b5a0:	9308      	strgt	r3, [sp, #32]
 800b5a2:	3701      	adds	r7, #1
 800b5a4:	9019      	str	r0, [sp, #100]	@ 0x64
 800b5a6:	e7bf      	b.n	800b528 <_strtod_l+0x148>
 800b5a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5aa:	1c5a      	adds	r2, r3, #1
 800b5ac:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5ae:	785a      	ldrb	r2, [r3, #1]
 800b5b0:	b37f      	cbz	r7, 800b612 <_strtod_l+0x232>
 800b5b2:	4681      	mov	r9, r0
 800b5b4:	463d      	mov	r5, r7
 800b5b6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b5ba:	2b09      	cmp	r3, #9
 800b5bc:	d912      	bls.n	800b5e4 <_strtod_l+0x204>
 800b5be:	2301      	movs	r3, #1
 800b5c0:	e7c4      	b.n	800b54c <_strtod_l+0x16c>
 800b5c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5c4:	1c5a      	adds	r2, r3, #1
 800b5c6:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5c8:	785a      	ldrb	r2, [r3, #1]
 800b5ca:	3001      	adds	r0, #1
 800b5cc:	2a30      	cmp	r2, #48	@ 0x30
 800b5ce:	d0f8      	beq.n	800b5c2 <_strtod_l+0x1e2>
 800b5d0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b5d4:	2b08      	cmp	r3, #8
 800b5d6:	f200 84d3 	bhi.w	800bf80 <_strtod_l+0xba0>
 800b5da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5dc:	930c      	str	r3, [sp, #48]	@ 0x30
 800b5de:	4681      	mov	r9, r0
 800b5e0:	2000      	movs	r0, #0
 800b5e2:	4605      	mov	r5, r0
 800b5e4:	3a30      	subs	r2, #48	@ 0x30
 800b5e6:	f100 0301 	add.w	r3, r0, #1
 800b5ea:	d02a      	beq.n	800b642 <_strtod_l+0x262>
 800b5ec:	4499      	add	r9, r3
 800b5ee:	eb00 0c05 	add.w	ip, r0, r5
 800b5f2:	462b      	mov	r3, r5
 800b5f4:	210a      	movs	r1, #10
 800b5f6:	4563      	cmp	r3, ip
 800b5f8:	d10d      	bne.n	800b616 <_strtod_l+0x236>
 800b5fa:	1c69      	adds	r1, r5, #1
 800b5fc:	4401      	add	r1, r0
 800b5fe:	4428      	add	r0, r5
 800b600:	2808      	cmp	r0, #8
 800b602:	dc16      	bgt.n	800b632 <_strtod_l+0x252>
 800b604:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b606:	230a      	movs	r3, #10
 800b608:	fb03 2300 	mla	r3, r3, r0, r2
 800b60c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b60e:	2300      	movs	r3, #0
 800b610:	e018      	b.n	800b644 <_strtod_l+0x264>
 800b612:	4638      	mov	r0, r7
 800b614:	e7da      	b.n	800b5cc <_strtod_l+0x1ec>
 800b616:	2b08      	cmp	r3, #8
 800b618:	f103 0301 	add.w	r3, r3, #1
 800b61c:	dc03      	bgt.n	800b626 <_strtod_l+0x246>
 800b61e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b620:	434e      	muls	r6, r1
 800b622:	960a      	str	r6, [sp, #40]	@ 0x28
 800b624:	e7e7      	b.n	800b5f6 <_strtod_l+0x216>
 800b626:	2b10      	cmp	r3, #16
 800b628:	bfde      	ittt	le
 800b62a:	9e08      	ldrle	r6, [sp, #32]
 800b62c:	434e      	mulle	r6, r1
 800b62e:	9608      	strle	r6, [sp, #32]
 800b630:	e7e1      	b.n	800b5f6 <_strtod_l+0x216>
 800b632:	280f      	cmp	r0, #15
 800b634:	dceb      	bgt.n	800b60e <_strtod_l+0x22e>
 800b636:	9808      	ldr	r0, [sp, #32]
 800b638:	230a      	movs	r3, #10
 800b63a:	fb03 2300 	mla	r3, r3, r0, r2
 800b63e:	9308      	str	r3, [sp, #32]
 800b640:	e7e5      	b.n	800b60e <_strtod_l+0x22e>
 800b642:	4629      	mov	r1, r5
 800b644:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b646:	1c50      	adds	r0, r2, #1
 800b648:	9019      	str	r0, [sp, #100]	@ 0x64
 800b64a:	7852      	ldrb	r2, [r2, #1]
 800b64c:	4618      	mov	r0, r3
 800b64e:	460d      	mov	r5, r1
 800b650:	e7b1      	b.n	800b5b6 <_strtod_l+0x1d6>
 800b652:	f04f 0900 	mov.w	r9, #0
 800b656:	2301      	movs	r3, #1
 800b658:	e77d      	b.n	800b556 <_strtod_l+0x176>
 800b65a:	f04f 0c00 	mov.w	ip, #0
 800b65e:	1ca2      	adds	r2, r4, #2
 800b660:	9219      	str	r2, [sp, #100]	@ 0x64
 800b662:	78a2      	ldrb	r2, [r4, #2]
 800b664:	e785      	b.n	800b572 <_strtod_l+0x192>
 800b666:	f04f 0c01 	mov.w	ip, #1
 800b66a:	e7f8      	b.n	800b65e <_strtod_l+0x27e>
 800b66c:	0800d498 	.word	0x0800d498
 800b670:	0800d480 	.word	0x0800d480
 800b674:	7ff00000 	.word	0x7ff00000
 800b678:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b67a:	1c51      	adds	r1, r2, #1
 800b67c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b67e:	7852      	ldrb	r2, [r2, #1]
 800b680:	2a30      	cmp	r2, #48	@ 0x30
 800b682:	d0f9      	beq.n	800b678 <_strtod_l+0x298>
 800b684:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b688:	2908      	cmp	r1, #8
 800b68a:	f63f af78 	bhi.w	800b57e <_strtod_l+0x19e>
 800b68e:	3a30      	subs	r2, #48	@ 0x30
 800b690:	920e      	str	r2, [sp, #56]	@ 0x38
 800b692:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b694:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b696:	f04f 080a 	mov.w	r8, #10
 800b69a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b69c:	1c56      	adds	r6, r2, #1
 800b69e:	9619      	str	r6, [sp, #100]	@ 0x64
 800b6a0:	7852      	ldrb	r2, [r2, #1]
 800b6a2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b6a6:	f1be 0f09 	cmp.w	lr, #9
 800b6aa:	d939      	bls.n	800b720 <_strtod_l+0x340>
 800b6ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b6ae:	1a76      	subs	r6, r6, r1
 800b6b0:	2e08      	cmp	r6, #8
 800b6b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b6b6:	dc03      	bgt.n	800b6c0 <_strtod_l+0x2e0>
 800b6b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b6ba:	4588      	cmp	r8, r1
 800b6bc:	bfa8      	it	ge
 800b6be:	4688      	movge	r8, r1
 800b6c0:	f1bc 0f00 	cmp.w	ip, #0
 800b6c4:	d001      	beq.n	800b6ca <_strtod_l+0x2ea>
 800b6c6:	f1c8 0800 	rsb	r8, r8, #0
 800b6ca:	2d00      	cmp	r5, #0
 800b6cc:	d14e      	bne.n	800b76c <_strtod_l+0x38c>
 800b6ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b6d0:	4308      	orrs	r0, r1
 800b6d2:	f47f aebe 	bne.w	800b452 <_strtod_l+0x72>
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	f47f aed6 	bne.w	800b488 <_strtod_l+0xa8>
 800b6dc:	2a69      	cmp	r2, #105	@ 0x69
 800b6de:	d028      	beq.n	800b732 <_strtod_l+0x352>
 800b6e0:	dc25      	bgt.n	800b72e <_strtod_l+0x34e>
 800b6e2:	2a49      	cmp	r2, #73	@ 0x49
 800b6e4:	d025      	beq.n	800b732 <_strtod_l+0x352>
 800b6e6:	2a4e      	cmp	r2, #78	@ 0x4e
 800b6e8:	f47f aece 	bne.w	800b488 <_strtod_l+0xa8>
 800b6ec:	499b      	ldr	r1, [pc, #620]	@ (800b95c <_strtod_l+0x57c>)
 800b6ee:	a819      	add	r0, sp, #100	@ 0x64
 800b6f0:	f001 fba6 	bl	800ce40 <__match>
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	f43f aec7 	beq.w	800b488 <_strtod_l+0xa8>
 800b6fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	2b28      	cmp	r3, #40	@ 0x28
 800b700:	d12e      	bne.n	800b760 <_strtod_l+0x380>
 800b702:	4997      	ldr	r1, [pc, #604]	@ (800b960 <_strtod_l+0x580>)
 800b704:	aa1c      	add	r2, sp, #112	@ 0x70
 800b706:	a819      	add	r0, sp, #100	@ 0x64
 800b708:	f001 fbae 	bl	800ce68 <__hexnan>
 800b70c:	2805      	cmp	r0, #5
 800b70e:	d127      	bne.n	800b760 <_strtod_l+0x380>
 800b710:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b712:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b716:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b71a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b71e:	e698      	b.n	800b452 <_strtod_l+0x72>
 800b720:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b722:	fb08 2101 	mla	r1, r8, r1, r2
 800b726:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b72a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b72c:	e7b5      	b.n	800b69a <_strtod_l+0x2ba>
 800b72e:	2a6e      	cmp	r2, #110	@ 0x6e
 800b730:	e7da      	b.n	800b6e8 <_strtod_l+0x308>
 800b732:	498c      	ldr	r1, [pc, #560]	@ (800b964 <_strtod_l+0x584>)
 800b734:	a819      	add	r0, sp, #100	@ 0x64
 800b736:	f001 fb83 	bl	800ce40 <__match>
 800b73a:	2800      	cmp	r0, #0
 800b73c:	f43f aea4 	beq.w	800b488 <_strtod_l+0xa8>
 800b740:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b742:	4989      	ldr	r1, [pc, #548]	@ (800b968 <_strtod_l+0x588>)
 800b744:	3b01      	subs	r3, #1
 800b746:	a819      	add	r0, sp, #100	@ 0x64
 800b748:	9319      	str	r3, [sp, #100]	@ 0x64
 800b74a:	f001 fb79 	bl	800ce40 <__match>
 800b74e:	b910      	cbnz	r0, 800b756 <_strtod_l+0x376>
 800b750:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b752:	3301      	adds	r3, #1
 800b754:	9319      	str	r3, [sp, #100]	@ 0x64
 800b756:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b978 <_strtod_l+0x598>
 800b75a:	f04f 0a00 	mov.w	sl, #0
 800b75e:	e678      	b.n	800b452 <_strtod_l+0x72>
 800b760:	4882      	ldr	r0, [pc, #520]	@ (800b96c <_strtod_l+0x58c>)
 800b762:	f001 f8a9 	bl	800c8b8 <nan>
 800b766:	ec5b ab10 	vmov	sl, fp, d0
 800b76a:	e672      	b.n	800b452 <_strtod_l+0x72>
 800b76c:	eba8 0309 	sub.w	r3, r8, r9
 800b770:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b772:	9309      	str	r3, [sp, #36]	@ 0x24
 800b774:	2f00      	cmp	r7, #0
 800b776:	bf08      	it	eq
 800b778:	462f      	moveq	r7, r5
 800b77a:	2d10      	cmp	r5, #16
 800b77c:	462c      	mov	r4, r5
 800b77e:	bfa8      	it	ge
 800b780:	2410      	movge	r4, #16
 800b782:	f7f4 fee7 	bl	8000554 <__aeabi_ui2d>
 800b786:	2d09      	cmp	r5, #9
 800b788:	4682      	mov	sl, r0
 800b78a:	468b      	mov	fp, r1
 800b78c:	dc13      	bgt.n	800b7b6 <_strtod_l+0x3d6>
 800b78e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b790:	2b00      	cmp	r3, #0
 800b792:	f43f ae5e 	beq.w	800b452 <_strtod_l+0x72>
 800b796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b798:	dd78      	ble.n	800b88c <_strtod_l+0x4ac>
 800b79a:	2b16      	cmp	r3, #22
 800b79c:	dc5f      	bgt.n	800b85e <_strtod_l+0x47e>
 800b79e:	4974      	ldr	r1, [pc, #464]	@ (800b970 <_strtod_l+0x590>)
 800b7a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b7a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7a8:	4652      	mov	r2, sl
 800b7aa:	465b      	mov	r3, fp
 800b7ac:	f7f4 ff4c 	bl	8000648 <__aeabi_dmul>
 800b7b0:	4682      	mov	sl, r0
 800b7b2:	468b      	mov	fp, r1
 800b7b4:	e64d      	b.n	800b452 <_strtod_l+0x72>
 800b7b6:	4b6e      	ldr	r3, [pc, #440]	@ (800b970 <_strtod_l+0x590>)
 800b7b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b7bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b7c0:	f7f4 ff42 	bl	8000648 <__aeabi_dmul>
 800b7c4:	4682      	mov	sl, r0
 800b7c6:	9808      	ldr	r0, [sp, #32]
 800b7c8:	468b      	mov	fp, r1
 800b7ca:	f7f4 fec3 	bl	8000554 <__aeabi_ui2d>
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	4650      	mov	r0, sl
 800b7d4:	4659      	mov	r1, fp
 800b7d6:	f7f4 fd81 	bl	80002dc <__adddf3>
 800b7da:	2d0f      	cmp	r5, #15
 800b7dc:	4682      	mov	sl, r0
 800b7de:	468b      	mov	fp, r1
 800b7e0:	ddd5      	ble.n	800b78e <_strtod_l+0x3ae>
 800b7e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7e4:	1b2c      	subs	r4, r5, r4
 800b7e6:	441c      	add	r4, r3
 800b7e8:	2c00      	cmp	r4, #0
 800b7ea:	f340 8096 	ble.w	800b91a <_strtod_l+0x53a>
 800b7ee:	f014 030f 	ands.w	r3, r4, #15
 800b7f2:	d00a      	beq.n	800b80a <_strtod_l+0x42a>
 800b7f4:	495e      	ldr	r1, [pc, #376]	@ (800b970 <_strtod_l+0x590>)
 800b7f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b7fa:	4652      	mov	r2, sl
 800b7fc:	465b      	mov	r3, fp
 800b7fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b802:	f7f4 ff21 	bl	8000648 <__aeabi_dmul>
 800b806:	4682      	mov	sl, r0
 800b808:	468b      	mov	fp, r1
 800b80a:	f034 040f 	bics.w	r4, r4, #15
 800b80e:	d073      	beq.n	800b8f8 <_strtod_l+0x518>
 800b810:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b814:	dd48      	ble.n	800b8a8 <_strtod_l+0x4c8>
 800b816:	2400      	movs	r4, #0
 800b818:	46a0      	mov	r8, r4
 800b81a:	940a      	str	r4, [sp, #40]	@ 0x28
 800b81c:	46a1      	mov	r9, r4
 800b81e:	9a05      	ldr	r2, [sp, #20]
 800b820:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b978 <_strtod_l+0x598>
 800b824:	2322      	movs	r3, #34	@ 0x22
 800b826:	6013      	str	r3, [r2, #0]
 800b828:	f04f 0a00 	mov.w	sl, #0
 800b82c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b82e:	2b00      	cmp	r3, #0
 800b830:	f43f ae0f 	beq.w	800b452 <_strtod_l+0x72>
 800b834:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b836:	9805      	ldr	r0, [sp, #20]
 800b838:	f7ff f942 	bl	800aac0 <_Bfree>
 800b83c:	9805      	ldr	r0, [sp, #20]
 800b83e:	4649      	mov	r1, r9
 800b840:	f7ff f93e 	bl	800aac0 <_Bfree>
 800b844:	9805      	ldr	r0, [sp, #20]
 800b846:	4641      	mov	r1, r8
 800b848:	f7ff f93a 	bl	800aac0 <_Bfree>
 800b84c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b84e:	9805      	ldr	r0, [sp, #20]
 800b850:	f7ff f936 	bl	800aac0 <_Bfree>
 800b854:	9805      	ldr	r0, [sp, #20]
 800b856:	4621      	mov	r1, r4
 800b858:	f7ff f932 	bl	800aac0 <_Bfree>
 800b85c:	e5f9      	b.n	800b452 <_strtod_l+0x72>
 800b85e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b860:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b864:	4293      	cmp	r3, r2
 800b866:	dbbc      	blt.n	800b7e2 <_strtod_l+0x402>
 800b868:	4c41      	ldr	r4, [pc, #260]	@ (800b970 <_strtod_l+0x590>)
 800b86a:	f1c5 050f 	rsb	r5, r5, #15
 800b86e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b872:	4652      	mov	r2, sl
 800b874:	465b      	mov	r3, fp
 800b876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b87a:	f7f4 fee5 	bl	8000648 <__aeabi_dmul>
 800b87e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b880:	1b5d      	subs	r5, r3, r5
 800b882:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b886:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b88a:	e78f      	b.n	800b7ac <_strtod_l+0x3cc>
 800b88c:	3316      	adds	r3, #22
 800b88e:	dba8      	blt.n	800b7e2 <_strtod_l+0x402>
 800b890:	4b37      	ldr	r3, [pc, #220]	@ (800b970 <_strtod_l+0x590>)
 800b892:	eba9 0808 	sub.w	r8, r9, r8
 800b896:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b89a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b89e:	4650      	mov	r0, sl
 800b8a0:	4659      	mov	r1, fp
 800b8a2:	f7f4 fffb 	bl	800089c <__aeabi_ddiv>
 800b8a6:	e783      	b.n	800b7b0 <_strtod_l+0x3d0>
 800b8a8:	4b32      	ldr	r3, [pc, #200]	@ (800b974 <_strtod_l+0x594>)
 800b8aa:	9308      	str	r3, [sp, #32]
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	1124      	asrs	r4, r4, #4
 800b8b0:	4650      	mov	r0, sl
 800b8b2:	4659      	mov	r1, fp
 800b8b4:	461e      	mov	r6, r3
 800b8b6:	2c01      	cmp	r4, #1
 800b8b8:	dc21      	bgt.n	800b8fe <_strtod_l+0x51e>
 800b8ba:	b10b      	cbz	r3, 800b8c0 <_strtod_l+0x4e0>
 800b8bc:	4682      	mov	sl, r0
 800b8be:	468b      	mov	fp, r1
 800b8c0:	492c      	ldr	r1, [pc, #176]	@ (800b974 <_strtod_l+0x594>)
 800b8c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b8c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b8ca:	4652      	mov	r2, sl
 800b8cc:	465b      	mov	r3, fp
 800b8ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8d2:	f7f4 feb9 	bl	8000648 <__aeabi_dmul>
 800b8d6:	4b28      	ldr	r3, [pc, #160]	@ (800b978 <_strtod_l+0x598>)
 800b8d8:	460a      	mov	r2, r1
 800b8da:	400b      	ands	r3, r1
 800b8dc:	4927      	ldr	r1, [pc, #156]	@ (800b97c <_strtod_l+0x59c>)
 800b8de:	428b      	cmp	r3, r1
 800b8e0:	4682      	mov	sl, r0
 800b8e2:	d898      	bhi.n	800b816 <_strtod_l+0x436>
 800b8e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b8e8:	428b      	cmp	r3, r1
 800b8ea:	bf86      	itte	hi
 800b8ec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b980 <_strtod_l+0x5a0>
 800b8f0:	f04f 3aff 	movhi.w	sl, #4294967295
 800b8f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	9308      	str	r3, [sp, #32]
 800b8fc:	e07a      	b.n	800b9f4 <_strtod_l+0x614>
 800b8fe:	07e2      	lsls	r2, r4, #31
 800b900:	d505      	bpl.n	800b90e <_strtod_l+0x52e>
 800b902:	9b08      	ldr	r3, [sp, #32]
 800b904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b908:	f7f4 fe9e 	bl	8000648 <__aeabi_dmul>
 800b90c:	2301      	movs	r3, #1
 800b90e:	9a08      	ldr	r2, [sp, #32]
 800b910:	3208      	adds	r2, #8
 800b912:	3601      	adds	r6, #1
 800b914:	1064      	asrs	r4, r4, #1
 800b916:	9208      	str	r2, [sp, #32]
 800b918:	e7cd      	b.n	800b8b6 <_strtod_l+0x4d6>
 800b91a:	d0ed      	beq.n	800b8f8 <_strtod_l+0x518>
 800b91c:	4264      	negs	r4, r4
 800b91e:	f014 020f 	ands.w	r2, r4, #15
 800b922:	d00a      	beq.n	800b93a <_strtod_l+0x55a>
 800b924:	4b12      	ldr	r3, [pc, #72]	@ (800b970 <_strtod_l+0x590>)
 800b926:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b92a:	4650      	mov	r0, sl
 800b92c:	4659      	mov	r1, fp
 800b92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b932:	f7f4 ffb3 	bl	800089c <__aeabi_ddiv>
 800b936:	4682      	mov	sl, r0
 800b938:	468b      	mov	fp, r1
 800b93a:	1124      	asrs	r4, r4, #4
 800b93c:	d0dc      	beq.n	800b8f8 <_strtod_l+0x518>
 800b93e:	2c1f      	cmp	r4, #31
 800b940:	dd20      	ble.n	800b984 <_strtod_l+0x5a4>
 800b942:	2400      	movs	r4, #0
 800b944:	46a0      	mov	r8, r4
 800b946:	940a      	str	r4, [sp, #40]	@ 0x28
 800b948:	46a1      	mov	r9, r4
 800b94a:	9a05      	ldr	r2, [sp, #20]
 800b94c:	2322      	movs	r3, #34	@ 0x22
 800b94e:	f04f 0a00 	mov.w	sl, #0
 800b952:	f04f 0b00 	mov.w	fp, #0
 800b956:	6013      	str	r3, [r2, #0]
 800b958:	e768      	b.n	800b82c <_strtod_l+0x44c>
 800b95a:	bf00      	nop
 800b95c:	0800d271 	.word	0x0800d271
 800b960:	0800d484 	.word	0x0800d484
 800b964:	0800d269 	.word	0x0800d269
 800b968:	0800d2a0 	.word	0x0800d2a0
 800b96c:	0800d62d 	.word	0x0800d62d
 800b970:	0800d3b8 	.word	0x0800d3b8
 800b974:	0800d390 	.word	0x0800d390
 800b978:	7ff00000 	.word	0x7ff00000
 800b97c:	7ca00000 	.word	0x7ca00000
 800b980:	7fefffff 	.word	0x7fefffff
 800b984:	f014 0310 	ands.w	r3, r4, #16
 800b988:	bf18      	it	ne
 800b98a:	236a      	movne	r3, #106	@ 0x6a
 800b98c:	4ea9      	ldr	r6, [pc, #676]	@ (800bc34 <_strtod_l+0x854>)
 800b98e:	9308      	str	r3, [sp, #32]
 800b990:	4650      	mov	r0, sl
 800b992:	4659      	mov	r1, fp
 800b994:	2300      	movs	r3, #0
 800b996:	07e2      	lsls	r2, r4, #31
 800b998:	d504      	bpl.n	800b9a4 <_strtod_l+0x5c4>
 800b99a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b99e:	f7f4 fe53 	bl	8000648 <__aeabi_dmul>
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	1064      	asrs	r4, r4, #1
 800b9a6:	f106 0608 	add.w	r6, r6, #8
 800b9aa:	d1f4      	bne.n	800b996 <_strtod_l+0x5b6>
 800b9ac:	b10b      	cbz	r3, 800b9b2 <_strtod_l+0x5d2>
 800b9ae:	4682      	mov	sl, r0
 800b9b0:	468b      	mov	fp, r1
 800b9b2:	9b08      	ldr	r3, [sp, #32]
 800b9b4:	b1b3      	cbz	r3, 800b9e4 <_strtod_l+0x604>
 800b9b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b9ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	4659      	mov	r1, fp
 800b9c2:	dd0f      	ble.n	800b9e4 <_strtod_l+0x604>
 800b9c4:	2b1f      	cmp	r3, #31
 800b9c6:	dd55      	ble.n	800ba74 <_strtod_l+0x694>
 800b9c8:	2b34      	cmp	r3, #52	@ 0x34
 800b9ca:	bfde      	ittt	le
 800b9cc:	f04f 33ff 	movle.w	r3, #4294967295
 800b9d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b9d4:	4093      	lslle	r3, r2
 800b9d6:	f04f 0a00 	mov.w	sl, #0
 800b9da:	bfcc      	ite	gt
 800b9dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b9e0:	ea03 0b01 	andle.w	fp, r3, r1
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	4650      	mov	r0, sl
 800b9ea:	4659      	mov	r1, fp
 800b9ec:	f7f5 f894 	bl	8000b18 <__aeabi_dcmpeq>
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	d1a6      	bne.n	800b942 <_strtod_l+0x562>
 800b9f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9f6:	9300      	str	r3, [sp, #0]
 800b9f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b9fa:	9805      	ldr	r0, [sp, #20]
 800b9fc:	462b      	mov	r3, r5
 800b9fe:	463a      	mov	r2, r7
 800ba00:	f7ff f8c6 	bl	800ab90 <__s2b>
 800ba04:	900a      	str	r0, [sp, #40]	@ 0x28
 800ba06:	2800      	cmp	r0, #0
 800ba08:	f43f af05 	beq.w	800b816 <_strtod_l+0x436>
 800ba0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba0e:	2a00      	cmp	r2, #0
 800ba10:	eba9 0308 	sub.w	r3, r9, r8
 800ba14:	bfa8      	it	ge
 800ba16:	2300      	movge	r3, #0
 800ba18:	9312      	str	r3, [sp, #72]	@ 0x48
 800ba1a:	2400      	movs	r4, #0
 800ba1c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ba20:	9316      	str	r3, [sp, #88]	@ 0x58
 800ba22:	46a0      	mov	r8, r4
 800ba24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba26:	9805      	ldr	r0, [sp, #20]
 800ba28:	6859      	ldr	r1, [r3, #4]
 800ba2a:	f7ff f809 	bl	800aa40 <_Balloc>
 800ba2e:	4681      	mov	r9, r0
 800ba30:	2800      	cmp	r0, #0
 800ba32:	f43f aef4 	beq.w	800b81e <_strtod_l+0x43e>
 800ba36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba38:	691a      	ldr	r2, [r3, #16]
 800ba3a:	3202      	adds	r2, #2
 800ba3c:	f103 010c 	add.w	r1, r3, #12
 800ba40:	0092      	lsls	r2, r2, #2
 800ba42:	300c      	adds	r0, #12
 800ba44:	f7fe f899 	bl	8009b7a <memcpy>
 800ba48:	ec4b ab10 	vmov	d0, sl, fp
 800ba4c:	9805      	ldr	r0, [sp, #20]
 800ba4e:	aa1c      	add	r2, sp, #112	@ 0x70
 800ba50:	a91b      	add	r1, sp, #108	@ 0x6c
 800ba52:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ba56:	f7ff fbd7 	bl	800b208 <__d2b>
 800ba5a:	901a      	str	r0, [sp, #104]	@ 0x68
 800ba5c:	2800      	cmp	r0, #0
 800ba5e:	f43f aede 	beq.w	800b81e <_strtod_l+0x43e>
 800ba62:	9805      	ldr	r0, [sp, #20]
 800ba64:	2101      	movs	r1, #1
 800ba66:	f7ff f929 	bl	800acbc <__i2b>
 800ba6a:	4680      	mov	r8, r0
 800ba6c:	b948      	cbnz	r0, 800ba82 <_strtod_l+0x6a2>
 800ba6e:	f04f 0800 	mov.w	r8, #0
 800ba72:	e6d4      	b.n	800b81e <_strtod_l+0x43e>
 800ba74:	f04f 32ff 	mov.w	r2, #4294967295
 800ba78:	fa02 f303 	lsl.w	r3, r2, r3
 800ba7c:	ea03 0a0a 	and.w	sl, r3, sl
 800ba80:	e7b0      	b.n	800b9e4 <_strtod_l+0x604>
 800ba82:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ba84:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ba86:	2d00      	cmp	r5, #0
 800ba88:	bfab      	itete	ge
 800ba8a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ba8c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ba8e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ba90:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ba92:	bfac      	ite	ge
 800ba94:	18ef      	addge	r7, r5, r3
 800ba96:	1b5e      	sublt	r6, r3, r5
 800ba98:	9b08      	ldr	r3, [sp, #32]
 800ba9a:	1aed      	subs	r5, r5, r3
 800ba9c:	4415      	add	r5, r2
 800ba9e:	4b66      	ldr	r3, [pc, #408]	@ (800bc38 <_strtod_l+0x858>)
 800baa0:	3d01      	subs	r5, #1
 800baa2:	429d      	cmp	r5, r3
 800baa4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800baa8:	da50      	bge.n	800bb4c <_strtod_l+0x76c>
 800baaa:	1b5b      	subs	r3, r3, r5
 800baac:	2b1f      	cmp	r3, #31
 800baae:	eba2 0203 	sub.w	r2, r2, r3
 800bab2:	f04f 0101 	mov.w	r1, #1
 800bab6:	dc3d      	bgt.n	800bb34 <_strtod_l+0x754>
 800bab8:	fa01 f303 	lsl.w	r3, r1, r3
 800babc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800babe:	2300      	movs	r3, #0
 800bac0:	9310      	str	r3, [sp, #64]	@ 0x40
 800bac2:	18bd      	adds	r5, r7, r2
 800bac4:	9b08      	ldr	r3, [sp, #32]
 800bac6:	42af      	cmp	r7, r5
 800bac8:	4416      	add	r6, r2
 800baca:	441e      	add	r6, r3
 800bacc:	463b      	mov	r3, r7
 800bace:	bfa8      	it	ge
 800bad0:	462b      	movge	r3, r5
 800bad2:	42b3      	cmp	r3, r6
 800bad4:	bfa8      	it	ge
 800bad6:	4633      	movge	r3, r6
 800bad8:	2b00      	cmp	r3, #0
 800bada:	bfc2      	ittt	gt
 800badc:	1aed      	subgt	r5, r5, r3
 800bade:	1af6      	subgt	r6, r6, r3
 800bae0:	1aff      	subgt	r7, r7, r3
 800bae2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	dd16      	ble.n	800bb16 <_strtod_l+0x736>
 800bae8:	4641      	mov	r1, r8
 800baea:	9805      	ldr	r0, [sp, #20]
 800baec:	461a      	mov	r2, r3
 800baee:	f7ff f9a5 	bl	800ae3c <__pow5mult>
 800baf2:	4680      	mov	r8, r0
 800baf4:	2800      	cmp	r0, #0
 800baf6:	d0ba      	beq.n	800ba6e <_strtod_l+0x68e>
 800baf8:	4601      	mov	r1, r0
 800bafa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bafc:	9805      	ldr	r0, [sp, #20]
 800bafe:	f7ff f8f3 	bl	800ace8 <__multiply>
 800bb02:	900e      	str	r0, [sp, #56]	@ 0x38
 800bb04:	2800      	cmp	r0, #0
 800bb06:	f43f ae8a 	beq.w	800b81e <_strtod_l+0x43e>
 800bb0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb0c:	9805      	ldr	r0, [sp, #20]
 800bb0e:	f7fe ffd7 	bl	800aac0 <_Bfree>
 800bb12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb14:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb16:	2d00      	cmp	r5, #0
 800bb18:	dc1d      	bgt.n	800bb56 <_strtod_l+0x776>
 800bb1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	dd23      	ble.n	800bb68 <_strtod_l+0x788>
 800bb20:	4649      	mov	r1, r9
 800bb22:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bb24:	9805      	ldr	r0, [sp, #20]
 800bb26:	f7ff f989 	bl	800ae3c <__pow5mult>
 800bb2a:	4681      	mov	r9, r0
 800bb2c:	b9e0      	cbnz	r0, 800bb68 <_strtod_l+0x788>
 800bb2e:	f04f 0900 	mov.w	r9, #0
 800bb32:	e674      	b.n	800b81e <_strtod_l+0x43e>
 800bb34:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bb38:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bb3c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bb40:	35e2      	adds	r5, #226	@ 0xe2
 800bb42:	fa01 f305 	lsl.w	r3, r1, r5
 800bb46:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb48:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bb4a:	e7ba      	b.n	800bac2 <_strtod_l+0x6e2>
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb50:	2301      	movs	r3, #1
 800bb52:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bb54:	e7b5      	b.n	800bac2 <_strtod_l+0x6e2>
 800bb56:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb58:	9805      	ldr	r0, [sp, #20]
 800bb5a:	462a      	mov	r2, r5
 800bb5c:	f7ff f9c8 	bl	800aef0 <__lshift>
 800bb60:	901a      	str	r0, [sp, #104]	@ 0x68
 800bb62:	2800      	cmp	r0, #0
 800bb64:	d1d9      	bne.n	800bb1a <_strtod_l+0x73a>
 800bb66:	e65a      	b.n	800b81e <_strtod_l+0x43e>
 800bb68:	2e00      	cmp	r6, #0
 800bb6a:	dd07      	ble.n	800bb7c <_strtod_l+0x79c>
 800bb6c:	4649      	mov	r1, r9
 800bb6e:	9805      	ldr	r0, [sp, #20]
 800bb70:	4632      	mov	r2, r6
 800bb72:	f7ff f9bd 	bl	800aef0 <__lshift>
 800bb76:	4681      	mov	r9, r0
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	d0d8      	beq.n	800bb2e <_strtod_l+0x74e>
 800bb7c:	2f00      	cmp	r7, #0
 800bb7e:	dd08      	ble.n	800bb92 <_strtod_l+0x7b2>
 800bb80:	4641      	mov	r1, r8
 800bb82:	9805      	ldr	r0, [sp, #20]
 800bb84:	463a      	mov	r2, r7
 800bb86:	f7ff f9b3 	bl	800aef0 <__lshift>
 800bb8a:	4680      	mov	r8, r0
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	f43f ae46 	beq.w	800b81e <_strtod_l+0x43e>
 800bb92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb94:	9805      	ldr	r0, [sp, #20]
 800bb96:	464a      	mov	r2, r9
 800bb98:	f7ff fa32 	bl	800b000 <__mdiff>
 800bb9c:	4604      	mov	r4, r0
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	f43f ae3d 	beq.w	800b81e <_strtod_l+0x43e>
 800bba4:	68c3      	ldr	r3, [r0, #12]
 800bba6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bba8:	2300      	movs	r3, #0
 800bbaa:	60c3      	str	r3, [r0, #12]
 800bbac:	4641      	mov	r1, r8
 800bbae:	f7ff fa0b 	bl	800afc8 <__mcmp>
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	da46      	bge.n	800bc44 <_strtod_l+0x864>
 800bbb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbb8:	ea53 030a 	orrs.w	r3, r3, sl
 800bbbc:	d16c      	bne.n	800bc98 <_strtod_l+0x8b8>
 800bbbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d168      	bne.n	800bc98 <_strtod_l+0x8b8>
 800bbc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bbca:	0d1b      	lsrs	r3, r3, #20
 800bbcc:	051b      	lsls	r3, r3, #20
 800bbce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bbd2:	d961      	bls.n	800bc98 <_strtod_l+0x8b8>
 800bbd4:	6963      	ldr	r3, [r4, #20]
 800bbd6:	b913      	cbnz	r3, 800bbde <_strtod_l+0x7fe>
 800bbd8:	6923      	ldr	r3, [r4, #16]
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	dd5c      	ble.n	800bc98 <_strtod_l+0x8b8>
 800bbde:	4621      	mov	r1, r4
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	9805      	ldr	r0, [sp, #20]
 800bbe4:	f7ff f984 	bl	800aef0 <__lshift>
 800bbe8:	4641      	mov	r1, r8
 800bbea:	4604      	mov	r4, r0
 800bbec:	f7ff f9ec 	bl	800afc8 <__mcmp>
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	dd51      	ble.n	800bc98 <_strtod_l+0x8b8>
 800bbf4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bbf8:	9a08      	ldr	r2, [sp, #32]
 800bbfa:	0d1b      	lsrs	r3, r3, #20
 800bbfc:	051b      	lsls	r3, r3, #20
 800bbfe:	2a00      	cmp	r2, #0
 800bc00:	d06b      	beq.n	800bcda <_strtod_l+0x8fa>
 800bc02:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bc06:	d868      	bhi.n	800bcda <_strtod_l+0x8fa>
 800bc08:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bc0c:	f67f ae9d 	bls.w	800b94a <_strtod_l+0x56a>
 800bc10:	4b0a      	ldr	r3, [pc, #40]	@ (800bc3c <_strtod_l+0x85c>)
 800bc12:	4650      	mov	r0, sl
 800bc14:	4659      	mov	r1, fp
 800bc16:	2200      	movs	r2, #0
 800bc18:	f7f4 fd16 	bl	8000648 <__aeabi_dmul>
 800bc1c:	4b08      	ldr	r3, [pc, #32]	@ (800bc40 <_strtod_l+0x860>)
 800bc1e:	400b      	ands	r3, r1
 800bc20:	4682      	mov	sl, r0
 800bc22:	468b      	mov	fp, r1
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	f47f ae05 	bne.w	800b834 <_strtod_l+0x454>
 800bc2a:	9a05      	ldr	r2, [sp, #20]
 800bc2c:	2322      	movs	r3, #34	@ 0x22
 800bc2e:	6013      	str	r3, [r2, #0]
 800bc30:	e600      	b.n	800b834 <_strtod_l+0x454>
 800bc32:	bf00      	nop
 800bc34:	0800d4b0 	.word	0x0800d4b0
 800bc38:	fffffc02 	.word	0xfffffc02
 800bc3c:	39500000 	.word	0x39500000
 800bc40:	7ff00000 	.word	0x7ff00000
 800bc44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bc48:	d165      	bne.n	800bd16 <_strtod_l+0x936>
 800bc4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bc4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc50:	b35a      	cbz	r2, 800bcaa <_strtod_l+0x8ca>
 800bc52:	4a9f      	ldr	r2, [pc, #636]	@ (800bed0 <_strtod_l+0xaf0>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d12b      	bne.n	800bcb0 <_strtod_l+0x8d0>
 800bc58:	9b08      	ldr	r3, [sp, #32]
 800bc5a:	4651      	mov	r1, sl
 800bc5c:	b303      	cbz	r3, 800bca0 <_strtod_l+0x8c0>
 800bc5e:	4b9d      	ldr	r3, [pc, #628]	@ (800bed4 <_strtod_l+0xaf4>)
 800bc60:	465a      	mov	r2, fp
 800bc62:	4013      	ands	r3, r2
 800bc64:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bc68:	f04f 32ff 	mov.w	r2, #4294967295
 800bc6c:	d81b      	bhi.n	800bca6 <_strtod_l+0x8c6>
 800bc6e:	0d1b      	lsrs	r3, r3, #20
 800bc70:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bc74:	fa02 f303 	lsl.w	r3, r2, r3
 800bc78:	4299      	cmp	r1, r3
 800bc7a:	d119      	bne.n	800bcb0 <_strtod_l+0x8d0>
 800bc7c:	4b96      	ldr	r3, [pc, #600]	@ (800bed8 <_strtod_l+0xaf8>)
 800bc7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d102      	bne.n	800bc8a <_strtod_l+0x8aa>
 800bc84:	3101      	adds	r1, #1
 800bc86:	f43f adca 	beq.w	800b81e <_strtod_l+0x43e>
 800bc8a:	4b92      	ldr	r3, [pc, #584]	@ (800bed4 <_strtod_l+0xaf4>)
 800bc8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc8e:	401a      	ands	r2, r3
 800bc90:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bc94:	f04f 0a00 	mov.w	sl, #0
 800bc98:	9b08      	ldr	r3, [sp, #32]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d1b8      	bne.n	800bc10 <_strtod_l+0x830>
 800bc9e:	e5c9      	b.n	800b834 <_strtod_l+0x454>
 800bca0:	f04f 33ff 	mov.w	r3, #4294967295
 800bca4:	e7e8      	b.n	800bc78 <_strtod_l+0x898>
 800bca6:	4613      	mov	r3, r2
 800bca8:	e7e6      	b.n	800bc78 <_strtod_l+0x898>
 800bcaa:	ea53 030a 	orrs.w	r3, r3, sl
 800bcae:	d0a1      	beq.n	800bbf4 <_strtod_l+0x814>
 800bcb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bcb2:	b1db      	cbz	r3, 800bcec <_strtod_l+0x90c>
 800bcb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bcb6:	4213      	tst	r3, r2
 800bcb8:	d0ee      	beq.n	800bc98 <_strtod_l+0x8b8>
 800bcba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcbc:	9a08      	ldr	r2, [sp, #32]
 800bcbe:	4650      	mov	r0, sl
 800bcc0:	4659      	mov	r1, fp
 800bcc2:	b1bb      	cbz	r3, 800bcf4 <_strtod_l+0x914>
 800bcc4:	f7ff fb6e 	bl	800b3a4 <sulp>
 800bcc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bccc:	ec53 2b10 	vmov	r2, r3, d0
 800bcd0:	f7f4 fb04 	bl	80002dc <__adddf3>
 800bcd4:	4682      	mov	sl, r0
 800bcd6:	468b      	mov	fp, r1
 800bcd8:	e7de      	b.n	800bc98 <_strtod_l+0x8b8>
 800bcda:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bcde:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bce2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bce6:	f04f 3aff 	mov.w	sl, #4294967295
 800bcea:	e7d5      	b.n	800bc98 <_strtod_l+0x8b8>
 800bcec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bcee:	ea13 0f0a 	tst.w	r3, sl
 800bcf2:	e7e1      	b.n	800bcb8 <_strtod_l+0x8d8>
 800bcf4:	f7ff fb56 	bl	800b3a4 <sulp>
 800bcf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcfc:	ec53 2b10 	vmov	r2, r3, d0
 800bd00:	f7f4 faea 	bl	80002d8 <__aeabi_dsub>
 800bd04:	2200      	movs	r2, #0
 800bd06:	2300      	movs	r3, #0
 800bd08:	4682      	mov	sl, r0
 800bd0a:	468b      	mov	fp, r1
 800bd0c:	f7f4 ff04 	bl	8000b18 <__aeabi_dcmpeq>
 800bd10:	2800      	cmp	r0, #0
 800bd12:	d0c1      	beq.n	800bc98 <_strtod_l+0x8b8>
 800bd14:	e619      	b.n	800b94a <_strtod_l+0x56a>
 800bd16:	4641      	mov	r1, r8
 800bd18:	4620      	mov	r0, r4
 800bd1a:	f7ff facd 	bl	800b2b8 <__ratio>
 800bd1e:	ec57 6b10 	vmov	r6, r7, d0
 800bd22:	2200      	movs	r2, #0
 800bd24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bd28:	4630      	mov	r0, r6
 800bd2a:	4639      	mov	r1, r7
 800bd2c:	f7f4 ff08 	bl	8000b40 <__aeabi_dcmple>
 800bd30:	2800      	cmp	r0, #0
 800bd32:	d06f      	beq.n	800be14 <_strtod_l+0xa34>
 800bd34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d17a      	bne.n	800be30 <_strtod_l+0xa50>
 800bd3a:	f1ba 0f00 	cmp.w	sl, #0
 800bd3e:	d158      	bne.n	800bdf2 <_strtod_l+0xa12>
 800bd40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d15a      	bne.n	800be00 <_strtod_l+0xa20>
 800bd4a:	4b64      	ldr	r3, [pc, #400]	@ (800bedc <_strtod_l+0xafc>)
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	4630      	mov	r0, r6
 800bd50:	4639      	mov	r1, r7
 800bd52:	f7f4 feeb 	bl	8000b2c <__aeabi_dcmplt>
 800bd56:	2800      	cmp	r0, #0
 800bd58:	d159      	bne.n	800be0e <_strtod_l+0xa2e>
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	4639      	mov	r1, r7
 800bd5e:	4b60      	ldr	r3, [pc, #384]	@ (800bee0 <_strtod_l+0xb00>)
 800bd60:	2200      	movs	r2, #0
 800bd62:	f7f4 fc71 	bl	8000648 <__aeabi_dmul>
 800bd66:	4606      	mov	r6, r0
 800bd68:	460f      	mov	r7, r1
 800bd6a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bd6e:	9606      	str	r6, [sp, #24]
 800bd70:	9307      	str	r3, [sp, #28]
 800bd72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd76:	4d57      	ldr	r5, [pc, #348]	@ (800bed4 <_strtod_l+0xaf4>)
 800bd78:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bd7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd7e:	401d      	ands	r5, r3
 800bd80:	4b58      	ldr	r3, [pc, #352]	@ (800bee4 <_strtod_l+0xb04>)
 800bd82:	429d      	cmp	r5, r3
 800bd84:	f040 80b2 	bne.w	800beec <_strtod_l+0xb0c>
 800bd88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd8a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bd8e:	ec4b ab10 	vmov	d0, sl, fp
 800bd92:	f7ff f9c9 	bl	800b128 <__ulp>
 800bd96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd9a:	ec51 0b10 	vmov	r0, r1, d0
 800bd9e:	f7f4 fc53 	bl	8000648 <__aeabi_dmul>
 800bda2:	4652      	mov	r2, sl
 800bda4:	465b      	mov	r3, fp
 800bda6:	f7f4 fa99 	bl	80002dc <__adddf3>
 800bdaa:	460b      	mov	r3, r1
 800bdac:	4949      	ldr	r1, [pc, #292]	@ (800bed4 <_strtod_l+0xaf4>)
 800bdae:	4a4e      	ldr	r2, [pc, #312]	@ (800bee8 <_strtod_l+0xb08>)
 800bdb0:	4019      	ands	r1, r3
 800bdb2:	4291      	cmp	r1, r2
 800bdb4:	4682      	mov	sl, r0
 800bdb6:	d942      	bls.n	800be3e <_strtod_l+0xa5e>
 800bdb8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bdba:	4b47      	ldr	r3, [pc, #284]	@ (800bed8 <_strtod_l+0xaf8>)
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d103      	bne.n	800bdc8 <_strtod_l+0x9e8>
 800bdc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	f43f ad2b 	beq.w	800b81e <_strtod_l+0x43e>
 800bdc8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bed8 <_strtod_l+0xaf8>
 800bdcc:	f04f 3aff 	mov.w	sl, #4294967295
 800bdd0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bdd2:	9805      	ldr	r0, [sp, #20]
 800bdd4:	f7fe fe74 	bl	800aac0 <_Bfree>
 800bdd8:	9805      	ldr	r0, [sp, #20]
 800bdda:	4649      	mov	r1, r9
 800bddc:	f7fe fe70 	bl	800aac0 <_Bfree>
 800bde0:	9805      	ldr	r0, [sp, #20]
 800bde2:	4641      	mov	r1, r8
 800bde4:	f7fe fe6c 	bl	800aac0 <_Bfree>
 800bde8:	9805      	ldr	r0, [sp, #20]
 800bdea:	4621      	mov	r1, r4
 800bdec:	f7fe fe68 	bl	800aac0 <_Bfree>
 800bdf0:	e618      	b.n	800ba24 <_strtod_l+0x644>
 800bdf2:	f1ba 0f01 	cmp.w	sl, #1
 800bdf6:	d103      	bne.n	800be00 <_strtod_l+0xa20>
 800bdf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	f43f ada5 	beq.w	800b94a <_strtod_l+0x56a>
 800be00:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800beb0 <_strtod_l+0xad0>
 800be04:	4f35      	ldr	r7, [pc, #212]	@ (800bedc <_strtod_l+0xafc>)
 800be06:	ed8d 7b06 	vstr	d7, [sp, #24]
 800be0a:	2600      	movs	r6, #0
 800be0c:	e7b1      	b.n	800bd72 <_strtod_l+0x992>
 800be0e:	4f34      	ldr	r7, [pc, #208]	@ (800bee0 <_strtod_l+0xb00>)
 800be10:	2600      	movs	r6, #0
 800be12:	e7aa      	b.n	800bd6a <_strtod_l+0x98a>
 800be14:	4b32      	ldr	r3, [pc, #200]	@ (800bee0 <_strtod_l+0xb00>)
 800be16:	4630      	mov	r0, r6
 800be18:	4639      	mov	r1, r7
 800be1a:	2200      	movs	r2, #0
 800be1c:	f7f4 fc14 	bl	8000648 <__aeabi_dmul>
 800be20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be22:	4606      	mov	r6, r0
 800be24:	460f      	mov	r7, r1
 800be26:	2b00      	cmp	r3, #0
 800be28:	d09f      	beq.n	800bd6a <_strtod_l+0x98a>
 800be2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800be2e:	e7a0      	b.n	800bd72 <_strtod_l+0x992>
 800be30:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800beb8 <_strtod_l+0xad8>
 800be34:	ed8d 7b06 	vstr	d7, [sp, #24]
 800be38:	ec57 6b17 	vmov	r6, r7, d7
 800be3c:	e799      	b.n	800bd72 <_strtod_l+0x992>
 800be3e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800be42:	9b08      	ldr	r3, [sp, #32]
 800be44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d1c1      	bne.n	800bdd0 <_strtod_l+0x9f0>
 800be4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800be50:	0d1b      	lsrs	r3, r3, #20
 800be52:	051b      	lsls	r3, r3, #20
 800be54:	429d      	cmp	r5, r3
 800be56:	d1bb      	bne.n	800bdd0 <_strtod_l+0x9f0>
 800be58:	4630      	mov	r0, r6
 800be5a:	4639      	mov	r1, r7
 800be5c:	f7f4 ff54 	bl	8000d08 <__aeabi_d2lz>
 800be60:	f7f4 fbc4 	bl	80005ec <__aeabi_l2d>
 800be64:	4602      	mov	r2, r0
 800be66:	460b      	mov	r3, r1
 800be68:	4630      	mov	r0, r6
 800be6a:	4639      	mov	r1, r7
 800be6c:	f7f4 fa34 	bl	80002d8 <__aeabi_dsub>
 800be70:	460b      	mov	r3, r1
 800be72:	4602      	mov	r2, r0
 800be74:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800be78:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800be7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be7e:	ea46 060a 	orr.w	r6, r6, sl
 800be82:	431e      	orrs	r6, r3
 800be84:	d06f      	beq.n	800bf66 <_strtod_l+0xb86>
 800be86:	a30e      	add	r3, pc, #56	@ (adr r3, 800bec0 <_strtod_l+0xae0>)
 800be88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8c:	f7f4 fe4e 	bl	8000b2c <__aeabi_dcmplt>
 800be90:	2800      	cmp	r0, #0
 800be92:	f47f accf 	bne.w	800b834 <_strtod_l+0x454>
 800be96:	a30c      	add	r3, pc, #48	@ (adr r3, 800bec8 <_strtod_l+0xae8>)
 800be98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bea0:	f7f4 fe62 	bl	8000b68 <__aeabi_dcmpgt>
 800bea4:	2800      	cmp	r0, #0
 800bea6:	d093      	beq.n	800bdd0 <_strtod_l+0x9f0>
 800bea8:	e4c4      	b.n	800b834 <_strtod_l+0x454>
 800beaa:	bf00      	nop
 800beac:	f3af 8000 	nop.w
 800beb0:	00000000 	.word	0x00000000
 800beb4:	bff00000 	.word	0xbff00000
 800beb8:	00000000 	.word	0x00000000
 800bebc:	3ff00000 	.word	0x3ff00000
 800bec0:	94a03595 	.word	0x94a03595
 800bec4:	3fdfffff 	.word	0x3fdfffff
 800bec8:	35afe535 	.word	0x35afe535
 800becc:	3fe00000 	.word	0x3fe00000
 800bed0:	000fffff 	.word	0x000fffff
 800bed4:	7ff00000 	.word	0x7ff00000
 800bed8:	7fefffff 	.word	0x7fefffff
 800bedc:	3ff00000 	.word	0x3ff00000
 800bee0:	3fe00000 	.word	0x3fe00000
 800bee4:	7fe00000 	.word	0x7fe00000
 800bee8:	7c9fffff 	.word	0x7c9fffff
 800beec:	9b08      	ldr	r3, [sp, #32]
 800beee:	b323      	cbz	r3, 800bf3a <_strtod_l+0xb5a>
 800bef0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bef4:	d821      	bhi.n	800bf3a <_strtod_l+0xb5a>
 800bef6:	a328      	add	r3, pc, #160	@ (adr r3, 800bf98 <_strtod_l+0xbb8>)
 800bef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befc:	4630      	mov	r0, r6
 800befe:	4639      	mov	r1, r7
 800bf00:	f7f4 fe1e 	bl	8000b40 <__aeabi_dcmple>
 800bf04:	b1a0      	cbz	r0, 800bf30 <_strtod_l+0xb50>
 800bf06:	4639      	mov	r1, r7
 800bf08:	4630      	mov	r0, r6
 800bf0a:	f7f4 fe75 	bl	8000bf8 <__aeabi_d2uiz>
 800bf0e:	2801      	cmp	r0, #1
 800bf10:	bf38      	it	cc
 800bf12:	2001      	movcc	r0, #1
 800bf14:	f7f4 fb1e 	bl	8000554 <__aeabi_ui2d>
 800bf18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf1a:	4606      	mov	r6, r0
 800bf1c:	460f      	mov	r7, r1
 800bf1e:	b9fb      	cbnz	r3, 800bf60 <_strtod_l+0xb80>
 800bf20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bf24:	9014      	str	r0, [sp, #80]	@ 0x50
 800bf26:	9315      	str	r3, [sp, #84]	@ 0x54
 800bf28:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bf2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bf30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf32:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bf36:	1b5b      	subs	r3, r3, r5
 800bf38:	9311      	str	r3, [sp, #68]	@ 0x44
 800bf3a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bf3e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bf42:	f7ff f8f1 	bl	800b128 <__ulp>
 800bf46:	4650      	mov	r0, sl
 800bf48:	ec53 2b10 	vmov	r2, r3, d0
 800bf4c:	4659      	mov	r1, fp
 800bf4e:	f7f4 fb7b 	bl	8000648 <__aeabi_dmul>
 800bf52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bf56:	f7f4 f9c1 	bl	80002dc <__adddf3>
 800bf5a:	4682      	mov	sl, r0
 800bf5c:	468b      	mov	fp, r1
 800bf5e:	e770      	b.n	800be42 <_strtod_l+0xa62>
 800bf60:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bf64:	e7e0      	b.n	800bf28 <_strtod_l+0xb48>
 800bf66:	a30e      	add	r3, pc, #56	@ (adr r3, 800bfa0 <_strtod_l+0xbc0>)
 800bf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6c:	f7f4 fdde 	bl	8000b2c <__aeabi_dcmplt>
 800bf70:	e798      	b.n	800bea4 <_strtod_l+0xac4>
 800bf72:	2300      	movs	r3, #0
 800bf74:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf76:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bf78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf7a:	6013      	str	r3, [r2, #0]
 800bf7c:	f7ff ba6d 	b.w	800b45a <_strtod_l+0x7a>
 800bf80:	2a65      	cmp	r2, #101	@ 0x65
 800bf82:	f43f ab66 	beq.w	800b652 <_strtod_l+0x272>
 800bf86:	2a45      	cmp	r2, #69	@ 0x45
 800bf88:	f43f ab63 	beq.w	800b652 <_strtod_l+0x272>
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	f7ff bb9e 	b.w	800b6ce <_strtod_l+0x2ee>
 800bf92:	bf00      	nop
 800bf94:	f3af 8000 	nop.w
 800bf98:	ffc00000 	.word	0xffc00000
 800bf9c:	41dfffff 	.word	0x41dfffff
 800bfa0:	94a03595 	.word	0x94a03595
 800bfa4:	3fcfffff 	.word	0x3fcfffff

0800bfa8 <_strtod_r>:
 800bfa8:	4b01      	ldr	r3, [pc, #4]	@ (800bfb0 <_strtod_r+0x8>)
 800bfaa:	f7ff ba19 	b.w	800b3e0 <_strtod_l>
 800bfae:	bf00      	nop
 800bfb0:	2000006c 	.word	0x2000006c

0800bfb4 <_strtol_l.constprop.0>:
 800bfb4:	2b24      	cmp	r3, #36	@ 0x24
 800bfb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfba:	4686      	mov	lr, r0
 800bfbc:	4690      	mov	r8, r2
 800bfbe:	d801      	bhi.n	800bfc4 <_strtol_l.constprop.0+0x10>
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d106      	bne.n	800bfd2 <_strtol_l.constprop.0+0x1e>
 800bfc4:	f7fd fdac 	bl	8009b20 <__errno>
 800bfc8:	2316      	movs	r3, #22
 800bfca:	6003      	str	r3, [r0, #0]
 800bfcc:	2000      	movs	r0, #0
 800bfce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfd2:	4834      	ldr	r0, [pc, #208]	@ (800c0a4 <_strtol_l.constprop.0+0xf0>)
 800bfd4:	460d      	mov	r5, r1
 800bfd6:	462a      	mov	r2, r5
 800bfd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bfdc:	5d06      	ldrb	r6, [r0, r4]
 800bfde:	f016 0608 	ands.w	r6, r6, #8
 800bfe2:	d1f8      	bne.n	800bfd6 <_strtol_l.constprop.0+0x22>
 800bfe4:	2c2d      	cmp	r4, #45	@ 0x2d
 800bfe6:	d12d      	bne.n	800c044 <_strtol_l.constprop.0+0x90>
 800bfe8:	782c      	ldrb	r4, [r5, #0]
 800bfea:	2601      	movs	r6, #1
 800bfec:	1c95      	adds	r5, r2, #2
 800bfee:	f033 0210 	bics.w	r2, r3, #16
 800bff2:	d109      	bne.n	800c008 <_strtol_l.constprop.0+0x54>
 800bff4:	2c30      	cmp	r4, #48	@ 0x30
 800bff6:	d12a      	bne.n	800c04e <_strtol_l.constprop.0+0x9a>
 800bff8:	782a      	ldrb	r2, [r5, #0]
 800bffa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bffe:	2a58      	cmp	r2, #88	@ 0x58
 800c000:	d125      	bne.n	800c04e <_strtol_l.constprop.0+0x9a>
 800c002:	786c      	ldrb	r4, [r5, #1]
 800c004:	2310      	movs	r3, #16
 800c006:	3502      	adds	r5, #2
 800c008:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c00c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c010:	2200      	movs	r2, #0
 800c012:	fbbc f9f3 	udiv	r9, ip, r3
 800c016:	4610      	mov	r0, r2
 800c018:	fb03 ca19 	mls	sl, r3, r9, ip
 800c01c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c020:	2f09      	cmp	r7, #9
 800c022:	d81b      	bhi.n	800c05c <_strtol_l.constprop.0+0xa8>
 800c024:	463c      	mov	r4, r7
 800c026:	42a3      	cmp	r3, r4
 800c028:	dd27      	ble.n	800c07a <_strtol_l.constprop.0+0xc6>
 800c02a:	1c57      	adds	r7, r2, #1
 800c02c:	d007      	beq.n	800c03e <_strtol_l.constprop.0+0x8a>
 800c02e:	4581      	cmp	r9, r0
 800c030:	d320      	bcc.n	800c074 <_strtol_l.constprop.0+0xc0>
 800c032:	d101      	bne.n	800c038 <_strtol_l.constprop.0+0x84>
 800c034:	45a2      	cmp	sl, r4
 800c036:	db1d      	blt.n	800c074 <_strtol_l.constprop.0+0xc0>
 800c038:	fb00 4003 	mla	r0, r0, r3, r4
 800c03c:	2201      	movs	r2, #1
 800c03e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c042:	e7eb      	b.n	800c01c <_strtol_l.constprop.0+0x68>
 800c044:	2c2b      	cmp	r4, #43	@ 0x2b
 800c046:	bf04      	itt	eq
 800c048:	782c      	ldrbeq	r4, [r5, #0]
 800c04a:	1c95      	addeq	r5, r2, #2
 800c04c:	e7cf      	b.n	800bfee <_strtol_l.constprop.0+0x3a>
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d1da      	bne.n	800c008 <_strtol_l.constprop.0+0x54>
 800c052:	2c30      	cmp	r4, #48	@ 0x30
 800c054:	bf0c      	ite	eq
 800c056:	2308      	moveq	r3, #8
 800c058:	230a      	movne	r3, #10
 800c05a:	e7d5      	b.n	800c008 <_strtol_l.constprop.0+0x54>
 800c05c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c060:	2f19      	cmp	r7, #25
 800c062:	d801      	bhi.n	800c068 <_strtol_l.constprop.0+0xb4>
 800c064:	3c37      	subs	r4, #55	@ 0x37
 800c066:	e7de      	b.n	800c026 <_strtol_l.constprop.0+0x72>
 800c068:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c06c:	2f19      	cmp	r7, #25
 800c06e:	d804      	bhi.n	800c07a <_strtol_l.constprop.0+0xc6>
 800c070:	3c57      	subs	r4, #87	@ 0x57
 800c072:	e7d8      	b.n	800c026 <_strtol_l.constprop.0+0x72>
 800c074:	f04f 32ff 	mov.w	r2, #4294967295
 800c078:	e7e1      	b.n	800c03e <_strtol_l.constprop.0+0x8a>
 800c07a:	1c53      	adds	r3, r2, #1
 800c07c:	d108      	bne.n	800c090 <_strtol_l.constprop.0+0xdc>
 800c07e:	2322      	movs	r3, #34	@ 0x22
 800c080:	f8ce 3000 	str.w	r3, [lr]
 800c084:	4660      	mov	r0, ip
 800c086:	f1b8 0f00 	cmp.w	r8, #0
 800c08a:	d0a0      	beq.n	800bfce <_strtol_l.constprop.0+0x1a>
 800c08c:	1e69      	subs	r1, r5, #1
 800c08e:	e006      	b.n	800c09e <_strtol_l.constprop.0+0xea>
 800c090:	b106      	cbz	r6, 800c094 <_strtol_l.constprop.0+0xe0>
 800c092:	4240      	negs	r0, r0
 800c094:	f1b8 0f00 	cmp.w	r8, #0
 800c098:	d099      	beq.n	800bfce <_strtol_l.constprop.0+0x1a>
 800c09a:	2a00      	cmp	r2, #0
 800c09c:	d1f6      	bne.n	800c08c <_strtol_l.constprop.0+0xd8>
 800c09e:	f8c8 1000 	str.w	r1, [r8]
 800c0a2:	e794      	b.n	800bfce <_strtol_l.constprop.0+0x1a>
 800c0a4:	0800d4d9 	.word	0x0800d4d9

0800c0a8 <_strtol_r>:
 800c0a8:	f7ff bf84 	b.w	800bfb4 <_strtol_l.constprop.0>

0800c0ac <__ssputs_r>:
 800c0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0b0:	688e      	ldr	r6, [r1, #8]
 800c0b2:	461f      	mov	r7, r3
 800c0b4:	42be      	cmp	r6, r7
 800c0b6:	680b      	ldr	r3, [r1, #0]
 800c0b8:	4682      	mov	sl, r0
 800c0ba:	460c      	mov	r4, r1
 800c0bc:	4690      	mov	r8, r2
 800c0be:	d82d      	bhi.n	800c11c <__ssputs_r+0x70>
 800c0c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c0c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c0c8:	d026      	beq.n	800c118 <__ssputs_r+0x6c>
 800c0ca:	6965      	ldr	r5, [r4, #20]
 800c0cc:	6909      	ldr	r1, [r1, #16]
 800c0ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0d2:	eba3 0901 	sub.w	r9, r3, r1
 800c0d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0da:	1c7b      	adds	r3, r7, #1
 800c0dc:	444b      	add	r3, r9
 800c0de:	106d      	asrs	r5, r5, #1
 800c0e0:	429d      	cmp	r5, r3
 800c0e2:	bf38      	it	cc
 800c0e4:	461d      	movcc	r5, r3
 800c0e6:	0553      	lsls	r3, r2, #21
 800c0e8:	d527      	bpl.n	800c13a <__ssputs_r+0x8e>
 800c0ea:	4629      	mov	r1, r5
 800c0ec:	f7fe fc1c 	bl	800a928 <_malloc_r>
 800c0f0:	4606      	mov	r6, r0
 800c0f2:	b360      	cbz	r0, 800c14e <__ssputs_r+0xa2>
 800c0f4:	6921      	ldr	r1, [r4, #16]
 800c0f6:	464a      	mov	r2, r9
 800c0f8:	f7fd fd3f 	bl	8009b7a <memcpy>
 800c0fc:	89a3      	ldrh	r3, [r4, #12]
 800c0fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c106:	81a3      	strh	r3, [r4, #12]
 800c108:	6126      	str	r6, [r4, #16]
 800c10a:	6165      	str	r5, [r4, #20]
 800c10c:	444e      	add	r6, r9
 800c10e:	eba5 0509 	sub.w	r5, r5, r9
 800c112:	6026      	str	r6, [r4, #0]
 800c114:	60a5      	str	r5, [r4, #8]
 800c116:	463e      	mov	r6, r7
 800c118:	42be      	cmp	r6, r7
 800c11a:	d900      	bls.n	800c11e <__ssputs_r+0x72>
 800c11c:	463e      	mov	r6, r7
 800c11e:	6820      	ldr	r0, [r4, #0]
 800c120:	4632      	mov	r2, r6
 800c122:	4641      	mov	r1, r8
 800c124:	f000 fb6a 	bl	800c7fc <memmove>
 800c128:	68a3      	ldr	r3, [r4, #8]
 800c12a:	1b9b      	subs	r3, r3, r6
 800c12c:	60a3      	str	r3, [r4, #8]
 800c12e:	6823      	ldr	r3, [r4, #0]
 800c130:	4433      	add	r3, r6
 800c132:	6023      	str	r3, [r4, #0]
 800c134:	2000      	movs	r0, #0
 800c136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c13a:	462a      	mov	r2, r5
 800c13c:	f000 ff41 	bl	800cfc2 <_realloc_r>
 800c140:	4606      	mov	r6, r0
 800c142:	2800      	cmp	r0, #0
 800c144:	d1e0      	bne.n	800c108 <__ssputs_r+0x5c>
 800c146:	6921      	ldr	r1, [r4, #16]
 800c148:	4650      	mov	r0, sl
 800c14a:	f7fe fb79 	bl	800a840 <_free_r>
 800c14e:	230c      	movs	r3, #12
 800c150:	f8ca 3000 	str.w	r3, [sl]
 800c154:	89a3      	ldrh	r3, [r4, #12]
 800c156:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c15a:	81a3      	strh	r3, [r4, #12]
 800c15c:	f04f 30ff 	mov.w	r0, #4294967295
 800c160:	e7e9      	b.n	800c136 <__ssputs_r+0x8a>
	...

0800c164 <_svfiprintf_r>:
 800c164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c168:	4698      	mov	r8, r3
 800c16a:	898b      	ldrh	r3, [r1, #12]
 800c16c:	061b      	lsls	r3, r3, #24
 800c16e:	b09d      	sub	sp, #116	@ 0x74
 800c170:	4607      	mov	r7, r0
 800c172:	460d      	mov	r5, r1
 800c174:	4614      	mov	r4, r2
 800c176:	d510      	bpl.n	800c19a <_svfiprintf_r+0x36>
 800c178:	690b      	ldr	r3, [r1, #16]
 800c17a:	b973      	cbnz	r3, 800c19a <_svfiprintf_r+0x36>
 800c17c:	2140      	movs	r1, #64	@ 0x40
 800c17e:	f7fe fbd3 	bl	800a928 <_malloc_r>
 800c182:	6028      	str	r0, [r5, #0]
 800c184:	6128      	str	r0, [r5, #16]
 800c186:	b930      	cbnz	r0, 800c196 <_svfiprintf_r+0x32>
 800c188:	230c      	movs	r3, #12
 800c18a:	603b      	str	r3, [r7, #0]
 800c18c:	f04f 30ff 	mov.w	r0, #4294967295
 800c190:	b01d      	add	sp, #116	@ 0x74
 800c192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c196:	2340      	movs	r3, #64	@ 0x40
 800c198:	616b      	str	r3, [r5, #20]
 800c19a:	2300      	movs	r3, #0
 800c19c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c19e:	2320      	movs	r3, #32
 800c1a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c1a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1a8:	2330      	movs	r3, #48	@ 0x30
 800c1aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c348 <_svfiprintf_r+0x1e4>
 800c1ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c1b2:	f04f 0901 	mov.w	r9, #1
 800c1b6:	4623      	mov	r3, r4
 800c1b8:	469a      	mov	sl, r3
 800c1ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1be:	b10a      	cbz	r2, 800c1c4 <_svfiprintf_r+0x60>
 800c1c0:	2a25      	cmp	r2, #37	@ 0x25
 800c1c2:	d1f9      	bne.n	800c1b8 <_svfiprintf_r+0x54>
 800c1c4:	ebba 0b04 	subs.w	fp, sl, r4
 800c1c8:	d00b      	beq.n	800c1e2 <_svfiprintf_r+0x7e>
 800c1ca:	465b      	mov	r3, fp
 800c1cc:	4622      	mov	r2, r4
 800c1ce:	4629      	mov	r1, r5
 800c1d0:	4638      	mov	r0, r7
 800c1d2:	f7ff ff6b 	bl	800c0ac <__ssputs_r>
 800c1d6:	3001      	adds	r0, #1
 800c1d8:	f000 80a7 	beq.w	800c32a <_svfiprintf_r+0x1c6>
 800c1dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1de:	445a      	add	r2, fp
 800c1e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c1e2:	f89a 3000 	ldrb.w	r3, [sl]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	f000 809f 	beq.w	800c32a <_svfiprintf_r+0x1c6>
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c1f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1f6:	f10a 0a01 	add.w	sl, sl, #1
 800c1fa:	9304      	str	r3, [sp, #16]
 800c1fc:	9307      	str	r3, [sp, #28]
 800c1fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c202:	931a      	str	r3, [sp, #104]	@ 0x68
 800c204:	4654      	mov	r4, sl
 800c206:	2205      	movs	r2, #5
 800c208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c20c:	484e      	ldr	r0, [pc, #312]	@ (800c348 <_svfiprintf_r+0x1e4>)
 800c20e:	f7f4 f807 	bl	8000220 <memchr>
 800c212:	9a04      	ldr	r2, [sp, #16]
 800c214:	b9d8      	cbnz	r0, 800c24e <_svfiprintf_r+0xea>
 800c216:	06d0      	lsls	r0, r2, #27
 800c218:	bf44      	itt	mi
 800c21a:	2320      	movmi	r3, #32
 800c21c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c220:	0711      	lsls	r1, r2, #28
 800c222:	bf44      	itt	mi
 800c224:	232b      	movmi	r3, #43	@ 0x2b
 800c226:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c22a:	f89a 3000 	ldrb.w	r3, [sl]
 800c22e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c230:	d015      	beq.n	800c25e <_svfiprintf_r+0xfa>
 800c232:	9a07      	ldr	r2, [sp, #28]
 800c234:	4654      	mov	r4, sl
 800c236:	2000      	movs	r0, #0
 800c238:	f04f 0c0a 	mov.w	ip, #10
 800c23c:	4621      	mov	r1, r4
 800c23e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c242:	3b30      	subs	r3, #48	@ 0x30
 800c244:	2b09      	cmp	r3, #9
 800c246:	d94b      	bls.n	800c2e0 <_svfiprintf_r+0x17c>
 800c248:	b1b0      	cbz	r0, 800c278 <_svfiprintf_r+0x114>
 800c24a:	9207      	str	r2, [sp, #28]
 800c24c:	e014      	b.n	800c278 <_svfiprintf_r+0x114>
 800c24e:	eba0 0308 	sub.w	r3, r0, r8
 800c252:	fa09 f303 	lsl.w	r3, r9, r3
 800c256:	4313      	orrs	r3, r2
 800c258:	9304      	str	r3, [sp, #16]
 800c25a:	46a2      	mov	sl, r4
 800c25c:	e7d2      	b.n	800c204 <_svfiprintf_r+0xa0>
 800c25e:	9b03      	ldr	r3, [sp, #12]
 800c260:	1d19      	adds	r1, r3, #4
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	9103      	str	r1, [sp, #12]
 800c266:	2b00      	cmp	r3, #0
 800c268:	bfbb      	ittet	lt
 800c26a:	425b      	neglt	r3, r3
 800c26c:	f042 0202 	orrlt.w	r2, r2, #2
 800c270:	9307      	strge	r3, [sp, #28]
 800c272:	9307      	strlt	r3, [sp, #28]
 800c274:	bfb8      	it	lt
 800c276:	9204      	strlt	r2, [sp, #16]
 800c278:	7823      	ldrb	r3, [r4, #0]
 800c27a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c27c:	d10a      	bne.n	800c294 <_svfiprintf_r+0x130>
 800c27e:	7863      	ldrb	r3, [r4, #1]
 800c280:	2b2a      	cmp	r3, #42	@ 0x2a
 800c282:	d132      	bne.n	800c2ea <_svfiprintf_r+0x186>
 800c284:	9b03      	ldr	r3, [sp, #12]
 800c286:	1d1a      	adds	r2, r3, #4
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	9203      	str	r2, [sp, #12]
 800c28c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c290:	3402      	adds	r4, #2
 800c292:	9305      	str	r3, [sp, #20]
 800c294:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c358 <_svfiprintf_r+0x1f4>
 800c298:	7821      	ldrb	r1, [r4, #0]
 800c29a:	2203      	movs	r2, #3
 800c29c:	4650      	mov	r0, sl
 800c29e:	f7f3 ffbf 	bl	8000220 <memchr>
 800c2a2:	b138      	cbz	r0, 800c2b4 <_svfiprintf_r+0x150>
 800c2a4:	9b04      	ldr	r3, [sp, #16]
 800c2a6:	eba0 000a 	sub.w	r0, r0, sl
 800c2aa:	2240      	movs	r2, #64	@ 0x40
 800c2ac:	4082      	lsls	r2, r0
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	3401      	adds	r4, #1
 800c2b2:	9304      	str	r3, [sp, #16]
 800c2b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2b8:	4824      	ldr	r0, [pc, #144]	@ (800c34c <_svfiprintf_r+0x1e8>)
 800c2ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c2be:	2206      	movs	r2, #6
 800c2c0:	f7f3 ffae 	bl	8000220 <memchr>
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	d036      	beq.n	800c336 <_svfiprintf_r+0x1d2>
 800c2c8:	4b21      	ldr	r3, [pc, #132]	@ (800c350 <_svfiprintf_r+0x1ec>)
 800c2ca:	bb1b      	cbnz	r3, 800c314 <_svfiprintf_r+0x1b0>
 800c2cc:	9b03      	ldr	r3, [sp, #12]
 800c2ce:	3307      	adds	r3, #7
 800c2d0:	f023 0307 	bic.w	r3, r3, #7
 800c2d4:	3308      	adds	r3, #8
 800c2d6:	9303      	str	r3, [sp, #12]
 800c2d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2da:	4433      	add	r3, r6
 800c2dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2de:	e76a      	b.n	800c1b6 <_svfiprintf_r+0x52>
 800c2e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2e4:	460c      	mov	r4, r1
 800c2e6:	2001      	movs	r0, #1
 800c2e8:	e7a8      	b.n	800c23c <_svfiprintf_r+0xd8>
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	3401      	adds	r4, #1
 800c2ee:	9305      	str	r3, [sp, #20]
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	f04f 0c0a 	mov.w	ip, #10
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2fc:	3a30      	subs	r2, #48	@ 0x30
 800c2fe:	2a09      	cmp	r2, #9
 800c300:	d903      	bls.n	800c30a <_svfiprintf_r+0x1a6>
 800c302:	2b00      	cmp	r3, #0
 800c304:	d0c6      	beq.n	800c294 <_svfiprintf_r+0x130>
 800c306:	9105      	str	r1, [sp, #20]
 800c308:	e7c4      	b.n	800c294 <_svfiprintf_r+0x130>
 800c30a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c30e:	4604      	mov	r4, r0
 800c310:	2301      	movs	r3, #1
 800c312:	e7f0      	b.n	800c2f6 <_svfiprintf_r+0x192>
 800c314:	ab03      	add	r3, sp, #12
 800c316:	9300      	str	r3, [sp, #0]
 800c318:	462a      	mov	r2, r5
 800c31a:	4b0e      	ldr	r3, [pc, #56]	@ (800c354 <_svfiprintf_r+0x1f0>)
 800c31c:	a904      	add	r1, sp, #16
 800c31e:	4638      	mov	r0, r7
 800c320:	f7fc fbc8 	bl	8008ab4 <_printf_float>
 800c324:	1c42      	adds	r2, r0, #1
 800c326:	4606      	mov	r6, r0
 800c328:	d1d6      	bne.n	800c2d8 <_svfiprintf_r+0x174>
 800c32a:	89ab      	ldrh	r3, [r5, #12]
 800c32c:	065b      	lsls	r3, r3, #25
 800c32e:	f53f af2d 	bmi.w	800c18c <_svfiprintf_r+0x28>
 800c332:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c334:	e72c      	b.n	800c190 <_svfiprintf_r+0x2c>
 800c336:	ab03      	add	r3, sp, #12
 800c338:	9300      	str	r3, [sp, #0]
 800c33a:	462a      	mov	r2, r5
 800c33c:	4b05      	ldr	r3, [pc, #20]	@ (800c354 <_svfiprintf_r+0x1f0>)
 800c33e:	a904      	add	r1, sp, #16
 800c340:	4638      	mov	r0, r7
 800c342:	f7fc fe4f 	bl	8008fe4 <_printf_i>
 800c346:	e7ed      	b.n	800c324 <_svfiprintf_r+0x1c0>
 800c348:	0800d5d9 	.word	0x0800d5d9
 800c34c:	0800d5e3 	.word	0x0800d5e3
 800c350:	08008ab5 	.word	0x08008ab5
 800c354:	0800c0ad 	.word	0x0800c0ad
 800c358:	0800d5df 	.word	0x0800d5df

0800c35c <__sfputc_r>:
 800c35c:	6893      	ldr	r3, [r2, #8]
 800c35e:	3b01      	subs	r3, #1
 800c360:	2b00      	cmp	r3, #0
 800c362:	b410      	push	{r4}
 800c364:	6093      	str	r3, [r2, #8]
 800c366:	da08      	bge.n	800c37a <__sfputc_r+0x1e>
 800c368:	6994      	ldr	r4, [r2, #24]
 800c36a:	42a3      	cmp	r3, r4
 800c36c:	db01      	blt.n	800c372 <__sfputc_r+0x16>
 800c36e:	290a      	cmp	r1, #10
 800c370:	d103      	bne.n	800c37a <__sfputc_r+0x1e>
 800c372:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c376:	f7fd baec 	b.w	8009952 <__swbuf_r>
 800c37a:	6813      	ldr	r3, [r2, #0]
 800c37c:	1c58      	adds	r0, r3, #1
 800c37e:	6010      	str	r0, [r2, #0]
 800c380:	7019      	strb	r1, [r3, #0]
 800c382:	4608      	mov	r0, r1
 800c384:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c388:	4770      	bx	lr

0800c38a <__sfputs_r>:
 800c38a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c38c:	4606      	mov	r6, r0
 800c38e:	460f      	mov	r7, r1
 800c390:	4614      	mov	r4, r2
 800c392:	18d5      	adds	r5, r2, r3
 800c394:	42ac      	cmp	r4, r5
 800c396:	d101      	bne.n	800c39c <__sfputs_r+0x12>
 800c398:	2000      	movs	r0, #0
 800c39a:	e007      	b.n	800c3ac <__sfputs_r+0x22>
 800c39c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3a0:	463a      	mov	r2, r7
 800c3a2:	4630      	mov	r0, r6
 800c3a4:	f7ff ffda 	bl	800c35c <__sfputc_r>
 800c3a8:	1c43      	adds	r3, r0, #1
 800c3aa:	d1f3      	bne.n	800c394 <__sfputs_r+0xa>
 800c3ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c3b0 <_vfiprintf_r>:
 800c3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b4:	460d      	mov	r5, r1
 800c3b6:	b09d      	sub	sp, #116	@ 0x74
 800c3b8:	4614      	mov	r4, r2
 800c3ba:	4698      	mov	r8, r3
 800c3bc:	4606      	mov	r6, r0
 800c3be:	b118      	cbz	r0, 800c3c8 <_vfiprintf_r+0x18>
 800c3c0:	6a03      	ldr	r3, [r0, #32]
 800c3c2:	b90b      	cbnz	r3, 800c3c8 <_vfiprintf_r+0x18>
 800c3c4:	f7fd f9ce 	bl	8009764 <__sinit>
 800c3c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c3ca:	07d9      	lsls	r1, r3, #31
 800c3cc:	d405      	bmi.n	800c3da <_vfiprintf_r+0x2a>
 800c3ce:	89ab      	ldrh	r3, [r5, #12]
 800c3d0:	059a      	lsls	r2, r3, #22
 800c3d2:	d402      	bmi.n	800c3da <_vfiprintf_r+0x2a>
 800c3d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c3d6:	f7fd fbce 	bl	8009b76 <__retarget_lock_acquire_recursive>
 800c3da:	89ab      	ldrh	r3, [r5, #12]
 800c3dc:	071b      	lsls	r3, r3, #28
 800c3de:	d501      	bpl.n	800c3e4 <_vfiprintf_r+0x34>
 800c3e0:	692b      	ldr	r3, [r5, #16]
 800c3e2:	b99b      	cbnz	r3, 800c40c <_vfiprintf_r+0x5c>
 800c3e4:	4629      	mov	r1, r5
 800c3e6:	4630      	mov	r0, r6
 800c3e8:	f7fd faf2 	bl	80099d0 <__swsetup_r>
 800c3ec:	b170      	cbz	r0, 800c40c <_vfiprintf_r+0x5c>
 800c3ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c3f0:	07dc      	lsls	r4, r3, #31
 800c3f2:	d504      	bpl.n	800c3fe <_vfiprintf_r+0x4e>
 800c3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f8:	b01d      	add	sp, #116	@ 0x74
 800c3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3fe:	89ab      	ldrh	r3, [r5, #12]
 800c400:	0598      	lsls	r0, r3, #22
 800c402:	d4f7      	bmi.n	800c3f4 <_vfiprintf_r+0x44>
 800c404:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c406:	f7fd fbb7 	bl	8009b78 <__retarget_lock_release_recursive>
 800c40a:	e7f3      	b.n	800c3f4 <_vfiprintf_r+0x44>
 800c40c:	2300      	movs	r3, #0
 800c40e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c410:	2320      	movs	r3, #32
 800c412:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c416:	f8cd 800c 	str.w	r8, [sp, #12]
 800c41a:	2330      	movs	r3, #48	@ 0x30
 800c41c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c5cc <_vfiprintf_r+0x21c>
 800c420:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c424:	f04f 0901 	mov.w	r9, #1
 800c428:	4623      	mov	r3, r4
 800c42a:	469a      	mov	sl, r3
 800c42c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c430:	b10a      	cbz	r2, 800c436 <_vfiprintf_r+0x86>
 800c432:	2a25      	cmp	r2, #37	@ 0x25
 800c434:	d1f9      	bne.n	800c42a <_vfiprintf_r+0x7a>
 800c436:	ebba 0b04 	subs.w	fp, sl, r4
 800c43a:	d00b      	beq.n	800c454 <_vfiprintf_r+0xa4>
 800c43c:	465b      	mov	r3, fp
 800c43e:	4622      	mov	r2, r4
 800c440:	4629      	mov	r1, r5
 800c442:	4630      	mov	r0, r6
 800c444:	f7ff ffa1 	bl	800c38a <__sfputs_r>
 800c448:	3001      	adds	r0, #1
 800c44a:	f000 80a7 	beq.w	800c59c <_vfiprintf_r+0x1ec>
 800c44e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c450:	445a      	add	r2, fp
 800c452:	9209      	str	r2, [sp, #36]	@ 0x24
 800c454:	f89a 3000 	ldrb.w	r3, [sl]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	f000 809f 	beq.w	800c59c <_vfiprintf_r+0x1ec>
 800c45e:	2300      	movs	r3, #0
 800c460:	f04f 32ff 	mov.w	r2, #4294967295
 800c464:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c468:	f10a 0a01 	add.w	sl, sl, #1
 800c46c:	9304      	str	r3, [sp, #16]
 800c46e:	9307      	str	r3, [sp, #28]
 800c470:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c474:	931a      	str	r3, [sp, #104]	@ 0x68
 800c476:	4654      	mov	r4, sl
 800c478:	2205      	movs	r2, #5
 800c47a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c47e:	4853      	ldr	r0, [pc, #332]	@ (800c5cc <_vfiprintf_r+0x21c>)
 800c480:	f7f3 fece 	bl	8000220 <memchr>
 800c484:	9a04      	ldr	r2, [sp, #16]
 800c486:	b9d8      	cbnz	r0, 800c4c0 <_vfiprintf_r+0x110>
 800c488:	06d1      	lsls	r1, r2, #27
 800c48a:	bf44      	itt	mi
 800c48c:	2320      	movmi	r3, #32
 800c48e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c492:	0713      	lsls	r3, r2, #28
 800c494:	bf44      	itt	mi
 800c496:	232b      	movmi	r3, #43	@ 0x2b
 800c498:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c49c:	f89a 3000 	ldrb.w	r3, [sl]
 800c4a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4a2:	d015      	beq.n	800c4d0 <_vfiprintf_r+0x120>
 800c4a4:	9a07      	ldr	r2, [sp, #28]
 800c4a6:	4654      	mov	r4, sl
 800c4a8:	2000      	movs	r0, #0
 800c4aa:	f04f 0c0a 	mov.w	ip, #10
 800c4ae:	4621      	mov	r1, r4
 800c4b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4b4:	3b30      	subs	r3, #48	@ 0x30
 800c4b6:	2b09      	cmp	r3, #9
 800c4b8:	d94b      	bls.n	800c552 <_vfiprintf_r+0x1a2>
 800c4ba:	b1b0      	cbz	r0, 800c4ea <_vfiprintf_r+0x13a>
 800c4bc:	9207      	str	r2, [sp, #28]
 800c4be:	e014      	b.n	800c4ea <_vfiprintf_r+0x13a>
 800c4c0:	eba0 0308 	sub.w	r3, r0, r8
 800c4c4:	fa09 f303 	lsl.w	r3, r9, r3
 800c4c8:	4313      	orrs	r3, r2
 800c4ca:	9304      	str	r3, [sp, #16]
 800c4cc:	46a2      	mov	sl, r4
 800c4ce:	e7d2      	b.n	800c476 <_vfiprintf_r+0xc6>
 800c4d0:	9b03      	ldr	r3, [sp, #12]
 800c4d2:	1d19      	adds	r1, r3, #4
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	9103      	str	r1, [sp, #12]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	bfbb      	ittet	lt
 800c4dc:	425b      	neglt	r3, r3
 800c4de:	f042 0202 	orrlt.w	r2, r2, #2
 800c4e2:	9307      	strge	r3, [sp, #28]
 800c4e4:	9307      	strlt	r3, [sp, #28]
 800c4e6:	bfb8      	it	lt
 800c4e8:	9204      	strlt	r2, [sp, #16]
 800c4ea:	7823      	ldrb	r3, [r4, #0]
 800c4ec:	2b2e      	cmp	r3, #46	@ 0x2e
 800c4ee:	d10a      	bne.n	800c506 <_vfiprintf_r+0x156>
 800c4f0:	7863      	ldrb	r3, [r4, #1]
 800c4f2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4f4:	d132      	bne.n	800c55c <_vfiprintf_r+0x1ac>
 800c4f6:	9b03      	ldr	r3, [sp, #12]
 800c4f8:	1d1a      	adds	r2, r3, #4
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	9203      	str	r2, [sp, #12]
 800c4fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c502:	3402      	adds	r4, #2
 800c504:	9305      	str	r3, [sp, #20]
 800c506:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c5dc <_vfiprintf_r+0x22c>
 800c50a:	7821      	ldrb	r1, [r4, #0]
 800c50c:	2203      	movs	r2, #3
 800c50e:	4650      	mov	r0, sl
 800c510:	f7f3 fe86 	bl	8000220 <memchr>
 800c514:	b138      	cbz	r0, 800c526 <_vfiprintf_r+0x176>
 800c516:	9b04      	ldr	r3, [sp, #16]
 800c518:	eba0 000a 	sub.w	r0, r0, sl
 800c51c:	2240      	movs	r2, #64	@ 0x40
 800c51e:	4082      	lsls	r2, r0
 800c520:	4313      	orrs	r3, r2
 800c522:	3401      	adds	r4, #1
 800c524:	9304      	str	r3, [sp, #16]
 800c526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c52a:	4829      	ldr	r0, [pc, #164]	@ (800c5d0 <_vfiprintf_r+0x220>)
 800c52c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c530:	2206      	movs	r2, #6
 800c532:	f7f3 fe75 	bl	8000220 <memchr>
 800c536:	2800      	cmp	r0, #0
 800c538:	d03f      	beq.n	800c5ba <_vfiprintf_r+0x20a>
 800c53a:	4b26      	ldr	r3, [pc, #152]	@ (800c5d4 <_vfiprintf_r+0x224>)
 800c53c:	bb1b      	cbnz	r3, 800c586 <_vfiprintf_r+0x1d6>
 800c53e:	9b03      	ldr	r3, [sp, #12]
 800c540:	3307      	adds	r3, #7
 800c542:	f023 0307 	bic.w	r3, r3, #7
 800c546:	3308      	adds	r3, #8
 800c548:	9303      	str	r3, [sp, #12]
 800c54a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c54c:	443b      	add	r3, r7
 800c54e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c550:	e76a      	b.n	800c428 <_vfiprintf_r+0x78>
 800c552:	fb0c 3202 	mla	r2, ip, r2, r3
 800c556:	460c      	mov	r4, r1
 800c558:	2001      	movs	r0, #1
 800c55a:	e7a8      	b.n	800c4ae <_vfiprintf_r+0xfe>
 800c55c:	2300      	movs	r3, #0
 800c55e:	3401      	adds	r4, #1
 800c560:	9305      	str	r3, [sp, #20]
 800c562:	4619      	mov	r1, r3
 800c564:	f04f 0c0a 	mov.w	ip, #10
 800c568:	4620      	mov	r0, r4
 800c56a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c56e:	3a30      	subs	r2, #48	@ 0x30
 800c570:	2a09      	cmp	r2, #9
 800c572:	d903      	bls.n	800c57c <_vfiprintf_r+0x1cc>
 800c574:	2b00      	cmp	r3, #0
 800c576:	d0c6      	beq.n	800c506 <_vfiprintf_r+0x156>
 800c578:	9105      	str	r1, [sp, #20]
 800c57a:	e7c4      	b.n	800c506 <_vfiprintf_r+0x156>
 800c57c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c580:	4604      	mov	r4, r0
 800c582:	2301      	movs	r3, #1
 800c584:	e7f0      	b.n	800c568 <_vfiprintf_r+0x1b8>
 800c586:	ab03      	add	r3, sp, #12
 800c588:	9300      	str	r3, [sp, #0]
 800c58a:	462a      	mov	r2, r5
 800c58c:	4b12      	ldr	r3, [pc, #72]	@ (800c5d8 <_vfiprintf_r+0x228>)
 800c58e:	a904      	add	r1, sp, #16
 800c590:	4630      	mov	r0, r6
 800c592:	f7fc fa8f 	bl	8008ab4 <_printf_float>
 800c596:	4607      	mov	r7, r0
 800c598:	1c78      	adds	r0, r7, #1
 800c59a:	d1d6      	bne.n	800c54a <_vfiprintf_r+0x19a>
 800c59c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c59e:	07d9      	lsls	r1, r3, #31
 800c5a0:	d405      	bmi.n	800c5ae <_vfiprintf_r+0x1fe>
 800c5a2:	89ab      	ldrh	r3, [r5, #12]
 800c5a4:	059a      	lsls	r2, r3, #22
 800c5a6:	d402      	bmi.n	800c5ae <_vfiprintf_r+0x1fe>
 800c5a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5aa:	f7fd fae5 	bl	8009b78 <__retarget_lock_release_recursive>
 800c5ae:	89ab      	ldrh	r3, [r5, #12]
 800c5b0:	065b      	lsls	r3, r3, #25
 800c5b2:	f53f af1f 	bmi.w	800c3f4 <_vfiprintf_r+0x44>
 800c5b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c5b8:	e71e      	b.n	800c3f8 <_vfiprintf_r+0x48>
 800c5ba:	ab03      	add	r3, sp, #12
 800c5bc:	9300      	str	r3, [sp, #0]
 800c5be:	462a      	mov	r2, r5
 800c5c0:	4b05      	ldr	r3, [pc, #20]	@ (800c5d8 <_vfiprintf_r+0x228>)
 800c5c2:	a904      	add	r1, sp, #16
 800c5c4:	4630      	mov	r0, r6
 800c5c6:	f7fc fd0d 	bl	8008fe4 <_printf_i>
 800c5ca:	e7e4      	b.n	800c596 <_vfiprintf_r+0x1e6>
 800c5cc:	0800d5d9 	.word	0x0800d5d9
 800c5d0:	0800d5e3 	.word	0x0800d5e3
 800c5d4:	08008ab5 	.word	0x08008ab5
 800c5d8:	0800c38b 	.word	0x0800c38b
 800c5dc:	0800d5df 	.word	0x0800d5df

0800c5e0 <__sflush_r>:
 800c5e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5e8:	0716      	lsls	r6, r2, #28
 800c5ea:	4605      	mov	r5, r0
 800c5ec:	460c      	mov	r4, r1
 800c5ee:	d454      	bmi.n	800c69a <__sflush_r+0xba>
 800c5f0:	684b      	ldr	r3, [r1, #4]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	dc02      	bgt.n	800c5fc <__sflush_r+0x1c>
 800c5f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	dd48      	ble.n	800c68e <__sflush_r+0xae>
 800c5fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c5fe:	2e00      	cmp	r6, #0
 800c600:	d045      	beq.n	800c68e <__sflush_r+0xae>
 800c602:	2300      	movs	r3, #0
 800c604:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c608:	682f      	ldr	r7, [r5, #0]
 800c60a:	6a21      	ldr	r1, [r4, #32]
 800c60c:	602b      	str	r3, [r5, #0]
 800c60e:	d030      	beq.n	800c672 <__sflush_r+0x92>
 800c610:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c612:	89a3      	ldrh	r3, [r4, #12]
 800c614:	0759      	lsls	r1, r3, #29
 800c616:	d505      	bpl.n	800c624 <__sflush_r+0x44>
 800c618:	6863      	ldr	r3, [r4, #4]
 800c61a:	1ad2      	subs	r2, r2, r3
 800c61c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c61e:	b10b      	cbz	r3, 800c624 <__sflush_r+0x44>
 800c620:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c622:	1ad2      	subs	r2, r2, r3
 800c624:	2300      	movs	r3, #0
 800c626:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c628:	6a21      	ldr	r1, [r4, #32]
 800c62a:	4628      	mov	r0, r5
 800c62c:	47b0      	blx	r6
 800c62e:	1c43      	adds	r3, r0, #1
 800c630:	89a3      	ldrh	r3, [r4, #12]
 800c632:	d106      	bne.n	800c642 <__sflush_r+0x62>
 800c634:	6829      	ldr	r1, [r5, #0]
 800c636:	291d      	cmp	r1, #29
 800c638:	d82b      	bhi.n	800c692 <__sflush_r+0xb2>
 800c63a:	4a2a      	ldr	r2, [pc, #168]	@ (800c6e4 <__sflush_r+0x104>)
 800c63c:	410a      	asrs	r2, r1
 800c63e:	07d6      	lsls	r6, r2, #31
 800c640:	d427      	bmi.n	800c692 <__sflush_r+0xb2>
 800c642:	2200      	movs	r2, #0
 800c644:	6062      	str	r2, [r4, #4]
 800c646:	04d9      	lsls	r1, r3, #19
 800c648:	6922      	ldr	r2, [r4, #16]
 800c64a:	6022      	str	r2, [r4, #0]
 800c64c:	d504      	bpl.n	800c658 <__sflush_r+0x78>
 800c64e:	1c42      	adds	r2, r0, #1
 800c650:	d101      	bne.n	800c656 <__sflush_r+0x76>
 800c652:	682b      	ldr	r3, [r5, #0]
 800c654:	b903      	cbnz	r3, 800c658 <__sflush_r+0x78>
 800c656:	6560      	str	r0, [r4, #84]	@ 0x54
 800c658:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c65a:	602f      	str	r7, [r5, #0]
 800c65c:	b1b9      	cbz	r1, 800c68e <__sflush_r+0xae>
 800c65e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c662:	4299      	cmp	r1, r3
 800c664:	d002      	beq.n	800c66c <__sflush_r+0x8c>
 800c666:	4628      	mov	r0, r5
 800c668:	f7fe f8ea 	bl	800a840 <_free_r>
 800c66c:	2300      	movs	r3, #0
 800c66e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c670:	e00d      	b.n	800c68e <__sflush_r+0xae>
 800c672:	2301      	movs	r3, #1
 800c674:	4628      	mov	r0, r5
 800c676:	47b0      	blx	r6
 800c678:	4602      	mov	r2, r0
 800c67a:	1c50      	adds	r0, r2, #1
 800c67c:	d1c9      	bne.n	800c612 <__sflush_r+0x32>
 800c67e:	682b      	ldr	r3, [r5, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d0c6      	beq.n	800c612 <__sflush_r+0x32>
 800c684:	2b1d      	cmp	r3, #29
 800c686:	d001      	beq.n	800c68c <__sflush_r+0xac>
 800c688:	2b16      	cmp	r3, #22
 800c68a:	d11e      	bne.n	800c6ca <__sflush_r+0xea>
 800c68c:	602f      	str	r7, [r5, #0]
 800c68e:	2000      	movs	r0, #0
 800c690:	e022      	b.n	800c6d8 <__sflush_r+0xf8>
 800c692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c696:	b21b      	sxth	r3, r3
 800c698:	e01b      	b.n	800c6d2 <__sflush_r+0xf2>
 800c69a:	690f      	ldr	r7, [r1, #16]
 800c69c:	2f00      	cmp	r7, #0
 800c69e:	d0f6      	beq.n	800c68e <__sflush_r+0xae>
 800c6a0:	0793      	lsls	r3, r2, #30
 800c6a2:	680e      	ldr	r6, [r1, #0]
 800c6a4:	bf08      	it	eq
 800c6a6:	694b      	ldreq	r3, [r1, #20]
 800c6a8:	600f      	str	r7, [r1, #0]
 800c6aa:	bf18      	it	ne
 800c6ac:	2300      	movne	r3, #0
 800c6ae:	eba6 0807 	sub.w	r8, r6, r7
 800c6b2:	608b      	str	r3, [r1, #8]
 800c6b4:	f1b8 0f00 	cmp.w	r8, #0
 800c6b8:	dde9      	ble.n	800c68e <__sflush_r+0xae>
 800c6ba:	6a21      	ldr	r1, [r4, #32]
 800c6bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c6be:	4643      	mov	r3, r8
 800c6c0:	463a      	mov	r2, r7
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	47b0      	blx	r6
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	dc08      	bgt.n	800c6dc <__sflush_r+0xfc>
 800c6ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6d2:	81a3      	strh	r3, [r4, #12]
 800c6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6dc:	4407      	add	r7, r0
 800c6de:	eba8 0800 	sub.w	r8, r8, r0
 800c6e2:	e7e7      	b.n	800c6b4 <__sflush_r+0xd4>
 800c6e4:	dfbffffe 	.word	0xdfbffffe

0800c6e8 <_fflush_r>:
 800c6e8:	b538      	push	{r3, r4, r5, lr}
 800c6ea:	690b      	ldr	r3, [r1, #16]
 800c6ec:	4605      	mov	r5, r0
 800c6ee:	460c      	mov	r4, r1
 800c6f0:	b913      	cbnz	r3, 800c6f8 <_fflush_r+0x10>
 800c6f2:	2500      	movs	r5, #0
 800c6f4:	4628      	mov	r0, r5
 800c6f6:	bd38      	pop	{r3, r4, r5, pc}
 800c6f8:	b118      	cbz	r0, 800c702 <_fflush_r+0x1a>
 800c6fa:	6a03      	ldr	r3, [r0, #32]
 800c6fc:	b90b      	cbnz	r3, 800c702 <_fflush_r+0x1a>
 800c6fe:	f7fd f831 	bl	8009764 <__sinit>
 800c702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d0f3      	beq.n	800c6f2 <_fflush_r+0xa>
 800c70a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c70c:	07d0      	lsls	r0, r2, #31
 800c70e:	d404      	bmi.n	800c71a <_fflush_r+0x32>
 800c710:	0599      	lsls	r1, r3, #22
 800c712:	d402      	bmi.n	800c71a <_fflush_r+0x32>
 800c714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c716:	f7fd fa2e 	bl	8009b76 <__retarget_lock_acquire_recursive>
 800c71a:	4628      	mov	r0, r5
 800c71c:	4621      	mov	r1, r4
 800c71e:	f7ff ff5f 	bl	800c5e0 <__sflush_r>
 800c722:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c724:	07da      	lsls	r2, r3, #31
 800c726:	4605      	mov	r5, r0
 800c728:	d4e4      	bmi.n	800c6f4 <_fflush_r+0xc>
 800c72a:	89a3      	ldrh	r3, [r4, #12]
 800c72c:	059b      	lsls	r3, r3, #22
 800c72e:	d4e1      	bmi.n	800c6f4 <_fflush_r+0xc>
 800c730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c732:	f7fd fa21 	bl	8009b78 <__retarget_lock_release_recursive>
 800c736:	e7dd      	b.n	800c6f4 <_fflush_r+0xc>

0800c738 <__swhatbuf_r>:
 800c738:	b570      	push	{r4, r5, r6, lr}
 800c73a:	460c      	mov	r4, r1
 800c73c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c740:	2900      	cmp	r1, #0
 800c742:	b096      	sub	sp, #88	@ 0x58
 800c744:	4615      	mov	r5, r2
 800c746:	461e      	mov	r6, r3
 800c748:	da0d      	bge.n	800c766 <__swhatbuf_r+0x2e>
 800c74a:	89a3      	ldrh	r3, [r4, #12]
 800c74c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c750:	f04f 0100 	mov.w	r1, #0
 800c754:	bf14      	ite	ne
 800c756:	2340      	movne	r3, #64	@ 0x40
 800c758:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c75c:	2000      	movs	r0, #0
 800c75e:	6031      	str	r1, [r6, #0]
 800c760:	602b      	str	r3, [r5, #0]
 800c762:	b016      	add	sp, #88	@ 0x58
 800c764:	bd70      	pop	{r4, r5, r6, pc}
 800c766:	466a      	mov	r2, sp
 800c768:	f000 f874 	bl	800c854 <_fstat_r>
 800c76c:	2800      	cmp	r0, #0
 800c76e:	dbec      	blt.n	800c74a <__swhatbuf_r+0x12>
 800c770:	9901      	ldr	r1, [sp, #4]
 800c772:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c776:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c77a:	4259      	negs	r1, r3
 800c77c:	4159      	adcs	r1, r3
 800c77e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c782:	e7eb      	b.n	800c75c <__swhatbuf_r+0x24>

0800c784 <__smakebuf_r>:
 800c784:	898b      	ldrh	r3, [r1, #12]
 800c786:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c788:	079d      	lsls	r5, r3, #30
 800c78a:	4606      	mov	r6, r0
 800c78c:	460c      	mov	r4, r1
 800c78e:	d507      	bpl.n	800c7a0 <__smakebuf_r+0x1c>
 800c790:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c794:	6023      	str	r3, [r4, #0]
 800c796:	6123      	str	r3, [r4, #16]
 800c798:	2301      	movs	r3, #1
 800c79a:	6163      	str	r3, [r4, #20]
 800c79c:	b003      	add	sp, #12
 800c79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7a0:	ab01      	add	r3, sp, #4
 800c7a2:	466a      	mov	r2, sp
 800c7a4:	f7ff ffc8 	bl	800c738 <__swhatbuf_r>
 800c7a8:	9f00      	ldr	r7, [sp, #0]
 800c7aa:	4605      	mov	r5, r0
 800c7ac:	4639      	mov	r1, r7
 800c7ae:	4630      	mov	r0, r6
 800c7b0:	f7fe f8ba 	bl	800a928 <_malloc_r>
 800c7b4:	b948      	cbnz	r0, 800c7ca <__smakebuf_r+0x46>
 800c7b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7ba:	059a      	lsls	r2, r3, #22
 800c7bc:	d4ee      	bmi.n	800c79c <__smakebuf_r+0x18>
 800c7be:	f023 0303 	bic.w	r3, r3, #3
 800c7c2:	f043 0302 	orr.w	r3, r3, #2
 800c7c6:	81a3      	strh	r3, [r4, #12]
 800c7c8:	e7e2      	b.n	800c790 <__smakebuf_r+0xc>
 800c7ca:	89a3      	ldrh	r3, [r4, #12]
 800c7cc:	6020      	str	r0, [r4, #0]
 800c7ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7d2:	81a3      	strh	r3, [r4, #12]
 800c7d4:	9b01      	ldr	r3, [sp, #4]
 800c7d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c7da:	b15b      	cbz	r3, 800c7f4 <__smakebuf_r+0x70>
 800c7dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7e0:	4630      	mov	r0, r6
 800c7e2:	f000 f849 	bl	800c878 <_isatty_r>
 800c7e6:	b128      	cbz	r0, 800c7f4 <__smakebuf_r+0x70>
 800c7e8:	89a3      	ldrh	r3, [r4, #12]
 800c7ea:	f023 0303 	bic.w	r3, r3, #3
 800c7ee:	f043 0301 	orr.w	r3, r3, #1
 800c7f2:	81a3      	strh	r3, [r4, #12]
 800c7f4:	89a3      	ldrh	r3, [r4, #12]
 800c7f6:	431d      	orrs	r5, r3
 800c7f8:	81a5      	strh	r5, [r4, #12]
 800c7fa:	e7cf      	b.n	800c79c <__smakebuf_r+0x18>

0800c7fc <memmove>:
 800c7fc:	4288      	cmp	r0, r1
 800c7fe:	b510      	push	{r4, lr}
 800c800:	eb01 0402 	add.w	r4, r1, r2
 800c804:	d902      	bls.n	800c80c <memmove+0x10>
 800c806:	4284      	cmp	r4, r0
 800c808:	4623      	mov	r3, r4
 800c80a:	d807      	bhi.n	800c81c <memmove+0x20>
 800c80c:	1e43      	subs	r3, r0, #1
 800c80e:	42a1      	cmp	r1, r4
 800c810:	d008      	beq.n	800c824 <memmove+0x28>
 800c812:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c816:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c81a:	e7f8      	b.n	800c80e <memmove+0x12>
 800c81c:	4402      	add	r2, r0
 800c81e:	4601      	mov	r1, r0
 800c820:	428a      	cmp	r2, r1
 800c822:	d100      	bne.n	800c826 <memmove+0x2a>
 800c824:	bd10      	pop	{r4, pc}
 800c826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c82a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c82e:	e7f7      	b.n	800c820 <memmove+0x24>

0800c830 <strncmp>:
 800c830:	b510      	push	{r4, lr}
 800c832:	b16a      	cbz	r2, 800c850 <strncmp+0x20>
 800c834:	3901      	subs	r1, #1
 800c836:	1884      	adds	r4, r0, r2
 800c838:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c83c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c840:	429a      	cmp	r2, r3
 800c842:	d103      	bne.n	800c84c <strncmp+0x1c>
 800c844:	42a0      	cmp	r0, r4
 800c846:	d001      	beq.n	800c84c <strncmp+0x1c>
 800c848:	2a00      	cmp	r2, #0
 800c84a:	d1f5      	bne.n	800c838 <strncmp+0x8>
 800c84c:	1ad0      	subs	r0, r2, r3
 800c84e:	bd10      	pop	{r4, pc}
 800c850:	4610      	mov	r0, r2
 800c852:	e7fc      	b.n	800c84e <strncmp+0x1e>

0800c854 <_fstat_r>:
 800c854:	b538      	push	{r3, r4, r5, lr}
 800c856:	4d07      	ldr	r5, [pc, #28]	@ (800c874 <_fstat_r+0x20>)
 800c858:	2300      	movs	r3, #0
 800c85a:	4604      	mov	r4, r0
 800c85c:	4608      	mov	r0, r1
 800c85e:	4611      	mov	r1, r2
 800c860:	602b      	str	r3, [r5, #0]
 800c862:	f7f5 f829 	bl	80018b8 <_fstat>
 800c866:	1c43      	adds	r3, r0, #1
 800c868:	d102      	bne.n	800c870 <_fstat_r+0x1c>
 800c86a:	682b      	ldr	r3, [r5, #0]
 800c86c:	b103      	cbz	r3, 800c870 <_fstat_r+0x1c>
 800c86e:	6023      	str	r3, [r4, #0]
 800c870:	bd38      	pop	{r3, r4, r5, pc}
 800c872:	bf00      	nop
 800c874:	200041a8 	.word	0x200041a8

0800c878 <_isatty_r>:
 800c878:	b538      	push	{r3, r4, r5, lr}
 800c87a:	4d06      	ldr	r5, [pc, #24]	@ (800c894 <_isatty_r+0x1c>)
 800c87c:	2300      	movs	r3, #0
 800c87e:	4604      	mov	r4, r0
 800c880:	4608      	mov	r0, r1
 800c882:	602b      	str	r3, [r5, #0]
 800c884:	f7f5 f828 	bl	80018d8 <_isatty>
 800c888:	1c43      	adds	r3, r0, #1
 800c88a:	d102      	bne.n	800c892 <_isatty_r+0x1a>
 800c88c:	682b      	ldr	r3, [r5, #0]
 800c88e:	b103      	cbz	r3, 800c892 <_isatty_r+0x1a>
 800c890:	6023      	str	r3, [r4, #0]
 800c892:	bd38      	pop	{r3, r4, r5, pc}
 800c894:	200041a8 	.word	0x200041a8

0800c898 <_sbrk_r>:
 800c898:	b538      	push	{r3, r4, r5, lr}
 800c89a:	4d06      	ldr	r5, [pc, #24]	@ (800c8b4 <_sbrk_r+0x1c>)
 800c89c:	2300      	movs	r3, #0
 800c89e:	4604      	mov	r4, r0
 800c8a0:	4608      	mov	r0, r1
 800c8a2:	602b      	str	r3, [r5, #0]
 800c8a4:	f7f5 f830 	bl	8001908 <_sbrk>
 800c8a8:	1c43      	adds	r3, r0, #1
 800c8aa:	d102      	bne.n	800c8b2 <_sbrk_r+0x1a>
 800c8ac:	682b      	ldr	r3, [r5, #0]
 800c8ae:	b103      	cbz	r3, 800c8b2 <_sbrk_r+0x1a>
 800c8b0:	6023      	str	r3, [r4, #0]
 800c8b2:	bd38      	pop	{r3, r4, r5, pc}
 800c8b4:	200041a8 	.word	0x200041a8

0800c8b8 <nan>:
 800c8b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c8c0 <nan+0x8>
 800c8bc:	4770      	bx	lr
 800c8be:	bf00      	nop
 800c8c0:	00000000 	.word	0x00000000
 800c8c4:	7ff80000 	.word	0x7ff80000

0800c8c8 <__assert_func>:
 800c8c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8ca:	4614      	mov	r4, r2
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	4b09      	ldr	r3, [pc, #36]	@ (800c8f4 <__assert_func+0x2c>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4605      	mov	r5, r0
 800c8d4:	68d8      	ldr	r0, [r3, #12]
 800c8d6:	b954      	cbnz	r4, 800c8ee <__assert_func+0x26>
 800c8d8:	4b07      	ldr	r3, [pc, #28]	@ (800c8f8 <__assert_func+0x30>)
 800c8da:	461c      	mov	r4, r3
 800c8dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8e0:	9100      	str	r1, [sp, #0]
 800c8e2:	462b      	mov	r3, r5
 800c8e4:	4905      	ldr	r1, [pc, #20]	@ (800c8fc <__assert_func+0x34>)
 800c8e6:	f000 fba7 	bl	800d038 <fiprintf>
 800c8ea:	f000 fbb7 	bl	800d05c <abort>
 800c8ee:	4b04      	ldr	r3, [pc, #16]	@ (800c900 <__assert_func+0x38>)
 800c8f0:	e7f4      	b.n	800c8dc <__assert_func+0x14>
 800c8f2:	bf00      	nop
 800c8f4:	2000001c 	.word	0x2000001c
 800c8f8:	0800d62d 	.word	0x0800d62d
 800c8fc:	0800d5ff 	.word	0x0800d5ff
 800c900:	0800d5f2 	.word	0x0800d5f2

0800c904 <_calloc_r>:
 800c904:	b570      	push	{r4, r5, r6, lr}
 800c906:	fba1 5402 	umull	r5, r4, r1, r2
 800c90a:	b93c      	cbnz	r4, 800c91c <_calloc_r+0x18>
 800c90c:	4629      	mov	r1, r5
 800c90e:	f7fe f80b 	bl	800a928 <_malloc_r>
 800c912:	4606      	mov	r6, r0
 800c914:	b928      	cbnz	r0, 800c922 <_calloc_r+0x1e>
 800c916:	2600      	movs	r6, #0
 800c918:	4630      	mov	r0, r6
 800c91a:	bd70      	pop	{r4, r5, r6, pc}
 800c91c:	220c      	movs	r2, #12
 800c91e:	6002      	str	r2, [r0, #0]
 800c920:	e7f9      	b.n	800c916 <_calloc_r+0x12>
 800c922:	462a      	mov	r2, r5
 800c924:	4621      	mov	r1, r4
 800c926:	f7fd f8a9 	bl	8009a7c <memset>
 800c92a:	e7f5      	b.n	800c918 <_calloc_r+0x14>

0800c92c <rshift>:
 800c92c:	6903      	ldr	r3, [r0, #16]
 800c92e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c932:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c936:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c93a:	f100 0414 	add.w	r4, r0, #20
 800c93e:	dd45      	ble.n	800c9cc <rshift+0xa0>
 800c940:	f011 011f 	ands.w	r1, r1, #31
 800c944:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c948:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c94c:	d10c      	bne.n	800c968 <rshift+0x3c>
 800c94e:	f100 0710 	add.w	r7, r0, #16
 800c952:	4629      	mov	r1, r5
 800c954:	42b1      	cmp	r1, r6
 800c956:	d334      	bcc.n	800c9c2 <rshift+0x96>
 800c958:	1a9b      	subs	r3, r3, r2
 800c95a:	009b      	lsls	r3, r3, #2
 800c95c:	1eea      	subs	r2, r5, #3
 800c95e:	4296      	cmp	r6, r2
 800c960:	bf38      	it	cc
 800c962:	2300      	movcc	r3, #0
 800c964:	4423      	add	r3, r4
 800c966:	e015      	b.n	800c994 <rshift+0x68>
 800c968:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c96c:	f1c1 0820 	rsb	r8, r1, #32
 800c970:	40cf      	lsrs	r7, r1
 800c972:	f105 0e04 	add.w	lr, r5, #4
 800c976:	46a1      	mov	r9, r4
 800c978:	4576      	cmp	r6, lr
 800c97a:	46f4      	mov	ip, lr
 800c97c:	d815      	bhi.n	800c9aa <rshift+0x7e>
 800c97e:	1a9a      	subs	r2, r3, r2
 800c980:	0092      	lsls	r2, r2, #2
 800c982:	3a04      	subs	r2, #4
 800c984:	3501      	adds	r5, #1
 800c986:	42ae      	cmp	r6, r5
 800c988:	bf38      	it	cc
 800c98a:	2200      	movcc	r2, #0
 800c98c:	18a3      	adds	r3, r4, r2
 800c98e:	50a7      	str	r7, [r4, r2]
 800c990:	b107      	cbz	r7, 800c994 <rshift+0x68>
 800c992:	3304      	adds	r3, #4
 800c994:	1b1a      	subs	r2, r3, r4
 800c996:	42a3      	cmp	r3, r4
 800c998:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c99c:	bf08      	it	eq
 800c99e:	2300      	moveq	r3, #0
 800c9a0:	6102      	str	r2, [r0, #16]
 800c9a2:	bf08      	it	eq
 800c9a4:	6143      	streq	r3, [r0, #20]
 800c9a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9aa:	f8dc c000 	ldr.w	ip, [ip]
 800c9ae:	fa0c fc08 	lsl.w	ip, ip, r8
 800c9b2:	ea4c 0707 	orr.w	r7, ip, r7
 800c9b6:	f849 7b04 	str.w	r7, [r9], #4
 800c9ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c9be:	40cf      	lsrs	r7, r1
 800c9c0:	e7da      	b.n	800c978 <rshift+0x4c>
 800c9c2:	f851 cb04 	ldr.w	ip, [r1], #4
 800c9c6:	f847 cf04 	str.w	ip, [r7, #4]!
 800c9ca:	e7c3      	b.n	800c954 <rshift+0x28>
 800c9cc:	4623      	mov	r3, r4
 800c9ce:	e7e1      	b.n	800c994 <rshift+0x68>

0800c9d0 <__hexdig_fun>:
 800c9d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c9d4:	2b09      	cmp	r3, #9
 800c9d6:	d802      	bhi.n	800c9de <__hexdig_fun+0xe>
 800c9d8:	3820      	subs	r0, #32
 800c9da:	b2c0      	uxtb	r0, r0
 800c9dc:	4770      	bx	lr
 800c9de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c9e2:	2b05      	cmp	r3, #5
 800c9e4:	d801      	bhi.n	800c9ea <__hexdig_fun+0x1a>
 800c9e6:	3847      	subs	r0, #71	@ 0x47
 800c9e8:	e7f7      	b.n	800c9da <__hexdig_fun+0xa>
 800c9ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c9ee:	2b05      	cmp	r3, #5
 800c9f0:	d801      	bhi.n	800c9f6 <__hexdig_fun+0x26>
 800c9f2:	3827      	subs	r0, #39	@ 0x27
 800c9f4:	e7f1      	b.n	800c9da <__hexdig_fun+0xa>
 800c9f6:	2000      	movs	r0, #0
 800c9f8:	4770      	bx	lr
	...

0800c9fc <__gethex>:
 800c9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca00:	b085      	sub	sp, #20
 800ca02:	468a      	mov	sl, r1
 800ca04:	9302      	str	r3, [sp, #8]
 800ca06:	680b      	ldr	r3, [r1, #0]
 800ca08:	9001      	str	r0, [sp, #4]
 800ca0a:	4690      	mov	r8, r2
 800ca0c:	1c9c      	adds	r4, r3, #2
 800ca0e:	46a1      	mov	r9, r4
 800ca10:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ca14:	2830      	cmp	r0, #48	@ 0x30
 800ca16:	d0fa      	beq.n	800ca0e <__gethex+0x12>
 800ca18:	eba9 0303 	sub.w	r3, r9, r3
 800ca1c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ca20:	f7ff ffd6 	bl	800c9d0 <__hexdig_fun>
 800ca24:	4605      	mov	r5, r0
 800ca26:	2800      	cmp	r0, #0
 800ca28:	d168      	bne.n	800cafc <__gethex+0x100>
 800ca2a:	49a0      	ldr	r1, [pc, #640]	@ (800ccac <__gethex+0x2b0>)
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	4648      	mov	r0, r9
 800ca30:	f7ff fefe 	bl	800c830 <strncmp>
 800ca34:	4607      	mov	r7, r0
 800ca36:	2800      	cmp	r0, #0
 800ca38:	d167      	bne.n	800cb0a <__gethex+0x10e>
 800ca3a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ca3e:	4626      	mov	r6, r4
 800ca40:	f7ff ffc6 	bl	800c9d0 <__hexdig_fun>
 800ca44:	2800      	cmp	r0, #0
 800ca46:	d062      	beq.n	800cb0e <__gethex+0x112>
 800ca48:	4623      	mov	r3, r4
 800ca4a:	7818      	ldrb	r0, [r3, #0]
 800ca4c:	2830      	cmp	r0, #48	@ 0x30
 800ca4e:	4699      	mov	r9, r3
 800ca50:	f103 0301 	add.w	r3, r3, #1
 800ca54:	d0f9      	beq.n	800ca4a <__gethex+0x4e>
 800ca56:	f7ff ffbb 	bl	800c9d0 <__hexdig_fun>
 800ca5a:	fab0 f580 	clz	r5, r0
 800ca5e:	096d      	lsrs	r5, r5, #5
 800ca60:	f04f 0b01 	mov.w	fp, #1
 800ca64:	464a      	mov	r2, r9
 800ca66:	4616      	mov	r6, r2
 800ca68:	3201      	adds	r2, #1
 800ca6a:	7830      	ldrb	r0, [r6, #0]
 800ca6c:	f7ff ffb0 	bl	800c9d0 <__hexdig_fun>
 800ca70:	2800      	cmp	r0, #0
 800ca72:	d1f8      	bne.n	800ca66 <__gethex+0x6a>
 800ca74:	498d      	ldr	r1, [pc, #564]	@ (800ccac <__gethex+0x2b0>)
 800ca76:	2201      	movs	r2, #1
 800ca78:	4630      	mov	r0, r6
 800ca7a:	f7ff fed9 	bl	800c830 <strncmp>
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	d13f      	bne.n	800cb02 <__gethex+0x106>
 800ca82:	b944      	cbnz	r4, 800ca96 <__gethex+0x9a>
 800ca84:	1c74      	adds	r4, r6, #1
 800ca86:	4622      	mov	r2, r4
 800ca88:	4616      	mov	r6, r2
 800ca8a:	3201      	adds	r2, #1
 800ca8c:	7830      	ldrb	r0, [r6, #0]
 800ca8e:	f7ff ff9f 	bl	800c9d0 <__hexdig_fun>
 800ca92:	2800      	cmp	r0, #0
 800ca94:	d1f8      	bne.n	800ca88 <__gethex+0x8c>
 800ca96:	1ba4      	subs	r4, r4, r6
 800ca98:	00a7      	lsls	r7, r4, #2
 800ca9a:	7833      	ldrb	r3, [r6, #0]
 800ca9c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800caa0:	2b50      	cmp	r3, #80	@ 0x50
 800caa2:	d13e      	bne.n	800cb22 <__gethex+0x126>
 800caa4:	7873      	ldrb	r3, [r6, #1]
 800caa6:	2b2b      	cmp	r3, #43	@ 0x2b
 800caa8:	d033      	beq.n	800cb12 <__gethex+0x116>
 800caaa:	2b2d      	cmp	r3, #45	@ 0x2d
 800caac:	d034      	beq.n	800cb18 <__gethex+0x11c>
 800caae:	1c71      	adds	r1, r6, #1
 800cab0:	2400      	movs	r4, #0
 800cab2:	7808      	ldrb	r0, [r1, #0]
 800cab4:	f7ff ff8c 	bl	800c9d0 <__hexdig_fun>
 800cab8:	1e43      	subs	r3, r0, #1
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	2b18      	cmp	r3, #24
 800cabe:	d830      	bhi.n	800cb22 <__gethex+0x126>
 800cac0:	f1a0 0210 	sub.w	r2, r0, #16
 800cac4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cac8:	f7ff ff82 	bl	800c9d0 <__hexdig_fun>
 800cacc:	f100 3cff 	add.w	ip, r0, #4294967295
 800cad0:	fa5f fc8c 	uxtb.w	ip, ip
 800cad4:	f1bc 0f18 	cmp.w	ip, #24
 800cad8:	f04f 030a 	mov.w	r3, #10
 800cadc:	d91e      	bls.n	800cb1c <__gethex+0x120>
 800cade:	b104      	cbz	r4, 800cae2 <__gethex+0xe6>
 800cae0:	4252      	negs	r2, r2
 800cae2:	4417      	add	r7, r2
 800cae4:	f8ca 1000 	str.w	r1, [sl]
 800cae8:	b1ed      	cbz	r5, 800cb26 <__gethex+0x12a>
 800caea:	f1bb 0f00 	cmp.w	fp, #0
 800caee:	bf0c      	ite	eq
 800caf0:	2506      	moveq	r5, #6
 800caf2:	2500      	movne	r5, #0
 800caf4:	4628      	mov	r0, r5
 800caf6:	b005      	add	sp, #20
 800caf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cafc:	2500      	movs	r5, #0
 800cafe:	462c      	mov	r4, r5
 800cb00:	e7b0      	b.n	800ca64 <__gethex+0x68>
 800cb02:	2c00      	cmp	r4, #0
 800cb04:	d1c7      	bne.n	800ca96 <__gethex+0x9a>
 800cb06:	4627      	mov	r7, r4
 800cb08:	e7c7      	b.n	800ca9a <__gethex+0x9e>
 800cb0a:	464e      	mov	r6, r9
 800cb0c:	462f      	mov	r7, r5
 800cb0e:	2501      	movs	r5, #1
 800cb10:	e7c3      	b.n	800ca9a <__gethex+0x9e>
 800cb12:	2400      	movs	r4, #0
 800cb14:	1cb1      	adds	r1, r6, #2
 800cb16:	e7cc      	b.n	800cab2 <__gethex+0xb6>
 800cb18:	2401      	movs	r4, #1
 800cb1a:	e7fb      	b.n	800cb14 <__gethex+0x118>
 800cb1c:	fb03 0002 	mla	r0, r3, r2, r0
 800cb20:	e7ce      	b.n	800cac0 <__gethex+0xc4>
 800cb22:	4631      	mov	r1, r6
 800cb24:	e7de      	b.n	800cae4 <__gethex+0xe8>
 800cb26:	eba6 0309 	sub.w	r3, r6, r9
 800cb2a:	3b01      	subs	r3, #1
 800cb2c:	4629      	mov	r1, r5
 800cb2e:	2b07      	cmp	r3, #7
 800cb30:	dc0a      	bgt.n	800cb48 <__gethex+0x14c>
 800cb32:	9801      	ldr	r0, [sp, #4]
 800cb34:	f7fd ff84 	bl	800aa40 <_Balloc>
 800cb38:	4604      	mov	r4, r0
 800cb3a:	b940      	cbnz	r0, 800cb4e <__gethex+0x152>
 800cb3c:	4b5c      	ldr	r3, [pc, #368]	@ (800ccb0 <__gethex+0x2b4>)
 800cb3e:	4602      	mov	r2, r0
 800cb40:	21e4      	movs	r1, #228	@ 0xe4
 800cb42:	485c      	ldr	r0, [pc, #368]	@ (800ccb4 <__gethex+0x2b8>)
 800cb44:	f7ff fec0 	bl	800c8c8 <__assert_func>
 800cb48:	3101      	adds	r1, #1
 800cb4a:	105b      	asrs	r3, r3, #1
 800cb4c:	e7ef      	b.n	800cb2e <__gethex+0x132>
 800cb4e:	f100 0a14 	add.w	sl, r0, #20
 800cb52:	2300      	movs	r3, #0
 800cb54:	4655      	mov	r5, sl
 800cb56:	469b      	mov	fp, r3
 800cb58:	45b1      	cmp	r9, r6
 800cb5a:	d337      	bcc.n	800cbcc <__gethex+0x1d0>
 800cb5c:	f845 bb04 	str.w	fp, [r5], #4
 800cb60:	eba5 050a 	sub.w	r5, r5, sl
 800cb64:	10ad      	asrs	r5, r5, #2
 800cb66:	6125      	str	r5, [r4, #16]
 800cb68:	4658      	mov	r0, fp
 800cb6a:	f7fe f85b 	bl	800ac24 <__hi0bits>
 800cb6e:	016d      	lsls	r5, r5, #5
 800cb70:	f8d8 6000 	ldr.w	r6, [r8]
 800cb74:	1a2d      	subs	r5, r5, r0
 800cb76:	42b5      	cmp	r5, r6
 800cb78:	dd54      	ble.n	800cc24 <__gethex+0x228>
 800cb7a:	1bad      	subs	r5, r5, r6
 800cb7c:	4629      	mov	r1, r5
 800cb7e:	4620      	mov	r0, r4
 800cb80:	f7fe fbef 	bl	800b362 <__any_on>
 800cb84:	4681      	mov	r9, r0
 800cb86:	b178      	cbz	r0, 800cba8 <__gethex+0x1ac>
 800cb88:	1e6b      	subs	r3, r5, #1
 800cb8a:	1159      	asrs	r1, r3, #5
 800cb8c:	f003 021f 	and.w	r2, r3, #31
 800cb90:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cb94:	f04f 0901 	mov.w	r9, #1
 800cb98:	fa09 f202 	lsl.w	r2, r9, r2
 800cb9c:	420a      	tst	r2, r1
 800cb9e:	d003      	beq.n	800cba8 <__gethex+0x1ac>
 800cba0:	454b      	cmp	r3, r9
 800cba2:	dc36      	bgt.n	800cc12 <__gethex+0x216>
 800cba4:	f04f 0902 	mov.w	r9, #2
 800cba8:	4629      	mov	r1, r5
 800cbaa:	4620      	mov	r0, r4
 800cbac:	f7ff febe 	bl	800c92c <rshift>
 800cbb0:	442f      	add	r7, r5
 800cbb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cbb6:	42bb      	cmp	r3, r7
 800cbb8:	da42      	bge.n	800cc40 <__gethex+0x244>
 800cbba:	9801      	ldr	r0, [sp, #4]
 800cbbc:	4621      	mov	r1, r4
 800cbbe:	f7fd ff7f 	bl	800aac0 <_Bfree>
 800cbc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	6013      	str	r3, [r2, #0]
 800cbc8:	25a3      	movs	r5, #163	@ 0xa3
 800cbca:	e793      	b.n	800caf4 <__gethex+0xf8>
 800cbcc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cbd0:	2a2e      	cmp	r2, #46	@ 0x2e
 800cbd2:	d012      	beq.n	800cbfa <__gethex+0x1fe>
 800cbd4:	2b20      	cmp	r3, #32
 800cbd6:	d104      	bne.n	800cbe2 <__gethex+0x1e6>
 800cbd8:	f845 bb04 	str.w	fp, [r5], #4
 800cbdc:	f04f 0b00 	mov.w	fp, #0
 800cbe0:	465b      	mov	r3, fp
 800cbe2:	7830      	ldrb	r0, [r6, #0]
 800cbe4:	9303      	str	r3, [sp, #12]
 800cbe6:	f7ff fef3 	bl	800c9d0 <__hexdig_fun>
 800cbea:	9b03      	ldr	r3, [sp, #12]
 800cbec:	f000 000f 	and.w	r0, r0, #15
 800cbf0:	4098      	lsls	r0, r3
 800cbf2:	ea4b 0b00 	orr.w	fp, fp, r0
 800cbf6:	3304      	adds	r3, #4
 800cbf8:	e7ae      	b.n	800cb58 <__gethex+0x15c>
 800cbfa:	45b1      	cmp	r9, r6
 800cbfc:	d8ea      	bhi.n	800cbd4 <__gethex+0x1d8>
 800cbfe:	492b      	ldr	r1, [pc, #172]	@ (800ccac <__gethex+0x2b0>)
 800cc00:	9303      	str	r3, [sp, #12]
 800cc02:	2201      	movs	r2, #1
 800cc04:	4630      	mov	r0, r6
 800cc06:	f7ff fe13 	bl	800c830 <strncmp>
 800cc0a:	9b03      	ldr	r3, [sp, #12]
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	d1e1      	bne.n	800cbd4 <__gethex+0x1d8>
 800cc10:	e7a2      	b.n	800cb58 <__gethex+0x15c>
 800cc12:	1ea9      	subs	r1, r5, #2
 800cc14:	4620      	mov	r0, r4
 800cc16:	f7fe fba4 	bl	800b362 <__any_on>
 800cc1a:	2800      	cmp	r0, #0
 800cc1c:	d0c2      	beq.n	800cba4 <__gethex+0x1a8>
 800cc1e:	f04f 0903 	mov.w	r9, #3
 800cc22:	e7c1      	b.n	800cba8 <__gethex+0x1ac>
 800cc24:	da09      	bge.n	800cc3a <__gethex+0x23e>
 800cc26:	1b75      	subs	r5, r6, r5
 800cc28:	4621      	mov	r1, r4
 800cc2a:	9801      	ldr	r0, [sp, #4]
 800cc2c:	462a      	mov	r2, r5
 800cc2e:	f7fe f95f 	bl	800aef0 <__lshift>
 800cc32:	1b7f      	subs	r7, r7, r5
 800cc34:	4604      	mov	r4, r0
 800cc36:	f100 0a14 	add.w	sl, r0, #20
 800cc3a:	f04f 0900 	mov.w	r9, #0
 800cc3e:	e7b8      	b.n	800cbb2 <__gethex+0x1b6>
 800cc40:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cc44:	42bd      	cmp	r5, r7
 800cc46:	dd6f      	ble.n	800cd28 <__gethex+0x32c>
 800cc48:	1bed      	subs	r5, r5, r7
 800cc4a:	42ae      	cmp	r6, r5
 800cc4c:	dc34      	bgt.n	800ccb8 <__gethex+0x2bc>
 800cc4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc52:	2b02      	cmp	r3, #2
 800cc54:	d022      	beq.n	800cc9c <__gethex+0x2a0>
 800cc56:	2b03      	cmp	r3, #3
 800cc58:	d024      	beq.n	800cca4 <__gethex+0x2a8>
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d115      	bne.n	800cc8a <__gethex+0x28e>
 800cc5e:	42ae      	cmp	r6, r5
 800cc60:	d113      	bne.n	800cc8a <__gethex+0x28e>
 800cc62:	2e01      	cmp	r6, #1
 800cc64:	d10b      	bne.n	800cc7e <__gethex+0x282>
 800cc66:	9a02      	ldr	r2, [sp, #8]
 800cc68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cc6c:	6013      	str	r3, [r2, #0]
 800cc6e:	2301      	movs	r3, #1
 800cc70:	6123      	str	r3, [r4, #16]
 800cc72:	f8ca 3000 	str.w	r3, [sl]
 800cc76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc78:	2562      	movs	r5, #98	@ 0x62
 800cc7a:	601c      	str	r4, [r3, #0]
 800cc7c:	e73a      	b.n	800caf4 <__gethex+0xf8>
 800cc7e:	1e71      	subs	r1, r6, #1
 800cc80:	4620      	mov	r0, r4
 800cc82:	f7fe fb6e 	bl	800b362 <__any_on>
 800cc86:	2800      	cmp	r0, #0
 800cc88:	d1ed      	bne.n	800cc66 <__gethex+0x26a>
 800cc8a:	9801      	ldr	r0, [sp, #4]
 800cc8c:	4621      	mov	r1, r4
 800cc8e:	f7fd ff17 	bl	800aac0 <_Bfree>
 800cc92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc94:	2300      	movs	r3, #0
 800cc96:	6013      	str	r3, [r2, #0]
 800cc98:	2550      	movs	r5, #80	@ 0x50
 800cc9a:	e72b      	b.n	800caf4 <__gethex+0xf8>
 800cc9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d1f3      	bne.n	800cc8a <__gethex+0x28e>
 800cca2:	e7e0      	b.n	800cc66 <__gethex+0x26a>
 800cca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d1dd      	bne.n	800cc66 <__gethex+0x26a>
 800ccaa:	e7ee      	b.n	800cc8a <__gethex+0x28e>
 800ccac:	0800d480 	.word	0x0800d480
 800ccb0:	0800d319 	.word	0x0800d319
 800ccb4:	0800d62e 	.word	0x0800d62e
 800ccb8:	1e6f      	subs	r7, r5, #1
 800ccba:	f1b9 0f00 	cmp.w	r9, #0
 800ccbe:	d130      	bne.n	800cd22 <__gethex+0x326>
 800ccc0:	b127      	cbz	r7, 800cccc <__gethex+0x2d0>
 800ccc2:	4639      	mov	r1, r7
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	f7fe fb4c 	bl	800b362 <__any_on>
 800ccca:	4681      	mov	r9, r0
 800cccc:	117a      	asrs	r2, r7, #5
 800ccce:	2301      	movs	r3, #1
 800ccd0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ccd4:	f007 071f 	and.w	r7, r7, #31
 800ccd8:	40bb      	lsls	r3, r7
 800ccda:	4213      	tst	r3, r2
 800ccdc:	4629      	mov	r1, r5
 800ccde:	4620      	mov	r0, r4
 800cce0:	bf18      	it	ne
 800cce2:	f049 0902 	orrne.w	r9, r9, #2
 800cce6:	f7ff fe21 	bl	800c92c <rshift>
 800ccea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ccee:	1b76      	subs	r6, r6, r5
 800ccf0:	2502      	movs	r5, #2
 800ccf2:	f1b9 0f00 	cmp.w	r9, #0
 800ccf6:	d047      	beq.n	800cd88 <__gethex+0x38c>
 800ccf8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ccfc:	2b02      	cmp	r3, #2
 800ccfe:	d015      	beq.n	800cd2c <__gethex+0x330>
 800cd00:	2b03      	cmp	r3, #3
 800cd02:	d017      	beq.n	800cd34 <__gethex+0x338>
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d109      	bne.n	800cd1c <__gethex+0x320>
 800cd08:	f019 0f02 	tst.w	r9, #2
 800cd0c:	d006      	beq.n	800cd1c <__gethex+0x320>
 800cd0e:	f8da 3000 	ldr.w	r3, [sl]
 800cd12:	ea49 0903 	orr.w	r9, r9, r3
 800cd16:	f019 0f01 	tst.w	r9, #1
 800cd1a:	d10e      	bne.n	800cd3a <__gethex+0x33e>
 800cd1c:	f045 0510 	orr.w	r5, r5, #16
 800cd20:	e032      	b.n	800cd88 <__gethex+0x38c>
 800cd22:	f04f 0901 	mov.w	r9, #1
 800cd26:	e7d1      	b.n	800cccc <__gethex+0x2d0>
 800cd28:	2501      	movs	r5, #1
 800cd2a:	e7e2      	b.n	800ccf2 <__gethex+0x2f6>
 800cd2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd2e:	f1c3 0301 	rsb	r3, r3, #1
 800cd32:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cd34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d0f0      	beq.n	800cd1c <__gethex+0x320>
 800cd3a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cd3e:	f104 0314 	add.w	r3, r4, #20
 800cd42:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cd46:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cd4a:	f04f 0c00 	mov.w	ip, #0
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd54:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cd58:	d01b      	beq.n	800cd92 <__gethex+0x396>
 800cd5a:	3201      	adds	r2, #1
 800cd5c:	6002      	str	r2, [r0, #0]
 800cd5e:	2d02      	cmp	r5, #2
 800cd60:	f104 0314 	add.w	r3, r4, #20
 800cd64:	d13c      	bne.n	800cde0 <__gethex+0x3e4>
 800cd66:	f8d8 2000 	ldr.w	r2, [r8]
 800cd6a:	3a01      	subs	r2, #1
 800cd6c:	42b2      	cmp	r2, r6
 800cd6e:	d109      	bne.n	800cd84 <__gethex+0x388>
 800cd70:	1171      	asrs	r1, r6, #5
 800cd72:	2201      	movs	r2, #1
 800cd74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cd78:	f006 061f 	and.w	r6, r6, #31
 800cd7c:	fa02 f606 	lsl.w	r6, r2, r6
 800cd80:	421e      	tst	r6, r3
 800cd82:	d13a      	bne.n	800cdfa <__gethex+0x3fe>
 800cd84:	f045 0520 	orr.w	r5, r5, #32
 800cd88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd8a:	601c      	str	r4, [r3, #0]
 800cd8c:	9b02      	ldr	r3, [sp, #8]
 800cd8e:	601f      	str	r7, [r3, #0]
 800cd90:	e6b0      	b.n	800caf4 <__gethex+0xf8>
 800cd92:	4299      	cmp	r1, r3
 800cd94:	f843 cc04 	str.w	ip, [r3, #-4]
 800cd98:	d8d9      	bhi.n	800cd4e <__gethex+0x352>
 800cd9a:	68a3      	ldr	r3, [r4, #8]
 800cd9c:	459b      	cmp	fp, r3
 800cd9e:	db17      	blt.n	800cdd0 <__gethex+0x3d4>
 800cda0:	6861      	ldr	r1, [r4, #4]
 800cda2:	9801      	ldr	r0, [sp, #4]
 800cda4:	3101      	adds	r1, #1
 800cda6:	f7fd fe4b 	bl	800aa40 <_Balloc>
 800cdaa:	4681      	mov	r9, r0
 800cdac:	b918      	cbnz	r0, 800cdb6 <__gethex+0x3ba>
 800cdae:	4b1a      	ldr	r3, [pc, #104]	@ (800ce18 <__gethex+0x41c>)
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	2184      	movs	r1, #132	@ 0x84
 800cdb4:	e6c5      	b.n	800cb42 <__gethex+0x146>
 800cdb6:	6922      	ldr	r2, [r4, #16]
 800cdb8:	3202      	adds	r2, #2
 800cdba:	f104 010c 	add.w	r1, r4, #12
 800cdbe:	0092      	lsls	r2, r2, #2
 800cdc0:	300c      	adds	r0, #12
 800cdc2:	f7fc feda 	bl	8009b7a <memcpy>
 800cdc6:	4621      	mov	r1, r4
 800cdc8:	9801      	ldr	r0, [sp, #4]
 800cdca:	f7fd fe79 	bl	800aac0 <_Bfree>
 800cdce:	464c      	mov	r4, r9
 800cdd0:	6923      	ldr	r3, [r4, #16]
 800cdd2:	1c5a      	adds	r2, r3, #1
 800cdd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cdd8:	6122      	str	r2, [r4, #16]
 800cdda:	2201      	movs	r2, #1
 800cddc:	615a      	str	r2, [r3, #20]
 800cdde:	e7be      	b.n	800cd5e <__gethex+0x362>
 800cde0:	6922      	ldr	r2, [r4, #16]
 800cde2:	455a      	cmp	r2, fp
 800cde4:	dd0b      	ble.n	800cdfe <__gethex+0x402>
 800cde6:	2101      	movs	r1, #1
 800cde8:	4620      	mov	r0, r4
 800cdea:	f7ff fd9f 	bl	800c92c <rshift>
 800cdee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cdf2:	3701      	adds	r7, #1
 800cdf4:	42bb      	cmp	r3, r7
 800cdf6:	f6ff aee0 	blt.w	800cbba <__gethex+0x1be>
 800cdfa:	2501      	movs	r5, #1
 800cdfc:	e7c2      	b.n	800cd84 <__gethex+0x388>
 800cdfe:	f016 061f 	ands.w	r6, r6, #31
 800ce02:	d0fa      	beq.n	800cdfa <__gethex+0x3fe>
 800ce04:	4453      	add	r3, sl
 800ce06:	f1c6 0620 	rsb	r6, r6, #32
 800ce0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ce0e:	f7fd ff09 	bl	800ac24 <__hi0bits>
 800ce12:	42b0      	cmp	r0, r6
 800ce14:	dbe7      	blt.n	800cde6 <__gethex+0x3ea>
 800ce16:	e7f0      	b.n	800cdfa <__gethex+0x3fe>
 800ce18:	0800d319 	.word	0x0800d319

0800ce1c <L_shift>:
 800ce1c:	f1c2 0208 	rsb	r2, r2, #8
 800ce20:	0092      	lsls	r2, r2, #2
 800ce22:	b570      	push	{r4, r5, r6, lr}
 800ce24:	f1c2 0620 	rsb	r6, r2, #32
 800ce28:	6843      	ldr	r3, [r0, #4]
 800ce2a:	6804      	ldr	r4, [r0, #0]
 800ce2c:	fa03 f506 	lsl.w	r5, r3, r6
 800ce30:	432c      	orrs	r4, r5
 800ce32:	40d3      	lsrs	r3, r2
 800ce34:	6004      	str	r4, [r0, #0]
 800ce36:	f840 3f04 	str.w	r3, [r0, #4]!
 800ce3a:	4288      	cmp	r0, r1
 800ce3c:	d3f4      	bcc.n	800ce28 <L_shift+0xc>
 800ce3e:	bd70      	pop	{r4, r5, r6, pc}

0800ce40 <__match>:
 800ce40:	b530      	push	{r4, r5, lr}
 800ce42:	6803      	ldr	r3, [r0, #0]
 800ce44:	3301      	adds	r3, #1
 800ce46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce4a:	b914      	cbnz	r4, 800ce52 <__match+0x12>
 800ce4c:	6003      	str	r3, [r0, #0]
 800ce4e:	2001      	movs	r0, #1
 800ce50:	bd30      	pop	{r4, r5, pc}
 800ce52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce56:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ce5a:	2d19      	cmp	r5, #25
 800ce5c:	bf98      	it	ls
 800ce5e:	3220      	addls	r2, #32
 800ce60:	42a2      	cmp	r2, r4
 800ce62:	d0f0      	beq.n	800ce46 <__match+0x6>
 800ce64:	2000      	movs	r0, #0
 800ce66:	e7f3      	b.n	800ce50 <__match+0x10>

0800ce68 <__hexnan>:
 800ce68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce6c:	680b      	ldr	r3, [r1, #0]
 800ce6e:	6801      	ldr	r1, [r0, #0]
 800ce70:	115e      	asrs	r6, r3, #5
 800ce72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ce76:	f013 031f 	ands.w	r3, r3, #31
 800ce7a:	b087      	sub	sp, #28
 800ce7c:	bf18      	it	ne
 800ce7e:	3604      	addne	r6, #4
 800ce80:	2500      	movs	r5, #0
 800ce82:	1f37      	subs	r7, r6, #4
 800ce84:	4682      	mov	sl, r0
 800ce86:	4690      	mov	r8, r2
 800ce88:	9301      	str	r3, [sp, #4]
 800ce8a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ce8e:	46b9      	mov	r9, r7
 800ce90:	463c      	mov	r4, r7
 800ce92:	9502      	str	r5, [sp, #8]
 800ce94:	46ab      	mov	fp, r5
 800ce96:	784a      	ldrb	r2, [r1, #1]
 800ce98:	1c4b      	adds	r3, r1, #1
 800ce9a:	9303      	str	r3, [sp, #12]
 800ce9c:	b342      	cbz	r2, 800cef0 <__hexnan+0x88>
 800ce9e:	4610      	mov	r0, r2
 800cea0:	9105      	str	r1, [sp, #20]
 800cea2:	9204      	str	r2, [sp, #16]
 800cea4:	f7ff fd94 	bl	800c9d0 <__hexdig_fun>
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	d151      	bne.n	800cf50 <__hexnan+0xe8>
 800ceac:	9a04      	ldr	r2, [sp, #16]
 800ceae:	9905      	ldr	r1, [sp, #20]
 800ceb0:	2a20      	cmp	r2, #32
 800ceb2:	d818      	bhi.n	800cee6 <__hexnan+0x7e>
 800ceb4:	9b02      	ldr	r3, [sp, #8]
 800ceb6:	459b      	cmp	fp, r3
 800ceb8:	dd13      	ble.n	800cee2 <__hexnan+0x7a>
 800ceba:	454c      	cmp	r4, r9
 800cebc:	d206      	bcs.n	800cecc <__hexnan+0x64>
 800cebe:	2d07      	cmp	r5, #7
 800cec0:	dc04      	bgt.n	800cecc <__hexnan+0x64>
 800cec2:	462a      	mov	r2, r5
 800cec4:	4649      	mov	r1, r9
 800cec6:	4620      	mov	r0, r4
 800cec8:	f7ff ffa8 	bl	800ce1c <L_shift>
 800cecc:	4544      	cmp	r4, r8
 800cece:	d952      	bls.n	800cf76 <__hexnan+0x10e>
 800ced0:	2300      	movs	r3, #0
 800ced2:	f1a4 0904 	sub.w	r9, r4, #4
 800ced6:	f844 3c04 	str.w	r3, [r4, #-4]
 800ceda:	f8cd b008 	str.w	fp, [sp, #8]
 800cede:	464c      	mov	r4, r9
 800cee0:	461d      	mov	r5, r3
 800cee2:	9903      	ldr	r1, [sp, #12]
 800cee4:	e7d7      	b.n	800ce96 <__hexnan+0x2e>
 800cee6:	2a29      	cmp	r2, #41	@ 0x29
 800cee8:	d157      	bne.n	800cf9a <__hexnan+0x132>
 800ceea:	3102      	adds	r1, #2
 800ceec:	f8ca 1000 	str.w	r1, [sl]
 800cef0:	f1bb 0f00 	cmp.w	fp, #0
 800cef4:	d051      	beq.n	800cf9a <__hexnan+0x132>
 800cef6:	454c      	cmp	r4, r9
 800cef8:	d206      	bcs.n	800cf08 <__hexnan+0xa0>
 800cefa:	2d07      	cmp	r5, #7
 800cefc:	dc04      	bgt.n	800cf08 <__hexnan+0xa0>
 800cefe:	462a      	mov	r2, r5
 800cf00:	4649      	mov	r1, r9
 800cf02:	4620      	mov	r0, r4
 800cf04:	f7ff ff8a 	bl	800ce1c <L_shift>
 800cf08:	4544      	cmp	r4, r8
 800cf0a:	d936      	bls.n	800cf7a <__hexnan+0x112>
 800cf0c:	f1a8 0204 	sub.w	r2, r8, #4
 800cf10:	4623      	mov	r3, r4
 800cf12:	f853 1b04 	ldr.w	r1, [r3], #4
 800cf16:	f842 1f04 	str.w	r1, [r2, #4]!
 800cf1a:	429f      	cmp	r7, r3
 800cf1c:	d2f9      	bcs.n	800cf12 <__hexnan+0xaa>
 800cf1e:	1b3b      	subs	r3, r7, r4
 800cf20:	f023 0303 	bic.w	r3, r3, #3
 800cf24:	3304      	adds	r3, #4
 800cf26:	3401      	adds	r4, #1
 800cf28:	3e03      	subs	r6, #3
 800cf2a:	42b4      	cmp	r4, r6
 800cf2c:	bf88      	it	hi
 800cf2e:	2304      	movhi	r3, #4
 800cf30:	4443      	add	r3, r8
 800cf32:	2200      	movs	r2, #0
 800cf34:	f843 2b04 	str.w	r2, [r3], #4
 800cf38:	429f      	cmp	r7, r3
 800cf3a:	d2fb      	bcs.n	800cf34 <__hexnan+0xcc>
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	b91b      	cbnz	r3, 800cf48 <__hexnan+0xe0>
 800cf40:	4547      	cmp	r7, r8
 800cf42:	d128      	bne.n	800cf96 <__hexnan+0x12e>
 800cf44:	2301      	movs	r3, #1
 800cf46:	603b      	str	r3, [r7, #0]
 800cf48:	2005      	movs	r0, #5
 800cf4a:	b007      	add	sp, #28
 800cf4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf50:	3501      	adds	r5, #1
 800cf52:	2d08      	cmp	r5, #8
 800cf54:	f10b 0b01 	add.w	fp, fp, #1
 800cf58:	dd06      	ble.n	800cf68 <__hexnan+0x100>
 800cf5a:	4544      	cmp	r4, r8
 800cf5c:	d9c1      	bls.n	800cee2 <__hexnan+0x7a>
 800cf5e:	2300      	movs	r3, #0
 800cf60:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf64:	2501      	movs	r5, #1
 800cf66:	3c04      	subs	r4, #4
 800cf68:	6822      	ldr	r2, [r4, #0]
 800cf6a:	f000 000f 	and.w	r0, r0, #15
 800cf6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cf72:	6020      	str	r0, [r4, #0]
 800cf74:	e7b5      	b.n	800cee2 <__hexnan+0x7a>
 800cf76:	2508      	movs	r5, #8
 800cf78:	e7b3      	b.n	800cee2 <__hexnan+0x7a>
 800cf7a:	9b01      	ldr	r3, [sp, #4]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d0dd      	beq.n	800cf3c <__hexnan+0xd4>
 800cf80:	f1c3 0320 	rsb	r3, r3, #32
 800cf84:	f04f 32ff 	mov.w	r2, #4294967295
 800cf88:	40da      	lsrs	r2, r3
 800cf8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cf8e:	4013      	ands	r3, r2
 800cf90:	f846 3c04 	str.w	r3, [r6, #-4]
 800cf94:	e7d2      	b.n	800cf3c <__hexnan+0xd4>
 800cf96:	3f04      	subs	r7, #4
 800cf98:	e7d0      	b.n	800cf3c <__hexnan+0xd4>
 800cf9a:	2004      	movs	r0, #4
 800cf9c:	e7d5      	b.n	800cf4a <__hexnan+0xe2>

0800cf9e <__ascii_mbtowc>:
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	b901      	cbnz	r1, 800cfa4 <__ascii_mbtowc+0x6>
 800cfa2:	a901      	add	r1, sp, #4
 800cfa4:	b142      	cbz	r2, 800cfb8 <__ascii_mbtowc+0x1a>
 800cfa6:	b14b      	cbz	r3, 800cfbc <__ascii_mbtowc+0x1e>
 800cfa8:	7813      	ldrb	r3, [r2, #0]
 800cfaa:	600b      	str	r3, [r1, #0]
 800cfac:	7812      	ldrb	r2, [r2, #0]
 800cfae:	1e10      	subs	r0, r2, #0
 800cfb0:	bf18      	it	ne
 800cfb2:	2001      	movne	r0, #1
 800cfb4:	b002      	add	sp, #8
 800cfb6:	4770      	bx	lr
 800cfb8:	4610      	mov	r0, r2
 800cfba:	e7fb      	b.n	800cfb4 <__ascii_mbtowc+0x16>
 800cfbc:	f06f 0001 	mvn.w	r0, #1
 800cfc0:	e7f8      	b.n	800cfb4 <__ascii_mbtowc+0x16>

0800cfc2 <_realloc_r>:
 800cfc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfc6:	4680      	mov	r8, r0
 800cfc8:	4615      	mov	r5, r2
 800cfca:	460c      	mov	r4, r1
 800cfcc:	b921      	cbnz	r1, 800cfd8 <_realloc_r+0x16>
 800cfce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfd2:	4611      	mov	r1, r2
 800cfd4:	f7fd bca8 	b.w	800a928 <_malloc_r>
 800cfd8:	b92a      	cbnz	r2, 800cfe6 <_realloc_r+0x24>
 800cfda:	f7fd fc31 	bl	800a840 <_free_r>
 800cfde:	2400      	movs	r4, #0
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfe6:	f000 f840 	bl	800d06a <_malloc_usable_size_r>
 800cfea:	4285      	cmp	r5, r0
 800cfec:	4606      	mov	r6, r0
 800cfee:	d802      	bhi.n	800cff6 <_realloc_r+0x34>
 800cff0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cff4:	d8f4      	bhi.n	800cfe0 <_realloc_r+0x1e>
 800cff6:	4629      	mov	r1, r5
 800cff8:	4640      	mov	r0, r8
 800cffa:	f7fd fc95 	bl	800a928 <_malloc_r>
 800cffe:	4607      	mov	r7, r0
 800d000:	2800      	cmp	r0, #0
 800d002:	d0ec      	beq.n	800cfde <_realloc_r+0x1c>
 800d004:	42b5      	cmp	r5, r6
 800d006:	462a      	mov	r2, r5
 800d008:	4621      	mov	r1, r4
 800d00a:	bf28      	it	cs
 800d00c:	4632      	movcs	r2, r6
 800d00e:	f7fc fdb4 	bl	8009b7a <memcpy>
 800d012:	4621      	mov	r1, r4
 800d014:	4640      	mov	r0, r8
 800d016:	f7fd fc13 	bl	800a840 <_free_r>
 800d01a:	463c      	mov	r4, r7
 800d01c:	e7e0      	b.n	800cfe0 <_realloc_r+0x1e>

0800d01e <__ascii_wctomb>:
 800d01e:	4603      	mov	r3, r0
 800d020:	4608      	mov	r0, r1
 800d022:	b141      	cbz	r1, 800d036 <__ascii_wctomb+0x18>
 800d024:	2aff      	cmp	r2, #255	@ 0xff
 800d026:	d904      	bls.n	800d032 <__ascii_wctomb+0x14>
 800d028:	228a      	movs	r2, #138	@ 0x8a
 800d02a:	601a      	str	r2, [r3, #0]
 800d02c:	f04f 30ff 	mov.w	r0, #4294967295
 800d030:	4770      	bx	lr
 800d032:	700a      	strb	r2, [r1, #0]
 800d034:	2001      	movs	r0, #1
 800d036:	4770      	bx	lr

0800d038 <fiprintf>:
 800d038:	b40e      	push	{r1, r2, r3}
 800d03a:	b503      	push	{r0, r1, lr}
 800d03c:	4601      	mov	r1, r0
 800d03e:	ab03      	add	r3, sp, #12
 800d040:	4805      	ldr	r0, [pc, #20]	@ (800d058 <fiprintf+0x20>)
 800d042:	f853 2b04 	ldr.w	r2, [r3], #4
 800d046:	6800      	ldr	r0, [r0, #0]
 800d048:	9301      	str	r3, [sp, #4]
 800d04a:	f7ff f9b1 	bl	800c3b0 <_vfiprintf_r>
 800d04e:	b002      	add	sp, #8
 800d050:	f85d eb04 	ldr.w	lr, [sp], #4
 800d054:	b003      	add	sp, #12
 800d056:	4770      	bx	lr
 800d058:	2000001c 	.word	0x2000001c

0800d05c <abort>:
 800d05c:	b508      	push	{r3, lr}
 800d05e:	2006      	movs	r0, #6
 800d060:	f000 f834 	bl	800d0cc <raise>
 800d064:	2001      	movs	r0, #1
 800d066:	f7f4 fbd7 	bl	8001818 <_exit>

0800d06a <_malloc_usable_size_r>:
 800d06a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d06e:	1f18      	subs	r0, r3, #4
 800d070:	2b00      	cmp	r3, #0
 800d072:	bfbc      	itt	lt
 800d074:	580b      	ldrlt	r3, [r1, r0]
 800d076:	18c0      	addlt	r0, r0, r3
 800d078:	4770      	bx	lr

0800d07a <_raise_r>:
 800d07a:	291f      	cmp	r1, #31
 800d07c:	b538      	push	{r3, r4, r5, lr}
 800d07e:	4605      	mov	r5, r0
 800d080:	460c      	mov	r4, r1
 800d082:	d904      	bls.n	800d08e <_raise_r+0x14>
 800d084:	2316      	movs	r3, #22
 800d086:	6003      	str	r3, [r0, #0]
 800d088:	f04f 30ff 	mov.w	r0, #4294967295
 800d08c:	bd38      	pop	{r3, r4, r5, pc}
 800d08e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d090:	b112      	cbz	r2, 800d098 <_raise_r+0x1e>
 800d092:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d096:	b94b      	cbnz	r3, 800d0ac <_raise_r+0x32>
 800d098:	4628      	mov	r0, r5
 800d09a:	f000 f831 	bl	800d100 <_getpid_r>
 800d09e:	4622      	mov	r2, r4
 800d0a0:	4601      	mov	r1, r0
 800d0a2:	4628      	mov	r0, r5
 800d0a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0a8:	f000 b818 	b.w	800d0dc <_kill_r>
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d00a      	beq.n	800d0c6 <_raise_r+0x4c>
 800d0b0:	1c59      	adds	r1, r3, #1
 800d0b2:	d103      	bne.n	800d0bc <_raise_r+0x42>
 800d0b4:	2316      	movs	r3, #22
 800d0b6:	6003      	str	r3, [r0, #0]
 800d0b8:	2001      	movs	r0, #1
 800d0ba:	e7e7      	b.n	800d08c <_raise_r+0x12>
 800d0bc:	2100      	movs	r1, #0
 800d0be:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	4798      	blx	r3
 800d0c6:	2000      	movs	r0, #0
 800d0c8:	e7e0      	b.n	800d08c <_raise_r+0x12>
	...

0800d0cc <raise>:
 800d0cc:	4b02      	ldr	r3, [pc, #8]	@ (800d0d8 <raise+0xc>)
 800d0ce:	4601      	mov	r1, r0
 800d0d0:	6818      	ldr	r0, [r3, #0]
 800d0d2:	f7ff bfd2 	b.w	800d07a <_raise_r>
 800d0d6:	bf00      	nop
 800d0d8:	2000001c 	.word	0x2000001c

0800d0dc <_kill_r>:
 800d0dc:	b538      	push	{r3, r4, r5, lr}
 800d0de:	4d07      	ldr	r5, [pc, #28]	@ (800d0fc <_kill_r+0x20>)
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	4604      	mov	r4, r0
 800d0e4:	4608      	mov	r0, r1
 800d0e6:	4611      	mov	r1, r2
 800d0e8:	602b      	str	r3, [r5, #0]
 800d0ea:	f7f4 fb85 	bl	80017f8 <_kill>
 800d0ee:	1c43      	adds	r3, r0, #1
 800d0f0:	d102      	bne.n	800d0f8 <_kill_r+0x1c>
 800d0f2:	682b      	ldr	r3, [r5, #0]
 800d0f4:	b103      	cbz	r3, 800d0f8 <_kill_r+0x1c>
 800d0f6:	6023      	str	r3, [r4, #0]
 800d0f8:	bd38      	pop	{r3, r4, r5, pc}
 800d0fa:	bf00      	nop
 800d0fc:	200041a8 	.word	0x200041a8

0800d100 <_getpid_r>:
 800d100:	f7f4 bb72 	b.w	80017e8 <_getpid>

0800d104 <_init>:
 800d104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d106:	bf00      	nop
 800d108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d10a:	bc08      	pop	{r3}
 800d10c:	469e      	mov	lr, r3
 800d10e:	4770      	bx	lr

0800d110 <_fini>:
 800d110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d112:	bf00      	nop
 800d114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d116:	bc08      	pop	{r3}
 800d118:	469e      	mov	lr, r3
 800d11a:	4770      	bx	lr
